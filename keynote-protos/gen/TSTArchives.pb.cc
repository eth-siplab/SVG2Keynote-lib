// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSTArchives.proto

#include "TSTArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TST {
constexpr CellID::CellID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : expanded_coord_(nullptr)
  , packeddata_(0u){}
struct CellIDDefaultTypeInternal {
  constexpr CellIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellIDDefaultTypeInternal() {}
  union {
    CellID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellIDDefaultTypeInternal _CellID_default_instance_;
constexpr CellUIDLookupListArchive::CellUIDLookupListArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_indexes_()
  , row_indexes_()
  , column_uids_(nullptr)
  , row_uids_(nullptr){}
struct CellUIDLookupListArchiveDefaultTypeInternal {
  constexpr CellUIDLookupListArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellUIDLookupListArchiveDefaultTypeInternal() {}
  union {
    CellUIDLookupListArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellUIDLookupListArchiveDefaultTypeInternal _CellUIDLookupListArchive_default_instance_;
constexpr CellUIDListArchive::CellUIDListArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_uids_()
  , column_uids_()
  , compressed_row_indexes_()
  , compressed_column_indexes_()
  , uncompressed_lookup_list_(nullptr){}
struct CellUIDListArchiveDefaultTypeInternal {
  constexpr CellUIDListArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellUIDListArchiveDefaultTypeInternal() {}
  union {
    CellUIDListArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellUIDListArchiveDefaultTypeInternal _CellUIDListArchive_default_instance_;
constexpr TableSize::TableSize(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : packeddata_(0u)
  , num_columns_(0u)
  , num_rows_(0u){}
struct TableSizeDefaultTypeInternal {
  constexpr TableSizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableSizeDefaultTypeInternal() {}
  union {
    TableSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableSizeDefaultTypeInternal _TableSize_default_instance_;
constexpr ExpandedTableSize::ExpandedTableSize(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num_columns_(0u)
  , num_rows_(0u){}
struct ExpandedTableSizeDefaultTypeInternal {
  constexpr ExpandedTableSizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExpandedTableSizeDefaultTypeInternal() {}
  union {
    ExpandedTableSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExpandedTableSizeDefaultTypeInternal _ExpandedTableSize_default_instance_;
constexpr CellRange::CellRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : origin_(nullptr)
  , size_(nullptr){}
struct CellRangeDefaultTypeInternal {
  constexpr CellRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellRangeDefaultTypeInternal() {}
  union {
    CellRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellRangeDefaultTypeInternal _CellRange_default_instance_;
constexpr ExpandedCellRange::ExpandedCellRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : origin_(nullptr)
  , size_(nullptr){}
struct ExpandedCellRangeDefaultTypeInternal {
  constexpr ExpandedCellRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExpandedCellRangeDefaultTypeInternal() {}
  union {
    ExpandedCellRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExpandedCellRangeDefaultTypeInternal _ExpandedCellRange_default_instance_;
constexpr TableSelection::TableSelection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cellrange_(nullptr)
  , extendedcellrange_(nullptr)
  , extendedcellrangevalid_(false)
  , selection_type_(0)
{}
struct TableSelectionDefaultTypeInternal {
  constexpr TableSelectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableSelectionDefaultTypeInternal() {}
  union {
    TableSelection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableSelectionDefaultTypeInternal _TableSelection_default_instance_;
constexpr TileRowInfo::TileRowInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_storage_buffer_pre_bnc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cell_offsets_pre_bnc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cell_storage_buffer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cell_offsets_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tile_row_index_(0u)
  , cell_count_(0u)
  , storage_version_(0u)
  , has_wide_offsets_(false){}
struct TileRowInfoDefaultTypeInternal {
  constexpr TileRowInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileRowInfoDefaultTypeInternal() {}
  union {
    TileRowInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileRowInfoDefaultTypeInternal _TileRowInfo_default_instance_;
constexpr Tile::Tile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rowinfos_()
  , maxcolumn_(0u)
  , maxrow_(0u)
  , numcells_(0u)
  , numrows_(0u)
  , storage_version_(0u)
  , last_saved_in_bnc_(false)
  , should_use_wide_rows_(false){}
struct TileDefaultTypeInternal {
  constexpr TileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileDefaultTypeInternal() {}
  union {
    Tile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileDefaultTypeInternal _Tile_default_instance_;
constexpr TileStorage_Tile::TileStorage_Tile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tile_(nullptr)
  , tileid_(0u){}
struct TileStorage_TileDefaultTypeInternal {
  constexpr TileStorage_TileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileStorage_TileDefaultTypeInternal() {}
  union {
    TileStorage_Tile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileStorage_TileDefaultTypeInternal _TileStorage_Tile_default_instance_;
constexpr TileStorage::TileStorage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tiles_()
  , tile_size_(0u)
  , should_use_wide_rows_(false){}
struct TileStorageDefaultTypeInternal {
  constexpr TileStorageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileStorageDefaultTypeInternal() {}
  union {
    TileStorage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileStorageDefaultTypeInternal _TileStorage_default_instance_;
constexpr PopUpMenuModel_CellValue::PopUpMenuModel_CellValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : boolean_value_(nullptr)
  , date_value_(nullptr)
  , number_value_(nullptr)
  , string_value_(nullptr)
  , cell_value_type_(1)
{}
struct PopUpMenuModel_CellValueDefaultTypeInternal {
  constexpr PopUpMenuModel_CellValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PopUpMenuModel_CellValueDefaultTypeInternal() {}
  union {
    PopUpMenuModel_CellValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PopUpMenuModel_CellValueDefaultTypeInternal _PopUpMenuModel_CellValue_default_instance_;
constexpr PopUpMenuModel::PopUpMenuModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_()
  , tsce_item_(){}
struct PopUpMenuModelDefaultTypeInternal {
  constexpr PopUpMenuModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PopUpMenuModelDefaultTypeInternal() {}
  union {
    PopUpMenuModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PopUpMenuModelDefaultTypeInternal _PopUpMenuModel_default_instance_;
constexpr ImportWarningSetArchive_FormulaImportWarning::ImportWarningSetArchive_FormulaImportWarning(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : original_formula_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , supplementary_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , formula_warning_type_int_(0)
  , formula_warning_type_(1)
{}
struct ImportWarningSetArchive_FormulaImportWarningDefaultTypeInternal {
  constexpr ImportWarningSetArchive_FormulaImportWarningDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImportWarningSetArchive_FormulaImportWarningDefaultTypeInternal() {}
  union {
    ImportWarningSetArchive_FormulaImportWarning _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImportWarningSetArchive_FormulaImportWarningDefaultTypeInternal _ImportWarningSetArchive_FormulaImportWarning_default_instance_;
constexpr ImportWarningSetArchive::ImportWarningSetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : original_data_format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , formula_import_warning_(nullptr)
  , cond_format_above_avg_equal_avg_(false)
  , cond_format_above_avg_std_dev_(false)
  , cond_format_complex_formula_(false)
  , cond_format_contains_errors_(false)
  , cond_format_expr_(false)
  , cond_format_not_contains_errors_(false)
  , cond_format_parameters_not_all_same_type_(false)
  , cond_format_stop_if_true_(false)
  , cond_format_unsupported_operator_(false)
  , cond_format_unsupported_styling_(false)
  , cond_format_unsupported_time_period_(false)
  , error_cell_with_no_formula_(false)
  , unsupported_cond_format_(false)
  , formula_warning_filtered_column_formula_not_copied_(false)
  , duration_format_range_changed_(false){}
struct ImportWarningSetArchiveDefaultTypeInternal {
  constexpr ImportWarningSetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImportWarningSetArchiveDefaultTypeInternal() {}
  union {
    ImportWarningSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImportWarningSetArchiveDefaultTypeInternal _ImportWarningSetArchive_default_instance_;
constexpr CellRefImportWarningSetPairArchive::CellRefImportWarningSetPairArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_ref_(nullptr)
  , warning_set_(nullptr){}
struct CellRefImportWarningSetPairArchiveDefaultTypeInternal {
  constexpr CellRefImportWarningSetPairArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellRefImportWarningSetPairArchiveDefaultTypeInternal() {}
  union {
    CellRefImportWarningSetPairArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellRefImportWarningSetPairArchiveDefaultTypeInternal _CellRefImportWarningSetPairArchive_default_instance_;
constexpr ImportWarningSetByCellRefArchive::ImportWarningSetByCellRefArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cellref_warning_set_pair_(){}
struct ImportWarningSetByCellRefArchiveDefaultTypeInternal {
  constexpr ImportWarningSetByCellRefArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImportWarningSetByCellRefArchiveDefaultTypeInternal() {}
  union {
    ImportWarningSetByCellRefArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImportWarningSetByCellRefArchiveDefaultTypeInternal _ImportWarningSetByCellRefArchive_default_instance_;
constexpr TableDataList_ListEntry::TableDataList_ListEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reference_(nullptr)
  , formula_(nullptr)
  , format_(nullptr)
  , custom_format_(nullptr)
  , rich_text_payload_(nullptr)
  , comment_storage_(nullptr)
  , import_warning_set_(nullptr)
  , cell_spec_(nullptr)
  , key_(0u)
  , refcount_(0u){}
struct TableDataList_ListEntryDefaultTypeInternal {
  constexpr TableDataList_ListEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableDataList_ListEntryDefaultTypeInternal() {}
  union {
    TableDataList_ListEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableDataList_ListEntryDefaultTypeInternal _TableDataList_ListEntry_default_instance_;
constexpr TableDataList::TableDataList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , segments_()
  , nextlistid_(0u)
  , listtype_(1)
{}
struct TableDataListDefaultTypeInternal {
  constexpr TableDataListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableDataListDefaultTypeInternal() {}
  union {
    TableDataList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableDataListDefaultTypeInternal _TableDataList_default_instance_;
constexpr TableDataListSegment::TableDataListSegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , key_range_(nullptr)
  , list_type_(1)
{}
struct TableDataListSegmentDefaultTypeInternal {
  constexpr TableDataListSegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableDataListSegmentDefaultTypeInternal() {}
  union {
    TableDataListSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableDataListSegmentDefaultTypeInternal _TableDataListSegment_default_instance_;
constexpr TableRBTree_Node::TableRBTree_Node(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(0u)
  , value_(0u){}
struct TableRBTree_NodeDefaultTypeInternal {
  constexpr TableRBTree_NodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableRBTree_NodeDefaultTypeInternal() {}
  union {
    TableRBTree_Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableRBTree_NodeDefaultTypeInternal _TableRBTree_Node_default_instance_;
constexpr TableRBTree::TableRBTree(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodes_(){}
struct TableRBTreeDefaultTypeInternal {
  constexpr TableRBTreeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableRBTreeDefaultTypeInternal() {}
  union {
    TableRBTree _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableRBTreeDefaultTypeInternal _TableRBTree_default_instance_;
constexpr HeaderStorageBucket_Header::HeaderStorageBucket_Header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_style_(nullptr)
  , text_style_(nullptr)
  , index_(0u)
  , size_(0)
  , hidingstate_(0u)
  , numberofcells_(0u){}
struct HeaderStorageBucket_HeaderDefaultTypeInternal {
  constexpr HeaderStorageBucket_HeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderStorageBucket_HeaderDefaultTypeInternal() {}
  union {
    HeaderStorageBucket_Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderStorageBucket_HeaderDefaultTypeInternal _HeaderStorageBucket_Header_default_instance_;
constexpr HeaderStorageBucket::HeaderStorageBucket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : headers_()
  , buckethashfunction_(0u){}
struct HeaderStorageBucketDefaultTypeInternal {
  constexpr HeaderStorageBucketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderStorageBucketDefaultTypeInternal() {}
  union {
    HeaderStorageBucket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderStorageBucketDefaultTypeInternal _HeaderStorageBucket_default_instance_;
constexpr HeaderStorage::HeaderStorage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buckets_()
  , buckethashfunction_(0u){}
struct HeaderStorageDefaultTypeInternal {
  constexpr HeaderStorageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderStorageDefaultTypeInternal() {}
  union {
    HeaderStorage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderStorageDefaultTypeInternal _HeaderStorage_default_instance_;
constexpr DataStore::DataStore(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rowheaders_(nullptr)
  , columnheaders_(nullptr)
  , tiles_(nullptr)
  , stringtable_(nullptr)
  , styletable_(nullptr)
  , formula_table_(nullptr)
  , rowtiletree_(nullptr)
  , columntiletree_(nullptr)
  , format_table_pre_bnc_(nullptr)
  , formulaerrortable_(nullptr)
  , merge_region_map_(nullptr)
  , customformattable_(nullptr)
  , multiplechoicelistformattable_(nullptr)
  , rich_text_table_(nullptr)
  , conditionalstyletable_(nullptr)
  , commentstoragetable_(nullptr)
  , importwarningsettable_(nullptr)
  , control_cell_spec_table_(nullptr)
  , format_table_(nullptr)
  , nextrowstripid_(0u)
  , nextcolumnstripid_(0u)
  , storage_version_pre_bnc_(0u){}
struct DataStoreDefaultTypeInternal {
  constexpr DataStoreDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataStoreDefaultTypeInternal() {}
  union {
    DataStore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataStoreDefaultTypeInternal _DataStore_default_instance_;
constexpr TableInfoArchive::TableInfoArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , tablemodel_(nullptr)
  , editing_state_(nullptr)
  , summary_model_(nullptr)
  , category_order_(nullptr)
  , view_column_row_uids_(nullptr)
  , group_by_uuid_(nullptr)
  , hidden_states_uuid_(nullptr)
  , pasteboard_coord_mapper_(nullptr)
  , layout_engine_(nullptr)
  , formula_coord_space_in_pre40_(0u)
  , formula_coord_space_(0u){}
struct TableInfoArchiveDefaultTypeInternal {
  constexpr TableInfoArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableInfoArchiveDefaultTypeInternal() {}
  union {
    TableInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableInfoArchiveDefaultTypeInternal _TableInfoArchive_default_instance_;
constexpr CategoryInfoArchive::CategoryInfoArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , tablemodel_(nullptr){}
struct CategoryInfoArchiveDefaultTypeInternal {
  constexpr CategoryInfoArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CategoryInfoArchiveDefaultTypeInternal() {}
  union {
    CategoryInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CategoryInfoArchiveDefaultTypeInternal _CategoryInfoArchive_default_instance_;
constexpr WPTableInfoArchive::WPTableInfoArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , storage_(nullptr){}
struct WPTableInfoArchiveDefaultTypeInternal {
  constexpr WPTableInfoArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WPTableInfoArchiveDefaultTypeInternal() {}
  union {
    WPTableInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WPTableInfoArchiveDefaultTypeInternal _WPTableInfoArchive_default_instance_;
constexpr TableStyleNetworkArchive::TableStyleNetworkArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : body_text_style_(nullptr)
  , header_row_text_style_(nullptr)
  , header_column_text_style_(nullptr)
  , footer_row_text_style_(nullptr)
  , body_cell_style_(nullptr)
  , header_row_style_(nullptr)
  , header_column_style_(nullptr)
  , footer_row_style_(nullptr)
  , table_style_(nullptr)
  , table_name_style_(nullptr)
  , table_name_shape_style_(nullptr)
  , category_level_1_text_style_(nullptr)
  , category_level_2_text_style_(nullptr)
  , category_level_3_text_style_(nullptr)
  , category_level_4_text_style_(nullptr)
  , category_level_5_text_style_(nullptr)
  , category_level_1_style_(nullptr)
  , category_level_2_style_(nullptr)
  , category_level_3_style_(nullptr)
  , category_level_4_style_(nullptr)
  , category_level_5_style_(nullptr)
  , label_level_1_text_style_(nullptr)
  , label_level_2_text_style_(nullptr)
  , label_level_3_text_style_(nullptr)
  , label_level_4_text_style_(nullptr)
  , label_level_5_text_style_(nullptr)
  , label_level_1_style_(nullptr)
  , label_level_2_style_(nullptr)
  , label_level_3_style_(nullptr)
  , label_level_4_style_(nullptr)
  , label_level_5_style_(nullptr)
  , preset_id_(0u){}
struct TableStyleNetworkArchiveDefaultTypeInternal {
  constexpr TableStyleNetworkArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableStyleNetworkArchiveDefaultTypeInternal() {}
  union {
    TableStyleNetworkArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableStyleNetworkArchiveDefaultTypeInternal _TableStyleNetworkArchive_default_instance_;
constexpr TableSortOrderArchive_SortRuleArchive::TableSortOrderArchive_SortRuleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_(0u)
  , direction_(0)
{}
struct TableSortOrderArchive_SortRuleArchiveDefaultTypeInternal {
  constexpr TableSortOrderArchive_SortRuleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableSortOrderArchive_SortRuleArchiveDefaultTypeInternal() {}
  union {
    TableSortOrderArchive_SortRuleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableSortOrderArchive_SortRuleArchiveDefaultTypeInternal _TableSortOrderArchive_SortRuleArchive_default_instance_;
constexpr TableSortOrderArchive::TableSortOrderArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rules_()
  , type_(0)
{}
struct TableSortOrderArchiveDefaultTypeInternal {
  constexpr TableSortOrderArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableSortOrderArchiveDefaultTypeInternal() {}
  union {
    TableSortOrderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableSortOrderArchiveDefaultTypeInternal _TableSortOrderArchive_default_instance_;
constexpr TableSortOrderUIDArchive_SortRuleArchive::TableSortOrderUIDArchive_SortRuleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_uid_(nullptr)
  , direction_(0)
{}
struct TableSortOrderUIDArchive_SortRuleArchiveDefaultTypeInternal {
  constexpr TableSortOrderUIDArchive_SortRuleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableSortOrderUIDArchive_SortRuleArchiveDefaultTypeInternal() {}
  union {
    TableSortOrderUIDArchive_SortRuleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableSortOrderUIDArchive_SortRuleArchiveDefaultTypeInternal _TableSortOrderUIDArchive_SortRuleArchive_default_instance_;
constexpr TableSortOrderUIDArchive::TableSortOrderUIDArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rules_()
  , type_(0)
{}
struct TableSortOrderUIDArchiveDefaultTypeInternal {
  constexpr TableSortOrderUIDArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableSortOrderUIDArchiveDefaultTypeInternal() {}
  union {
    TableSortOrderUIDArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableSortOrderUIDArchiveDefaultTypeInternal _TableSortOrderUIDArchive_default_instance_;
constexpr SortRuleReferenceTrackerArchive::SortRuleReferenceTrackerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reference_tracker_(nullptr){}
struct SortRuleReferenceTrackerArchiveDefaultTypeInternal {
  constexpr SortRuleReferenceTrackerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SortRuleReferenceTrackerArchiveDefaultTypeInternal() {}
  union {
    SortRuleReferenceTrackerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SortRuleReferenceTrackerArchiveDefaultTypeInternal _SortRuleReferenceTrackerArchive_default_instance_;
constexpr CellRegion::CellRegion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_ranges_(){}
struct CellRegionDefaultTypeInternal {
  constexpr CellRegionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellRegionDefaultTypeInternal() {}
  union {
    CellRegion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellRegionDefaultTypeInternal _CellRegion_default_instance_;
constexpr CellUIDRegionArchive::CellUIDRegionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_uid_ranges_(){}
struct CellUIDRegionArchiveDefaultTypeInternal {
  constexpr CellUIDRegionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellUIDRegionArchiveDefaultTypeInternal() {}
  union {
    CellUIDRegionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellUIDRegionArchiveDefaultTypeInternal _CellUIDRegionArchive_default_instance_;
constexpr StructuredTextImportRecord::StructuredTextImportRecord(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : import_source_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , source_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , import_settings_(nullptr)
  , imported_region_(nullptr)
  , import_date_(0)
  , source_encoding_(uint64_t{0u})
  , source_row_count_(uint64_t{0u})
  , source_column_count_(uint64_t{0u})
  , confidence_(0){}
struct StructuredTextImportRecordDefaultTypeInternal {
  constexpr StructuredTextImportRecordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StructuredTextImportRecordDefaultTypeInternal() {}
  union {
    StructuredTextImportRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StructuredTextImportRecordDefaultTypeInternal _StructuredTextImportRecord_default_instance_;
constexpr TableModelArchive::TableModelArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_table_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_group_by_uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_style_(nullptr)
  , base_data_store_(nullptr)
  , provider_(nullptr)
  , body_cell_style_(nullptr)
  , header_row_style_(nullptr)
  , header_column_style_(nullptr)
  , footer_row_style_(nullptr)
  , origin_offset_(nullptr)
  , body_text_style_(nullptr)
  , header_row_text_style_(nullptr)
  , header_column_text_style_(nullptr)
  , footer_row_text_style_(nullptr)
  , table_name_style_(nullptr)
  , hidden_state_formula_owner_for_columns_(nullptr)
  , hidden_state_formula_owner_for_rows_(nullptr)
  , table_name_shape_style_(nullptr)
  , filter_set_(nullptr)
  , conditional_style_formula_owner_id_(nullptr)
  , sort_order_(nullptr)
  , sort_rule_reference_tracker_(nullptr)
  , base_column_row_uids_(nullptr)
  , merge_owner_(nullptr)
  , table_style_preset_(nullptr)
  , stroke_sidecar_(nullptr)
  , text_import_record_(nullptr)
  , category_level_1_style_(nullptr)
  , category_level_2_style_(nullptr)
  , category_level_3_style_(nullptr)
  , category_level_4_style_(nullptr)
  , category_level_5_style_(nullptr)
  , category_level_1_text_style_(nullptr)
  , category_level_2_text_style_(nullptr)
  , category_level_3_text_style_(nullptr)
  , category_level_4_text_style_(nullptr)
  , category_level_5_text_style_(nullptr)
  , hidden_states_owner_(nullptr)
  , label_level_1_style_(nullptr)
  , label_level_2_style_(nullptr)
  , label_level_3_style_(nullptr)
  , label_level_4_style_(nullptr)
  , label_level_5_style_(nullptr)
  , label_level_1_text_style_(nullptr)
  , label_level_2_text_style_(nullptr)
  , label_level_3_text_style_(nullptr)
  , label_level_4_text_style_(nullptr)
  , label_level_5_text_style_(nullptr)
  , category_owner_(nullptr)
  , pencil_annotation_owner_(nullptr)
  , haunted_owner_(nullptr)
  , number_of_rows_(0u)
  , number_of_columns_(0u)
  , number_of_header_rows_(0u)
  , number_of_header_columns_(0u)
  , number_of_footer_rows_(0u)
  , number_of_hidden_rows_(0u)
  , default_row_height_(0)
  , default_column_width_(0)
  , number_of_hidden_columns_(0u)
  , header_columns_frozen_(false)
  , repeating_header_rows_enabled_(false)
  , repeating_header_columns_enabled_(false)
  , style_apply_clears_all_(false)
  , preset_index_(0u)
  , was_cut_(false)
  , table_name_enabled_(false)
  , table_name_border_enabled_(false)
  , header_rows_frozen_(false)
  , table_name_height_(0)
  , number_of_filtered_rows_(0u)
  , number_of_user_hidden_rows_(0u)
  , number_of_user_hidden_columns_(0u)
  , preset_needs_strong_ownership_(false){}
struct TableModelArchiveDefaultTypeInternal {
  constexpr TableModelArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableModelArchiveDefaultTypeInternal() {}
  union {
    TableModelArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableModelArchiveDefaultTypeInternal _TableModelArchive_default_instance_;
constexpr SummaryModelArchive::SummaryModelArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : summary_row_height_list_()
  , label_row_height_list_()
  , label_row_visibility_list_()
  , table_info_(nullptr)
  , data_store_(nullptr)
  , column_row_uids_(nullptr)
  , aggregate_formula_owner_uuid_(nullptr)
  , summary_cell_vendor_(nullptr)
  , category_column_width_(0)
  , summary_row_level_1_height_(0)
  , summary_row_level_2_height_(0)
  , summary_row_level_3_height_(0)
  , summary_row_level_4_height_(0)
  , summary_row_level_5_height_(0)
  , summary_label_row_level_1_height_(0)
  , summary_label_row_level_2_height_(0)
  , summary_label_row_level_3_height_(0)
  , summary_label_row_level_4_height_(0)
  , summary_label_row_level_5_height_(0)
  , label_row_visibility_1_(0u)
  , label_row_visibility_2_(0u)
  , label_row_visibility_3_(0u)
  , label_row_visibility_4_(0u)
  , label_row_visibility_5_(0u){}
struct SummaryModelArchiveDefaultTypeInternal {
  constexpr SummaryModelArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SummaryModelArchiveDefaultTypeInternal() {}
  union {
    SummaryModelArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SummaryModelArchiveDefaultTypeInternal _SummaryModelArchive_default_instance_;
constexpr SummaryModelGroupByChangeStateArchive::SummaryModelGroupByChangeStateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : summary_row_height_list_()
  , label_row_height_list_()
  , label_row_visibility_list_()
  , cell_map_(nullptr){}
struct SummaryModelGroupByChangeStateArchiveDefaultTypeInternal {
  constexpr SummaryModelGroupByChangeStateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SummaryModelGroupByChangeStateArchiveDefaultTypeInternal() {}
  union {
    SummaryModelGroupByChangeStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SummaryModelGroupByChangeStateArchiveDefaultTypeInternal _SummaryModelGroupByChangeStateArchive_default_instance_;
constexpr ColumnRowUIDMapArchive::ColumnRowUIDMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sorted_column_uids_()
  , column_index_for_uid_()
  , column_uid_for_index_()
  , sorted_row_uids_()
  , row_index_for_uid_()
  , row_uid_for_index_(){}
struct ColumnRowUIDMapArchiveDefaultTypeInternal {
  constexpr ColumnRowUIDMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColumnRowUIDMapArchiveDefaultTypeInternal() {}
  union {
    ColumnRowUIDMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColumnRowUIDMapArchiveDefaultTypeInternal _ColumnRowUIDMapArchive_default_instance_;
constexpr StrokeLayerArchive_StrokeRunArchive::StrokeLayerArchive_StrokeRunArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stroke_(nullptr)
  , origin_(0)
  , length_(0u)
  , order_(0u){}
struct StrokeLayerArchive_StrokeRunArchiveDefaultTypeInternal {
  constexpr StrokeLayerArchive_StrokeRunArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StrokeLayerArchive_StrokeRunArchiveDefaultTypeInternal() {}
  union {
    StrokeLayerArchive_StrokeRunArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StrokeLayerArchive_StrokeRunArchiveDefaultTypeInternal _StrokeLayerArchive_StrokeRunArchive_default_instance_;
constexpr StrokeLayerArchive::StrokeLayerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stroke_runs_()
  , row_column_index_(0u){}
struct StrokeLayerArchiveDefaultTypeInternal {
  constexpr StrokeLayerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StrokeLayerArchiveDefaultTypeInternal() {}
  union {
    StrokeLayerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StrokeLayerArchiveDefaultTypeInternal _StrokeLayerArchive_default_instance_;
constexpr StrokeSidecarArchive::StrokeSidecarArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : left_column_stroke_layers_()
  , right_column_stroke_layers_()
  , top_row_stroke_layers_()
  , bottom_row_stroke_layers_()
  , max_order_(0u)
  , column_count_(0u)
  , row_count_(0u){}
struct StrokeSidecarArchiveDefaultTypeInternal {
  constexpr StrokeSidecarArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StrokeSidecarArchiveDefaultTypeInternal() {}
  union {
    StrokeSidecarArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StrokeSidecarArchiveDefaultTypeInternal _StrokeSidecarArchive_default_instance_;
constexpr DurationWrapperArchive::DurationWrapperArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DurationWrapperArchiveDefaultTypeInternal {
  constexpr DurationWrapperArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DurationWrapperArchiveDefaultTypeInternal() {}
  union {
    DurationWrapperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DurationWrapperArchiveDefaultTypeInternal _DurationWrapperArchive_default_instance_;
constexpr Cell::Cell(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stringvalue_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cell_style_(nullptr)
  , text_style_(nullptr)
  , current_format_(nullptr)
  , formulaerror_(nullptr)
  , number_format_(nullptr)
  , currency_format_(nullptr)
  , duration_format_(nullptr)
  , date_format_(nullptr)
  , custom_format_(nullptr)
  , base_format_(nullptr)
  , richtext_(nullptr)
  , conditional_style_(nullptr)
  , comment_storage_(nullptr)
  , import_warning_set_(nullptr)
  , custom_format_object_(nullptr)
  , cell_border_(nullptr)
  , cell_spec_(nullptr)
  , text_format_(nullptr)
  , boolean_format_(nullptr)
  , valuetype_(0)

  , boolvalue_(false)
  , numbervalue_(0)
  , explicit_format_flags_(0u)
  , conditional_style_applied_rule_(0u)
  , cell_format_kind_(0u)
  , decimal_value_low_(uint64_t{0u})
  , decimal_value_high_(uint64_t{0u}){}
struct CellDefaultTypeInternal {
  constexpr CellDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellDefaultTypeInternal() {}
  union {
    Cell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellDefaultTypeInternal _Cell_default_instance_;
constexpr MergeRegionMapArchive::MergeRegionMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_range_(){}
struct MergeRegionMapArchiveDefaultTypeInternal {
  constexpr MergeRegionMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MergeRegionMapArchiveDefaultTypeInternal() {}
  union {
    MergeRegionMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MergeRegionMapArchiveDefaultTypeInternal _MergeRegionMapArchive_default_instance_;
constexpr CellMapArchive::CellMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_tiles_()
  , merge_uid_ranges_()
  , unmerge_uid_ranges_()
  , merge_actions_()
  , expanded_cell_ids_()
  , cell_uid_list_(nullptr)
  , uid_based_(false)
  , may_modify_formulas_in_cells_(true)
  , may_modify_values_referenced_by_formulas_(true){}
struct CellMapArchiveDefaultTypeInternal {
  constexpr CellMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellMapArchiveDefaultTypeInternal() {}
  union {
    CellMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellMapArchiveDefaultTypeInternal _CellMapArchive_default_instance_;
constexpr CellListArchive_OptionalCell::CellListArchive_OptionalCell(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_(nullptr){}
struct CellListArchive_OptionalCellDefaultTypeInternal {
  constexpr CellListArchive_OptionalCellDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellListArchive_OptionalCellDefaultTypeInternal() {}
  union {
    CellListArchive_OptionalCell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellListArchive_OptionalCellDefaultTypeInternal _CellListArchive_OptionalCell_default_instance_;
constexpr CellListArchive::CellListArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cells_()
  , trailing_empty_cell_count_(0u){}
struct CellListArchiveDefaultTypeInternal {
  constexpr CellListArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellListArchiveDefaultTypeInternal() {}
  union {
    CellListArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellListArchiveDefaultTypeInternal _CellListArchive_default_instance_;
constexpr ConcurrentCellMapArchive::ConcurrentCellMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_lists_()
  , merge_actions_()
  , uid_based_(false)
  , may_modify_formulas_in_cells_(true)
  , may_modify_values_referenced_by_formulas_(true){}
struct ConcurrentCellMapArchiveDefaultTypeInternal {
  constexpr ConcurrentCellMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConcurrentCellMapArchiveDefaultTypeInternal() {}
  union {
    ConcurrentCellMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConcurrentCellMapArchiveDefaultTypeInternal _ConcurrentCellMapArchive_default_instance_;
constexpr ConcurrentCellListArchive_OptionalCell::ConcurrentCellListArchive_OptionalCell(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_(nullptr){}
struct ConcurrentCellListArchive_OptionalCellDefaultTypeInternal {
  constexpr ConcurrentCellListArchive_OptionalCellDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConcurrentCellListArchive_OptionalCellDefaultTypeInternal() {}
  union {
    ConcurrentCellListArchive_OptionalCell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConcurrentCellListArchive_OptionalCellDefaultTypeInternal _ConcurrentCellListArchive_OptionalCell_default_instance_;
constexpr ConcurrentCellListArchive::ConcurrentCellListArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cells_()
  , cell_uid_range_(nullptr)
  , cell_range_(nullptr){}
struct ConcurrentCellListArchiveDefaultTypeInternal {
  constexpr ConcurrentCellListArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConcurrentCellListArchiveDefaultTypeInternal() {}
  union {
    ConcurrentCellListArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConcurrentCellListArchiveDefaultTypeInternal _ConcurrentCellListArchive_default_instance_;
constexpr CellFormatAndValueArchive::CellFormatAndValueArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stringvalue_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , formatted_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , richtextstorage_(nullptr)
  , number_format_(nullptr)
  , currency_format_(nullptr)
  , date_format_(nullptr)
  , duration_format_(nullptr)
  , text_format_(nullptr)
  , boolean_format_(nullptr)
  , formatted_rich_text_value_(nullptr)
  , numbervalue_(0)
  , valuetype_(0)

  , explicit_flags_(0u)
  , cell_format_kind_(0u)
  , boolvalue_(false)
  , use_all_spare_formats_(false)
  , apply_spare_format_only_(false)
  , spare_format_type_(false)
  , decimal_low_(uint64_t{0u})
  , decimal_high_(uint64_t{0u}){}
struct CellFormatAndValueArchiveDefaultTypeInternal {
  constexpr CellFormatAndValueArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellFormatAndValueArchiveDefaultTypeInternal() {}
  union {
    CellFormatAndValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellFormatAndValueArchiveDefaultTypeInternal _CellFormatAndValueArchive_default_instance_;
constexpr CellSpecArchive::CellSpecArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : formula_(nullptr)
  , chooser_control_popup_model_(nullptr)
  , range_control_min_(0)
  , range_control_max_(0)
  , range_control_inc_(0)
  , interaction_type_(0u)
  , chooser_control_start_w_first_(false)
  , category_summary_should_display_label_(false){}
struct CellSpecArchiveDefaultTypeInternal {
  constexpr CellSpecArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellSpecArchiveDefaultTypeInternal() {}
  union {
    CellSpecArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellSpecArchiveDefaultTypeInternal _CellSpecArchive_default_instance_;
constexpr CommentStorageWrapperArchive::CommentStorageWrapperArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : comment_storage_(nullptr){}
struct CommentStorageWrapperArchiveDefaultTypeInternal {
  constexpr CommentStorageWrapperArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommentStorageWrapperArchiveDefaultTypeInternal() {}
  union {
    CommentStorageWrapperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommentStorageWrapperArchiveDefaultTypeInternal _CommentStorageWrapperArchive_default_instance_;
constexpr CellDiffArchive::CellDiffArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_map_to_set_(nullptr)
  , property_map_to_reset_(nullptr){}
struct CellDiffArchiveDefaultTypeInternal {
  constexpr CellDiffArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellDiffArchiveDefaultTypeInternal() {}
  union {
    CellDiffArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellDiffArchiveDefaultTypeInternal _CellDiffArchive_default_instance_;
constexpr CellDiffArray::CellDiffArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : large_array_(nullptr){}
struct CellDiffArrayDefaultTypeInternal {
  constexpr CellDiffArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellDiffArrayDefaultTypeInternal() {}
  union {
    CellDiffArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellDiffArrayDefaultTypeInternal _CellDiffArray_default_instance_;
constexpr CellDiffArraySegment::CellDiffArraySegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : elements_()
  , large_array_segment_(nullptr){}
struct CellDiffArraySegmentDefaultTypeInternal {
  constexpr CellDiffArraySegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellDiffArraySegmentDefaultTypeInternal() {}
  union {
    CellDiffArraySegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellDiffArraySegmentDefaultTypeInternal _CellDiffArraySegment_default_instance_;
constexpr CellDiffMapArchive::CellDiffMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : expanded_cell_ids_()
  , cell_uids_(nullptr)
  , cell_diff_array_(nullptr)
  , uid_based_(false){}
struct CellDiffMapArchiveDefaultTypeInternal {
  constexpr CellDiffMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellDiffMapArchiveDefaultTypeInternal() {}
  union {
    CellDiffMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellDiffMapArchiveDefaultTypeInternal _CellDiffMapArchive_default_instance_;
constexpr DoubleStyleMapArchive_DoubleStyleMapEntryArchive::DoubleStyleMapArchive_DoubleStyleMapEntryArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_id_(nullptr)
  , old_style_(nullptr)
  , new_style_(nullptr){}
struct DoubleStyleMapArchive_DoubleStyleMapEntryArchiveDefaultTypeInternal {
  constexpr DoubleStyleMapArchive_DoubleStyleMapEntryArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DoubleStyleMapArchive_DoubleStyleMapEntryArchiveDefaultTypeInternal() {}
  union {
    DoubleStyleMapArchive_DoubleStyleMapEntryArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DoubleStyleMapArchive_DoubleStyleMapEntryArchiveDefaultTypeInternal _DoubleStyleMapArchive_DoubleStyleMapEntryArchive_default_instance_;
constexpr DoubleStyleMapArchive::DoubleStyleMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_map_entry_()
  , capacity_(0u)
  , count_(0u){}
struct DoubleStyleMapArchiveDefaultTypeInternal {
  constexpr DoubleStyleMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DoubleStyleMapArchiveDefaultTypeInternal() {}
  union {
    DoubleStyleMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DoubleStyleMapArchiveDefaultTypeInternal _DoubleStyleMapArchive_default_instance_;
constexpr StyleTableMapArchive_StyleTableMapEntryArchive::StyleTableMapArchive_StyleTableMapEntryArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : old_style_(nullptr)
  , new_style_(nullptr)
  , key_(0u){}
struct StyleTableMapArchive_StyleTableMapEntryArchiveDefaultTypeInternal {
  constexpr StyleTableMapArchive_StyleTableMapEntryArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StyleTableMapArchive_StyleTableMapEntryArchiveDefaultTypeInternal() {}
  union {
    StyleTableMapArchive_StyleTableMapEntryArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StyleTableMapArchive_StyleTableMapEntryArchiveDefaultTypeInternal _StyleTableMapArchive_StyleTableMapEntryArchive_default_instance_;
constexpr StyleTableMapArchive::StyleTableMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_entry_()
  , capacity_(0u)
  , count_(0u){}
struct StyleTableMapArchiveDefaultTypeInternal {
  constexpr StyleTableMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StyleTableMapArchiveDefaultTypeInternal() {}
  union {
    StyleTableMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StyleTableMapArchiveDefaultTypeInternal _StyleTableMapArchive_default_instance_;
constexpr SelectionArchive::SelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_ranges_()
  , base_ranges_()
  , tablemodel_(nullptr)
  , anchor_cell_(nullptr)
  , cursor_cell_(nullptr)
  , table_info_(nullptr)
  , cell_uid_region_(nullptr)
  , base_uid_region_(nullptr)
  , anchor_cell_uid_(nullptr)
  , cursor_cell_uid_(nullptr)
  , selection_type_(0)
{}
struct SelectionArchiveDefaultTypeInternal {
  constexpr SelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectionArchiveDefaultTypeInternal() {}
  union {
    SelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectionArchiveDefaultTypeInternal _SelectionArchive_default_instance_;
constexpr DeathhawkRdar39989167CellSelectionArchive::DeathhawkRdar39989167CellSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_info_(nullptr)
  , cell_uid_region_(nullptr)
  , base_uid_region_(nullptr)
  , anchor_cell_uid_(nullptr)
  , cursor_cell_uid_(nullptr)
  , selection_type_(0)
{}
struct DeathhawkRdar39989167CellSelectionArchiveDefaultTypeInternal {
  constexpr DeathhawkRdar39989167CellSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeathhawkRdar39989167CellSelectionArchiveDefaultTypeInternal() {}
  union {
    DeathhawkRdar39989167CellSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeathhawkRdar39989167CellSelectionArchiveDefaultTypeInternal _DeathhawkRdar39989167CellSelectionArchive_default_instance_;
constexpr StrokeSelectionArchive::StrokeSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mask_(0){}
struct StrokeSelectionArchiveDefaultTypeInternal {
  constexpr StrokeSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StrokeSelectionArchiveDefaultTypeInternal() {}
  union {
    StrokeSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StrokeSelectionArchiveDefaultTypeInternal _StrokeSelectionArchive_default_instance_;
constexpr ControlCellSelectionArchive::ControlCellSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ControlCellSelectionArchiveDefaultTypeInternal {
  constexpr ControlCellSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlCellSelectionArchiveDefaultTypeInternal() {}
  union {
    ControlCellSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlCellSelectionArchiveDefaultTypeInternal _ControlCellSelectionArchive_default_instance_;
constexpr StockCellSelectionArchive::StockCellSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StockCellSelectionArchiveDefaultTypeInternal {
  constexpr StockCellSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StockCellSelectionArchiveDefaultTypeInternal() {}
  union {
    StockCellSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StockCellSelectionArchiveDefaultTypeInternal _StockCellSelectionArchive_default_instance_;
constexpr TableNameSelectionArchive::TableNameSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TableNameSelectionArchiveDefaultTypeInternal {
  constexpr TableNameSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableNameSelectionArchiveDefaultTypeInternal() {}
  union {
    TableNameSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableNameSelectionArchiveDefaultTypeInternal _TableNameSelectionArchive_default_instance_;
constexpr AutofillSelectionArchive::AutofillSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_cell_range_(nullptr)
  , target_cell_range_(nullptr){}
struct AutofillSelectionArchiveDefaultTypeInternal {
  constexpr AutofillSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AutofillSelectionArchiveDefaultTypeInternal() {}
  union {
    AutofillSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AutofillSelectionArchiveDefaultTypeInternal _AutofillSelectionArchive_default_instance_;
constexpr FilterRuleArchive::FilterRuleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : predicate_(nullptr)
  , disabled_(false){}
struct FilterRuleArchiveDefaultTypeInternal {
  constexpr FilterRuleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FilterRuleArchiveDefaultTypeInternal() {}
  union {
    FilterRuleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FilterRuleArchiveDefaultTypeInternal _FilterRuleArchive_default_instance_;
constexpr TableStyleArchive::TableStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , table_properties_(nullptr)
  , override_count_(0u){}
struct TableStyleArchiveDefaultTypeInternal {
  constexpr TableStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableStyleArchiveDefaultTypeInternal() {}
  union {
    TableStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableStyleArchiveDefaultTypeInternal _TableStyleArchive_default_instance_;
constexpr CellStyleArchive::CellStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , cell_properties_(nullptr)
  , override_count_(0u){}
struct CellStyleArchiveDefaultTypeInternal {
  constexpr CellStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellStyleArchiveDefaultTypeInternal() {}
  union {
    CellStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellStyleArchiveDefaultTypeInternal _CellStyleArchive_default_instance_;
constexpr FormulaPredicateArchive::FormulaPredicateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : formula_(nullptr)
  , predicate_type_(0)

  , qualifier1_(0)

  , qualifier2_(0)

  , param_index1_(0)
  , param_index2_(0)
  , param_index0_(0){}
struct FormulaPredicateArchiveDefaultTypeInternal {
  constexpr FormulaPredicateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormulaPredicateArchiveDefaultTypeInternal() {}
  union {
    FormulaPredicateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormulaPredicateArchiveDefaultTypeInternal _FormulaPredicateArchive_default_instance_;
constexpr ConditionalStyleSetArchive_ConditionalStyleRule::ConditionalStyleSetArchive_ConditionalStyleRule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : predicate_(nullptr)
  , cell_style_(nullptr)
  , text_style_(nullptr){}
struct ConditionalStyleSetArchive_ConditionalStyleRuleDefaultTypeInternal {
  constexpr ConditionalStyleSetArchive_ConditionalStyleRuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConditionalStyleSetArchive_ConditionalStyleRuleDefaultTypeInternal() {}
  union {
    ConditionalStyleSetArchive_ConditionalStyleRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConditionalStyleSetArchive_ConditionalStyleRuleDefaultTypeInternal _ConditionalStyleSetArchive_ConditionalStyleRule_default_instance_;
constexpr ConditionalStyleSetArchive::ConditionalStyleSetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rules_()
  , rulecount_(0u){}
struct ConditionalStyleSetArchiveDefaultTypeInternal {
  constexpr ConditionalStyleSetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConditionalStyleSetArchiveDefaultTypeInternal() {}
  union {
    ConditionalStyleSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConditionalStyleSetArchiveDefaultTypeInternal _ConditionalStyleSetArchive_default_instance_;
constexpr FilterSetArchive::FilterSetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_rules_()
  , filter_offsets_()
  , filter_enabled_()
  , type_(0)

  , needs_formula_rewrite_for_import_(false)
  , is_enabled_(true){}
struct FilterSetArchiveDefaultTypeInternal {
  constexpr FilterSetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FilterSetArchiveDefaultTypeInternal() {}
  union {
    FilterSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FilterSetArchiveDefaultTypeInternal _FilterSetArchive_default_instance_;
constexpr HiddenStateExtentArchive_RowOrColumnState::HiddenStateExtentArchive_RowOrColumnState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_or_column_uid_(nullptr)
  , user_hidden_(false)
  , filtered_(false){}
struct HiddenStateExtentArchive_RowOrColumnStateDefaultTypeInternal {
  constexpr HiddenStateExtentArchive_RowOrColumnStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HiddenStateExtentArchive_RowOrColumnStateDefaultTypeInternal() {}
  union {
    HiddenStateExtentArchive_RowOrColumnState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HiddenStateExtentArchive_RowOrColumnStateDefaultTypeInternal _HiddenStateExtentArchive_RowOrColumnState_default_instance_;
constexpr HiddenStateExtentArchive::HiddenStateExtentArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hidden_states_()
  , threshold_value_()
  , collapsed_group_uids_()
  , hidden_state_extent_uid_(nullptr)
  , row_or_column_direction_(0)

  , needs_to_update_filter_set_for_import_(false){}
struct HiddenStateExtentArchiveDefaultTypeInternal {
  constexpr HiddenStateExtentArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HiddenStateExtentArchiveDefaultTypeInternal() {}
  union {
    HiddenStateExtentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HiddenStateExtentArchiveDefaultTypeInternal _HiddenStateExtentArchive_default_instance_;
constexpr HiddenStatesArchive::HiddenStatesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hidden_states_uid_(nullptr)
  , column_hidden_state_extent_(nullptr)
  , row_hidden_state_extent_(nullptr){}
struct HiddenStatesArchiveDefaultTypeInternal {
  constexpr HiddenStatesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HiddenStatesArchiveDefaultTypeInternal() {}
  union {
    HiddenStatesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HiddenStatesArchiveDefaultTypeInternal _HiddenStatesArchive_default_instance_;
constexpr HiddenStatesOwnerArchive::HiddenStatesOwnerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hidden_states_()
  , owner_uid_(nullptr){}
struct HiddenStatesOwnerArchiveDefaultTypeInternal {
  constexpr HiddenStatesOwnerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HiddenStatesOwnerArchiveDefaultTypeInternal() {}
  union {
    HiddenStatesOwnerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HiddenStatesOwnerArchiveDefaultTypeInternal _HiddenStatesOwnerArchive_default_instance_;
constexpr ExpandCollapseStateArchive::ExpandCollapseStateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uids_collapsed_()
  , uids_expanded_(){}
struct ExpandCollapseStateArchiveDefaultTypeInternal {
  constexpr ExpandCollapseStateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExpandCollapseStateArchiveDefaultTypeInternal() {}
  union {
    ExpandCollapseStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExpandCollapseStateArchiveDefaultTypeInternal _ExpandCollapseStateArchive_default_instance_;
constexpr TokenAttachmentArchive::TokenAttachmentArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , expressionnode_(nullptr){}
struct TokenAttachmentArchiveDefaultTypeInternal {
  constexpr TokenAttachmentArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TokenAttachmentArchiveDefaultTypeInternal() {}
  union {
    TokenAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TokenAttachmentArchiveDefaultTypeInternal _TokenAttachmentArchive_default_instance_;
constexpr FormulaArchive::FormulaArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : expressiontree_(nullptr){}
struct FormulaArchiveDefaultTypeInternal {
  constexpr FormulaArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormulaArchiveDefaultTypeInternal() {}
  union {
    FormulaArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormulaArchiveDefaultTypeInternal _FormulaArchive_default_instance_;
constexpr ExpressionNodeArchive::ExpressionNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : children_()
  , first_index_(uint64_t{0u})
  , last_index_(uint64_t{0u}){}
struct ExpressionNodeArchiveDefaultTypeInternal {
  constexpr ExpressionNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExpressionNodeArchiveDefaultTypeInternal() {}
  union {
    ExpressionNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExpressionNodeArchiveDefaultTypeInternal _ExpressionNodeArchive_default_instance_;
constexpr BooleanNodeArchive::BooleanNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , value_(false){}
struct BooleanNodeArchiveDefaultTypeInternal {
  constexpr BooleanNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BooleanNodeArchiveDefaultTypeInternal() {}
  union {
    BooleanNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BooleanNodeArchiveDefaultTypeInternal _BooleanNodeArchive_default_instance_;
constexpr NumberNodeArchive::NumberNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , number_(0)
  , decimal_low_(uint64_t{0u})
  , decimal_high_(uint64_t{0u}){}
struct NumberNodeArchiveDefaultTypeInternal {
  constexpr NumberNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NumberNodeArchiveDefaultTypeInternal() {}
  union {
    NumberNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NumberNodeArchiveDefaultTypeInternal _NumberNodeArchive_default_instance_;
constexpr StringNodeArchive::StringNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr){}
struct StringNodeArchiveDefaultTypeInternal {
  constexpr StringNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringNodeArchiveDefaultTypeInternal() {}
  union {
    StringNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringNodeArchiveDefaultTypeInternal _StringNodeArchive_default_instance_;
constexpr IdentifierNodeArchive::IdentifierNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , symbol_(0u){}
struct IdentifierNodeArchiveDefaultTypeInternal {
  constexpr IdentifierNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IdentifierNodeArchiveDefaultTypeInternal() {}
  union {
    IdentifierNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IdentifierNodeArchiveDefaultTypeInternal _IdentifierNodeArchive_default_instance_;
constexpr ArrayNodeArchive::ArrayNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , columns_(0u)
  , rows_(0u){}
struct ArrayNodeArchiveDefaultTypeInternal {
  constexpr ArrayNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArrayNodeArchiveDefaultTypeInternal() {}
  union {
    ArrayNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArrayNodeArchiveDefaultTypeInternal _ArrayNodeArchive_default_instance_;
constexpr ListNodeArchive::ListNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct ListNodeArchiveDefaultTypeInternal {
  constexpr ListNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListNodeArchiveDefaultTypeInternal() {}
  union {
    ListNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListNodeArchiveDefaultTypeInternal _ListNodeArchive_default_instance_;
constexpr OperatorNodeArchive::OperatorNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , operatorchar_(0u){}
struct OperatorNodeArchiveDefaultTypeInternal {
  constexpr OperatorNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperatorNodeArchiveDefaultTypeInternal() {}
  union {
    OperatorNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperatorNodeArchiveDefaultTypeInternal _OperatorNodeArchive_default_instance_;
constexpr PostfixOperatorNodeArchive::PostfixOperatorNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct PostfixOperatorNodeArchiveDefaultTypeInternal {
  constexpr PostfixOperatorNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostfixOperatorNodeArchiveDefaultTypeInternal() {}
  union {
    PostfixOperatorNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostfixOperatorNodeArchiveDefaultTypeInternal _PostfixOperatorNodeArchive_default_instance_;
constexpr PrefixOperatorNodeArchive::PrefixOperatorNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct PrefixOperatorNodeArchiveDefaultTypeInternal {
  constexpr PrefixOperatorNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrefixOperatorNodeArchiveDefaultTypeInternal() {}
  union {
    PrefixOperatorNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrefixOperatorNodeArchiveDefaultTypeInternal _PrefixOperatorNodeArchive_default_instance_;
constexpr FunctionNodeArchive::FunctionNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invalidfunctionname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , functionindex_(0u){}
struct FunctionNodeArchiveDefaultTypeInternal {
  constexpr FunctionNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionNodeArchiveDefaultTypeInternal() {}
  union {
    FunctionNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionNodeArchiveDefaultTypeInternal _FunctionNodeArchive_default_instance_;
constexpr FunctionEndNodeArchive::FunctionEndNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct FunctionEndNodeArchiveDefaultTypeInternal {
  constexpr FunctionEndNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionEndNodeArchiveDefaultTypeInternal() {}
  union {
    FunctionEndNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionEndNodeArchiveDefaultTypeInternal _FunctionEndNodeArchive_default_instance_;
constexpr DateNodeArchive::DateNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr){}
struct DateNodeArchiveDefaultTypeInternal {
  constexpr DateNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DateNodeArchiveDefaultTypeInternal() {}
  union {
    DateNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DateNodeArchiveDefaultTypeInternal _DateNodeArchive_default_instance_;
constexpr ReferenceNodeArchive::ReferenceNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hosttableid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , rangereference_(nullptr)
  , table_uid_(nullptr)
  , range_top_left_(nullptr)
  , range_bottom_right_(nullptr)
  , category_ref_(nullptr)
  , uid_range_rect_(nullptr)
  , host_cell_ref_(nullptr)
  , preserve_flags_(0u){}
struct ReferenceNodeArchiveDefaultTypeInternal {
  constexpr ReferenceNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReferenceNodeArchiveDefaultTypeInternal() {}
  union {
    ReferenceNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReferenceNodeArchiveDefaultTypeInternal _ReferenceNodeArchive_default_instance_;
constexpr DurationNodeArchive::DurationNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , timeinterval_(0)
  , smallest_(0u)
  , largest_(0u)
  , style_(0u){}
struct DurationNodeArchiveDefaultTypeInternal {
  constexpr DurationNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DurationNodeArchiveDefaultTypeInternal() {}
  union {
    DurationNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DurationNodeArchiveDefaultTypeInternal _DurationNodeArchive_default_instance_;
constexpr ArgumentPlaceholderNodeArchive::ArgumentPlaceholderNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , functionindex_(0u)
  , argumentindex_(0u)
  , mode_(0u){}
struct ArgumentPlaceholderNodeArchiveDefaultTypeInternal {
  constexpr ArgumentPlaceholderNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArgumentPlaceholderNodeArchiveDefaultTypeInternal() {}
  union {
    ArgumentPlaceholderNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArgumentPlaceholderNodeArchiveDefaultTypeInternal _ArgumentPlaceholderNodeArchive_default_instance_;
constexpr EmptyExpressionNodeArchive::EmptyExpressionNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct EmptyExpressionNodeArchiveDefaultTypeInternal {
  constexpr EmptyExpressionNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmptyExpressionNodeArchiveDefaultTypeInternal() {}
  union {
    EmptyExpressionNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmptyExpressionNodeArchiveDefaultTypeInternal _EmptyExpressionNodeArchive_default_instance_;
constexpr LetNodeArchive::LetNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : whitespace_after_let_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , whitespace_after_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , whitespace_after_equals_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , whitespace_after_delimiter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr){}
struct LetNodeArchiveDefaultTypeInternal {
  constexpr LetNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LetNodeArchiveDefaultTypeInternal() {}
  union {
    LetNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LetNodeArchiveDefaultTypeInternal _LetNodeArchive_default_instance_;
constexpr InNodeArchive::InNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct InNodeArchiveDefaultTypeInternal {
  constexpr InNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InNodeArchiveDefaultTypeInternal() {}
  union {
    InNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InNodeArchiveDefaultTypeInternal _InNodeArchive_default_instance_;
constexpr VariableNodeArchive::VariableNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , symbol_(0u){}
struct VariableNodeArchiveDefaultTypeInternal {
  constexpr VariableNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VariableNodeArchiveDefaultTypeInternal() {}
  union {
    VariableNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VariableNodeArchiveDefaultTypeInternal _VariableNodeArchive_default_instance_;
constexpr LayoutHintArchive::LayoutHintArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cellrange_(nullptr)
  , hintid_(nullptr)
  , maximumsize_(nullptr)
  , effectivesize_(nullptr)
  , isvalid_(false)
  , horizontal_(false)
  , partitionposition_(0u)
  , partitioningpass_(0u){}
struct LayoutHintArchiveDefaultTypeInternal {
  constexpr LayoutHintArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LayoutHintArchiveDefaultTypeInternal() {}
  union {
    LayoutHintArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LayoutHintArchiveDefaultTypeInternal _LayoutHintArchive_default_instance_;
constexpr CompletionTokenAttachmentArchive::CompletionTokenAttachmentArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : completiontext_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , caretposition_(0u)
  , prefixstart_(0u){}
struct CompletionTokenAttachmentArchiveDefaultTypeInternal {
  constexpr CompletionTokenAttachmentArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompletionTokenAttachmentArchiveDefaultTypeInternal() {}
  union {
    CompletionTokenAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompletionTokenAttachmentArchiveDefaultTypeInternal _CompletionTokenAttachmentArchive_default_instance_;
constexpr HiddenStateFormulaOwnerArchive::HiddenStateFormulaOwnerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : threshold_value_()
  , owner_id_(nullptr)
  , needs_to_update_filter_set_for_import_(false){}
struct HiddenStateFormulaOwnerArchiveDefaultTypeInternal {
  constexpr HiddenStateFormulaOwnerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HiddenStateFormulaOwnerArchiveDefaultTypeInternal() {}
  union {
    HiddenStateFormulaOwnerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HiddenStateFormulaOwnerArchiveDefaultTypeInternal _HiddenStateFormulaOwnerArchive_default_instance_;
constexpr FormulaStoreArchive_FormulaStorePair::FormulaStoreArchive_FormulaStorePair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : formula_(nullptr)
  , formula_index_(0u){}
struct FormulaStoreArchive_FormulaStorePairDefaultTypeInternal {
  constexpr FormulaStoreArchive_FormulaStorePairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormulaStoreArchive_FormulaStorePairDefaultTypeInternal() {}
  union {
    FormulaStoreArchive_FormulaStorePair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormulaStoreArchive_FormulaStorePairDefaultTypeInternal _FormulaStoreArchive_FormulaStorePair_default_instance_;
constexpr FormulaStoreArchive::FormulaStoreArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : formulas_()
  , next_formula_index_(0u){}
struct FormulaStoreArchiveDefaultTypeInternal {
  constexpr FormulaStoreArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormulaStoreArchiveDefaultTypeInternal() {}
  union {
    FormulaStoreArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormulaStoreArchiveDefaultTypeInternal _FormulaStoreArchive_default_instance_;
constexpr MergeOperationArchive::MergeOperationArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : merge_ranges_()
  , merge_formulas_()
  , merge_formula_indexes_()
  , merge_type_(1)
{}
struct MergeOperationArchiveDefaultTypeInternal {
  constexpr MergeOperationArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MergeOperationArchiveDefaultTypeInternal() {}
  union {
    MergeOperationArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MergeOperationArchiveDefaultTypeInternal _MergeOperationArchive_default_instance_;
constexpr MergeOwnerArchive::MergeOwnerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_id_(nullptr)
  , formula_store_(nullptr){}
struct MergeOwnerArchiveDefaultTypeInternal {
  constexpr MergeOwnerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MergeOwnerArchiveDefaultTypeInternal() {}
  union {
    MergeOwnerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MergeOwnerArchiveDefaultTypeInternal _MergeOwnerArchive_default_instance_;
constexpr PencilAnnotationArchive::PencilAnnotationArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_info_(nullptr)
  , pencil_annotation_storage_(nullptr){}
struct PencilAnnotationArchiveDefaultTypeInternal {
  constexpr PencilAnnotationArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PencilAnnotationArchiveDefaultTypeInternal() {}
  union {
    PencilAnnotationArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PencilAnnotationArchiveDefaultTypeInternal _PencilAnnotationArchive_default_instance_;
constexpr PencilAnnotationOwnerArchive::PencilAnnotationOwnerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotations_()
  , owner_id_(nullptr)
  , formula_store_(nullptr){}
struct PencilAnnotationOwnerArchiveDefaultTypeInternal {
  constexpr PencilAnnotationOwnerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PencilAnnotationOwnerArchiveDefaultTypeInternal() {}
  union {
    PencilAnnotationOwnerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PencilAnnotationOwnerArchiveDefaultTypeInternal _PencilAnnotationOwnerArchive_default_instance_;
constexpr AccumulatorArchive::AccumulatorArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_value_(nullptr)
  , max_value_(nullptr)
  , number_total_value_(nullptr)
  , first_date_seen_(nullptr)
  , bool_count_(0u)
  , number_count_(0u)
  , date_count_(0u)
  , duration_count_(0u)
  , string_count_(0u)
  , bool_true_count_(0u)
  , total_secs_since_ref_date_(0)
  , secs_to_add_(0)
  , error_count_(0u)
  , is_circular_ref_(false){}
struct AccumulatorArchiveDefaultTypeInternal {
  constexpr AccumulatorArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccumulatorArchiveDefaultTypeInternal() {}
  union {
    AccumulatorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccumulatorArchiveDefaultTypeInternal _AccumulatorArchive_default_instance_;
constexpr GroupColumnArchive::GroupColumnArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_uid_(nullptr)
  , grouping_functor_(nullptr)
  , grouping_column_uid_(nullptr)
  , grouping_type_(0)
{}
struct GroupColumnArchiveDefaultTypeInternal {
  constexpr GroupColumnArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroupColumnArchiveDefaultTypeInternal() {}
  union {
    GroupColumnArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroupColumnArchiveDefaultTypeInternal _GroupColumnArchive_default_instance_;
constexpr GroupColumnListArchive::GroupColumnListArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_column_(){}
struct GroupColumnListArchiveDefaultTypeInternal {
  constexpr GroupColumnListArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroupColumnListArchiveDefaultTypeInternal() {}
  union {
    GroupColumnListArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroupColumnListArchiveDefaultTypeInternal _GroupColumnListArchive_default_instance_;
constexpr ColumnAggregateArchive::ColumnAggregateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_uid_(nullptr)
  , level_(0u)
  , agg_type_(0)
{}
struct ColumnAggregateArchiveDefaultTypeInternal {
  constexpr ColumnAggregateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColumnAggregateArchiveDefaultTypeInternal() {}
  union {
    ColumnAggregateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColumnAggregateArchiveDefaultTypeInternal _ColumnAggregateArchive_default_instance_;
constexpr ColumnAggregateListArchive::ColumnAggregateListArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : aggregates_(){}
struct ColumnAggregateListArchiveDefaultTypeInternal {
  constexpr ColumnAggregateListArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColumnAggregateListArchiveDefaultTypeInternal() {}
  union {
    ColumnAggregateListArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColumnAggregateListArchiveDefaultTypeInternal _ColumnAggregateListArchive_default_instance_;
constexpr CategoryOwnerArchive_GroupByArchive_AggNodeArchive::CategoryOwnerArchive_GroupByArchive_AggNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : child_()
  , formula_coord_(nullptr)
  , accum_(nullptr){}
struct CategoryOwnerArchive_GroupByArchive_AggNodeArchiveDefaultTypeInternal {
  constexpr CategoryOwnerArchive_GroupByArchive_AggNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CategoryOwnerArchive_GroupByArchive_AggNodeArchiveDefaultTypeInternal() {}
  union {
    CategoryOwnerArchive_GroupByArchive_AggNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CategoryOwnerArchive_GroupByArchive_AggNodeArchiveDefaultTypeInternal _CategoryOwnerArchive_GroupByArchive_AggNodeArchive_default_instance_;
constexpr CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(){}
struct CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchiveDefaultTypeInternal {
  constexpr CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchiveDefaultTypeInternal() {}
  union {
    CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchiveDefaultTypeInternal _CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive_default_instance_;
constexpr CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_uids_(){}
struct CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchiveDefaultTypeInternal {
  constexpr CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchiveDefaultTypeInternal() {}
  union {
    CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchiveDefaultTypeInternal _CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive_default_instance_;
constexpr CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : formats_()
  , row_sets_()
  , cell_value_(nullptr){}
struct CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchiveDefaultTypeInternal {
  constexpr CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchiveDefaultTypeInternal() {}
  union {
    CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchiveDefaultTypeInternal _CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_default_instance_;
constexpr CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : child_()
  , row_uid_()
  , agg_formula_coords_()
  , group_uid_(nullptr)
  , group_value_tuple_(nullptr)
  , format_manager_(nullptr)
  , group_cell_value_(nullptr){}
struct CategoryOwnerArchive_GroupByArchive_GroupNodeArchiveDefaultTypeInternal {
  constexpr CategoryOwnerArchive_GroupByArchive_GroupNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CategoryOwnerArchive_GroupByArchive_GroupNodeArchiveDefaultTypeInternal() {}
  union {
    CategoryOwnerArchive_GroupByArchive_GroupNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CategoryOwnerArchive_GroupByArchive_GroupNodeArchiveDefaultTypeInternal _CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_default_instance_;
constexpr CategoryOwnerArchive_GroupByArchive_AggregatorArchive::CategoryOwnerArchive_GroupByArchive_AggregatorArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_uid_(nullptr)
  , agg_node_(nullptr){}
struct CategoryOwnerArchive_GroupByArchive_AggregatorArchiveDefaultTypeInternal {
  constexpr CategoryOwnerArchive_GroupByArchive_AggregatorArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CategoryOwnerArchive_GroupByArchive_AggregatorArchiveDefaultTypeInternal() {}
  union {
    CategoryOwnerArchive_GroupByArchive_AggregatorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CategoryOwnerArchive_GroupByArchive_AggregatorArchiveDefaultTypeInternal _CategoryOwnerArchive_GroupByArchive_AggregatorArchive_default_instance_;
constexpr CategoryOwnerArchive_GroupByArchive::CategoryOwnerArchive_GroupByArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_column_()
  , aggregator_()
  , column_agg_type_()
  , group_by_uid_(nullptr)
  , group_node_root_(nullptr)
  , indirect_agg_type_change_formula_(nullptr)
  , grouping_columns_formula_(nullptr)
  , aggs_in_group_root_formula_(nullptr)
  , grouping_column_headers_formula_(nullptr)
  , column_order_changed_formula_(nullptr)
  , row_order_changed_formula_(nullptr)
  , row_order_changed_ignoring_recalc_formula_(nullptr)
  , is_enabled_(false){}
struct CategoryOwnerArchive_GroupByArchiveDefaultTypeInternal {
  constexpr CategoryOwnerArchive_GroupByArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CategoryOwnerArchive_GroupByArchiveDefaultTypeInternal() {}
  union {
    CategoryOwnerArchive_GroupByArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CategoryOwnerArchive_GroupByArchiveDefaultTypeInternal _CategoryOwnerArchive_GroupByArchive_default_instance_;
constexpr CategoryOwnerArchive::CategoryOwnerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_by_()
  , owner_uid_(nullptr){}
struct CategoryOwnerArchiveDefaultTypeInternal {
  constexpr CategoryOwnerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CategoryOwnerArchiveDefaultTypeInternal() {}
  union {
    CategoryOwnerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CategoryOwnerArchiveDefaultTypeInternal _CategoryOwnerArchive_default_instance_;
constexpr RichTextPayloadArchive::RichTextPayloadArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : storage_(nullptr)
  , range_(nullptr)
  , cellid_(nullptr){}
struct RichTextPayloadArchiveDefaultTypeInternal {
  constexpr RichTextPayloadArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RichTextPayloadArchiveDefaultTypeInternal() {}
  union {
    RichTextPayloadArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RichTextPayloadArchiveDefaultTypeInternal _RichTextPayloadArchive_default_instance_;
constexpr FormulaEqualsTokenAttachmentArchive::FormulaEqualsTokenAttachmentArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct FormulaEqualsTokenAttachmentArchiveDefaultTypeInternal {
  constexpr FormulaEqualsTokenAttachmentArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormulaEqualsTokenAttachmentArchiveDefaultTypeInternal() {}
  union {
    FormulaEqualsTokenAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormulaEqualsTokenAttachmentArchiveDefaultTypeInternal _FormulaEqualsTokenAttachmentArchive_default_instance_;
constexpr CellFillStandIn::CellFillStandIn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fill_(nullptr)
  , type_is_mixed_(false)
  , color_has_been_modified_(false)
  , color_is_mixed_(false)
  , first_color_has_been_modified_(false)
  , first_color_is_mixed_(false)
  , last_color_has_been_modified_(false)
  , last_color_is_mixed_(false)
  , gradient_type_has_been_modified_(false)
  , gradient_type_is_mixed_(false)
  , gradient_angle_has_been_modified_(false)
  , gradient_angle_is_mixed_(false)
  , image_data_has_been_modified_(false)
  , image_data_is_mixed_(false)
  , tint_color_has_been_modified_(false)
  , tint_color_is_mixed_(false)
  , scale_has_been_modified_(false)
  , scale_is_mixed_(false)
  , technique_has_been_modified_(false)
  , technique_is_mixed_(false){}
struct CellFillStandInDefaultTypeInternal {
  constexpr CellFillStandInDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellFillStandInDefaultTypeInternal() {}
  union {
    CellFillStandIn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellFillStandInDefaultTypeInternal _CellFillStandIn_default_instance_;
constexpr FormulaSelectionArchive::FormulaSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , activetokencharindex_(0u){}
struct FormulaSelectionArchiveDefaultTypeInternal {
  constexpr FormulaSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormulaSelectionArchiveDefaultTypeInternal() {}
  union {
    FormulaSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormulaSelectionArchiveDefaultTypeInternal _FormulaSelectionArchive_default_instance_;
constexpr CellBorderArchive::CellBorderArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : top_stroke_(nullptr)
  , right_stroke_(nullptr)
  , bottom_stroke_(nullptr)
  , left_stroke_(nullptr)
  , top_stroke_order_(0)
  , right_stroke_order_(0)
  , bottom_stroke_order_(0)
  , left_stroke_order_(0){}
struct CellBorderArchiveDefaultTypeInternal {
  constexpr CellBorderArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellBorderArchiveDefaultTypeInternal() {}
  union {
    CellBorderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellBorderArchiveDefaultTypeInternal _CellBorderArchive_default_instance_;
constexpr DefaultCellStylesContainerArchive::DefaultCellStylesContainerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_row_uids_()
  , footer_row_uids_()
  , header_column_uids_()
  , table_style_network_(nullptr){}
struct DefaultCellStylesContainerArchiveDefaultTypeInternal {
  constexpr DefaultCellStylesContainerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DefaultCellStylesContainerArchiveDefaultTypeInternal() {}
  union {
    DefaultCellStylesContainerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DefaultCellStylesContainerArchiveDefaultTypeInternal _DefaultCellStylesContainerArchive_default_instance_;
constexpr MultiTableRemapperArchive::MultiTableRemapperArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_uid_mapper_()
  , backing_tables_for_charts_(nullptr)
  , mapping_purpose_(0)

  , should_steal_references_(false)
  , can_reuse_table_names_(false)
  , cross_document_paste_(false)
  , nested_inner_mapper_(false){}
struct MultiTableRemapperArchiveDefaultTypeInternal {
  constexpr MultiTableRemapperArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiTableRemapperArchiveDefaultTypeInternal() {}
  union {
    MultiTableRemapperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiTableRemapperArchiveDefaultTypeInternal _MultiTableRemapperArchive_default_instance_;
constexpr ChangePropagationMapWrapper::ChangePropagationMapWrapper(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : style_replace_prototypes_()
  , style_replace_replacements_()
  , style_modify_styles_()
  , style_modify_old_prop_maps_()
  , style_modify_new_prop_maps_()
  , style_delete_prototypes_()
  , style_delete_replacements_()
  , table_preset_replace_prototype_(nullptr)
  , table_preset_replace_replacement_(nullptr)
  , table_preset_delete_prototype_(nullptr)
  , table_preset_delete_replacement_(nullptr)
  , replacement_behavior_(0){}
struct ChangePropagationMapWrapperDefaultTypeInternal {
  constexpr ChangePropagationMapWrapperDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangePropagationMapWrapperDefaultTypeInternal() {}
  union {
    ChangePropagationMapWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangePropagationMapWrapperDefaultTypeInternal _ChangePropagationMapWrapper_default_instance_;
constexpr SummaryCellVendorArchive_SummaryCellEntry::SummaryCellVendorArchive_SummaryCellEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : wildcarduid_(nullptr)
  , columnuid_(nullptr)
  , cell_(nullptr){}
struct SummaryCellVendorArchive_SummaryCellEntryDefaultTypeInternal {
  constexpr SummaryCellVendorArchive_SummaryCellEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SummaryCellVendorArchive_SummaryCellEntryDefaultTypeInternal() {}
  union {
    SummaryCellVendorArchive_SummaryCellEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SummaryCellVendorArchive_SummaryCellEntryDefaultTypeInternal _SummaryCellVendorArchive_SummaryCellEntry_default_instance_;
constexpr SummaryCellVendorArchive::SummaryCellVendorArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , table_info_(nullptr){}
struct SummaryCellVendorArchiveDefaultTypeInternal {
  constexpr SummaryCellVendorArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SummaryCellVendorArchiveDefaultTypeInternal() {}
  union {
    SummaryCellVendorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SummaryCellVendorArchiveDefaultTypeInternal _SummaryCellVendorArchive_default_instance_;
constexpr CategoryOrderArchive::CategoryOrderArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_info_(nullptr)
  , uid_map_(nullptr){}
struct CategoryOrderArchiveDefaultTypeInternal {
  constexpr CategoryOrderArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CategoryOrderArchiveDefaultTypeInternal() {}
  union {
    CategoryOrderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CategoryOrderArchiveDefaultTypeInternal _CategoryOrderArchive_default_instance_;
constexpr HeaderNameMgrTileArchive_NameFragmentArchive::HeaderNameMgrTileArchive_NameFragmentArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_fragment_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_precedent_(nullptr)
  , uses_of_name_fragment_(nullptr){}
struct HeaderNameMgrTileArchive_NameFragmentArchiveDefaultTypeInternal {
  constexpr HeaderNameMgrTileArchive_NameFragmentArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderNameMgrTileArchive_NameFragmentArchiveDefaultTypeInternal() {}
  union {
    HeaderNameMgrTileArchive_NameFragmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderNameMgrTileArchive_NameFragmentArchiveDefaultTypeInternal _HeaderNameMgrTileArchive_NameFragmentArchive_default_instance_;
constexpr HeaderNameMgrTileArchive::HeaderNameMgrTileArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_frag_entries_()
  , first_fragment_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_fragment_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct HeaderNameMgrTileArchiveDefaultTypeInternal {
  constexpr HeaderNameMgrTileArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderNameMgrTileArchiveDefaultTypeInternal() {}
  union {
    HeaderNameMgrTileArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderNameMgrTileArchiveDefaultTypeInternal _HeaderNameMgrTileArchive_default_instance_;
constexpr HeaderNameMgrArchive_PerTableArchive::HeaderNameMgrArchive_PerTableArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_row_uids_()
  , header_column_uids_()
  , update_header_row_uids_()
  , update_header_column_uids_()
  , table_uid_(nullptr)
  , per_table_precedent_(nullptr)
  , is_deleted_(false){}
struct HeaderNameMgrArchive_PerTableArchiveDefaultTypeInternal {
  constexpr HeaderNameMgrArchive_PerTableArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderNameMgrArchive_PerTableArchiveDefaultTypeInternal() {}
  union {
    HeaderNameMgrArchive_PerTableArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderNameMgrArchive_PerTableArchiveDefaultTypeInternal _HeaderNameMgrArchive_PerTableArchive_default_instance_;
constexpr HeaderNameMgrArchive::HeaderNameMgrArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : per_tables_()
  , name_frag_tiles_()
  , owner_uid_(nullptr)
  , nrm_owner_uid_(nullptr){}
struct HeaderNameMgrArchiveDefaultTypeInternal {
  constexpr HeaderNameMgrArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderNameMgrArchiveDefaultTypeInternal() {}
  union {
    HeaderNameMgrArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderNameMgrArchiveDefaultTypeInternal _HeaderNameMgrArchive_default_instance_;
constexpr WidthHeightCacheFittingEntry::WidthHeightCacheFittingEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fitting_index_(0u)
  , fitting_size_(0){}
struct WidthHeightCacheFittingEntryDefaultTypeInternal {
  constexpr WidthHeightCacheFittingEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WidthHeightCacheFittingEntryDefaultTypeInternal() {}
  union {
    WidthHeightCacheFittingEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WidthHeightCacheFittingEntryDefaultTypeInternal _WidthHeightCacheFittingEntry_default_instance_;
constexpr WidthHeightCache::WidthHeightCache(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rows_fitting_entries_()
  , columns_count_(0u){}
struct WidthHeightCacheDefaultTypeInternal {
  constexpr WidthHeightCacheDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WidthHeightCacheDefaultTypeInternal() {}
  union {
    WidthHeightCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WidthHeightCacheDefaultTypeInternal _WidthHeightCache_default_instance_;
constexpr LayoutEngineArchive::LayoutEngineArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : width_height_cache_(nullptr){}
struct LayoutEngineArchiveDefaultTypeInternal {
  constexpr LayoutEngineArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LayoutEngineArchiveDefaultTypeInternal() {}
  union {
    LayoutEngineArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LayoutEngineArchiveDefaultTypeInternal _LayoutEngineArchive_default_instance_;
}  // namespace TST
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TSTArchives_2eproto[147];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TSTArchives_2eproto[21];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TSTArchives_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TSTArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TST::CellID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CellID, packeddata_),
  PROTOBUF_FIELD_OFFSET(::TST::CellID, expanded_coord_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDLookupListArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDLookupListArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDLookupListArchive, column_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDLookupListArchive, row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDLookupListArchive, column_indexes_),
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDLookupListArchive, row_indexes_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDListArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDListArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDListArchive, row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDListArchive, column_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDListArchive, compressed_row_indexes_),
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDListArchive, compressed_column_indexes_),
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDListArchive, uncompressed_lookup_list_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::TableSize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TableSize, packeddata_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSize, num_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSize, num_rows_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::ExpandedTableSize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ExpandedTableSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ExpandedTableSize, num_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::ExpandedTableSize, num_rows_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CellRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CellRange, origin_),
  PROTOBUF_FIELD_OFFSET(::TST::CellRange, size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::ExpandedCellRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ExpandedCellRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ExpandedCellRange, origin_),
  PROTOBUF_FIELD_OFFSET(::TST::ExpandedCellRange, size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::TableSelection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TableSelection, cellrange_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSelection, extendedcellrange_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSelection, extendedcellrangevalid_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSelection, selection_type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::TileRowInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TileRowInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TileRowInfo, tile_row_index_),
  PROTOBUF_FIELD_OFFSET(::TST::TileRowInfo, cell_count_),
  PROTOBUF_FIELD_OFFSET(::TST::TileRowInfo, cell_storage_buffer_pre_bnc_),
  PROTOBUF_FIELD_OFFSET(::TST::TileRowInfo, cell_offsets_pre_bnc_),
  PROTOBUF_FIELD_OFFSET(::TST::TileRowInfo, storage_version_),
  PROTOBUF_FIELD_OFFSET(::TST::TileRowInfo, cell_storage_buffer_),
  PROTOBUF_FIELD_OFFSET(::TST::TileRowInfo, cell_offsets_),
  PROTOBUF_FIELD_OFFSET(::TST::TileRowInfo, has_wide_offsets_),
  4,
  5,
  0,
  1,
  6,
  2,
  3,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::Tile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::Tile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::Tile, maxcolumn_),
  PROTOBUF_FIELD_OFFSET(::TST::Tile, maxrow_),
  PROTOBUF_FIELD_OFFSET(::TST::Tile, numcells_),
  PROTOBUF_FIELD_OFFSET(::TST::Tile, numrows_),
  PROTOBUF_FIELD_OFFSET(::TST::Tile, rowinfos_),
  PROTOBUF_FIELD_OFFSET(::TST::Tile, storage_version_),
  PROTOBUF_FIELD_OFFSET(::TST::Tile, last_saved_in_bnc_),
  PROTOBUF_FIELD_OFFSET(::TST::Tile, should_use_wide_rows_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::TST::TileStorage_Tile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TileStorage_Tile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TileStorage_Tile, tileid_),
  PROTOBUF_FIELD_OFFSET(::TST::TileStorage_Tile, tile_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::TileStorage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TileStorage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TileStorage, tiles_),
  PROTOBUF_FIELD_OFFSET(::TST::TileStorage, tile_size_),
  PROTOBUF_FIELD_OFFSET(::TST::TileStorage, should_use_wide_rows_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::PopUpMenuModel_CellValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::PopUpMenuModel_CellValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::PopUpMenuModel_CellValue, cell_value_type_),
  PROTOBUF_FIELD_OFFSET(::TST::PopUpMenuModel_CellValue, boolean_value_),
  PROTOBUF_FIELD_OFFSET(::TST::PopUpMenuModel_CellValue, date_value_),
  PROTOBUF_FIELD_OFFSET(::TST::PopUpMenuModel_CellValue, number_value_),
  PROTOBUF_FIELD_OFFSET(::TST::PopUpMenuModel_CellValue, string_value_),
  4,
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::PopUpMenuModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::PopUpMenuModel, item_),
  PROTOBUF_FIELD_OFFSET(::TST::PopUpMenuModel, tsce_item_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive_FormulaImportWarning, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive_FormulaImportWarning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive_FormulaImportWarning, formula_warning_type_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive_FormulaImportWarning, original_formula_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive_FormulaImportWarning, supplementary_text_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive_FormulaImportWarning, formula_warning_type_int_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, formula_import_warning_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, cond_format_above_avg_equal_avg_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, cond_format_above_avg_std_dev_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, cond_format_complex_formula_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, cond_format_contains_errors_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, cond_format_expr_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, cond_format_not_contains_errors_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, cond_format_parameters_not_all_same_type_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, cond_format_stop_if_true_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, cond_format_unsupported_operator_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, cond_format_unsupported_styling_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, cond_format_unsupported_time_period_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, error_cell_with_no_formula_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, unsupported_cond_format_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, original_data_format_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, formula_warning_filtered_column_formula_not_copied_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, duration_format_range_changed_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  0,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::TST::CellRefImportWarningSetPairArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellRefImportWarningSetPairArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CellRefImportWarningSetPairArchive, cell_ref_),
  PROTOBUF_FIELD_OFFSET(::TST::CellRefImportWarningSetPairArchive, warning_set_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetByCellRefArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetByCellRefArchive, cellref_warning_set_pair_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, key_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, refcount_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, string_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, reference_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, formula_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, format_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, custom_format_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, rich_text_payload_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, comment_storage_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, import_warning_set_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, cell_spec_),
  9,
  10,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList, listtype_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList, nextlistid_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList, entries_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList, segments_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::TableDataListSegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataListSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TableDataListSegment, list_type_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataListSegment, key_range_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataListSegment, entries_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::TableRBTree_Node, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableRBTree_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TableRBTree_Node, key_),
  PROTOBUF_FIELD_OFFSET(::TST::TableRBTree_Node, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::TableRBTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TableRBTree, nodes_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket_Header, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket_Header, index_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket_Header, size_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket_Header, hidingstate_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket_Header, numberofcells_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket_Header, cell_style_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket_Header, text_style_),
  2,
  3,
  4,
  5,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket, buckethashfunction_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket, headers_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorage, buckethashfunction_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorage, buckets_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, rowheaders_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, columnheaders_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, tiles_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, stringtable_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, styletable_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, formula_table_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, formulaerrortable_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, format_table_pre_bnc_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, multiplechoicelistformattable_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, merge_region_map_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, customformattable_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, nextrowstripid_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, nextcolumnstripid_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, rowtiletree_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, columntiletree_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, storage_version_pre_bnc_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, rich_text_table_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, conditionalstyletable_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, commentstoragetable_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, importwarningsettable_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, control_cell_spec_table_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, format_table_),
  0,
  1,
  2,
  3,
  4,
  5,
  9,
  8,
  12,
  10,
  11,
  19,
  20,
  6,
  7,
  21,
  13,
  14,
  15,
  16,
  17,
  18,
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, tablemodel_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, editing_state_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, summary_model_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, category_order_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, view_column_row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, group_by_uuid_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, hidden_states_uuid_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, formula_coord_space_in_pre40_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, formula_coord_space_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, pasteboard_coord_mapper_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, layout_engine_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  10,
  11,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::TST::CategoryInfoArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CategoryInfoArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryInfoArchive, tablemodel_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::WPTableInfoArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::WPTableInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::WPTableInfoArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::WPTableInfoArchive, storage_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, table_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, body_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, header_row_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, header_column_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, footer_row_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, category_level_1_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, category_level_2_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, category_level_3_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, category_level_4_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, category_level_5_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, label_level_1_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, label_level_2_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, label_level_3_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, label_level_4_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, label_level_5_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, body_cell_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, header_row_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, header_column_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, footer_row_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, category_level_1_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, category_level_2_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, category_level_3_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, category_level_4_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, category_level_5_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, label_level_1_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, label_level_2_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, label_level_3_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, label_level_4_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, label_level_5_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, table_name_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, table_name_shape_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, preset_id_),
  8,
  0,
  1,
  2,
  3,
  11,
  12,
  13,
  14,
  15,
  21,
  22,
  23,
  24,
  25,
  4,
  5,
  6,
  7,
  16,
  17,
  18,
  19,
  20,
  26,
  27,
  28,
  29,
  30,
  9,
  10,
  31,
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderArchive_SortRuleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderArchive_SortRuleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderArchive_SortRuleArchive, column_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderArchive_SortRuleArchive, direction_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderArchive, type_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderArchive, rules_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderUIDArchive_SortRuleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderUIDArchive_SortRuleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderUIDArchive_SortRuleArchive, column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderUIDArchive_SortRuleArchive, direction_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderUIDArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderUIDArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderUIDArchive, type_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderUIDArchive, rules_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::SortRuleReferenceTrackerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::SortRuleReferenceTrackerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::SortRuleReferenceTrackerArchive, reference_tracker_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::CellRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CellRegion, cell_ranges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDRegionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDRegionArchive, cell_uid_ranges_),
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, import_settings_),
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, import_source_),
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, import_date_),
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, source_data_),
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, source_encoding_),
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, confidence_),
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, imported_region_),
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, source_row_count_),
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, source_column_count_),
  2,
  0,
  4,
  1,
  5,
  8,
  3,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, table_id_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, from_table_id_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, was_cut_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, table_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, body_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, header_row_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, header_column_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, footer_row_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, body_cell_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, header_row_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, header_column_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, footer_row_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, table_name_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, table_name_shape_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, table_style_preset_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, preset_index_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, base_data_store_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, provider_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, number_of_rows_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, number_of_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, table_name_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, table_name_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, table_name_height_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, table_name_border_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, number_of_header_rows_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, number_of_header_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, number_of_footer_rows_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, header_rows_frozen_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, header_columns_frozen_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, number_of_hidden_rows_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, number_of_hidden_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, number_of_user_hidden_rows_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, number_of_user_hidden_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, number_of_filtered_rows_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, default_row_height_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, default_column_width_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, origin_offset_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, repeating_header_rows_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, repeating_header_columns_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, style_apply_clears_all_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, hidden_state_formula_owner_for_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, hidden_state_formula_owner_for_rows_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, filter_set_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, conditional_style_formula_owner_id_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, sort_order_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, sort_rule_reference_tracker_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, base_column_row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, merge_owner_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, stroke_sidecar_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, preset_needs_strong_ownership_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, text_import_record_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, category_level_1_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, category_level_2_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, category_level_3_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, category_level_4_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, category_level_5_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, label_level_1_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, label_level_2_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, label_level_3_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, label_level_4_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, label_level_5_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, category_level_1_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, category_level_2_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, category_level_3_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, category_level_4_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, category_level_5_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, label_level_1_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, label_level_2_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, label_level_3_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, label_level_4_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, label_level_5_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, hidden_states_owner_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, category_owner_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, pencil_annotation_owner_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, from_group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, haunted_owner_),
  0,
  2,
  67,
  4,
  12,
  13,
  14,
  15,
  7,
  8,
  9,
  10,
  16,
  19,
  26,
  66,
  5,
  6,
  53,
  54,
  1,
  68,
  71,
  69,
  55,
  56,
  57,
  70,
  62,
  58,
  61,
  73,
  74,
  72,
  59,
  60,
  11,
  63,
  64,
  65,
  17,
  18,
  20,
  21,
  22,
  23,
  24,
  25,
  27,
  75,
  28,
  29,
  30,
  31,
  32,
  33,
  40,
  41,
  42,
  43,
  44,
  34,
  35,
  36,
  37,
  38,
  45,
  46,
  47,
  48,
  49,
  39,
  50,
  51,
  3,
  52,
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, table_info_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, data_store_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, column_row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, aggregate_formula_owner_uuid_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, summary_cell_vendor_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, category_column_width_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, summary_row_level_1_height_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, summary_row_level_2_height_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, summary_row_level_3_height_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, summary_row_level_4_height_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, summary_row_level_5_height_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, summary_label_row_level_1_height_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, summary_label_row_level_2_height_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, summary_label_row_level_3_height_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, summary_label_row_level_4_height_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, summary_label_row_level_5_height_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, label_row_visibility_1_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, label_row_visibility_2_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, label_row_visibility_3_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, label_row_visibility_4_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, label_row_visibility_5_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, summary_row_height_list_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, label_row_height_list_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, label_row_visibility_list_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelGroupByChangeStateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelGroupByChangeStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelGroupByChangeStateArchive, cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelGroupByChangeStateArchive, summary_row_height_list_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelGroupByChangeStateArchive, label_row_height_list_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelGroupByChangeStateArchive, label_row_visibility_list_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowUIDMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowUIDMapArchive, sorted_column_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowUIDMapArchive, column_index_for_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowUIDMapArchive, column_uid_for_index_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowUIDMapArchive, sorted_row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowUIDMapArchive, row_index_for_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowUIDMapArchive, row_uid_for_index_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeLayerArchive_StrokeRunArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeLayerArchive_StrokeRunArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::StrokeLayerArchive_StrokeRunArchive, origin_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeLayerArchive_StrokeRunArchive, length_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeLayerArchive_StrokeRunArchive, stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeLayerArchive_StrokeRunArchive, order_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::StrokeLayerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeLayerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::StrokeLayerArchive, row_column_index_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeLayerArchive, stroke_runs_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSidecarArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSidecarArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSidecarArchive, max_order_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSidecarArchive, column_count_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSidecarArchive, row_count_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSidecarArchive, left_column_stroke_layers_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSidecarArchive, right_column_stroke_layers_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSidecarArchive, top_row_stroke_layers_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSidecarArchive, bottom_row_stroke_layers_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::DurationWrapperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::Cell, valuetype_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, cell_style_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, numbervalue_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, stringvalue_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, boolvalue_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, current_format_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, formulaerror_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, number_format_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, currency_format_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, duration_format_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, date_format_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, custom_format_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, base_format_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, explicit_format_flags_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, richtext_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, conditional_style_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, comment_storage_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, conditional_style_applied_rule_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, import_warning_set_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, custom_format_object_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, cell_border_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, cell_spec_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, cell_format_kind_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, text_format_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, boolean_format_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, decimal_value_low_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, decimal_value_high_),
  20,
  1,
  2,
  22,
  0,
  21,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  23,
  11,
  12,
  13,
  24,
  14,
  15,
  16,
  17,
  25,
  18,
  19,
  26,
  27,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::MergeRegionMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::MergeRegionMapArchive, cell_range_),
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, cell_tiles_),
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, uid_based_),
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, expanded_cell_ids_),
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, cell_uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, merge_uid_ranges_),
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, unmerge_uid_ranges_),
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, merge_actions_),
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, may_modify_formulas_in_cells_),
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, may_modify_values_referenced_by_formulas_),
  ~0u,
  1,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CellListArchive_OptionalCell, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellListArchive_OptionalCell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CellListArchive_OptionalCell, cell_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CellListArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellListArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CellListArchive, cells_),
  PROTOBUF_FIELD_OFFSET(::TST::CellListArchive, trailing_empty_cell_count_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellMapArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellMapArchive, cell_lists_),
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellMapArchive, uid_based_),
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellMapArchive, merge_actions_),
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellMapArchive, may_modify_formulas_in_cells_),
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellMapArchive, may_modify_values_referenced_by_formulas_),
  ~0u,
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellListArchive_OptionalCell, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellListArchive_OptionalCell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellListArchive_OptionalCell, cell_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellListArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellListArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellListArchive, cells_),
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellListArchive, cell_uid_range_),
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellListArchive, cell_range_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, valuetype_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, numbervalue_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, stringvalue_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, boolvalue_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, richtextstorage_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, use_all_spare_formats_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, explicit_flags_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, cell_format_kind_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, number_format_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, currency_format_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, date_format_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, duration_format_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, text_format_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, boolean_format_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, formatted_value_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, formatted_rich_text_value_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, apply_spare_format_only_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, spare_format_type_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, decimal_low_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, decimal_high_),
  11,
  10,
  0,
  14,
  2,
  15,
  12,
  13,
  3,
  4,
  5,
  6,
  7,
  8,
  1,
  9,
  16,
  17,
  18,
  19,
  PROTOBUF_FIELD_OFFSET(::TST::CellSpecArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellSpecArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CellSpecArchive, interaction_type_),
  PROTOBUF_FIELD_OFFSET(::TST::CellSpecArchive, formula_),
  PROTOBUF_FIELD_OFFSET(::TST::CellSpecArchive, range_control_min_),
  PROTOBUF_FIELD_OFFSET(::TST::CellSpecArchive, range_control_max_),
  PROTOBUF_FIELD_OFFSET(::TST::CellSpecArchive, range_control_inc_),
  PROTOBUF_FIELD_OFFSET(::TST::CellSpecArchive, chooser_control_popup_model_),
  PROTOBUF_FIELD_OFFSET(::TST::CellSpecArchive, chooser_control_start_w_first_),
  PROTOBUF_FIELD_OFFSET(::TST::CellSpecArchive, category_summary_should_display_label_),
  5,
  0,
  2,
  3,
  4,
  1,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::CommentStorageWrapperArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommentStorageWrapperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommentStorageWrapperArchive, comment_storage_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArchive, property_map_to_set_),
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArchive, property_map_to_reset_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArray, large_array_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArraySegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArraySegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArraySegment, large_array_segment_),
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArraySegment, elements_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffMapArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffMapArchive, uid_based_),
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffMapArchive, expanded_cell_ids_),
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffMapArchive, cell_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffMapArchive, cell_diff_array_),
  2,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive, cell_id_),
  PROTOBUF_FIELD_OFFSET(::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive, old_style_),
  PROTOBUF_FIELD_OFFSET(::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive, new_style_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::DoubleStyleMapArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::DoubleStyleMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::DoubleStyleMapArchive, capacity_),
  PROTOBUF_FIELD_OFFSET(::TST::DoubleStyleMapArchive, count_),
  PROTOBUF_FIELD_OFFSET(::TST::DoubleStyleMapArchive, cell_map_entry_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::StyleTableMapArchive_StyleTableMapEntryArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StyleTableMapArchive_StyleTableMapEntryArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::StyleTableMapArchive_StyleTableMapEntryArchive, key_),
  PROTOBUF_FIELD_OFFSET(::TST::StyleTableMapArchive_StyleTableMapEntryArchive, old_style_),
  PROTOBUF_FIELD_OFFSET(::TST::StyleTableMapArchive_StyleTableMapEntryArchive, new_style_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::StyleTableMapArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StyleTableMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::StyleTableMapArchive, capacity_),
  PROTOBUF_FIELD_OFFSET(::TST::StyleTableMapArchive, count_),
  PROTOBUF_FIELD_OFFSET(::TST::StyleTableMapArchive, map_entry_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, tablemodel_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, selection_type_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, anchor_cell_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, cell_ranges_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, base_ranges_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, cursor_cell_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, table_info_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, cell_uid_region_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, base_uid_region_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, anchor_cell_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, cursor_cell_uid_),
  0,
  8,
  1,
  ~0u,
  ~0u,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::DeathhawkRdar39989167CellSelectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::DeathhawkRdar39989167CellSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::DeathhawkRdar39989167CellSelectionArchive, table_info_),
  PROTOBUF_FIELD_OFFSET(::TST::DeathhawkRdar39989167CellSelectionArchive, selection_type_),
  PROTOBUF_FIELD_OFFSET(::TST::DeathhawkRdar39989167CellSelectionArchive, cell_uid_region_),
  PROTOBUF_FIELD_OFFSET(::TST::DeathhawkRdar39989167CellSelectionArchive, base_uid_region_),
  PROTOBUF_FIELD_OFFSET(::TST::DeathhawkRdar39989167CellSelectionArchive, anchor_cell_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::DeathhawkRdar39989167CellSelectionArchive, cursor_cell_uid_),
  0,
  5,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSelectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSelectionArchive, mask_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::ControlCellSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::StockCellSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::TableNameSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::AutofillSelectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::AutofillSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::AutofillSelectionArchive, source_cell_range_),
  PROTOBUF_FIELD_OFFSET(::TST::AutofillSelectionArchive, target_cell_range_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::FilterRuleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FilterRuleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::FilterRuleArchive, predicate_),
  PROTOBUF_FIELD_OFFSET(::TST::FilterRuleArchive, disabled_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleArchive, override_count_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleArchive, table_properties_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CellStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CellStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CellStyleArchive, override_count_),
  PROTOBUF_FIELD_OFFSET(::TST::CellStyleArchive, cell_properties_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, formula_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, predicate_type_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, qualifier1_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, qualifier2_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, param_index1_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, param_index2_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, param_index0_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive_ConditionalStyleRule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive_ConditionalStyleRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive_ConditionalStyleRule, predicate_),
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive_ConditionalStyleRule, cell_style_),
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive_ConditionalStyleRule, text_style_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive, rulecount_),
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive, rules_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::FilterSetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FilterSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::FilterSetArchive, type_),
  PROTOBUF_FIELD_OFFSET(::TST::FilterSetArchive, is_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::FilterSetArchive, filter_rules_),
  PROTOBUF_FIELD_OFFSET(::TST::FilterSetArchive, needs_formula_rewrite_for_import_),
  PROTOBUF_FIELD_OFFSET(::TST::FilterSetArchive, filter_offsets_),
  PROTOBUF_FIELD_OFFSET(::TST::FilterSetArchive, filter_enabled_),
  0,
  2,
  ~0u,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive_RowOrColumnState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive_RowOrColumnState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive_RowOrColumnState, row_or_column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive_RowOrColumnState, user_hidden_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive_RowOrColumnState, filtered_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, hidden_state_extent_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, hidden_states_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, row_or_column_direction_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, threshold_value_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, needs_to_update_filter_set_for_import_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, collapsed_group_uids_),
  0,
  ~0u,
  1,
  ~0u,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStatesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStatesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStatesArchive, hidden_states_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStatesArchive, column_hidden_state_extent_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStatesArchive, row_hidden_state_extent_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStatesOwnerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStatesOwnerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStatesOwnerArchive, owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStatesOwnerArchive, hidden_states_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::ExpandCollapseStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ExpandCollapseStateArchive, uids_collapsed_),
  PROTOBUF_FIELD_OFFSET(::TST::ExpandCollapseStateArchive, uids_expanded_),
  PROTOBUF_FIELD_OFFSET(::TST::TokenAttachmentArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TokenAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TokenAttachmentArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::TokenAttachmentArchive, expressionnode_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::FormulaArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::FormulaArchive, expressiontree_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::ExpressionNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ExpressionNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ExpressionNodeArchive, children_),
  PROTOBUF_FIELD_OFFSET(::TST::ExpressionNodeArchive, first_index_),
  PROTOBUF_FIELD_OFFSET(::TST::ExpressionNodeArchive, last_index_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::BooleanNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::BooleanNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::BooleanNodeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::BooleanNodeArchive, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::NumberNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::NumberNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::NumberNodeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::NumberNodeArchive, number_),
  PROTOBUF_FIELD_OFFSET(::TST::NumberNodeArchive, decimal_low_),
  PROTOBUF_FIELD_OFFSET(::TST::NumberNodeArchive, decimal_high_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::StringNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StringNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::StringNodeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::StringNodeArchive, value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::IdentifierNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::IdentifierNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::IdentifierNodeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::IdentifierNodeArchive, identifier_),
  PROTOBUF_FIELD_OFFSET(::TST::IdentifierNodeArchive, symbol_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::ArrayNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ArrayNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ArrayNodeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::ArrayNodeArchive, columns_),
  PROTOBUF_FIELD_OFFSET(::TST::ArrayNodeArchive, rows_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::ListNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ListNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ListNodeArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::OperatorNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::OperatorNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::OperatorNodeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::OperatorNodeArchive, operatorchar_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::PostfixOperatorNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::PostfixOperatorNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::PostfixOperatorNodeArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::PrefixOperatorNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::PrefixOperatorNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::PrefixOperatorNodeArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::FunctionNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FunctionNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::FunctionNodeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::FunctionNodeArchive, functionindex_),
  PROTOBUF_FIELD_OFFSET(::TST::FunctionNodeArchive, invalidfunctionname_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::FunctionEndNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FunctionEndNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::FunctionEndNodeArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::DateNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::DateNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::DateNodeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::DateNodeArchive, value_),
  PROTOBUF_FIELD_OFFSET(::TST::DateNodeArchive, format_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, rangereference_),
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, preserve_flags_),
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, hosttableid_),
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, host_cell_ref_),
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, table_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, range_top_left_),
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, range_bottom_right_),
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, category_ref_),
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, uid_range_rect_),
  1,
  2,
  9,
  0,
  8,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::DurationNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::DurationNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::DurationNodeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::DurationNodeArchive, timeinterval_),
  PROTOBUF_FIELD_OFFSET(::TST::DurationNodeArchive, smallest_),
  PROTOBUF_FIELD_OFFSET(::TST::DurationNodeArchive, largest_),
  PROTOBUF_FIELD_OFFSET(::TST::DurationNodeArchive, style_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TST::ArgumentPlaceholderNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ArgumentPlaceholderNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ArgumentPlaceholderNodeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::ArgumentPlaceholderNodeArchive, functionindex_),
  PROTOBUF_FIELD_OFFSET(::TST::ArgumentPlaceholderNodeArchive, argumentindex_),
  PROTOBUF_FIELD_OFFSET(::TST::ArgumentPlaceholderNodeArchive, mode_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::EmptyExpressionNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::EmptyExpressionNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::EmptyExpressionNodeArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::LetNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::LetNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::LetNodeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::LetNodeArchive, whitespace_after_let_),
  PROTOBUF_FIELD_OFFSET(::TST::LetNodeArchive, whitespace_after_identifier_),
  PROTOBUF_FIELD_OFFSET(::TST::LetNodeArchive, whitespace_after_equals_),
  PROTOBUF_FIELD_OFFSET(::TST::LetNodeArchive, whitespace_after_delimiter_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::InNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::InNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::InNodeArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::VariableNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::VariableNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::VariableNodeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::VariableNodeArchive, identifier_),
  PROTOBUF_FIELD_OFFSET(::TST::VariableNodeArchive, symbol_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::LayoutHintArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::LayoutHintArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::LayoutHintArchive, isvalid_),
  PROTOBUF_FIELD_OFFSET(::TST::LayoutHintArchive, cellrange_),
  PROTOBUF_FIELD_OFFSET(::TST::LayoutHintArchive, hintid_),
  PROTOBUF_FIELD_OFFSET(::TST::LayoutHintArchive, maximumsize_),
  PROTOBUF_FIELD_OFFSET(::TST::LayoutHintArchive, partitionposition_),
  PROTOBUF_FIELD_OFFSET(::TST::LayoutHintArchive, horizontal_),
  PROTOBUF_FIELD_OFFSET(::TST::LayoutHintArchive, effectivesize_),
  PROTOBUF_FIELD_OFFSET(::TST::LayoutHintArchive, partitioningpass_),
  4,
  0,
  1,
  2,
  6,
  5,
  3,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::CompletionTokenAttachmentArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CompletionTokenAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CompletionTokenAttachmentArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CompletionTokenAttachmentArchive, completiontext_),
  PROTOBUF_FIELD_OFFSET(::TST::CompletionTokenAttachmentArchive, caretposition_),
  PROTOBUF_FIELD_OFFSET(::TST::CompletionTokenAttachmentArchive, prefixstart_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateFormulaOwnerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateFormulaOwnerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateFormulaOwnerArchive, owner_id_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateFormulaOwnerArchive, threshold_value_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateFormulaOwnerArchive, needs_to_update_filter_set_for_import_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::FormulaStoreArchive_FormulaStorePair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaStoreArchive_FormulaStorePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::FormulaStoreArchive_FormulaStorePair, formula_index_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaStoreArchive_FormulaStorePair, formula_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::FormulaStoreArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaStoreArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::FormulaStoreArchive, next_formula_index_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaStoreArchive, formulas_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::MergeOperationArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::MergeOperationArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::MergeOperationArchive, merge_type_),
  PROTOBUF_FIELD_OFFSET(::TST::MergeOperationArchive, merge_ranges_),
  PROTOBUF_FIELD_OFFSET(::TST::MergeOperationArchive, merge_formulas_),
  PROTOBUF_FIELD_OFFSET(::TST::MergeOperationArchive, merge_formula_indexes_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::MergeOwnerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::MergeOwnerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::MergeOwnerArchive, owner_id_),
  PROTOBUF_FIELD_OFFSET(::TST::MergeOwnerArchive, formula_store_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::PencilAnnotationArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::PencilAnnotationArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::PencilAnnotationArchive, table_info_),
  PROTOBUF_FIELD_OFFSET(::TST::PencilAnnotationArchive, pencil_annotation_storage_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::PencilAnnotationOwnerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::PencilAnnotationOwnerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::PencilAnnotationOwnerArchive, owner_id_),
  PROTOBUF_FIELD_OFFSET(::TST::PencilAnnotationOwnerArchive, formula_store_),
  PROTOBUF_FIELD_OFFSET(::TST::PencilAnnotationOwnerArchive, annotations_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, bool_count_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, bool_true_count_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, number_count_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, date_count_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, duration_count_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, string_count_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, error_count_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, is_circular_ref_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, min_value_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, max_value_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, number_total_value_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, first_date_seen_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, total_secs_since_ref_date_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, secs_to_add_),
  4,
  9,
  5,
  6,
  7,
  8,
  12,
  13,
  0,
  1,
  2,
  3,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::TST::GroupColumnArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupColumnArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::GroupColumnArchive, column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupColumnArchive, grouping_type_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupColumnArchive, grouping_functor_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupColumnArchive, grouping_column_uid_),
  0,
  3,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::GroupColumnListArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::GroupColumnListArchive, group_column_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnAggregateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnAggregateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ColumnAggregateArchive, column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnAggregateArchive, level_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnAggregateArchive, agg_type_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::ColumnAggregateListArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ColumnAggregateListArchive, aggregates_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive, formula_coord_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive, accum_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive, child_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive, row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive, cell_value_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive, formats_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive, row_sets_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive, group_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive, group_value_tuple_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive, group_cell_value_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive, child_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive, row_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive, agg_formula_coords_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive, format_manager_),
  0,
  1,
  3,
  ~0u,
  ~0u,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive, column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive, agg_node_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive, group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive, group_column_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive, group_node_root_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive, aggregator_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive, column_agg_type_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive, is_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive, indirect_agg_type_change_formula_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive, grouping_columns_formula_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive, grouping_column_headers_formula_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive, aggs_in_group_root_formula_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive, column_order_changed_formula_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive, row_order_changed_formula_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive_GroupByArchive, row_order_changed_ignoring_recalc_formula_),
  0,
  ~0u,
  1,
  ~0u,
  ~0u,
  9,
  2,
  3,
  5,
  4,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive, owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive, group_by_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::RichTextPayloadArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::RichTextPayloadArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::RichTextPayloadArchive, storage_),
  PROTOBUF_FIELD_OFFSET(::TST::RichTextPayloadArchive, range_),
  PROTOBUF_FIELD_OFFSET(::TST::RichTextPayloadArchive, cellid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEqualsTokenAttachmentArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEqualsTokenAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEqualsTokenAttachmentArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, fill_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, type_is_mixed_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, color_has_been_modified_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, color_is_mixed_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, first_color_has_been_modified_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, first_color_is_mixed_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, last_color_has_been_modified_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, last_color_is_mixed_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, gradient_type_has_been_modified_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, gradient_type_is_mixed_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, gradient_angle_has_been_modified_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, gradient_angle_is_mixed_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, image_data_has_been_modified_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, image_data_is_mixed_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, tint_color_has_been_modified_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, tint_color_is_mixed_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, scale_has_been_modified_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, scale_is_mixed_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, technique_has_been_modified_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, technique_is_mixed_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  PROTOBUF_FIELD_OFFSET(::TST::FormulaSelectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::FormulaSelectionArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaSelectionArchive, activetokencharindex_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CellBorderArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellBorderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CellBorderArchive, top_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::CellBorderArchive, top_stroke_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CellBorderArchive, right_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::CellBorderArchive, right_stroke_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CellBorderArchive, bottom_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::CellBorderArchive, bottom_stroke_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CellBorderArchive, left_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::CellBorderArchive, left_stroke_order_),
  0,
  4,
  1,
  5,
  2,
  6,
  3,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::DefaultCellStylesContainerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::DefaultCellStylesContainerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::DefaultCellStylesContainerArchive, table_style_network_),
  PROTOBUF_FIELD_OFFSET(::TST::DefaultCellStylesContainerArchive, header_row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::DefaultCellStylesContainerArchive, footer_row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::DefaultCellStylesContainerArchive, header_column_uids_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::MultiTableRemapperArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::MultiTableRemapperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::MultiTableRemapperArchive, mapping_purpose_),
  PROTOBUF_FIELD_OFFSET(::TST::MultiTableRemapperArchive, should_steal_references_),
  PROTOBUF_FIELD_OFFSET(::TST::MultiTableRemapperArchive, can_reuse_table_names_),
  PROTOBUF_FIELD_OFFSET(::TST::MultiTableRemapperArchive, owner_uid_mapper_),
  PROTOBUF_FIELD_OFFSET(::TST::MultiTableRemapperArchive, backing_tables_for_charts_),
  PROTOBUF_FIELD_OFFSET(::TST::MultiTableRemapperArchive, cross_document_paste_),
  PROTOBUF_FIELD_OFFSET(::TST::MultiTableRemapperArchive, nested_inner_mapper_),
  1,
  2,
  3,
  ~0u,
  0,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, replacement_behavior_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, style_replace_prototypes_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, style_replace_replacements_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, style_modify_styles_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, style_modify_old_prop_maps_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, style_modify_new_prop_maps_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, style_delete_prototypes_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, style_delete_replacements_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, table_preset_replace_prototype_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, table_preset_replace_replacement_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, table_preset_delete_prototype_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, table_preset_delete_replacement_),
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::SummaryCellVendorArchive_SummaryCellEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryCellVendorArchive_SummaryCellEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::SummaryCellVendorArchive_SummaryCellEntry, wildcarduid_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryCellVendorArchive_SummaryCellEntry, columnuid_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryCellVendorArchive_SummaryCellEntry, cell_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::SummaryCellVendorArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryCellVendorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::SummaryCellVendorArchive, table_info_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryCellVendorArchive, entries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOrderArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOrderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOrderArchive, table_info_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOrderArchive, uid_map_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrTileArchive_NameFragmentArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrTileArchive_NameFragmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrTileArchive_NameFragmentArchive, name_fragment_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrTileArchive_NameFragmentArchive, name_precedent_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrTileArchive_NameFragmentArchive, uses_of_name_fragment_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrTileArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrTileArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrTileArchive, first_fragment_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrTileArchive, last_fragment_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrTileArchive, name_frag_entries_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive_PerTableArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive_PerTableArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive_PerTableArchive, table_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive_PerTableArchive, per_table_precedent_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive_PerTableArchive, is_deleted_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive_PerTableArchive, header_row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive_PerTableArchive, header_column_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive_PerTableArchive, update_header_row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive_PerTableArchive, update_header_column_uids_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive, owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive, nrm_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive, per_tables_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive, name_frag_tiles_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::WidthHeightCacheFittingEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::WidthHeightCacheFittingEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::WidthHeightCacheFittingEntry, fitting_index_),
  PROTOBUF_FIELD_OFFSET(::TST::WidthHeightCacheFittingEntry, fitting_size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::WidthHeightCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::WidthHeightCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::WidthHeightCache, rows_fitting_entries_),
  PROTOBUF_FIELD_OFFSET(::TST::WidthHeightCache, columns_count_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::LayoutEngineArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::LayoutEngineArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::LayoutEngineArchive, width_height_cache_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::TST::CellID)},
  { 9, 18, sizeof(::TST::CellUIDLookupListArchive)},
  { 22, 32, sizeof(::TST::CellUIDListArchive)},
  { 37, 45, sizeof(::TST::TableSize)},
  { 48, 55, sizeof(::TST::ExpandedTableSize)},
  { 57, 64, sizeof(::TST::CellRange)},
  { 66, 73, sizeof(::TST::ExpandedCellRange)},
  { 75, 84, sizeof(::TST::TableSelection)},
  { 88, 101, sizeof(::TST::TileRowInfo)},
  { 109, 122, sizeof(::TST::Tile)},
  { 130, 137, sizeof(::TST::TileStorage_Tile)},
  { 139, 147, sizeof(::TST::TileStorage)},
  { 150, 160, sizeof(::TST::PopUpMenuModel_CellValue)},
  { 165, -1, sizeof(::TST::PopUpMenuModel)},
  { 172, 181, sizeof(::TST::ImportWarningSetArchive_FormulaImportWarning)},
  { 185, 207, sizeof(::TST::ImportWarningSetArchive)},
  { 224, 231, sizeof(::TST::CellRefImportWarningSetPairArchive)},
  { 233, -1, sizeof(::TST::ImportWarningSetByCellRefArchive)},
  { 239, 255, sizeof(::TST::TableDataList_ListEntry)},
  { 266, 275, sizeof(::TST::TableDataList)},
  { 279, 287, sizeof(::TST::TableDataListSegment)},
  { 290, 297, sizeof(::TST::TableRBTree_Node)},
  { 299, -1, sizeof(::TST::TableRBTree)},
  { 305, 316, sizeof(::TST::HeaderStorageBucket_Header)},
  { 322, 329, sizeof(::TST::HeaderStorageBucket)},
  { 331, 338, sizeof(::TST::HeaderStorage)},
  { 340, 367, sizeof(::TST::DataStore)},
  { 389, 406, sizeof(::TST::TableInfoArchive)},
  { 418, 425, sizeof(::TST::CategoryInfoArchive)},
  { 427, 434, sizeof(::TST::WPTableInfoArchive)},
  { 436, 473, sizeof(::TST::TableStyleNetworkArchive)},
  { 505, 512, sizeof(::TST::TableSortOrderArchive_SortRuleArchive)},
  { 514, 521, sizeof(::TST::TableSortOrderArchive)},
  { 523, 530, sizeof(::TST::TableSortOrderUIDArchive_SortRuleArchive)},
  { 532, 539, sizeof(::TST::TableSortOrderUIDArchive)},
  { 541, 547, sizeof(::TST::SortRuleReferenceTrackerArchive)},
  { 548, -1, sizeof(::TST::CellRegion)},
  { 554, -1, sizeof(::TST::CellUIDRegionArchive)},
  { 560, 574, sizeof(::TST::StructuredTextImportRecord)},
  { 583, 664, sizeof(::TST::TableModelArchive)},
  { 740, 769, sizeof(::TST::SummaryModelArchive)},
  { 793, 802, sizeof(::TST::SummaryModelGroupByChangeStateArchive)},
  { 806, -1, sizeof(::TST::ColumnRowUIDMapArchive)},
  { 817, 826, sizeof(::TST::StrokeLayerArchive_StrokeRunArchive)},
  { 830, 837, sizeof(::TST::StrokeLayerArchive)},
  { 839, 851, sizeof(::TST::StrokeSidecarArchive)},
  { 858, -1, sizeof(::TST::DurationWrapperArchive)},
  { 863, 896, sizeof(::TST::Cell)},
  { 924, -1, sizeof(::TST::MergeRegionMapArchive)},
  { 930, 944, sizeof(::TST::CellMapArchive)},
  { 953, 959, sizeof(::TST::CellListArchive_OptionalCell)},
  { 960, 967, sizeof(::TST::CellListArchive)},
  { 969, 979, sizeof(::TST::ConcurrentCellMapArchive)},
  { 984, 990, sizeof(::TST::ConcurrentCellListArchive_OptionalCell)},
  { 991, 999, sizeof(::TST::ConcurrentCellListArchive)},
  { 1002, 1027, sizeof(::TST::CellFormatAndValueArchive)},
  { 1047, 1060, sizeof(::TST::CellSpecArchive)},
  { 1068, 1074, sizeof(::TST::CommentStorageWrapperArchive)},
  { 1075, 1082, sizeof(::TST::CellDiffArchive)},
  { 1084, 1090, sizeof(::TST::CellDiffArray)},
  { 1091, 1098, sizeof(::TST::CellDiffArraySegment)},
  { 1100, 1109, sizeof(::TST::CellDiffMapArchive)},
  { 1113, 1121, sizeof(::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive)},
  { 1124, 1132, sizeof(::TST::DoubleStyleMapArchive)},
  { 1135, 1143, sizeof(::TST::StyleTableMapArchive_StyleTableMapEntryArchive)},
  { 1146, 1154, sizeof(::TST::StyleTableMapArchive)},
  { 1157, 1173, sizeof(::TST::SelectionArchive)},
  { 1184, 1195, sizeof(::TST::DeathhawkRdar39989167CellSelectionArchive)},
  { 1201, 1207, sizeof(::TST::StrokeSelectionArchive)},
  { 1208, -1, sizeof(::TST::ControlCellSelectionArchive)},
  { 1213, -1, sizeof(::TST::StockCellSelectionArchive)},
  { 1218, -1, sizeof(::TST::TableNameSelectionArchive)},
  { 1223, 1230, sizeof(::TST::AutofillSelectionArchive)},
  { 1232, 1239, sizeof(::TST::FilterRuleArchive)},
  { 1241, 1249, sizeof(::TST::TableStyleArchive)},
  { 1252, 1260, sizeof(::TST::CellStyleArchive)},
  { 1263, 1275, sizeof(::TST::FormulaPredicateArchive)},
  { 1282, 1290, sizeof(::TST::ConditionalStyleSetArchive_ConditionalStyleRule)},
  { 1293, 1300, sizeof(::TST::ConditionalStyleSetArchive)},
  { 1302, 1313, sizeof(::TST::FilterSetArchive)},
  { 1319, 1327, sizeof(::TST::HiddenStateExtentArchive_RowOrColumnState)},
  { 1330, 1341, sizeof(::TST::HiddenStateExtentArchive)},
  { 1347, 1355, sizeof(::TST::HiddenStatesArchive)},
  { 1358, 1365, sizeof(::TST::HiddenStatesOwnerArchive)},
  { 1367, -1, sizeof(::TST::ExpandCollapseStateArchive)},
  { 1374, 1381, sizeof(::TST::TokenAttachmentArchive)},
  { 1383, 1389, sizeof(::TST::FormulaArchive)},
  { 1390, 1398, sizeof(::TST::ExpressionNodeArchive)},
  { 1401, 1408, sizeof(::TST::BooleanNodeArchive)},
  { 1410, 1419, sizeof(::TST::NumberNodeArchive)},
  { 1423, 1430, sizeof(::TST::StringNodeArchive)},
  { 1432, 1440, sizeof(::TST::IdentifierNodeArchive)},
  { 1443, 1451, sizeof(::TST::ArrayNodeArchive)},
  { 1454, 1460, sizeof(::TST::ListNodeArchive)},
  { 1461, 1468, sizeof(::TST::OperatorNodeArchive)},
  { 1470, 1476, sizeof(::TST::PostfixOperatorNodeArchive)},
  { 1477, 1483, sizeof(::TST::PrefixOperatorNodeArchive)},
  { 1484, 1492, sizeof(::TST::FunctionNodeArchive)},
  { 1495, 1501, sizeof(::TST::FunctionEndNodeArchive)},
  { 1502, 1510, sizeof(::TST::DateNodeArchive)},
  { 1513, 1528, sizeof(::TST::ReferenceNodeArchive)},
  { 1538, 1548, sizeof(::TST::DurationNodeArchive)},
  { 1553, 1562, sizeof(::TST::ArgumentPlaceholderNodeArchive)},
  { 1566, 1572, sizeof(::TST::EmptyExpressionNodeArchive)},
  { 1573, 1583, sizeof(::TST::LetNodeArchive)},
  { 1588, 1594, sizeof(::TST::InNodeArchive)},
  { 1595, 1603, sizeof(::TST::VariableNodeArchive)},
  { 1606, 1619, sizeof(::TST::LayoutHintArchive)},
  { 1627, 1636, sizeof(::TST::CompletionTokenAttachmentArchive)},
  { 1640, 1648, sizeof(::TST::HiddenStateFormulaOwnerArchive)},
  { 1651, 1658, sizeof(::TST::FormulaStoreArchive_FormulaStorePair)},
  { 1660, 1667, sizeof(::TST::FormulaStoreArchive)},
  { 1669, 1678, sizeof(::TST::MergeOperationArchive)},
  { 1682, 1689, sizeof(::TST::MergeOwnerArchive)},
  { 1691, 1698, sizeof(::TST::PencilAnnotationArchive)},
  { 1700, 1708, sizeof(::TST::PencilAnnotationOwnerArchive)},
  { 1711, 1730, sizeof(::TST::AccumulatorArchive)},
  { 1744, 1753, sizeof(::TST::GroupColumnArchive)},
  { 1757, -1, sizeof(::TST::GroupColumnListArchive)},
  { 1763, 1771, sizeof(::TST::ColumnAggregateArchive)},
  { 1774, -1, sizeof(::TST::ColumnAggregateListArchive)},
  { 1780, 1788, sizeof(::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive)},
  { 1791, -1, sizeof(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive)},
  { 1797, -1, sizeof(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive)},
  { 1803, 1811, sizeof(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive)},
  { 1814, 1826, sizeof(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive)},
  { 1833, 1840, sizeof(::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive)},
  { 1842, 1860, sizeof(::TST::CategoryOwnerArchive_GroupByArchive)},
  { 1873, 1880, sizeof(::TST::CategoryOwnerArchive)},
  { 1882, 1890, sizeof(::TST::RichTextPayloadArchive)},
  { 1893, 1899, sizeof(::TST::FormulaEqualsTokenAttachmentArchive)},
  { 1900, 1925, sizeof(::TST::CellFillStandIn)},
  { 1945, 1952, sizeof(::TST::FormulaSelectionArchive)},
  { 1954, 1967, sizeof(::TST::CellBorderArchive)},
  { 1975, 1984, sizeof(::TST::DefaultCellStylesContainerArchive)},
  { 1988, 2000, sizeof(::TST::MultiTableRemapperArchive)},
  { 2007, 2024, sizeof(::TST::ChangePropagationMapWrapper)},
  { 2036, 2044, sizeof(::TST::SummaryCellVendorArchive_SummaryCellEntry)},
  { 2047, 2054, sizeof(::TST::SummaryCellVendorArchive)},
  { 2056, 2063, sizeof(::TST::CategoryOrderArchive)},
  { 2065, 2073, sizeof(::TST::HeaderNameMgrTileArchive_NameFragmentArchive)},
  { 2076, 2084, sizeof(::TST::HeaderNameMgrTileArchive)},
  { 2087, 2099, sizeof(::TST::HeaderNameMgrArchive_PerTableArchive)},
  { 2106, 2115, sizeof(::TST::HeaderNameMgrArchive)},
  { 2119, 2126, sizeof(::TST::WidthHeightCacheFittingEntry)},
  { 2128, 2135, sizeof(::TST::WidthHeightCache)},
  { 2137, 2143, sizeof(::TST::LayoutEngineArchive)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CellID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CellUIDLookupListArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CellUIDListArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TableSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ExpandedTableSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CellRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ExpandedCellRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TableSelection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TileRowInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_Tile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TileStorage_Tile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TileStorage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_PopUpMenuModel_CellValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_PopUpMenuModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ImportWarningSetArchive_FormulaImportWarning_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ImportWarningSetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CellRefImportWarningSetPairArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ImportWarningSetByCellRefArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TableDataList_ListEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TableDataList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TableDataListSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TableRBTree_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TableRBTree_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_HeaderStorageBucket_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_HeaderStorageBucket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_HeaderStorage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_DataStore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TableInfoArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CategoryInfoArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_WPTableInfoArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TableStyleNetworkArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TableSortOrderArchive_SortRuleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TableSortOrderArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TableSortOrderUIDArchive_SortRuleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TableSortOrderUIDArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_SortRuleReferenceTrackerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CellRegion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CellUIDRegionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_StructuredTextImportRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TableModelArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_SummaryModelArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_SummaryModelGroupByChangeStateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ColumnRowUIDMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_StrokeLayerArchive_StrokeRunArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_StrokeLayerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_StrokeSidecarArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_DurationWrapperArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_Cell_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_MergeRegionMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CellMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CellListArchive_OptionalCell_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CellListArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ConcurrentCellMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ConcurrentCellListArchive_OptionalCell_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ConcurrentCellListArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CellFormatAndValueArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CellSpecArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommentStorageWrapperArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CellDiffArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CellDiffArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CellDiffArraySegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CellDiffMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_DoubleStyleMapArchive_DoubleStyleMapEntryArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_DoubleStyleMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_StyleTableMapArchive_StyleTableMapEntryArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_StyleTableMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_SelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_DeathhawkRdar39989167CellSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_StrokeSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ControlCellSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_StockCellSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TableNameSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_AutofillSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_FilterRuleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TableStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CellStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_FormulaPredicateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ConditionalStyleSetArchive_ConditionalStyleRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ConditionalStyleSetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_FilterSetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_HiddenStateExtentArchive_RowOrColumnState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_HiddenStateExtentArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_HiddenStatesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_HiddenStatesOwnerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ExpandCollapseStateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TokenAttachmentArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_FormulaArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ExpressionNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_BooleanNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_NumberNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_StringNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_IdentifierNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ArrayNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ListNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_OperatorNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_PostfixOperatorNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_PrefixOperatorNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_FunctionNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_FunctionEndNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_DateNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ReferenceNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_DurationNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ArgumentPlaceholderNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_EmptyExpressionNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_LetNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_InNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_VariableNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_LayoutHintArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CompletionTokenAttachmentArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_HiddenStateFormulaOwnerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_FormulaStoreArchive_FormulaStorePair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_FormulaStoreArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_MergeOperationArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_MergeOwnerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_PencilAnnotationArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_PencilAnnotationOwnerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_AccumulatorArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_GroupColumnArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_GroupColumnListArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ColumnAggregateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ColumnAggregateListArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CategoryOwnerArchive_GroupByArchive_AggNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CategoryOwnerArchive_GroupByArchive_AggregatorArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CategoryOwnerArchive_GroupByArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CategoryOwnerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_RichTextPayloadArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_FormulaEqualsTokenAttachmentArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CellFillStandIn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_FormulaSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CellBorderArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_DefaultCellStylesContainerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_MultiTableRemapperArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ChangePropagationMapWrapper_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_SummaryCellVendorArchive_SummaryCellEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_SummaryCellVendorArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CategoryOrderArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_HeaderNameMgrTileArchive_NameFragmentArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_HeaderNameMgrTileArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_HeaderNameMgrArchive_PerTableArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_HeaderNameMgrArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_WidthHeightCacheFittingEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_WidthHeightCache_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_LayoutEngineArchive_default_instance_),
};

const char descriptor_table_protodef_TSTArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021TSTArchives.proto\022\003TST\032\021TSPMessages.pr"
  "oto\032\021TSDArchives.proto\032\021TSKArchives.prot"
  "o\032\021TSSArchives.proto\032\022TSCEArchives.proto"
  "\032\022TSWPArchives.proto\032\037TSTStylePropertyAr"
  "chiving.proto\"Q\n\006CellID\022\022\n\npackedData\030\001 "
  "\002(\007\0223\n\016expanded_coord\030\002 \001(\0132\033.TSCE.CellC"
  "oordinateArchive\"\246\001\n\030CellUIDLookupListAr"
  "chive\022/\n\013column_uids\030\001 \001(\0132\032.TSCE.UidLoo"
  "kupListArchive\022,\n\010row_uids\030\002 \001(\0132\032.TSCE."
  "UidLookupListArchive\022\026\n\016column_indexes\030\003"
  " \003(\005\022\023\n\013row_indexes\030\004 \003(\005\"\325\001\n\022CellUIDLis"
  "tArchive\022\033\n\010row_uids\030\001 \003(\0132\t.TSP.UUID\022\036\n"
  "\013column_uids\030\002 \003(\0132\t.TSP.UUID\022\036\n\026compres"
  "sed_row_indexes\030\003 \003(\005\022!\n\031compressed_colu"
  "mn_indexes\030\004 \003(\005\022\?\n\030uncompressed_lookup_"
  "list\030\005 \001(\0132\035.TST.CellUIDLookupListArchiv"
  "e\"F\n\tTableSize\022\022\n\npackedData\030\001 \002(\007\022\023\n\013nu"
  "m_columns\030\002 \001(\r\022\020\n\010num_rows\030\003 \001(\r\":\n\021Exp"
  "andedTableSize\022\023\n\013num_columns\030\001 \002(\r\022\020\n\010n"
  "um_rows\030\002 \002(\r\"F\n\tCellRange\022\033\n\006origin\030\001 \002"
  "(\0132\013.TST.CellID\022\034\n\004size\030\002 \002(\0132\016.TST.Tabl"
  "eSize\"f\n\021ExpandedCellRange\022+\n\006origin\030\001 \002"
  "(\0132\033.TSCE.CellCoordinateArchive\022$\n\004size\030"
  "\002 \002(\0132\026.TST.ExpandedTableSize\"\261\001\n\016TableS"
  "election\022!\n\tcellRange\030\001 \002(\0132\016.TST.CellRa"
  "nge\022)\n\021extendedCellRange\030\002 \002(\0132\016.TST.Cel"
  "lRange\022\036\n\026extendedCellRangeValid\030\003 \002(\010\0221"
  "\n\016selection_type\030\004 \002(\0162\031.TST.SelectionTy"
  "peArchive\"\342\001\n\013TileRowInfo\022\026\n\016tile_row_in"
  "dex\030\001 \002(\r\022\022\n\ncell_count\030\002 \002(\r\022#\n\033cell_st"
  "orage_buffer_pre_bnc\030\003 \002(\014\022\034\n\024cell_offse"
  "ts_pre_bnc\030\004 \002(\014\022\027\n\017storage_version\030\005 \001("
  "\r\022\033\n\023cell_storage_buffer\030\006 \001(\014\022\024\n\014cell_o"
  "ffsets\030\007 \001(\014\022\030\n\020has_wide_offsets\030\010 \001(\010\"\302"
  "\001\n\004Tile\022\021\n\tmaxColumn\030\001 \002(\r\022\016\n\006maxRow\030\002 \002"
  "(\r\022\020\n\010numCells\030\003 \002(\r\022\017\n\007numrows\030\004 \002(\r\022\"\n"
  "\010rowInfos\030\005 \003(\0132\020.TST.TileRowInfo\022\027\n\017sto"
  "rage_version\030\006 \001(\r\022\031\n\021last_saved_in_BNC\030"
  "\007 \001(\010\022\034\n\024should_use_wide_rows\030\010 \001(\010\"\232\001\n\013"
  "TileStorage\022$\n\005tiles\030\001 \003(\0132\025.TST.TileSto"
  "rage.Tile\022\021\n\ttile_size\030\002 \001(\r\022\034\n\024should_u"
  "se_wide_rows\030\003 \001(\010\0324\n\004Tile\022\016\n\006tileid\030\001 \002"
  "(\r\022\034\n\004tile\030\002 \002(\0132\016.TSP.Reference\"\346\003\n\016Pop"
  "UpMenuModel\022/\n\004item\030\001 \003(\0132\035.TST.PopUpMen"
  "uModel.CellValueB\002\030\001\022)\n\ttsce_item\030\002 \003(\0132"
  "\026.TSCE.CellValueArchive\032\225\002\n\tCellValue\022:\n"
  "\017cell_value_type\030\001 \002(\0162!.TST.PopUpMenuMo"
  "del.CellValueType\0224\n\rboolean_value\030\002 \001(\013"
  "2\035.TSCE.BooleanCellValueArchive\022.\n\ndate_"
  "value\030\003 \001(\0132\032.TSCE.DateCellValueArchive\022"
  "2\n\014number_value\030\004 \001(\0132\034.TSCE.NumberCellV"
  "alueArchive\0222\n\014string_value\030\005 \001(\0132\034.TSCE"
  ".StringCellValueArchive\"`\n\rCellValueType"
  "\022\014\n\010NIL_TYPE\020\001\022\020\n\014BOOLEAN_TYPE\020\002\022\r\n\tDATE"
  "_TYPE\020\003\022\017\n\013NUMBER_TYPE\020\004\022\017\n\013STRING_TYPE\020"
  "\005\"\262\013\n\027ImportWarningSetArchive\022Q\n\026formula"
  "_import_warning\030\001 \001(\01321.TST.ImportWarnin"
  "gSetArchive.FormulaImportWarning\022.\n\037cond"
  "_format_above_avg_equal_avg\030\002 \001(\010:\005false"
  "\022,\n\035cond_format_above_avg_std_dev\030\003 \001(\010:"
  "\005false\022*\n\033cond_format_complex_formula\030\004 "
  "\001(\010:\005false\022*\n\033cond_format_contains_error"
  "s\030\005 \001(\010:\005false\022\037\n\020cond_format_expr\030\006 \001(\010"
  ":\005false\022.\n\037cond_format_not_contains_erro"
  "rs\030\007 \001(\010:\005false\0227\n(cond_format_parameter"
  "s_not_all_same_type\030\010 \001(\010:\005false\022\'\n\030cond"
  "_format_stop_if_true\030\t \001(\010:\005false\022/\n con"
  "d_format_unsupported_operator\030\n \001(\010:\005fal"
  "se\022.\n\037cond_format_unsupported_styling\030\013 "
  "\001(\010:\005false\0222\n#cond_format_unsupported_ti"
  "me_period\030\014 \001(\010:\005false\022)\n\032error_cell_wit"
  "h_no_formula\030\r \001(\010:\005false\022&\n\027unsupported"
  "_cond_format\030\016 \001(\010:\005false\022\034\n\024original_da"
  "ta_format\030\017 \001(\t\022A\n2formula_warning_filte"
  "red_column_formula_not_copied\030\020 \001(\010:\005fal"
  "se\022,\n\035duration_format_range_changed\030\021 \001("
  "\010:\005false\032\275\001\n\024FormulaImportWarning\022M\n\024for"
  "mula_warning_type\030\001 \002(\0162/.TST.ImportWarn"
  "ingSetArchive.FormulaWarningType\022\030\n\020orig"
  "inal_formula\030\002 \001(\t\022\032\n\022supplementary_text"
  "\030\003 \001(\t\022 \n\030formula_warning_type_int\030\004 \001(\005"
  "\"\243\003\n\022FormulaWarningType\022\025\n\021THREE_D_REFER"
  "ENCE\020\001\022\023\n\017ARRAYED_FORMULA\020\002\022#\n\037DIFFERENT"
  "_BEHAVIOR_FOR_FUNCTION\020\003\022\017\n\013ERROR_TOKEN\020"
  "\004\022\026\n\022EXTERNAL_REFERENCE\020\005\022\034\n\030NATURAL_LAN"
  "GUAGE_FORMULA\020\006\022\033\n\027REFERENCE_OUT_OF_BOUN"
  "DS\020\007\022!\n\035SHARED_FORMULA_BASE_NOT_FOUND\020\010\022"
  "\020\n\014UNKNOWN_NAME\020\t\022\027\n\023UNSUPPORTED_FORMULA"
  "\020\n\022\030\n\024UNSUPPORTED_FUNCTION\020\013\022\024\n\020UNSUPPOR"
  "TED_NAME\020\014\022\030\n\024TRANSPOSED_NO_ISSUES\020\r\022\032\n\026"
  "TRANSPOSED_WITH_ISSUES\020\016\022$\n TRANSPOSED_W"
  "ITH_ISSUES_UNCHANGED\020\017\"\205\001\n\"CellRefImport"
  "WarningSetPairArchive\022,\n\010cell_ref\030\001 \002(\0132"
  "\032.TSCE.CellReferenceArchive\0221\n\013warning_s"
  "et\030\003 \001(\0132\034.TST.ImportWarningSetArchive\"m"
  "\n ImportWarningSetByCellRefArchive\022I\n\030ce"
  "llref_warning_set_pair\030\001 \003(\0132\'.TST.CellR"
  "efImportWarningSetPairArchive\"\256\006\n\rTableD"
  "ataList\022-\n\010listType\030\001 \002(\0162\033.TST.TableDat"
  "aList.ListType\022\022\n\nnextListID\030\002 \002(\r\022-\n\007en"
  "tries\030\003 \003(\0132\034.TST.TableDataList.ListEntr"
  "y\022 \n\010segments\030\004 \003(\0132\016.TSP.Reference\032\226\003\n\t"
  "ListEntry\022\013\n\003key\030\001 \002(\r\022\020\n\010refcount\030\002 \002(\r"
  "\022\016\n\006string\030\003 \001(\t\022!\n\treference\030\004 \001(\0132\016.TS"
  "P.Reference\022%\n\007formula\030\005 \001(\0132\024.TSCE.Form"
  "ulaArchive\022(\n\006format\030\006 \001(\0132\030.TSK.FormatS"
  "tructArchive\022/\n\rcustom_format\030\010 \001(\0132\030.TS"
  "K.CustomFormatArchive\022)\n\021rich_text_paylo"
  "ad\030\t \001(\0132\016.TSP.Reference\022\'\n\017comment_stor"
  "age\030\n \001(\0132\016.TSP.Reference\0228\n\022import_warn"
  "ing_set\030\013 \001(\0132\034.TST.ImportWarningSetArch"
  "ive\022\'\n\tcell_spec\030\014 \001(\0132\024.TST.CellSpecArc"
  "hive\"\357\001\n\010ListType\022\n\n\006STRING\020\001\022\n\n\006FORMAT\020"
  "\002\022\013\n\007FORMULA\020\003\022\t\n\005STYLE\020\004\022\021\n\rFORMULA_ERR"
  "OR\020\005\022\021\n\rCUSTOM_FORMAT\020\006\022\037\n\033MULTIPLE_CHOI"
  "CE_LIST_FORMAT\020\007\022\025\n\021RICH_TEXT_PAYLOAD\020\010\022"
  "\025\n\021CONDITIONAL_STYLE\020\t\022\023\n\017COMMENT_STORAG"
  "E\020\n\022\022\n\016IMPORT_WARNING\020\013\022\025\n\021CONTROL_CELL_"
  "SPEC\020\014\"\224\001\n\024TableDataListSegment\022.\n\tlist_"
  "type\030\001 \002(\0162\033.TST.TableDataList.ListType\022"
  "\035\n\tkey_range\030\002 \002(\0132\n.TSP.Range\022-\n\007entrie"
  "s\030\003 \003(\0132\034.TST.TableDataList.ListEntry\"W\n"
  "\013TableRBTree\022$\n\005nodes\030\001 \003(\0132\025.TST.TableR"
  "BTree.Node\032\"\n\004Node\022\013\n\003key\030\001 \002(\r\022\r\n\005value"
  "\030\002 \002(\r\"\377\001\n\023HeaderStorageBucket\022\032\n\022bucket"
  "HashFunction\030\001 \002(\r\0220\n\007headers\030\002 \003(\0132\037.TS"
  "T.HeaderStorageBucket.Header\032\231\001\n\006Header\022"
  "\r\n\005index\030\001 \002(\r\022\014\n\004size\030\002 \002(\002\022\023\n\013hidingSt"
  "ate\030\003 \002(\r\022\025\n\rnumberOfCells\030\004 \002(\r\022\"\n\ncell"
  "_style\030\005 \001(\0132\016.TSP.Reference\022\"\n\ntext_sty"
  "le\030\006 \001(\0132\016.TSP.Reference\"L\n\rHeaderStorag"
  "e\022\032\n\022bucketHashFunction\030\001 \002(\r\022\037\n\007buckets"
  "\030\002 \003(\0132\016.TSP.Reference\"\200\007\n\tDataStore\022&\n\n"
  "rowHeaders\030\001 \002(\0132\022.TST.HeaderStorage\022%\n\r"
  "columnHeaders\030\002 \002(\0132\016.TSP.Reference\022\037\n\005t"
  "iles\030\003 \002(\0132\020.TST.TileStorage\022#\n\013stringTa"
  "ble\030\004 \002(\0132\016.TSP.Reference\022\"\n\nstyleTable\030"
  "\005 \002(\0132\016.TSP.Reference\022%\n\rformula_table\030\006"
  " \002(\0132\016.TSP.Reference\022)\n\021formulaErrorTabl"
  "e\030\014 \001(\0132\016.TSP.Reference\022,\n\024format_table_"
  "pre_bnc\030\013 \002(\0132\016.TSP.Reference\0225\n\035multipl"
  "eChoiceListFormatTable\030\020 \001(\0132\016.TSP.Refer"
  "ence\022(\n\020merge_region_map\030\r \001(\0132\016.TSP.Ref"
  "erence\022)\n\021customFormatTable\030\017 \001(\0132\016.TSP."
  "Reference\022\026\n\016nextRowStripID\030\007 \002(\r\022\031\n\021nex"
  "tColumnStripID\030\010 \002(\r\022%\n\013rowTileTree\030\t \002("
  "\0132\020.TST.TableRBTree\022(\n\016columnTileTree\030\n "
  "\002(\0132\020.TST.TableRBTree\022\037\n\027storage_version"
  "_pre_bnc\030\016 \001(\r\022\'\n\017rich_text_table\030\021 \001(\0132"
  "\016.TSP.Reference\022-\n\025conditionalstyletable"
  "\030\022 \001(\0132\016.TSP.Reference\022+\n\023commentStorage"
  "Table\030\023 \001(\0132\016.TSP.Reference\022-\n\025importWar"
  "ningSetTable\030\024 \001(\0132\016.TSP.Reference\022/\n\027co"
  "ntrol_cell_spec_table\030\025 \001(\0132\016.TSP.Refere"
  "nce\022$\n\014format_table\030\026 \001(\0132\016.TSP.Referenc"
  "e\"\377\003\n\020TableInfoArchive\022#\n\005super\030\001 \002(\0132\024."
  "TSD.DrawableArchive\022\"\n\ntableModel\030\002 \002(\0132"
  "\016.TSP.Reference\022)\n\rediting_state\030\003 \001(\0132\016"
  ".TSP.ReferenceB\002\030\001\022%\n\rsummary_model\030\004 \001("
  "\0132\016.TSP.Reference\022&\n\016category_order\030\005 \001("
  "\0132\016.TSP.Reference\022,\n\024view_column_row_uid"
  "s\030\006 \001(\0132\016.TSP.Reference\022 \n\rgroup_by_uuid"
  "\030\007 \001(\0132\t.TSP.UUID\022%\n\022hidden_states_uuid\030"
  "\010 \001(\0132\t.TSP.UUID\022(\n\034formula_coord_space_"
  "in_pre40\030\t \001(\rB\002\030\001\022\033\n\023formula_coord_spac"
  "e\030\n \001(\r\0229\n\027pasteboard_coord_mapper\030\r \001(\013"
  "2\030.TSCE.CoordMapperArchive\022/\n\rlayout_eng"
  "ine\030\016 \001(\0132\030.TST.LayoutEngineArchive\"^\n\023C"
  "ategoryInfoArchive\022#\n\005super\030\001 \002(\0132\024.TSD."
  "DrawableArchive\022\"\n\ntableModel\030\002 \002(\0132\016.TS"
  "P.Reference\"[\n\022WPTableInfoArchive\022$\n\005sup"
  "er\030\001 \002(\0132\025.TST.TableInfoArchive\022\037\n\007stora"
  "ge\030\002 \001(\0132\016.TSP.Reference\"\343\013\n\030TableStyleN"
  "etworkArchive\022#\n\013table_style\030\t \002(\0132\016.TSP"
  ".Reference\022\'\n\017body_text_style\030\001 \002(\0132\016.TS"
  "P.Reference\022-\n\025header_row_text_style\030\002 \002"
  "(\0132\016.TSP.Reference\0220\n\030header_column_text"
  "_style\030\003 \002(\0132\016.TSP.Reference\022-\n\025footer_r"
  "ow_text_style\030\004 \002(\0132\016.TSP.Reference\0223\n\033c"
  "ategory_level_1_text_style\030\r \001(\0132\016.TSP.R"
  "eference\0223\n\033category_level_2_text_style\030"
  "\016 \001(\0132\016.TSP.Reference\0223\n\033category_level_"
  "3_text_style\030\017 \001(\0132\016.TSP.Reference\0223\n\033ca"
  "tegory_level_4_text_style\030\020 \001(\0132\016.TSP.Re"
  "ference\0223\n\033category_level_5_text_style\030\021"
  " \001(\0132\016.TSP.Reference\0220\n\030label_level_1_te"
  "xt_style\030\027 \001(\0132\016.TSP.Reference\0220\n\030label_"
  "level_2_text_style\030\030 \001(\0132\016.TSP.Reference"
  "\0220\n\030label_level_3_text_style\030\031 \001(\0132\016.TSP"
  ".Reference\0220\n\030label_level_4_text_style\030\032"
  " \001(\0132\016.TSP.Reference\0220\n\030label_level_5_te"
  "xt_style\030\033 \001(\0132\016.TSP.Reference\022\'\n\017body_c"
  "ell_style\030\005 \002(\0132\016.TSP.Reference\022(\n\020heade"
  "r_row_style\030\006 \002(\0132\016.TSP.Reference\022+\n\023hea"
  "der_column_style\030\007 \002(\0132\016.TSP.Reference\022("
  "\n\020footer_row_style\030\010 \002(\0132\016.TSP.Reference"
  "\022.\n\026category_level_1_style\030\022 \001(\0132\016.TSP.R"
  "eference\022.\n\026category_level_2_style\030\023 \001(\013"
  "2\016.TSP.Reference\022.\n\026category_level_3_sty"
  "le\030\024 \001(\0132\016.TSP.Reference\022.\n\026category_lev"
  "el_4_style\030\025 \001(\0132\016.TSP.Reference\022.\n\026cate"
  "gory_level_5_style\030\026 \001(\0132\016.TSP.Reference"
  "\022+\n\023label_level_1_style\030\034 \001(\0132\016.TSP.Refe"
  "rence\022+\n\023label_level_2_style\030\035 \001(\0132\016.TSP"
  ".Reference\022+\n\023label_level_3_style\030\036 \001(\0132"
  "\016.TSP.Reference\022+\n\023label_level_4_style\030\037"
  " \001(\0132\016.TSP.Reference\022+\n\023label_level_5_st"
  "yle\030  \001(\0132\016.TSP.Reference\022(\n\020table_name_"
  "style\030\n \001(\0132\016.TSP.Reference\022.\n\026table_nam"
  "e_shape_style\030\013 \001(\0132\016.TSP.Reference\022\021\n\tp"
  "reset_id\030\014 \001(\r\"\313\002\n\025TableSortOrderArchive"
  "\0221\n\004type\030\001 \002(\0162#.TST.TableSortOrderArchi"
  "ve.SortType\0229\n\005rules\030\002 \003(\0132*.TST.TableSo"
  "rtOrderArchive.SortRuleArchive\032\226\001\n\017SortR"
  "uleArchive\022\016\n\006column\030\001 \002(\r\022G\n\tdirection\030"
  "\002 \002(\01624.TST.TableSortOrderArchive.SortRu"
  "leArchive.Direction\"*\n\tDirection\022\r\n\tasce"
  "nding\020\000\022\016\n\ndescending\020\001\"+\n\010SortType\022\020\n\014e"
  "ntire_table\020\000\022\r\n\trow_range\020\001\"\346\002\n\030TableSo"
  "rtOrderUIDArchive\0224\n\004type\030\001 \002(\0162&.TST.Ta"
  "bleSortOrderUIDArchive.SortType\022<\n\005rules"
  "\030\002 \003(\0132-.TST.TableSortOrderUIDArchive.So"
  "rtRuleArchive\032\250\001\n\017SortRuleArchive\022\035\n\ncol"
  "umn_uid\030\001 \002(\0132\t.TSP.UUID\022J\n\tdirection\030\002 "
  "\002(\01627.TST.TableSortOrderUIDArchive.SortR"
  "uleArchive.Direction\"*\n\tDirection\022\r\n\tasc"
  "ending\020\000\022\016\n\ndescending\020\001\"+\n\010SortType\022\020\n\014"
  "entire_table\020\000\022\r\n\trow_range\020\001\"L\n\037SortRul"
  "eReferenceTrackerArchive\022)\n\021reference_tr"
  "acker\030\001 \002(\0132\016.TSP.Reference\"1\n\nCellRegio"
  "n\022#\n\013cell_ranges\030\001 \003(\0132\016.TST.CellRange\"E"
  "\n\024CellUIDRegionArchive\022-\n\017cell_uid_range"
  "s\030\001 \003(\0132\024.TSP.UUIDRectArchive\"\247\002\n\032Struct"
  "uredTextImportRecord\022:\n\017import_settings\030"
  "\001 \002(\0132!.TSK.StructuredTextImportSettings"
  "\022\025\n\rimport_source\030\002 \001(\t\022\023\n\013import_date\030\003"
  " \001(\001\022\023\n\013source_data\030\004 \001(\014\022\027\n\017source_enco"
  "ding\030\005 \001(\004\022\022\n\nconfidence\030\006 \001(\002\022(\n\017import"
  "ed_region\030\007 \001(\0132\017.TST.CellRegion\022\030\n\020sour"
  "ce_row_count\030\010 \001(\004\022\033\n\023source_column_coun"
  "t\030\t \001(\004\"\217\031\n\021TableModelArchive\022\020\n\010table_i"
  "d\030\001 \002(\t\022\025\n\rfrom_table_id\030+ \001(\t\022\017\n\007was_cu"
  "t\0302 \001(\010\022#\n\013table_style\030\003 \002(\0132\016.TSP.Refer"
  "ence\022\'\n\017body_text_style\030\030 \002(\0132\016.TSP.Refe"
  "rence\022-\n\025header_row_text_style\030\031 \002(\0132\016.T"
  "SP.Reference\0220\n\030header_column_text_style"
  "\030\032 \002(\0132\016.TSP.Reference\022-\n\025footer_row_tex"
  "t_style\030\033 \002(\0132\016.TSP.Reference\022\'\n\017body_ce"
  "ll_style\030\022 \002(\0132\016.TSP.Reference\022(\n\020header"
  "_row_style\030\023 \002(\0132\016.TSP.Reference\022+\n\023head"
  "er_column_style\030\024 \002(\0132\016.TSP.Reference\022(\n"
  "\020footer_row_style\030\025 \002(\0132\016.TSP.Reference\022"
  "(\n\020table_name_style\030\036 \001(\0132\016.TSP.Referenc"
  "e\022.\n\026table_name_shape_style\030$ \001(\0132\016.TSP."
  "Reference\022*\n\022table_style_preset\0300 \001(\0132\016."
  "TSP.Reference\022\024\n\014preset_index\030\034 \001(\r\022\'\n\017b"
  "ase_data_store\030\004 \002(\0132\016.TST.DataStore\022 \n\010"
  "provider\030\005 \001(\0132\016.TSP.Reference\022\026\n\016number"
  "_of_rows\030\006 \002(\r\022\031\n\021number_of_columns\030\007 \002("
  "\r\022\022\n\ntable_name\030\010 \002(\t\022\032\n\022table_name_enab"
  "led\030\026 \001(\010\022\031\n\021table_name_height\030! \001(\001\022!\n\031"
  "table_name_border_enabled\030% \001(\010\022\035\n\025numbe"
  "r_of_header_rows\030\t \001(\r\022 \n\030number_of_head"
  "er_columns\030\n \001(\r\022\035\n\025number_of_footer_row"
  "s\030\013 \001(\r\022\032\n\022header_rows_frozen\030\014 \001(\010\022\035\n\025h"
  "eader_columns_frozen\030\r \001(\010\022\035\n\025number_of_"
  "hidden_rows\030\016 \001(\r\022 \n\030number_of_hidden_co"
  "lumns\030\017 \001(\r\022\"\n\032number_of_user_hidden_row"
  "s\030) \001(\r\022%\n\035number_of_user_hidden_columns"
  "\030* \001(\r\022\037\n\027number_of_filtered_rows\030( \001(\r\022"
  "\032\n\022default_row_height\030\020 \002(\001\022\034\n\024default_c"
  "olumn_width\030\021 \002(\001\022&\n\rorigin_offset\030\027 \001(\013"
  "2\013.TST.CellIDB\002\030\001\022%\n\035repeating_header_ro"
  "ws_enabled\030\035 \001(\010\022(\n repeating_header_col"
  "umns_enabled\030  \001(\010\022\036\n\026style_apply_clears"
  "_all\030\037 \001(\010\022>\n&hidden_state_formula_owner"
  "_for_columns\030\" \001(\0132\016.TSP.Reference\022;\n#hi"
  "dden_state_formula_owner_for_rows\030# \001(\0132"
  "\016.TSP.Reference\022\"\n\nfilter_set\030& \001(\0132\016.TS"
  "P.Reference\022>\n\"conditional_style_formula"
  "_owner_id\030\' \001(\0132\022.TSP.CFUUIDArchive\022.\n\ns"
  "ort_order\030, \001(\0132\032.TST.TableSortOrderArch"
  "ive\022I\n\033sort_rule_reference_tracker\030- \001(\013"
  "2$.TST.SortRuleReferenceTrackerArchive\022,"
  "\n\024base_column_row_uids\030. \001(\0132\016.TSP.Refer"
  "ence\022+\n\013merge_owner\030/ \001(\0132\026.TST.MergeOwn"
  "erArchive\022&\n\016stroke_sidecar\0301 \001(\0132\016.TSP."
  "Reference\022%\n\035preset_needs_strong_ownersh"
  "ip\0303 \001(\010\022;\n\022text_import_record\0304 \001(\0132\037.T"
  "ST.StructuredTextImportRecord\022.\n\026categor"
  "y_level_1_style\030< \001(\0132\016.TSP.Reference\022.\n"
  "\026category_level_2_style\030= \001(\0132\016.TSP.Refe"
  "rence\022.\n\026category_level_3_style\030> \001(\0132\016."
  "TSP.Reference\022.\n\026category_level_4_style\030"
  "\? \001(\0132\016.TSP.Reference\022.\n\026category_level_"
  "5_style\030@ \001(\0132\016.TSP.Reference\022+\n\023label_l"
  "evel_1_style\030G \001(\0132\016.TSP.Reference\022+\n\023la"
  "bel_level_2_style\030H \001(\0132\016.TSP.Reference\022"
  "+\n\023label_level_3_style\030I \001(\0132\016.TSP.Refer"
  "ence\022+\n\023label_level_4_style\030J \001(\0132\016.TSP."
  "Reference\022+\n\023label_level_5_style\030K \001(\0132\016"
  ".TSP.Reference\0223\n\033category_level_1_text_"
  "style\030A \001(\0132\016.TSP.Reference\0223\n\033category_"
  "level_2_text_style\030B \001(\0132\016.TSP.Reference"
  "\0223\n\033category_level_3_text_style\030C \001(\0132\016."
  "TSP.Reference\0223\n\033category_level_4_text_s"
  "tyle\030D \001(\0132\016.TSP.Reference\0223\n\033category_l"
  "evel_5_text_style\030E \001(\0132\016.TSP.Reference\022"
  "0\n\030label_level_1_text_style\030L \001(\0132\016.TSP."
  "Reference\0220\n\030label_level_2_text_style\030M "
  "\001(\0132\016.TSP.Reference\0220\n\030label_level_3_tex"
  "t_style\030N \001(\0132\016.TSP.Reference\0220\n\030label_l"
  "evel_4_text_style\030O \001(\0132\016.TSP.Reference\022"
  "0\n\030label_level_5_text_style\030P \001(\0132\016.TSP."
  "Reference\022:\n\023hidden_states_owner\030F \001(\0132\035"
  ".TST.HiddenStatesOwnerArchive\0221\n\016categor"
  "y_owner\030Q \001(\0132\031.TST.CategoryOwnerArchive"
  "\022B\n\027pencil_annotation_owner\030R \001(\0132!.TST."
  "PencilAnnotationOwnerArchive\022\031\n\021from_gro"
  "up_by_uid\030S \001(\t\0220\n\rhaunted_owner\030T \001(\0132\031"
  ".TSCE.HauntedOwnerArchive\"\310\007\n\023SummaryMod"
  "elArchive\022\"\n\ntable_info\030\001 \002(\0132\016.TSP.Refe"
  "rence\022\"\n\ndata_store\030\002 \001(\0132\016.TST.DataStor"
  "e\022\'\n\017column_row_uids\030\003 \001(\0132\016.TSP.Referen"
  "ce\022/\n\034aggregate_formula_owner_uuid\030\004 \001(\013"
  "2\t.TSP.UUID\022+\n\023summary_cell_vendor\030\005 \001(\013"
  "2\016.TSP.Reference\022\035\n\025category_column_widt"
  "h\030\n \001(\001\022&\n\032summary_row_level_1_height\030\013 "
  "\001(\001B\002\030\001\022&\n\032summary_row_level_2_height\030\014 "
  "\001(\001B\002\030\001\022&\n\032summary_row_level_3_height\030\r "
  "\001(\001B\002\030\001\022&\n\032summary_row_level_4_height\030\016 "
  "\001(\001B\002\030\001\022&\n\032summary_row_level_5_height\030\017 "
  "\001(\001B\002\030\001\022,\n summary_label_row_level_1_hei"
  "ght\030\020 \001(\001B\002\030\001\022,\n summary_label_row_level"
  "_2_height\030\021 \001(\001B\002\030\001\022,\n summary_label_row"
  "_level_3_height\030\022 \001(\001B\002\030\001\022,\n summary_lab"
  "el_row_level_4_height\030\023 \001(\001B\002\030\001\022,\n summa"
  "ry_label_row_level_5_height\030\024 \001(\001B\002\030\001\022\"\n"
  "\026label_row_visibility_1\030\025 \001(\rB\002\030\001\022\"\n\026lab"
  "el_row_visibility_2\030\026 \001(\rB\002\030\001\022\"\n\026label_r"
  "ow_visibility_3\030\027 \001(\rB\002\030\001\022\"\n\026label_row_v"
  "isibility_4\030\030 \001(\rB\002\030\001\022\"\n\026label_row_visib"
  "ility_5\030\031 \001(\rB\002\030\001\022\037\n\027summary_row_height_"
  "list\030\032 \003(\001\022\035\n\025label_row_height_list\030\033 \003("
  "\001\022!\n\031label_row_visibility_list\030\034 \003(\r\"\254\001\n"
  "%SummaryModelGroupByChangeStateArchive\022 "
  "\n\010cell_map\030\001 \001(\0132\016.TSP.Reference\022\037\n\027summ"
  "ary_row_height_list\030\002 \003(\001\022\035\n\025label_row_h"
  "eight_list\030\003 \003(\001\022!\n\031label_row_visibility"
  "_list\030\004 \003(\r\"\325\001\n\026ColumnRowUIDMapArchive\022%"
  "\n\022sorted_column_uids\030\001 \003(\0132\t.TSP.UUID\022\034\n"
  "\024column_index_for_uid\030\002 \003(\r\022\034\n\024column_ui"
  "d_for_index\030\003 \003(\r\022\"\n\017sorted_row_uids\030\004 \003"
  "(\0132\t.TSP.UUID\022\031\n\021row_index_for_uid\030\005 \003(\r"
  "\022\031\n\021row_uid_for_index\030\006 \003(\r\"\324\001\n\022StrokeLa"
  "yerArchive\022\030\n\020row_column_index\030\001 \001(\r\022=\n\013"
  "stroke_runs\030\002 \003(\0132(.TST.StrokeLayerArchi"
  "ve.StrokeRunArchive\032e\n\020StrokeRunArchive\022"
  "\016\n\006origin\030\001 \001(\005\022\016\n\006length\030\002 \001(\r\022\"\n\006strok"
  "e\030\003 \001(\0132\022.TSD.StrokeArchive\022\r\n\005order\030\004 \001"
  "(\r\"\232\002\n\024StrokeSidecarArchive\022\021\n\tmax_order"
  "\030\001 \001(\r\022\024\n\014column_count\030\002 \001(\r\022\021\n\trow_coun"
  "t\030\003 \001(\r\0221\n\031left_column_stroke_layers\030\004 \003"
  "(\0132\016.TSP.Reference\0222\n\032right_column_strok"
  "e_layers\030\005 \003(\0132\016.TSP.Reference\022-\n\025top_ro"
  "w_stroke_layers\030\006 \003(\0132\016.TSP.Reference\0220\n"
  "\030bottom_row_stroke_layers\030\007 \003(\0132\016.TSP.Re"
  "ference\"\030\n\026DurationWrapperArchive\"\347\010\n\004Ce"
  "ll\022%\n\tvalueType\030\002 \002(\0162\022.TST.CellValueTyp"
  "e\022\"\n\ncell_style\030\003 \001(\0132\016.TSP.Reference\022\"\n"
  "\ntext_style\030\004 \001(\0132\016.TSP.Reference\022\023\n\013num"
  "berValue\030\005 \001(\001\022\023\n\013stringValue\030\006 \001(\t\022\021\n\tb"
  "oolValue\030\007 \001(\010\0220\n\016current_format\030\t \001(\0132\030"
  ".TSK.FormatStructArchive\022$\n\014formulaError"
  "\030\n \001(\0132\016.TSP.Reference\022/\n\rnumber_format\030"
  "\013 \001(\0132\030.TSK.FormatStructArchive\0221\n\017curre"
  "ncy_format\030\014 \001(\0132\030.TSK.FormatStructArchi"
  "ve\0221\n\017duration_format\030\r \001(\0132\030.TSK.Format"
  "StructArchive\022-\n\013date_format\030\016 \001(\0132\030.TSK"
  ".FormatStructArchive\022/\n\rcustom_format\030\020 "
  "\001(\0132\030.TSK.FormatStructArchive\022-\n\013base_fo"
  "rmat\030\021 \001(\0132\030.TSK.FormatStructArchive\022\035\n\025"
  "explicit_format_flags\030\023 \001(\r\022 \n\010richText\030"
  "\024 \001(\0132\016.TSP.Reference\022)\n\021conditional_sty"
  "le\030\025 \001(\0132\016.TSP.Reference\022\'\n\017comment_stor"
  "age\030\027 \001(\0132\016.TSP.Reference\022&\n\036conditional"
  "_style_applied_rule\030\030 \001(\r\0228\n\022import_warn"
  "ing_set\030\031 \001(\0132\034.TST.ImportWarningSetArch"
  "ive\0226\n\024custom_format_object\030\032 \001(\0132\030.TSK."
  "CustomFormatArchive\022+\n\013cell_border\030\033 \001(\013"
  "2\026.TST.CellBorderArchive\022\'\n\tcell_spec\030\034 "
  "\001(\0132\024.TST.CellSpecArchive\022\030\n\020cell_format"
  "_kind\030\035 \001(\r\022-\n\013text_format\030\036 \001(\0132\030.TSK.F"
  "ormatStructArchive\0220\n\016boolean_format\030\037 \001"
  "(\0132\030.TSK.FormatStructArchive\022\031\n\021decimal_"
  "value_low\030  \001(\004\022\032\n\022decimal_value_high\030! "
  "\001(\004\";\n\025MergeRegionMapArchive\022\"\n\ncell_ran"
  "ge\030\001 \003(\0132\016.TST.CellRange\"\250\003\n\016CellMapArch"
  "ive\022\"\n\ncell_tiles\030\002 \003(\0132\016.TSP.Reference\022"
  "\021\n\tuid_based\030\003 \002(\010\0226\n\021expanded_cell_ids\030"
  "\016 \003(\0132\033.TSCE.CellCoordinateArchive\022.\n\rce"
  "ll_uid_list\030\005 \001(\0132\027.TST.CellUIDListArchi"
  "ve\022.\n\020merge_uid_ranges\030\007 \003(\0132\024.TSP.UUIDR"
  "ectArchive\0220\n\022unmerge_uid_ranges\030\t \003(\0132\024"
  ".TSP.UUIDRectArchive\0221\n\rmerge_actions\030\r "
  "\003(\0132\032.TST.MergeOperationArchive\022*\n\034may_m"
  "odify_formulas_in_cells\030\n \001(\010:\004true\0226\n(m"
  "ay_modify_values_referenced_by_formulas\030"
  "\013 \001(\010:\004true\"\217\001\n\017CellListArchive\0220\n\005cells"
  "\030\001 \003(\0132!.TST.CellListArchive.OptionalCel"
  "l\022!\n\031trailing_empty_cell_count\030\002 \001(\r\032\'\n\014"
  "OptionalCell\022\027\n\004cell\030\001 \001(\0132\t.TST.Cell\"\350\001"
  "\n\030ConcurrentCellMapArchive\022\"\n\ncell_lists"
  "\030\001 \003(\0132\016.TSP.Reference\022\021\n\tuid_based\030\002 \002("
  "\010\0221\n\rmerge_actions\030\003 \003(\0132\032.TST.MergeOper"
  "ationArchive\022*\n\034may_modify_formulas_in_c"
  "ells\030\004 \001(\010:\004true\0226\n(may_modify_values_re"
  "ferenced_by_formulas\030\005 \001(\010:\004true\"\322\001\n\031Con"
  "currentCellListArchive\022:\n\005cells\030\001 \003(\0132+."
  "TST.ConcurrentCellListArchive.OptionalCe"
  "ll\022,\n\016cell_uid_range\030\002 \001(\0132\024.TSP.UUIDRec"
  "tArchive\022\"\n\ncell_range\030\003 \001(\0132\016.TST.CellR"
  "ange\032\'\n\014OptionalCell\022\027\n\004cell\030\001 \001(\0132\t.TST"
  ".Cell\"\323\005\n\031CellFormatAndValueArchive\022%\n\tv"
  "alueType\030\001 \002(\0162\022.TST.CellValueType\022\023\n\013nu"
  "mberValue\030\002 \001(\001\022\023\n\013stringValue\030\003 \001(\t\022\021\n\t"
  "boolValue\030\004 \001(\010\022\'\n\017richTextStorage\030\005 \001(\013"
  "2\016.TSP.Reference\022\035\n\025use_all_spare_format"
  "s\030\006 \002(\010\022\026\n\016explicit_flags\030\007 \002(\r\022\030\n\020cell_"
  "format_kind\030\010 \002(\r\022/\n\rnumber_format\030\n \001(\013"
  "2\030.TSK.FormatStructArchive\0221\n\017currency_f"
  "ormat\030\013 \001(\0132\030.TSK.FormatStructArchive\022-\n"
  "\013date_format\030\014 \001(\0132\030.TSK.FormatStructArc"
  "hive\0221\n\017duration_format\030\r \001(\0132\030.TSK.Form"
  "atStructArchive\022-\n\013text_format\030\016 \001(\0132\030.T"
  "SK.FormatStructArchive\0220\n\016boolean_format"
  "\030\017 \001(\0132\030.TSK.FormatStructArchive\022\027\n\017form"
  "atted_value\030\020 \001(\t\0221\n\031formatted_rich_text"
  "_value\030\021 \001(\0132\016.TSP.Reference\022\037\n\027apply_sp"
  "are_format_only\030\022 \002(\010\022\031\n\021spare_format_ty"
  "pe\030\023 \002(\010\022\023\n\013decimal_low\030\024 \001(\004\022\024\n\014decimal"
  "_high\030\025 \001(\004\"\262\002\n\017CellSpecArchive\022\030\n\020inter"
  "action_type\030\001 \002(\r\022%\n\007formula\030\002 \001(\0132\024.TSC"
  "E.FormulaArchive\022\031\n\021range_control_min\030\003 "
  "\001(\001\022\031\n\021range_control_max\030\004 \001(\001\022\031\n\021range_"
  "control_inc\030\005 \001(\001\0223\n\033chooser_control_pop"
  "up_model\030\006 \001(\0132\016.TSP.Reference\022%\n\035choose"
  "r_control_start_w_first\030\007 \001(\010\0221\n%categor"
  "y_summary_should_display_label\030\010 \001(\010B\002\030\001"
  "\"G\n\034CommentStorageWrapperArchive\022\'\n\017comm"
  "ent_storage\030\001 \001(\0132\016.TSP.Reference\"\215\001\n\017Ce"
  "llDiffArchive\022;\n\023property_map_to_set\030\001 \002"
  "(\0132\036.TSS.CommandPropertyMapArchive\022=\n\025pr"
  "operty_map_to_reset\030\002 \002(\0132\036.TSS.CommandP"
  "ropertyMapArchive\"5\n\rCellDiffArray\022$\n\013la"
  "rge_array\030\001 \001(\0132\017.TSP.LargeArray\"s\n\024Cell"
  "DiffArraySegment\0223\n\023large_array_segment\030"
  "\001 \001(\0132\026.TSP.LargeArraySegment\022&\n\010element"
  "s\030\002 \003(\0132\024.TST.CellDiffArchive\"\264\001\n\022CellDi"
  "ffMapArchive\022\021\n\tuid_based\030\001 \002(\010\0226\n\021expan"
  "ded_cell_ids\030\002 \003(\0132\033.TSCE.CellCoordinate"
  "Archive\022*\n\tcell_uids\030\003 \002(\0132\027.TST.CellUID"
  "ListArchive\022\'\n\017cell_diff_array\030\004 \001(\0132\016.T"
  "SP.Reference\"\212\002\n\025DoubleStyleMapArchive\022\020"
  "\n\010capacity\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\022M\n\016cell_"
  "map_entry\030\003 \003(\01325.TST.DoubleStyleMapArch"
  "ive.DoubleStyleMapEntryArchive\032\200\001\n\032Doubl"
  "eStyleMapEntryArchive\022\034\n\007cell_id\030\001 \002(\0132\013"
  ".TST.CellID\022!\n\told_style\030\002 \002(\0132\016.TSP.Ref"
  "erence\022!\n\tnew_style\030\003 \002(\0132\016.TSP.Referenc"
  "e\"\357\001\n\024StyleTableMapArchive\022\020\n\010capacity\030\001"
  " \002(\r\022\r\n\005count\030\002 \002(\r\022F\n\tmap_entry\030\003 \003(\01323"
  ".TST.StyleTableMapArchive.StyleTableMapE"
  "ntryArchive\032n\n\031StyleTableMapEntryArchive"
  "\022\013\n\003key\030\001 \002(\r\022!\n\told_style\030\002 \002(\0132\016.TSP.R"
  "eference\022!\n\tnew_style\030\003 \002(\0132\016.TSP.Refere"
  "nce\"\347\003\n\020SelectionArchive\022&\n\ntableModel\030\001"
  " \001(\0132\016.TSP.ReferenceB\002\030\001\0221\n\016selection_ty"
  "pe\030\004 \002(\0162\031.TST.SelectionTypeArchive\022 \n\013a"
  "nchor_cell\030\005 \001(\0132\013.TST.CellID\022#\n\013cell_ra"
  "nges\030\006 \003(\0132\016.TST.CellRange\022#\n\013base_range"
  "s\030\007 \003(\0132\016.TST.CellRange\022 \n\013cursor_cell\030\010"
  " \001(\0132\013.TST.CellID\022\"\n\ntable_info\030\t \001(\0132\016."
  "TSP.Reference\0222\n\017cell_uid_region\030\n \001(\0132\031"
  ".TST.CellUIDRegionArchive\0222\n\017base_uid_re"
  "gion\030\013 \001(\0132\031.TST.CellUIDRegionArchive\022.\n"
  "\017anchor_cell_uid\030\014 \001(\0132\025.TSP.UUIDCoordAr"
  "chive\022.\n\017cursor_cell_uid\030\r \001(\0132\025.TSP.UUI"
  "DCoordArchive\"\312\002\n)DeathhawkRdar39989167C"
  "ellSelectionArchive\022\"\n\ntable_info\030\001 \001(\0132"
  "\016.TSP.Reference\0221\n\016selection_type\030\002 \001(\0162"
  "\031.TST.SelectionTypeArchive\0222\n\017cell_uid_r"
  "egion\030\003 \001(\0132\031.TST.CellUIDRegionArchive\0222"
  "\n\017base_uid_region\030\004 \001(\0132\031.TST.CellUIDReg"
  "ionArchive\022.\n\017anchor_cell_uid\030\005 \001(\0132\025.TS"
  "P.UUIDCoordArchive\022.\n\017cursor_cell_uid\030\006 "
  "\001(\0132\025.TSP.UUIDCoordArchive\"&\n\026StrokeSele"
  "ctionArchive\022\014\n\004mask\030\001 \001(\005\"\035\n\033ControlCel"
  "lSelectionArchive\"\033\n\031StockCellSelectionA"
  "rchive\"\033\n\031TableNameSelectionArchive\"p\n\030A"
  "utofillSelectionArchive\022)\n\021source_cell_r"
  "ange\030\001 \001(\0132\016.TST.CellRange\022)\n\021target_cel"
  "l_range\030\002 \001(\0132\016.TST.CellRange\"V\n\021FilterR"
  "uleArchive\022/\n\tpredicate\030\001 \002(\0132\034.TST.Form"
  "ulaPredicateArchive\022\020\n\010disabled\030\002 \001(\010\"\214\001"
  "\n\021TableStyleArchive\022 \n\005super\030\001 \002(\0132\021.TSS"
  ".StyleArchive\022\031\n\016override_count\030\n \001(\r:\0010"
  "\022:\n\020table_properties\030\013 \001(\0132 .TST.TableSt"
  "ylePropertiesArchive\"\211\001\n\020CellStyleArchiv"
  "e\022 \n\005super\030\001 \002(\0132\021.TSS.StyleArchive\022\031\n\016o"
  "verride_count\030\n \001(\r:\0010\0228\n\017cell_propertie"
  "s\030\013 \001(\0132\037.TST.CellStylePropertiesArchive"
  "\"\342\013\n\027FormulaPredicateArchive\022%\n\007formula\030"
  "\001 \002(\0132\024.TSCE.FormulaArchive\022I\n\016predicate"
  "_type\030\002 \002(\01621.TST.FormulaPredicateArchiv"
  "e.FormulaPredicateType\022>\n\nqualifier1\030\003 \002"
  "(\0162*.TST.FormulaPredicateArchive.Qualifi"
  "erType\022>\n\nqualifier2\030\004 \002(\0162*.TST.Formula"
  "PredicateArchive.QualifierType\022\024\n\014param_"
  "index1\030\005 \002(\005\022\024\n\014param_index2\030\006 \002(\005\022\024\n\014pa"
  "ram_index0\030\007 \002(\005\"\211\010\n\024FormulaPredicateTyp"
  "e\022\014\n\010PredNone\020\000\022\022\n\016TextStartsWith\020\001\022\020\n\014T"
  "extEndsWith\020\002\022\020\n\014TextContains\020\003\022\026\n\022TextD"
  "oesNotContain\020\004\022\016\n\nValueEqual\020\005\022\021\n\rValue"
  "NotEqual\020\006\022\024\n\020ValueGreaterThan\020\007\022\033\n\027Valu"
  "eGreaterThanOrEqual\020\010\022\021\n\rValueLessThan\020\t"
  "\022\030\n\024ValueLessThanOrEqual\020\n\022\025\n\021ValueAbove"
  "Average\020\013\022\025\n\021ValueBelowAverage\020\014\022\020\n\014Valu"
  "eBetween\020\r\022\013\n\007Formula\020\016\022\016\n\nDuplicates\020\017\022"
  "\013\n\007Uniques\020\020\022\017\n\013DateIsToday\020\021\022\023\n\017DateIsY"
  "esterday\020\022\022\022\n\016DateIsTomorrow\020\023\022\021\n\rDateIs"
  "TheDate\020\024\022\025\n\021DateBeforeTheDate\020\025\022\024\n\020Date"
  "AfterTheDate\020\026\022\024\n\020DateIsInTheRange\020\027\022\021\n\r"
  "DateInTheNext\020\030\022\021\n\rDateInTheLast\020\031\022\021\n\rDa"
  "teIsExactly\020\032\022\026\n\022DateBeforeRelative\020\033\022\025\n"
  "\021DateAfterRelative\020\034\022\027\n\023DateBetweenRelat"
  "ive\020\035\022\014\n\010ValueTop\020\036\022\017\n\013ValueBottom\020\037\022\023\n\017"
  "ValueNotBetween\020 \022\016\n\nDateInThis\020!\022\013\n\007IsB"
  "lank\020\"\022\016\n\nIsNotBlank\020#\022\n\n\006TextIs\020$\022\r\n\tTe"
  "xtIsNot\020%\022\021\n\rDurationEqual\020&\022\024\n\020Duration"
  "NotEqual\020\'\022\027\n\023DurationGreaterThan\020(\022\036\n\032D"
  "urationGreaterThanOrEqual\020)\022\024\n\020DurationL"
  "essThan\020*\022\033\n\027DurationLessThanOrEqual\020+\022\023"
  "\n\017DurationBetween\020,\022\026\n\022DurationNotBetwee"
  "n\020-\022\030\n\024DurationAboveAverage\020.\022\030\n\024Duratio"
  "nBelowAverage\020/\022\017\n\013DurationTop\0200\022\022\n\016Dura"
  "tionBottom\0201\"\206\001\n\rQualifierType\022\014\n\010QualNo"
  "ne\020\000\022\010\n\004Days\020\002\022\t\n\005Weeks\020\003\022\n\n\006Months\020\004\022\t\n"
  "\005Years\020\005\022\007\n\003Ago\020\006\022\013\n\007FromNow\020\007\022\014\n\010Quarte"
  "rs\020\010\022\013\n\007Percent\020\t\022\n\n\006Values\020\n\"\206\002\n\032Condit"
  "ionalStyleSetArchive\022\021\n\truleCount\030\001 \002(\r\022"
  "C\n\005rules\030\002 \003(\01324.TST.ConditionalStyleSet"
  "Archive.ConditionalStyleRule\032\217\001\n\024Conditi"
  "onalStyleRule\022/\n\tpredicate\030\001 \002(\0132\034.TST.F"
  "ormulaPredicateArchive\022\"\n\ncell_style\030\002 \002"
  "(\0132\016.TSP.Reference\022\"\n\ntext_style\030\003 \002(\0132\016"
  ".TSP.Reference\"\322\002\n\020FilterSetArchive\022J\n\004t"
  "ype\030\001 \001(\0162#.TST.FilterSetArchive.FilterS"
  "etType:\027FilterSetArchiveTypeAll\022\030\n\nis_en"
  "abled\030\002 \001(\010:\004true\022,\n\014filter_rules\030\003 \003(\0132"
  "\026.TST.FilterRuleArchive\022/\n needs_formula"
  "_rewrite_for_import\030\004 \001(\010:\005false\022\026\n\016filt"
  "er_offsets\030\005 \003(\r\022\026\n\016filter_enabled\030\006 \003(\010"
  "\"I\n\rFilterSetType\022\033\n\027FilterSetArchiveTyp"
  "eAll\020\000\022\033\n\027FilterSetArchiveTypeAny\020\001\"\222\004\n\030"
  "HiddenStateExtentArchive\022*\n\027hidden_state"
  "_extent_uid\030\001 \002(\0132\t.TSP.UUID\022E\n\rhidden_s"
  "tates\030\002 \003(\0132..TST.HiddenStateExtentArchi"
  "ve.RowOrColumnState\022S\n\027row_or_column_dir"
  "ection\030\003 \002(\01622.TST.HiddenStateExtentArch"
  "ive.RowOrColumnDirection\022/\n\017threshold_va"
  "lue\030\005 \003(\0132\026.TSCE.CellValueArchive\0224\n%nee"
  "ds_to_update_filter_set_for_import\030\006 \001(\010"
  ":\005false\022\'\n\024collapsed_group_uids\030\007 \003(\0132\t."
  "TSP.UUID\032_\n\020RowOrColumnState\022$\n\021row_or_c"
  "olumn_uid\030\001 \002(\0132\t.TSP.UUID\022\023\n\013user_hidde"
  "n\030\002 \001(\010\022\020\n\010filtered\030\003 \001(\010\"=\n\024RowOrColumn"
  "Direction\022\023\n\017ColumnDirection\020\000\022\020\n\014RowDir"
  "ection\020\001\"\276\001\n\023HiddenStatesArchive\022$\n\021hidd"
  "en_states_uid\030\001 \002(\0132\t.TSP.UUID\022A\n\032column"
  "_hidden_state_extent\030\002 \002(\0132\035.TST.HiddenS"
  "tateExtentArchive\022>\n\027row_hidden_state_ex"
  "tent\030\003 \002(\0132\035.TST.HiddenStateExtentArchiv"
  "e\"i\n\030HiddenStatesOwnerArchive\022\034\n\towner_u"
  "id\030\001 \002(\0132\t.TSP.UUID\022/\n\rhidden_states\030\002 \003"
  "(\0132\030.TST.HiddenStatesArchive\"a\n\032ExpandCo"
  "llapseStateArchive\022!\n\016uids_collapsed\030\001 \003"
  "(\0132\t.TSP.UUID\022 \n\ruids_expanded\030\002 \003(\0132\t.T"
  "SP.UUID\"l\n\026TokenAttachmentArchive\022*\n\005sup"
  "er\030\001 \002(\0132\033.TSWP.UIGraphicalAttachment\022&\n"
  "\016expressionNode\030\002 \001(\0132\016.TSP.Reference\"8\n"
  "\016FormulaArchive\022&\n\016expressionTree\030\001 \001(\0132"
  "\016.TSP.Reference\"h\n\025ExpressionNodeArchive"
  "\022 \n\010children\030\001 \003(\0132\016.TSP.Reference\022\026\n\013fi"
  "rst_index\030\002 \001(\004:\0010\022\025\n\nlast_index\030\003 \001(\004:\001"
  "0\"N\n\022BooleanNodeArchive\022)\n\005super\030\001 \002(\0132\032"
  ".TST.ExpressionNodeArchive\022\r\n\005value\030\002 \002("
  "\010\"y\n\021NumberNodeArchive\022)\n\005super\030\001 \002(\0132\032."
  "TST.ExpressionNodeArchive\022\016\n\006number\030\002 \001("
  "\001\022\023\n\013decimal_low\030\003 \001(\004\022\024\n\014decimal_high\030\004"
  " \001(\004\"M\n\021StringNodeArchive\022)\n\005super\030\001 \002(\013"
  "2\032.TST.ExpressionNodeArchive\022\r\n\005value\030\002 "
  "\002(\t\"f\n\025IdentifierNodeArchive\022)\n\005super\030\001 "
  "\002(\0132\032.TST.ExpressionNodeArchive\022\022\n\nident"
  "ifier\030\002 \001(\t\022\016\n\006symbol\030\003 \001(\r\"\\\n\020ArrayNode"
  "Archive\022)\n\005super\030\001 \002(\0132\032.TST.ExpressionN"
  "odeArchive\022\017\n\007columns\030\002 \001(\r\022\014\n\004rows\030\003 \001("
  "\r\"<\n\017ListNodeArchive\022)\n\005super\030\001 \002(\0132\032.TS"
  "T.ExpressionNodeArchive\"V\n\023OperatorNodeA"
  "rchive\022)\n\005super\030\001 \002(\0132\032.TST.ExpressionNo"
  "deArchive\022\024\n\014operatorChar\030\002 \002(\r\"E\n\032Postf"
  "ixOperatorNodeArchive\022\'\n\005super\030\001 \002(\0132\030.T"
  "ST.OperatorNodeArchive\"D\n\031PrefixOperator"
  "NodeArchive\022\'\n\005super\030\001 \002(\0132\030.TST.Operato"
  "rNodeArchive\"t\n\023FunctionNodeArchive\022)\n\005s"
  "uper\030\001 \002(\0132\032.TST.ExpressionNodeArchive\022\025"
  "\n\rfunctionIndex\030\002 \002(\r\022\033\n\023invalidFunction"
  "Name\030\003 \001(\t\"C\n\026FunctionEndNodeArchive\022)\n\005"
  "super\030\001 \002(\0132\032.TST.ExpressionNodeArchive\""
  "[\n\017DateNodeArchive\022)\n\005super\030\001 \002(\0132\032.TST."
  "ExpressionNodeArchive\022\r\n\005value\030\002 \002(\t\022\016\n\006"
  "format\030\003 \001(\t\"\272\003\n\024ReferenceNodeArchive\022)\n"
  "\005super\030\001 \002(\0132\032.TST.ExpressionNodeArchive"
  "\0223\n\016rangeReference\030\002 \001(\0132\033.TSCE.RangeRef"
  "erenceArchive\022\026\n\016preserve_flags\030\003 \002(\r\022\023\n"
  "\013hostTableID\030\004 \001(\t\0221\n\rhost_cell_ref\030\n \001("
  "\0132\032.TSCE.CellReferenceArchive\022\034\n\ttable_u"
  "id\030\005 \001(\0132\t.TSP.UUID\022-\n\016range_top_left\030\006 "
  "\001(\0132\025.TSP.UUIDCoordArchive\0221\n\022range_bott"
  "om_right\030\007 \001(\0132\025.TSP.UUIDCoordArchive\0224\n"
  "\014category_ref\030\010 \001(\0132\036.TSCE.CategoryRefer"
  "enceArchive\022,\n\016uid_range_rect\030\t \001(\0132\024.TS"
  "P.UUIDRectArchive\"\210\001\n\023DurationNodeArchiv"
  "e\022)\n\005super\030\001 \002(\0132\032.TST.ExpressionNodeArc"
  "hive\022\024\n\014timeinterval\030\002 \002(\001\022\020\n\010smallest\030\003"
  " \002(\r\022\017\n\007largest\030\004 \002(\r\022\r\n\005style\030\005 \002(\r\"\207\001\n"
  "\036ArgumentPlaceholderNodeArchive\022)\n\005super"
  "\030\001 \002(\0132\032.TST.ExpressionNodeArchive\022\025\n\rfu"
  "nctionIndex\030\002 \001(\r\022\025\n\rargumentIndex\030\003 \001(\r"
  "\022\014\n\004mode\030\004 \001(\r\"G\n\032EmptyExpressionNodeArc"
  "hive\022)\n\005super\030\001 \002(\0132\032.TST.ExpressionNode"
  "Archive\"\303\001\n\016LetNodeArchive\022)\n\005super\030\001 \002("
  "\0132\032.TST.ExpressionNodeArchive\022\034\n\024whitesp"
  "ace_after_let\030\002 \001(\t\022#\n\033whitespace_after_"
  "identifier\030\003 \001(\t\022\037\n\027whitespace_after_equ"
  "als\030\004 \001(\t\022\"\n\032whitespace_after_delimiter\030"
  "\005 \001(\t\":\n\rInNodeArchive\022)\n\005super\030\001 \002(\0132\032."
  "TST.ExpressionNodeArchive\"d\n\023VariableNod"
  "eArchive\022)\n\005super\030\001 \002(\0132\032.TST.Expression"
  "NodeArchive\022\022\n\nidentifier\030\002 \002(\t\022\016\n\006symbo"
  "l\030\003 \002(\r\"\357\001\n\021LayoutHintArchive\022\017\n\007isValid"
  "\030\001 \002(\010\022!\n\tcellRange\030\002 \001(\0132\016.TST.CellRang"
  "e\022\033\n\006hintID\030\003 \001(\0132\013.TST.CellID\022\036\n\013maximu"
  "mSize\030\004 \002(\0132\t.TSP.Size\022\031\n\021partitionPosit"
  "ion\030\005 \002(\r\022\022\n\nhorizontal\030\006 \002(\010\022 \n\reffecti"
  "veSize\030\007 \001(\0132\t.TSP.Size\022\030\n\020partitioningP"
  "ass\030\010 \001(\r\"\222\001\n CompletionTokenAttachmentA"
  "rchive\022*\n\005super\030\001 \002(\0132\033.TST.TokenAttachm"
  "entArchive\022\026\n\016completionText\030\002 \001(\t\022\025\n\rca"
  "retPosition\030\003 \001(\r\022\023\n\013prefixStart\030\004 \001(\r\"\255"
  "\001\n\036HiddenStateFormulaOwnerArchive\022$\n\010own"
  "er_id\030\001 \001(\0132\022.TSP.CFUUIDArchive\022/\n\017thres"
  "hold_value\030\002 \003(\0132\026.TSCE.CellValueArchive"
  "\0224\n%needs_to_update_filter_set_for_impor"
  "t\030\003 \001(\010:\005false\"\300\001\n\023FormulaStoreArchive\022\032"
  "\n\022next_formula_index\030\002 \002(\r\022;\n\010formulas\030\003"
  " \003(\0132).TST.FormulaStoreArchive.FormulaSt"
  "orePair\032P\n\020FormulaStorePair\022\025\n\rformula_i"
  "ndex\030\001 \002(\r\022%\n\007formula\030\002 \002(\0132\024.TSCE.Formu"
  "laArchive\"\275\001\n\025MergeOperationArchive\022+\n\nm"
  "erge_type\030\001 \002(\0162\027.TST.MergeActionArchive"
  "\022*\n\014merge_ranges\030\002 \003(\0132\024.TSP.UUIDRectArc"
  "hive\022,\n\016merge_formulas\030\003 \003(\0132\024.TSCE.Form"
  "ulaArchive\022\035\n\025merge_formula_indexes\030\004 \003("
  "\r\"j\n\021MergeOwnerArchive\022$\n\010owner_id\030\001 \002(\013"
  "2\022.TSP.CFUUIDArchive\022/\n\rformula_store\030\002 "
  "\001(\0132\030.TST.FormulaStoreArchive\"p\n\027PencilA"
  "nnotationArchive\022\"\n\ntable_info\030\001 \001(\0132\016.T"
  "SP.Reference\0221\n\031pencil_annotation_storag"
  "e\030\002 \001(\0132\016.TSP.Reference\"\232\001\n\034PencilAnnota"
  "tionOwnerArchive\022$\n\010owner_id\030\001 \002(\0132\022.TSP"
  ".CFUUIDArchive\022/\n\rformula_store\030\002 \001(\0132\030."
  "TST.FormulaStoreArchive\022#\n\013annotations\030\003"
  " \003(\0132\016.TSP.Reference\"\272\003\n\022AccumulatorArch"
  "ive\022\022\n\nbool_count\030\001 \001(\r\022\027\n\017bool_true_cou"
  "nt\030\014 \001(\r\022\024\n\014number_count\030\002 \001(\r\022\022\n\ndate_c"
  "ount\030\003 \001(\r\022\026\n\016duration_count\030\004 \001(\r\022\024\n\014st"
  "ring_count\030\005 \001(\r\022\023\n\013error_count\030\r \001(\r\022\027\n"
  "\017is_circular_ref\030\016 \001(\010\022)\n\tmin_value\030\006 \002("
  "\0132\026.TSCE.CellValueArchive\022)\n\tmax_value\030\007"
  " \002(\0132\026.TSCE.CellValueArchive\0222\n\022number_t"
  "otal_value\030\010 \002(\0132\026.TSCE.CellValueArchive"
  "\022/\n\017first_date_seen\030\t \001(\0132\026.TSCE.CellVal"
  "ueArchive\022!\n\031total_secs_since_ref_date\030\n"
  " \001(\001\022\023\n\013secs_to_add\030\013 \001(\001\"\265\001\n\022GroupColum"
  "nArchive\022\035\n\ncolumn_uid\030\001 \002(\0132\t.TSP.UUID\022"
  "(\n\rgrouping_type\030\002 \002(\0162\021.TST.GroupingTyp"
  "e\022.\n\020grouping_functor\030\003 \001(\0132\024.TSCE.Funct"
  "orArchive\022&\n\023grouping_column_uid\030\004 \001(\0132\t"
  ".TSP.UUID\"G\n\026GroupColumnListArchive\022-\n\014g"
  "roup_column\030\001 \003(\0132\027.TST.GroupColumnArchi"
  "ve\"l\n\026ColumnAggregateArchive\022\035\n\ncolumn_u"
  "id\030\001 \002(\0132\t.TSP.UUID\022\r\n\005level\030\002 \002(\r\022$\n\010ag"
  "g_type\030\003 \002(\0162\022.TST.AggregateType\"M\n\032Colu"
  "mnAggregateListArchive\022/\n\naggregates\030\001 \003"
  "(\0132\033.TST.ColumnAggregateArchive\"\377\017\n\024Cate"
  "goryOwnerArchive\022\034\n\towner_uid\030\001 \002(\0132\t.TS"
  "P.UUID\022:\n\010group_by\030\002 \003(\0132(.TST.CategoryO"
  "wnerArchive.GroupByArchive\032\214\017\n\016GroupByAr"
  "chive\022\037\n\014group_by_uid\030\001 \002(\0132\t.TSP.UUID\022-"
  "\n\014group_column\030\002 \003(\0132\027.TST.GroupColumnAr"
  "chive\022R\n\017group_node_root\030\003 \002(\01329.TST.Cat"
  "egoryOwnerArchive.GroupByArchive.GroupNo"
  "deArchive\022N\n\naggregator\030\004 \003(\0132:.TST.Cate"
  "goryOwnerArchive.GroupByArchive.Aggregat"
  "orArchive\0224\n\017column_agg_type\030\005 \003(\0132\033.TST"
  ".ColumnAggregateArchive\022\022\n\nis_enabled\030\006 "
  "\002(\010\022E\n indirect_agg_type_change_formula\030"
  "\007 \001(\0132\033.TSCE.CellCoordinateArchive\022=\n\030gr"
  "ouping_columns_formula\030\010 \001(\0132\033.TSCE.Cell"
  "CoordinateArchive\022D\n\037grouping_column_hea"
  "ders_formula\030\n \001(\0132\033.TSCE.CellCoordinate"
  "Archive\022\?\n\032aggs_in_group_root_formula\030\t "
  "\001(\0132\033.TSCE.CellCoordinateArchive\022A\n\034colu"
  "mn_order_changed_formula\030\013 \001(\0132\033.TSCE.Ce"
  "llCoordinateArchive\022>\n\031row_order_changed"
  "_formula\030\014 \001(\0132\033.TSCE.CellCoordinateArch"
  "ive\022N\n)row_order_changed_ignoring_recalc"
  "_formula\030\r \001(\0132\033.TSCE.CellCoordinateArch"
  "ive\032\264\001\n\016AggNodeArchive\0222\n\rformula_coord\030"
  "\001 \002(\0132\033.TSCE.CellCoordinateArchive\022&\n\005ac"
  "cum\030\002 \001(\0132\027.TST.AccumulatorArchive\022F\n\005ch"
  "ild\030\003 \003(\01327.TST.CategoryOwnerArchive.Gro"
  "upByArchive.AggNodeArchive\032\245\006\n\020GroupNode"
  "Archive\022\034\n\tgroup_uid\030\001 \002(\0132\t.TSP.UUID\022k\n"
  "\021group_value_tuple\030\002 \001(\0132P.TST.CategoryO"
  "wnerArchive.GroupByArchive.GroupNodeArch"
  "ive.GroupValueTupleArchive\0220\n\020group_cell"
  "_value\030\007 \001(\0132\026.TSCE.CellValueArchive\022H\n\005"
  "child\030\003 \003(\01329.TST.CategoryOwnerArchive.G"
  "roupByArchive.GroupNodeArchive\022\032\n\007row_ui"
  "d\030\004 \003(\0132\t.TSP.UUID\0227\n\022agg_formula_coords"
  "\030\005 \003(\0132\033.TSCE.CellCoordinateArchive\022f\n\016f"
  "ormat_manager\030\006 \001(\0132N.TST.CategoryOwnerA"
  "rchive.GroupByArchive.GroupNodeArchive.F"
  "ormatManagerArchive\032\?\n\026GroupValueTupleAr"
  "chive\022%\n\005value\030\001 \003(\0132\026.TSCE.CellValueArc"
  "hive\032\213\002\n\024FormatManagerArchive\022*\n\ncell_va"
  "lue\030\001 \001(\0132\026.TSCE.CellValueArchive\022)\n\007for"
  "mats\030\002 \003(\0132\030.TSK.FormatStructArchive\022n\n\010"
  "row_sets\030\003 \003(\0132\\.TST.CategoryOwnerArchiv"
  "e.GroupByArchive.GroupNodeArchive.Format"
  "ManagerArchive.RowSetArchive\032,\n\rRowSetAr"
  "chive\022\033\n\010row_uids\030\001 \003(\0132\t.TSP.UUID\032}\n\021Ag"
  "gregatorArchive\022\035\n\ncolumn_uid\030\001 \002(\0132\t.TS"
  "P.UUID\022I\n\010agg_node\030\002 \001(\01327.TST.CategoryO"
  "wnerArchive.GroupByArchive.AggNodeArchiv"
  "e\"q\n\026RichTextPayloadArchive\022\037\n\007storage\030\001"
  " \002(\0132\016.TSP.Reference\022\031\n\005range\030\002 \001(\0132\n.TS"
  "P.Range\022\033\n\006cellid\030\003 \002(\0132\013.TST.CellID\"Q\n#"
  "FormulaEqualsTokenAttachmentArchive\022*\n\005s"
  "uper\030\001 \002(\0132\033.TSWP.UIGraphicalAttachment\""
  "\235\005\n\017CellFillStandIn\022\036\n\004fill\030\001 \002(\0132\020.TSD."
  "FillArchive\022\025\n\rtype_is_mixed\030\002 \001(\010\022\037\n\027co"
  "lor_has_been_modified\030\003 \001(\010\022\026\n\016color_is_"
  "mixed\030\004 \001(\010\022%\n\035first_color_has_been_modi"
  "fied\030\005 \001(\010\022\034\n\024first_color_is_mixed\030\006 \001(\010"
  "\022$\n\034last_color_has_been_modified\030\007 \001(\010\022\033"
  "\n\023last_color_is_mixed\030\010 \001(\010\022\'\n\037gradient_"
  "type_has_been_modified\030\t \001(\010\022\036\n\026gradient"
  "_type_is_mixed\030\n \001(\010\022(\n gradient_angle_h"
  "as_been_modified\030\013 \001(\010\022\037\n\027gradient_angle"
  "_is_mixed\030\014 \001(\010\022$\n\034image_data_has_been_m"
  "odified\030\r \001(\010\022\033\n\023image_data_is_mixed\030\016 \001"
  "(\010\022$\n\034tint_color_has_been_modified\030\017 \001(\010"
  "\022\033\n\023tint_color_is_mixed\030\020 \001(\010\022\037\n\027scale_h"
  "as_been_modified\030\021 \001(\010\022\026\n\016scale_is_mixed"
  "\030\022 \001(\010\022#\n\033technique_has_been_modified\030\023 "
  "\001(\010\022\032\n\022technique_is_mixed\030\024 \001(\010\"^\n\027Formu"
  "laSelectionArchive\022%\n\005super\030\001 \002(\0132\026.TSWP"
  ".SelectionArchive\022\034\n\024activeTokenCharInde"
  "x\030\002 \001(\r\"\247\002\n\021CellBorderArchive\022&\n\ntop_str"
  "oke\030\001 \001(\0132\022.TSD.StrokeArchive\022\030\n\020top_str"
  "oke_order\030\002 \001(\005\022(\n\014right_stroke\030\003 \001(\0132\022."
  "TSD.StrokeArchive\022\032\n\022right_stroke_order\030"
  "\004 \001(\005\022)\n\rbottom_stroke\030\005 \001(\0132\022.TSD.Strok"
  "eArchive\022\033\n\023bottom_stroke_order\030\006 \001(\005\022\'\n"
  "\013left_stroke\030\007 \001(\0132\022.TSD.StrokeArchive\022\031"
  "\n\021left_stroke_order\030\010 \001(\005\"\277\001\n!DefaultCel"
  "lStylesContainerArchive\022+\n\023table_style_n"
  "etwork\030\001 \002(\0132\016.TSP.Reference\022\"\n\017header_r"
  "ow_uids\030\002 \003(\0132\t.TSP.UUID\022\"\n\017footer_row_u"
  "ids\030\003 \003(\0132\t.TSP.UUID\022%\n\022header_column_ui"
  "ds\030\004 \003(\0132\t.TSP.UUID\"\225\003\n\031MultiTableRemapp"
  "erArchive\022\?\n\017mapping_purpose\030\001 \002(\0162&.TST"
  ".MultiTableRemapperArchive.Purpose\022\037\n\027sh"
  "ould_steal_references\030\002 \002(\010\022\035\n\025can_reuse"
  "_table_names\030\003 \002(\010\0225\n\020owner_uid_mapper\030\004"
  " \003(\0132\033.TSCE.OwnerUIDMapperArchive\0226\n\031bac"
  "king_tables_for_charts\030\005 \002(\0132\023.TSP.UUIDM"
  "apArchive\022\034\n\024cross_document_paste\030\006 \002(\010\022"
  "\033\n\023nested_inner_mapper\030\007 \002(\010\"M\n\007Purpose\022"
  "\013\n\007DEFAULT\020\000\022\014\n\010GROUPING\020\001\022\'\n#PAGES_SECT"
  "ION_DUPLICATION_NONCOLLAB\020\002\"\374\004\n\033ChangePr"
  "opagationMapWrapper\022\034\n\024replacement_behav"
  "ior\030\001 \002(\005\0220\n\030style_replace_prototypes\030\002 "
  "\003(\0132\016.TSP.Reference\0222\n\032style_replace_rep"
  "lacements\030\003 \003(\0132\016.TSP.Reference\022+\n\023style"
  "_modify_styles\030\004 \003(\0132\016.TSP.Reference\0222\n\032"
  "style_modify_old_prop_maps\030\005 \003(\0132\016.TSP.R"
  "eference\0222\n\032style_modify_new_prop_maps\030\006"
  " \003(\0132\016.TSP.Reference\022/\n\027style_delete_pro"
  "totypes\030\007 \003(\0132\016.TSP.Reference\0221\n\031style_d"
  "elete_replacements\030\010 \003(\0132\016.TSP.Reference"
  "\0226\n\036table_preset_replace_prototype\030\t \001(\013"
  "2\016.TSP.Reference\0228\n table_preset_replace"
  "_replacement\030\n \001(\0132\016.TSP.Reference\0225\n\035ta"
  "ble_preset_delete_prototype\030\013 \001(\0132\016.TSP."
  "Reference\0227\n\037table_preset_delete_replace"
  "ment\030\014 \001(\0132\016.TSP.Reference\"\352\001\n\030SummaryCe"
  "llVendorArchive\022\"\n\ntable_info\030\001 \002(\0132\016.TS"
  "P.Reference\022\?\n\007entries\030\002 \003(\0132..TST.Summa"
  "ryCellVendorArchive.SummaryCellEntry\032i\n\020"
  "SummaryCellEntry\022\036\n\013wildcardUID\030\001 \002(\0132\t."
  "TSP.UUID\022\034\n\tcolumnUID\030\002 \002(\0132\t.TSP.UUID\022\027"
  "\n\004cell\030\003 \002(\0132\t.TST.Cell\"[\n\024CategoryOrder"
  "Archive\022\"\n\ntable_info\030\001 \002(\0132\016.TSP.Refere"
  "nce\022\037\n\007uid_map\030\002 \002(\0132\016.TSP.Reference\"\266\002\n"
  "\030HeaderNameMgrTileArchive\022\026\n\016first_fragm"
  "ent\030\001 \002(\t\022\025\n\rlast_fragment\030\002 \002(\t\022L\n\021name"
  "_frag_entries\030\003 \003(\01321.TST.HeaderNameMgrT"
  "ileArchive.NameFragmentArchive\032\234\001\n\023NameF"
  "ragmentArchive\022\025\n\rname_fragment\030\001 \002(\t\0223\n"
  "\016name_precedent\030\002 \002(\0132\033.TSCE.CellCoordin"
  "ateArchive\0229\n\025uses_of_name_fragment\030\003 \001("
  "\0132\032.TSCE.UidCellRefSetArchive\"\342\003\n\024Header"
  "NameMgrArchive\022\034\n\towner_uid\030\001 \002(\0132\t.TSP."
  "UUID\022 \n\rnrm_owner_uid\030\002 \001(\0132\t.TSP.UUID\022="
  "\n\nper_tables\030\003 \003(\0132).TST.HeaderNameMgrAr"
  "chive.PerTableArchive\022\'\n\017name_frag_tiles"
  "\030\004 \003(\0132\016.TSP.Reference\032\241\002\n\017PerTableArchi"
  "ve\022\034\n\ttable_uid\030\001 \002(\0132\t.TSP.UUID\0228\n\023per_"
  "table_precedent\030\002 \002(\0132\033.TSCE.CellCoordin"
  "ateArchive\022\022\n\nis_deleted\030\003 \001(\010\022\"\n\017header"
  "_row_uids\030\005 \003(\0132\t.TSP.UUID\022%\n\022header_col"
  "umn_uids\030\006 \003(\0132\t.TSP.UUID\022)\n\026update_head"
  "er_row_uids\030\007 \003(\0132\t.TSP.UUID\022,\n\031update_h"
  "eader_column_uids\030\010 \003(\0132\t.TSP.UUID\"K\n\034Wi"
  "dthHeightCacheFittingEntry\022\025\n\rfitting_in"
  "dex\030\001 \001(\r\022\024\n\014fitting_size\030\002 \001(\002\"j\n\020Width"
  "HeightCache\022\?\n\024rows_fitting_entries\030\001 \003("
  "\0132!.TST.WidthHeightCacheFittingEntry\022\025\n\r"
  "columns_count\030\003 \001(\r\"H\n\023LayoutEngineArchi"
  "ve\0221\n\022width_height_cache\030\001 \001(\0132\025.TST.Wid"
  "thHeightCache*\327\001\n\010CellType\022\023\n\017genericCel"
  "lType\020\000\022\020\n\014spanCellType\020\001\022\022\n\016numberCellT"
  "ype\020\002\022\020\n\014textCellType\020\003\022\023\n\017formulaCellTy"
  "pe\020\004\022\020\n\014dateCellType\020\005\022\020\n\014boolCellType\020\006"
  "\022\024\n\020durationCellType\020\007\022\030\n\024formulaErrorCe"
  "llType\020\010\022\025\n\021automaticCellType\020\t*\206\002\n\rCell"
  "ValueType\022\026\n\022emptyCellValueType\020\000\022\027\n\023num"
  "berCellValueType\020\001\022\027\n\023stringCellValueTyp"
  "e\020\002\022\031\n\025providedCellValueType\020\003\022\025\n\021dateCe"
  "llValueType\020\004\022\025\n\021boolCellValueType\020\005\022\031\n\025"
  "durationCellValueType\020\006\022\026\n\022errorCellValu"
  "eType\020\007\022\024\n\020richTextCellType\020\010\022\031\n\025currenc"
  "yCellValueType\020\t*>\n\025TableDimensionArchiv"
  "e\022\020\n\014dimensionRow\020\000\022\023\n\017dimensionColumn\020\001"
  "*\204\002\n\024SelectionTypeArchive\022\037\n\033deprecatedC"
  "ellSelectionType\020\000\022\024\n\020rowSelectionType\020\001"
  "\022\027\n\023columnSelectionType\020\002\022&\n\"deprecatedC"
  "ellEditingSelectionType\020\003\022$\n deprecatedT"
  "ableNameSelectionType\020\004\022 \n\034deprecatedTab"
  "leSelectionType\020\005\022\027\n\023regionSelectionType"
  "\020\006\022\023\n\017noSelectionType\020\007*y\n\024FillDirection"
  "Archive\022\027\n\023kTSTFillDownArchive\020\001\022\025\n\021kTST"
  "FillUpArchive\020\002\022\030\n\024kTSTFillRightArchive\020"
  "\003\022\027\n\023kTSTFillLeftArchive\020\004*n\n\022MergeActio"
  "nArchive\022\025\n\021mergeActionInsert\020\001\022\025\n\021merge"
  "ActionRemove\020\002\022\025\n\021mergeActionShrink\020\003\022\023\n"
  "\017mergeActionGrow\020\004*G\n\025HideShowActionArch"
  "ive\022\026\n\022hideShowActionHide\020\000\022\026\n\022hideShowA"
  "ctionShow\020\001*s\n\014GroupingType\022\n\n\006UNIQUE\020\000\022"
  "\010\n\004YEAR\020\001\022\t\n\005MONTH\020\002\022\r\n\tDAYOFWEEK\020\003\022\007\n\003D"
  "AY\020\004\022\014\n\010YEARWEEK\020\005\022\017\n\013YEARQUARTER\020\006\022\013\n\007R"
  "OUND_0\020\n*z\n\rAggregateType\022\010\n\004NONE\020\000\022\t\n\005C"
  "OUNT\020\001\022\t\n\005TOTAL\020\002\022\013\n\007AVERAGE\020\003\022\007\n\003MIN\020\004\022"
  "\007\n\003MAX\020\005\022\016\n\nGROUPVALUE\020\t\022\014\n\010BODYROWS\020\n\022\014"
  "\n\010INDIRECT\020\013:[\n\022import_warning_set\022 .TSS"
  ".CommandPropertyEntryArchive\030\364\003 \001(\0132\034.TS"
  "T.ImportWarningSetArchive:[\n\020format_and_"
  "value\022 .TSS.CommandPropertyEntryArchive\030"
  "\365\003 \001(\0132\036.TST.CellFormatAndValueArchive:N"
  "\n\013cell_border\022 .TSS.CommandPropertyEntry"
  "Archive\030\367\003 \001(\0132\026.TST.CellBorderArchive:]"
  "\n\017comment_storage\022 .TSS.CommandPropertyE"
  "ntryArchive\030\370\003 \001(\0132!.TST.CommentStorageW"
  "rapperArchive:J\n\tcell_spec\022 .TSS.Command"
  "PropertyEntryArchive\030\371\003 \001(\0132\024.TST.CellSp"
  "ecArchive"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TSTArchives_2eproto_deps[7] = {
  &::descriptor_table_TSCEArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSTStylePropertyArchiving_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TSTArchives_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSTArchives_2eproto = {
  false, false, 35969, descriptor_table_protodef_TSTArchives_2eproto, "TSTArchives.proto", 
  &descriptor_table_TSTArchives_2eproto_once, descriptor_table_TSTArchives_2eproto_deps, 7, 147,
  schemas, file_default_instances, TableStruct_TSTArchives_2eproto::offsets,
  file_level_metadata_TSTArchives_2eproto, file_level_enum_descriptors_TSTArchives_2eproto, file_level_service_descriptors_TSTArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TSTArchives_2eproto_getter() {
  return &descriptor_table_TSTArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TSTArchives_2eproto(&descriptor_table_TSTArchives_2eproto);
namespace TST {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PopUpMenuModel_CellValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[0];
}
bool PopUpMenuModel_CellValueType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PopUpMenuModel_CellValueType PopUpMenuModel::NIL_TYPE;
constexpr PopUpMenuModel_CellValueType PopUpMenuModel::BOOLEAN_TYPE;
constexpr PopUpMenuModel_CellValueType PopUpMenuModel::DATE_TYPE;
constexpr PopUpMenuModel_CellValueType PopUpMenuModel::NUMBER_TYPE;
constexpr PopUpMenuModel_CellValueType PopUpMenuModel::STRING_TYPE;
constexpr PopUpMenuModel_CellValueType PopUpMenuModel::CellValueType_MIN;
constexpr PopUpMenuModel_CellValueType PopUpMenuModel::CellValueType_MAX;
constexpr int PopUpMenuModel::CellValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImportWarningSetArchive_FormulaWarningType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[1];
}
bool ImportWarningSetArchive_FormulaWarningType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::THREE_D_REFERENCE;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::ARRAYED_FORMULA;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::DIFFERENT_BEHAVIOR_FOR_FUNCTION;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::ERROR_TOKEN;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::EXTERNAL_REFERENCE;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::NATURAL_LANGUAGE_FORMULA;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::REFERENCE_OUT_OF_BOUNDS;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::SHARED_FORMULA_BASE_NOT_FOUND;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::UNKNOWN_NAME;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::UNSUPPORTED_FORMULA;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::UNSUPPORTED_FUNCTION;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::UNSUPPORTED_NAME;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::TRANSPOSED_NO_ISSUES;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::TRANSPOSED_WITH_ISSUES;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::TRANSPOSED_WITH_ISSUES_UNCHANGED;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::FormulaWarningType_MIN;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::FormulaWarningType_MAX;
constexpr int ImportWarningSetArchive::FormulaWarningType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableDataList_ListType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[2];
}
bool TableDataList_ListType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TableDataList_ListType TableDataList::STRING;
constexpr TableDataList_ListType TableDataList::FORMAT;
constexpr TableDataList_ListType TableDataList::FORMULA;
constexpr TableDataList_ListType TableDataList::STYLE;
constexpr TableDataList_ListType TableDataList::FORMULA_ERROR;
constexpr TableDataList_ListType TableDataList::CUSTOM_FORMAT;
constexpr TableDataList_ListType TableDataList::MULTIPLE_CHOICE_LIST_FORMAT;
constexpr TableDataList_ListType TableDataList::RICH_TEXT_PAYLOAD;
constexpr TableDataList_ListType TableDataList::CONDITIONAL_STYLE;
constexpr TableDataList_ListType TableDataList::COMMENT_STORAGE;
constexpr TableDataList_ListType TableDataList::IMPORT_WARNING;
constexpr TableDataList_ListType TableDataList::CONTROL_CELL_SPEC;
constexpr TableDataList_ListType TableDataList::ListType_MIN;
constexpr TableDataList_ListType TableDataList::ListType_MAX;
constexpr int TableDataList::ListType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableSortOrderArchive_SortRuleArchive_Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[3];
}
bool TableSortOrderArchive_SortRuleArchive_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TableSortOrderArchive_SortRuleArchive_Direction TableSortOrderArchive_SortRuleArchive::ascending;
constexpr TableSortOrderArchive_SortRuleArchive_Direction TableSortOrderArchive_SortRuleArchive::descending;
constexpr TableSortOrderArchive_SortRuleArchive_Direction TableSortOrderArchive_SortRuleArchive::Direction_MIN;
constexpr TableSortOrderArchive_SortRuleArchive_Direction TableSortOrderArchive_SortRuleArchive::Direction_MAX;
constexpr int TableSortOrderArchive_SortRuleArchive::Direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableSortOrderArchive_SortType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[4];
}
bool TableSortOrderArchive_SortType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TableSortOrderArchive_SortType TableSortOrderArchive::entire_table;
constexpr TableSortOrderArchive_SortType TableSortOrderArchive::row_range;
constexpr TableSortOrderArchive_SortType TableSortOrderArchive::SortType_MIN;
constexpr TableSortOrderArchive_SortType TableSortOrderArchive::SortType_MAX;
constexpr int TableSortOrderArchive::SortType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableSortOrderUIDArchive_SortRuleArchive_Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[5];
}
bool TableSortOrderUIDArchive_SortRuleArchive_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TableSortOrderUIDArchive_SortRuleArchive_Direction TableSortOrderUIDArchive_SortRuleArchive::ascending;
constexpr TableSortOrderUIDArchive_SortRuleArchive_Direction TableSortOrderUIDArchive_SortRuleArchive::descending;
constexpr TableSortOrderUIDArchive_SortRuleArchive_Direction TableSortOrderUIDArchive_SortRuleArchive::Direction_MIN;
constexpr TableSortOrderUIDArchive_SortRuleArchive_Direction TableSortOrderUIDArchive_SortRuleArchive::Direction_MAX;
constexpr int TableSortOrderUIDArchive_SortRuleArchive::Direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableSortOrderUIDArchive_SortType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[6];
}
bool TableSortOrderUIDArchive_SortType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TableSortOrderUIDArchive_SortType TableSortOrderUIDArchive::entire_table;
constexpr TableSortOrderUIDArchive_SortType TableSortOrderUIDArchive::row_range;
constexpr TableSortOrderUIDArchive_SortType TableSortOrderUIDArchive::SortType_MIN;
constexpr TableSortOrderUIDArchive_SortType TableSortOrderUIDArchive::SortType_MAX;
constexpr int TableSortOrderUIDArchive::SortType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FormulaPredicateArchive_FormulaPredicateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[7];
}
bool FormulaPredicateArchive_FormulaPredicateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::PredNone;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::TextStartsWith;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::TextEndsWith;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::TextContains;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::TextDoesNotContain;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueEqual;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueNotEqual;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueGreaterThan;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueGreaterThanOrEqual;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueLessThan;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueLessThanOrEqual;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueAboveAverage;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueBelowAverage;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueBetween;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::Formula;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::Duplicates;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::Uniques;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateIsToday;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateIsYesterday;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateIsTomorrow;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateIsTheDate;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateBeforeTheDate;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateAfterTheDate;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateIsInTheRange;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateInTheNext;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateInTheLast;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateIsExactly;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateBeforeRelative;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateAfterRelative;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateBetweenRelative;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueTop;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueBottom;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::ValueNotBetween;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DateInThis;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::IsBlank;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::IsNotBlank;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::TextIs;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::TextIsNot;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationEqual;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationNotEqual;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationGreaterThan;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationGreaterThanOrEqual;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationLessThan;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationLessThanOrEqual;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationBetween;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationNotBetween;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationAboveAverage;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationBelowAverage;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationTop;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::DurationBottom;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::FormulaPredicateType_MIN;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::FormulaPredicateType_MAX;
constexpr int FormulaPredicateArchive::FormulaPredicateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FormulaPredicateArchive_QualifierType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[8];
}
bool FormulaPredicateArchive_QualifierType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FormulaPredicateArchive_QualifierType FormulaPredicateArchive::QualNone;
constexpr FormulaPredicateArchive_QualifierType FormulaPredicateArchive::Days;
constexpr FormulaPredicateArchive_QualifierType FormulaPredicateArchive::Weeks;
constexpr FormulaPredicateArchive_QualifierType FormulaPredicateArchive::Months;
constexpr FormulaPredicateArchive_QualifierType FormulaPredicateArchive::Years;
constexpr FormulaPredicateArchive_QualifierType FormulaPredicateArchive::Ago;
constexpr FormulaPredicateArchive_QualifierType FormulaPredicateArchive::FromNow;
constexpr FormulaPredicateArchive_QualifierType FormulaPredicateArchive::Quarters;
constexpr FormulaPredicateArchive_QualifierType FormulaPredicateArchive::Percent;
constexpr FormulaPredicateArchive_QualifierType FormulaPredicateArchive::Values;
constexpr FormulaPredicateArchive_QualifierType FormulaPredicateArchive::QualifierType_MIN;
constexpr FormulaPredicateArchive_QualifierType FormulaPredicateArchive::QualifierType_MAX;
constexpr int FormulaPredicateArchive::QualifierType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FilterSetArchive_FilterSetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[9];
}
bool FilterSetArchive_FilterSetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FilterSetArchive_FilterSetType FilterSetArchive::FilterSetArchiveTypeAll;
constexpr FilterSetArchive_FilterSetType FilterSetArchive::FilterSetArchiveTypeAny;
constexpr FilterSetArchive_FilterSetType FilterSetArchive::FilterSetType_MIN;
constexpr FilterSetArchive_FilterSetType FilterSetArchive::FilterSetType_MAX;
constexpr int FilterSetArchive::FilterSetType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HiddenStateExtentArchive_RowOrColumnDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[10];
}
bool HiddenStateExtentArchive_RowOrColumnDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HiddenStateExtentArchive_RowOrColumnDirection HiddenStateExtentArchive::ColumnDirection;
constexpr HiddenStateExtentArchive_RowOrColumnDirection HiddenStateExtentArchive::RowDirection;
constexpr HiddenStateExtentArchive_RowOrColumnDirection HiddenStateExtentArchive::RowOrColumnDirection_MIN;
constexpr HiddenStateExtentArchive_RowOrColumnDirection HiddenStateExtentArchive::RowOrColumnDirection_MAX;
constexpr int HiddenStateExtentArchive::RowOrColumnDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MultiTableRemapperArchive_Purpose_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[11];
}
bool MultiTableRemapperArchive_Purpose_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MultiTableRemapperArchive_Purpose MultiTableRemapperArchive::DEFAULT;
constexpr MultiTableRemapperArchive_Purpose MultiTableRemapperArchive::GROUPING;
constexpr MultiTableRemapperArchive_Purpose MultiTableRemapperArchive::PAGES_SECTION_DUPLICATION_NONCOLLAB;
constexpr MultiTableRemapperArchive_Purpose MultiTableRemapperArchive::Purpose_MIN;
constexpr MultiTableRemapperArchive_Purpose MultiTableRemapperArchive::Purpose_MAX;
constexpr int MultiTableRemapperArchive::Purpose_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[12];
}
bool CellType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[13];
}
bool CellValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableDimensionArchive_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[14];
}
bool TableDimensionArchive_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelectionTypeArchive_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[15];
}
bool SelectionTypeArchive_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FillDirectionArchive_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[16];
}
bool FillDirectionArchive_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MergeActionArchive_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[17];
}
bool MergeActionArchive_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HideShowActionArchive_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[18];
}
bool HideShowActionArchive_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[19];
}
bool GroupingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggregateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[20];
}
bool AggregateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CellID::_Internal {
 public:
  using HasBits = decltype(std::declval<CellID>()._has_bits_);
  static void set_has_packeddata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::CellCoordinateArchive& expanded_coord(const CellID* msg);
  static void set_has_expanded_coord(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSCE::CellCoordinateArchive&
CellID::_Internal::expanded_coord(const CellID* msg) {
  return *msg->expanded_coord_;
}
void CellID::clear_expanded_coord() {
  if (expanded_coord_ != nullptr) expanded_coord_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CellID::CellID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CellID)
}
CellID::CellID(const CellID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expanded_coord()) {
    expanded_coord_ = new ::TSCE::CellCoordinateArchive(*from.expanded_coord_);
  } else {
    expanded_coord_ = nullptr;
  }
  packeddata_ = from.packeddata_;
  // @@protoc_insertion_point(copy_constructor:TST.CellID)
}

inline void CellID::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&expanded_coord_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&packeddata_) -
    reinterpret_cast<char*>(&expanded_coord_)) + sizeof(packeddata_));
}

CellID::~CellID() {
  // @@protoc_insertion_point(destructor:TST.CellID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete expanded_coord_;
}

void CellID::ArenaDtor(void* object) {
  CellID* _this = reinterpret_cast< CellID* >(object);
  (void)_this;
}
void CellID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellID::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(expanded_coord_ != nullptr);
    expanded_coord_->Clear();
  }
  packeddata_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required fixed32 packedData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_packeddata(&has_bits);
          packeddata_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordinateArchive expanded_coord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expanded_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed32 packedData = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_packeddata(), target);
  }

  // optional .TSCE.CellCoordinateArchive expanded_coord = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::expanded_coord(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellID)
  return target;
}

size_t CellID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellID)
  size_t total_size = 0;

  // required fixed32 packedData = 1;
  if (_internal_has_packeddata()) {
    total_size += 1 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.CellCoordinateArchive expanded_coord = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expanded_coord_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellID::GetClassData() const { return &_class_data_; }

void CellID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CellID *>(to)->MergeFrom(
      static_cast<const CellID &>(from));
}


void CellID::MergeFrom(const CellID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CellID)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_expanded_coord()->::TSCE::CellCoordinateArchive::MergeFrom(from._internal_expanded_coord());
    }
    if (cached_has_bits & 0x00000002u) {
      packeddata_ = from.packeddata_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellID::CopyFrom(const CellID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellID::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CellID::InternalSwap(CellID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellID, packeddata_)
      + sizeof(CellID::packeddata_)
      - PROTOBUF_FIELD_OFFSET(CellID, expanded_coord_)>(
          reinterpret_cast<char*>(&expanded_coord_),
          reinterpret_cast<char*>(&other->expanded_coord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[0]);
}

// ===================================================================

class CellUIDLookupListArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellUIDLookupListArchive>()._has_bits_);
  static const ::TSCE::UidLookupListArchive& column_uids(const CellUIDLookupListArchive* msg);
  static void set_has_column_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::UidLookupListArchive& row_uids(const CellUIDLookupListArchive* msg);
  static void set_has_row_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSCE::UidLookupListArchive&
CellUIDLookupListArchive::_Internal::column_uids(const CellUIDLookupListArchive* msg) {
  return *msg->column_uids_;
}
const ::TSCE::UidLookupListArchive&
CellUIDLookupListArchive::_Internal::row_uids(const CellUIDLookupListArchive* msg) {
  return *msg->row_uids_;
}
void CellUIDLookupListArchive::clear_column_uids() {
  if (column_uids_ != nullptr) column_uids_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CellUIDLookupListArchive::clear_row_uids() {
  if (row_uids_ != nullptr) row_uids_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CellUIDLookupListArchive::CellUIDLookupListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  column_indexes_(arena),
  row_indexes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CellUIDLookupListArchive)
}
CellUIDLookupListArchive::CellUIDLookupListArchive(const CellUIDLookupListArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      column_indexes_(from.column_indexes_),
      row_indexes_(from.row_indexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_uids()) {
    column_uids_ = new ::TSCE::UidLookupListArchive(*from.column_uids_);
  } else {
    column_uids_ = nullptr;
  }
  if (from._internal_has_row_uids()) {
    row_uids_ = new ::TSCE::UidLookupListArchive(*from.row_uids_);
  } else {
    row_uids_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CellUIDLookupListArchive)
}

inline void CellUIDLookupListArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&column_uids_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&row_uids_) -
    reinterpret_cast<char*>(&column_uids_)) + sizeof(row_uids_));
}

CellUIDLookupListArchive::~CellUIDLookupListArchive() {
  // @@protoc_insertion_point(destructor:TST.CellUIDLookupListArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellUIDLookupListArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete column_uids_;
  if (this != internal_default_instance()) delete row_uids_;
}

void CellUIDLookupListArchive::ArenaDtor(void* object) {
  CellUIDLookupListArchive* _this = reinterpret_cast< CellUIDLookupListArchive* >(object);
  (void)_this;
}
void CellUIDLookupListArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellUIDLookupListArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellUIDLookupListArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellUIDLookupListArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_indexes_.Clear();
  row_indexes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(column_uids_ != nullptr);
      column_uids_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(row_uids_ != nullptr);
      row_uids_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellUIDLookupListArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCE.UidLookupListArchive column_uids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.UidLookupListArchive row_uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_uids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 column_indexes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_column_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_column_indexes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 row_indexes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_row_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_row_indexes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellUIDLookupListArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellUIDLookupListArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSCE.UidLookupListArchive column_uids = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::column_uids(this), target, stream);
  }

  // optional .TSCE.UidLookupListArchive row_uids = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::row_uids(this), target, stream);
  }

  // repeated int32 column_indexes = 3;
  for (int i = 0, n = this->_internal_column_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_column_indexes(i), target);
  }

  // repeated int32 row_indexes = 4;
  for (int i = 0, n = this->_internal_row_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_row_indexes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellUIDLookupListArchive)
  return target;
}

size_t CellUIDLookupListArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellUIDLookupListArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 column_indexes = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->column_indexes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_column_indexes_size());
    total_size += data_size;
  }

  // repeated int32 row_indexes = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->row_indexes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_row_indexes_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCE.UidLookupListArchive column_uids = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *column_uids_);
    }

    // optional .TSCE.UidLookupListArchive row_uids = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *row_uids_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellUIDLookupListArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellUIDLookupListArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellUIDLookupListArchive::GetClassData() const { return &_class_data_; }

void CellUIDLookupListArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CellUIDLookupListArchive *>(to)->MergeFrom(
      static_cast<const CellUIDLookupListArchive &>(from));
}


void CellUIDLookupListArchive::MergeFrom(const CellUIDLookupListArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CellUIDLookupListArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_indexes_.MergeFrom(from.column_indexes_);
  row_indexes_.MergeFrom(from.row_indexes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_column_uids()->::TSCE::UidLookupListArchive::MergeFrom(from._internal_column_uids());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_row_uids()->::TSCE::UidLookupListArchive::MergeFrom(from._internal_row_uids());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellUIDLookupListArchive::CopyFrom(const CellUIDLookupListArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellUIDLookupListArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellUIDLookupListArchive::IsInitialized() const {
  if (_internal_has_column_uids()) {
    if (!column_uids_->IsInitialized()) return false;
  }
  if (_internal_has_row_uids()) {
    if (!row_uids_->IsInitialized()) return false;
  }
  return true;
}

void CellUIDLookupListArchive::InternalSwap(CellUIDLookupListArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  column_indexes_.InternalSwap(&other->column_indexes_);
  row_indexes_.InternalSwap(&other->row_indexes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellUIDLookupListArchive, row_uids_)
      + sizeof(CellUIDLookupListArchive::row_uids_)
      - PROTOBUF_FIELD_OFFSET(CellUIDLookupListArchive, column_uids_)>(
          reinterpret_cast<char*>(&column_uids_),
          reinterpret_cast<char*>(&other->column_uids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellUIDLookupListArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[1]);
}

// ===================================================================

class CellUIDListArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellUIDListArchive>()._has_bits_);
  static const ::TST::CellUIDLookupListArchive& uncompressed_lookup_list(const CellUIDListArchive* msg);
  static void set_has_uncompressed_lookup_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TST::CellUIDLookupListArchive&
CellUIDListArchive::_Internal::uncompressed_lookup_list(const CellUIDListArchive* msg) {
  return *msg->uncompressed_lookup_list_;
}
void CellUIDListArchive::clear_row_uids() {
  row_uids_.Clear();
}
void CellUIDListArchive::clear_column_uids() {
  column_uids_.Clear();
}
CellUIDListArchive::CellUIDListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  row_uids_(arena),
  column_uids_(arena),
  compressed_row_indexes_(arena),
  compressed_column_indexes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CellUIDListArchive)
}
CellUIDListArchive::CellUIDListArchive(const CellUIDListArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      row_uids_(from.row_uids_),
      column_uids_(from.column_uids_),
      compressed_row_indexes_(from.compressed_row_indexes_),
      compressed_column_indexes_(from.compressed_column_indexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uncompressed_lookup_list()) {
    uncompressed_lookup_list_ = new ::TST::CellUIDLookupListArchive(*from.uncompressed_lookup_list_);
  } else {
    uncompressed_lookup_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CellUIDListArchive)
}

inline void CellUIDListArchive::SharedCtor() {
uncompressed_lookup_list_ = nullptr;
}

CellUIDListArchive::~CellUIDListArchive() {
  // @@protoc_insertion_point(destructor:TST.CellUIDListArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellUIDListArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete uncompressed_lookup_list_;
}

void CellUIDListArchive::ArenaDtor(void* object) {
  CellUIDListArchive* _this = reinterpret_cast< CellUIDListArchive* >(object);
  (void)_this;
}
void CellUIDListArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellUIDListArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellUIDListArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellUIDListArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_uids_.Clear();
  column_uids_.Clear();
  compressed_row_indexes_.Clear();
  compressed_column_indexes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(uncompressed_lookup_list_ != nullptr);
    uncompressed_lookup_list_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellUIDListArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID row_uids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID column_uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 compressed_row_indexes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_compressed_row_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_compressed_row_indexes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 compressed_column_indexes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_compressed_column_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_compressed_column_indexes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellUIDLookupListArchive uncompressed_lookup_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_uncompressed_lookup_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellUIDListArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellUIDListArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID row_uids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_row_uids(i), target, stream);
  }

  // repeated .TSP.UUID column_uids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_column_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_column_uids(i), target, stream);
  }

  // repeated int32 compressed_row_indexes = 3;
  for (int i = 0, n = this->_internal_compressed_row_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_compressed_row_indexes(i), target);
  }

  // repeated int32 compressed_column_indexes = 4;
  for (int i = 0, n = this->_internal_compressed_column_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_compressed_column_indexes(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TST.CellUIDLookupListArchive uncompressed_lookup_list = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::uncompressed_lookup_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellUIDListArchive)
  return target;
}

size_t CellUIDListArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellUIDListArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID row_uids = 1;
  total_size += 1UL * this->_internal_row_uids_size();
  for (const auto& msg : this->row_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID column_uids = 2;
  total_size += 1UL * this->_internal_column_uids_size();
  for (const auto& msg : this->column_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 compressed_row_indexes = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->compressed_row_indexes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_compressed_row_indexes_size());
    total_size += data_size;
  }

  // repeated int32 compressed_column_indexes = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->compressed_column_indexes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_compressed_column_indexes_size());
    total_size += data_size;
  }

  // optional .TST.CellUIDLookupListArchive uncompressed_lookup_list = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uncompressed_lookup_list_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellUIDListArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellUIDListArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellUIDListArchive::GetClassData() const { return &_class_data_; }

void CellUIDListArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CellUIDListArchive *>(to)->MergeFrom(
      static_cast<const CellUIDListArchive &>(from));
}


void CellUIDListArchive::MergeFrom(const CellUIDListArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CellUIDListArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_uids_.MergeFrom(from.row_uids_);
  column_uids_.MergeFrom(from.column_uids_);
  compressed_row_indexes_.MergeFrom(from.compressed_row_indexes_);
  compressed_column_indexes_.MergeFrom(from.compressed_column_indexes_);
  if (from._internal_has_uncompressed_lookup_list()) {
    _internal_mutable_uncompressed_lookup_list()->::TST::CellUIDLookupListArchive::MergeFrom(from._internal_uncompressed_lookup_list());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellUIDListArchive::CopyFrom(const CellUIDListArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellUIDListArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellUIDListArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(row_uids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(column_uids_)) return false;
  if (_internal_has_uncompressed_lookup_list()) {
    if (!uncompressed_lookup_list_->IsInitialized()) return false;
  }
  return true;
}

void CellUIDListArchive::InternalSwap(CellUIDListArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  row_uids_.InternalSwap(&other->row_uids_);
  column_uids_.InternalSwap(&other->column_uids_);
  compressed_row_indexes_.InternalSwap(&other->compressed_row_indexes_);
  compressed_column_indexes_.InternalSwap(&other->compressed_column_indexes_);
  swap(uncompressed_lookup_list_, other->uncompressed_lookup_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellUIDListArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[2]);
}

// ===================================================================

class TableSize::_Internal {
 public:
  using HasBits = decltype(std::declval<TableSize>()._has_bits_);
  static void set_has_packeddata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TableSize::TableSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TableSize)
}
TableSize::TableSize(const TableSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&packeddata_, &from.packeddata_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_rows_) -
    reinterpret_cast<char*>(&packeddata_)) + sizeof(num_rows_));
  // @@protoc_insertion_point(copy_constructor:TST.TableSize)
}

inline void TableSize::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packeddata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_rows_) -
    reinterpret_cast<char*>(&packeddata_)) + sizeof(num_rows_));
}

TableSize::~TableSize() {
  // @@protoc_insertion_point(destructor:TST.TableSize)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableSize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TableSize::ArenaDtor(void* object) {
  TableSize* _this = reinterpret_cast< TableSize* >(object);
  (void)_this;
}
void TableSize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableSize::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&packeddata_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_rows_) -
        reinterpret_cast<char*>(&packeddata_)) + sizeof(num_rows_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required fixed32 packedData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_packeddata(&has_bits);
          packeddata_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_columns(&has_bits);
          num_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_rows(&has_bits);
          num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableSize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed32 packedData = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_packeddata(), target);
  }

  // optional uint32 num_columns = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_columns(), target);
  }

  // optional uint32 num_rows = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableSize)
  return target;
}

size_t TableSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableSize)
  size_t total_size = 0;

  // required fixed32 packedData = 1;
  if (_internal_has_packeddata()) {
    total_size += 1 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 num_columns = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_columns());
    }

    // optional uint32 num_rows = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_rows());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableSize::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableSize::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableSize::GetClassData() const { return &_class_data_; }

void TableSize::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableSize *>(to)->MergeFrom(
      static_cast<const TableSize &>(from));
}


void TableSize::MergeFrom(const TableSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TableSize)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      packeddata_ = from.packeddata_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_columns_ = from.num_columns_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_rows_ = from.num_rows_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableSize::CopyFrom(const TableSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSize::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TableSize::InternalSwap(TableSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableSize, num_rows_)
      + sizeof(TableSize::num_rows_)
      - PROTOBUF_FIELD_OFFSET(TableSize, packeddata_)>(
          reinterpret_cast<char*>(&packeddata_),
          reinterpret_cast<char*>(&other->packeddata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableSize::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[3]);
}

// ===================================================================

class ExpandedTableSize::_Internal {
 public:
  using HasBits = decltype(std::declval<ExpandedTableSize>()._has_bits_);
  static void set_has_num_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ExpandedTableSize::ExpandedTableSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ExpandedTableSize)
}
ExpandedTableSize::ExpandedTableSize(const ExpandedTableSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_columns_, &from.num_columns_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_rows_) -
    reinterpret_cast<char*>(&num_columns_)) + sizeof(num_rows_));
  // @@protoc_insertion_point(copy_constructor:TST.ExpandedTableSize)
}

inline void ExpandedTableSize::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_columns_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_rows_) -
    reinterpret_cast<char*>(&num_columns_)) + sizeof(num_rows_));
}

ExpandedTableSize::~ExpandedTableSize() {
  // @@protoc_insertion_point(destructor:TST.ExpandedTableSize)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExpandedTableSize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExpandedTableSize::ArenaDtor(void* object) {
  ExpandedTableSize* _this = reinterpret_cast< ExpandedTableSize* >(object);
  (void)_this;
}
void ExpandedTableSize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpandedTableSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExpandedTableSize::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ExpandedTableSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&num_columns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_rows_) -
        reinterpret_cast<char*>(&num_columns_)) + sizeof(num_rows_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpandedTableSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 num_columns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_columns(&has_bits);
          num_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 num_rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_rows(&has_bits);
          num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpandedTableSize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ExpandedTableSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 num_columns = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_columns(), target);
  }

  // required uint32 num_rows = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ExpandedTableSize)
  return target;
}

size_t ExpandedTableSize::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.ExpandedTableSize)
  size_t total_size = 0;

  if (_internal_has_num_columns()) {
    // required uint32 num_columns = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_columns());
  }

  if (_internal_has_num_rows()) {
    // required uint32 num_rows = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_rows());
  }

  return total_size;
}
size_t ExpandedTableSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ExpandedTableSize)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 num_columns = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_columns());

    // required uint32 num_rows = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_rows());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpandedTableSize::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExpandedTableSize::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpandedTableSize::GetClassData() const { return &_class_data_; }

void ExpandedTableSize::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ExpandedTableSize *>(to)->MergeFrom(
      static_cast<const ExpandedTableSize &>(from));
}


void ExpandedTableSize::MergeFrom(const ExpandedTableSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ExpandedTableSize)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      num_columns_ = from.num_columns_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_rows_ = from.num_rows_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpandedTableSize::CopyFrom(const ExpandedTableSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ExpandedTableSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandedTableSize::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ExpandedTableSize::InternalSwap(ExpandedTableSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExpandedTableSize, num_rows_)
      + sizeof(ExpandedTableSize::num_rows_)
      - PROTOBUF_FIELD_OFFSET(ExpandedTableSize, num_columns_)>(
          reinterpret_cast<char*>(&num_columns_),
          reinterpret_cast<char*>(&other->num_columns_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpandedTableSize::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[4]);
}

// ===================================================================

class CellRange::_Internal {
 public:
  using HasBits = decltype(std::declval<CellRange>()._has_bits_);
  static const ::TST::CellID& origin(const CellRange* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::TableSize& size(const CellRange* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CellID&
CellRange::_Internal::origin(const CellRange* msg) {
  return *msg->origin_;
}
const ::TST::TableSize&
CellRange::_Internal::size(const CellRange* msg) {
  return *msg->size_;
}
CellRange::CellRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CellRange)
}
CellRange::CellRange(const CellRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    origin_ = new ::TST::CellID(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::TST::TableSize(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CellRange)
}

inline void CellRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&origin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&origin_)) + sizeof(size_));
}

CellRange::~CellRange() {
  // @@protoc_insertion_point(destructor:TST.CellRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete size_;
}

void CellRange::ArenaDtor(void* object) {
  CellRange* _this = reinterpret_cast< CellRange* >(object);
  (void)_this;
}
void CellRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellRange::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(origin_ != nullptr);
      origin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(size_ != nullptr);
      size_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CellID origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.TableSize size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CellID origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::origin(this), target, stream);
  }

  // required .TST.TableSize size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellRange)
  return target;
}

size_t CellRange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CellRange)
  size_t total_size = 0;

  if (_internal_has_origin()) {
    // required .TST.CellID origin = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  if (_internal_has_size()) {
    // required .TST.TableSize size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  return total_size;
}
size_t CellRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellRange)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.CellID origin = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);

    // required .TST.TableSize size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellRange::GetClassData() const { return &_class_data_; }

void CellRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CellRange *>(to)->MergeFrom(
      static_cast<const CellRange &>(from));
}


void CellRange::MergeFrom(const CellRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CellRange)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_origin()->::TST::CellID::MergeFrom(from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_size()->::TST::TableSize::MergeFrom(from._internal_size());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellRange::CopyFrom(const CellRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRange::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_origin()) {
    if (!origin_->IsInitialized()) return false;
  }
  if (_internal_has_size()) {
    if (!size_->IsInitialized()) return false;
  }
  return true;
}

void CellRange::InternalSwap(CellRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellRange, size_)
      + sizeof(CellRange::size_)
      - PROTOBUF_FIELD_OFFSET(CellRange, origin_)>(
          reinterpret_cast<char*>(&origin_),
          reinterpret_cast<char*>(&other->origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[5]);
}

// ===================================================================

class ExpandedCellRange::_Internal {
 public:
  using HasBits = decltype(std::declval<ExpandedCellRange>()._has_bits_);
  static const ::TSCE::CellCoordinateArchive& origin(const ExpandedCellRange* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::ExpandedTableSize& size(const ExpandedCellRange* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::CellCoordinateArchive&
ExpandedCellRange::_Internal::origin(const ExpandedCellRange* msg) {
  return *msg->origin_;
}
const ::TST::ExpandedTableSize&
ExpandedCellRange::_Internal::size(const ExpandedCellRange* msg) {
  return *msg->size_;
}
void ExpandedCellRange::clear_origin() {
  if (origin_ != nullptr) origin_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ExpandedCellRange::ExpandedCellRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ExpandedCellRange)
}
ExpandedCellRange::ExpandedCellRange(const ExpandedCellRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    origin_ = new ::TSCE::CellCoordinateArchive(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::TST::ExpandedTableSize(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.ExpandedCellRange)
}

inline void ExpandedCellRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&origin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&origin_)) + sizeof(size_));
}

ExpandedCellRange::~ExpandedCellRange() {
  // @@protoc_insertion_point(destructor:TST.ExpandedCellRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExpandedCellRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete size_;
}

void ExpandedCellRange::ArenaDtor(void* object) {
  ExpandedCellRange* _this = reinterpret_cast< ExpandedCellRange* >(object);
  (void)_this;
}
void ExpandedCellRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpandedCellRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExpandedCellRange::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ExpandedCellRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(origin_ != nullptr);
      origin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(size_ != nullptr);
      size_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpandedCellRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellCoordinateArchive origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.ExpandedTableSize size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpandedCellRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ExpandedCellRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.CellCoordinateArchive origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::origin(this), target, stream);
  }

  // required .TST.ExpandedTableSize size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ExpandedCellRange)
  return target;
}

size_t ExpandedCellRange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.ExpandedCellRange)
  size_t total_size = 0;

  if (_internal_has_origin()) {
    // required .TSCE.CellCoordinateArchive origin = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  if (_internal_has_size()) {
    // required .TST.ExpandedTableSize size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  return total_size;
}
size_t ExpandedCellRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ExpandedCellRange)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.CellCoordinateArchive origin = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);

    // required .TST.ExpandedTableSize size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpandedCellRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExpandedCellRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpandedCellRange::GetClassData() const { return &_class_data_; }

void ExpandedCellRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ExpandedCellRange *>(to)->MergeFrom(
      static_cast<const ExpandedCellRange &>(from));
}


void ExpandedCellRange::MergeFrom(const ExpandedCellRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ExpandedCellRange)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_origin()->::TSCE::CellCoordinateArchive::MergeFrom(from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_size()->::TST::ExpandedTableSize::MergeFrom(from._internal_size());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpandedCellRange::CopyFrom(const ExpandedCellRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ExpandedCellRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandedCellRange::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_size()) {
    if (!size_->IsInitialized()) return false;
  }
  return true;
}

void ExpandedCellRange::InternalSwap(ExpandedCellRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExpandedCellRange, size_)
      + sizeof(ExpandedCellRange::size_)
      - PROTOBUF_FIELD_OFFSET(ExpandedCellRange, origin_)>(
          reinterpret_cast<char*>(&origin_),
          reinterpret_cast<char*>(&other->origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpandedCellRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[6]);
}

// ===================================================================

class TableSelection::_Internal {
 public:
  using HasBits = decltype(std::declval<TableSelection>()._has_bits_);
  static const ::TST::CellRange& cellrange(const TableSelection* msg);
  static void set_has_cellrange(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CellRange& extendedcellrange(const TableSelection* msg);
  static void set_has_extendedcellrange(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_extendedcellrangevalid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_selection_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TST::CellRange&
TableSelection::_Internal::cellrange(const TableSelection* msg) {
  return *msg->cellrange_;
}
const ::TST::CellRange&
TableSelection::_Internal::extendedcellrange(const TableSelection* msg) {
  return *msg->extendedcellrange_;
}
TableSelection::TableSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TableSelection)
}
TableSelection::TableSelection(const TableSelection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cellrange()) {
    cellrange_ = new ::TST::CellRange(*from.cellrange_);
  } else {
    cellrange_ = nullptr;
  }
  if (from._internal_has_extendedcellrange()) {
    extendedcellrange_ = new ::TST::CellRange(*from.extendedcellrange_);
  } else {
    extendedcellrange_ = nullptr;
  }
  ::memcpy(&extendedcellrangevalid_, &from.extendedcellrangevalid_,
    static_cast<size_t>(reinterpret_cast<char*>(&selection_type_) -
    reinterpret_cast<char*>(&extendedcellrangevalid_)) + sizeof(selection_type_));
  // @@protoc_insertion_point(copy_constructor:TST.TableSelection)
}

inline void TableSelection::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cellrange_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&selection_type_) -
    reinterpret_cast<char*>(&cellrange_)) + sizeof(selection_type_));
}

TableSelection::~TableSelection() {
  // @@protoc_insertion_point(destructor:TST.TableSelection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableSelection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cellrange_;
  if (this != internal_default_instance()) delete extendedcellrange_;
}

void TableSelection::ArenaDtor(void* object) {
  TableSelection* _this = reinterpret_cast< TableSelection* >(object);
  (void)_this;
}
void TableSelection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableSelection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableSelection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cellrange_ != nullptr);
      cellrange_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(extendedcellrange_ != nullptr);
      extendedcellrange_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&extendedcellrangevalid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selection_type_) -
        reinterpret_cast<char*>(&extendedcellrangevalid_)) + sizeof(selection_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableSelection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CellRange cellRange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cellrange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.CellRange extendedCellRange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_extendedcellrange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool extendedCellRangeValid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_extendedcellrangevalid(&has_bits);
          extendedcellrangevalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.SelectionTypeArchive selection_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::SelectionTypeArchive_IsValid(val))) {
            _internal_set_selection_type(static_cast<::TST::SelectionTypeArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableSelection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableSelection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CellRange cellRange = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cellrange(this), target, stream);
  }

  // required .TST.CellRange extendedCellRange = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::extendedcellrange(this), target, stream);
  }

  // required bool extendedCellRangeValid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_extendedcellrangevalid(), target);
  }

  // required .TST.SelectionTypeArchive selection_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_selection_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableSelection)
  return target;
}

size_t TableSelection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableSelection)
  size_t total_size = 0;

  if (_internal_has_cellrange()) {
    // required .TST.CellRange cellRange = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cellrange_);
  }

  if (_internal_has_extendedcellrange()) {
    // required .TST.CellRange extendedCellRange = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extendedcellrange_);
  }

  if (_internal_has_extendedcellrangevalid()) {
    // required bool extendedCellRangeValid = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_selection_type()) {
    // required .TST.SelectionTypeArchive selection_type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_selection_type());
  }

  return total_size;
}
size_t TableSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableSelection)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TST.CellRange cellRange = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cellrange_);

    // required .TST.CellRange extendedCellRange = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extendedcellrange_);

    // required bool extendedCellRangeValid = 3;
    total_size += 1 + 1;

    // required .TST.SelectionTypeArchive selection_type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_selection_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableSelection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableSelection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableSelection::GetClassData() const { return &_class_data_; }

void TableSelection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableSelection *>(to)->MergeFrom(
      static_cast<const TableSelection &>(from));
}


void TableSelection::MergeFrom(const TableSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TableSelection)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cellrange()->::TST::CellRange::MergeFrom(from._internal_cellrange());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_extendedcellrange()->::TST::CellRange::MergeFrom(from._internal_extendedcellrange());
    }
    if (cached_has_bits & 0x00000004u) {
      extendedcellrangevalid_ = from.extendedcellrangevalid_;
    }
    if (cached_has_bits & 0x00000008u) {
      selection_type_ = from.selection_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableSelection::CopyFrom(const TableSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSelection::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_cellrange()) {
    if (!cellrange_->IsInitialized()) return false;
  }
  if (_internal_has_extendedcellrange()) {
    if (!extendedcellrange_->IsInitialized()) return false;
  }
  return true;
}

void TableSelection::InternalSwap(TableSelection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableSelection, selection_type_)
      + sizeof(TableSelection::selection_type_)
      - PROTOBUF_FIELD_OFFSET(TableSelection, cellrange_)>(
          reinterpret_cast<char*>(&cellrange_),
          reinterpret_cast<char*>(&other->cellrange_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableSelection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[7]);
}

// ===================================================================

class TileRowInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TileRowInfo>()._has_bits_);
  static void set_has_tile_row_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cell_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cell_storage_buffer_pre_bnc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cell_offsets_pre_bnc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_storage_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cell_storage_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cell_offsets(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_has_wide_offsets(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000033) ^ 0x00000033) != 0;
  }
};

TileRowInfo::TileRowInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TileRowInfo)
}
TileRowInfo::TileRowInfo(const TileRowInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cell_storage_buffer_pre_bnc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cell_storage_buffer_pre_bnc()) {
    cell_storage_buffer_pre_bnc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cell_storage_buffer_pre_bnc(), 
      GetArenaForAllocation());
  }
  cell_offsets_pre_bnc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cell_offsets_pre_bnc()) {
    cell_offsets_pre_bnc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cell_offsets_pre_bnc(), 
      GetArenaForAllocation());
  }
  cell_storage_buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cell_storage_buffer()) {
    cell_storage_buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cell_storage_buffer(), 
      GetArenaForAllocation());
  }
  cell_offsets_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cell_offsets()) {
    cell_offsets_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cell_offsets(), 
      GetArenaForAllocation());
  }
  ::memcpy(&tile_row_index_, &from.tile_row_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_wide_offsets_) -
    reinterpret_cast<char*>(&tile_row_index_)) + sizeof(has_wide_offsets_));
  // @@protoc_insertion_point(copy_constructor:TST.TileRowInfo)
}

inline void TileRowInfo::SharedCtor() {
cell_storage_buffer_pre_bnc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cell_offsets_pre_bnc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cell_storage_buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cell_offsets_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tile_row_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_wide_offsets_) -
    reinterpret_cast<char*>(&tile_row_index_)) + sizeof(has_wide_offsets_));
}

TileRowInfo::~TileRowInfo() {
  // @@protoc_insertion_point(destructor:TST.TileRowInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TileRowInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cell_storage_buffer_pre_bnc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cell_offsets_pre_bnc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cell_storage_buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cell_offsets_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TileRowInfo::ArenaDtor(void* object) {
  TileRowInfo* _this = reinterpret_cast< TileRowInfo* >(object);
  (void)_this;
}
void TileRowInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileRowInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileRowInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TileRowInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      cell_storage_buffer_pre_bnc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      cell_offsets_pre_bnc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      cell_storage_buffer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      cell_offsets_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&tile_row_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_wide_offsets_) -
        reinterpret_cast<char*>(&tile_row_index_)) + sizeof(has_wide_offsets_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileRowInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 tile_row_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tile_row_index(&has_bits);
          tile_row_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 cell_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cell_count(&has_bits);
          cell_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes cell_storage_buffer_pre_bnc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cell_storage_buffer_pre_bnc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes cell_offsets_pre_bnc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cell_offsets_pre_bnc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 storage_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_storage_version(&has_bits);
          storage_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes cell_storage_buffer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_cell_storage_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes cell_offsets = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_cell_offsets();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_wide_offsets = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_has_wide_offsets(&has_bits);
          has_wide_offsets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileRowInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TileRowInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 tile_row_index = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tile_row_index(), target);
  }

  // required uint32 cell_count = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cell_count(), target);
  }

  // required bytes cell_storage_buffer_pre_bnc = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_cell_storage_buffer_pre_bnc(), target);
  }

  // required bytes cell_offsets_pre_bnc = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_cell_offsets_pre_bnc(), target);
  }

  // optional uint32 storage_version = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_storage_version(), target);
  }

  // optional bytes cell_storage_buffer = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_cell_storage_buffer(), target);
  }

  // optional bytes cell_offsets = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_cell_offsets(), target);
  }

  // optional bool has_wide_offsets = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_has_wide_offsets(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TileRowInfo)
  return target;
}

size_t TileRowInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TileRowInfo)
  size_t total_size = 0;

  if (_internal_has_cell_storage_buffer_pre_bnc()) {
    // required bytes cell_storage_buffer_pre_bnc = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cell_storage_buffer_pre_bnc());
  }

  if (_internal_has_cell_offsets_pre_bnc()) {
    // required bytes cell_offsets_pre_bnc = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cell_offsets_pre_bnc());
  }

  if (_internal_has_tile_row_index()) {
    // required uint32 tile_row_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tile_row_index());
  }

  if (_internal_has_cell_count()) {
    // required uint32 cell_count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cell_count());
  }

  return total_size;
}
size_t TileRowInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TileRowInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000033) ^ 0x00000033) == 0) {  // All required fields are present.
    // required bytes cell_storage_buffer_pre_bnc = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cell_storage_buffer_pre_bnc());

    // required bytes cell_offsets_pre_bnc = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cell_offsets_pre_bnc());

    // required uint32 tile_row_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tile_row_index());

    // required uint32 cell_count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cell_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional bytes cell_storage_buffer = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_cell_storage_buffer());
    }

    // optional bytes cell_offsets = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_cell_offsets());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional uint32 storage_version = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_storage_version());
    }

    // optional bool has_wide_offsets = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileRowInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TileRowInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileRowInfo::GetClassData() const { return &_class_data_; }

void TileRowInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TileRowInfo *>(to)->MergeFrom(
      static_cast<const TileRowInfo &>(from));
}


void TileRowInfo::MergeFrom(const TileRowInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TileRowInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cell_storage_buffer_pre_bnc(from._internal_cell_storage_buffer_pre_bnc());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_cell_offsets_pre_bnc(from._internal_cell_offsets_pre_bnc());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_cell_storage_buffer(from._internal_cell_storage_buffer());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_cell_offsets(from._internal_cell_offsets());
    }
    if (cached_has_bits & 0x00000010u) {
      tile_row_index_ = from.tile_row_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      cell_count_ = from.cell_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      storage_version_ = from.storage_version_;
    }
    if (cached_has_bits & 0x00000080u) {
      has_wide_offsets_ = from.has_wide_offsets_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileRowInfo::CopyFrom(const TileRowInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TileRowInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileRowInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TileRowInfo::InternalSwap(TileRowInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cell_storage_buffer_pre_bnc_, GetArenaForAllocation(),
      &other->cell_storage_buffer_pre_bnc_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cell_offsets_pre_bnc_, GetArenaForAllocation(),
      &other->cell_offsets_pre_bnc_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cell_storage_buffer_, GetArenaForAllocation(),
      &other->cell_storage_buffer_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cell_offsets_, GetArenaForAllocation(),
      &other->cell_offsets_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileRowInfo, has_wide_offsets_)
      + sizeof(TileRowInfo::has_wide_offsets_)
      - PROTOBUF_FIELD_OFFSET(TileRowInfo, tile_row_index_)>(
          reinterpret_cast<char*>(&tile_row_index_),
          reinterpret_cast<char*>(&other->tile_row_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TileRowInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[8]);
}

// ===================================================================

class Tile::_Internal {
 public:
  using HasBits = decltype(std::declval<Tile>()._has_bits_);
  static void set_has_maxcolumn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_maxrow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_numcells(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_numrows(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_storage_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_saved_in_bnc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_should_use_wide_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

Tile::Tile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rowinfos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.Tile)
}
Tile::Tile(const Tile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rowinfos_(from.rowinfos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&maxcolumn_, &from.maxcolumn_,
    static_cast<size_t>(reinterpret_cast<char*>(&should_use_wide_rows_) -
    reinterpret_cast<char*>(&maxcolumn_)) + sizeof(should_use_wide_rows_));
  // @@protoc_insertion_point(copy_constructor:TST.Tile)
}

inline void Tile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&maxcolumn_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&should_use_wide_rows_) -
    reinterpret_cast<char*>(&maxcolumn_)) + sizeof(should_use_wide_rows_));
}

Tile::~Tile() {
  // @@protoc_insertion_point(destructor:TST.Tile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Tile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Tile::ArenaDtor(void* object) {
  Tile* _this = reinterpret_cast< Tile* >(object);
  (void)_this;
}
void Tile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Tile::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.Tile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rowinfos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&maxcolumn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&should_use_wide_rows_) -
        reinterpret_cast<char*>(&maxcolumn_)) + sizeof(should_use_wide_rows_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 maxColumn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_maxcolumn(&has_bits);
          maxcolumn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 maxRow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_maxrow(&has_bits);
          maxrow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 numCells = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_numcells(&has_bits);
          numcells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 numrows = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_numrows(&has_bits);
          numrows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.TileRowInfo rowInfos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rowinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 storage_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_storage_version(&has_bits);
          storage_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool last_saved_in_BNC = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_last_saved_in_bnc(&has_bits);
          last_saved_in_bnc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_use_wide_rows = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_should_use_wide_rows(&has_bits);
          should_use_wide_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.Tile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 maxColumn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_maxcolumn(), target);
  }

  // required uint32 maxRow = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maxrow(), target);
  }

  // required uint32 numCells = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_numcells(), target);
  }

  // required uint32 numrows = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_numrows(), target);
  }

  // repeated .TST.TileRowInfo rowInfos = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rowinfos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_rowinfos(i), target, stream);
  }

  // optional uint32 storage_version = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_storage_version(), target);
  }

  // optional bool last_saved_in_BNC = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_last_saved_in_bnc(), target);
  }

  // optional bool should_use_wide_rows = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_should_use_wide_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.Tile)
  return target;
}

size_t Tile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.Tile)
  size_t total_size = 0;

  if (_internal_has_maxcolumn()) {
    // required uint32 maxColumn = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxcolumn());
  }

  if (_internal_has_maxrow()) {
    // required uint32 maxRow = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxrow());
  }

  if (_internal_has_numcells()) {
    // required uint32 numCells = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numcells());
  }

  if (_internal_has_numrows()) {
    // required uint32 numrows = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numrows());
  }

  return total_size;
}
size_t Tile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.Tile)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 maxColumn = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxcolumn());

    // required uint32 maxRow = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxrow());

    // required uint32 numCells = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numcells());

    // required uint32 numrows = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numrows());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.TileRowInfo rowInfos = 5;
  total_size += 1UL * this->_internal_rowinfos_size();
  for (const auto& msg : this->rowinfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000070u) {
    // optional uint32 storage_version = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_storage_version());
    }

    // optional bool last_saved_in_BNC = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool should_use_wide_rows = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Tile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tile::GetClassData() const { return &_class_data_; }

void Tile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Tile *>(to)->MergeFrom(
      static_cast<const Tile &>(from));
}


void Tile::MergeFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.Tile)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rowinfos_.MergeFrom(from.rowinfos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      maxcolumn_ = from.maxcolumn_;
    }
    if (cached_has_bits & 0x00000002u) {
      maxrow_ = from.maxrow_;
    }
    if (cached_has_bits & 0x00000004u) {
      numcells_ = from.numcells_;
    }
    if (cached_has_bits & 0x00000008u) {
      numrows_ = from.numrows_;
    }
    if (cached_has_bits & 0x00000010u) {
      storage_version_ = from.storage_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_saved_in_bnc_ = from.last_saved_in_bnc_;
    }
    if (cached_has_bits & 0x00000040u) {
      should_use_wide_rows_ = from.should_use_wide_rows_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tile::CopyFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rowinfos_)) return false;
  return true;
}

void Tile::InternalSwap(Tile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rowinfos_.InternalSwap(&other->rowinfos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tile, should_use_wide_rows_)
      + sizeof(Tile::should_use_wide_rows_)
      - PROTOBUF_FIELD_OFFSET(Tile, maxcolumn_)>(
          reinterpret_cast<char*>(&maxcolumn_),
          reinterpret_cast<char*>(&other->maxcolumn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[9]);
}

// ===================================================================

class TileStorage_Tile::_Internal {
 public:
  using HasBits = decltype(std::declval<TileStorage_Tile>()._has_bits_);
  static void set_has_tileid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& tile(const TileStorage_Tile* msg);
  static void set_has_tile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
TileStorage_Tile::_Internal::tile(const TileStorage_Tile* msg) {
  return *msg->tile_;
}
void TileStorage_Tile::clear_tile() {
  if (tile_ != nullptr) tile_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TileStorage_Tile::TileStorage_Tile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TileStorage.Tile)
}
TileStorage_Tile::TileStorage_Tile(const TileStorage_Tile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tile()) {
    tile_ = new ::TSP::Reference(*from.tile_);
  } else {
    tile_ = nullptr;
  }
  tileid_ = from.tileid_;
  // @@protoc_insertion_point(copy_constructor:TST.TileStorage.Tile)
}

inline void TileStorage_Tile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tile_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tileid_) -
    reinterpret_cast<char*>(&tile_)) + sizeof(tileid_));
}

TileStorage_Tile::~TileStorage_Tile() {
  // @@protoc_insertion_point(destructor:TST.TileStorage.Tile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TileStorage_Tile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tile_;
}

void TileStorage_Tile::ArenaDtor(void* object) {
  TileStorage_Tile* _this = reinterpret_cast< TileStorage_Tile* >(object);
  (void)_this;
}
void TileStorage_Tile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileStorage_Tile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileStorage_Tile::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TileStorage.Tile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tile_ != nullptr);
    tile_->Clear();
  }
  tileid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileStorage_Tile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 tileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tileid(&has_bits);
          tileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference tile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileStorage_Tile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TileStorage.Tile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 tileid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tileid(), target);
  }

  // required .TSP.Reference tile = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tile(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TileStorage.Tile)
  return target;
}

size_t TileStorage_Tile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TileStorage.Tile)
  size_t total_size = 0;

  if (_internal_has_tile()) {
    // required .TSP.Reference tile = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tile_);
  }

  if (_internal_has_tileid()) {
    // required uint32 tileid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tileid());
  }

  return total_size;
}
size_t TileStorage_Tile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TileStorage.Tile)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference tile = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tile_);

    // required uint32 tileid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tileid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileStorage_Tile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TileStorage_Tile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileStorage_Tile::GetClassData() const { return &_class_data_; }

void TileStorage_Tile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TileStorage_Tile *>(to)->MergeFrom(
      static_cast<const TileStorage_Tile &>(from));
}


void TileStorage_Tile::MergeFrom(const TileStorage_Tile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TileStorage.Tile)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tile()->::TSP::Reference::MergeFrom(from._internal_tile());
    }
    if (cached_has_bits & 0x00000002u) {
      tileid_ = from.tileid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileStorage_Tile::CopyFrom(const TileStorage_Tile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TileStorage.Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileStorage_Tile::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_tile()) {
    if (!tile_->IsInitialized()) return false;
  }
  return true;
}

void TileStorage_Tile::InternalSwap(TileStorage_Tile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileStorage_Tile, tileid_)
      + sizeof(TileStorage_Tile::tileid_)
      - PROTOBUF_FIELD_OFFSET(TileStorage_Tile, tile_)>(
          reinterpret_cast<char*>(&tile_),
          reinterpret_cast<char*>(&other->tile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TileStorage_Tile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[10]);
}

// ===================================================================

class TileStorage::_Internal {
 public:
  using HasBits = decltype(std::declval<TileStorage>()._has_bits_);
  static void set_has_tile_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_should_use_wide_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TileStorage::TileStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tiles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TileStorage)
}
TileStorage::TileStorage(const TileStorage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tiles_(from.tiles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tile_size_, &from.tile_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&should_use_wide_rows_) -
    reinterpret_cast<char*>(&tile_size_)) + sizeof(should_use_wide_rows_));
  // @@protoc_insertion_point(copy_constructor:TST.TileStorage)
}

inline void TileStorage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tile_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&should_use_wide_rows_) -
    reinterpret_cast<char*>(&tile_size_)) + sizeof(should_use_wide_rows_));
}

TileStorage::~TileStorage() {
  // @@protoc_insertion_point(destructor:TST.TileStorage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TileStorage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TileStorage::ArenaDtor(void* object) {
  TileStorage* _this = reinterpret_cast< TileStorage* >(object);
  (void)_this;
}
void TileStorage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileStorage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TileStorage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&tile_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&should_use_wide_rows_) -
        reinterpret_cast<char*>(&tile_size_)) + sizeof(should_use_wide_rows_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileStorage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.TileStorage.Tile tiles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 tile_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tile_size(&has_bits);
          tile_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_use_wide_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_should_use_wide_rows(&has_bits);
          should_use_wide_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileStorage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TileStorage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.TileStorage.Tile tiles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tiles(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 tile_size = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tile_size(), target);
  }

  // optional bool should_use_wide_rows = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_should_use_wide_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TileStorage)
  return target;
}

size_t TileStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TileStorage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.TileStorage.Tile tiles = 1;
  total_size += 1UL * this->_internal_tiles_size();
  for (const auto& msg : this->tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 tile_size = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tile_size());
    }

    // optional bool should_use_wide_rows = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileStorage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TileStorage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileStorage::GetClassData() const { return &_class_data_; }

void TileStorage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TileStorage *>(to)->MergeFrom(
      static_cast<const TileStorage &>(from));
}


void TileStorage::MergeFrom(const TileStorage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TileStorage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiles_.MergeFrom(from.tiles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tile_size_ = from.tile_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      should_use_wide_rows_ = from.should_use_wide_rows_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileStorage::CopyFrom(const TileStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TileStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileStorage::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tiles_)) return false;
  return true;
}

void TileStorage::InternalSwap(TileStorage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tiles_.InternalSwap(&other->tiles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileStorage, should_use_wide_rows_)
      + sizeof(TileStorage::should_use_wide_rows_)
      - PROTOBUF_FIELD_OFFSET(TileStorage, tile_size_)>(
          reinterpret_cast<char*>(&tile_size_),
          reinterpret_cast<char*>(&other->tile_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TileStorage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[11]);
}

// ===================================================================

class PopUpMenuModel_CellValue::_Internal {
 public:
  using HasBits = decltype(std::declval<PopUpMenuModel_CellValue>()._has_bits_);
  static void set_has_cell_value_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCE::BooleanCellValueArchive& boolean_value(const PopUpMenuModel_CellValue* msg);
  static void set_has_boolean_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::DateCellValueArchive& date_value(const PopUpMenuModel_CellValue* msg);
  static void set_has_date_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::NumberCellValueArchive& number_value(const PopUpMenuModel_CellValue* msg);
  static void set_has_number_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::StringCellValueArchive& string_value(const PopUpMenuModel_CellValue* msg);
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::TSCE::BooleanCellValueArchive&
PopUpMenuModel_CellValue::_Internal::boolean_value(const PopUpMenuModel_CellValue* msg) {
  return *msg->boolean_value_;
}
const ::TSCE::DateCellValueArchive&
PopUpMenuModel_CellValue::_Internal::date_value(const PopUpMenuModel_CellValue* msg) {
  return *msg->date_value_;
}
const ::TSCE::NumberCellValueArchive&
PopUpMenuModel_CellValue::_Internal::number_value(const PopUpMenuModel_CellValue* msg) {
  return *msg->number_value_;
}
const ::TSCE::StringCellValueArchive&
PopUpMenuModel_CellValue::_Internal::string_value(const PopUpMenuModel_CellValue* msg) {
  return *msg->string_value_;
}
void PopUpMenuModel_CellValue::clear_boolean_value() {
  if (boolean_value_ != nullptr) boolean_value_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PopUpMenuModel_CellValue::clear_date_value() {
  if (date_value_ != nullptr) date_value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PopUpMenuModel_CellValue::clear_number_value() {
  if (number_value_ != nullptr) number_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void PopUpMenuModel_CellValue::clear_string_value() {
  if (string_value_ != nullptr) string_value_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
PopUpMenuModel_CellValue::PopUpMenuModel_CellValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.PopUpMenuModel.CellValue)
}
PopUpMenuModel_CellValue::PopUpMenuModel_CellValue(const PopUpMenuModel_CellValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_boolean_value()) {
    boolean_value_ = new ::TSCE::BooleanCellValueArchive(*from.boolean_value_);
  } else {
    boolean_value_ = nullptr;
  }
  if (from._internal_has_date_value()) {
    date_value_ = new ::TSCE::DateCellValueArchive(*from.date_value_);
  } else {
    date_value_ = nullptr;
  }
  if (from._internal_has_number_value()) {
    number_value_ = new ::TSCE::NumberCellValueArchive(*from.number_value_);
  } else {
    number_value_ = nullptr;
  }
  if (from._internal_has_string_value()) {
    string_value_ = new ::TSCE::StringCellValueArchive(*from.string_value_);
  } else {
    string_value_ = nullptr;
  }
  cell_value_type_ = from.cell_value_type_;
  // @@protoc_insertion_point(copy_constructor:TST.PopUpMenuModel.CellValue)
}

inline void PopUpMenuModel_CellValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&boolean_value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&string_value_) -
    reinterpret_cast<char*>(&boolean_value_)) + sizeof(string_value_));
cell_value_type_ = 1;
}

PopUpMenuModel_CellValue::~PopUpMenuModel_CellValue() {
  // @@protoc_insertion_point(destructor:TST.PopUpMenuModel.CellValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PopUpMenuModel_CellValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete boolean_value_;
  if (this != internal_default_instance()) delete date_value_;
  if (this != internal_default_instance()) delete number_value_;
  if (this != internal_default_instance()) delete string_value_;
}

void PopUpMenuModel_CellValue::ArenaDtor(void* object) {
  PopUpMenuModel_CellValue* _this = reinterpret_cast< PopUpMenuModel_CellValue* >(object);
  (void)_this;
}
void PopUpMenuModel_CellValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PopUpMenuModel_CellValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PopUpMenuModel_CellValue::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.PopUpMenuModel.CellValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(boolean_value_ != nullptr);
      boolean_value_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(date_value_ != nullptr);
      date_value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(number_value_ != nullptr);
      number_value_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(string_value_ != nullptr);
      string_value_->Clear();
    }
    cell_value_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PopUpMenuModel_CellValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.PopUpMenuModel.CellValueType cell_value_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::PopUpMenuModel_CellValueType_IsValid(val))) {
            _internal_set_cell_value_type(static_cast<::TST::PopUpMenuModel_CellValueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_boolean_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.DateCellValueArchive date_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.NumberCellValueArchive number_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_number_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.StringCellValueArchive string_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PopUpMenuModel_CellValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.PopUpMenuModel.CellValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.PopUpMenuModel.CellValueType cell_value_type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cell_value_type(), target);
  }

  // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::boolean_value(this), target, stream);
  }

  // optional .TSCE.DateCellValueArchive date_value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::date_value(this), target, stream);
  }

  // optional .TSCE.NumberCellValueArchive number_value = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::number_value(this), target, stream);
  }

  // optional .TSCE.StringCellValueArchive string_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::string_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.PopUpMenuModel.CellValue)
  return target;
}

size_t PopUpMenuModel_CellValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.PopUpMenuModel.CellValue)
  size_t total_size = 0;

  // required .TST.PopUpMenuModel.CellValueType cell_value_type = 1;
  if (_internal_has_cell_value_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cell_value_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *boolean_value_);
    }

    // optional .TSCE.DateCellValueArchive date_value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *date_value_);
    }

    // optional .TSCE.NumberCellValueArchive number_value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *number_value_);
    }

    // optional .TSCE.StringCellValueArchive string_value = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *string_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PopUpMenuModel_CellValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PopUpMenuModel_CellValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PopUpMenuModel_CellValue::GetClassData() const { return &_class_data_; }

void PopUpMenuModel_CellValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PopUpMenuModel_CellValue *>(to)->MergeFrom(
      static_cast<const PopUpMenuModel_CellValue &>(from));
}


void PopUpMenuModel_CellValue::MergeFrom(const PopUpMenuModel_CellValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.PopUpMenuModel.CellValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_boolean_value()->::TSCE::BooleanCellValueArchive::MergeFrom(from._internal_boolean_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_date_value()->::TSCE::DateCellValueArchive::MergeFrom(from._internal_date_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_number_value()->::TSCE::NumberCellValueArchive::MergeFrom(from._internal_number_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_string_value()->::TSCE::StringCellValueArchive::MergeFrom(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000010u) {
      cell_value_type_ = from.cell_value_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PopUpMenuModel_CellValue::CopyFrom(const PopUpMenuModel_CellValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.PopUpMenuModel.CellValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopUpMenuModel_CellValue::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_boolean_value()) {
    if (!boolean_value_->IsInitialized()) return false;
  }
  if (_internal_has_date_value()) {
    if (!date_value_->IsInitialized()) return false;
  }
  if (_internal_has_number_value()) {
    if (!number_value_->IsInitialized()) return false;
  }
  if (_internal_has_string_value()) {
    if (!string_value_->IsInitialized()) return false;
  }
  return true;
}

void PopUpMenuModel_CellValue::InternalSwap(PopUpMenuModel_CellValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PopUpMenuModel_CellValue, string_value_)
      + sizeof(PopUpMenuModel_CellValue::string_value_)
      - PROTOBUF_FIELD_OFFSET(PopUpMenuModel_CellValue, boolean_value_)>(
          reinterpret_cast<char*>(&boolean_value_),
          reinterpret_cast<char*>(&other->boolean_value_));
  swap(cell_value_type_, other->cell_value_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PopUpMenuModel_CellValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[12]);
}

// ===================================================================

class PopUpMenuModel::_Internal {
 public:
};

void PopUpMenuModel::clear_tsce_item() {
  tsce_item_.Clear();
}
PopUpMenuModel::PopUpMenuModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  item_(arena),
  tsce_item_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.PopUpMenuModel)
}
PopUpMenuModel::PopUpMenuModel(const PopUpMenuModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      item_(from.item_),
      tsce_item_(from.tsce_item_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.PopUpMenuModel)
}

inline void PopUpMenuModel::SharedCtor() {
}

PopUpMenuModel::~PopUpMenuModel() {
  // @@protoc_insertion_point(destructor:TST.PopUpMenuModel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PopUpMenuModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PopUpMenuModel::ArenaDtor(void* object) {
  PopUpMenuModel* _this = reinterpret_cast< PopUpMenuModel* >(object);
  (void)_this;
}
void PopUpMenuModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PopUpMenuModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PopUpMenuModel::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.PopUpMenuModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  tsce_item_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PopUpMenuModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.PopUpMenuModel.CellValue item = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.CellValueArchive tsce_item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tsce_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PopUpMenuModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.PopUpMenuModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.PopUpMenuModel.CellValue item = 1 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_item(i), target, stream);
  }

  // repeated .TSCE.CellValueArchive tsce_item = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tsce_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tsce_item(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.PopUpMenuModel)
  return target;
}

size_t PopUpMenuModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.PopUpMenuModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.PopUpMenuModel.CellValue item = 1 [deprecated = true];
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.CellValueArchive tsce_item = 2;
  total_size += 1UL * this->_internal_tsce_item_size();
  for (const auto& msg : this->tsce_item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PopUpMenuModel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PopUpMenuModel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PopUpMenuModel::GetClassData() const { return &_class_data_; }

void PopUpMenuModel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PopUpMenuModel *>(to)->MergeFrom(
      static_cast<const PopUpMenuModel &>(from));
}


void PopUpMenuModel::MergeFrom(const PopUpMenuModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.PopUpMenuModel)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
  tsce_item_.MergeFrom(from.tsce_item_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PopUpMenuModel::CopyFrom(const PopUpMenuModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.PopUpMenuModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopUpMenuModel::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(item_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tsce_item_)) return false;
  return true;
}

void PopUpMenuModel::InternalSwap(PopUpMenuModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  item_.InternalSwap(&other->item_);
  tsce_item_.InternalSwap(&other->tsce_item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PopUpMenuModel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[13]);
}

// ===================================================================

class ImportWarningSetArchive_FormulaImportWarning::_Internal {
 public:
  using HasBits = decltype(std::declval<ImportWarningSetArchive_FormulaImportWarning>()._has_bits_);
  static void set_has_formula_warning_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_original_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_supplementary_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_formula_warning_type_int(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

ImportWarningSetArchive_FormulaImportWarning::ImportWarningSetArchive_FormulaImportWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ImportWarningSetArchive.FormulaImportWarning)
}
ImportWarningSetArchive_FormulaImportWarning::ImportWarningSetArchive_FormulaImportWarning(const ImportWarningSetArchive_FormulaImportWarning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  original_formula_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_original_formula()) {
    original_formula_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_original_formula(), 
      GetArenaForAllocation());
  }
  supplementary_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_supplementary_text()) {
    supplementary_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_supplementary_text(), 
      GetArenaForAllocation());
  }
  ::memcpy(&formula_warning_type_int_, &from.formula_warning_type_int_,
    static_cast<size_t>(reinterpret_cast<char*>(&formula_warning_type_) -
    reinterpret_cast<char*>(&formula_warning_type_int_)) + sizeof(formula_warning_type_));
  // @@protoc_insertion_point(copy_constructor:TST.ImportWarningSetArchive.FormulaImportWarning)
}

inline void ImportWarningSetArchive_FormulaImportWarning::SharedCtor() {
original_formula_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
supplementary_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
formula_warning_type_int_ = 0;
formula_warning_type_ = 1;
}

ImportWarningSetArchive_FormulaImportWarning::~ImportWarningSetArchive_FormulaImportWarning() {
  // @@protoc_insertion_point(destructor:TST.ImportWarningSetArchive.FormulaImportWarning)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImportWarningSetArchive_FormulaImportWarning::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  original_formula_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  supplementary_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImportWarningSetArchive_FormulaImportWarning::ArenaDtor(void* object) {
  ImportWarningSetArchive_FormulaImportWarning* _this = reinterpret_cast< ImportWarningSetArchive_FormulaImportWarning* >(object);
  (void)_this;
}
void ImportWarningSetArchive_FormulaImportWarning::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImportWarningSetArchive_FormulaImportWarning::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImportWarningSetArchive_FormulaImportWarning::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ImportWarningSetArchive.FormulaImportWarning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      original_formula_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      supplementary_text_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    formula_warning_type_int_ = 0;
    formula_warning_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportWarningSetArchive_FormulaImportWarning::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ImportWarningSetArchive.FormulaWarningType formula_warning_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::ImportWarningSetArchive_FormulaWarningType_IsValid(val))) {
            _internal_set_formula_warning_type(static_cast<::TST::ImportWarningSetArchive_FormulaWarningType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string original_formula = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_original_formula();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.ImportWarningSetArchive.FormulaImportWarning.original_formula");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string supplementary_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_supplementary_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.ImportWarningSetArchive.FormulaImportWarning.supplementary_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 formula_warning_type_int = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_formula_warning_type_int(&has_bits);
          formula_warning_type_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImportWarningSetArchive_FormulaImportWarning::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ImportWarningSetArchive.FormulaImportWarning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.ImportWarningSetArchive.FormulaWarningType formula_warning_type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_formula_warning_type(), target);
  }

  // optional string original_formula = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_original_formula().data(), static_cast<int>(this->_internal_original_formula().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.ImportWarningSetArchive.FormulaImportWarning.original_formula");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_original_formula(), target);
  }

  // optional string supplementary_text = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_supplementary_text().data(), static_cast<int>(this->_internal_supplementary_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.ImportWarningSetArchive.FormulaImportWarning.supplementary_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_supplementary_text(), target);
  }

  // optional int32 formula_warning_type_int = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_formula_warning_type_int(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ImportWarningSetArchive.FormulaImportWarning)
  return target;
}

size_t ImportWarningSetArchive_FormulaImportWarning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ImportWarningSetArchive.FormulaImportWarning)
  size_t total_size = 0;

  // required .TST.ImportWarningSetArchive.FormulaWarningType formula_warning_type = 1;
  if (_internal_has_formula_warning_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_formula_warning_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string original_formula = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_original_formula());
    }

    // optional string supplementary_text = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_supplementary_text());
    }

    // optional int32 formula_warning_type_int = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_formula_warning_type_int());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportWarningSetArchive_FormulaImportWarning::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImportWarningSetArchive_FormulaImportWarning::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportWarningSetArchive_FormulaImportWarning::GetClassData() const { return &_class_data_; }

void ImportWarningSetArchive_FormulaImportWarning::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ImportWarningSetArchive_FormulaImportWarning *>(to)->MergeFrom(
      static_cast<const ImportWarningSetArchive_FormulaImportWarning &>(from));
}


void ImportWarningSetArchive_FormulaImportWarning::MergeFrom(const ImportWarningSetArchive_FormulaImportWarning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ImportWarningSetArchive.FormulaImportWarning)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_original_formula(from._internal_original_formula());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_supplementary_text(from._internal_supplementary_text());
    }
    if (cached_has_bits & 0x00000004u) {
      formula_warning_type_int_ = from.formula_warning_type_int_;
    }
    if (cached_has_bits & 0x00000008u) {
      formula_warning_type_ = from.formula_warning_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportWarningSetArchive_FormulaImportWarning::CopyFrom(const ImportWarningSetArchive_FormulaImportWarning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ImportWarningSetArchive.FormulaImportWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportWarningSetArchive_FormulaImportWarning::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ImportWarningSetArchive_FormulaImportWarning::InternalSwap(ImportWarningSetArchive_FormulaImportWarning* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &original_formula_, GetArenaForAllocation(),
      &other->original_formula_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &supplementary_text_, GetArenaForAllocation(),
      &other->supplementary_text_, other->GetArenaForAllocation()
  );
  swap(formula_warning_type_int_, other->formula_warning_type_int_);
  swap(formula_warning_type_, other->formula_warning_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportWarningSetArchive_FormulaImportWarning::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[14]);
}

// ===================================================================

class ImportWarningSetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImportWarningSetArchive>()._has_bits_);
  static const ::TST::ImportWarningSetArchive_FormulaImportWarning& formula_import_warning(const ImportWarningSetArchive* msg);
  static void set_has_formula_import_warning(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cond_format_above_avg_equal_avg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cond_format_above_avg_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cond_format_complex_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cond_format_contains_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cond_format_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cond_format_not_contains_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cond_format_parameters_not_all_same_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cond_format_stop_if_true(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cond_format_unsupported_operator(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_cond_format_unsupported_styling(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_cond_format_unsupported_time_period(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_error_cell_with_no_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_unsupported_cond_format(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_original_data_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_formula_warning_filtered_column_formula_not_copied(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_duration_format_range_changed(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::TST::ImportWarningSetArchive_FormulaImportWarning&
ImportWarningSetArchive::_Internal::formula_import_warning(const ImportWarningSetArchive* msg) {
  return *msg->formula_import_warning_;
}
ImportWarningSetArchive::ImportWarningSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ImportWarningSetArchive)
}
ImportWarningSetArchive::ImportWarningSetArchive(const ImportWarningSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  original_data_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_original_data_format()) {
    original_data_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_original_data_format(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_formula_import_warning()) {
    formula_import_warning_ = new ::TST::ImportWarningSetArchive_FormulaImportWarning(*from.formula_import_warning_);
  } else {
    formula_import_warning_ = nullptr;
  }
  ::memcpy(&cond_format_above_avg_equal_avg_, &from.cond_format_above_avg_equal_avg_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_format_range_changed_) -
    reinterpret_cast<char*>(&cond_format_above_avg_equal_avg_)) + sizeof(duration_format_range_changed_));
  // @@protoc_insertion_point(copy_constructor:TST.ImportWarningSetArchive)
}

inline void ImportWarningSetArchive::SharedCtor() {
original_data_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&formula_import_warning_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_format_range_changed_) -
    reinterpret_cast<char*>(&formula_import_warning_)) + sizeof(duration_format_range_changed_));
}

ImportWarningSetArchive::~ImportWarningSetArchive() {
  // @@protoc_insertion_point(destructor:TST.ImportWarningSetArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImportWarningSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  original_data_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete formula_import_warning_;
}

void ImportWarningSetArchive::ArenaDtor(void* object) {
  ImportWarningSetArchive* _this = reinterpret_cast< ImportWarningSetArchive* >(object);
  (void)_this;
}
void ImportWarningSetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImportWarningSetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImportWarningSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ImportWarningSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      original_data_format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(formula_import_warning_ != nullptr);
      formula_import_warning_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&cond_format_above_avg_equal_avg_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cond_format_not_contains_errors_) -
        reinterpret_cast<char*>(&cond_format_above_avg_equal_avg_)) + sizeof(cond_format_not_contains_errors_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&cond_format_parameters_not_all_same_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&formula_warning_filtered_column_formula_not_copied_) -
        reinterpret_cast<char*>(&cond_format_parameters_not_all_same_type_)) + sizeof(formula_warning_filtered_column_formula_not_copied_));
  }
  duration_format_range_changed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportWarningSetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TST.ImportWarningSetArchive.FormulaImportWarning formula_import_warning = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_import_warning(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cond_format_above_avg_equal_avg = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cond_format_above_avg_equal_avg(&has_bits);
          cond_format_above_avg_equal_avg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cond_format_above_avg_std_dev = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cond_format_above_avg_std_dev(&has_bits);
          cond_format_above_avg_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cond_format_complex_formula = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cond_format_complex_formula(&has_bits);
          cond_format_complex_formula_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cond_format_contains_errors = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_cond_format_contains_errors(&has_bits);
          cond_format_contains_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cond_format_expr = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_cond_format_expr(&has_bits);
          cond_format_expr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cond_format_not_contains_errors = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_cond_format_not_contains_errors(&has_bits);
          cond_format_not_contains_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cond_format_parameters_not_all_same_type = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_cond_format_parameters_not_all_same_type(&has_bits);
          cond_format_parameters_not_all_same_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cond_format_stop_if_true = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_cond_format_stop_if_true(&has_bits);
          cond_format_stop_if_true_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cond_format_unsupported_operator = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_cond_format_unsupported_operator(&has_bits);
          cond_format_unsupported_operator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cond_format_unsupported_styling = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_cond_format_unsupported_styling(&has_bits);
          cond_format_unsupported_styling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cond_format_unsupported_time_period = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_cond_format_unsupported_time_period(&has_bits);
          cond_format_unsupported_time_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool error_cell_with_no_formula = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_error_cell_with_no_formula(&has_bits);
          error_cell_with_no_formula_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool unsupported_cond_format = 14 [default = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_unsupported_cond_format(&has_bits);
          unsupported_cond_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string original_data_format = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_original_data_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.ImportWarningSetArchive.original_data_format");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool formula_warning_filtered_column_formula_not_copied = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_formula_warning_filtered_column_formula_not_copied(&has_bits);
          formula_warning_filtered_column_formula_not_copied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool duration_format_range_changed = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_duration_format_range_changed(&has_bits);
          duration_format_range_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImportWarningSetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ImportWarningSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TST.ImportWarningSetArchive.FormulaImportWarning formula_import_warning = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::formula_import_warning(this), target, stream);
  }

  // optional bool cond_format_above_avg_equal_avg = 2 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_cond_format_above_avg_equal_avg(), target);
  }

  // optional bool cond_format_above_avg_std_dev = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_cond_format_above_avg_std_dev(), target);
  }

  // optional bool cond_format_complex_formula = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_cond_format_complex_formula(), target);
  }

  // optional bool cond_format_contains_errors = 5 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_cond_format_contains_errors(), target);
  }

  // optional bool cond_format_expr = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_cond_format_expr(), target);
  }

  // optional bool cond_format_not_contains_errors = 7 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_cond_format_not_contains_errors(), target);
  }

  // optional bool cond_format_parameters_not_all_same_type = 8 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_cond_format_parameters_not_all_same_type(), target);
  }

  // optional bool cond_format_stop_if_true = 9 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_cond_format_stop_if_true(), target);
  }

  // optional bool cond_format_unsupported_operator = 10 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_cond_format_unsupported_operator(), target);
  }

  // optional bool cond_format_unsupported_styling = 11 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_cond_format_unsupported_styling(), target);
  }

  // optional bool cond_format_unsupported_time_period = 12 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_cond_format_unsupported_time_period(), target);
  }

  // optional bool error_cell_with_no_formula = 13 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_error_cell_with_no_formula(), target);
  }

  // optional bool unsupported_cond_format = 14 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_unsupported_cond_format(), target);
  }

  // optional string original_data_format = 15;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_original_data_format().data(), static_cast<int>(this->_internal_original_data_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.ImportWarningSetArchive.original_data_format");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_original_data_format(), target);
  }

  // optional bool formula_warning_filtered_column_formula_not_copied = 16 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_formula_warning_filtered_column_formula_not_copied(), target);
  }

  // optional bool duration_format_range_changed = 17 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_duration_format_range_changed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ImportWarningSetArchive)
  return target;
}

size_t ImportWarningSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ImportWarningSetArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string original_data_format = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_original_data_format());
    }

    // optional .TST.ImportWarningSetArchive.FormulaImportWarning formula_import_warning = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *formula_import_warning_);
    }

    // optional bool cond_format_above_avg_equal_avg = 2 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool cond_format_above_avg_std_dev = 3 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool cond_format_complex_formula = 4 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool cond_format_contains_errors = 5 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool cond_format_expr = 6 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool cond_format_not_contains_errors = 7 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool cond_format_parameters_not_all_same_type = 8 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool cond_format_stop_if_true = 9 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool cond_format_unsupported_operator = 10 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool cond_format_unsupported_styling = 11 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool cond_format_unsupported_time_period = 12 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool error_cell_with_no_formula = 13 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool unsupported_cond_format = 14 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool formula_warning_filtered_column_formula_not_copied = 16 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  // optional bool duration_format_range_changed = 17 [default = false];
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportWarningSetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImportWarningSetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportWarningSetArchive::GetClassData() const { return &_class_data_; }

void ImportWarningSetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ImportWarningSetArchive *>(to)->MergeFrom(
      static_cast<const ImportWarningSetArchive &>(from));
}


void ImportWarningSetArchive::MergeFrom(const ImportWarningSetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ImportWarningSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_original_data_format(from._internal_original_data_format());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_formula_import_warning()->::TST::ImportWarningSetArchive_FormulaImportWarning::MergeFrom(from._internal_formula_import_warning());
    }
    if (cached_has_bits & 0x00000004u) {
      cond_format_above_avg_equal_avg_ = from.cond_format_above_avg_equal_avg_;
    }
    if (cached_has_bits & 0x00000008u) {
      cond_format_above_avg_std_dev_ = from.cond_format_above_avg_std_dev_;
    }
    if (cached_has_bits & 0x00000010u) {
      cond_format_complex_formula_ = from.cond_format_complex_formula_;
    }
    if (cached_has_bits & 0x00000020u) {
      cond_format_contains_errors_ = from.cond_format_contains_errors_;
    }
    if (cached_has_bits & 0x00000040u) {
      cond_format_expr_ = from.cond_format_expr_;
    }
    if (cached_has_bits & 0x00000080u) {
      cond_format_not_contains_errors_ = from.cond_format_not_contains_errors_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      cond_format_parameters_not_all_same_type_ = from.cond_format_parameters_not_all_same_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      cond_format_stop_if_true_ = from.cond_format_stop_if_true_;
    }
    if (cached_has_bits & 0x00000400u) {
      cond_format_unsupported_operator_ = from.cond_format_unsupported_operator_;
    }
    if (cached_has_bits & 0x00000800u) {
      cond_format_unsupported_styling_ = from.cond_format_unsupported_styling_;
    }
    if (cached_has_bits & 0x00001000u) {
      cond_format_unsupported_time_period_ = from.cond_format_unsupported_time_period_;
    }
    if (cached_has_bits & 0x00002000u) {
      error_cell_with_no_formula_ = from.error_cell_with_no_formula_;
    }
    if (cached_has_bits & 0x00004000u) {
      unsupported_cond_format_ = from.unsupported_cond_format_;
    }
    if (cached_has_bits & 0x00008000u) {
      formula_warning_filtered_column_formula_not_copied_ = from.formula_warning_filtered_column_formula_not_copied_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_duration_format_range_changed(from._internal_duration_format_range_changed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportWarningSetArchive::CopyFrom(const ImportWarningSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ImportWarningSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportWarningSetArchive::IsInitialized() const {
  if (_internal_has_formula_import_warning()) {
    if (!formula_import_warning_->IsInitialized()) return false;
  }
  return true;
}

void ImportWarningSetArchive::InternalSwap(ImportWarningSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &original_data_format_, GetArenaForAllocation(),
      &other->original_data_format_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImportWarningSetArchive, duration_format_range_changed_)
      + sizeof(ImportWarningSetArchive::duration_format_range_changed_)
      - PROTOBUF_FIELD_OFFSET(ImportWarningSetArchive, formula_import_warning_)>(
          reinterpret_cast<char*>(&formula_import_warning_),
          reinterpret_cast<char*>(&other->formula_import_warning_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportWarningSetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[15]);
}

// ===================================================================

class CellRefImportWarningSetPairArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellRefImportWarningSetPairArchive>()._has_bits_);
  static const ::TSCE::CellReferenceArchive& cell_ref(const CellRefImportWarningSetPairArchive* msg);
  static void set_has_cell_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::ImportWarningSetArchive& warning_set(const CellRefImportWarningSetPairArchive* msg);
  static void set_has_warning_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::CellReferenceArchive&
CellRefImportWarningSetPairArchive::_Internal::cell_ref(const CellRefImportWarningSetPairArchive* msg) {
  return *msg->cell_ref_;
}
const ::TST::ImportWarningSetArchive&
CellRefImportWarningSetPairArchive::_Internal::warning_set(const CellRefImportWarningSetPairArchive* msg) {
  return *msg->warning_set_;
}
void CellRefImportWarningSetPairArchive::clear_cell_ref() {
  if (cell_ref_ != nullptr) cell_ref_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CellRefImportWarningSetPairArchive::CellRefImportWarningSetPairArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CellRefImportWarningSetPairArchive)
}
CellRefImportWarningSetPairArchive::CellRefImportWarningSetPairArchive(const CellRefImportWarningSetPairArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_ref()) {
    cell_ref_ = new ::TSCE::CellReferenceArchive(*from.cell_ref_);
  } else {
    cell_ref_ = nullptr;
  }
  if (from._internal_has_warning_set()) {
    warning_set_ = new ::TST::ImportWarningSetArchive(*from.warning_set_);
  } else {
    warning_set_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CellRefImportWarningSetPairArchive)
}

inline void CellRefImportWarningSetPairArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_ref_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&warning_set_) -
    reinterpret_cast<char*>(&cell_ref_)) + sizeof(warning_set_));
}

CellRefImportWarningSetPairArchive::~CellRefImportWarningSetPairArchive() {
  // @@protoc_insertion_point(destructor:TST.CellRefImportWarningSetPairArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellRefImportWarningSetPairArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cell_ref_;
  if (this != internal_default_instance()) delete warning_set_;
}

void CellRefImportWarningSetPairArchive::ArenaDtor(void* object) {
  CellRefImportWarningSetPairArchive* _this = reinterpret_cast< CellRefImportWarningSetPairArchive* >(object);
  (void)_this;
}
void CellRefImportWarningSetPairArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellRefImportWarningSetPairArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellRefImportWarningSetPairArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellRefImportWarningSetPairArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cell_ref_ != nullptr);
      cell_ref_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(warning_set_ != nullptr);
      warning_set_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellRefImportWarningSetPairArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellReferenceArchive cell_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.ImportWarningSetArchive warning_set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_warning_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellRefImportWarningSetPairArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellRefImportWarningSetPairArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.CellReferenceArchive cell_ref = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cell_ref(this), target, stream);
  }

  // optional .TST.ImportWarningSetArchive warning_set = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::warning_set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellRefImportWarningSetPairArchive)
  return target;
}

size_t CellRefImportWarningSetPairArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellRefImportWarningSetPairArchive)
  size_t total_size = 0;

  // required .TSCE.CellReferenceArchive cell_ref = 1;
  if (_internal_has_cell_ref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_ref_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TST.ImportWarningSetArchive warning_set = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *warning_set_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellRefImportWarningSetPairArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellRefImportWarningSetPairArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellRefImportWarningSetPairArchive::GetClassData() const { return &_class_data_; }

void CellRefImportWarningSetPairArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CellRefImportWarningSetPairArchive *>(to)->MergeFrom(
      static_cast<const CellRefImportWarningSetPairArchive &>(from));
}


void CellRefImportWarningSetPairArchive::MergeFrom(const CellRefImportWarningSetPairArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CellRefImportWarningSetPairArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cell_ref()->::TSCE::CellReferenceArchive::MergeFrom(from._internal_cell_ref());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_warning_set()->::TST::ImportWarningSetArchive::MergeFrom(from._internal_warning_set());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellRefImportWarningSetPairArchive::CopyFrom(const CellRefImportWarningSetPairArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellRefImportWarningSetPairArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRefImportWarningSetPairArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_cell_ref()) {
    if (!cell_ref_->IsInitialized()) return false;
  }
  if (_internal_has_warning_set()) {
    if (!warning_set_->IsInitialized()) return false;
  }
  return true;
}

void CellRefImportWarningSetPairArchive::InternalSwap(CellRefImportWarningSetPairArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellRefImportWarningSetPairArchive, warning_set_)
      + sizeof(CellRefImportWarningSetPairArchive::warning_set_)
      - PROTOBUF_FIELD_OFFSET(CellRefImportWarningSetPairArchive, cell_ref_)>(
          reinterpret_cast<char*>(&cell_ref_),
          reinterpret_cast<char*>(&other->cell_ref_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellRefImportWarningSetPairArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[16]);
}

// ===================================================================

class ImportWarningSetByCellRefArchive::_Internal {
 public:
};

ImportWarningSetByCellRefArchive::ImportWarningSetByCellRefArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cellref_warning_set_pair_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ImportWarningSetByCellRefArchive)
}
ImportWarningSetByCellRefArchive::ImportWarningSetByCellRefArchive(const ImportWarningSetByCellRefArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cellref_warning_set_pair_(from.cellref_warning_set_pair_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.ImportWarningSetByCellRefArchive)
}

inline void ImportWarningSetByCellRefArchive::SharedCtor() {
}

ImportWarningSetByCellRefArchive::~ImportWarningSetByCellRefArchive() {
  // @@protoc_insertion_point(destructor:TST.ImportWarningSetByCellRefArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImportWarningSetByCellRefArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ImportWarningSetByCellRefArchive::ArenaDtor(void* object) {
  ImportWarningSetByCellRefArchive* _this = reinterpret_cast< ImportWarningSetByCellRefArchive* >(object);
  (void)_this;
}
void ImportWarningSetByCellRefArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImportWarningSetByCellRefArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImportWarningSetByCellRefArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ImportWarningSetByCellRefArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cellref_warning_set_pair_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportWarningSetByCellRefArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.CellRefImportWarningSetPairArchive cellref_warning_set_pair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cellref_warning_set_pair(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImportWarningSetByCellRefArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ImportWarningSetByCellRefArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.CellRefImportWarningSetPairArchive cellref_warning_set_pair = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cellref_warning_set_pair_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cellref_warning_set_pair(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ImportWarningSetByCellRefArchive)
  return target;
}

size_t ImportWarningSetByCellRefArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ImportWarningSetByCellRefArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.CellRefImportWarningSetPairArchive cellref_warning_set_pair = 1;
  total_size += 1UL * this->_internal_cellref_warning_set_pair_size();
  for (const auto& msg : this->cellref_warning_set_pair_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportWarningSetByCellRefArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImportWarningSetByCellRefArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportWarningSetByCellRefArchive::GetClassData() const { return &_class_data_; }

void ImportWarningSetByCellRefArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ImportWarningSetByCellRefArchive *>(to)->MergeFrom(
      static_cast<const ImportWarningSetByCellRefArchive &>(from));
}


void ImportWarningSetByCellRefArchive::MergeFrom(const ImportWarningSetByCellRefArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ImportWarningSetByCellRefArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cellref_warning_set_pair_.MergeFrom(from.cellref_warning_set_pair_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportWarningSetByCellRefArchive::CopyFrom(const ImportWarningSetByCellRefArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ImportWarningSetByCellRefArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportWarningSetByCellRefArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cellref_warning_set_pair_)) return false;
  return true;
}

void ImportWarningSetByCellRefArchive::InternalSwap(ImportWarningSetByCellRefArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cellref_warning_set_pair_.InternalSwap(&other->cellref_warning_set_pair_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportWarningSetByCellRefArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[17]);
}

// ===================================================================

class TableDataList_ListEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<TableDataList_ListEntry>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_refcount(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& reference(const TableDataList_ListEntry* msg);
  static void set_has_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::FormulaArchive& formula(const TableDataList_ListEntry* msg);
  static void set_has_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSK::FormatStructArchive& format(const TableDataList_ListEntry* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSK::CustomFormatArchive& custom_format(const TableDataList_ListEntry* msg);
  static void set_has_custom_format(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& rich_text_payload(const TableDataList_ListEntry* msg);
  static void set_has_rich_text_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& comment_storage(const TableDataList_ListEntry* msg);
  static void set_has_comment_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TST::ImportWarningSetArchive& import_warning_set(const TableDataList_ListEntry* msg);
  static void set_has_import_warning_set(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TST::CellSpecArchive& cell_spec(const TableDataList_ListEntry* msg);
  static void set_has_cell_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000600) ^ 0x00000600) != 0;
  }
};

const ::TSP::Reference&
TableDataList_ListEntry::_Internal::reference(const TableDataList_ListEntry* msg) {
  return *msg->reference_;
}
const ::TSCE::FormulaArchive&
TableDataList_ListEntry::_Internal::formula(const TableDataList_ListEntry* msg) {
  return *msg->formula_;
}
const ::TSK::FormatStructArchive&
TableDataList_ListEntry::_Internal::format(const TableDataList_ListEntry* msg) {
  return *msg->format_;
}
const ::TSK::CustomFormatArchive&
TableDataList_ListEntry::_Internal::custom_format(const TableDataList_ListEntry* msg) {
  return *msg->custom_format_;
}
const ::TSP::Reference&
TableDataList_ListEntry::_Internal::rich_text_payload(const TableDataList_ListEntry* msg) {
  return *msg->rich_text_payload_;
}
const ::TSP::Reference&
TableDataList_ListEntry::_Internal::comment_storage(const TableDataList_ListEntry* msg) {
  return *msg->comment_storage_;
}
const ::TST::ImportWarningSetArchive&
TableDataList_ListEntry::_Internal::import_warning_set(const TableDataList_ListEntry* msg) {
  return *msg->import_warning_set_;
}
const ::TST::CellSpecArchive&
TableDataList_ListEntry::_Internal::cell_spec(const TableDataList_ListEntry* msg) {
  return *msg->cell_spec_;
}
void TableDataList_ListEntry::clear_reference() {
  if (reference_ != nullptr) reference_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TableDataList_ListEntry::clear_formula() {
  if (formula_ != nullptr) formula_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void TableDataList_ListEntry::clear_format() {
  if (format_ != nullptr) format_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void TableDataList_ListEntry::clear_custom_format() {
  if (custom_format_ != nullptr) custom_format_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void TableDataList_ListEntry::clear_rich_text_payload() {
  if (rich_text_payload_ != nullptr) rich_text_payload_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void TableDataList_ListEntry::clear_comment_storage() {
  if (comment_storage_ != nullptr) comment_storage_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
TableDataList_ListEntry::TableDataList_ListEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TableDataList.ListEntry)
}
TableDataList_ListEntry::TableDataList_ListEntry(const TableDataList_ListEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string()) {
    string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_reference()) {
    reference_ = new ::TSP::Reference(*from.reference_);
  } else {
    reference_ = nullptr;
  }
  if (from._internal_has_formula()) {
    formula_ = new ::TSCE::FormulaArchive(*from.formula_);
  } else {
    formula_ = nullptr;
  }
  if (from._internal_has_format()) {
    format_ = new ::TSK::FormatStructArchive(*from.format_);
  } else {
    format_ = nullptr;
  }
  if (from._internal_has_custom_format()) {
    custom_format_ = new ::TSK::CustomFormatArchive(*from.custom_format_);
  } else {
    custom_format_ = nullptr;
  }
  if (from._internal_has_rich_text_payload()) {
    rich_text_payload_ = new ::TSP::Reference(*from.rich_text_payload_);
  } else {
    rich_text_payload_ = nullptr;
  }
  if (from._internal_has_comment_storage()) {
    comment_storage_ = new ::TSP::Reference(*from.comment_storage_);
  } else {
    comment_storage_ = nullptr;
  }
  if (from._internal_has_import_warning_set()) {
    import_warning_set_ = new ::TST::ImportWarningSetArchive(*from.import_warning_set_);
  } else {
    import_warning_set_ = nullptr;
  }
  if (from._internal_has_cell_spec()) {
    cell_spec_ = new ::TST::CellSpecArchive(*from.cell_spec_);
  } else {
    cell_spec_ = nullptr;
  }
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&refcount_) -
    reinterpret_cast<char*>(&key_)) + sizeof(refcount_));
  // @@protoc_insertion_point(copy_constructor:TST.TableDataList.ListEntry)
}

inline void TableDataList_ListEntry::SharedCtor() {
string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&refcount_) -
    reinterpret_cast<char*>(&reference_)) + sizeof(refcount_));
}

TableDataList_ListEntry::~TableDataList_ListEntry() {
  // @@protoc_insertion_point(destructor:TST.TableDataList.ListEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableDataList_ListEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reference_;
  if (this != internal_default_instance()) delete formula_;
  if (this != internal_default_instance()) delete format_;
  if (this != internal_default_instance()) delete custom_format_;
  if (this != internal_default_instance()) delete rich_text_payload_;
  if (this != internal_default_instance()) delete comment_storage_;
  if (this != internal_default_instance()) delete import_warning_set_;
  if (this != internal_default_instance()) delete cell_spec_;
}

void TableDataList_ListEntry::ArenaDtor(void* object) {
  TableDataList_ListEntry* _this = reinterpret_cast< TableDataList_ListEntry* >(object);
  (void)_this;
}
void TableDataList_ListEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableDataList_ListEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableDataList_ListEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableDataList.ListEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(reference_ != nullptr);
      reference_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(formula_ != nullptr);
      formula_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(format_ != nullptr);
      format_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(custom_format_ != nullptr);
      custom_format_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(rich_text_payload_ != nullptr);
      rich_text_payload_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(comment_storage_ != nullptr);
      comment_storage_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(import_warning_set_ != nullptr);
      import_warning_set_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(cell_spec_ != nullptr);
    cell_spec_->Clear();
  }
  if (cached_has_bits & 0x00000600u) {
    ::memset(&key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&refcount_) -
        reinterpret_cast<char*>(&key_)) + sizeof(refcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableDataList_ListEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_key(&has_bits);
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 refcount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_refcount(&has_bits);
          refcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.TableDataList.ListEntry.string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.FormulaArchive formula = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive format = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.CustomFormatArchive custom_format = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference rich_text_payload = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_rich_text_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference comment_storage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_comment_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.ImportWarningSetArchive import_warning_set = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_import_warning_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellSpecArchive cell_spec = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableDataList_ListEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableDataList.ListEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 key = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key(), target);
  }

  // required uint32 refcount = 2;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_refcount(), target);
  }

  // optional string string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.TableDataList.ListEntry.string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_string(), target);
  }

  // optional .TSP.Reference reference = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reference(this), target, stream);
  }

  // optional .TSCE.FormulaArchive formula = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::formula(this), target, stream);
  }

  // optional .TSK.FormatStructArchive format = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::format(this), target, stream);
  }

  // optional .TSK.CustomFormatArchive custom_format = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::custom_format(this), target, stream);
  }

  // optional .TSP.Reference rich_text_payload = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::rich_text_payload(this), target, stream);
  }

  // optional .TSP.Reference comment_storage = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::comment_storage(this), target, stream);
  }

  // optional .TST.ImportWarningSetArchive import_warning_set = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::import_warning_set(this), target, stream);
  }

  // optional .TST.CellSpecArchive cell_spec = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::cell_spec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableDataList.ListEntry)
  return target;
}

size_t TableDataList_ListEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableDataList.ListEntry)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required uint32 key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key());
  }

  if (_internal_has_refcount()) {
    // required uint32 refcount = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_refcount());
  }

  return total_size;
}
size_t TableDataList_ListEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableDataList.ListEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000600) ^ 0x00000600) == 0) {  // All required fields are present.
    // required uint32 key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key());

    // required uint32 refcount = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_refcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string string = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
    }

    // optional .TSP.Reference reference = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_);
    }

    // optional .TSCE.FormulaArchive formula = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *formula_);
    }

    // optional .TSK.FormatStructArchive format = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *format_);
    }

    // optional .TSK.CustomFormatArchive custom_format = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *custom_format_);
    }

    // optional .TSP.Reference rich_text_payload = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rich_text_payload_);
    }

    // optional .TSP.Reference comment_storage = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *comment_storage_);
    }

    // optional .TST.ImportWarningSetArchive import_warning_set = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *import_warning_set_);
    }

  }
  // optional .TST.CellSpecArchive cell_spec = 12;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_spec_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableDataList_ListEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableDataList_ListEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableDataList_ListEntry::GetClassData() const { return &_class_data_; }

void TableDataList_ListEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableDataList_ListEntry *>(to)->MergeFrom(
      static_cast<const TableDataList_ListEntry &>(from));
}


void TableDataList_ListEntry::MergeFrom(const TableDataList_ListEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TableDataList.ListEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string(from._internal_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_reference()->::TSP::Reference::MergeFrom(from._internal_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_formula()->::TSCE::FormulaArchive::MergeFrom(from._internal_formula());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_format());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_custom_format()->::TSK::CustomFormatArchive::MergeFrom(from._internal_custom_format());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_rich_text_payload()->::TSP::Reference::MergeFrom(from._internal_rich_text_payload());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_comment_storage()->::TSP::Reference::MergeFrom(from._internal_comment_storage());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_import_warning_set()->::TST::ImportWarningSetArchive::MergeFrom(from._internal_import_warning_set());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_cell_spec()->::TST::CellSpecArchive::MergeFrom(from._internal_cell_spec());
    }
    if (cached_has_bits & 0x00000200u) {
      key_ = from.key_;
    }
    if (cached_has_bits & 0x00000400u) {
      refcount_ = from.refcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableDataList_ListEntry::CopyFrom(const TableDataList_ListEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableDataList.ListEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableDataList_ListEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_reference()) {
    if (!reference_->IsInitialized()) return false;
  }
  if (_internal_has_formula()) {
    if (!formula_->IsInitialized()) return false;
  }
  if (_internal_has_format()) {
    if (!format_->IsInitialized()) return false;
  }
  if (_internal_has_custom_format()) {
    if (!custom_format_->IsInitialized()) return false;
  }
  if (_internal_has_rich_text_payload()) {
    if (!rich_text_payload_->IsInitialized()) return false;
  }
  if (_internal_has_comment_storage()) {
    if (!comment_storage_->IsInitialized()) return false;
  }
  if (_internal_has_import_warning_set()) {
    if (!import_warning_set_->IsInitialized()) return false;
  }
  if (_internal_has_cell_spec()) {
    if (!cell_spec_->IsInitialized()) return false;
  }
  return true;
}

void TableDataList_ListEntry::InternalSwap(TableDataList_ListEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &string_, GetArenaForAllocation(),
      &other->string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableDataList_ListEntry, refcount_)
      + sizeof(TableDataList_ListEntry::refcount_)
      - PROTOBUF_FIELD_OFFSET(TableDataList_ListEntry, reference_)>(
          reinterpret_cast<char*>(&reference_),
          reinterpret_cast<char*>(&other->reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableDataList_ListEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[18]);
}

// ===================================================================

class TableDataList::_Internal {
 public:
  using HasBits = decltype(std::declval<TableDataList>()._has_bits_);
  static void set_has_listtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nextlistid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

void TableDataList::clear_segments() {
  segments_.Clear();
}
TableDataList::TableDataList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena),
  segments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TableDataList)
}
TableDataList::TableDataList(const TableDataList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nextlistid_, &from.nextlistid_,
    static_cast<size_t>(reinterpret_cast<char*>(&listtype_) -
    reinterpret_cast<char*>(&nextlistid_)) + sizeof(listtype_));
  // @@protoc_insertion_point(copy_constructor:TST.TableDataList)
}

inline void TableDataList::SharedCtor() {
nextlistid_ = 0u;
listtype_ = 1;
}

TableDataList::~TableDataList() {
  // @@protoc_insertion_point(destructor:TST.TableDataList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableDataList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TableDataList::ArenaDtor(void* object) {
  TableDataList* _this = reinterpret_cast< TableDataList* >(object);
  (void)_this;
}
void TableDataList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableDataList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableDataList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  segments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    nextlistid_ = 0u;
    listtype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableDataList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableDataList.ListType listType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableDataList_ListType_IsValid(val))) {
            _internal_set_listtype(static_cast<::TST::TableDataList_ListType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 nextListID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nextlistid(&has_bits);
          nextlistid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.TableDataList.ListEntry entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference segments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableDataList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableDataList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableDataList.ListType listType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_listtype(), target);
  }

  // required uint32 nextListID = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nextlistid(), target);
  }

  // repeated .TST.TableDataList.ListEntry entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_entries(i), target, stream);
  }

  // repeated .TSP.Reference segments = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_segments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableDataList)
  return target;
}

size_t TableDataList::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableDataList)
  size_t total_size = 0;

  if (_internal_has_nextlistid()) {
    // required uint32 nextListID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nextlistid());
  }

  if (_internal_has_listtype()) {
    // required .TST.TableDataList.ListType listType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_listtype());
  }

  return total_size;
}
size_t TableDataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableDataList)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 nextListID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nextlistid());

    // required .TST.TableDataList.ListType listType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_listtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.TableDataList.ListEntry entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference segments = 4;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableDataList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableDataList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableDataList::GetClassData() const { return &_class_data_; }

void TableDataList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableDataList *>(to)->MergeFrom(
      static_cast<const TableDataList &>(from));
}


void TableDataList::MergeFrom(const TableDataList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TableDataList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  segments_.MergeFrom(from.segments_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      nextlistid_ = from.nextlistid_;
    }
    if (cached_has_bits & 0x00000002u) {
      listtype_ = from.listtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableDataList::CopyFrom(const TableDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableDataList::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(segments_)) return false;
  return true;
}

void TableDataList::InternalSwap(TableDataList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  segments_.InternalSwap(&other->segments_);
  swap(nextlistid_, other->nextlistid_);
  swap(listtype_, other->listtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableDataList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[19]);
}

// ===================================================================

class TableDataListSegment::_Internal {
 public:
  using HasBits = decltype(std::declval<TableDataListSegment>()._has_bits_);
  static void set_has_list_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Range& key_range(const TableDataListSegment* msg);
  static void set_has_key_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Range&
TableDataListSegment::_Internal::key_range(const TableDataListSegment* msg) {
  return *msg->key_range_;
}
void TableDataListSegment::clear_key_range() {
  if (key_range_ != nullptr) key_range_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TableDataListSegment::TableDataListSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TableDataListSegment)
}
TableDataListSegment::TableDataListSegment(const TableDataListSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key_range()) {
    key_range_ = new ::TSP::Range(*from.key_range_);
  } else {
    key_range_ = nullptr;
  }
  list_type_ = from.list_type_;
  // @@protoc_insertion_point(copy_constructor:TST.TableDataListSegment)
}

inline void TableDataListSegment::SharedCtor() {
key_range_ = nullptr;
list_type_ = 1;
}

TableDataListSegment::~TableDataListSegment() {
  // @@protoc_insertion_point(destructor:TST.TableDataListSegment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableDataListSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete key_range_;
}

void TableDataListSegment::ArenaDtor(void* object) {
  TableDataListSegment* _this = reinterpret_cast< TableDataListSegment* >(object);
  (void)_this;
}
void TableDataListSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableDataListSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableDataListSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableDataListSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(key_range_ != nullptr);
      key_range_->Clear();
    }
    list_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableDataListSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableDataList.ListType list_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableDataList_ListType_IsValid(val))) {
            _internal_set_list_type(static_cast<::TST::TableDataList_ListType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .TSP.Range key_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.TableDataList.ListEntry entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableDataListSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableDataListSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableDataList.ListType list_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_list_type(), target);
  }

  // required .TSP.Range key_range = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key_range(this), target, stream);
  }

  // repeated .TST.TableDataList.ListEntry entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableDataListSegment)
  return target;
}

size_t TableDataListSegment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableDataListSegment)
  size_t total_size = 0;

  if (_internal_has_key_range()) {
    // required .TSP.Range key_range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_range_);
  }

  if (_internal_has_list_type()) {
    // required .TST.TableDataList.ListType list_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_list_type());
  }

  return total_size;
}
size_t TableDataListSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableDataListSegment)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Range key_range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_range_);

    // required .TST.TableDataList.ListType list_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_list_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.TableDataList.ListEntry entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableDataListSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableDataListSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableDataListSegment::GetClassData() const { return &_class_data_; }

void TableDataListSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableDataListSegment *>(to)->MergeFrom(
      static_cast<const TableDataListSegment &>(from));
}


void TableDataListSegment::MergeFrom(const TableDataListSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TableDataListSegment)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_key_range()->::TSP::Range::MergeFrom(from._internal_key_range());
    }
    if (cached_has_bits & 0x00000002u) {
      list_type_ = from.list_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableDataListSegment::CopyFrom(const TableDataListSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableDataListSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableDataListSegment::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  if (_internal_has_key_range()) {
    if (!key_range_->IsInitialized()) return false;
  }
  return true;
}

void TableDataListSegment::InternalSwap(TableDataListSegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  swap(key_range_, other->key_range_);
  swap(list_type_, other->list_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableDataListSegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[20]);
}

// ===================================================================

class TableRBTree_Node::_Internal {
 public:
  using HasBits = decltype(std::declval<TableRBTree_Node>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

TableRBTree_Node::TableRBTree_Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TableRBTree.Node)
}
TableRBTree_Node::TableRBTree_Node(const TableRBTree_Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:TST.TableRBTree.Node)
}

inline void TableRBTree_Node::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

TableRBTree_Node::~TableRBTree_Node() {
  // @@protoc_insertion_point(destructor:TST.TableRBTree.Node)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableRBTree_Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TableRBTree_Node::ArenaDtor(void* object) {
  TableRBTree_Node* _this = reinterpret_cast< TableRBTree_Node* >(object);
  (void)_this;
}
void TableRBTree_Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableRBTree_Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableRBTree_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableRBTree.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&key_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableRBTree_Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_key(&has_bits);
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableRBTree_Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableRBTree.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key(), target);
  }

  // required uint32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableRBTree.Node)
  return target;
}

size_t TableRBTree_Node::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableRBTree.Node)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required uint32 key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key());
  }

  if (_internal_has_value()) {
    // required uint32 value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  return total_size;
}
size_t TableRBTree_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableRBTree.Node)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key());

    // required uint32 value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableRBTree_Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableRBTree_Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableRBTree_Node::GetClassData() const { return &_class_data_; }

void TableRBTree_Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableRBTree_Node *>(to)->MergeFrom(
      static_cast<const TableRBTree_Node &>(from));
}


void TableRBTree_Node::MergeFrom(const TableRBTree_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TableRBTree.Node)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_ = from.key_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableRBTree_Node::CopyFrom(const TableRBTree_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableRBTree.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableRBTree_Node::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TableRBTree_Node::InternalSwap(TableRBTree_Node* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableRBTree_Node, value_)
      + sizeof(TableRBTree_Node::value_)
      - PROTOBUF_FIELD_OFFSET(TableRBTree_Node, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableRBTree_Node::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[21]);
}

// ===================================================================

class TableRBTree::_Internal {
 public:
};

TableRBTree::TableRBTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nodes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TableRBTree)
}
TableRBTree::TableRBTree(const TableRBTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.TableRBTree)
}

inline void TableRBTree::SharedCtor() {
}

TableRBTree::~TableRBTree() {
  // @@protoc_insertion_point(destructor:TST.TableRBTree)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableRBTree::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TableRBTree::ArenaDtor(void* object) {
  TableRBTree* _this = reinterpret_cast< TableRBTree* >(object);
  (void)_this;
}
void TableRBTree::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableRBTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableRBTree::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableRBTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableRBTree::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.TableRBTree.Node nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableRBTree::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableRBTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.TableRBTree.Node nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableRBTree)
  return target;
}

size_t TableRBTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableRBTree)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.TableRBTree.Node nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableRBTree::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableRBTree::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableRBTree::GetClassData() const { return &_class_data_; }

void TableRBTree::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableRBTree *>(to)->MergeFrom(
      static_cast<const TableRBTree &>(from));
}


void TableRBTree::MergeFrom(const TableRBTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TableRBTree)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableRBTree::CopyFrom(const TableRBTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableRBTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableRBTree::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(nodes_)) return false;
  return true;
}

void TableRBTree::InternalSwap(TableRBTree* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableRBTree::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[22]);
}

// ===================================================================

class HeaderStorageBucket_Header::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderStorageBucket_Header>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hidingstate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_numberofcells(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& cell_style(const HeaderStorageBucket_Header* msg);
  static void set_has_cell_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& text_style(const HeaderStorageBucket_Header* msg);
  static void set_has_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003c) ^ 0x0000003c) != 0;
  }
};

const ::TSP::Reference&
HeaderStorageBucket_Header::_Internal::cell_style(const HeaderStorageBucket_Header* msg) {
  return *msg->cell_style_;
}
const ::TSP::Reference&
HeaderStorageBucket_Header::_Internal::text_style(const HeaderStorageBucket_Header* msg) {
  return *msg->text_style_;
}
void HeaderStorageBucket_Header::clear_cell_style() {
  if (cell_style_ != nullptr) cell_style_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void HeaderStorageBucket_Header::clear_text_style() {
  if (text_style_ != nullptr) text_style_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
HeaderStorageBucket_Header::HeaderStorageBucket_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.HeaderStorageBucket.Header)
}
HeaderStorageBucket_Header::HeaderStorageBucket_Header(const HeaderStorageBucket_Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_style()) {
    cell_style_ = new ::TSP::Reference(*from.cell_style_);
  } else {
    cell_style_ = nullptr;
  }
  if (from._internal_has_text_style()) {
    text_style_ = new ::TSP::Reference(*from.text_style_);
  } else {
    text_style_ = nullptr;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&numberofcells_) -
    reinterpret_cast<char*>(&index_)) + sizeof(numberofcells_));
  // @@protoc_insertion_point(copy_constructor:TST.HeaderStorageBucket.Header)
}

inline void HeaderStorageBucket_Header::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&numberofcells_) -
    reinterpret_cast<char*>(&cell_style_)) + sizeof(numberofcells_));
}

HeaderStorageBucket_Header::~HeaderStorageBucket_Header() {
  // @@protoc_insertion_point(destructor:TST.HeaderStorageBucket.Header)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeaderStorageBucket_Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cell_style_;
  if (this != internal_default_instance()) delete text_style_;
}

void HeaderStorageBucket_Header::ArenaDtor(void* object) {
  HeaderStorageBucket_Header* _this = reinterpret_cast< HeaderStorageBucket_Header* >(object);
  (void)_this;
}
void HeaderStorageBucket_Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeaderStorageBucket_Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeaderStorageBucket_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HeaderStorageBucket.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cell_style_ != nullptr);
      cell_style_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(text_style_ != nullptr);
      text_style_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numberofcells_) -
        reinterpret_cast<char*>(&index_)) + sizeof(numberofcells_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderStorageBucket_Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required uint32 hidingState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hidingstate(&has_bits);
          hidingstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 numberOfCells = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_numberofcells(&has_bits);
          numberofcells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference cell_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference text_style = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeaderStorageBucket_Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HeaderStorageBucket.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // required float size = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_size(), target);
  }

  // required uint32 hidingState = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hidingstate(), target);
  }

  // required uint32 numberOfCells = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_numberofcells(), target);
  }

  // optional .TSP.Reference cell_style = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cell_style(this), target, stream);
  }

  // optional .TSP.Reference text_style = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::text_style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HeaderStorageBucket.Header)
  return target;
}

size_t HeaderStorageBucket_Header::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.HeaderStorageBucket.Header)
  size_t total_size = 0;

  if (_internal_has_index()) {
    // required uint32 index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (_internal_has_size()) {
    // required float size = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_hidingstate()) {
    // required uint32 hidingState = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hidingstate());
  }

  if (_internal_has_numberofcells()) {
    // required uint32 numberOfCells = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numberofcells());
  }

  return total_size;
}
size_t HeaderStorageBucket_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HeaderStorageBucket.Header)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required uint32 index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());

    // required float size = 2;
    total_size += 1 + 4;

    // required uint32 hidingState = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hidingstate());

    // required uint32 numberOfCells = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numberofcells());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference cell_style = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_style_);
    }

    // optional .TSP.Reference text_style = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_style_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderStorageBucket_Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeaderStorageBucket_Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderStorageBucket_Header::GetClassData() const { return &_class_data_; }

void HeaderStorageBucket_Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HeaderStorageBucket_Header *>(to)->MergeFrom(
      static_cast<const HeaderStorageBucket_Header &>(from));
}


void HeaderStorageBucket_Header::MergeFrom(const HeaderStorageBucket_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.HeaderStorageBucket.Header)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cell_style()->::TSP::Reference::MergeFrom(from._internal_cell_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_text_style()->::TSP::Reference::MergeFrom(from._internal_text_style());
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000008u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000010u) {
      hidingstate_ = from.hidingstate_;
    }
    if (cached_has_bits & 0x00000020u) {
      numberofcells_ = from.numberofcells_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderStorageBucket_Header::CopyFrom(const HeaderStorageBucket_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HeaderStorageBucket.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderStorageBucket_Header::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_cell_style()) {
    if (!cell_style_->IsInitialized()) return false;
  }
  if (_internal_has_text_style()) {
    if (!text_style_->IsInitialized()) return false;
  }
  return true;
}

void HeaderStorageBucket_Header::InternalSwap(HeaderStorageBucket_Header* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeaderStorageBucket_Header, numberofcells_)
      + sizeof(HeaderStorageBucket_Header::numberofcells_)
      - PROTOBUF_FIELD_OFFSET(HeaderStorageBucket_Header, cell_style_)>(
          reinterpret_cast<char*>(&cell_style_),
          reinterpret_cast<char*>(&other->cell_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderStorageBucket_Header::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[23]);
}

// ===================================================================

class HeaderStorageBucket::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderStorageBucket>()._has_bits_);
  static void set_has_buckethashfunction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

HeaderStorageBucket::HeaderStorageBucket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  headers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.HeaderStorageBucket)
}
HeaderStorageBucket::HeaderStorageBucket(const HeaderStorageBucket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buckethashfunction_ = from.buckethashfunction_;
  // @@protoc_insertion_point(copy_constructor:TST.HeaderStorageBucket)
}

inline void HeaderStorageBucket::SharedCtor() {
buckethashfunction_ = 0u;
}

HeaderStorageBucket::~HeaderStorageBucket() {
  // @@protoc_insertion_point(destructor:TST.HeaderStorageBucket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeaderStorageBucket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeaderStorageBucket::ArenaDtor(void* object) {
  HeaderStorageBucket* _this = reinterpret_cast< HeaderStorageBucket* >(object);
  (void)_this;
}
void HeaderStorageBucket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeaderStorageBucket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeaderStorageBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HeaderStorageBucket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  buckethashfunction_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderStorageBucket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 bucketHashFunction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_buckethashfunction(&has_bits);
          buckethashfunction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.HeaderStorageBucket.Header headers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeaderStorageBucket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HeaderStorageBucket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 bucketHashFunction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_buckethashfunction(), target);
  }

  // repeated .TST.HeaderStorageBucket.Header headers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_headers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HeaderStorageBucket)
  return target;
}

size_t HeaderStorageBucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HeaderStorageBucket)
  size_t total_size = 0;

  // required uint32 bucketHashFunction = 1;
  if (_internal_has_buckethashfunction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buckethashfunction());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.HeaderStorageBucket.Header headers = 2;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderStorageBucket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeaderStorageBucket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderStorageBucket::GetClassData() const { return &_class_data_; }

void HeaderStorageBucket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HeaderStorageBucket *>(to)->MergeFrom(
      static_cast<const HeaderStorageBucket &>(from));
}


void HeaderStorageBucket::MergeFrom(const HeaderStorageBucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.HeaderStorageBucket)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (from._internal_has_buckethashfunction()) {
    _internal_set_buckethashfunction(from._internal_buckethashfunction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderStorageBucket::CopyFrom(const HeaderStorageBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HeaderStorageBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderStorageBucket::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(headers_)) return false;
  return true;
}

void HeaderStorageBucket::InternalSwap(HeaderStorageBucket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  headers_.InternalSwap(&other->headers_);
  swap(buckethashfunction_, other->buckethashfunction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderStorageBucket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[24]);
}

// ===================================================================

class HeaderStorage::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderStorage>()._has_bits_);
  static void set_has_buckethashfunction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

void HeaderStorage::clear_buckets() {
  buckets_.Clear();
}
HeaderStorage::HeaderStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  buckets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.HeaderStorage)
}
HeaderStorage::HeaderStorage(const HeaderStorage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      buckets_(from.buckets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buckethashfunction_ = from.buckethashfunction_;
  // @@protoc_insertion_point(copy_constructor:TST.HeaderStorage)
}

inline void HeaderStorage::SharedCtor() {
buckethashfunction_ = 0u;
}

HeaderStorage::~HeaderStorage() {
  // @@protoc_insertion_point(destructor:TST.HeaderStorage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeaderStorage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeaderStorage::ArenaDtor(void* object) {
  HeaderStorage* _this = reinterpret_cast< HeaderStorage* >(object);
  (void)_this;
}
void HeaderStorage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeaderStorage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeaderStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HeaderStorage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buckets_.Clear();
  buckethashfunction_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderStorage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 bucketHashFunction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_buckethashfunction(&has_bits);
          buckethashfunction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference buckets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buckets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeaderStorage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HeaderStorage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 bucketHashFunction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_buckethashfunction(), target);
  }

  // repeated .TSP.Reference buckets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buckets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_buckets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HeaderStorage)
  return target;
}

size_t HeaderStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HeaderStorage)
  size_t total_size = 0;

  // required uint32 bucketHashFunction = 1;
  if (_internal_has_buckethashfunction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buckethashfunction());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference buckets = 2;
  total_size += 1UL * this->_internal_buckets_size();
  for (const auto& msg : this->buckets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderStorage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeaderStorage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderStorage::GetClassData() const { return &_class_data_; }

void HeaderStorage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HeaderStorage *>(to)->MergeFrom(
      static_cast<const HeaderStorage &>(from));
}


void HeaderStorage::MergeFrom(const HeaderStorage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.HeaderStorage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buckets_.MergeFrom(from.buckets_);
  if (from._internal_has_buckethashfunction()) {
    _internal_set_buckethashfunction(from._internal_buckethashfunction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderStorage::CopyFrom(const HeaderStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HeaderStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderStorage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(buckets_)) return false;
  return true;
}

void HeaderStorage::InternalSwap(HeaderStorage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  buckets_.InternalSwap(&other->buckets_);
  swap(buckethashfunction_, other->buckethashfunction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderStorage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[25]);
}

// ===================================================================

class DataStore::_Internal {
 public:
  using HasBits = decltype(std::declval<DataStore>()._has_bits_);
  static const ::TST::HeaderStorage& rowheaders(const DataStore* msg);
  static void set_has_rowheaders(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& columnheaders(const DataStore* msg);
  static void set_has_columnheaders(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::TileStorage& tiles(const DataStore* msg);
  static void set_has_tiles(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& stringtable(const DataStore* msg);
  static void set_has_stringtable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& styletable(const DataStore* msg);
  static void set_has_styletable(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& formula_table(const DataStore* msg);
  static void set_has_formula_table(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& formulaerrortable(const DataStore* msg);
  static void set_has_formulaerrortable(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& format_table_pre_bnc(const DataStore* msg);
  static void set_has_format_table_pre_bnc(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& multiplechoicelistformattable(const DataStore* msg);
  static void set_has_multiplechoicelistformattable(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSP::Reference& merge_region_map(const DataStore* msg);
  static void set_has_merge_region_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::Reference& customformattable(const DataStore* msg);
  static void set_has_customformattable(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_nextrowstripid(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_nextcolumnstripid(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TST::TableRBTree& rowtiletree(const DataStore* msg);
  static void set_has_rowtiletree(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TST::TableRBTree& columntiletree(const DataStore* msg);
  static void set_has_columntiletree(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_storage_version_pre_bnc(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSP::Reference& rich_text_table(const DataStore* msg);
  static void set_has_rich_text_table(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::Reference& conditionalstyletable(const DataStore* msg);
  static void set_has_conditionalstyletable(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Reference& commentstoragetable(const DataStore* msg);
  static void set_has_commentstoragetable(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::Reference& importwarningsettable(const DataStore* msg);
  static void set_has_importwarningsettable(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSP::Reference& control_cell_spec_table(const DataStore* msg);
  static void set_has_control_cell_spec_table(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSP::Reference& format_table(const DataStore* msg);
  static void set_has_format_table(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x001801ff) ^ 0x001801ff) != 0;
  }
};

const ::TST::HeaderStorage&
DataStore::_Internal::rowheaders(const DataStore* msg) {
  return *msg->rowheaders_;
}
const ::TSP::Reference&
DataStore::_Internal::columnheaders(const DataStore* msg) {
  return *msg->columnheaders_;
}
const ::TST::TileStorage&
DataStore::_Internal::tiles(const DataStore* msg) {
  return *msg->tiles_;
}
const ::TSP::Reference&
DataStore::_Internal::stringtable(const DataStore* msg) {
  return *msg->stringtable_;
}
const ::TSP::Reference&
DataStore::_Internal::styletable(const DataStore* msg) {
  return *msg->styletable_;
}
const ::TSP::Reference&
DataStore::_Internal::formula_table(const DataStore* msg) {
  return *msg->formula_table_;
}
const ::TSP::Reference&
DataStore::_Internal::formulaerrortable(const DataStore* msg) {
  return *msg->formulaerrortable_;
}
const ::TSP::Reference&
DataStore::_Internal::format_table_pre_bnc(const DataStore* msg) {
  return *msg->format_table_pre_bnc_;
}
const ::TSP::Reference&
DataStore::_Internal::multiplechoicelistformattable(const DataStore* msg) {
  return *msg->multiplechoicelistformattable_;
}
const ::TSP::Reference&
DataStore::_Internal::merge_region_map(const DataStore* msg) {
  return *msg->merge_region_map_;
}
const ::TSP::Reference&
DataStore::_Internal::customformattable(const DataStore* msg) {
  return *msg->customformattable_;
}
const ::TST::TableRBTree&
DataStore::_Internal::rowtiletree(const DataStore* msg) {
  return *msg->rowtiletree_;
}
const ::TST::TableRBTree&
DataStore::_Internal::columntiletree(const DataStore* msg) {
  return *msg->columntiletree_;
}
const ::TSP::Reference&
DataStore::_Internal::rich_text_table(const DataStore* msg) {
  return *msg->rich_text_table_;
}
const ::TSP::Reference&
DataStore::_Internal::conditionalstyletable(const DataStore* msg) {
  return *msg->conditionalstyletable_;
}
const ::TSP::Reference&
DataStore::_Internal::commentstoragetable(const DataStore* msg) {
  return *msg->commentstoragetable_;
}
const ::TSP::Reference&
DataStore::_Internal::importwarningsettable(const DataStore* msg) {
  return *msg->importwarningsettable_;
}
const ::TSP::Reference&
DataStore::_Internal::control_cell_spec_table(const DataStore* msg) {
  return *msg->control_cell_spec_table_;
}
const ::TSP::Reference&
DataStore::_Internal::format_table(const DataStore* msg) {
  return *msg->format_table_;
}
void DataStore::clear_columnheaders() {
  if (columnheaders_ != nullptr) columnheaders_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void DataStore::clear_stringtable() {
  if (stringtable_ != nullptr) stringtable_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void DataStore::clear_styletable() {
  if (styletable_ != nullptr) styletable_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void DataStore::clear_formula_table() {
  if (formula_table_ != nullptr) formula_table_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void DataStore::clear_formulaerrortable() {
  if (formulaerrortable_ != nullptr) formulaerrortable_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void DataStore::clear_format_table_pre_bnc() {
  if (format_table_pre_bnc_ != nullptr) format_table_pre_bnc_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void DataStore::clear_multiplechoicelistformattable() {
  if (multiplechoicelistformattable_ != nullptr) multiplechoicelistformattable_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void DataStore::clear_merge_region_map() {
  if (merge_region_map_ != nullptr) merge_region_map_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void DataStore::clear_customformattable() {
  if (customformattable_ != nullptr) customformattable_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void DataStore::clear_rich_text_table() {
  if (rich_text_table_ != nullptr) rich_text_table_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void DataStore::clear_conditionalstyletable() {
  if (conditionalstyletable_ != nullptr) conditionalstyletable_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void DataStore::clear_commentstoragetable() {
  if (commentstoragetable_ != nullptr) commentstoragetable_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void DataStore::clear_importwarningsettable() {
  if (importwarningsettable_ != nullptr) importwarningsettable_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void DataStore::clear_control_cell_spec_table() {
  if (control_cell_spec_table_ != nullptr) control_cell_spec_table_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void DataStore::clear_format_table() {
  if (format_table_ != nullptr) format_table_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
DataStore::DataStore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.DataStore)
}
DataStore::DataStore(const DataStore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rowheaders()) {
    rowheaders_ = new ::TST::HeaderStorage(*from.rowheaders_);
  } else {
    rowheaders_ = nullptr;
  }
  if (from._internal_has_columnheaders()) {
    columnheaders_ = new ::TSP::Reference(*from.columnheaders_);
  } else {
    columnheaders_ = nullptr;
  }
  if (from._internal_has_tiles()) {
    tiles_ = new ::TST::TileStorage(*from.tiles_);
  } else {
    tiles_ = nullptr;
  }
  if (from._internal_has_stringtable()) {
    stringtable_ = new ::TSP::Reference(*from.stringtable_);
  } else {
    stringtable_ = nullptr;
  }
  if (from._internal_has_styletable()) {
    styletable_ = new ::TSP::Reference(*from.styletable_);
  } else {
    styletable_ = nullptr;
  }
  if (from._internal_has_formula_table()) {
    formula_table_ = new ::TSP::Reference(*from.formula_table_);
  } else {
    formula_table_ = nullptr;
  }
  if (from._internal_has_rowtiletree()) {
    rowtiletree_ = new ::TST::TableRBTree(*from.rowtiletree_);
  } else {
    rowtiletree_ = nullptr;
  }
  if (from._internal_has_columntiletree()) {
    columntiletree_ = new ::TST::TableRBTree(*from.columntiletree_);
  } else {
    columntiletree_ = nullptr;
  }
  if (from._internal_has_format_table_pre_bnc()) {
    format_table_pre_bnc_ = new ::TSP::Reference(*from.format_table_pre_bnc_);
  } else {
    format_table_pre_bnc_ = nullptr;
  }
  if (from._internal_has_formulaerrortable()) {
    formulaerrortable_ = new ::TSP::Reference(*from.formulaerrortable_);
  } else {
    formulaerrortable_ = nullptr;
  }
  if (from._internal_has_merge_region_map()) {
    merge_region_map_ = new ::TSP::Reference(*from.merge_region_map_);
  } else {
    merge_region_map_ = nullptr;
  }
  if (from._internal_has_customformattable()) {
    customformattable_ = new ::TSP::Reference(*from.customformattable_);
  } else {
    customformattable_ = nullptr;
  }
  if (from._internal_has_multiplechoicelistformattable()) {
    multiplechoicelistformattable_ = new ::TSP::Reference(*from.multiplechoicelistformattable_);
  } else {
    multiplechoicelistformattable_ = nullptr;
  }
  if (from._internal_has_rich_text_table()) {
    rich_text_table_ = new ::TSP::Reference(*from.rich_text_table_);
  } else {
    rich_text_table_ = nullptr;
  }
  if (from._internal_has_conditionalstyletable()) {
    conditionalstyletable_ = new ::TSP::Reference(*from.conditionalstyletable_);
  } else {
    conditionalstyletable_ = nullptr;
  }
  if (from._internal_has_commentstoragetable()) {
    commentstoragetable_ = new ::TSP::Reference(*from.commentstoragetable_);
  } else {
    commentstoragetable_ = nullptr;
  }
  if (from._internal_has_importwarningsettable()) {
    importwarningsettable_ = new ::TSP::Reference(*from.importwarningsettable_);
  } else {
    importwarningsettable_ = nullptr;
  }
  if (from._internal_has_control_cell_spec_table()) {
    control_cell_spec_table_ = new ::TSP::Reference(*from.control_cell_spec_table_);
  } else {
    control_cell_spec_table_ = nullptr;
  }
  if (from._internal_has_format_table()) {
    format_table_ = new ::TSP::Reference(*from.format_table_);
  } else {
    format_table_ = nullptr;
  }
  ::memcpy(&nextrowstripid_, &from.nextrowstripid_,
    static_cast<size_t>(reinterpret_cast<char*>(&storage_version_pre_bnc_) -
    reinterpret_cast<char*>(&nextrowstripid_)) + sizeof(storage_version_pre_bnc_));
  // @@protoc_insertion_point(copy_constructor:TST.DataStore)
}

inline void DataStore::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rowheaders_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&storage_version_pre_bnc_) -
    reinterpret_cast<char*>(&rowheaders_)) + sizeof(storage_version_pre_bnc_));
}

DataStore::~DataStore() {
  // @@protoc_insertion_point(destructor:TST.DataStore)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataStore::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete rowheaders_;
  if (this != internal_default_instance()) delete columnheaders_;
  if (this != internal_default_instance()) delete tiles_;
  if (this != internal_default_instance()) delete stringtable_;
  if (this != internal_default_instance()) delete styletable_;
  if (this != internal_default_instance()) delete formula_table_;
  if (this != internal_default_instance()) delete rowtiletree_;
  if (this != internal_default_instance()) delete columntiletree_;
  if (this != internal_default_instance()) delete format_table_pre_bnc_;
  if (this != internal_default_instance()) delete formulaerrortable_;
  if (this != internal_default_instance()) delete merge_region_map_;
  if (this != internal_default_instance()) delete customformattable_;
  if (this != internal_default_instance()) delete multiplechoicelistformattable_;
  if (this != internal_default_instance()) delete rich_text_table_;
  if (this != internal_default_instance()) delete conditionalstyletable_;
  if (this != internal_default_instance()) delete commentstoragetable_;
  if (this != internal_default_instance()) delete importwarningsettable_;
  if (this != internal_default_instance()) delete control_cell_spec_table_;
  if (this != internal_default_instance()) delete format_table_;
}

void DataStore::ArenaDtor(void* object) {
  DataStore* _this = reinterpret_cast< DataStore* >(object);
  (void)_this;
}
void DataStore::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataStore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataStore::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.DataStore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(rowheaders_ != nullptr);
      rowheaders_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(columnheaders_ != nullptr);
      columnheaders_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tiles_ != nullptr);
      tiles_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(stringtable_ != nullptr);
      stringtable_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(styletable_ != nullptr);
      styletable_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(formula_table_ != nullptr);
      formula_table_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(rowtiletree_ != nullptr);
      rowtiletree_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(columntiletree_ != nullptr);
      columntiletree_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(format_table_pre_bnc_ != nullptr);
      format_table_pre_bnc_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(formulaerrortable_ != nullptr);
      formulaerrortable_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(merge_region_map_ != nullptr);
      merge_region_map_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(customformattable_ != nullptr);
      customformattable_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(multiplechoicelistformattable_ != nullptr);
      multiplechoicelistformattable_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(rich_text_table_ != nullptr);
      rich_text_table_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(conditionalstyletable_ != nullptr);
      conditionalstyletable_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(commentstoragetable_ != nullptr);
      commentstoragetable_->Clear();
    }
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(importwarningsettable_ != nullptr);
      importwarningsettable_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(control_cell_spec_table_ != nullptr);
      control_cell_spec_table_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(format_table_ != nullptr);
      format_table_->Clear();
    }
  }
  if (cached_has_bits & 0x00380000u) {
    ::memset(&nextrowstripid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&storage_version_pre_bnc_) -
        reinterpret_cast<char*>(&nextrowstripid_)) + sizeof(storage_version_pre_bnc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataStore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.HeaderStorage rowHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rowheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference columnHeaders = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_columnheaders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.TileStorage tiles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tiles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference stringTable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stringtable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference styleTable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_styletable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference formula_table = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nextRowStripID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_nextrowstripid(&has_bits);
          nextrowstripid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nextColumnStripID = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_nextcolumnstripid(&has_bits);
          nextcolumnstripid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.TableRBTree rowTileTree = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_rowtiletree(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.TableRBTree columnTileTree = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_columntiletree(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference format_table_pre_bnc = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_format_table_pre_bnc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference formulaErrorTable = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_formulaerrortable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference merge_region_map = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_merge_region_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 storage_version_pre_bnc = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_storage_version_pre_bnc(&has_bits);
          storage_version_pre_bnc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference customFormatTable = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_customformattable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference multipleChoiceListFormatTable = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiplechoicelistformattable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference rich_text_table = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_rich_text_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference conditionalstyletable = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_conditionalstyletable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference commentStorageTable = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_commentstoragetable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference importWarningSetTable = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_importwarningsettable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference control_cell_spec_table = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_cell_spec_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference format_table = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_format_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataStore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.DataStore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.HeaderStorage rowHeaders = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rowheaders(this), target, stream);
  }

  // required .TSP.Reference columnHeaders = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::columnheaders(this), target, stream);
  }

  // required .TST.TileStorage tiles = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tiles(this), target, stream);
  }

  // required .TSP.Reference stringTable = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stringtable(this), target, stream);
  }

  // required .TSP.Reference styleTable = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::styletable(this), target, stream);
  }

  // required .TSP.Reference formula_table = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::formula_table(this), target, stream);
  }

  // required uint32 nextRowStripID = 7;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_nextrowstripid(), target);
  }

  // required uint32 nextColumnStripID = 8;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_nextcolumnstripid(), target);
  }

  // required .TST.TableRBTree rowTileTree = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::rowtiletree(this), target, stream);
  }

  // required .TST.TableRBTree columnTileTree = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::columntiletree(this), target, stream);
  }

  // required .TSP.Reference format_table_pre_bnc = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::format_table_pre_bnc(this), target, stream);
  }

  // optional .TSP.Reference formulaErrorTable = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::formulaerrortable(this), target, stream);
  }

  // optional .TSP.Reference merge_region_map = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::merge_region_map(this), target, stream);
  }

  // optional uint32 storage_version_pre_bnc = 14;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_storage_version_pre_bnc(), target);
  }

  // optional .TSP.Reference customFormatTable = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::customformattable(this), target, stream);
  }

  // optional .TSP.Reference multipleChoiceListFormatTable = 16;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::multiplechoicelistformattable(this), target, stream);
  }

  // optional .TSP.Reference rich_text_table = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::rich_text_table(this), target, stream);
  }

  // optional .TSP.Reference conditionalstyletable = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::conditionalstyletable(this), target, stream);
  }

  // optional .TSP.Reference commentStorageTable = 19;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::commentstoragetable(this), target, stream);
  }

  // optional .TSP.Reference importWarningSetTable = 20;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::importwarningsettable(this), target, stream);
  }

  // optional .TSP.Reference control_cell_spec_table = 21;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::control_cell_spec_table(this), target, stream);
  }

  // optional .TSP.Reference format_table = 22;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::format_table(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.DataStore)
  return target;
}

size_t DataStore::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.DataStore)
  size_t total_size = 0;

  if (_internal_has_rowheaders()) {
    // required .TST.HeaderStorage rowHeaders = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rowheaders_);
  }

  if (_internal_has_columnheaders()) {
    // required .TSP.Reference columnHeaders = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *columnheaders_);
  }

  if (_internal_has_tiles()) {
    // required .TST.TileStorage tiles = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tiles_);
  }

  if (_internal_has_stringtable()) {
    // required .TSP.Reference stringTable = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stringtable_);
  }

  if (_internal_has_styletable()) {
    // required .TSP.Reference styleTable = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *styletable_);
  }

  if (_internal_has_formula_table()) {
    // required .TSP.Reference formula_table = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formula_table_);
  }

  if (_internal_has_rowtiletree()) {
    // required .TST.TableRBTree rowTileTree = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rowtiletree_);
  }

  if (_internal_has_columntiletree()) {
    // required .TST.TableRBTree columnTileTree = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *columntiletree_);
  }

  if (_internal_has_format_table_pre_bnc()) {
    // required .TSP.Reference format_table_pre_bnc = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *format_table_pre_bnc_);
  }

  if (_internal_has_nextrowstripid()) {
    // required uint32 nextRowStripID = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nextrowstripid());
  }

  if (_internal_has_nextcolumnstripid()) {
    // required uint32 nextColumnStripID = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nextcolumnstripid());
  }

  return total_size;
}
size_t DataStore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.DataStore)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x001801ff) ^ 0x001801ff) == 0) {  // All required fields are present.
    // required .TST.HeaderStorage rowHeaders = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rowheaders_);

    // required .TSP.Reference columnHeaders = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *columnheaders_);

    // required .TST.TileStorage tiles = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tiles_);

    // required .TSP.Reference stringTable = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stringtable_);

    // required .TSP.Reference styleTable = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *styletable_);

    // required .TSP.Reference formula_table = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formula_table_);

    // required .TST.TableRBTree rowTileTree = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rowtiletree_);

    // required .TST.TableRBTree columnTileTree = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *columntiletree_);

    // required .TSP.Reference format_table_pre_bnc = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *format_table_pre_bnc_);

    // required uint32 nextRowStripID = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nextrowstripid());

    // required uint32 nextColumnStripID = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nextcolumnstripid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000fe00u) {
    // optional .TSP.Reference formulaErrorTable = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *formulaerrortable_);
    }

    // optional .TSP.Reference merge_region_map = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *merge_region_map_);
    }

    // optional .TSP.Reference customFormatTable = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customformattable_);
    }

    // optional .TSP.Reference multipleChoiceListFormatTable = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *multiplechoicelistformattable_);
    }

    // optional .TSP.Reference rich_text_table = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rich_text_table_);
    }

    // optional .TSP.Reference conditionalstyletable = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *conditionalstyletable_);
    }

    // optional .TSP.Reference commentStorageTable = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commentstoragetable_);
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional .TSP.Reference importWarningSetTable = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *importwarningsettable_);
    }

    // optional .TSP.Reference control_cell_spec_table = 21;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_cell_spec_table_);
    }

    // optional .TSP.Reference format_table = 22;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *format_table_);
    }

  }
  // optional uint32 storage_version_pre_bnc = 14;
  if (cached_has_bits & 0x00200000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_version_pre_bnc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataStore::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataStore::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataStore::GetClassData() const { return &_class_data_; }

void DataStore::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DataStore *>(to)->MergeFrom(
      static_cast<const DataStore &>(from));
}


void DataStore::MergeFrom(const DataStore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.DataStore)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_rowheaders()->::TST::HeaderStorage::MergeFrom(from._internal_rowheaders());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_columnheaders()->::TSP::Reference::MergeFrom(from._internal_columnheaders());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tiles()->::TST::TileStorage::MergeFrom(from._internal_tiles());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_stringtable()->::TSP::Reference::MergeFrom(from._internal_stringtable());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_styletable()->::TSP::Reference::MergeFrom(from._internal_styletable());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_formula_table()->::TSP::Reference::MergeFrom(from._internal_formula_table());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_rowtiletree()->::TST::TableRBTree::MergeFrom(from._internal_rowtiletree());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_columntiletree()->::TST::TableRBTree::MergeFrom(from._internal_columntiletree());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_format_table_pre_bnc()->::TSP::Reference::MergeFrom(from._internal_format_table_pre_bnc());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_formulaerrortable()->::TSP::Reference::MergeFrom(from._internal_formulaerrortable());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_merge_region_map()->::TSP::Reference::MergeFrom(from._internal_merge_region_map());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_customformattable()->::TSP::Reference::MergeFrom(from._internal_customformattable());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_multiplechoicelistformattable()->::TSP::Reference::MergeFrom(from._internal_multiplechoicelistformattable());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_rich_text_table()->::TSP::Reference::MergeFrom(from._internal_rich_text_table());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_conditionalstyletable()->::TSP::Reference::MergeFrom(from._internal_conditionalstyletable());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_commentstoragetable()->::TSP::Reference::MergeFrom(from._internal_commentstoragetable());
    }
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_importwarningsettable()->::TSP::Reference::MergeFrom(from._internal_importwarningsettable());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_control_cell_spec_table()->::TSP::Reference::MergeFrom(from._internal_control_cell_spec_table());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_format_table()->::TSP::Reference::MergeFrom(from._internal_format_table());
    }
    if (cached_has_bits & 0x00080000u) {
      nextrowstripid_ = from.nextrowstripid_;
    }
    if (cached_has_bits & 0x00100000u) {
      nextcolumnstripid_ = from.nextcolumnstripid_;
    }
    if (cached_has_bits & 0x00200000u) {
      storage_version_pre_bnc_ = from.storage_version_pre_bnc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataStore::CopyFrom(const DataStore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.DataStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStore::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_rowheaders()) {
    if (!rowheaders_->IsInitialized()) return false;
  }
  if (_internal_has_columnheaders()) {
    if (!columnheaders_->IsInitialized()) return false;
  }
  if (_internal_has_tiles()) {
    if (!tiles_->IsInitialized()) return false;
  }
  if (_internal_has_stringtable()) {
    if (!stringtable_->IsInitialized()) return false;
  }
  if (_internal_has_styletable()) {
    if (!styletable_->IsInitialized()) return false;
  }
  if (_internal_has_formula_table()) {
    if (!formula_table_->IsInitialized()) return false;
  }
  if (_internal_has_rowtiletree()) {
    if (!rowtiletree_->IsInitialized()) return false;
  }
  if (_internal_has_columntiletree()) {
    if (!columntiletree_->IsInitialized()) return false;
  }
  if (_internal_has_format_table_pre_bnc()) {
    if (!format_table_pre_bnc_->IsInitialized()) return false;
  }
  if (_internal_has_formulaerrortable()) {
    if (!formulaerrortable_->IsInitialized()) return false;
  }
  if (_internal_has_merge_region_map()) {
    if (!merge_region_map_->IsInitialized()) return false;
  }
  if (_internal_has_customformattable()) {
    if (!customformattable_->IsInitialized()) return false;
  }
  if (_internal_has_multiplechoicelistformattable()) {
    if (!multiplechoicelistformattable_->IsInitialized()) return false;
  }
  if (_internal_has_rich_text_table()) {
    if (!rich_text_table_->IsInitialized()) return false;
  }
  if (_internal_has_conditionalstyletable()) {
    if (!conditionalstyletable_->IsInitialized()) return false;
  }
  if (_internal_has_commentstoragetable()) {
    if (!commentstoragetable_->IsInitialized()) return false;
  }
  if (_internal_has_importwarningsettable()) {
    if (!importwarningsettable_->IsInitialized()) return false;
  }
  if (_internal_has_control_cell_spec_table()) {
    if (!control_cell_spec_table_->IsInitialized()) return false;
  }
  if (_internal_has_format_table()) {
    if (!format_table_->IsInitialized()) return false;
  }
  return true;
}

void DataStore::InternalSwap(DataStore* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataStore, storage_version_pre_bnc_)
      + sizeof(DataStore::storage_version_pre_bnc_)
      - PROTOBUF_FIELD_OFFSET(DataStore, rowheaders_)>(
          reinterpret_cast<char*>(&rowheaders_),
          reinterpret_cast<char*>(&other->rowheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataStore::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[26]);
}

// ===================================================================

class TableInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableInfoArchive>()._has_bits_);
  static const ::TSD::DrawableArchive& super(const TableInfoArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& tablemodel(const TableInfoArchive* msg);
  static void set_has_tablemodel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& editing_state(const TableInfoArchive* msg);
  static void set_has_editing_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& summary_model(const TableInfoArchive* msg);
  static void set_has_summary_model(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& category_order(const TableInfoArchive* msg);
  static void set_has_category_order(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& view_column_row_uids(const TableInfoArchive* msg);
  static void set_has_view_column_row_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::UUID& group_by_uuid(const TableInfoArchive* msg);
  static void set_has_group_by_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::UUID& hidden_states_uuid(const TableInfoArchive* msg);
  static void set_has_hidden_states_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_formula_coord_space_in_pre40(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_formula_coord_space(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSCE::CoordMapperArchive& pasteboard_coord_mapper(const TableInfoArchive* msg);
  static void set_has_pasteboard_coord_mapper(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TST::LayoutEngineArchive& layout_engine(const TableInfoArchive* msg);
  static void set_has_layout_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSD::DrawableArchive&
TableInfoArchive::_Internal::super(const TableInfoArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
TableInfoArchive::_Internal::tablemodel(const TableInfoArchive* msg) {
  return *msg->tablemodel_;
}
const ::TSP::Reference&
TableInfoArchive::_Internal::editing_state(const TableInfoArchive* msg) {
  return *msg->editing_state_;
}
const ::TSP::Reference&
TableInfoArchive::_Internal::summary_model(const TableInfoArchive* msg) {
  return *msg->summary_model_;
}
const ::TSP::Reference&
TableInfoArchive::_Internal::category_order(const TableInfoArchive* msg) {
  return *msg->category_order_;
}
const ::TSP::Reference&
TableInfoArchive::_Internal::view_column_row_uids(const TableInfoArchive* msg) {
  return *msg->view_column_row_uids_;
}
const ::TSP::UUID&
TableInfoArchive::_Internal::group_by_uuid(const TableInfoArchive* msg) {
  return *msg->group_by_uuid_;
}
const ::TSP::UUID&
TableInfoArchive::_Internal::hidden_states_uuid(const TableInfoArchive* msg) {
  return *msg->hidden_states_uuid_;
}
const ::TSCE::CoordMapperArchive&
TableInfoArchive::_Internal::pasteboard_coord_mapper(const TableInfoArchive* msg) {
  return *msg->pasteboard_coord_mapper_;
}
const ::TST::LayoutEngineArchive&
TableInfoArchive::_Internal::layout_engine(const TableInfoArchive* msg) {
  return *msg->layout_engine_;
}
void TableInfoArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TableInfoArchive::clear_tablemodel() {
  if (tablemodel_ != nullptr) tablemodel_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TableInfoArchive::clear_editing_state() {
  if (editing_state_ != nullptr) editing_state_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void TableInfoArchive::clear_summary_model() {
  if (summary_model_ != nullptr) summary_model_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void TableInfoArchive::clear_category_order() {
  if (category_order_ != nullptr) category_order_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void TableInfoArchive::clear_view_column_row_uids() {
  if (view_column_row_uids_ != nullptr) view_column_row_uids_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void TableInfoArchive::clear_group_by_uuid() {
  if (group_by_uuid_ != nullptr) group_by_uuid_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void TableInfoArchive::clear_hidden_states_uuid() {
  if (hidden_states_uuid_ != nullptr) hidden_states_uuid_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void TableInfoArchive::clear_pasteboard_coord_mapper() {
  if (pasteboard_coord_mapper_ != nullptr) pasteboard_coord_mapper_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
TableInfoArchive::TableInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TableInfoArchive)
}
TableInfoArchive::TableInfoArchive(const TableInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::DrawableArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_tablemodel()) {
    tablemodel_ = new ::TSP::Reference(*from.tablemodel_);
  } else {
    tablemodel_ = nullptr;
  }
  if (from._internal_has_editing_state()) {
    editing_state_ = new ::TSP::Reference(*from.editing_state_);
  } else {
    editing_state_ = nullptr;
  }
  if (from._internal_has_summary_model()) {
    summary_model_ = new ::TSP::Reference(*from.summary_model_);
  } else {
    summary_model_ = nullptr;
  }
  if (from._internal_has_category_order()) {
    category_order_ = new ::TSP::Reference(*from.category_order_);
  } else {
    category_order_ = nullptr;
  }
  if (from._internal_has_view_column_row_uids()) {
    view_column_row_uids_ = new ::TSP::Reference(*from.view_column_row_uids_);
  } else {
    view_column_row_uids_ = nullptr;
  }
  if (from._internal_has_group_by_uuid()) {
    group_by_uuid_ = new ::TSP::UUID(*from.group_by_uuid_);
  } else {
    group_by_uuid_ = nullptr;
  }
  if (from._internal_has_hidden_states_uuid()) {
    hidden_states_uuid_ = new ::TSP::UUID(*from.hidden_states_uuid_);
  } else {
    hidden_states_uuid_ = nullptr;
  }
  if (from._internal_has_pasteboard_coord_mapper()) {
    pasteboard_coord_mapper_ = new ::TSCE::CoordMapperArchive(*from.pasteboard_coord_mapper_);
  } else {
    pasteboard_coord_mapper_ = nullptr;
  }
  if (from._internal_has_layout_engine()) {
    layout_engine_ = new ::TST::LayoutEngineArchive(*from.layout_engine_);
  } else {
    layout_engine_ = nullptr;
  }
  ::memcpy(&formula_coord_space_in_pre40_, &from.formula_coord_space_in_pre40_,
    static_cast<size_t>(reinterpret_cast<char*>(&formula_coord_space_) -
    reinterpret_cast<char*>(&formula_coord_space_in_pre40_)) + sizeof(formula_coord_space_));
  // @@protoc_insertion_point(copy_constructor:TST.TableInfoArchive)
}

inline void TableInfoArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&formula_coord_space_) -
    reinterpret_cast<char*>(&super_)) + sizeof(formula_coord_space_));
}

TableInfoArchive::~TableInfoArchive() {
  // @@protoc_insertion_point(destructor:TST.TableInfoArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete tablemodel_;
  if (this != internal_default_instance()) delete editing_state_;
  if (this != internal_default_instance()) delete summary_model_;
  if (this != internal_default_instance()) delete category_order_;
  if (this != internal_default_instance()) delete view_column_row_uids_;
  if (this != internal_default_instance()) delete group_by_uuid_;
  if (this != internal_default_instance()) delete hidden_states_uuid_;
  if (this != internal_default_instance()) delete pasteboard_coord_mapper_;
  if (this != internal_default_instance()) delete layout_engine_;
}

void TableInfoArchive::ArenaDtor(void* object) {
  TableInfoArchive* _this = reinterpret_cast< TableInfoArchive* >(object);
  (void)_this;
}
void TableInfoArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableInfoArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tablemodel_ != nullptr);
      tablemodel_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(editing_state_ != nullptr);
      editing_state_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(summary_model_ != nullptr);
      summary_model_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(category_order_ != nullptr);
      category_order_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(view_column_row_uids_ != nullptr);
      view_column_row_uids_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(group_by_uuid_ != nullptr);
      group_by_uuid_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(hidden_states_uuid_ != nullptr);
      hidden_states_uuid_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(pasteboard_coord_mapper_ != nullptr);
      pasteboard_coord_mapper_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(layout_engine_ != nullptr);
      layout_engine_->Clear();
    }
  }
  if (cached_has_bits & 0x00000c00u) {
    ::memset(&formula_coord_space_in_pre40_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&formula_coord_space_) -
        reinterpret_cast<char*>(&formula_coord_space_in_pre40_)) + sizeof(formula_coord_space_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableInfoArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.DrawableArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference tableModel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tablemodel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference editing_state = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_editing_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference summary_model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_order = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference view_column_row_uids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_column_row_uids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID group_by_uuid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID hidden_states_uuid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_hidden_states_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 formula_coord_space_in_pre40 = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_formula_coord_space_in_pre40(&has_bits);
          formula_coord_space_in_pre40_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 formula_coord_space = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_formula_coord_space(&has_bits);
          formula_coord_space_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CoordMapperArchive pasteboard_coord_mapper = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_pasteboard_coord_mapper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.LayoutEngineArchive layout_engine = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_layout_engine(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableInfoArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.DrawableArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference tableModel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tablemodel(this), target, stream);
  }

  // optional .TSP.Reference editing_state = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::editing_state(this), target, stream);
  }

  // optional .TSP.Reference summary_model = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::summary_model(this), target, stream);
  }

  // optional .TSP.Reference category_order = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::category_order(this), target, stream);
  }

  // optional .TSP.Reference view_column_row_uids = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::view_column_row_uids(this), target, stream);
  }

  // optional .TSP.UUID group_by_uuid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::group_by_uuid(this), target, stream);
  }

  // optional .TSP.UUID hidden_states_uuid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::hidden_states_uuid(this), target, stream);
  }

  // optional uint32 formula_coord_space_in_pre40 = 9 [deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_formula_coord_space_in_pre40(), target);
  }

  // optional uint32 formula_coord_space = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_formula_coord_space(), target);
  }

  // optional .TSCE.CoordMapperArchive pasteboard_coord_mapper = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::pasteboard_coord_mapper(this), target, stream);
  }

  // optional .TST.LayoutEngineArchive layout_engine = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::layout_engine(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableInfoArchive)
  return target;
}

size_t TableInfoArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableInfoArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSD.DrawableArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_tablemodel()) {
    // required .TSP.Reference tableModel = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tablemodel_);
  }

  return total_size;
}
size_t TableInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableInfoArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSD.DrawableArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference tableModel = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tablemodel_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    // optional .TSP.Reference editing_state = 3 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *editing_state_);
    }

    // optional .TSP.Reference summary_model = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *summary_model_);
    }

    // optional .TSP.Reference category_order = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_order_);
    }

    // optional .TSP.Reference view_column_row_uids = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *view_column_row_uids_);
    }

    // optional .TSP.UUID group_by_uuid = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *group_by_uuid_);
    }

    // optional .TSP.UUID hidden_states_uuid = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hidden_states_uuid_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .TSCE.CoordMapperArchive pasteboard_coord_mapper = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pasteboard_coord_mapper_);
    }

    // optional .TST.LayoutEngineArchive layout_engine = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *layout_engine_);
    }

    // optional uint32 formula_coord_space_in_pre40 = 9 [deprecated = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_formula_coord_space_in_pre40());
    }

    // optional uint32 formula_coord_space = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_formula_coord_space());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableInfoArchive::GetClassData() const { return &_class_data_; }

void TableInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableInfoArchive *>(to)->MergeFrom(
      static_cast<const TableInfoArchive &>(from));
}


void TableInfoArchive::MergeFrom(const TableInfoArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TableInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::DrawableArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tablemodel()->::TSP::Reference::MergeFrom(from._internal_tablemodel());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_editing_state()->::TSP::Reference::MergeFrom(from._internal_editing_state());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_summary_model()->::TSP::Reference::MergeFrom(from._internal_summary_model());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_category_order()->::TSP::Reference::MergeFrom(from._internal_category_order());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_view_column_row_uids()->::TSP::Reference::MergeFrom(from._internal_view_column_row_uids());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_group_by_uuid()->::TSP::UUID::MergeFrom(from._internal_group_by_uuid());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_hidden_states_uuid()->::TSP::UUID::MergeFrom(from._internal_hidden_states_uuid());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_pasteboard_coord_mapper()->::TSCE::CoordMapperArchive::MergeFrom(from._internal_pasteboard_coord_mapper());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_layout_engine()->::TST::LayoutEngineArchive::MergeFrom(from._internal_layout_engine());
    }
    if (cached_has_bits & 0x00000400u) {
      formula_coord_space_in_pre40_ = from.formula_coord_space_in_pre40_;
    }
    if (cached_has_bits & 0x00000800u) {
      formula_coord_space_ = from.formula_coord_space_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableInfoArchive::CopyFrom(const TableInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_tablemodel()) {
    if (!tablemodel_->IsInitialized()) return false;
  }
  if (_internal_has_editing_state()) {
    if (!editing_state_->IsInitialized()) return false;
  }
  if (_internal_has_summary_model()) {
    if (!summary_model_->IsInitialized()) return false;
  }
  if (_internal_has_category_order()) {
    if (!category_order_->IsInitialized()) return false;
  }
  if (_internal_has_view_column_row_uids()) {
    if (!view_column_row_uids_->IsInitialized()) return false;
  }
  if (_internal_has_group_by_uuid()) {
    if (!group_by_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_hidden_states_uuid()) {
    if (!hidden_states_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_pasteboard_coord_mapper()) {
    if (!pasteboard_coord_mapper_->IsInitialized()) return false;
  }
  return true;
}

void TableInfoArchive::InternalSwap(TableInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableInfoArchive, formula_coord_space_)
      + sizeof(TableInfoArchive::formula_coord_space_)
      - PROTOBUF_FIELD_OFFSET(TableInfoArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableInfoArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[27]);
}

// ===================================================================

class CategoryInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CategoryInfoArchive>()._has_bits_);
  static const ::TSD::DrawableArchive& super(const CategoryInfoArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& tablemodel(const CategoryInfoArchive* msg);
  static void set_has_tablemodel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSD::DrawableArchive&
CategoryInfoArchive::_Internal::super(const CategoryInfoArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CategoryInfoArchive::_Internal::tablemodel(const CategoryInfoArchive* msg) {
  return *msg->tablemodel_;
}
void CategoryInfoArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CategoryInfoArchive::clear_tablemodel() {
  if (tablemodel_ != nullptr) tablemodel_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CategoryInfoArchive::CategoryInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CategoryInfoArchive)
}
CategoryInfoArchive::CategoryInfoArchive(const CategoryInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::DrawableArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_tablemodel()) {
    tablemodel_ = new ::TSP::Reference(*from.tablemodel_);
  } else {
    tablemodel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CategoryInfoArchive)
}

inline void CategoryInfoArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tablemodel_) -
    reinterpret_cast<char*>(&super_)) + sizeof(tablemodel_));
}

CategoryInfoArchive::~CategoryInfoArchive() {
  // @@protoc_insertion_point(destructor:TST.CategoryInfoArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CategoryInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete tablemodel_;
}

void CategoryInfoArchive::ArenaDtor(void* object) {
  CategoryInfoArchive* _this = reinterpret_cast< CategoryInfoArchive* >(object);
  (void)_this;
}
void CategoryInfoArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CategoryInfoArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CategoryInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CategoryInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tablemodel_ != nullptr);
      tablemodel_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryInfoArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.DrawableArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference tableModel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tablemodel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CategoryInfoArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CategoryInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.DrawableArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference tableModel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tablemodel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CategoryInfoArchive)
  return target;
}

size_t CategoryInfoArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CategoryInfoArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSD.DrawableArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_tablemodel()) {
    // required .TSP.Reference tableModel = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tablemodel_);
  }

  return total_size;
}
size_t CategoryInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CategoryInfoArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSD.DrawableArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference tableModel = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tablemodel_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CategoryInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryInfoArchive::GetClassData() const { return &_class_data_; }

void CategoryInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CategoryInfoArchive *>(to)->MergeFrom(
      static_cast<const CategoryInfoArchive &>(from));
}


void CategoryInfoArchive::MergeFrom(const CategoryInfoArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CategoryInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::DrawableArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tablemodel()->::TSP::Reference::MergeFrom(from._internal_tablemodel());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryInfoArchive::CopyFrom(const CategoryInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CategoryInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_tablemodel()) {
    if (!tablemodel_->IsInitialized()) return false;
  }
  return true;
}

void CategoryInfoArchive::InternalSwap(CategoryInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CategoryInfoArchive, tablemodel_)
      + sizeof(CategoryInfoArchive::tablemodel_)
      - PROTOBUF_FIELD_OFFSET(CategoryInfoArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryInfoArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[28]);
}

// ===================================================================

class WPTableInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<WPTableInfoArchive>()._has_bits_);
  static const ::TST::TableInfoArchive& super(const WPTableInfoArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& storage(const WPTableInfoArchive* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableInfoArchive&
WPTableInfoArchive::_Internal::super(const WPTableInfoArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
WPTableInfoArchive::_Internal::storage(const WPTableInfoArchive* msg) {
  return *msg->storage_;
}
void WPTableInfoArchive::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
WPTableInfoArchive::WPTableInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.WPTableInfoArchive)
}
WPTableInfoArchive::WPTableInfoArchive(const WPTableInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableInfoArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_storage()) {
    storage_ = new ::TSP::Reference(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.WPTableInfoArchive)
}

inline void WPTableInfoArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&storage_) -
    reinterpret_cast<char*>(&super_)) + sizeof(storage_));
}

WPTableInfoArchive::~WPTableInfoArchive() {
  // @@protoc_insertion_point(destructor:TST.WPTableInfoArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WPTableInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete storage_;
}

void WPTableInfoArchive::ArenaDtor(void* object) {
  WPTableInfoArchive* _this = reinterpret_cast< WPTableInfoArchive* >(object);
  (void)_this;
}
void WPTableInfoArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WPTableInfoArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WPTableInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.WPTableInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(storage_ != nullptr);
      storage_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WPTableInfoArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableInfoArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WPTableInfoArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.WPTableInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableInfoArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference storage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.WPTableInfoArchive)
  return target;
}

size_t WPTableInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.WPTableInfoArchive)
  size_t total_size = 0;

  // required .TST.TableInfoArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference storage = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storage_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WPTableInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WPTableInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WPTableInfoArchive::GetClassData() const { return &_class_data_; }

void WPTableInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WPTableInfoArchive *>(to)->MergeFrom(
      static_cast<const WPTableInfoArchive &>(from));
}


void WPTableInfoArchive::MergeFrom(const WPTableInfoArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.WPTableInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableInfoArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_storage()->::TSP::Reference::MergeFrom(from._internal_storage());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WPTableInfoArchive::CopyFrom(const WPTableInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.WPTableInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPTableInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_storage()) {
    if (!storage_->IsInitialized()) return false;
  }
  return true;
}

void WPTableInfoArchive::InternalSwap(WPTableInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WPTableInfoArchive, storage_)
      + sizeof(WPTableInfoArchive::storage_)
      - PROTOBUF_FIELD_OFFSET(WPTableInfoArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WPTableInfoArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[29]);
}

// ===================================================================

class TableStyleNetworkArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableStyleNetworkArchive>()._has_bits_);
  static const ::TSP::Reference& table_style(const TableStyleNetworkArchive* msg);
  static void set_has_table_style(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& body_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_body_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& header_row_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_header_row_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& header_column_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_header_column_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& footer_row_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_footer_row_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& category_level_1_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_category_level_1_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::Reference& category_level_2_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_category_level_2_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSP::Reference& category_level_3_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_category_level_3_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::Reference& category_level_4_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_category_level_4_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Reference& category_level_5_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_category_level_5_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::Reference& label_level_1_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_label_level_1_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSP::Reference& label_level_2_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_label_level_2_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSP::Reference& label_level_3_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_label_level_3_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::TSP::Reference& label_level_4_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_label_level_4_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TSP::Reference& label_level_5_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_label_level_5_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::TSP::Reference& body_cell_style(const TableStyleNetworkArchive* msg);
  static void set_has_body_cell_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& header_row_style(const TableStyleNetworkArchive* msg);
  static void set_has_header_row_style(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& header_column_style(const TableStyleNetworkArchive* msg);
  static void set_has_header_column_style(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& footer_row_style(const TableStyleNetworkArchive* msg);
  static void set_has_footer_row_style(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& category_level_1_style(const TableStyleNetworkArchive* msg);
  static void set_has_category_level_1_style(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSP::Reference& category_level_2_style(const TableStyleNetworkArchive* msg);
  static void set_has_category_level_2_style(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSP::Reference& category_level_3_style(const TableStyleNetworkArchive* msg);
  static void set_has_category_level_3_style(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSP::Reference& category_level_4_style(const TableStyleNetworkArchive* msg);
  static void set_has_category_level_4_style(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSP::Reference& category_level_5_style(const TableStyleNetworkArchive* msg);
  static void set_has_category_level_5_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSP::Reference& label_level_1_style(const TableStyleNetworkArchive* msg);
  static void set_has_label_level_1_style(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::TSP::Reference& label_level_2_style(const TableStyleNetworkArchive* msg);
  static void set_has_label_level_2_style(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::TSP::Reference& label_level_3_style(const TableStyleNetworkArchive* msg);
  static void set_has_label_level_3_style(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSP::Reference& label_level_4_style(const TableStyleNetworkArchive* msg);
  static void set_has_label_level_4_style(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::TSP::Reference& label_level_5_style(const TableStyleNetworkArchive* msg);
  static void set_has_label_level_5_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::TSP::Reference& table_name_style(const TableStyleNetworkArchive* msg);
  static void set_has_table_name_style(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& table_name_shape_style(const TableStyleNetworkArchive* msg);
  static void set_has_table_name_shape_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_preset_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001ff) ^ 0x000001ff) != 0;
  }
};

const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::table_style(const TableStyleNetworkArchive* msg) {
  return *msg->table_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::body_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->body_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::header_row_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->header_row_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::header_column_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->header_column_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::footer_row_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->footer_row_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::category_level_1_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->category_level_1_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::category_level_2_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->category_level_2_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::category_level_3_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->category_level_3_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::category_level_4_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->category_level_4_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::category_level_5_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->category_level_5_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::label_level_1_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->label_level_1_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::label_level_2_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->label_level_2_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::label_level_3_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->label_level_3_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::label_level_4_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->label_level_4_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::label_level_5_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->label_level_5_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::body_cell_style(const TableStyleNetworkArchive* msg) {
  return *msg->body_cell_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::header_row_style(const TableStyleNetworkArchive* msg) {
  return *msg->header_row_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::header_column_style(const TableStyleNetworkArchive* msg) {
  return *msg->header_column_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::footer_row_style(const TableStyleNetworkArchive* msg) {
  return *msg->footer_row_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::category_level_1_style(const TableStyleNetworkArchive* msg) {
  return *msg->category_level_1_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::category_level_2_style(const TableStyleNetworkArchive* msg) {
  return *msg->category_level_2_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::category_level_3_style(const TableStyleNetworkArchive* msg) {
  return *msg->category_level_3_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::category_level_4_style(const TableStyleNetworkArchive* msg) {
  return *msg->category_level_4_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::category_level_5_style(const TableStyleNetworkArchive* msg) {
  return *msg->category_level_5_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::label_level_1_style(const TableStyleNetworkArchive* msg) {
  return *msg->label_level_1_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::label_level_2_style(const TableStyleNetworkArchive* msg) {
  return *msg->label_level_2_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::label_level_3_style(const TableStyleNetworkArchive* msg) {
  return *msg->label_level_3_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::label_level_4_style(const TableStyleNetworkArchive* msg) {
  return *msg->label_level_4_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::label_level_5_style(const TableStyleNetworkArchive* msg) {
  return *msg->label_level_5_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::table_name_style(const TableStyleNetworkArchive* msg) {
  return *msg->table_name_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::table_name_shape_style(const TableStyleNetworkArchive* msg) {
  return *msg->table_name_shape_style_;
}
void TableStyleNetworkArchive::clear_table_style() {
  if (table_style_ != nullptr) table_style_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void TableStyleNetworkArchive::clear_body_text_style() {
  if (body_text_style_ != nullptr) body_text_style_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TableStyleNetworkArchive::clear_header_row_text_style() {
  if (header_row_text_style_ != nullptr) header_row_text_style_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TableStyleNetworkArchive::clear_header_column_text_style() {
  if (header_column_text_style_ != nullptr) header_column_text_style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void TableStyleNetworkArchive::clear_footer_row_text_style() {
  if (footer_row_text_style_ != nullptr) footer_row_text_style_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void TableStyleNetworkArchive::clear_category_level_1_text_style() {
  if (category_level_1_text_style_ != nullptr) category_level_1_text_style_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void TableStyleNetworkArchive::clear_category_level_2_text_style() {
  if (category_level_2_text_style_ != nullptr) category_level_2_text_style_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void TableStyleNetworkArchive::clear_category_level_3_text_style() {
  if (category_level_3_text_style_ != nullptr) category_level_3_text_style_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void TableStyleNetworkArchive::clear_category_level_4_text_style() {
  if (category_level_4_text_style_ != nullptr) category_level_4_text_style_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void TableStyleNetworkArchive::clear_category_level_5_text_style() {
  if (category_level_5_text_style_ != nullptr) category_level_5_text_style_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void TableStyleNetworkArchive::clear_label_level_1_text_style() {
  if (label_level_1_text_style_ != nullptr) label_level_1_text_style_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
void TableStyleNetworkArchive::clear_label_level_2_text_style() {
  if (label_level_2_text_style_ != nullptr) label_level_2_text_style_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
void TableStyleNetworkArchive::clear_label_level_3_text_style() {
  if (label_level_3_text_style_ != nullptr) label_level_3_text_style_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
void TableStyleNetworkArchive::clear_label_level_4_text_style() {
  if (label_level_4_text_style_ != nullptr) label_level_4_text_style_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
void TableStyleNetworkArchive::clear_label_level_5_text_style() {
  if (label_level_5_text_style_ != nullptr) label_level_5_text_style_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
void TableStyleNetworkArchive::clear_body_cell_style() {
  if (body_cell_style_ != nullptr) body_cell_style_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void TableStyleNetworkArchive::clear_header_row_style() {
  if (header_row_style_ != nullptr) header_row_style_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void TableStyleNetworkArchive::clear_header_column_style() {
  if (header_column_style_ != nullptr) header_column_style_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void TableStyleNetworkArchive::clear_footer_row_style() {
  if (footer_row_style_ != nullptr) footer_row_style_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void TableStyleNetworkArchive::clear_category_level_1_style() {
  if (category_level_1_style_ != nullptr) category_level_1_style_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void TableStyleNetworkArchive::clear_category_level_2_style() {
  if (category_level_2_style_ != nullptr) category_level_2_style_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void TableStyleNetworkArchive::clear_category_level_3_style() {
  if (category_level_3_style_ != nullptr) category_level_3_style_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void TableStyleNetworkArchive::clear_category_level_4_style() {
  if (category_level_4_style_ != nullptr) category_level_4_style_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void TableStyleNetworkArchive::clear_category_level_5_style() {
  if (category_level_5_style_ != nullptr) category_level_5_style_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
void TableStyleNetworkArchive::clear_label_level_1_style() {
  if (label_level_1_style_ != nullptr) label_level_1_style_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
void TableStyleNetworkArchive::clear_label_level_2_style() {
  if (label_level_2_style_ != nullptr) label_level_2_style_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
void TableStyleNetworkArchive::clear_label_level_3_style() {
  if (label_level_3_style_ != nullptr) label_level_3_style_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
void TableStyleNetworkArchive::clear_label_level_4_style() {
  if (label_level_4_style_ != nullptr) label_level_4_style_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
void TableStyleNetworkArchive::clear_label_level_5_style() {
  if (label_level_5_style_ != nullptr) label_level_5_style_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
void TableStyleNetworkArchive::clear_table_name_style() {
  if (table_name_style_ != nullptr) table_name_style_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void TableStyleNetworkArchive::clear_table_name_shape_style() {
  if (table_name_shape_style_ != nullptr) table_name_shape_style_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
TableStyleNetworkArchive::TableStyleNetworkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TableStyleNetworkArchive)
}
TableStyleNetworkArchive::TableStyleNetworkArchive(const TableStyleNetworkArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_body_text_style()) {
    body_text_style_ = new ::TSP::Reference(*from.body_text_style_);
  } else {
    body_text_style_ = nullptr;
  }
  if (from._internal_has_header_row_text_style()) {
    header_row_text_style_ = new ::TSP::Reference(*from.header_row_text_style_);
  } else {
    header_row_text_style_ = nullptr;
  }
  if (from._internal_has_header_column_text_style()) {
    header_column_text_style_ = new ::TSP::Reference(*from.header_column_text_style_);
  } else {
    header_column_text_style_ = nullptr;
  }
  if (from._internal_has_footer_row_text_style()) {
    footer_row_text_style_ = new ::TSP::Reference(*from.footer_row_text_style_);
  } else {
    footer_row_text_style_ = nullptr;
  }
  if (from._internal_has_body_cell_style()) {
    body_cell_style_ = new ::TSP::Reference(*from.body_cell_style_);
  } else {
    body_cell_style_ = nullptr;
  }
  if (from._internal_has_header_row_style()) {
    header_row_style_ = new ::TSP::Reference(*from.header_row_style_);
  } else {
    header_row_style_ = nullptr;
  }
  if (from._internal_has_header_column_style()) {
    header_column_style_ = new ::TSP::Reference(*from.header_column_style_);
  } else {
    header_column_style_ = nullptr;
  }
  if (from._internal_has_footer_row_style()) {
    footer_row_style_ = new ::TSP::Reference(*from.footer_row_style_);
  } else {
    footer_row_style_ = nullptr;
  }
  if (from._internal_has_table_style()) {
    table_style_ = new ::TSP::Reference(*from.table_style_);
  } else {
    table_style_ = nullptr;
  }
  if (from._internal_has_table_name_style()) {
    table_name_style_ = new ::TSP::Reference(*from.table_name_style_);
  } else {
    table_name_style_ = nullptr;
  }
  if (from._internal_has_table_name_shape_style()) {
    table_name_shape_style_ = new ::TSP::Reference(*from.table_name_shape_style_);
  } else {
    table_name_shape_style_ = nullptr;
  }
  if (from._internal_has_category_level_1_text_style()) {
    category_level_1_text_style_ = new ::TSP::Reference(*from.category_level_1_text_style_);
  } else {
    category_level_1_text_style_ = nullptr;
  }
  if (from._internal_has_category_level_2_text_style()) {
    category_level_2_text_style_ = new ::TSP::Reference(*from.category_level_2_text_style_);
  } else {
    category_level_2_text_style_ = nullptr;
  }
  if (from._internal_has_category_level_3_text_style()) {
    category_level_3_text_style_ = new ::TSP::Reference(*from.category_level_3_text_style_);
  } else {
    category_level_3_text_style_ = nullptr;
  }
  if (from._internal_has_category_level_4_text_style()) {
    category_level_4_text_style_ = new ::TSP::Reference(*from.category_level_4_text_style_);
  } else {
    category_level_4_text_style_ = nullptr;
  }
  if (from._internal_has_category_level_5_text_style()) {
    category_level_5_text_style_ = new ::TSP::Reference(*from.category_level_5_text_style_);
  } else {
    category_level_5_text_style_ = nullptr;
  }
  if (from._internal_has_category_level_1_style()) {
    category_level_1_style_ = new ::TSP::Reference(*from.category_level_1_style_);
  } else {
    category_level_1_style_ = nullptr;
  }
  if (from._internal_has_category_level_2_style()) {
    category_level_2_style_ = new ::TSP::Reference(*from.category_level_2_style_);
  } else {
    category_level_2_style_ = nullptr;
  }
  if (from._internal_has_category_level_3_style()) {
    category_level_3_style_ = new ::TSP::Reference(*from.category_level_3_style_);
  } else {
    category_level_3_style_ = nullptr;
  }
  if (from._internal_has_category_level_4_style()) {
    category_level_4_style_ = new ::TSP::Reference(*from.category_level_4_style_);
  } else {
    category_level_4_style_ = nullptr;
  }
  if (from._internal_has_category_level_5_style()) {
    category_level_5_style_ = new ::TSP::Reference(*from.category_level_5_style_);
  } else {
    category_level_5_style_ = nullptr;
  }
  if (from._internal_has_label_level_1_text_style()) {
    label_level_1_text_style_ = new ::TSP::Reference(*from.label_level_1_text_style_);
  } else {
    label_level_1_text_style_ = nullptr;
  }
  if (from._internal_has_label_level_2_text_style()) {
    label_level_2_text_style_ = new ::TSP::Reference(*from.label_level_2_text_style_);
  } else {
    label_level_2_text_style_ = nullptr;
  }
  if (from._internal_has_label_level_3_text_style()) {
    label_level_3_text_style_ = new ::TSP::Reference(*from.label_level_3_text_style_);
  } else {
    label_level_3_text_style_ = nullptr;
  }
  if (from._internal_has_label_level_4_text_style()) {
    label_level_4_text_style_ = new ::TSP::Reference(*from.label_level_4_text_style_);
  } else {
    label_level_4_text_style_ = nullptr;
  }
  if (from._internal_has_label_level_5_text_style()) {
    label_level_5_text_style_ = new ::TSP::Reference(*from.label_level_5_text_style_);
  } else {
    label_level_5_text_style_ = nullptr;
  }
  if (from._internal_has_label_level_1_style()) {
    label_level_1_style_ = new ::TSP::Reference(*from.label_level_1_style_);
  } else {
    label_level_1_style_ = nullptr;
  }
  if (from._internal_has_label_level_2_style()) {
    label_level_2_style_ = new ::TSP::Reference(*from.label_level_2_style_);
  } else {
    label_level_2_style_ = nullptr;
  }
  if (from._internal_has_label_level_3_style()) {
    label_level_3_style_ = new ::TSP::Reference(*from.label_level_3_style_);
  } else {
    label_level_3_style_ = nullptr;
  }
  if (from._internal_has_label_level_4_style()) {
    label_level_4_style_ = new ::TSP::Reference(*from.label_level_4_style_);
  } else {
    label_level_4_style_ = nullptr;
  }
  if (from._internal_has_label_level_5_style()) {
    label_level_5_style_ = new ::TSP::Reference(*from.label_level_5_style_);
  } else {
    label_level_5_style_ = nullptr;
  }
  preset_id_ = from.preset_id_;
  // @@protoc_insertion_point(copy_constructor:TST.TableStyleNetworkArchive)
}

inline void TableStyleNetworkArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&body_text_style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&preset_id_) -
    reinterpret_cast<char*>(&body_text_style_)) + sizeof(preset_id_));
}

TableStyleNetworkArchive::~TableStyleNetworkArchive() {
  // @@protoc_insertion_point(destructor:TST.TableStyleNetworkArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableStyleNetworkArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete body_text_style_;
  if (this != internal_default_instance()) delete header_row_text_style_;
  if (this != internal_default_instance()) delete header_column_text_style_;
  if (this != internal_default_instance()) delete footer_row_text_style_;
  if (this != internal_default_instance()) delete body_cell_style_;
  if (this != internal_default_instance()) delete header_row_style_;
  if (this != internal_default_instance()) delete header_column_style_;
  if (this != internal_default_instance()) delete footer_row_style_;
  if (this != internal_default_instance()) delete table_style_;
  if (this != internal_default_instance()) delete table_name_style_;
  if (this != internal_default_instance()) delete table_name_shape_style_;
  if (this != internal_default_instance()) delete category_level_1_text_style_;
  if (this != internal_default_instance()) delete category_level_2_text_style_;
  if (this != internal_default_instance()) delete category_level_3_text_style_;
  if (this != internal_default_instance()) delete category_level_4_text_style_;
  if (this != internal_default_instance()) delete category_level_5_text_style_;
  if (this != internal_default_instance()) delete category_level_1_style_;
  if (this != internal_default_instance()) delete category_level_2_style_;
  if (this != internal_default_instance()) delete category_level_3_style_;
  if (this != internal_default_instance()) delete category_level_4_style_;
  if (this != internal_default_instance()) delete category_level_5_style_;
  if (this != internal_default_instance()) delete label_level_1_text_style_;
  if (this != internal_default_instance()) delete label_level_2_text_style_;
  if (this != internal_default_instance()) delete label_level_3_text_style_;
  if (this != internal_default_instance()) delete label_level_4_text_style_;
  if (this != internal_default_instance()) delete label_level_5_text_style_;
  if (this != internal_default_instance()) delete label_level_1_style_;
  if (this != internal_default_instance()) delete label_level_2_style_;
  if (this != internal_default_instance()) delete label_level_3_style_;
  if (this != internal_default_instance()) delete label_level_4_style_;
  if (this != internal_default_instance()) delete label_level_5_style_;
}

void TableStyleNetworkArchive::ArenaDtor(void* object) {
  TableStyleNetworkArchive* _this = reinterpret_cast< TableStyleNetworkArchive* >(object);
  (void)_this;
}
void TableStyleNetworkArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableStyleNetworkArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableStyleNetworkArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableStyleNetworkArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(body_text_style_ != nullptr);
      body_text_style_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_row_text_style_ != nullptr);
      header_row_text_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(header_column_text_style_ != nullptr);
      header_column_text_style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(footer_row_text_style_ != nullptr);
      footer_row_text_style_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(body_cell_style_ != nullptr);
      body_cell_style_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(header_row_style_ != nullptr);
      header_row_style_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(header_column_style_ != nullptr);
      header_column_style_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(footer_row_style_ != nullptr);
      footer_row_style_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(table_style_ != nullptr);
      table_style_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(table_name_style_ != nullptr);
      table_name_style_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(table_name_shape_style_ != nullptr);
      table_name_shape_style_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(category_level_1_text_style_ != nullptr);
      category_level_1_text_style_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(category_level_2_text_style_ != nullptr);
      category_level_2_text_style_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(category_level_3_text_style_ != nullptr);
      category_level_3_text_style_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(category_level_4_text_style_ != nullptr);
      category_level_4_text_style_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(category_level_5_text_style_ != nullptr);
      category_level_5_text_style_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(category_level_1_style_ != nullptr);
      category_level_1_style_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(category_level_2_style_ != nullptr);
      category_level_2_style_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(category_level_3_style_ != nullptr);
      category_level_3_style_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(category_level_4_style_ != nullptr);
      category_level_4_style_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(category_level_5_style_ != nullptr);
      category_level_5_style_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(label_level_1_text_style_ != nullptr);
      label_level_1_text_style_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(label_level_2_text_style_ != nullptr);
      label_level_2_text_style_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(label_level_3_text_style_ != nullptr);
      label_level_3_text_style_->Clear();
    }
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(label_level_4_text_style_ != nullptr);
      label_level_4_text_style_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(label_level_5_text_style_ != nullptr);
      label_level_5_text_style_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(label_level_1_style_ != nullptr);
      label_level_1_style_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(label_level_2_style_ != nullptr);
      label_level_2_style_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(label_level_3_style_ != nullptr);
      label_level_3_style_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(label_level_4_style_ != nullptr);
      label_level_4_style_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(label_level_5_style_ != nullptr);
      label_level_5_style_->Clear();
    }
  }
  preset_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableStyleNetworkArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference body_text_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference header_row_text_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_row_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference header_column_text_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_column_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference footer_row_text_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer_row_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference body_cell_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_cell_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference header_row_style = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_row_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference header_column_style = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_column_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference footer_row_style = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer_row_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference table_style = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference table_name_style = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_name_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference table_name_shape_style = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_name_shape_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 preset_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_preset_id(&has_bits);
          preset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_1_text_style = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_1_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_2_text_style = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_2_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_3_text_style = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_3_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_4_text_style = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_4_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_5_text_style = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_5_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_1_style = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_1_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_2_style = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_2_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_3_style = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_3_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_4_style = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_4_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_5_style = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_5_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_1_text_style = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_1_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_2_text_style = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_2_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_3_text_style = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_3_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_4_text_style = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_4_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_5_text_style = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_5_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_1_style = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_1_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_2_style = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_2_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_3_style = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_3_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_4_style = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_4_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_5_style = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_5_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableStyleNetworkArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableStyleNetworkArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference body_text_style = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::body_text_style(this), target, stream);
  }

  // required .TSP.Reference header_row_text_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::header_row_text_style(this), target, stream);
  }

  // required .TSP.Reference header_column_text_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::header_column_text_style(this), target, stream);
  }

  // required .TSP.Reference footer_row_text_style = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::footer_row_text_style(this), target, stream);
  }

  // required .TSP.Reference body_cell_style = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::body_cell_style(this), target, stream);
  }

  // required .TSP.Reference header_row_style = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::header_row_style(this), target, stream);
  }

  // required .TSP.Reference header_column_style = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::header_column_style(this), target, stream);
  }

  // required .TSP.Reference footer_row_style = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::footer_row_style(this), target, stream);
  }

  // required .TSP.Reference table_style = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::table_style(this), target, stream);
  }

  // optional .TSP.Reference table_name_style = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::table_name_style(this), target, stream);
  }

  // optional .TSP.Reference table_name_shape_style = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::table_name_shape_style(this), target, stream);
  }

  // optional uint32 preset_id = 12;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_preset_id(), target);
  }

  // optional .TSP.Reference category_level_1_text_style = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::category_level_1_text_style(this), target, stream);
  }

  // optional .TSP.Reference category_level_2_text_style = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::category_level_2_text_style(this), target, stream);
  }

  // optional .TSP.Reference category_level_3_text_style = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::category_level_3_text_style(this), target, stream);
  }

  // optional .TSP.Reference category_level_4_text_style = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::category_level_4_text_style(this), target, stream);
  }

  // optional .TSP.Reference category_level_5_text_style = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::category_level_5_text_style(this), target, stream);
  }

  // optional .TSP.Reference category_level_1_style = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::category_level_1_style(this), target, stream);
  }

  // optional .TSP.Reference category_level_2_style = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::category_level_2_style(this), target, stream);
  }

  // optional .TSP.Reference category_level_3_style = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::category_level_3_style(this), target, stream);
  }

  // optional .TSP.Reference category_level_4_style = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::category_level_4_style(this), target, stream);
  }

  // optional .TSP.Reference category_level_5_style = 22;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::category_level_5_style(this), target, stream);
  }

  // optional .TSP.Reference label_level_1_text_style = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::label_level_1_text_style(this), target, stream);
  }

  // optional .TSP.Reference label_level_2_text_style = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::label_level_2_text_style(this), target, stream);
  }

  // optional .TSP.Reference label_level_3_text_style = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::label_level_3_text_style(this), target, stream);
  }

  // optional .TSP.Reference label_level_4_text_style = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::label_level_4_text_style(this), target, stream);
  }

  // optional .TSP.Reference label_level_5_text_style = 27;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::label_level_5_text_style(this), target, stream);
  }

  // optional .TSP.Reference label_level_1_style = 28;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::label_level_1_style(this), target, stream);
  }

  // optional .TSP.Reference label_level_2_style = 29;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::label_level_2_style(this), target, stream);
  }

  // optional .TSP.Reference label_level_3_style = 30;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::label_level_3_style(this), target, stream);
  }

  // optional .TSP.Reference label_level_4_style = 31;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::label_level_4_style(this), target, stream);
  }

  // optional .TSP.Reference label_level_5_style = 32;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::label_level_5_style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableStyleNetworkArchive)
  return target;
}

size_t TableStyleNetworkArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableStyleNetworkArchive)
  size_t total_size = 0;

  if (_internal_has_body_text_style()) {
    // required .TSP.Reference body_text_style = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_text_style_);
  }

  if (_internal_has_header_row_text_style()) {
    // required .TSP.Reference header_row_text_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_row_text_style_);
  }

  if (_internal_has_header_column_text_style()) {
    // required .TSP.Reference header_column_text_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_column_text_style_);
  }

  if (_internal_has_footer_row_text_style()) {
    // required .TSP.Reference footer_row_text_style = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *footer_row_text_style_);
  }

  if (_internal_has_body_cell_style()) {
    // required .TSP.Reference body_cell_style = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_cell_style_);
  }

  if (_internal_has_header_row_style()) {
    // required .TSP.Reference header_row_style = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_row_style_);
  }

  if (_internal_has_header_column_style()) {
    // required .TSP.Reference header_column_style = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_column_style_);
  }

  if (_internal_has_footer_row_style()) {
    // required .TSP.Reference footer_row_style = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *footer_row_style_);
  }

  if (_internal_has_table_style()) {
    // required .TSP.Reference table_style = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_style_);
  }

  return total_size;
}
size_t TableStyleNetworkArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableStyleNetworkArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required .TSP.Reference body_text_style = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_text_style_);

    // required .TSP.Reference header_row_text_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_row_text_style_);

    // required .TSP.Reference header_column_text_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_column_text_style_);

    // required .TSP.Reference footer_row_text_style = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *footer_row_text_style_);

    // required .TSP.Reference body_cell_style = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_cell_style_);

    // required .TSP.Reference header_row_style = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_row_style_);

    // required .TSP.Reference header_column_style = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_column_style_);

    // required .TSP.Reference footer_row_style = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *footer_row_style_);

    // required .TSP.Reference table_style = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_style_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000fe00u) {
    // optional .TSP.Reference table_name_style = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_name_style_);
    }

    // optional .TSP.Reference table_name_shape_style = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_name_shape_style_);
    }

    // optional .TSP.Reference category_level_1_text_style = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_level_1_text_style_);
    }

    // optional .TSP.Reference category_level_2_text_style = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_level_2_text_style_);
    }

    // optional .TSP.Reference category_level_3_text_style = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_level_3_text_style_);
    }

    // optional .TSP.Reference category_level_4_text_style = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_level_4_text_style_);
    }

    // optional .TSP.Reference category_level_5_text_style = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_level_5_text_style_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSP.Reference category_level_1_style = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_level_1_style_);
    }

    // optional .TSP.Reference category_level_2_style = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_level_2_style_);
    }

    // optional .TSP.Reference category_level_3_style = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_level_3_style_);
    }

    // optional .TSP.Reference category_level_4_style = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_level_4_style_);
    }

    // optional .TSP.Reference category_level_5_style = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_level_5_style_);
    }

    // optional .TSP.Reference label_level_1_text_style = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_level_1_text_style_);
    }

    // optional .TSP.Reference label_level_2_text_style = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_level_2_text_style_);
    }

    // optional .TSP.Reference label_level_3_text_style = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_level_3_text_style_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .TSP.Reference label_level_4_text_style = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_level_4_text_style_);
    }

    // optional .TSP.Reference label_level_5_text_style = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_level_5_text_style_);
    }

    // optional .TSP.Reference label_level_1_style = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_level_1_style_);
    }

    // optional .TSP.Reference label_level_2_style = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_level_2_style_);
    }

    // optional .TSP.Reference label_level_3_style = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_level_3_style_);
    }

    // optional .TSP.Reference label_level_4_style = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_level_4_style_);
    }

    // optional .TSP.Reference label_level_5_style = 32;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_level_5_style_);
    }

    // optional uint32 preset_id = 12;
    if (cached_has_bits & 0x80000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_preset_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableStyleNetworkArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableStyleNetworkArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableStyleNetworkArchive::GetClassData() const { return &_class_data_; }

void TableStyleNetworkArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableStyleNetworkArchive *>(to)->MergeFrom(
      static_cast<const TableStyleNetworkArchive &>(from));
}


void TableStyleNetworkArchive::MergeFrom(const TableStyleNetworkArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TableStyleNetworkArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_body_text_style()->::TSP::Reference::MergeFrom(from._internal_body_text_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header_row_text_style()->::TSP::Reference::MergeFrom(from._internal_header_row_text_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_header_column_text_style()->::TSP::Reference::MergeFrom(from._internal_header_column_text_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_footer_row_text_style()->::TSP::Reference::MergeFrom(from._internal_footer_row_text_style());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_body_cell_style()->::TSP::Reference::MergeFrom(from._internal_body_cell_style());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_header_row_style()->::TSP::Reference::MergeFrom(from._internal_header_row_style());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_header_column_style()->::TSP::Reference::MergeFrom(from._internal_header_column_style());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_footer_row_style()->::TSP::Reference::MergeFrom(from._internal_footer_row_style());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_table_style()->::TSP::Reference::MergeFrom(from._internal_table_style());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_table_name_style()->::TSP::Reference::MergeFrom(from._internal_table_name_style());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_table_name_shape_style()->::TSP::Reference::MergeFrom(from._internal_table_name_shape_style());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_category_level_1_text_style()->::TSP::Reference::MergeFrom(from._internal_category_level_1_text_style());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_category_level_2_text_style()->::TSP::Reference::MergeFrom(from._internal_category_level_2_text_style());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_category_level_3_text_style()->::TSP::Reference::MergeFrom(from._internal_category_level_3_text_style());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_category_level_4_text_style()->::TSP::Reference::MergeFrom(from._internal_category_level_4_text_style());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_category_level_5_text_style()->::TSP::Reference::MergeFrom(from._internal_category_level_5_text_style());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_category_level_1_style()->::TSP::Reference::MergeFrom(from._internal_category_level_1_style());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_category_level_2_style()->::TSP::Reference::MergeFrom(from._internal_category_level_2_style());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_category_level_3_style()->::TSP::Reference::MergeFrom(from._internal_category_level_3_style());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_category_level_4_style()->::TSP::Reference::MergeFrom(from._internal_category_level_4_style());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_category_level_5_style()->::TSP::Reference::MergeFrom(from._internal_category_level_5_style());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_label_level_1_text_style()->::TSP::Reference::MergeFrom(from._internal_label_level_1_text_style());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_label_level_2_text_style()->::TSP::Reference::MergeFrom(from._internal_label_level_2_text_style());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_label_level_3_text_style()->::TSP::Reference::MergeFrom(from._internal_label_level_3_text_style());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_label_level_4_text_style()->::TSP::Reference::MergeFrom(from._internal_label_level_4_text_style());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_label_level_5_text_style()->::TSP::Reference::MergeFrom(from._internal_label_level_5_text_style());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_label_level_1_style()->::TSP::Reference::MergeFrom(from._internal_label_level_1_style());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_label_level_2_style()->::TSP::Reference::MergeFrom(from._internal_label_level_2_style());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_label_level_3_style()->::TSP::Reference::MergeFrom(from._internal_label_level_3_style());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_label_level_4_style()->::TSP::Reference::MergeFrom(from._internal_label_level_4_style());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_label_level_5_style()->::TSP::Reference::MergeFrom(from._internal_label_level_5_style());
    }
    if (cached_has_bits & 0x80000000u) {
      preset_id_ = from.preset_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableStyleNetworkArchive::CopyFrom(const TableStyleNetworkArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableStyleNetworkArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableStyleNetworkArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_body_text_style()) {
    if (!body_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_header_row_text_style()) {
    if (!header_row_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_header_column_text_style()) {
    if (!header_column_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_footer_row_text_style()) {
    if (!footer_row_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_body_cell_style()) {
    if (!body_cell_style_->IsInitialized()) return false;
  }
  if (_internal_has_header_row_style()) {
    if (!header_row_style_->IsInitialized()) return false;
  }
  if (_internal_has_header_column_style()) {
    if (!header_column_style_->IsInitialized()) return false;
  }
  if (_internal_has_footer_row_style()) {
    if (!footer_row_style_->IsInitialized()) return false;
  }
  if (_internal_has_table_style()) {
    if (!table_style_->IsInitialized()) return false;
  }
  if (_internal_has_table_name_style()) {
    if (!table_name_style_->IsInitialized()) return false;
  }
  if (_internal_has_table_name_shape_style()) {
    if (!table_name_shape_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_1_text_style()) {
    if (!category_level_1_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_2_text_style()) {
    if (!category_level_2_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_3_text_style()) {
    if (!category_level_3_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_4_text_style()) {
    if (!category_level_4_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_5_text_style()) {
    if (!category_level_5_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_1_style()) {
    if (!category_level_1_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_2_style()) {
    if (!category_level_2_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_3_style()) {
    if (!category_level_3_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_4_style()) {
    if (!category_level_4_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_5_style()) {
    if (!category_level_5_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_1_text_style()) {
    if (!label_level_1_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_2_text_style()) {
    if (!label_level_2_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_3_text_style()) {
    if (!label_level_3_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_4_text_style()) {
    if (!label_level_4_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_5_text_style()) {
    if (!label_level_5_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_1_style()) {
    if (!label_level_1_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_2_style()) {
    if (!label_level_2_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_3_style()) {
    if (!label_level_3_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_4_style()) {
    if (!label_level_4_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_5_style()) {
    if (!label_level_5_style_->IsInitialized()) return false;
  }
  return true;
}

void TableStyleNetworkArchive::InternalSwap(TableStyleNetworkArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableStyleNetworkArchive, preset_id_)
      + sizeof(TableStyleNetworkArchive::preset_id_)
      - PROTOBUF_FIELD_OFFSET(TableStyleNetworkArchive, body_text_style_)>(
          reinterpret_cast<char*>(&body_text_style_),
          reinterpret_cast<char*>(&other->body_text_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableStyleNetworkArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[30]);
}

// ===================================================================

class TableSortOrderArchive_SortRuleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableSortOrderArchive_SortRuleArchive>()._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

TableSortOrderArchive_SortRuleArchive::TableSortOrderArchive_SortRuleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TableSortOrderArchive.SortRuleArchive)
}
TableSortOrderArchive_SortRuleArchive::TableSortOrderArchive_SortRuleArchive(const TableSortOrderArchive_SortRuleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&column_, &from.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&column_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:TST.TableSortOrderArchive.SortRuleArchive)
}

inline void TableSortOrderArchive_SortRuleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&column_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&column_)) + sizeof(direction_));
}

TableSortOrderArchive_SortRuleArchive::~TableSortOrderArchive_SortRuleArchive() {
  // @@protoc_insertion_point(destructor:TST.TableSortOrderArchive.SortRuleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableSortOrderArchive_SortRuleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TableSortOrderArchive_SortRuleArchive::ArenaDtor(void* object) {
  TableSortOrderArchive_SortRuleArchive* _this = reinterpret_cast< TableSortOrderArchive_SortRuleArchive* >(object);
  (void)_this;
}
void TableSortOrderArchive_SortRuleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableSortOrderArchive_SortRuleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableSortOrderArchive_SortRuleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableSortOrderArchive.SortRuleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&direction_) -
        reinterpret_cast<char*>(&column_)) + sizeof(direction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableSortOrderArchive_SortRuleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.TableSortOrderArchive.SortRuleArchive.Direction direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableSortOrderArchive_SortRuleArchive_Direction_IsValid(val))) {
            _internal_set_direction(static_cast<::TST::TableSortOrderArchive_SortRuleArchive_Direction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableSortOrderArchive_SortRuleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableSortOrderArchive.SortRuleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required .TST.TableSortOrderArchive.SortRuleArchive.Direction direction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableSortOrderArchive.SortRuleArchive)
  return target;
}

size_t TableSortOrderArchive_SortRuleArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableSortOrderArchive.SortRuleArchive)
  size_t total_size = 0;

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());
  }

  if (_internal_has_direction()) {
    // required .TST.TableSortOrderArchive.SortRuleArchive.Direction direction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return total_size;
}
size_t TableSortOrderArchive_SortRuleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableSortOrderArchive.SortRuleArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());

    // required .TST.TableSortOrderArchive.SortRuleArchive.Direction direction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableSortOrderArchive_SortRuleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableSortOrderArchive_SortRuleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableSortOrderArchive_SortRuleArchive::GetClassData() const { return &_class_data_; }

void TableSortOrderArchive_SortRuleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableSortOrderArchive_SortRuleArchive *>(to)->MergeFrom(
      static_cast<const TableSortOrderArchive_SortRuleArchive &>(from));
}


void TableSortOrderArchive_SortRuleArchive::MergeFrom(const TableSortOrderArchive_SortRuleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TableSortOrderArchive.SortRuleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      column_ = from.column_;
    }
    if (cached_has_bits & 0x00000002u) {
      direction_ = from.direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableSortOrderArchive_SortRuleArchive::CopyFrom(const TableSortOrderArchive_SortRuleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableSortOrderArchive.SortRuleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSortOrderArchive_SortRuleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TableSortOrderArchive_SortRuleArchive::InternalSwap(TableSortOrderArchive_SortRuleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableSortOrderArchive_SortRuleArchive, direction_)
      + sizeof(TableSortOrderArchive_SortRuleArchive::direction_)
      - PROTOBUF_FIELD_OFFSET(TableSortOrderArchive_SortRuleArchive, column_)>(
          reinterpret_cast<char*>(&column_),
          reinterpret_cast<char*>(&other->column_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableSortOrderArchive_SortRuleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[31]);
}

// ===================================================================

class TableSortOrderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableSortOrderArchive>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TableSortOrderArchive::TableSortOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rules_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TableSortOrderArchive)
}
TableSortOrderArchive::TableSortOrderArchive(const TableSortOrderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rules_(from.rules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:TST.TableSortOrderArchive)
}

inline void TableSortOrderArchive::SharedCtor() {
type_ = 0;
}

TableSortOrderArchive::~TableSortOrderArchive() {
  // @@protoc_insertion_point(destructor:TST.TableSortOrderArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableSortOrderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TableSortOrderArchive::ArenaDtor(void* object) {
  TableSortOrderArchive* _this = reinterpret_cast< TableSortOrderArchive* >(object);
  (void)_this;
}
void TableSortOrderArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableSortOrderArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableSortOrderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableSortOrderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableSortOrderArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableSortOrderArchive.SortType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableSortOrderArchive_SortType_IsValid(val))) {
            _internal_set_type(static_cast<::TST::TableSortOrderArchive_SortType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .TST.TableSortOrderArchive.SortRuleArchive rules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableSortOrderArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableSortOrderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableSortOrderArchive.SortType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .TST.TableSortOrderArchive.SortRuleArchive rules = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rules(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableSortOrderArchive)
  return target;
}

size_t TableSortOrderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableSortOrderArchive)
  size_t total_size = 0;

  // required .TST.TableSortOrderArchive.SortType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.TableSortOrderArchive.SortRuleArchive rules = 2;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableSortOrderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableSortOrderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableSortOrderArchive::GetClassData() const { return &_class_data_; }

void TableSortOrderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableSortOrderArchive *>(to)->MergeFrom(
      static_cast<const TableSortOrderArchive &>(from));
}


void TableSortOrderArchive::MergeFrom(const TableSortOrderArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TableSortOrderArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableSortOrderArchive::CopyFrom(const TableSortOrderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableSortOrderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSortOrderArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rules_)) return false;
  return true;
}

void TableSortOrderArchive::InternalSwap(TableSortOrderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rules_.InternalSwap(&other->rules_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableSortOrderArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[32]);
}

// ===================================================================

class TableSortOrderUIDArchive_SortRuleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableSortOrderUIDArchive_SortRuleArchive>()._has_bits_);
  static const ::TSP::UUID& column_uid(const TableSortOrderUIDArchive_SortRuleArchive* msg);
  static void set_has_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
TableSortOrderUIDArchive_SortRuleArchive::_Internal::column_uid(const TableSortOrderUIDArchive_SortRuleArchive* msg) {
  return *msg->column_uid_;
}
void TableSortOrderUIDArchive_SortRuleArchive::clear_column_uid() {
  if (column_uid_ != nullptr) column_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TableSortOrderUIDArchive_SortRuleArchive::TableSortOrderUIDArchive_SortRuleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TableSortOrderUIDArchive.SortRuleArchive)
}
TableSortOrderUIDArchive_SortRuleArchive::TableSortOrderUIDArchive_SortRuleArchive(const TableSortOrderUIDArchive_SortRuleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_uid()) {
    column_uid_ = new ::TSP::UUID(*from.column_uid_);
  } else {
    column_uid_ = nullptr;
  }
  direction_ = from.direction_;
  // @@protoc_insertion_point(copy_constructor:TST.TableSortOrderUIDArchive.SortRuleArchive)
}

inline void TableSortOrderUIDArchive_SortRuleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&column_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&column_uid_)) + sizeof(direction_));
}

TableSortOrderUIDArchive_SortRuleArchive::~TableSortOrderUIDArchive_SortRuleArchive() {
  // @@protoc_insertion_point(destructor:TST.TableSortOrderUIDArchive.SortRuleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableSortOrderUIDArchive_SortRuleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete column_uid_;
}

void TableSortOrderUIDArchive_SortRuleArchive::ArenaDtor(void* object) {
  TableSortOrderUIDArchive_SortRuleArchive* _this = reinterpret_cast< TableSortOrderUIDArchive_SortRuleArchive* >(object);
  (void)_this;
}
void TableSortOrderUIDArchive_SortRuleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableSortOrderUIDArchive_SortRuleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableSortOrderUIDArchive_SortRuleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableSortOrderUIDArchive.SortRuleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(column_uid_ != nullptr);
    column_uid_->Clear();
  }
  direction_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableSortOrderUIDArchive_SortRuleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID column_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.TableSortOrderUIDArchive.SortRuleArchive.Direction direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableSortOrderUIDArchive_SortRuleArchive_Direction_IsValid(val))) {
            _internal_set_direction(static_cast<::TST::TableSortOrderUIDArchive_SortRuleArchive_Direction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableSortOrderUIDArchive_SortRuleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableSortOrderUIDArchive.SortRuleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID column_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::column_uid(this), target, stream);
  }

  // required .TST.TableSortOrderUIDArchive.SortRuleArchive.Direction direction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableSortOrderUIDArchive.SortRuleArchive)
  return target;
}

size_t TableSortOrderUIDArchive_SortRuleArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableSortOrderUIDArchive.SortRuleArchive)
  size_t total_size = 0;

  if (_internal_has_column_uid()) {
    // required .TSP.UUID column_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_uid_);
  }

  if (_internal_has_direction()) {
    // required .TST.TableSortOrderUIDArchive.SortRuleArchive.Direction direction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return total_size;
}
size_t TableSortOrderUIDArchive_SortRuleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableSortOrderUIDArchive.SortRuleArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID column_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_uid_);

    // required .TST.TableSortOrderUIDArchive.SortRuleArchive.Direction direction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableSortOrderUIDArchive_SortRuleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableSortOrderUIDArchive_SortRuleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableSortOrderUIDArchive_SortRuleArchive::GetClassData() const { return &_class_data_; }

void TableSortOrderUIDArchive_SortRuleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableSortOrderUIDArchive_SortRuleArchive *>(to)->MergeFrom(
      static_cast<const TableSortOrderUIDArchive_SortRuleArchive &>(from));
}


void TableSortOrderUIDArchive_SortRuleArchive::MergeFrom(const TableSortOrderUIDArchive_SortRuleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TableSortOrderUIDArchive.SortRuleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_column_uid()->::TSP::UUID::MergeFrom(from._internal_column_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      direction_ = from.direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableSortOrderUIDArchive_SortRuleArchive::CopyFrom(const TableSortOrderUIDArchive_SortRuleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableSortOrderUIDArchive.SortRuleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSortOrderUIDArchive_SortRuleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_column_uid()) {
    if (!column_uid_->IsInitialized()) return false;
  }
  return true;
}

void TableSortOrderUIDArchive_SortRuleArchive::InternalSwap(TableSortOrderUIDArchive_SortRuleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableSortOrderUIDArchive_SortRuleArchive, direction_)
      + sizeof(TableSortOrderUIDArchive_SortRuleArchive::direction_)
      - PROTOBUF_FIELD_OFFSET(TableSortOrderUIDArchive_SortRuleArchive, column_uid_)>(
          reinterpret_cast<char*>(&column_uid_),
          reinterpret_cast<char*>(&other->column_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableSortOrderUIDArchive_SortRuleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[33]);
}

// ===================================================================

class TableSortOrderUIDArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableSortOrderUIDArchive>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TableSortOrderUIDArchive::TableSortOrderUIDArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rules_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TableSortOrderUIDArchive)
}
TableSortOrderUIDArchive::TableSortOrderUIDArchive(const TableSortOrderUIDArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rules_(from.rules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:TST.TableSortOrderUIDArchive)
}

inline void TableSortOrderUIDArchive::SharedCtor() {
type_ = 0;
}

TableSortOrderUIDArchive::~TableSortOrderUIDArchive() {
  // @@protoc_insertion_point(destructor:TST.TableSortOrderUIDArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableSortOrderUIDArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TableSortOrderUIDArchive::ArenaDtor(void* object) {
  TableSortOrderUIDArchive* _this = reinterpret_cast< TableSortOrderUIDArchive* >(object);
  (void)_this;
}
void TableSortOrderUIDArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableSortOrderUIDArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableSortOrderUIDArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableSortOrderUIDArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableSortOrderUIDArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableSortOrderUIDArchive.SortType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableSortOrderUIDArchive_SortType_IsValid(val))) {
            _internal_set_type(static_cast<::TST::TableSortOrderUIDArchive_SortType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .TST.TableSortOrderUIDArchive.SortRuleArchive rules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableSortOrderUIDArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableSortOrderUIDArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableSortOrderUIDArchive.SortType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .TST.TableSortOrderUIDArchive.SortRuleArchive rules = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rules(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableSortOrderUIDArchive)
  return target;
}

size_t TableSortOrderUIDArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableSortOrderUIDArchive)
  size_t total_size = 0;

  // required .TST.TableSortOrderUIDArchive.SortType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.TableSortOrderUIDArchive.SortRuleArchive rules = 2;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableSortOrderUIDArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableSortOrderUIDArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableSortOrderUIDArchive::GetClassData() const { return &_class_data_; }

void TableSortOrderUIDArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableSortOrderUIDArchive *>(to)->MergeFrom(
      static_cast<const TableSortOrderUIDArchive &>(from));
}


void TableSortOrderUIDArchive::MergeFrom(const TableSortOrderUIDArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TableSortOrderUIDArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableSortOrderUIDArchive::CopyFrom(const TableSortOrderUIDArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableSortOrderUIDArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSortOrderUIDArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rules_)) return false;
  return true;
}

void TableSortOrderUIDArchive::InternalSwap(TableSortOrderUIDArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rules_.InternalSwap(&other->rules_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableSortOrderUIDArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[34]);
}

// ===================================================================

class SortRuleReferenceTrackerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SortRuleReferenceTrackerArchive>()._has_bits_);
  static const ::TSP::Reference& reference_tracker(const SortRuleReferenceTrackerArchive* msg);
  static void set_has_reference_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
SortRuleReferenceTrackerArchive::_Internal::reference_tracker(const SortRuleReferenceTrackerArchive* msg) {
  return *msg->reference_tracker_;
}
void SortRuleReferenceTrackerArchive::clear_reference_tracker() {
  if (reference_tracker_ != nullptr) reference_tracker_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SortRuleReferenceTrackerArchive::SortRuleReferenceTrackerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.SortRuleReferenceTrackerArchive)
}
SortRuleReferenceTrackerArchive::SortRuleReferenceTrackerArchive(const SortRuleReferenceTrackerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reference_tracker()) {
    reference_tracker_ = new ::TSP::Reference(*from.reference_tracker_);
  } else {
    reference_tracker_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.SortRuleReferenceTrackerArchive)
}

inline void SortRuleReferenceTrackerArchive::SharedCtor() {
reference_tracker_ = nullptr;
}

SortRuleReferenceTrackerArchive::~SortRuleReferenceTrackerArchive() {
  // @@protoc_insertion_point(destructor:TST.SortRuleReferenceTrackerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SortRuleReferenceTrackerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete reference_tracker_;
}

void SortRuleReferenceTrackerArchive::ArenaDtor(void* object) {
  SortRuleReferenceTrackerArchive* _this = reinterpret_cast< SortRuleReferenceTrackerArchive* >(object);
  (void)_this;
}
void SortRuleReferenceTrackerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SortRuleReferenceTrackerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SortRuleReferenceTrackerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.SortRuleReferenceTrackerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(reference_tracker_ != nullptr);
    reference_tracker_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortRuleReferenceTrackerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference reference_tracker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_tracker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SortRuleReferenceTrackerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.SortRuleReferenceTrackerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference reference_tracker = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reference_tracker(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.SortRuleReferenceTrackerArchive)
  return target;
}

size_t SortRuleReferenceTrackerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.SortRuleReferenceTrackerArchive)
  size_t total_size = 0;

  // required .TSP.Reference reference_tracker = 1;
  if (_internal_has_reference_tracker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reference_tracker_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SortRuleReferenceTrackerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SortRuleReferenceTrackerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SortRuleReferenceTrackerArchive::GetClassData() const { return &_class_data_; }

void SortRuleReferenceTrackerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SortRuleReferenceTrackerArchive *>(to)->MergeFrom(
      static_cast<const SortRuleReferenceTrackerArchive &>(from));
}


void SortRuleReferenceTrackerArchive::MergeFrom(const SortRuleReferenceTrackerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.SortRuleReferenceTrackerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reference_tracker()) {
    _internal_mutable_reference_tracker()->::TSP::Reference::MergeFrom(from._internal_reference_tracker());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SortRuleReferenceTrackerArchive::CopyFrom(const SortRuleReferenceTrackerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.SortRuleReferenceTrackerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortRuleReferenceTrackerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_reference_tracker()) {
    if (!reference_tracker_->IsInitialized()) return false;
  }
  return true;
}

void SortRuleReferenceTrackerArchive::InternalSwap(SortRuleReferenceTrackerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reference_tracker_, other->reference_tracker_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SortRuleReferenceTrackerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[35]);
}

// ===================================================================

class CellRegion::_Internal {
 public:
};

CellRegion::CellRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cell_ranges_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CellRegion)
}
CellRegion::CellRegion(const CellRegion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cell_ranges_(from.cell_ranges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.CellRegion)
}

inline void CellRegion::SharedCtor() {
}

CellRegion::~CellRegion() {
  // @@protoc_insertion_point(destructor:TST.CellRegion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellRegion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CellRegion::ArenaDtor(void* object) {
  CellRegion* _this = reinterpret_cast< CellRegion* >(object);
  (void)_this;
}
void CellRegion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellRegion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_ranges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellRegion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.CellRange cell_ranges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellRegion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.CellRange cell_ranges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cell_ranges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellRegion)
  return target;
}

size_t CellRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellRegion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.CellRange cell_ranges = 1;
  total_size += 1UL * this->_internal_cell_ranges_size();
  for (const auto& msg : this->cell_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellRegion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellRegion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellRegion::GetClassData() const { return &_class_data_; }

void CellRegion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CellRegion *>(to)->MergeFrom(
      static_cast<const CellRegion &>(from));
}


void CellRegion::MergeFrom(const CellRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CellRegion)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_ranges_.MergeFrom(from.cell_ranges_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellRegion::CopyFrom(const CellRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRegion::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cell_ranges_)) return false;
  return true;
}

void CellRegion::InternalSwap(CellRegion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cell_ranges_.InternalSwap(&other->cell_ranges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellRegion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[36]);
}

// ===================================================================

class CellUIDRegionArchive::_Internal {
 public:
};

void CellUIDRegionArchive::clear_cell_uid_ranges() {
  cell_uid_ranges_.Clear();
}
CellUIDRegionArchive::CellUIDRegionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cell_uid_ranges_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CellUIDRegionArchive)
}
CellUIDRegionArchive::CellUIDRegionArchive(const CellUIDRegionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cell_uid_ranges_(from.cell_uid_ranges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.CellUIDRegionArchive)
}

inline void CellUIDRegionArchive::SharedCtor() {
}

CellUIDRegionArchive::~CellUIDRegionArchive() {
  // @@protoc_insertion_point(destructor:TST.CellUIDRegionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellUIDRegionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CellUIDRegionArchive::ArenaDtor(void* object) {
  CellUIDRegionArchive* _this = reinterpret_cast< CellUIDRegionArchive* >(object);
  (void)_this;
}
void CellUIDRegionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellUIDRegionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellUIDRegionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellUIDRegionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_uid_ranges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellUIDRegionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUIDRectArchive cell_uid_ranges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_uid_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellUIDRegionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellUIDRegionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUIDRectArchive cell_uid_ranges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_uid_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cell_uid_ranges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellUIDRegionArchive)
  return target;
}

size_t CellUIDRegionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellUIDRegionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUIDRectArchive cell_uid_ranges = 1;
  total_size += 1UL * this->_internal_cell_uid_ranges_size();
  for (const auto& msg : this->cell_uid_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellUIDRegionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellUIDRegionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellUIDRegionArchive::GetClassData() const { return &_class_data_; }

void CellUIDRegionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CellUIDRegionArchive *>(to)->MergeFrom(
      static_cast<const CellUIDRegionArchive &>(from));
}


void CellUIDRegionArchive::MergeFrom(const CellUIDRegionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CellUIDRegionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_uid_ranges_.MergeFrom(from.cell_uid_ranges_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellUIDRegionArchive::CopyFrom(const CellUIDRegionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellUIDRegionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellUIDRegionArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cell_uid_ranges_)) return false;
  return true;
}

void CellUIDRegionArchive::InternalSwap(CellUIDRegionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cell_uid_ranges_.InternalSwap(&other->cell_uid_ranges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellUIDRegionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[37]);
}

// ===================================================================

class StructuredTextImportRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<StructuredTextImportRecord>()._has_bits_);
  static const ::TSK::StructuredTextImportSettings& import_settings(const StructuredTextImportRecord* msg);
  static void set_has_import_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_import_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_import_date(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_source_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_encoding(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TST::CellRegion& imported_region(const StructuredTextImportRecord* msg);
  static void set_has_imported_region(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_source_row_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_source_column_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TSK::StructuredTextImportSettings&
StructuredTextImportRecord::_Internal::import_settings(const StructuredTextImportRecord* msg) {
  return *msg->import_settings_;
}
const ::TST::CellRegion&
StructuredTextImportRecord::_Internal::imported_region(const StructuredTextImportRecord* msg) {
  return *msg->imported_region_;
}
void StructuredTextImportRecord::clear_import_settings() {
  if (import_settings_ != nullptr) import_settings_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
StructuredTextImportRecord::StructuredTextImportRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.StructuredTextImportRecord)
}
StructuredTextImportRecord::StructuredTextImportRecord(const StructuredTextImportRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  import_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_import_source()) {
    import_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_import_source(), 
      GetArenaForAllocation());
  }
  source_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source_data()) {
    source_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_import_settings()) {
    import_settings_ = new ::TSK::StructuredTextImportSettings(*from.import_settings_);
  } else {
    import_settings_ = nullptr;
  }
  if (from._internal_has_imported_region()) {
    imported_region_ = new ::TST::CellRegion(*from.imported_region_);
  } else {
    imported_region_ = nullptr;
  }
  ::memcpy(&import_date_, &from.import_date_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&import_date_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:TST.StructuredTextImportRecord)
}

inline void StructuredTextImportRecord::SharedCtor() {
import_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
source_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&import_settings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&import_settings_)) + sizeof(confidence_));
}

StructuredTextImportRecord::~StructuredTextImportRecord() {
  // @@protoc_insertion_point(destructor:TST.StructuredTextImportRecord)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StructuredTextImportRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  import_source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete import_settings_;
  if (this != internal_default_instance()) delete imported_region_;
}

void StructuredTextImportRecord::ArenaDtor(void* object) {
  StructuredTextImportRecord* _this = reinterpret_cast< StructuredTextImportRecord* >(object);
  (void)_this;
}
void StructuredTextImportRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StructuredTextImportRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StructuredTextImportRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StructuredTextImportRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      import_source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      source_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(import_settings_ != nullptr);
      import_settings_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(imported_region_ != nullptr);
      imported_region_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&import_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_column_count_) -
        reinterpret_cast<char*>(&import_date_)) + sizeof(source_column_count_));
  }
  confidence_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StructuredTextImportRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.StructuredTextImportSettings import_settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_import_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string import_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_import_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.StructuredTextImportRecord.import_source");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double import_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_import_date(&has_bits);
          import_date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bytes source_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_source_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 source_encoding = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_source_encoding(&has_bits);
          source_encoding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float confidence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellRegion imported_region = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_imported_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 source_row_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_source_row_count(&has_bits);
          source_row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 source_column_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_source_column_count(&has_bits);
          source_column_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StructuredTextImportRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StructuredTextImportRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.StructuredTextImportSettings import_settings = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::import_settings(this), target, stream);
  }

  // optional string import_source = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_import_source().data(), static_cast<int>(this->_internal_import_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.StructuredTextImportRecord.import_source");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_import_source(), target);
  }

  // optional double import_date = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_import_date(), target);
  }

  // optional bytes source_data = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_source_data(), target);
  }

  // optional uint64 source_encoding = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_source_encoding(), target);
  }

  // optional float confidence = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_confidence(), target);
  }

  // optional .TST.CellRegion imported_region = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::imported_region(this), target, stream);
  }

  // optional uint64 source_row_count = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_source_row_count(), target);
  }

  // optional uint64 source_column_count = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_source_column_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StructuredTextImportRecord)
  return target;
}

size_t StructuredTextImportRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StructuredTextImportRecord)
  size_t total_size = 0;

  // required .TSK.StructuredTextImportSettings import_settings = 1;
  if (_internal_has_import_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *import_settings_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string import_source = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_import_source());
    }

    // optional bytes source_data = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_source_data());
    }

  }
  if (cached_has_bits & 0x000000f8u) {
    // optional .TST.CellRegion imported_region = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *imported_region_);
    }

    // optional double import_date = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint64 source_encoding = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_source_encoding());
    }

    // optional uint64 source_row_count = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_source_row_count());
    }

    // optional uint64 source_column_count = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_source_column_count());
    }

  }
  // optional float confidence = 6;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StructuredTextImportRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StructuredTextImportRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StructuredTextImportRecord::GetClassData() const { return &_class_data_; }

void StructuredTextImportRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StructuredTextImportRecord *>(to)->MergeFrom(
      static_cast<const StructuredTextImportRecord &>(from));
}


void StructuredTextImportRecord::MergeFrom(const StructuredTextImportRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.StructuredTextImportRecord)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_import_source(from._internal_import_source());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_source_data(from._internal_source_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_import_settings()->::TSK::StructuredTextImportSettings::MergeFrom(from._internal_import_settings());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_imported_region()->::TST::CellRegion::MergeFrom(from._internal_imported_region());
    }
    if (cached_has_bits & 0x00000010u) {
      import_date_ = from.import_date_;
    }
    if (cached_has_bits & 0x00000020u) {
      source_encoding_ = from.source_encoding_;
    }
    if (cached_has_bits & 0x00000040u) {
      source_row_count_ = from.source_row_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      source_column_count_ = from.source_column_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_confidence(from._internal_confidence());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StructuredTextImportRecord::CopyFrom(const StructuredTextImportRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StructuredTextImportRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredTextImportRecord::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_import_settings()) {
    if (!import_settings_->IsInitialized()) return false;
  }
  if (_internal_has_imported_region()) {
    if (!imported_region_->IsInitialized()) return false;
  }
  return true;
}

void StructuredTextImportRecord::InternalSwap(StructuredTextImportRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &import_source_, GetArenaForAllocation(),
      &other->import_source_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &source_data_, GetArenaForAllocation(),
      &other->source_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StructuredTextImportRecord, confidence_)
      + sizeof(StructuredTextImportRecord::confidence_)
      - PROTOBUF_FIELD_OFFSET(StructuredTextImportRecord, import_settings_)>(
          reinterpret_cast<char*>(&import_settings_),
          reinterpret_cast<char*>(&other->import_settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StructuredTextImportRecord::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[38]);
}

// ===================================================================

class TableModelArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableModelArchive>()._has_bits_);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_was_cut(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static const ::TSP::Reference& table_style(const TableModelArchive* msg);
  static void set_has_table_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& body_text_style(const TableModelArchive* msg);
  static void set_has_body_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSP::Reference& header_row_text_style(const TableModelArchive* msg);
  static void set_has_header_row_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::Reference& header_column_text_style(const TableModelArchive* msg);
  static void set_has_header_column_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Reference& footer_row_text_style(const TableModelArchive* msg);
  static void set_has_footer_row_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::Reference& body_cell_style(const TableModelArchive* msg);
  static void set_has_body_cell_style(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& header_row_style(const TableModelArchive* msg);
  static void set_has_header_row_style(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& header_column_style(const TableModelArchive* msg);
  static void set_has_header_column_style(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& footer_row_style(const TableModelArchive* msg);
  static void set_has_footer_row_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::Reference& table_name_style(const TableModelArchive* msg);
  static void set_has_table_name_style(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSP::Reference& table_name_shape_style(const TableModelArchive* msg);
  static void set_has_table_name_shape_style(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSP::Reference& table_style_preset(const TableModelArchive* msg);
  static void set_has_table_style_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_preset_index(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static const ::TST::DataStore& base_data_store(const TableModelArchive* msg);
  static void set_has_base_data_store(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& provider(const TableModelArchive* msg);
  static void set_has_provider(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_number_of_rows(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_number_of_columns(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_table_name_enabled(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_table_name_height(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_table_name_border_enabled(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_number_of_header_rows(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_number_of_header_columns(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_number_of_footer_rows(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_header_rows_frozen(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_header_columns_frozen(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_number_of_hidden_rows(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_number_of_hidden_columns(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_number_of_user_hidden_rows(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_number_of_user_hidden_columns(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_number_of_filtered_rows(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_default_row_height(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_default_column_width(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static const ::TST::CellID& origin_offset(const TableModelArchive* msg);
  static void set_has_origin_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_repeating_header_rows_enabled(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_repeating_header_columns_enabled(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_style_apply_clears_all(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static const ::TSP::Reference& hidden_state_formula_owner_for_columns(const TableModelArchive* msg);
  static void set_has_hidden_state_formula_owner_for_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSP::Reference& hidden_state_formula_owner_for_rows(const TableModelArchive* msg);
  static void set_has_hidden_state_formula_owner_for_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSP::Reference& filter_set(const TableModelArchive* msg);
  static void set_has_filter_set(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSP::CFUUIDArchive& conditional_style_formula_owner_id(const TableModelArchive* msg);
  static void set_has_conditional_style_formula_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TST::TableSortOrderArchive& sort_order(const TableModelArchive* msg);
  static void set_has_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TST::SortRuleReferenceTrackerArchive& sort_rule_reference_tracker(const TableModelArchive* msg);
  static void set_has_sort_rule_reference_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::TSP::Reference& base_column_row_uids(const TableModelArchive* msg);
  static void set_has_base_column_row_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TST::MergeOwnerArchive& merge_owner(const TableModelArchive* msg);
  static void set_has_merge_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::TSP::Reference& stroke_sidecar(const TableModelArchive* msg);
  static void set_has_stroke_sidecar(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_preset_needs_strong_ownership(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static const ::TST::StructuredTextImportRecord& text_import_record(const TableModelArchive* msg);
  static void set_has_text_import_record(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSP::Reference& category_level_1_style(const TableModelArchive* msg);
  static void set_has_category_level_1_style(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::TSP::Reference& category_level_2_style(const TableModelArchive* msg);
  static void set_has_category_level_2_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::TSP::Reference& category_level_3_style(const TableModelArchive* msg);
  static void set_has_category_level_3_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::TSP::Reference& category_level_4_style(const TableModelArchive* msg);
  static void set_has_category_level_4_style(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::TSP::Reference& category_level_5_style(const TableModelArchive* msg);
  static void set_has_category_level_5_style(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::TSP::Reference& label_level_1_style(const TableModelArchive* msg);
  static void set_has_label_level_1_style(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::TSP::Reference& label_level_2_style(const TableModelArchive* msg);
  static void set_has_label_level_2_style(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::TSP::Reference& label_level_3_style(const TableModelArchive* msg);
  static void set_has_label_level_3_style(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::TSP::Reference& label_level_4_style(const TableModelArchive* msg);
  static void set_has_label_level_4_style(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::TSP::Reference& label_level_5_style(const TableModelArchive* msg);
  static void set_has_label_level_5_style(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::TSP::Reference& category_level_1_text_style(const TableModelArchive* msg);
  static void set_has_category_level_1_text_style(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::TSP::Reference& category_level_2_text_style(const TableModelArchive* msg);
  static void set_has_category_level_2_text_style(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::TSP::Reference& category_level_3_text_style(const TableModelArchive* msg);
  static void set_has_category_level_3_text_style(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::TSP::Reference& category_level_4_text_style(const TableModelArchive* msg);
  static void set_has_category_level_4_text_style(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::TSP::Reference& category_level_5_text_style(const TableModelArchive* msg);
  static void set_has_category_level_5_text_style(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::TSP::Reference& label_level_1_text_style(const TableModelArchive* msg);
  static void set_has_label_level_1_text_style(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static const ::TSP::Reference& label_level_2_text_style(const TableModelArchive* msg);
  static void set_has_label_level_2_text_style(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static const ::TSP::Reference& label_level_3_text_style(const TableModelArchive* msg);
  static void set_has_label_level_3_text_style(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::TSP::Reference& label_level_4_text_style(const TableModelArchive* msg);
  static void set_has_label_level_4_text_style(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::TSP::Reference& label_level_5_text_style(const TableModelArchive* msg);
  static void set_has_label_level_5_text_style(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static const ::TST::HiddenStatesOwnerArchive& hidden_states_owner(const TableModelArchive* msg);
  static void set_has_hidden_states_owner(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::TST::CategoryOwnerArchive& category_owner(const TableModelArchive* msg);
  static void set_has_category_owner(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::TST::PencilAnnotationOwnerArchive& pencil_annotation_owner(const TableModelArchive* msg);
  static void set_has_pencil_annotation_owner(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_from_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::HauntedOwnerArchive& haunted_owner(const TableModelArchive* msg);
  static void set_has_haunted_owner(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return (((has_bits[0] & 0x0000f7b3) ^ 0x0000f7b3)
       | ((has_bits[1] & 0x18600000) ^ 0x18600000)) != 0;
  }
};

const ::TSP::Reference&
TableModelArchive::_Internal::table_style(const TableModelArchive* msg) {
  return *msg->table_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::body_text_style(const TableModelArchive* msg) {
  return *msg->body_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::header_row_text_style(const TableModelArchive* msg) {
  return *msg->header_row_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::header_column_text_style(const TableModelArchive* msg) {
  return *msg->header_column_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::footer_row_text_style(const TableModelArchive* msg) {
  return *msg->footer_row_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::body_cell_style(const TableModelArchive* msg) {
  return *msg->body_cell_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::header_row_style(const TableModelArchive* msg) {
  return *msg->header_row_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::header_column_style(const TableModelArchive* msg) {
  return *msg->header_column_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::footer_row_style(const TableModelArchive* msg) {
  return *msg->footer_row_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::table_name_style(const TableModelArchive* msg) {
  return *msg->table_name_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::table_name_shape_style(const TableModelArchive* msg) {
  return *msg->table_name_shape_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::table_style_preset(const TableModelArchive* msg) {
  return *msg->table_style_preset_;
}
const ::TST::DataStore&
TableModelArchive::_Internal::base_data_store(const TableModelArchive* msg) {
  return *msg->base_data_store_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::provider(const TableModelArchive* msg) {
  return *msg->provider_;
}
const ::TST::CellID&
TableModelArchive::_Internal::origin_offset(const TableModelArchive* msg) {
  return *msg->origin_offset_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::hidden_state_formula_owner_for_columns(const TableModelArchive* msg) {
  return *msg->hidden_state_formula_owner_for_columns_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::hidden_state_formula_owner_for_rows(const TableModelArchive* msg) {
  return *msg->hidden_state_formula_owner_for_rows_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::filter_set(const TableModelArchive* msg) {
  return *msg->filter_set_;
}
const ::TSP::CFUUIDArchive&
TableModelArchive::_Internal::conditional_style_formula_owner_id(const TableModelArchive* msg) {
  return *msg->conditional_style_formula_owner_id_;
}
const ::TST::TableSortOrderArchive&
TableModelArchive::_Internal::sort_order(const TableModelArchive* msg) {
  return *msg->sort_order_;
}
const ::TST::SortRuleReferenceTrackerArchive&
TableModelArchive::_Internal::sort_rule_reference_tracker(const TableModelArchive* msg) {
  return *msg->sort_rule_reference_tracker_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::base_column_row_uids(const TableModelArchive* msg) {
  return *msg->base_column_row_uids_;
}
const ::TST::MergeOwnerArchive&
TableModelArchive::_Internal::merge_owner(const TableModelArchive* msg) {
  return *msg->merge_owner_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::stroke_sidecar(const TableModelArchive* msg) {
  return *msg->stroke_sidecar_;
}
const ::TST::StructuredTextImportRecord&
TableModelArchive::_Internal::text_import_record(const TableModelArchive* msg) {
  return *msg->text_import_record_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_level_1_style(const TableModelArchive* msg) {
  return *msg->category_level_1_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_level_2_style(const TableModelArchive* msg) {
  return *msg->category_level_2_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_level_3_style(const TableModelArchive* msg) {
  return *msg->category_level_3_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_level_4_style(const TableModelArchive* msg) {
  return *msg->category_level_4_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_level_5_style(const TableModelArchive* msg) {
  return *msg->category_level_5_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::label_level_1_style(const TableModelArchive* msg) {
  return *msg->label_level_1_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::label_level_2_style(const TableModelArchive* msg) {
  return *msg->label_level_2_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::label_level_3_style(const TableModelArchive* msg) {
  return *msg->label_level_3_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::label_level_4_style(const TableModelArchive* msg) {
  return *msg->label_level_4_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::label_level_5_style(const TableModelArchive* msg) {
  return *msg->label_level_5_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_level_1_text_style(const TableModelArchive* msg) {
  return *msg->category_level_1_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_level_2_text_style(const TableModelArchive* msg) {
  return *msg->category_level_2_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_level_3_text_style(const TableModelArchive* msg) {
  return *msg->category_level_3_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_level_4_text_style(const TableModelArchive* msg) {
  return *msg->category_level_4_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_level_5_text_style(const TableModelArchive* msg) {
  return *msg->category_level_5_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::label_level_1_text_style(const TableModelArchive* msg) {
  return *msg->label_level_1_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::label_level_2_text_style(const TableModelArchive* msg) {
  return *msg->label_level_2_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::label_level_3_text_style(const TableModelArchive* msg) {
  return *msg->label_level_3_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::label_level_4_text_style(const TableModelArchive* msg) {
  return *msg->label_level_4_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::label_level_5_text_style(const TableModelArchive* msg) {
  return *msg->label_level_5_text_style_;
}
const ::TST::HiddenStatesOwnerArchive&
TableModelArchive::_Internal::hidden_states_owner(const TableModelArchive* msg) {
  return *msg->hidden_states_owner_;
}
const ::TST::CategoryOwnerArchive&
TableModelArchive::_Internal::category_owner(const TableModelArchive* msg) {
  return *msg->category_owner_;
}
const ::TST::PencilAnnotationOwnerArchive&
TableModelArchive::_Internal::pencil_annotation_owner(const TableModelArchive* msg) {
  return *msg->pencil_annotation_owner_;
}
const ::TSCE::HauntedOwnerArchive&
TableModelArchive::_Internal::haunted_owner(const TableModelArchive* msg) {
  return *msg->haunted_owner_;
}
void TableModelArchive::clear_table_style() {
  if (table_style_ != nullptr) table_style_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void TableModelArchive::clear_body_text_style() {
  if (body_text_style_ != nullptr) body_text_style_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void TableModelArchive::clear_header_row_text_style() {
  if (header_row_text_style_ != nullptr) header_row_text_style_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void TableModelArchive::clear_header_column_text_style() {
  if (header_column_text_style_ != nullptr) header_column_text_style_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void TableModelArchive::clear_footer_row_text_style() {
  if (footer_row_text_style_ != nullptr) footer_row_text_style_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void TableModelArchive::clear_body_cell_style() {
  if (body_cell_style_ != nullptr) body_cell_style_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void TableModelArchive::clear_header_row_style() {
  if (header_row_style_ != nullptr) header_row_style_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void TableModelArchive::clear_header_column_style() {
  if (header_column_style_ != nullptr) header_column_style_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void TableModelArchive::clear_footer_row_style() {
  if (footer_row_style_ != nullptr) footer_row_style_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void TableModelArchive::clear_table_name_style() {
  if (table_name_style_ != nullptr) table_name_style_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void TableModelArchive::clear_table_name_shape_style() {
  if (table_name_shape_style_ != nullptr) table_name_shape_style_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void TableModelArchive::clear_table_style_preset() {
  if (table_style_preset_ != nullptr) table_style_preset_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
void TableModelArchive::clear_provider() {
  if (provider_ != nullptr) provider_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void TableModelArchive::clear_hidden_state_formula_owner_for_columns() {
  if (hidden_state_formula_owner_for_columns_ != nullptr) hidden_state_formula_owner_for_columns_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void TableModelArchive::clear_hidden_state_formula_owner_for_rows() {
  if (hidden_state_formula_owner_for_rows_ != nullptr) hidden_state_formula_owner_for_rows_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void TableModelArchive::clear_filter_set() {
  if (filter_set_ != nullptr) filter_set_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
void TableModelArchive::clear_conditional_style_formula_owner_id() {
  if (conditional_style_formula_owner_id_ != nullptr) conditional_style_formula_owner_id_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
void TableModelArchive::clear_base_column_row_uids() {
  if (base_column_row_uids_ != nullptr) base_column_row_uids_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
void TableModelArchive::clear_stroke_sidecar() {
  if (stroke_sidecar_ != nullptr) stroke_sidecar_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
void TableModelArchive::clear_category_level_1_style() {
  if (category_level_1_style_ != nullptr) category_level_1_style_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
void TableModelArchive::clear_category_level_2_style() {
  if (category_level_2_style_ != nullptr) category_level_2_style_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
void TableModelArchive::clear_category_level_3_style() {
  if (category_level_3_style_ != nullptr) category_level_3_style_->Clear();
  _has_bits_[0] &= ~0x80000000u;
}
void TableModelArchive::clear_category_level_4_style() {
  if (category_level_4_style_ != nullptr) category_level_4_style_->Clear();
  _has_bits_[1] &= ~0x00000001u;
}
void TableModelArchive::clear_category_level_5_style() {
  if (category_level_5_style_ != nullptr) category_level_5_style_->Clear();
  _has_bits_[1] &= ~0x00000002u;
}
void TableModelArchive::clear_label_level_1_style() {
  if (label_level_1_style_ != nullptr) label_level_1_style_->Clear();
  _has_bits_[1] &= ~0x00000100u;
}
void TableModelArchive::clear_label_level_2_style() {
  if (label_level_2_style_ != nullptr) label_level_2_style_->Clear();
  _has_bits_[1] &= ~0x00000200u;
}
void TableModelArchive::clear_label_level_3_style() {
  if (label_level_3_style_ != nullptr) label_level_3_style_->Clear();
  _has_bits_[1] &= ~0x00000400u;
}
void TableModelArchive::clear_label_level_4_style() {
  if (label_level_4_style_ != nullptr) label_level_4_style_->Clear();
  _has_bits_[1] &= ~0x00000800u;
}
void TableModelArchive::clear_label_level_5_style() {
  if (label_level_5_style_ != nullptr) label_level_5_style_->Clear();
  _has_bits_[1] &= ~0x00001000u;
}
void TableModelArchive::clear_category_level_1_text_style() {
  if (category_level_1_text_style_ != nullptr) category_level_1_text_style_->Clear();
  _has_bits_[1] &= ~0x00000004u;
}
void TableModelArchive::clear_category_level_2_text_style() {
  if (category_level_2_text_style_ != nullptr) category_level_2_text_style_->Clear();
  _has_bits_[1] &= ~0x00000008u;
}
void TableModelArchive::clear_category_level_3_text_style() {
  if (category_level_3_text_style_ != nullptr) category_level_3_text_style_->Clear();
  _has_bits_[1] &= ~0x00000010u;
}
void TableModelArchive::clear_category_level_4_text_style() {
  if (category_level_4_text_style_ != nullptr) category_level_4_text_style_->Clear();
  _has_bits_[1] &= ~0x00000020u;
}
void TableModelArchive::clear_category_level_5_text_style() {
  if (category_level_5_text_style_ != nullptr) category_level_5_text_style_->Clear();
  _has_bits_[1] &= ~0x00000040u;
}
void TableModelArchive::clear_label_level_1_text_style() {
  if (label_level_1_text_style_ != nullptr) label_level_1_text_style_->Clear();
  _has_bits_[1] &= ~0x00002000u;
}
void TableModelArchive::clear_label_level_2_text_style() {
  if (label_level_2_text_style_ != nullptr) label_level_2_text_style_->Clear();
  _has_bits_[1] &= ~0x00004000u;
}
void TableModelArchive::clear_label_level_3_text_style() {
  if (label_level_3_text_style_ != nullptr) label_level_3_text_style_->Clear();
  _has_bits_[1] &= ~0x00008000u;
}
void TableModelArchive::clear_label_level_4_text_style() {
  if (label_level_4_text_style_ != nullptr) label_level_4_text_style_->Clear();
  _has_bits_[1] &= ~0x00010000u;
}
void TableModelArchive::clear_label_level_5_text_style() {
  if (label_level_5_text_style_ != nullptr) label_level_5_text_style_->Clear();
  _has_bits_[1] &= ~0x00020000u;
}
void TableModelArchive::clear_haunted_owner() {
  if (haunted_owner_ != nullptr) haunted_owner_->Clear();
  _has_bits_[1] &= ~0x00100000u;
}
TableModelArchive::TableModelArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TableModelArchive)
}
TableModelArchive::TableModelArchive(const TableModelArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_table_id()) {
    table_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_id(), 
      GetArenaForAllocation());
  }
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_table_name()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  from_table_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_table_id()) {
    from_table_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from_table_id(), 
      GetArenaForAllocation());
  }
  from_group_by_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_group_by_uid()) {
    from_group_by_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from_group_by_uid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_table_style()) {
    table_style_ = new ::TSP::Reference(*from.table_style_);
  } else {
    table_style_ = nullptr;
  }
  if (from._internal_has_base_data_store()) {
    base_data_store_ = new ::TST::DataStore(*from.base_data_store_);
  } else {
    base_data_store_ = nullptr;
  }
  if (from._internal_has_provider()) {
    provider_ = new ::TSP::Reference(*from.provider_);
  } else {
    provider_ = nullptr;
  }
  if (from._internal_has_body_cell_style()) {
    body_cell_style_ = new ::TSP::Reference(*from.body_cell_style_);
  } else {
    body_cell_style_ = nullptr;
  }
  if (from._internal_has_header_row_style()) {
    header_row_style_ = new ::TSP::Reference(*from.header_row_style_);
  } else {
    header_row_style_ = nullptr;
  }
  if (from._internal_has_header_column_style()) {
    header_column_style_ = new ::TSP::Reference(*from.header_column_style_);
  } else {
    header_column_style_ = nullptr;
  }
  if (from._internal_has_footer_row_style()) {
    footer_row_style_ = new ::TSP::Reference(*from.footer_row_style_);
  } else {
    footer_row_style_ = nullptr;
  }
  if (from._internal_has_origin_offset()) {
    origin_offset_ = new ::TST::CellID(*from.origin_offset_);
  } else {
    origin_offset_ = nullptr;
  }
  if (from._internal_has_body_text_style()) {
    body_text_style_ = new ::TSP::Reference(*from.body_text_style_);
  } else {
    body_text_style_ = nullptr;
  }
  if (from._internal_has_header_row_text_style()) {
    header_row_text_style_ = new ::TSP::Reference(*from.header_row_text_style_);
  } else {
    header_row_text_style_ = nullptr;
  }
  if (from._internal_has_header_column_text_style()) {
    header_column_text_style_ = new ::TSP::Reference(*from.header_column_text_style_);
  } else {
    header_column_text_style_ = nullptr;
  }
  if (from._internal_has_footer_row_text_style()) {
    footer_row_text_style_ = new ::TSP::Reference(*from.footer_row_text_style_);
  } else {
    footer_row_text_style_ = nullptr;
  }
  if (from._internal_has_table_name_style()) {
    table_name_style_ = new ::TSP::Reference(*from.table_name_style_);
  } else {
    table_name_style_ = nullptr;
  }
  if (from._internal_has_hidden_state_formula_owner_for_columns()) {
    hidden_state_formula_owner_for_columns_ = new ::TSP::Reference(*from.hidden_state_formula_owner_for_columns_);
  } else {
    hidden_state_formula_owner_for_columns_ = nullptr;
  }
  if (from._internal_has_hidden_state_formula_owner_for_rows()) {
    hidden_state_formula_owner_for_rows_ = new ::TSP::Reference(*from.hidden_state_formula_owner_for_rows_);
  } else {
    hidden_state_formula_owner_for_rows_ = nullptr;
  }
  if (from._internal_has_table_name_shape_style()) {
    table_name_shape_style_ = new ::TSP::Reference(*from.table_name_shape_style_);
  } else {
    table_name_shape_style_ = nullptr;
  }
  if (from._internal_has_filter_set()) {
    filter_set_ = new ::TSP::Reference(*from.filter_set_);
  } else {
    filter_set_ = nullptr;
  }
  if (from._internal_has_conditional_style_formula_owner_id()) {
    conditional_style_formula_owner_id_ = new ::TSP::CFUUIDArchive(*from.conditional_style_formula_owner_id_);
  } else {
    conditional_style_formula_owner_id_ = nullptr;
  }
  if (from._internal_has_sort_order()) {
    sort_order_ = new ::TST::TableSortOrderArchive(*from.sort_order_);
  } else {
    sort_order_ = nullptr;
  }
  if (from._internal_has_sort_rule_reference_tracker()) {
    sort_rule_reference_tracker_ = new ::TST::SortRuleReferenceTrackerArchive(*from.sort_rule_reference_tracker_);
  } else {
    sort_rule_reference_tracker_ = nullptr;
  }
  if (from._internal_has_base_column_row_uids()) {
    base_column_row_uids_ = new ::TSP::Reference(*from.base_column_row_uids_);
  } else {
    base_column_row_uids_ = nullptr;
  }
  if (from._internal_has_merge_owner()) {
    merge_owner_ = new ::TST::MergeOwnerArchive(*from.merge_owner_);
  } else {
    merge_owner_ = nullptr;
  }
  if (from._internal_has_table_style_preset()) {
    table_style_preset_ = new ::TSP::Reference(*from.table_style_preset_);
  } else {
    table_style_preset_ = nullptr;
  }
  if (from._internal_has_stroke_sidecar()) {
    stroke_sidecar_ = new ::TSP::Reference(*from.stroke_sidecar_);
  } else {
    stroke_sidecar_ = nullptr;
  }
  if (from._internal_has_text_import_record()) {
    text_import_record_ = new ::TST::StructuredTextImportRecord(*from.text_import_record_);
  } else {
    text_import_record_ = nullptr;
  }
  if (from._internal_has_category_level_1_style()) {
    category_level_1_style_ = new ::TSP::Reference(*from.category_level_1_style_);
  } else {
    category_level_1_style_ = nullptr;
  }
  if (from._internal_has_category_level_2_style()) {
    category_level_2_style_ = new ::TSP::Reference(*from.category_level_2_style_);
  } else {
    category_level_2_style_ = nullptr;
  }
  if (from._internal_has_category_level_3_style()) {
    category_level_3_style_ = new ::TSP::Reference(*from.category_level_3_style_);
  } else {
    category_level_3_style_ = nullptr;
  }
  if (from._internal_has_category_level_4_style()) {
    category_level_4_style_ = new ::TSP::Reference(*from.category_level_4_style_);
  } else {
    category_level_4_style_ = nullptr;
  }
  if (from._internal_has_category_level_5_style()) {
    category_level_5_style_ = new ::TSP::Reference(*from.category_level_5_style_);
  } else {
    category_level_5_style_ = nullptr;
  }
  if (from._internal_has_category_level_1_text_style()) {
    category_level_1_text_style_ = new ::TSP::Reference(*from.category_level_1_text_style_);
  } else {
    category_level_1_text_style_ = nullptr;
  }
  if (from._internal_has_category_level_2_text_style()) {
    category_level_2_text_style_ = new ::TSP::Reference(*from.category_level_2_text_style_);
  } else {
    category_level_2_text_style_ = nullptr;
  }
  if (from._internal_has_category_level_3_text_style()) {
    category_level_3_text_style_ = new ::TSP::Reference(*from.category_level_3_text_style_);
  } else {
    category_level_3_text_style_ = nullptr;
  }
  if (from._internal_has_category_level_4_text_style()) {
    category_level_4_text_style_ = new ::TSP::Reference(*from.category_level_4_text_style_);
  } else {
    category_level_4_text_style_ = nullptr;
  }
  if (from._internal_has_category_level_5_text_style()) {
    category_level_5_text_style_ = new ::TSP::Reference(*from.category_level_5_text_style_);
  } else {
    category_level_5_text_style_ = nullptr;
  }
  if (from._internal_has_hidden_states_owner()) {
    hidden_states_owner_ = new ::TST::HiddenStatesOwnerArchive(*from.hidden_states_owner_);
  } else {
    hidden_states_owner_ = nullptr;
  }
  if (from._internal_has_label_level_1_style()) {
    label_level_1_style_ = new ::TSP::Reference(*from.label_level_1_style_);
  } else {
    label_level_1_style_ = nullptr;
  }
  if (from._internal_has_label_level_2_style()) {
    label_level_2_style_ = new ::TSP::Reference(*from.label_level_2_style_);
  } else {
    label_level_2_style_ = nullptr;
  }
  if (from._internal_has_label_level_3_style()) {
    label_level_3_style_ = new ::TSP::Reference(*from.label_level_3_style_);
  } else {
    label_level_3_style_ = nullptr;
  }
  if (from._internal_has_label_level_4_style()) {
    label_level_4_style_ = new ::TSP::Reference(*from.label_level_4_style_);
  } else {
    label_level_4_style_ = nullptr;
  }
  if (from._internal_has_label_level_5_style()) {
    label_level_5_style_ = new ::TSP::Reference(*from.label_level_5_style_);
  } else {
    label_level_5_style_ = nullptr;
  }
  if (from._internal_has_label_level_1_text_style()) {
    label_level_1_text_style_ = new ::TSP::Reference(*from.label_level_1_text_style_);
  } else {
    label_level_1_text_style_ = nullptr;
  }
  if (from._internal_has_label_level_2_text_style()) {
    label_level_2_text_style_ = new ::TSP::Reference(*from.label_level_2_text_style_);
  } else {
    label_level_2_text_style_ = nullptr;
  }
  if (from._internal_has_label_level_3_text_style()) {
    label_level_3_text_style_ = new ::TSP::Reference(*from.label_level_3_text_style_);
  } else {
    label_level_3_text_style_ = nullptr;
  }
  if (from._internal_has_label_level_4_text_style()) {
    label_level_4_text_style_ = new ::TSP::Reference(*from.label_level_4_text_style_);
  } else {
    label_level_4_text_style_ = nullptr;
  }
  if (from._internal_has_label_level_5_text_style()) {
    label_level_5_text_style_ = new ::TSP::Reference(*from.label_level_5_text_style_);
  } else {
    label_level_5_text_style_ = nullptr;
  }
  if (from._internal_has_category_owner()) {
    category_owner_ = new ::TST::CategoryOwnerArchive(*from.category_owner_);
  } else {
    category_owner_ = nullptr;
  }
  if (from._internal_has_pencil_annotation_owner()) {
    pencil_annotation_owner_ = new ::TST::PencilAnnotationOwnerArchive(*from.pencil_annotation_owner_);
  } else {
    pencil_annotation_owner_ = nullptr;
  }
  if (from._internal_has_haunted_owner()) {
    haunted_owner_ = new ::TSCE::HauntedOwnerArchive(*from.haunted_owner_);
  } else {
    haunted_owner_ = nullptr;
  }
  ::memcpy(&number_of_rows_, &from.number_of_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&preset_needs_strong_ownership_) -
    reinterpret_cast<char*>(&number_of_rows_)) + sizeof(preset_needs_strong_ownership_));
  // @@protoc_insertion_point(copy_constructor:TST.TableModelArchive)
}

inline void TableModelArchive::SharedCtor() {
table_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
from_table_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
from_group_by_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&table_style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&preset_needs_strong_ownership_) -
    reinterpret_cast<char*>(&table_style_)) + sizeof(preset_needs_strong_ownership_));
}

TableModelArchive::~TableModelArchive() {
  // @@protoc_insertion_point(destructor:TST.TableModelArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableModelArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_table_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_group_by_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete table_style_;
  if (this != internal_default_instance()) delete base_data_store_;
  if (this != internal_default_instance()) delete provider_;
  if (this != internal_default_instance()) delete body_cell_style_;
  if (this != internal_default_instance()) delete header_row_style_;
  if (this != internal_default_instance()) delete header_column_style_;
  if (this != internal_default_instance()) delete footer_row_style_;
  if (this != internal_default_instance()) delete origin_offset_;
  if (this != internal_default_instance()) delete body_text_style_;
  if (this != internal_default_instance()) delete header_row_text_style_;
  if (this != internal_default_instance()) delete header_column_text_style_;
  if (this != internal_default_instance()) delete footer_row_text_style_;
  if (this != internal_default_instance()) delete table_name_style_;
  if (this != internal_default_instance()) delete hidden_state_formula_owner_for_columns_;
  if (this != internal_default_instance()) delete hidden_state_formula_owner_for_rows_;
  if (this != internal_default_instance()) delete table_name_shape_style_;
  if (this != internal_default_instance()) delete filter_set_;
  if (this != internal_default_instance()) delete conditional_style_formula_owner_id_;
  if (this != internal_default_instance()) delete sort_order_;
  if (this != internal_default_instance()) delete sort_rule_reference_tracker_;
  if (this != internal_default_instance()) delete base_column_row_uids_;
  if (this != internal_default_instance()) delete merge_owner_;
  if (this != internal_default_instance()) delete table_style_preset_;
  if (this != internal_default_instance()) delete stroke_sidecar_;
  if (this != internal_default_instance()) delete text_import_record_;
  if (this != internal_default_instance()) delete category_level_1_style_;
  if (this != internal_default_instance()) delete category_level_2_style_;
  if (this != internal_default_instance()) delete category_level_3_style_;
  if (this != internal_default_instance()) delete category_level_4_style_;
  if (this != internal_default_instance()) delete category_level_5_style_;
  if (this != internal_default_instance()) delete category_level_1_text_style_;
  if (this != internal_default_instance()) delete category_level_2_text_style_;
  if (this != internal_default_instance()) delete category_level_3_text_style_;
  if (this != internal_default_instance()) delete category_level_4_text_style_;
  if (this != internal_default_instance()) delete category_level_5_text_style_;
  if (this != internal_default_instance()) delete hidden_states_owner_;
  if (this != internal_default_instance()) delete label_level_1_style_;
  if (this != internal_default_instance()) delete label_level_2_style_;
  if (this != internal_default_instance()) delete label_level_3_style_;
  if (this != internal_default_instance()) delete label_level_4_style_;
  if (this != internal_default_instance()) delete label_level_5_style_;
  if (this != internal_default_instance()) delete label_level_1_text_style_;
  if (this != internal_default_instance()) delete label_level_2_text_style_;
  if (this != internal_default_instance()) delete label_level_3_text_style_;
  if (this != internal_default_instance()) delete label_level_4_text_style_;
  if (this != internal_default_instance()) delete label_level_5_text_style_;
  if (this != internal_default_instance()) delete category_owner_;
  if (this != internal_default_instance()) delete pencil_annotation_owner_;
  if (this != internal_default_instance()) delete haunted_owner_;
}

void TableModelArchive::ArenaDtor(void* object) {
  TableModelArchive* _this = reinterpret_cast< TableModelArchive* >(object);
  (void)_this;
}
void TableModelArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableModelArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableModelArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableModelArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      table_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      table_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      from_table_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      from_group_by_uid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(table_style_ != nullptr);
      table_style_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(base_data_store_ != nullptr);
      base_data_store_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(provider_ != nullptr);
      provider_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(body_cell_style_ != nullptr);
      body_cell_style_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(header_row_style_ != nullptr);
      header_row_style_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(header_column_style_ != nullptr);
      header_column_style_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(footer_row_style_ != nullptr);
      footer_row_style_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(origin_offset_ != nullptr);
      origin_offset_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(body_text_style_ != nullptr);
      body_text_style_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(header_row_text_style_ != nullptr);
      header_row_text_style_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(header_column_text_style_ != nullptr);
      header_column_text_style_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(footer_row_text_style_ != nullptr);
      footer_row_text_style_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(table_name_style_ != nullptr);
      table_name_style_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(hidden_state_formula_owner_for_columns_ != nullptr);
      hidden_state_formula_owner_for_columns_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(hidden_state_formula_owner_for_rows_ != nullptr);
      hidden_state_formula_owner_for_rows_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(table_name_shape_style_ != nullptr);
      table_name_shape_style_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(filter_set_ != nullptr);
      filter_set_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(conditional_style_formula_owner_id_ != nullptr);
      conditional_style_formula_owner_id_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(sort_order_ != nullptr);
      sort_order_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(sort_rule_reference_tracker_ != nullptr);
      sort_rule_reference_tracker_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(base_column_row_uids_ != nullptr);
      base_column_row_uids_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(merge_owner_ != nullptr);
      merge_owner_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(table_style_preset_ != nullptr);
      table_style_preset_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(stroke_sidecar_ != nullptr);
      stroke_sidecar_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(text_import_record_ != nullptr);
      text_import_record_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(category_level_1_style_ != nullptr);
      category_level_1_style_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(category_level_2_style_ != nullptr);
      category_level_2_style_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(category_level_3_style_ != nullptr);
      category_level_3_style_->Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(category_level_4_style_ != nullptr);
      category_level_4_style_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(category_level_5_style_ != nullptr);
      category_level_5_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(category_level_1_text_style_ != nullptr);
      category_level_1_text_style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(category_level_2_text_style_ != nullptr);
      category_level_2_text_style_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(category_level_3_text_style_ != nullptr);
      category_level_3_text_style_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(category_level_4_text_style_ != nullptr);
      category_level_4_text_style_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(category_level_5_text_style_ != nullptr);
      category_level_5_text_style_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(hidden_states_owner_ != nullptr);
      hidden_states_owner_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(label_level_1_style_ != nullptr);
      label_level_1_style_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(label_level_2_style_ != nullptr);
      label_level_2_style_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(label_level_3_style_ != nullptr);
      label_level_3_style_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(label_level_4_style_ != nullptr);
      label_level_4_style_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(label_level_5_style_ != nullptr);
      label_level_5_style_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(label_level_1_text_style_ != nullptr);
      label_level_1_text_style_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(label_level_2_text_style_ != nullptr);
      label_level_2_text_style_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(label_level_3_text_style_ != nullptr);
      label_level_3_text_style_->Clear();
    }
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(label_level_4_text_style_ != nullptr);
      label_level_4_text_style_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(label_level_5_text_style_ != nullptr);
      label_level_5_text_style_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(category_owner_ != nullptr);
      category_owner_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(pencil_annotation_owner_ != nullptr);
      pencil_annotation_owner_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(haunted_owner_ != nullptr);
      haunted_owner_->Clear();
    }
  }
  if (cached_has_bits & 0x00e00000u) {
    ::memset(&number_of_rows_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_header_rows_) -
        reinterpret_cast<char*>(&number_of_rows_)) + sizeof(number_of_header_rows_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&number_of_header_columns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&repeating_header_rows_enabled_) -
        reinterpret_cast<char*>(&number_of_header_columns_)) + sizeof(repeating_header_rows_enabled_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&repeating_header_columns_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&table_name_height_) -
        reinterpret_cast<char*>(&repeating_header_columns_enabled_)) + sizeof(table_name_height_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&number_of_filtered_rows_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preset_needs_strong_ownership_) -
        reinterpret_cast<char*>(&number_of_filtered_rows_)) + sizeof(preset_needs_strong_ownership_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableModelArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_table_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.TableModelArchive.table_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference table_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.DataStore base_data_store = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_data_store(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference provider = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 number_of_rows = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_number_of_rows(&_has_bits_);
          number_of_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 number_of_columns = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_number_of_columns(&_has_bits_);
          number_of_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string table_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.TableModelArchive.table_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_header_rows = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_number_of_header_rows(&_has_bits_);
          number_of_header_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_header_columns = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_number_of_header_columns(&_has_bits_);
          number_of_header_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_footer_rows = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_number_of_footer_rows(&_has_bits_);
          number_of_footer_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool header_rows_frozen = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_header_rows_frozen(&_has_bits_);
          header_rows_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool header_columns_frozen = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_header_columns_frozen(&_has_bits_);
          header_columns_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_hidden_rows = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_number_of_hidden_rows(&_has_bits_);
          number_of_hidden_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_hidden_columns = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_number_of_hidden_columns(&_has_bits_);
          number_of_hidden_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double default_row_height = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_default_row_height(&_has_bits_);
          default_row_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double default_column_width = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_default_column_width(&_has_bits_);
          default_column_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference body_cell_style = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_cell_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference header_row_style = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_row_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference header_column_style = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_column_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference footer_row_style = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer_row_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool table_name_enabled = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_table_name_enabled(&_has_bits_);
          table_name_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellID origin_offset = 23 [deprecated = true];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference body_text_style = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference header_row_text_style = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_row_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference header_column_text_style = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_column_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference footer_row_text_style = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer_row_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 preset_index = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_preset_index(&_has_bits_);
          preset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool repeating_header_rows_enabled = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_repeating_header_rows_enabled(&_has_bits_);
          repeating_header_rows_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference table_name_style = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_name_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool style_apply_clears_all = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_style_apply_clears_all(&_has_bits_);
          style_apply_clears_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool repeating_header_columns_enabled = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_repeating_header_columns_enabled(&_has_bits_);
          repeating_header_columns_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double table_name_height = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_table_name_height(&_has_bits_);
          table_name_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference hidden_state_formula_owner_for_columns = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hidden_state_formula_owner_for_columns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference hidden_state_formula_owner_for_rows = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hidden_state_formula_owner_for_rows(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference table_name_shape_style = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_name_shape_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool table_name_border_enabled = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_table_name_border_enabled(&_has_bits_);
          table_name_border_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference filter_set = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.CFUUIDArchive conditional_style_formula_owner_id = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_conditional_style_formula_owner_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_filtered_rows = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_number_of_filtered_rows(&_has_bits_);
          number_of_filtered_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_user_hidden_rows = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_number_of_user_hidden_rows(&_has_bits_);
          number_of_user_hidden_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_user_hidden_columns = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_number_of_user_hidden_columns(&_has_bits_);
          number_of_user_hidden_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string from_table_id = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_from_table_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.TableModelArchive.from_table_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.TableSortOrderArchive sort_order = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_sort_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.SortRuleReferenceTrackerArchive sort_rule_reference_tracker = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sort_rule_reference_tracker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference base_column_row_uids = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_column_row_uids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.MergeOwnerArchive merge_owner = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_merge_owner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference table_style_preset = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_style_preset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference stroke_sidecar = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke_sidecar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool was_cut = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_was_cut(&_has_bits_);
          was_cut_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool preset_needs_strong_ownership = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_preset_needs_strong_ownership(&_has_bits_);
          preset_needs_strong_ownership_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.StructuredTextImportRecord text_import_record = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_import_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_1_style = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_1_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_2_style = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_2_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_3_style = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_3_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_4_style = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_4_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_5_style = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_5_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_1_text_style = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_1_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_2_text_style = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_2_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_3_text_style = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_3_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_4_text_style = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_4_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_5_text_style = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_5_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.HiddenStatesOwnerArchive hidden_states_owner = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_hidden_states_owner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_1_style = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_1_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_2_style = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_2_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_3_style = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_3_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_4_style = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_4_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_5_style = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_5_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_1_text_style = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_1_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_2_text_style = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_2_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_3_text_style = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_3_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_4_text_style = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_4_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_5_text_style = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_5_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CategoryOwnerArchive category_owner = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_owner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.PencilAnnotationOwnerArchive pencil_annotation_owner = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_pencil_annotation_owner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string from_group_by_uid = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_from_group_by_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.TableModelArchive.from_group_by_uid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.HauntedOwnerArchive haunted_owner = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_haunted_owner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableModelArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableModelArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_table_id().data(), static_cast<int>(this->_internal_table_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.TableModelArchive.table_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_table_id(), target);
  }

  // required .TSP.Reference table_style = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::table_style(this), target, stream);
  }

  // required .TST.DataStore base_data_store = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::base_data_store(this), target, stream);
  }

  // optional .TSP.Reference provider = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::provider(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 number_of_rows = 6;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_number_of_rows(), target);
  }

  // required uint32 number_of_columns = 7;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_number_of_columns(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required string table_name = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.TableModelArchive.table_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_table_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 number_of_header_rows = 9;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_number_of_header_rows(), target);
  }

  // optional uint32 number_of_header_columns = 10;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_number_of_header_columns(), target);
  }

  // optional uint32 number_of_footer_rows = 11;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_number_of_footer_rows(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool header_rows_frozen = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_header_rows_frozen(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool header_columns_frozen = 13;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_header_columns_frozen(), target);
  }

  // optional uint32 number_of_hidden_rows = 14;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_number_of_hidden_rows(), target);
  }

  // optional uint32 number_of_hidden_columns = 15;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_number_of_hidden_columns(), target);
  }

  // required double default_row_height = 16;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_default_row_height(), target);
  }

  // required double default_column_width = 17;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_default_column_width(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference body_cell_style = 18;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::body_cell_style(this), target, stream);
  }

  // required .TSP.Reference header_row_style = 19;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::header_row_style(this), target, stream);
  }

  // required .TSP.Reference header_column_style = 20;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::header_column_style(this), target, stream);
  }

  // required .TSP.Reference footer_row_style = 21;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::footer_row_style(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool table_name_enabled = 22;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_table_name_enabled(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TST.CellID origin_offset = 23 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::origin_offset(this), target, stream);
  }

  // required .TSP.Reference body_text_style = 24;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::body_text_style(this), target, stream);
  }

  // required .TSP.Reference header_row_text_style = 25;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::header_row_text_style(this), target, stream);
  }

  // required .TSP.Reference header_column_text_style = 26;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::header_column_text_style(this), target, stream);
  }

  // required .TSP.Reference footer_row_text_style = 27;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::footer_row_text_style(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 preset_index = 28;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_preset_index(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool repeating_header_rows_enabled = 29;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_repeating_header_rows_enabled(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference table_name_style = 30;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::table_name_style(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool style_apply_clears_all = 31;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_style_apply_clears_all(), target);
  }

  // optional bool repeating_header_columns_enabled = 32;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_repeating_header_columns_enabled(), target);
  }

  // optional double table_name_height = 33;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(33, this->_internal_table_name_height(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference hidden_state_formula_owner_for_columns = 34;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::hidden_state_formula_owner_for_columns(this), target, stream);
  }

  // optional .TSP.Reference hidden_state_formula_owner_for_rows = 35;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::hidden_state_formula_owner_for_rows(this), target, stream);
  }

  // optional .TSP.Reference table_name_shape_style = 36;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::table_name_shape_style(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool table_name_border_enabled = 37;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->_internal_table_name_border_enabled(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference filter_set = 38;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::filter_set(this), target, stream);
  }

  // optional .TSP.CFUUIDArchive conditional_style_formula_owner_id = 39;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::conditional_style_formula_owner_id(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 number_of_filtered_rows = 40;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_number_of_filtered_rows(), target);
  }

  // optional uint32 number_of_user_hidden_rows = 41;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_number_of_user_hidden_rows(), target);
  }

  // optional uint32 number_of_user_hidden_columns = 42;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_number_of_user_hidden_columns(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string from_table_id = 43;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_table_id().data(), static_cast<int>(this->_internal_from_table_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.TableModelArchive.from_table_id");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_from_table_id(), target);
  }

  // optional .TST.TableSortOrderArchive sort_order = 44;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::sort_order(this), target, stream);
  }

  // optional .TST.SortRuleReferenceTrackerArchive sort_rule_reference_tracker = 45;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::sort_rule_reference_tracker(this), target, stream);
  }

  // optional .TSP.Reference base_column_row_uids = 46;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        46, _Internal::base_column_row_uids(this), target, stream);
  }

  // optional .TST.MergeOwnerArchive merge_owner = 47;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        47, _Internal::merge_owner(this), target, stream);
  }

  // optional .TSP.Reference table_style_preset = 48;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        48, _Internal::table_style_preset(this), target, stream);
  }

  // optional .TSP.Reference stroke_sidecar = 49;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        49, _Internal::stroke_sidecar(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool was_cut = 50;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_was_cut(), target);
  }

  // optional bool preset_needs_strong_ownership = 51;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(51, this->_internal_preset_needs_strong_ownership(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TST.StructuredTextImportRecord text_import_record = 52;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        52, _Internal::text_import_record(this), target, stream);
  }

  // optional .TSP.Reference category_level_1_style = 60;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        60, _Internal::category_level_1_style(this), target, stream);
  }

  // optional .TSP.Reference category_level_2_style = 61;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        61, _Internal::category_level_2_style(this), target, stream);
  }

  // optional .TSP.Reference category_level_3_style = 62;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        62, _Internal::category_level_3_style(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional .TSP.Reference category_level_4_style = 63;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        63, _Internal::category_level_4_style(this), target, stream);
  }

  // optional .TSP.Reference category_level_5_style = 64;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        64, _Internal::category_level_5_style(this), target, stream);
  }

  // optional .TSP.Reference category_level_1_text_style = 65;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        65, _Internal::category_level_1_text_style(this), target, stream);
  }

  // optional .TSP.Reference category_level_2_text_style = 66;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        66, _Internal::category_level_2_text_style(this), target, stream);
  }

  // optional .TSP.Reference category_level_3_text_style = 67;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        67, _Internal::category_level_3_text_style(this), target, stream);
  }

  // optional .TSP.Reference category_level_4_text_style = 68;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        68, _Internal::category_level_4_text_style(this), target, stream);
  }

  // optional .TSP.Reference category_level_5_text_style = 69;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        69, _Internal::category_level_5_text_style(this), target, stream);
  }

  // optional .TST.HiddenStatesOwnerArchive hidden_states_owner = 70;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        70, _Internal::hidden_states_owner(this), target, stream);
  }

  // optional .TSP.Reference label_level_1_style = 71;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        71, _Internal::label_level_1_style(this), target, stream);
  }

  // optional .TSP.Reference label_level_2_style = 72;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        72, _Internal::label_level_2_style(this), target, stream);
  }

  // optional .TSP.Reference label_level_3_style = 73;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        73, _Internal::label_level_3_style(this), target, stream);
  }

  // optional .TSP.Reference label_level_4_style = 74;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        74, _Internal::label_level_4_style(this), target, stream);
  }

  // optional .TSP.Reference label_level_5_style = 75;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        75, _Internal::label_level_5_style(this), target, stream);
  }

  // optional .TSP.Reference label_level_1_text_style = 76;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        76, _Internal::label_level_1_text_style(this), target, stream);
  }

  // optional .TSP.Reference label_level_2_text_style = 77;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        77, _Internal::label_level_2_text_style(this), target, stream);
  }

  // optional .TSP.Reference label_level_3_text_style = 78;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        78, _Internal::label_level_3_text_style(this), target, stream);
  }

  // optional .TSP.Reference label_level_4_text_style = 79;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        79, _Internal::label_level_4_text_style(this), target, stream);
  }

  // optional .TSP.Reference label_level_5_text_style = 80;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        80, _Internal::label_level_5_text_style(this), target, stream);
  }

  // optional .TST.CategoryOwnerArchive category_owner = 81;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        81, _Internal::category_owner(this), target, stream);
  }

  // optional .TST.PencilAnnotationOwnerArchive pencil_annotation_owner = 82;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        82, _Internal::pencil_annotation_owner(this), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string from_group_by_uid = 83;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_group_by_uid().data(), static_cast<int>(this->_internal_from_group_by_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.TableModelArchive.from_group_by_uid");
    target = stream->WriteStringMaybeAliased(
        83, this->_internal_from_group_by_uid(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .TSCE.HauntedOwnerArchive haunted_owner = 84;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        84, _Internal::haunted_owner(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableModelArchive)
  return target;
}

size_t TableModelArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableModelArchive)
  size_t total_size = 0;

  if (_internal_has_table_id()) {
    // required string table_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_id());
  }

  if (_internal_has_table_name()) {
    // required string table_name = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  if (_internal_has_table_style()) {
    // required .TSP.Reference table_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_style_);
  }

  if (_internal_has_base_data_store()) {
    // required .TST.DataStore base_data_store = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_data_store_);
  }

  if (_internal_has_body_cell_style()) {
    // required .TSP.Reference body_cell_style = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_cell_style_);
  }

  if (_internal_has_header_row_style()) {
    // required .TSP.Reference header_row_style = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_row_style_);
  }

  if (_internal_has_header_column_style()) {
    // required .TSP.Reference header_column_style = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_column_style_);
  }

  if (_internal_has_footer_row_style()) {
    // required .TSP.Reference footer_row_style = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *footer_row_style_);
  }

  if (_internal_has_body_text_style()) {
    // required .TSP.Reference body_text_style = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_text_style_);
  }

  if (_internal_has_header_row_text_style()) {
    // required .TSP.Reference header_row_text_style = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_row_text_style_);
  }

  if (_internal_has_header_column_text_style()) {
    // required .TSP.Reference header_column_text_style = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_column_text_style_);
  }

  if (_internal_has_footer_row_text_style()) {
    // required .TSP.Reference footer_row_text_style = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *footer_row_text_style_);
  }

  if (_internal_has_number_of_rows()) {
    // required uint32 number_of_rows = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_of_rows());
  }

  if (_internal_has_number_of_columns()) {
    // required uint32 number_of_columns = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_of_columns());
  }

  if (_internal_has_default_row_height()) {
    // required double default_row_height = 16;
    total_size += 2 + 8;
  }

  if (_internal_has_default_column_width()) {
    // required double default_column_width = 17;
    total_size += 2 + 8;
  }

  return total_size;
}
size_t TableModelArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableModelArchive)
  size_t total_size = 0;

  if ((((_has_bits_[0] & 0x0000f7b3) ^ 0x0000f7b3)
       | ((_has_bits_[1] & 0x18600000) ^ 0x18600000)) == 0) {  // All required fields are present.
    // required string table_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_id());

    // required string table_name = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());

    // required .TSP.Reference table_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_style_);

    // required .TST.DataStore base_data_store = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_data_store_);

    // required .TSP.Reference body_cell_style = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_cell_style_);

    // required .TSP.Reference header_row_style = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_row_style_);

    // required .TSP.Reference header_column_style = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_column_style_);

    // required .TSP.Reference footer_row_style = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *footer_row_style_);

    // required .TSP.Reference body_text_style = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_text_style_);

    // required .TSP.Reference header_row_text_style = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_row_text_style_);

    // required .TSP.Reference header_column_text_style = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_column_text_style_);

    // required .TSP.Reference footer_row_text_style = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *footer_row_text_style_);

    // required uint32 number_of_rows = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_of_rows());

    // required uint32 number_of_columns = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_of_columns());

    // required double default_row_height = 16;
    total_size += 2 + 8;

    // required double default_column_width = 17;
    total_size += 2 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional string from_table_id = 43;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_table_id());
    }

    // optional string from_group_by_uid = 83;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_group_by_uid());
    }

  }
  // optional .TSP.Reference provider = 5;
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *provider_);
  }

  // optional .TST.CellID origin_offset = 23 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_offset_);
  }

  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSP.Reference table_name_style = 30;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_name_style_);
    }

    // optional .TSP.Reference hidden_state_formula_owner_for_columns = 34;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hidden_state_formula_owner_for_columns_);
    }

    // optional .TSP.Reference hidden_state_formula_owner_for_rows = 35;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hidden_state_formula_owner_for_rows_);
    }

    // optional .TSP.Reference table_name_shape_style = 36;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_name_shape_style_);
    }

    // optional .TSP.Reference filter_set = 38;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_set_);
    }

    // optional .TSP.CFUUIDArchive conditional_style_formula_owner_id = 39;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *conditional_style_formula_owner_id_);
    }

    // optional .TST.TableSortOrderArchive sort_order = 44;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sort_order_);
    }

    // optional .TST.SortRuleReferenceTrackerArchive sort_rule_reference_tracker = 45;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sort_rule_reference_tracker_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .TSP.Reference base_column_row_uids = 46;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_column_row_uids_);
    }

    // optional .TST.MergeOwnerArchive merge_owner = 47;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *merge_owner_);
    }

    // optional .TSP.Reference table_style_preset = 48;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_style_preset_);
    }

    // optional .TSP.Reference stroke_sidecar = 49;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stroke_sidecar_);
    }

    // optional .TST.StructuredTextImportRecord text_import_record = 52;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_import_record_);
    }

    // optional .TSP.Reference category_level_1_style = 60;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_level_1_style_);
    }

    // optional .TSP.Reference category_level_2_style = 61;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_level_2_style_);
    }

    // optional .TSP.Reference category_level_3_style = 62;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_level_3_style_);
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Reference category_level_4_style = 63;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_level_4_style_);
    }

    // optional .TSP.Reference category_level_5_style = 64;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_level_5_style_);
    }

    // optional .TSP.Reference category_level_1_text_style = 65;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_level_1_text_style_);
    }

    // optional .TSP.Reference category_level_2_text_style = 66;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_level_2_text_style_);
    }

    // optional .TSP.Reference category_level_3_text_style = 67;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_level_3_text_style_);
    }

    // optional .TSP.Reference category_level_4_text_style = 68;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_level_4_text_style_);
    }

    // optional .TSP.Reference category_level_5_text_style = 69;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_level_5_text_style_);
    }

    // optional .TST.HiddenStatesOwnerArchive hidden_states_owner = 70;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hidden_states_owner_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.Reference label_level_1_style = 71;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_level_1_style_);
    }

    // optional .TSP.Reference label_level_2_style = 72;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_level_2_style_);
    }

    // optional .TSP.Reference label_level_3_style = 73;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_level_3_style_);
    }

    // optional .TSP.Reference label_level_4_style = 74;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_level_4_style_);
    }

    // optional .TSP.Reference label_level_5_style = 75;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_level_5_style_);
    }

    // optional .TSP.Reference label_level_1_text_style = 76;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_level_1_text_style_);
    }

    // optional .TSP.Reference label_level_2_text_style = 77;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_level_2_text_style_);
    }

    // optional .TSP.Reference label_level_3_text_style = 78;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_level_3_text_style_);
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional .TSP.Reference label_level_4_text_style = 79;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_level_4_text_style_);
    }

    // optional .TSP.Reference label_level_5_text_style = 80;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_level_5_text_style_);
    }

    // optional .TST.CategoryOwnerArchive category_owner = 81;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_owner_);
    }

    // optional .TST.PencilAnnotationOwnerArchive pencil_annotation_owner = 82;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pencil_annotation_owner_);
    }

    // optional .TSCE.HauntedOwnerArchive haunted_owner = 84;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *haunted_owner_);
    }

  }
  // optional uint32 number_of_header_rows = 9;
  if (cached_has_bits & 0x00800000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_of_header_rows());
  }

  if (cached_has_bits & 0x07000000u) {
    // optional uint32 number_of_header_columns = 10;
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_number_of_header_columns());
    }

    // optional uint32 number_of_footer_rows = 11;
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_number_of_footer_rows());
    }

    // optional uint32 number_of_hidden_rows = 14;
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_number_of_hidden_rows());
    }

  }
  if (cached_has_bits & 0xe0000000u) {
    // optional uint32 number_of_hidden_columns = 15;
    if (cached_has_bits & 0x20000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_number_of_hidden_columns());
    }

    // optional bool header_columns_frozen = 13;
    if (cached_has_bits & 0x40000000u) {
      total_size += 1 + 1;
    }

    // optional bool repeating_header_rows_enabled = 29;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool repeating_header_columns_enabled = 32;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool style_apply_clears_all = 31;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional uint32 preset_index = 28;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_preset_index());
    }

    // optional bool was_cut = 50;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool table_name_enabled = 22;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool table_name_border_enabled = 37;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool header_rows_frozen = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional double table_name_height = 33;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 number_of_filtered_rows = 40;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_number_of_filtered_rows());
    }

    // optional uint32 number_of_user_hidden_rows = 41;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_number_of_user_hidden_rows());
    }

    // optional uint32 number_of_user_hidden_columns = 42;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_number_of_user_hidden_columns());
    }

    // optional bool preset_needs_strong_ownership = 51;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableModelArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableModelArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableModelArchive::GetClassData() const { return &_class_data_; }

void TableModelArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableModelArchive *>(to)->MergeFrom(
      static_cast<const TableModelArchive &>(from));
}


void TableModelArchive::MergeFrom(const TableModelArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TableModelArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_table_id(from._internal_table_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_table_name(from._internal_table_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_from_table_id(from._internal_from_table_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_from_group_by_uid(from._internal_from_group_by_uid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_table_style()->::TSP::Reference::MergeFrom(from._internal_table_style());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_base_data_store()->::TST::DataStore::MergeFrom(from._internal_base_data_store());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_provider()->::TSP::Reference::MergeFrom(from._internal_provider());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_body_cell_style()->::TSP::Reference::MergeFrom(from._internal_body_cell_style());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_header_row_style()->::TSP::Reference::MergeFrom(from._internal_header_row_style());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_header_column_style()->::TSP::Reference::MergeFrom(from._internal_header_column_style());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_footer_row_style()->::TSP::Reference::MergeFrom(from._internal_footer_row_style());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_origin_offset()->::TST::CellID::MergeFrom(from._internal_origin_offset());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_body_text_style()->::TSP::Reference::MergeFrom(from._internal_body_text_style());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_header_row_text_style()->::TSP::Reference::MergeFrom(from._internal_header_row_text_style());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_header_column_text_style()->::TSP::Reference::MergeFrom(from._internal_header_column_text_style());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_footer_row_text_style()->::TSP::Reference::MergeFrom(from._internal_footer_row_text_style());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_table_name_style()->::TSP::Reference::MergeFrom(from._internal_table_name_style());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_hidden_state_formula_owner_for_columns()->::TSP::Reference::MergeFrom(from._internal_hidden_state_formula_owner_for_columns());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_hidden_state_formula_owner_for_rows()->::TSP::Reference::MergeFrom(from._internal_hidden_state_formula_owner_for_rows());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_table_name_shape_style()->::TSP::Reference::MergeFrom(from._internal_table_name_shape_style());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_filter_set()->::TSP::Reference::MergeFrom(from._internal_filter_set());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_conditional_style_formula_owner_id()->::TSP::CFUUIDArchive::MergeFrom(from._internal_conditional_style_formula_owner_id());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_sort_order()->::TST::TableSortOrderArchive::MergeFrom(from._internal_sort_order());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_sort_rule_reference_tracker()->::TST::SortRuleReferenceTrackerArchive::MergeFrom(from._internal_sort_rule_reference_tracker());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_base_column_row_uids()->::TSP::Reference::MergeFrom(from._internal_base_column_row_uids());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_merge_owner()->::TST::MergeOwnerArchive::MergeFrom(from._internal_merge_owner());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_table_style_preset()->::TSP::Reference::MergeFrom(from._internal_table_style_preset());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_stroke_sidecar()->::TSP::Reference::MergeFrom(from._internal_stroke_sidecar());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_text_import_record()->::TST::StructuredTextImportRecord::MergeFrom(from._internal_text_import_record());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_category_level_1_style()->::TSP::Reference::MergeFrom(from._internal_category_level_1_style());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_category_level_2_style()->::TSP::Reference::MergeFrom(from._internal_category_level_2_style());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_mutable_category_level_3_style()->::TSP::Reference::MergeFrom(from._internal_category_level_3_style());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_category_level_4_style()->::TSP::Reference::MergeFrom(from._internal_category_level_4_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_category_level_5_style()->::TSP::Reference::MergeFrom(from._internal_category_level_5_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_category_level_1_text_style()->::TSP::Reference::MergeFrom(from._internal_category_level_1_text_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_category_level_2_text_style()->::TSP::Reference::MergeFrom(from._internal_category_level_2_text_style());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_category_level_3_text_style()->::TSP::Reference::MergeFrom(from._internal_category_level_3_text_style());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_category_level_4_text_style()->::TSP::Reference::MergeFrom(from._internal_category_level_4_text_style());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_category_level_5_text_style()->::TSP::Reference::MergeFrom(from._internal_category_level_5_text_style());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_hidden_states_owner()->::TST::HiddenStatesOwnerArchive::MergeFrom(from._internal_hidden_states_owner());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_label_level_1_style()->::TSP::Reference::MergeFrom(from._internal_label_level_1_style());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_label_level_2_style()->::TSP::Reference::MergeFrom(from._internal_label_level_2_style());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_label_level_3_style()->::TSP::Reference::MergeFrom(from._internal_label_level_3_style());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_label_level_4_style()->::TSP::Reference::MergeFrom(from._internal_label_level_4_style());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_label_level_5_style()->::TSP::Reference::MergeFrom(from._internal_label_level_5_style());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_label_level_1_text_style()->::TSP::Reference::MergeFrom(from._internal_label_level_1_text_style());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_label_level_2_text_style()->::TSP::Reference::MergeFrom(from._internal_label_level_2_text_style());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_label_level_3_text_style()->::TSP::Reference::MergeFrom(from._internal_label_level_3_text_style());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_label_level_4_text_style()->::TSP::Reference::MergeFrom(from._internal_label_level_4_text_style());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_label_level_5_text_style()->::TSP::Reference::MergeFrom(from._internal_label_level_5_text_style());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_category_owner()->::TST::CategoryOwnerArchive::MergeFrom(from._internal_category_owner());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_pencil_annotation_owner()->::TST::PencilAnnotationOwnerArchive::MergeFrom(from._internal_pencil_annotation_owner());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_haunted_owner()->::TSCE::HauntedOwnerArchive::MergeFrom(from._internal_haunted_owner());
    }
    if (cached_has_bits & 0x00200000u) {
      number_of_rows_ = from.number_of_rows_;
    }
    if (cached_has_bits & 0x00400000u) {
      number_of_columns_ = from.number_of_columns_;
    }
    if (cached_has_bits & 0x00800000u) {
      number_of_header_rows_ = from.number_of_header_rows_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      number_of_header_columns_ = from.number_of_header_columns_;
    }
    if (cached_has_bits & 0x02000000u) {
      number_of_footer_rows_ = from.number_of_footer_rows_;
    }
    if (cached_has_bits & 0x04000000u) {
      number_of_hidden_rows_ = from.number_of_hidden_rows_;
    }
    if (cached_has_bits & 0x08000000u) {
      default_row_height_ = from.default_row_height_;
    }
    if (cached_has_bits & 0x10000000u) {
      default_column_width_ = from.default_column_width_;
    }
    if (cached_has_bits & 0x20000000u) {
      number_of_hidden_columns_ = from.number_of_hidden_columns_;
    }
    if (cached_has_bits & 0x40000000u) {
      header_columns_frozen_ = from.header_columns_frozen_;
    }
    if (cached_has_bits & 0x80000000u) {
      repeating_header_rows_enabled_ = from.repeating_header_rows_enabled_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      repeating_header_columns_enabled_ = from.repeating_header_columns_enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      style_apply_clears_all_ = from.style_apply_clears_all_;
    }
    if (cached_has_bits & 0x00000004u) {
      preset_index_ = from.preset_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      was_cut_ = from.was_cut_;
    }
    if (cached_has_bits & 0x00000010u) {
      table_name_enabled_ = from.table_name_enabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      table_name_border_enabled_ = from.table_name_border_enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      header_rows_frozen_ = from.header_rows_frozen_;
    }
    if (cached_has_bits & 0x00000080u) {
      table_name_height_ = from.table_name_height_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      number_of_filtered_rows_ = from.number_of_filtered_rows_;
    }
    if (cached_has_bits & 0x00000200u) {
      number_of_user_hidden_rows_ = from.number_of_user_hidden_rows_;
    }
    if (cached_has_bits & 0x00000400u) {
      number_of_user_hidden_columns_ = from.number_of_user_hidden_columns_;
    }
    if (cached_has_bits & 0x00000800u) {
      preset_needs_strong_ownership_ = from.preset_needs_strong_ownership_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableModelArchive::CopyFrom(const TableModelArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableModelArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableModelArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_table_style()) {
    if (!table_style_->IsInitialized()) return false;
  }
  if (_internal_has_base_data_store()) {
    if (!base_data_store_->IsInitialized()) return false;
  }
  if (_internal_has_provider()) {
    if (!provider_->IsInitialized()) return false;
  }
  if (_internal_has_body_cell_style()) {
    if (!body_cell_style_->IsInitialized()) return false;
  }
  if (_internal_has_header_row_style()) {
    if (!header_row_style_->IsInitialized()) return false;
  }
  if (_internal_has_header_column_style()) {
    if (!header_column_style_->IsInitialized()) return false;
  }
  if (_internal_has_footer_row_style()) {
    if (!footer_row_style_->IsInitialized()) return false;
  }
  if (_internal_has_origin_offset()) {
    if (!origin_offset_->IsInitialized()) return false;
  }
  if (_internal_has_body_text_style()) {
    if (!body_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_header_row_text_style()) {
    if (!header_row_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_header_column_text_style()) {
    if (!header_column_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_footer_row_text_style()) {
    if (!footer_row_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_table_name_style()) {
    if (!table_name_style_->IsInitialized()) return false;
  }
  if (_internal_has_hidden_state_formula_owner_for_columns()) {
    if (!hidden_state_formula_owner_for_columns_->IsInitialized()) return false;
  }
  if (_internal_has_hidden_state_formula_owner_for_rows()) {
    if (!hidden_state_formula_owner_for_rows_->IsInitialized()) return false;
  }
  if (_internal_has_table_name_shape_style()) {
    if (!table_name_shape_style_->IsInitialized()) return false;
  }
  if (_internal_has_filter_set()) {
    if (!filter_set_->IsInitialized()) return false;
  }
  if (_internal_has_sort_order()) {
    if (!sort_order_->IsInitialized()) return false;
  }
  if (_internal_has_sort_rule_reference_tracker()) {
    if (!sort_rule_reference_tracker_->IsInitialized()) return false;
  }
  if (_internal_has_base_column_row_uids()) {
    if (!base_column_row_uids_->IsInitialized()) return false;
  }
  if (_internal_has_merge_owner()) {
    if (!merge_owner_->IsInitialized()) return false;
  }
  if (_internal_has_table_style_preset()) {
    if (!table_style_preset_->IsInitialized()) return false;
  }
  if (_internal_has_stroke_sidecar()) {
    if (!stroke_sidecar_->IsInitialized()) return false;
  }
  if (_internal_has_text_import_record()) {
    if (!text_import_record_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_1_style()) {
    if (!category_level_1_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_2_style()) {
    if (!category_level_2_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_3_style()) {
    if (!category_level_3_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_4_style()) {
    if (!category_level_4_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_5_style()) {
    if (!category_level_5_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_1_text_style()) {
    if (!category_level_1_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_2_text_style()) {
    if (!category_level_2_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_3_text_style()) {
    if (!category_level_3_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_4_text_style()) {
    if (!category_level_4_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_5_text_style()) {
    if (!category_level_5_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_hidden_states_owner()) {
    if (!hidden_states_owner_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_1_style()) {
    if (!label_level_1_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_2_style()) {
    if (!label_level_2_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_3_style()) {
    if (!label_level_3_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_4_style()) {
    if (!label_level_4_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_5_style()) {
    if (!label_level_5_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_1_text_style()) {
    if (!label_level_1_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_2_text_style()) {
    if (!label_level_2_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_3_text_style()) {
    if (!label_level_3_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_4_text_style()) {
    if (!label_level_4_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_5_text_style()) {
    if (!label_level_5_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_owner()) {
    if (!category_owner_->IsInitialized()) return false;
  }
  if (_internal_has_pencil_annotation_owner()) {
    if (!pencil_annotation_owner_->IsInitialized()) return false;
  }
  if (_internal_has_haunted_owner()) {
    if (!haunted_owner_->IsInitialized()) return false;
  }
  return true;
}

void TableModelArchive::InternalSwap(TableModelArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_id_, GetArenaForAllocation(),
      &other->table_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, GetArenaForAllocation(),
      &other->table_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_table_id_, GetArenaForAllocation(),
      &other->from_table_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_group_by_uid_, GetArenaForAllocation(),
      &other->from_group_by_uid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableModelArchive, preset_needs_strong_ownership_)
      + sizeof(TableModelArchive::preset_needs_strong_ownership_)
      - PROTOBUF_FIELD_OFFSET(TableModelArchive, table_style_)>(
          reinterpret_cast<char*>(&table_style_),
          reinterpret_cast<char*>(&other->table_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableModelArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[39]);
}

// ===================================================================

class SummaryModelArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SummaryModelArchive>()._has_bits_);
  static const ::TSP::Reference& table_info(const SummaryModelArchive* msg);
  static void set_has_table_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::DataStore& data_store(const SummaryModelArchive* msg);
  static void set_has_data_store(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& column_row_uids(const SummaryModelArchive* msg);
  static void set_has_column_row_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& aggregate_formula_owner_uuid(const SummaryModelArchive* msg);
  static void set_has_aggregate_formula_owner_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& summary_cell_vendor(const SummaryModelArchive* msg);
  static void set_has_summary_cell_vendor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_category_column_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_summary_row_level_1_height(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_summary_row_level_2_height(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_summary_row_level_3_height(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_summary_row_level_4_height(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_summary_row_level_5_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_summary_label_row_level_1_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_summary_label_row_level_2_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_summary_label_row_level_3_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_summary_label_row_level_4_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_summary_label_row_level_5_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_label_row_visibility_1(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_label_row_visibility_2(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_label_row_visibility_3(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_label_row_visibility_4(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_label_row_visibility_5(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
SummaryModelArchive::_Internal::table_info(const SummaryModelArchive* msg) {
  return *msg->table_info_;
}
const ::TST::DataStore&
SummaryModelArchive::_Internal::data_store(const SummaryModelArchive* msg) {
  return *msg->data_store_;
}
const ::TSP::Reference&
SummaryModelArchive::_Internal::column_row_uids(const SummaryModelArchive* msg) {
  return *msg->column_row_uids_;
}
const ::TSP::UUID&
SummaryModelArchive::_Internal::aggregate_formula_owner_uuid(const SummaryModelArchive* msg) {
  return *msg->aggregate_formula_owner_uuid_;
}
const ::TSP::Reference&
SummaryModelArchive::_Internal::summary_cell_vendor(const SummaryModelArchive* msg) {
  return *msg->summary_cell_vendor_;
}
void SummaryModelArchive::clear_table_info() {
  if (table_info_ != nullptr) table_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SummaryModelArchive::clear_column_row_uids() {
  if (column_row_uids_ != nullptr) column_row_uids_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SummaryModelArchive::clear_aggregate_formula_owner_uuid() {
  if (aggregate_formula_owner_uuid_ != nullptr) aggregate_formula_owner_uuid_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SummaryModelArchive::clear_summary_cell_vendor() {
  if (summary_cell_vendor_ != nullptr) summary_cell_vendor_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
SummaryModelArchive::SummaryModelArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  summary_row_height_list_(arena),
  label_row_height_list_(arena),
  label_row_visibility_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.SummaryModelArchive)
}
SummaryModelArchive::SummaryModelArchive(const SummaryModelArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      summary_row_height_list_(from.summary_row_height_list_),
      label_row_height_list_(from.label_row_height_list_),
      label_row_visibility_list_(from.label_row_visibility_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_info()) {
    table_info_ = new ::TSP::Reference(*from.table_info_);
  } else {
    table_info_ = nullptr;
  }
  if (from._internal_has_data_store()) {
    data_store_ = new ::TST::DataStore(*from.data_store_);
  } else {
    data_store_ = nullptr;
  }
  if (from._internal_has_column_row_uids()) {
    column_row_uids_ = new ::TSP::Reference(*from.column_row_uids_);
  } else {
    column_row_uids_ = nullptr;
  }
  if (from._internal_has_aggregate_formula_owner_uuid()) {
    aggregate_formula_owner_uuid_ = new ::TSP::UUID(*from.aggregate_formula_owner_uuid_);
  } else {
    aggregate_formula_owner_uuid_ = nullptr;
  }
  if (from._internal_has_summary_cell_vendor()) {
    summary_cell_vendor_ = new ::TSP::Reference(*from.summary_cell_vendor_);
  } else {
    summary_cell_vendor_ = nullptr;
  }
  ::memcpy(&category_column_width_, &from.category_column_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&label_row_visibility_5_) -
    reinterpret_cast<char*>(&category_column_width_)) + sizeof(label_row_visibility_5_));
  // @@protoc_insertion_point(copy_constructor:TST.SummaryModelArchive)
}

inline void SummaryModelArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&table_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&label_row_visibility_5_) -
    reinterpret_cast<char*>(&table_info_)) + sizeof(label_row_visibility_5_));
}

SummaryModelArchive::~SummaryModelArchive() {
  // @@protoc_insertion_point(destructor:TST.SummaryModelArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SummaryModelArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete table_info_;
  if (this != internal_default_instance()) delete data_store_;
  if (this != internal_default_instance()) delete column_row_uids_;
  if (this != internal_default_instance()) delete aggregate_formula_owner_uuid_;
  if (this != internal_default_instance()) delete summary_cell_vendor_;
}

void SummaryModelArchive::ArenaDtor(void* object) {
  SummaryModelArchive* _this = reinterpret_cast< SummaryModelArchive* >(object);
  (void)_this;
}
void SummaryModelArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SummaryModelArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SummaryModelArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.SummaryModelArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  summary_row_height_list_.Clear();
  label_row_height_list_.Clear();
  label_row_visibility_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(table_info_ != nullptr);
      table_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(data_store_ != nullptr);
      data_store_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(column_row_uids_ != nullptr);
      column_row_uids_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(aggregate_formula_owner_uuid_ != nullptr);
      aggregate_formula_owner_uuid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(summary_cell_vendor_ != nullptr);
      summary_cell_vendor_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&category_column_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&summary_row_level_2_height_) -
        reinterpret_cast<char*>(&category_column_width_)) + sizeof(summary_row_level_2_height_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&summary_row_level_3_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&summary_label_row_level_5_height_) -
        reinterpret_cast<char*>(&summary_row_level_3_height_)) + sizeof(summary_label_row_level_5_height_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&label_row_visibility_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&label_row_visibility_5_) -
        reinterpret_cast<char*>(&label_row_visibility_1_)) + sizeof(label_row_visibility_5_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryModelArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference table_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.DataStore data_store = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_store(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference column_row_uids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_row_uids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID aggregate_formula_owner_uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_aggregate_formula_owner_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference summary_cell_vendor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary_cell_vendor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double category_column_width = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_category_column_width(&has_bits);
          category_column_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double summary_row_level_1_height = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_summary_row_level_1_height(&has_bits);
          summary_row_level_1_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double summary_row_level_2_height = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_summary_row_level_2_height(&has_bits);
          summary_row_level_2_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double summary_row_level_3_height = 13 [deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_summary_row_level_3_height(&has_bits);
          summary_row_level_3_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double summary_row_level_4_height = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_summary_row_level_4_height(&has_bits);
          summary_row_level_4_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double summary_row_level_5_height = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_summary_row_level_5_height(&has_bits);
          summary_row_level_5_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double summary_label_row_level_1_height = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_summary_label_row_level_1_height(&has_bits);
          summary_label_row_level_1_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double summary_label_row_level_2_height = 17 [deprecated = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_summary_label_row_level_2_height(&has_bits);
          summary_label_row_level_2_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double summary_label_row_level_3_height = 18 [deprecated = true];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_summary_label_row_level_3_height(&has_bits);
          summary_label_row_level_3_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double summary_label_row_level_4_height = 19 [deprecated = true];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_summary_label_row_level_4_height(&has_bits);
          summary_label_row_level_4_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double summary_label_row_level_5_height = 20 [deprecated = true];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_summary_label_row_level_5_height(&has_bits);
          summary_label_row_level_5_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 label_row_visibility_1 = 21 [deprecated = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_label_row_visibility_1(&has_bits);
          label_row_visibility_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 label_row_visibility_2 = 22 [deprecated = true];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_label_row_visibility_2(&has_bits);
          label_row_visibility_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 label_row_visibility_3 = 23 [deprecated = true];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_label_row_visibility_3(&has_bits);
          label_row_visibility_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 label_row_visibility_4 = 24 [deprecated = true];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_label_row_visibility_4(&has_bits);
          label_row_visibility_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 label_row_visibility_5 = 25 [deprecated = true];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_label_row_visibility_5(&has_bits);
          label_row_visibility_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double summary_row_height_list = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_summary_row_height_list(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<209>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_summary_row_height_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double label_row_height_list = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_label_row_height_list(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<217>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_label_row_height_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 label_row_visibility_list = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_label_row_visibility_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<224>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_label_row_visibility_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SummaryModelArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.SummaryModelArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference table_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::table_info(this), target, stream);
  }

  // optional .TST.DataStore data_store = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data_store(this), target, stream);
  }

  // optional .TSP.Reference column_row_uids = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::column_row_uids(this), target, stream);
  }

  // optional .TSP.UUID aggregate_formula_owner_uuid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::aggregate_formula_owner_uuid(this), target, stream);
  }

  // optional .TSP.Reference summary_cell_vendor = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::summary_cell_vendor(this), target, stream);
  }

  // optional double category_column_width = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_category_column_width(), target);
  }

  // optional double summary_row_level_1_height = 11 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_summary_row_level_1_height(), target);
  }

  // optional double summary_row_level_2_height = 12 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_summary_row_level_2_height(), target);
  }

  // optional double summary_row_level_3_height = 13 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_summary_row_level_3_height(), target);
  }

  // optional double summary_row_level_4_height = 14 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_summary_row_level_4_height(), target);
  }

  // optional double summary_row_level_5_height = 15 [deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_summary_row_level_5_height(), target);
  }

  // optional double summary_label_row_level_1_height = 16 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_summary_label_row_level_1_height(), target);
  }

  // optional double summary_label_row_level_2_height = 17 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_summary_label_row_level_2_height(), target);
  }

  // optional double summary_label_row_level_3_height = 18 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_summary_label_row_level_3_height(), target);
  }

  // optional double summary_label_row_level_4_height = 19 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_summary_label_row_level_4_height(), target);
  }

  // optional double summary_label_row_level_5_height = 20 [deprecated = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_summary_label_row_level_5_height(), target);
  }

  // optional uint32 label_row_visibility_1 = 21 [deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_label_row_visibility_1(), target);
  }

  // optional uint32 label_row_visibility_2 = 22 [deprecated = true];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_label_row_visibility_2(), target);
  }

  // optional uint32 label_row_visibility_3 = 23 [deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_label_row_visibility_3(), target);
  }

  // optional uint32 label_row_visibility_4 = 24 [deprecated = true];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_label_row_visibility_4(), target);
  }

  // optional uint32 label_row_visibility_5 = 25 [deprecated = true];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_label_row_visibility_5(), target);
  }

  // repeated double summary_row_height_list = 26;
  for (int i = 0, n = this->_internal_summary_row_height_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_summary_row_height_list(i), target);
  }

  // repeated double label_row_height_list = 27;
  for (int i = 0, n = this->_internal_label_row_height_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_label_row_height_list(i), target);
  }

  // repeated uint32 label_row_visibility_list = 28;
  for (int i = 0, n = this->_internal_label_row_visibility_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_label_row_visibility_list(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.SummaryModelArchive)
  return target;
}

size_t SummaryModelArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.SummaryModelArchive)
  size_t total_size = 0;

  // required .TSP.Reference table_info = 1;
  if (_internal_has_table_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_info_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double summary_row_height_list = 26;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_summary_row_height_list_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_summary_row_height_list_size());
    total_size += data_size;
  }

  // repeated double label_row_height_list = 27;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_label_row_height_list_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_label_row_height_list_size());
    total_size += data_size;
  }

  // repeated uint32 label_row_visibility_list = 28;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->label_row_visibility_list_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_label_row_visibility_list_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TST.DataStore data_store = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_store_);
    }

    // optional .TSP.Reference column_row_uids = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *column_row_uids_);
    }

    // optional .TSP.UUID aggregate_formula_owner_uuid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aggregate_formula_owner_uuid_);
    }

    // optional .TSP.Reference summary_cell_vendor = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *summary_cell_vendor_);
    }

    // optional double category_column_width = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double summary_row_level_1_height = 11 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double summary_row_level_2_height = 12 [deprecated = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double summary_row_level_3_height = 13 [deprecated = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double summary_row_level_4_height = 14 [deprecated = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double summary_row_level_5_height = 15 [deprecated = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double summary_label_row_level_1_height = 16 [deprecated = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional double summary_label_row_level_2_height = 17 [deprecated = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional double summary_label_row_level_3_height = 18 [deprecated = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional double summary_label_row_level_4_height = 19 [deprecated = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double summary_label_row_level_5_height = 20 [deprecated = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional uint32 label_row_visibility_1 = 21 [deprecated = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_label_row_visibility_1());
    }

    // optional uint32 label_row_visibility_2 = 22 [deprecated = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_label_row_visibility_2());
    }

    // optional uint32 label_row_visibility_3 = 23 [deprecated = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_label_row_visibility_3());
    }

    // optional uint32 label_row_visibility_4 = 24 [deprecated = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_label_row_visibility_4());
    }

    // optional uint32 label_row_visibility_5 = 25 [deprecated = true];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_label_row_visibility_5());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SummaryModelArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SummaryModelArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SummaryModelArchive::GetClassData() const { return &_class_data_; }

void SummaryModelArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SummaryModelArchive *>(to)->MergeFrom(
      static_cast<const SummaryModelArchive &>(from));
}


void SummaryModelArchive::MergeFrom(const SummaryModelArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.SummaryModelArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  summary_row_height_list_.MergeFrom(from.summary_row_height_list_);
  label_row_height_list_.MergeFrom(from.label_row_height_list_);
  label_row_visibility_list_.MergeFrom(from.label_row_visibility_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_table_info()->::TSP::Reference::MergeFrom(from._internal_table_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_data_store()->::TST::DataStore::MergeFrom(from._internal_data_store());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_column_row_uids()->::TSP::Reference::MergeFrom(from._internal_column_row_uids());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_aggregate_formula_owner_uuid()->::TSP::UUID::MergeFrom(from._internal_aggregate_formula_owner_uuid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_summary_cell_vendor()->::TSP::Reference::MergeFrom(from._internal_summary_cell_vendor());
    }
    if (cached_has_bits & 0x00000020u) {
      category_column_width_ = from.category_column_width_;
    }
    if (cached_has_bits & 0x00000040u) {
      summary_row_level_1_height_ = from.summary_row_level_1_height_;
    }
    if (cached_has_bits & 0x00000080u) {
      summary_row_level_2_height_ = from.summary_row_level_2_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      summary_row_level_3_height_ = from.summary_row_level_3_height_;
    }
    if (cached_has_bits & 0x00000200u) {
      summary_row_level_4_height_ = from.summary_row_level_4_height_;
    }
    if (cached_has_bits & 0x00000400u) {
      summary_row_level_5_height_ = from.summary_row_level_5_height_;
    }
    if (cached_has_bits & 0x00000800u) {
      summary_label_row_level_1_height_ = from.summary_label_row_level_1_height_;
    }
    if (cached_has_bits & 0x00001000u) {
      summary_label_row_level_2_height_ = from.summary_label_row_level_2_height_;
    }
    if (cached_has_bits & 0x00002000u) {
      summary_label_row_level_3_height_ = from.summary_label_row_level_3_height_;
    }
    if (cached_has_bits & 0x00004000u) {
      summary_label_row_level_4_height_ = from.summary_label_row_level_4_height_;
    }
    if (cached_has_bits & 0x00008000u) {
      summary_label_row_level_5_height_ = from.summary_label_row_level_5_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      label_row_visibility_1_ = from.label_row_visibility_1_;
    }
    if (cached_has_bits & 0x00020000u) {
      label_row_visibility_2_ = from.label_row_visibility_2_;
    }
    if (cached_has_bits & 0x00040000u) {
      label_row_visibility_3_ = from.label_row_visibility_3_;
    }
    if (cached_has_bits & 0x00080000u) {
      label_row_visibility_4_ = from.label_row_visibility_4_;
    }
    if (cached_has_bits & 0x00100000u) {
      label_row_visibility_5_ = from.label_row_visibility_5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SummaryModelArchive::CopyFrom(const SummaryModelArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.SummaryModelArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryModelArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_table_info()) {
    if (!table_info_->IsInitialized()) return false;
  }
  if (_internal_has_data_store()) {
    if (!data_store_->IsInitialized()) return false;
  }
  if (_internal_has_column_row_uids()) {
    if (!column_row_uids_->IsInitialized()) return false;
  }
  if (_internal_has_aggregate_formula_owner_uuid()) {
    if (!aggregate_formula_owner_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_summary_cell_vendor()) {
    if (!summary_cell_vendor_->IsInitialized()) return false;
  }
  return true;
}

void SummaryModelArchive::InternalSwap(SummaryModelArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  summary_row_height_list_.InternalSwap(&other->summary_row_height_list_);
  label_row_height_list_.InternalSwap(&other->label_row_height_list_);
  label_row_visibility_list_.InternalSwap(&other->label_row_visibility_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SummaryModelArchive, label_row_visibility_5_)
      + sizeof(SummaryModelArchive::label_row_visibility_5_)
      - PROTOBUF_FIELD_OFFSET(SummaryModelArchive, table_info_)>(
          reinterpret_cast<char*>(&table_info_),
          reinterpret_cast<char*>(&other->table_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryModelArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[40]);
}

// ===================================================================

class SummaryModelGroupByChangeStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SummaryModelGroupByChangeStateArchive>()._has_bits_);
  static const ::TSP::Reference& cell_map(const SummaryModelGroupByChangeStateArchive* msg);
  static void set_has_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
SummaryModelGroupByChangeStateArchive::_Internal::cell_map(const SummaryModelGroupByChangeStateArchive* msg) {
  return *msg->cell_map_;
}
void SummaryModelGroupByChangeStateArchive::clear_cell_map() {
  if (cell_map_ != nullptr) cell_map_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SummaryModelGroupByChangeStateArchive::SummaryModelGroupByChangeStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  summary_row_height_list_(arena),
  label_row_height_list_(arena),
  label_row_visibility_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.SummaryModelGroupByChangeStateArchive)
}
SummaryModelGroupByChangeStateArchive::SummaryModelGroupByChangeStateArchive(const SummaryModelGroupByChangeStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      summary_row_height_list_(from.summary_row_height_list_),
      label_row_height_list_(from.label_row_height_list_),
      label_row_visibility_list_(from.label_row_visibility_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_map()) {
    cell_map_ = new ::TSP::Reference(*from.cell_map_);
  } else {
    cell_map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.SummaryModelGroupByChangeStateArchive)
}

inline void SummaryModelGroupByChangeStateArchive::SharedCtor() {
cell_map_ = nullptr;
}

SummaryModelGroupByChangeStateArchive::~SummaryModelGroupByChangeStateArchive() {
  // @@protoc_insertion_point(destructor:TST.SummaryModelGroupByChangeStateArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SummaryModelGroupByChangeStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cell_map_;
}

void SummaryModelGroupByChangeStateArchive::ArenaDtor(void* object) {
  SummaryModelGroupByChangeStateArchive* _this = reinterpret_cast< SummaryModelGroupByChangeStateArchive* >(object);
  (void)_this;
}
void SummaryModelGroupByChangeStateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SummaryModelGroupByChangeStateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SummaryModelGroupByChangeStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.SummaryModelGroupByChangeStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  summary_row_height_list_.Clear();
  label_row_height_list_.Clear();
  label_row_visibility_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(cell_map_ != nullptr);
    cell_map_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryModelGroupByChangeStateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference cell_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double summary_row_height_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_summary_row_height_list(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_summary_row_height_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double label_row_height_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_label_row_height_list(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_label_row_height_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 label_row_visibility_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_label_row_visibility_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_label_row_visibility_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SummaryModelGroupByChangeStateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.SummaryModelGroupByChangeStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference cell_map = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cell_map(this), target, stream);
  }

  // repeated double summary_row_height_list = 2;
  for (int i = 0, n = this->_internal_summary_row_height_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_summary_row_height_list(i), target);
  }

  // repeated double label_row_height_list = 3;
  for (int i = 0, n = this->_internal_label_row_height_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_label_row_height_list(i), target);
  }

  // repeated uint32 label_row_visibility_list = 4;
  for (int i = 0, n = this->_internal_label_row_visibility_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_label_row_visibility_list(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.SummaryModelGroupByChangeStateArchive)
  return target;
}

size_t SummaryModelGroupByChangeStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.SummaryModelGroupByChangeStateArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double summary_row_height_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_summary_row_height_list_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_summary_row_height_list_size());
    total_size += data_size;
  }

  // repeated double label_row_height_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_label_row_height_list_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_label_row_height_list_size());
    total_size += data_size;
  }

  // repeated uint32 label_row_visibility_list = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->label_row_visibility_list_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_label_row_visibility_list_size());
    total_size += data_size;
  }

  // optional .TSP.Reference cell_map = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_map_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SummaryModelGroupByChangeStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SummaryModelGroupByChangeStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SummaryModelGroupByChangeStateArchive::GetClassData() const { return &_class_data_; }

void SummaryModelGroupByChangeStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SummaryModelGroupByChangeStateArchive *>(to)->MergeFrom(
      static_cast<const SummaryModelGroupByChangeStateArchive &>(from));
}


void SummaryModelGroupByChangeStateArchive::MergeFrom(const SummaryModelGroupByChangeStateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.SummaryModelGroupByChangeStateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  summary_row_height_list_.MergeFrom(from.summary_row_height_list_);
  label_row_height_list_.MergeFrom(from.label_row_height_list_);
  label_row_visibility_list_.MergeFrom(from.label_row_visibility_list_);
  if (from._internal_has_cell_map()) {
    _internal_mutable_cell_map()->::TSP::Reference::MergeFrom(from._internal_cell_map());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SummaryModelGroupByChangeStateArchive::CopyFrom(const SummaryModelGroupByChangeStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.SummaryModelGroupByChangeStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryModelGroupByChangeStateArchive::IsInitialized() const {
  if (_internal_has_cell_map()) {
    if (!cell_map_->IsInitialized()) return false;
  }
  return true;
}

void SummaryModelGroupByChangeStateArchive::InternalSwap(SummaryModelGroupByChangeStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  summary_row_height_list_.InternalSwap(&other->summary_row_height_list_);
  label_row_height_list_.InternalSwap(&other->label_row_height_list_);
  label_row_visibility_list_.InternalSwap(&other->label_row_visibility_list_);
  swap(cell_map_, other->cell_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryModelGroupByChangeStateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[41]);
}

// ===================================================================

class ColumnRowUIDMapArchive::_Internal {
 public:
};

void ColumnRowUIDMapArchive::clear_sorted_column_uids() {
  sorted_column_uids_.Clear();
}
void ColumnRowUIDMapArchive::clear_sorted_row_uids() {
  sorted_row_uids_.Clear();
}
ColumnRowUIDMapArchive::ColumnRowUIDMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sorted_column_uids_(arena),
  column_index_for_uid_(arena),
  column_uid_for_index_(arena),
  sorted_row_uids_(arena),
  row_index_for_uid_(arena),
  row_uid_for_index_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ColumnRowUIDMapArchive)
}
ColumnRowUIDMapArchive::ColumnRowUIDMapArchive(const ColumnRowUIDMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sorted_column_uids_(from.sorted_column_uids_),
      column_index_for_uid_(from.column_index_for_uid_),
      column_uid_for_index_(from.column_uid_for_index_),
      sorted_row_uids_(from.sorted_row_uids_),
      row_index_for_uid_(from.row_index_for_uid_),
      row_uid_for_index_(from.row_uid_for_index_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.ColumnRowUIDMapArchive)
}

inline void ColumnRowUIDMapArchive::SharedCtor() {
}

ColumnRowUIDMapArchive::~ColumnRowUIDMapArchive() {
  // @@protoc_insertion_point(destructor:TST.ColumnRowUIDMapArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColumnRowUIDMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColumnRowUIDMapArchive::ArenaDtor(void* object) {
  ColumnRowUIDMapArchive* _this = reinterpret_cast< ColumnRowUIDMapArchive* >(object);
  (void)_this;
}
void ColumnRowUIDMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColumnRowUIDMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColumnRowUIDMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ColumnRowUIDMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sorted_column_uids_.Clear();
  column_index_for_uid_.Clear();
  column_uid_for_index_.Clear();
  sorted_row_uids_.Clear();
  row_index_for_uid_.Clear();
  row_uid_for_index_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnRowUIDMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID sorted_column_uids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorted_column_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 column_index_for_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_column_index_for_uid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_column_index_for_uid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 column_uid_for_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_column_uid_for_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_column_uid_for_index(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID sorted_row_uids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorted_row_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 row_index_for_uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_row_index_for_uid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_row_index_for_uid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 row_uid_for_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_row_uid_for_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_row_uid_for_index(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnRowUIDMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ColumnRowUIDMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID sorted_column_uids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sorted_column_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sorted_column_uids(i), target, stream);
  }

  // repeated uint32 column_index_for_uid = 2;
  for (int i = 0, n = this->_internal_column_index_for_uid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_column_index_for_uid(i), target);
  }

  // repeated uint32 column_uid_for_index = 3;
  for (int i = 0, n = this->_internal_column_uid_for_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_column_uid_for_index(i), target);
  }

  // repeated .TSP.UUID sorted_row_uids = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sorted_row_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_sorted_row_uids(i), target, stream);
  }

  // repeated uint32 row_index_for_uid = 5;
  for (int i = 0, n = this->_internal_row_index_for_uid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_row_index_for_uid(i), target);
  }

  // repeated uint32 row_uid_for_index = 6;
  for (int i = 0, n = this->_internal_row_uid_for_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_row_uid_for_index(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ColumnRowUIDMapArchive)
  return target;
}

size_t ColumnRowUIDMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ColumnRowUIDMapArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID sorted_column_uids = 1;
  total_size += 1UL * this->_internal_sorted_column_uids_size();
  for (const auto& msg : this->sorted_column_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 column_index_for_uid = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->column_index_for_uid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_column_index_for_uid_size());
    total_size += data_size;
  }

  // repeated uint32 column_uid_for_index = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->column_uid_for_index_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_column_uid_for_index_size());
    total_size += data_size;
  }

  // repeated .TSP.UUID sorted_row_uids = 4;
  total_size += 1UL * this->_internal_sorted_row_uids_size();
  for (const auto& msg : this->sorted_row_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 row_index_for_uid = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->row_index_for_uid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_row_index_for_uid_size());
    total_size += data_size;
  }

  // repeated uint32 row_uid_for_index = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->row_uid_for_index_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_row_uid_for_index_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnRowUIDMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColumnRowUIDMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnRowUIDMapArchive::GetClassData() const { return &_class_data_; }

void ColumnRowUIDMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ColumnRowUIDMapArchive *>(to)->MergeFrom(
      static_cast<const ColumnRowUIDMapArchive &>(from));
}


void ColumnRowUIDMapArchive::MergeFrom(const ColumnRowUIDMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ColumnRowUIDMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sorted_column_uids_.MergeFrom(from.sorted_column_uids_);
  column_index_for_uid_.MergeFrom(from.column_index_for_uid_);
  column_uid_for_index_.MergeFrom(from.column_uid_for_index_);
  sorted_row_uids_.MergeFrom(from.sorted_row_uids_);
  row_index_for_uid_.MergeFrom(from.row_index_for_uid_);
  row_uid_for_index_.MergeFrom(from.row_uid_for_index_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnRowUIDMapArchive::CopyFrom(const ColumnRowUIDMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ColumnRowUIDMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnRowUIDMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sorted_column_uids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sorted_row_uids_)) return false;
  return true;
}

void ColumnRowUIDMapArchive::InternalSwap(ColumnRowUIDMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sorted_column_uids_.InternalSwap(&other->sorted_column_uids_);
  column_index_for_uid_.InternalSwap(&other->column_index_for_uid_);
  column_uid_for_index_.InternalSwap(&other->column_uid_for_index_);
  sorted_row_uids_.InternalSwap(&other->sorted_row_uids_);
  row_index_for_uid_.InternalSwap(&other->row_index_for_uid_);
  row_uid_for_index_.InternalSwap(&other->row_uid_for_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnRowUIDMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[42]);
}

// ===================================================================

class StrokeLayerArchive_StrokeRunArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StrokeLayerArchive_StrokeRunArchive>()._has_bits_);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::StrokeArchive& stroke(const StrokeLayerArchive_StrokeRunArchive* msg);
  static void set_has_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSD::StrokeArchive&
StrokeLayerArchive_StrokeRunArchive::_Internal::stroke(const StrokeLayerArchive_StrokeRunArchive* msg) {
  return *msg->stroke_;
}
void StrokeLayerArchive_StrokeRunArchive::clear_stroke() {
  if (stroke_ != nullptr) stroke_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
StrokeLayerArchive_StrokeRunArchive::StrokeLayerArchive_StrokeRunArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.StrokeLayerArchive.StrokeRunArchive)
}
StrokeLayerArchive_StrokeRunArchive::StrokeLayerArchive_StrokeRunArchive(const StrokeLayerArchive_StrokeRunArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stroke()) {
    stroke_ = new ::TSD::StrokeArchive(*from.stroke_);
  } else {
    stroke_ = nullptr;
  }
  ::memcpy(&origin_, &from.origin_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_) -
    reinterpret_cast<char*>(&origin_)) + sizeof(order_));
  // @@protoc_insertion_point(copy_constructor:TST.StrokeLayerArchive.StrokeRunArchive)
}

inline void StrokeLayerArchive_StrokeRunArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stroke_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&order_) -
    reinterpret_cast<char*>(&stroke_)) + sizeof(order_));
}

StrokeLayerArchive_StrokeRunArchive::~StrokeLayerArchive_StrokeRunArchive() {
  // @@protoc_insertion_point(destructor:TST.StrokeLayerArchive.StrokeRunArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StrokeLayerArchive_StrokeRunArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete stroke_;
}

void StrokeLayerArchive_StrokeRunArchive::ArenaDtor(void* object) {
  StrokeLayerArchive_StrokeRunArchive* _this = reinterpret_cast< StrokeLayerArchive_StrokeRunArchive* >(object);
  (void)_this;
}
void StrokeLayerArchive_StrokeRunArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StrokeLayerArchive_StrokeRunArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StrokeLayerArchive_StrokeRunArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StrokeLayerArchive.StrokeRunArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stroke_ != nullptr);
    stroke_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&origin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_) -
        reinterpret_cast<char*>(&origin_)) + sizeof(order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrokeLayerArchive_StrokeRunArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_origin(&has_bits);
          origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive stroke = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 order = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_order(&has_bits);
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StrokeLayerArchive_StrokeRunArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StrokeLayerArchive.StrokeRunArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 origin = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_origin(), target);
  }

  // optional uint32 length = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_length(), target);
  }

  // optional .TSD.StrokeArchive stroke = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stroke(this), target, stream);
  }

  // optional uint32 order = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StrokeLayerArchive.StrokeRunArchive)
  return target;
}

size_t StrokeLayerArchive_StrokeRunArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StrokeLayerArchive.StrokeRunArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSD.StrokeArchive stroke = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stroke_);
    }

    // optional int32 origin = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_origin());
    }

    // optional uint32 length = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_length());
    }

    // optional uint32 order = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_order());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrokeLayerArchive_StrokeRunArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StrokeLayerArchive_StrokeRunArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrokeLayerArchive_StrokeRunArchive::GetClassData() const { return &_class_data_; }

void StrokeLayerArchive_StrokeRunArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StrokeLayerArchive_StrokeRunArchive *>(to)->MergeFrom(
      static_cast<const StrokeLayerArchive_StrokeRunArchive &>(from));
}


void StrokeLayerArchive_StrokeRunArchive::MergeFrom(const StrokeLayerArchive_StrokeRunArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.StrokeLayerArchive.StrokeRunArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stroke()->::TSD::StrokeArchive::MergeFrom(from._internal_stroke());
    }
    if (cached_has_bits & 0x00000002u) {
      origin_ = from.origin_;
    }
    if (cached_has_bits & 0x00000004u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      order_ = from.order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrokeLayerArchive_StrokeRunArchive::CopyFrom(const StrokeLayerArchive_StrokeRunArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StrokeLayerArchive.StrokeRunArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrokeLayerArchive_StrokeRunArchive::IsInitialized() const {
  if (_internal_has_stroke()) {
    if (!stroke_->IsInitialized()) return false;
  }
  return true;
}

void StrokeLayerArchive_StrokeRunArchive::InternalSwap(StrokeLayerArchive_StrokeRunArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StrokeLayerArchive_StrokeRunArchive, order_)
      + sizeof(StrokeLayerArchive_StrokeRunArchive::order_)
      - PROTOBUF_FIELD_OFFSET(StrokeLayerArchive_StrokeRunArchive, stroke_)>(
          reinterpret_cast<char*>(&stroke_),
          reinterpret_cast<char*>(&other->stroke_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StrokeLayerArchive_StrokeRunArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[43]);
}

// ===================================================================

class StrokeLayerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StrokeLayerArchive>()._has_bits_);
  static void set_has_row_column_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StrokeLayerArchive::StrokeLayerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stroke_runs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.StrokeLayerArchive)
}
StrokeLayerArchive::StrokeLayerArchive(const StrokeLayerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stroke_runs_(from.stroke_runs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  row_column_index_ = from.row_column_index_;
  // @@protoc_insertion_point(copy_constructor:TST.StrokeLayerArchive)
}

inline void StrokeLayerArchive::SharedCtor() {
row_column_index_ = 0u;
}

StrokeLayerArchive::~StrokeLayerArchive() {
  // @@protoc_insertion_point(destructor:TST.StrokeLayerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StrokeLayerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StrokeLayerArchive::ArenaDtor(void* object) {
  StrokeLayerArchive* _this = reinterpret_cast< StrokeLayerArchive* >(object);
  (void)_this;
}
void StrokeLayerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StrokeLayerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StrokeLayerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StrokeLayerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stroke_runs_.Clear();
  row_column_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrokeLayerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 row_column_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_row_column_index(&has_bits);
          row_column_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.StrokeLayerArchive.StrokeRunArchive stroke_runs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stroke_runs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StrokeLayerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StrokeLayerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 row_column_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_row_column_index(), target);
  }

  // repeated .TST.StrokeLayerArchive.StrokeRunArchive stroke_runs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stroke_runs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stroke_runs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StrokeLayerArchive)
  return target;
}

size_t StrokeLayerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StrokeLayerArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.StrokeLayerArchive.StrokeRunArchive stroke_runs = 2;
  total_size += 1UL * this->_internal_stroke_runs_size();
  for (const auto& msg : this->stroke_runs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 row_column_index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row_column_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrokeLayerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StrokeLayerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrokeLayerArchive::GetClassData() const { return &_class_data_; }

void StrokeLayerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StrokeLayerArchive *>(to)->MergeFrom(
      static_cast<const StrokeLayerArchive &>(from));
}


void StrokeLayerArchive::MergeFrom(const StrokeLayerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.StrokeLayerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stroke_runs_.MergeFrom(from.stroke_runs_);
  if (from._internal_has_row_column_index()) {
    _internal_set_row_column_index(from._internal_row_column_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrokeLayerArchive::CopyFrom(const StrokeLayerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StrokeLayerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrokeLayerArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(stroke_runs_)) return false;
  return true;
}

void StrokeLayerArchive::InternalSwap(StrokeLayerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stroke_runs_.InternalSwap(&other->stroke_runs_);
  swap(row_column_index_, other->row_column_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StrokeLayerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[44]);
}

// ===================================================================

class StrokeSidecarArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StrokeSidecarArchive>()._has_bits_);
  static void set_has_max_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_column_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void StrokeSidecarArchive::clear_left_column_stroke_layers() {
  left_column_stroke_layers_.Clear();
}
void StrokeSidecarArchive::clear_right_column_stroke_layers() {
  right_column_stroke_layers_.Clear();
}
void StrokeSidecarArchive::clear_top_row_stroke_layers() {
  top_row_stroke_layers_.Clear();
}
void StrokeSidecarArchive::clear_bottom_row_stroke_layers() {
  bottom_row_stroke_layers_.Clear();
}
StrokeSidecarArchive::StrokeSidecarArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  left_column_stroke_layers_(arena),
  right_column_stroke_layers_(arena),
  top_row_stroke_layers_(arena),
  bottom_row_stroke_layers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.StrokeSidecarArchive)
}
StrokeSidecarArchive::StrokeSidecarArchive(const StrokeSidecarArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      left_column_stroke_layers_(from.left_column_stroke_layers_),
      right_column_stroke_layers_(from.right_column_stroke_layers_),
      top_row_stroke_layers_(from.top_row_stroke_layers_),
      bottom_row_stroke_layers_(from.bottom_row_stroke_layers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_order_, &from.max_order_,
    static_cast<size_t>(reinterpret_cast<char*>(&row_count_) -
    reinterpret_cast<char*>(&max_order_)) + sizeof(row_count_));
  // @@protoc_insertion_point(copy_constructor:TST.StrokeSidecarArchive)
}

inline void StrokeSidecarArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_order_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&row_count_) -
    reinterpret_cast<char*>(&max_order_)) + sizeof(row_count_));
}

StrokeSidecarArchive::~StrokeSidecarArchive() {
  // @@protoc_insertion_point(destructor:TST.StrokeSidecarArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StrokeSidecarArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StrokeSidecarArchive::ArenaDtor(void* object) {
  StrokeSidecarArchive* _this = reinterpret_cast< StrokeSidecarArchive* >(object);
  (void)_this;
}
void StrokeSidecarArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StrokeSidecarArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StrokeSidecarArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StrokeSidecarArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  left_column_stroke_layers_.Clear();
  right_column_stroke_layers_.Clear();
  top_row_stroke_layers_.Clear();
  bottom_row_stroke_layers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&max_order_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&row_count_) -
        reinterpret_cast<char*>(&max_order_)) + sizeof(row_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrokeSidecarArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 max_order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_max_order(&has_bits);
          max_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 column_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_column_count(&has_bits);
          column_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 row_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_row_count(&has_bits);
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference left_column_stroke_layers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_column_stroke_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference right_column_stroke_layers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_column_stroke_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference top_row_stroke_layers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_top_row_stroke_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference bottom_row_stroke_layers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bottom_row_stroke_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StrokeSidecarArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StrokeSidecarArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_order = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_order(), target);
  }

  // optional uint32 column_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_column_count(), target);
  }

  // optional uint32 row_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_row_count(), target);
  }

  // repeated .TSP.Reference left_column_stroke_layers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_left_column_stroke_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_left_column_stroke_layers(i), target, stream);
  }

  // repeated .TSP.Reference right_column_stroke_layers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_right_column_stroke_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_right_column_stroke_layers(i), target, stream);
  }

  // repeated .TSP.Reference top_row_stroke_layers = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_top_row_stroke_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_top_row_stroke_layers(i), target, stream);
  }

  // repeated .TSP.Reference bottom_row_stroke_layers = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bottom_row_stroke_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_bottom_row_stroke_layers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StrokeSidecarArchive)
  return target;
}

size_t StrokeSidecarArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StrokeSidecarArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference left_column_stroke_layers = 4;
  total_size += 1UL * this->_internal_left_column_stroke_layers_size();
  for (const auto& msg : this->left_column_stroke_layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference right_column_stroke_layers = 5;
  total_size += 1UL * this->_internal_right_column_stroke_layers_size();
  for (const auto& msg : this->right_column_stroke_layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference top_row_stroke_layers = 6;
  total_size += 1UL * this->_internal_top_row_stroke_layers_size();
  for (const auto& msg : this->top_row_stroke_layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference bottom_row_stroke_layers = 7;
  total_size += 1UL * this->_internal_bottom_row_stroke_layers_size();
  for (const auto& msg : this->bottom_row_stroke_layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 max_order = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_order());
    }

    // optional uint32 column_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_column_count());
    }

    // optional uint32 row_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_row_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrokeSidecarArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StrokeSidecarArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrokeSidecarArchive::GetClassData() const { return &_class_data_; }

void StrokeSidecarArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StrokeSidecarArchive *>(to)->MergeFrom(
      static_cast<const StrokeSidecarArchive &>(from));
}


void StrokeSidecarArchive::MergeFrom(const StrokeSidecarArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.StrokeSidecarArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  left_column_stroke_layers_.MergeFrom(from.left_column_stroke_layers_);
  right_column_stroke_layers_.MergeFrom(from.right_column_stroke_layers_);
  top_row_stroke_layers_.MergeFrom(from.top_row_stroke_layers_);
  bottom_row_stroke_layers_.MergeFrom(from.bottom_row_stroke_layers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      max_order_ = from.max_order_;
    }
    if (cached_has_bits & 0x00000002u) {
      column_count_ = from.column_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      row_count_ = from.row_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrokeSidecarArchive::CopyFrom(const StrokeSidecarArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StrokeSidecarArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrokeSidecarArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(left_column_stroke_layers_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(right_column_stroke_layers_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(top_row_stroke_layers_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(bottom_row_stroke_layers_)) return false;
  return true;
}

void StrokeSidecarArchive::InternalSwap(StrokeSidecarArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  left_column_stroke_layers_.InternalSwap(&other->left_column_stroke_layers_);
  right_column_stroke_layers_.InternalSwap(&other->right_column_stroke_layers_);
  top_row_stroke_layers_.InternalSwap(&other->top_row_stroke_layers_);
  bottom_row_stroke_layers_.InternalSwap(&other->bottom_row_stroke_layers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StrokeSidecarArchive, row_count_)
      + sizeof(StrokeSidecarArchive::row_count_)
      - PROTOBUF_FIELD_OFFSET(StrokeSidecarArchive, max_order_)>(
          reinterpret_cast<char*>(&max_order_),
          reinterpret_cast<char*>(&other->max_order_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StrokeSidecarArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[45]);
}

// ===================================================================

class DurationWrapperArchive::_Internal {
 public:
};

DurationWrapperArchive::DurationWrapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.DurationWrapperArchive)
}
DurationWrapperArchive::DurationWrapperArchive(const DurationWrapperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.DurationWrapperArchive)
}

inline void DurationWrapperArchive::SharedCtor() {
}

DurationWrapperArchive::~DurationWrapperArchive() {
  // @@protoc_insertion_point(destructor:TST.DurationWrapperArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DurationWrapperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DurationWrapperArchive::ArenaDtor(void* object) {
  DurationWrapperArchive* _this = reinterpret_cast< DurationWrapperArchive* >(object);
  (void)_this;
}
void DurationWrapperArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DurationWrapperArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DurationWrapperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.DurationWrapperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DurationWrapperArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DurationWrapperArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.DurationWrapperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.DurationWrapperArchive)
  return target;
}

size_t DurationWrapperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.DurationWrapperArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DurationWrapperArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DurationWrapperArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DurationWrapperArchive::GetClassData() const { return &_class_data_; }

void DurationWrapperArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DurationWrapperArchive *>(to)->MergeFrom(
      static_cast<const DurationWrapperArchive &>(from));
}


void DurationWrapperArchive::MergeFrom(const DurationWrapperArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.DurationWrapperArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DurationWrapperArchive::CopyFrom(const DurationWrapperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.DurationWrapperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DurationWrapperArchive::IsInitialized() const {
  return true;
}

void DurationWrapperArchive::InternalSwap(DurationWrapperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DurationWrapperArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[46]);
}

// ===================================================================

class Cell::_Internal {
 public:
  using HasBits = decltype(std::declval<Cell>()._has_bits_);
  static void set_has_valuetype(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSP::Reference& cell_style(const Cell* msg);
  static void set_has_cell_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& text_style(const Cell* msg);
  static void set_has_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_numbervalue(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_stringvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_boolvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSK::FormatStructArchive& current_format(const Cell* msg);
  static void set_has_current_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& formulaerror(const Cell* msg);
  static void set_has_formulaerror(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSK::FormatStructArchive& number_format(const Cell* msg);
  static void set_has_number_format(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSK::FormatStructArchive& currency_format(const Cell* msg);
  static void set_has_currency_format(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSK::FormatStructArchive& duration_format(const Cell* msg);
  static void set_has_duration_format(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSK::FormatStructArchive& date_format(const Cell* msg);
  static void set_has_date_format(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSK::FormatStructArchive& custom_format(const Cell* msg);
  static void set_has_custom_format(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSK::FormatStructArchive& base_format(const Cell* msg);
  static void set_has_base_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_explicit_format_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::TSP::Reference& richtext(const Cell* msg);
  static void set_has_richtext(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::Reference& conditional_style(const Cell* msg);
  static void set_has_conditional_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSP::Reference& comment_storage(const Cell* msg);
  static void set_has_comment_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_conditional_style_applied_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TST::ImportWarningSetArchive& import_warning_set(const Cell* msg);
  static void set_has_import_warning_set(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSK::CustomFormatArchive& custom_format_object(const Cell* msg);
  static void set_has_custom_format_object(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TST::CellBorderArchive& cell_border(const Cell* msg);
  static void set_has_cell_border(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TST::CellSpecArchive& cell_spec(const Cell* msg);
  static void set_has_cell_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_cell_format_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::TSK::FormatStructArchive& text_format(const Cell* msg);
  static void set_has_text_format(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSK::FormatStructArchive& boolean_format(const Cell* msg);
  static void set_has_boolean_format(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_decimal_value_low(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_decimal_value_high(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00100000) ^ 0x00100000) != 0;
  }
};

const ::TSP::Reference&
Cell::_Internal::cell_style(const Cell* msg) {
  return *msg->cell_style_;
}
const ::TSP::Reference&
Cell::_Internal::text_style(const Cell* msg) {
  return *msg->text_style_;
}
const ::TSK::FormatStructArchive&
Cell::_Internal::current_format(const Cell* msg) {
  return *msg->current_format_;
}
const ::TSP::Reference&
Cell::_Internal::formulaerror(const Cell* msg) {
  return *msg->formulaerror_;
}
const ::TSK::FormatStructArchive&
Cell::_Internal::number_format(const Cell* msg) {
  return *msg->number_format_;
}
const ::TSK::FormatStructArchive&
Cell::_Internal::currency_format(const Cell* msg) {
  return *msg->currency_format_;
}
const ::TSK::FormatStructArchive&
Cell::_Internal::duration_format(const Cell* msg) {
  return *msg->duration_format_;
}
const ::TSK::FormatStructArchive&
Cell::_Internal::date_format(const Cell* msg) {
  return *msg->date_format_;
}
const ::TSK::FormatStructArchive&
Cell::_Internal::custom_format(const Cell* msg) {
  return *msg->custom_format_;
}
const ::TSK::FormatStructArchive&
Cell::_Internal::base_format(const Cell* msg) {
  return *msg->base_format_;
}
const ::TSP::Reference&
Cell::_Internal::richtext(const Cell* msg) {
  return *msg->richtext_;
}
const ::TSP::Reference&
Cell::_Internal::conditional_style(const Cell* msg) {
  return *msg->conditional_style_;
}
const ::TSP::Reference&
Cell::_Internal::comment_storage(const Cell* msg) {
  return *msg->comment_storage_;
}
const ::TST::ImportWarningSetArchive&
Cell::_Internal::import_warning_set(const Cell* msg) {
  return *msg->import_warning_set_;
}
const ::TSK::CustomFormatArchive&
Cell::_Internal::custom_format_object(const Cell* msg) {
  return *msg->custom_format_object_;
}
const ::TST::CellBorderArchive&
Cell::_Internal::cell_border(const Cell* msg) {
  return *msg->cell_border_;
}
const ::TST::CellSpecArchive&
Cell::_Internal::cell_spec(const Cell* msg) {
  return *msg->cell_spec_;
}
const ::TSK::FormatStructArchive&
Cell::_Internal::text_format(const Cell* msg) {
  return *msg->text_format_;
}
const ::TSK::FormatStructArchive&
Cell::_Internal::boolean_format(const Cell* msg) {
  return *msg->boolean_format_;
}
void Cell::clear_cell_style() {
  if (cell_style_ != nullptr) cell_style_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Cell::clear_text_style() {
  if (text_style_ != nullptr) text_style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Cell::clear_current_format() {
  if (current_format_ != nullptr) current_format_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Cell::clear_formulaerror() {
  if (formulaerror_ != nullptr) formulaerror_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void Cell::clear_number_format() {
  if (number_format_ != nullptr) number_format_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void Cell::clear_currency_format() {
  if (currency_format_ != nullptr) currency_format_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void Cell::clear_duration_format() {
  if (duration_format_ != nullptr) duration_format_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void Cell::clear_date_format() {
  if (date_format_ != nullptr) date_format_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void Cell::clear_custom_format() {
  if (custom_format_ != nullptr) custom_format_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void Cell::clear_base_format() {
  if (base_format_ != nullptr) base_format_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void Cell::clear_richtext() {
  if (richtext_ != nullptr) richtext_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void Cell::clear_conditional_style() {
  if (conditional_style_ != nullptr) conditional_style_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void Cell::clear_comment_storage() {
  if (comment_storage_ != nullptr) comment_storage_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void Cell::clear_custom_format_object() {
  if (custom_format_object_ != nullptr) custom_format_object_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void Cell::clear_text_format() {
  if (text_format_ != nullptr) text_format_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void Cell::clear_boolean_format() {
  if (boolean_format_ != nullptr) boolean_format_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
Cell::Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.Cell)
}
Cell::Cell(const Cell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stringvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stringvalue()) {
    stringvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stringvalue(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_cell_style()) {
    cell_style_ = new ::TSP::Reference(*from.cell_style_);
  } else {
    cell_style_ = nullptr;
  }
  if (from._internal_has_text_style()) {
    text_style_ = new ::TSP::Reference(*from.text_style_);
  } else {
    text_style_ = nullptr;
  }
  if (from._internal_has_current_format()) {
    current_format_ = new ::TSK::FormatStructArchive(*from.current_format_);
  } else {
    current_format_ = nullptr;
  }
  if (from._internal_has_formulaerror()) {
    formulaerror_ = new ::TSP::Reference(*from.formulaerror_);
  } else {
    formulaerror_ = nullptr;
  }
  if (from._internal_has_number_format()) {
    number_format_ = new ::TSK::FormatStructArchive(*from.number_format_);
  } else {
    number_format_ = nullptr;
  }
  if (from._internal_has_currency_format()) {
    currency_format_ = new ::TSK::FormatStructArchive(*from.currency_format_);
  } else {
    currency_format_ = nullptr;
  }
  if (from._internal_has_duration_format()) {
    duration_format_ = new ::TSK::FormatStructArchive(*from.duration_format_);
  } else {
    duration_format_ = nullptr;
  }
  if (from._internal_has_date_format()) {
    date_format_ = new ::TSK::FormatStructArchive(*from.date_format_);
  } else {
    date_format_ = nullptr;
  }
  if (from._internal_has_custom_format()) {
    custom_format_ = new ::TSK::FormatStructArchive(*from.custom_format_);
  } else {
    custom_format_ = nullptr;
  }
  if (from._internal_has_base_format()) {
    base_format_ = new ::TSK::FormatStructArchive(*from.base_format_);
  } else {
    base_format_ = nullptr;
  }
  if (from._internal_has_richtext()) {
    richtext_ = new ::TSP::Reference(*from.richtext_);
  } else {
    richtext_ = nullptr;
  }
  if (from._internal_has_conditional_style()) {
    conditional_style_ = new ::TSP::Reference(*from.conditional_style_);
  } else {
    conditional_style_ = nullptr;
  }
  if (from._internal_has_comment_storage()) {
    comment_storage_ = new ::TSP::Reference(*from.comment_storage_);
  } else {
    comment_storage_ = nullptr;
  }
  if (from._internal_has_import_warning_set()) {
    import_warning_set_ = new ::TST::ImportWarningSetArchive(*from.import_warning_set_);
  } else {
    import_warning_set_ = nullptr;
  }
  if (from._internal_has_custom_format_object()) {
    custom_format_object_ = new ::TSK::CustomFormatArchive(*from.custom_format_object_);
  } else {
    custom_format_object_ = nullptr;
  }
  if (from._internal_has_cell_border()) {
    cell_border_ = new ::TST::CellBorderArchive(*from.cell_border_);
  } else {
    cell_border_ = nullptr;
  }
  if (from._internal_has_cell_spec()) {
    cell_spec_ = new ::TST::CellSpecArchive(*from.cell_spec_);
  } else {
    cell_spec_ = nullptr;
  }
  if (from._internal_has_text_format()) {
    text_format_ = new ::TSK::FormatStructArchive(*from.text_format_);
  } else {
    text_format_ = nullptr;
  }
  if (from._internal_has_boolean_format()) {
    boolean_format_ = new ::TSK::FormatStructArchive(*from.boolean_format_);
  } else {
    boolean_format_ = nullptr;
  }
  ::memcpy(&valuetype_, &from.valuetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&decimal_value_high_) -
    reinterpret_cast<char*>(&valuetype_)) + sizeof(decimal_value_high_));
  // @@protoc_insertion_point(copy_constructor:TST.Cell)
}

inline void Cell::SharedCtor() {
stringvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&decimal_value_high_) -
    reinterpret_cast<char*>(&cell_style_)) + sizeof(decimal_value_high_));
}

Cell::~Cell() {
  // @@protoc_insertion_point(destructor:TST.Cell)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Cell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stringvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cell_style_;
  if (this != internal_default_instance()) delete text_style_;
  if (this != internal_default_instance()) delete current_format_;
  if (this != internal_default_instance()) delete formulaerror_;
  if (this != internal_default_instance()) delete number_format_;
  if (this != internal_default_instance()) delete currency_format_;
  if (this != internal_default_instance()) delete duration_format_;
  if (this != internal_default_instance()) delete date_format_;
  if (this != internal_default_instance()) delete custom_format_;
  if (this != internal_default_instance()) delete base_format_;
  if (this != internal_default_instance()) delete richtext_;
  if (this != internal_default_instance()) delete conditional_style_;
  if (this != internal_default_instance()) delete comment_storage_;
  if (this != internal_default_instance()) delete import_warning_set_;
  if (this != internal_default_instance()) delete custom_format_object_;
  if (this != internal_default_instance()) delete cell_border_;
  if (this != internal_default_instance()) delete cell_spec_;
  if (this != internal_default_instance()) delete text_format_;
  if (this != internal_default_instance()) delete boolean_format_;
}

void Cell::ArenaDtor(void* object) {
  Cell* _this = reinterpret_cast< Cell* >(object);
  (void)_this;
}
void Cell::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Cell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Cell::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.Cell)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      stringvalue_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_style_ != nullptr);
      cell_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(text_style_ != nullptr);
      text_style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(current_format_ != nullptr);
      current_format_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(formulaerror_ != nullptr);
      formulaerror_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(number_format_ != nullptr);
      number_format_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(currency_format_ != nullptr);
      currency_format_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(duration_format_ != nullptr);
      duration_format_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(date_format_ != nullptr);
      date_format_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(custom_format_ != nullptr);
      custom_format_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(base_format_ != nullptr);
      base_format_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(richtext_ != nullptr);
      richtext_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(conditional_style_ != nullptr);
      conditional_style_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(comment_storage_ != nullptr);
      comment_storage_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(import_warning_set_ != nullptr);
      import_warning_set_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(custom_format_object_ != nullptr);
      custom_format_object_->Clear();
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(cell_border_ != nullptr);
      cell_border_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(cell_spec_ != nullptr);
      cell_spec_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(text_format_ != nullptr);
      text_format_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(boolean_format_ != nullptr);
      boolean_format_->Clear();
    }
  }
  if (cached_has_bits & 0x00f00000u) {
    ::memset(&valuetype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&explicit_format_flags_) -
        reinterpret_cast<char*>(&valuetype_)) + sizeof(explicit_format_flags_));
  }
  if (cached_has_bits & 0x0f000000u) {
    ::memset(&conditional_style_applied_rule_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&decimal_value_high_) -
        reinterpret_cast<char*>(&conditional_style_applied_rule_)) + sizeof(decimal_value_high_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cell::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CellValueType valueType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::CellValueType_IsValid(val))) {
            _internal_set_valuetype(static_cast<::TST::CellValueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference cell_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference text_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double numberValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_numbervalue(&has_bits);
          numbervalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string stringValue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_stringvalue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.Cell.stringValue");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool boolValue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_boolvalue(&has_bits);
          boolvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive current_format = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference formulaError = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_formulaerror(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive number_format = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_number_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive currency_format = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_currency_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive duration_format = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive date_format = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive custom_format = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive base_format = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 explicit_format_flags = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_explicit_format_flags(&has_bits);
          explicit_format_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference richText = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_richtext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference conditional_style = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_conditional_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference comment_storage = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_comment_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 conditional_style_applied_rule = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_conditional_style_applied_rule(&has_bits);
          conditional_style_applied_rule_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.ImportWarningSetArchive import_warning_set = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_import_warning_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.CustomFormatArchive custom_format_object = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_format_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellBorderArchive cell_border = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_border(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellSpecArchive cell_spec = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cell_format_kind = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_cell_format_kind(&has_bits);
          cell_format_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive text_format = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive boolean_format = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_boolean_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 decimal_value_low = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_decimal_value_low(&has_bits);
          decimal_value_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 decimal_value_high = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_decimal_value_high(&has_bits);
          decimal_value_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cell::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.Cell)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CellValueType valueType = 2;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_valuetype(), target);
  }

  // optional .TSP.Reference cell_style = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cell_style(this), target, stream);
  }

  // optional .TSP.Reference text_style = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::text_style(this), target, stream);
  }

  // optional double numberValue = 5;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_numbervalue(), target);
  }

  // optional string stringValue = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stringvalue().data(), static_cast<int>(this->_internal_stringvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.Cell.stringValue");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_stringvalue(), target);
  }

  // optional bool boolValue = 7;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_boolvalue(), target);
  }

  // optional .TSK.FormatStructArchive current_format = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::current_format(this), target, stream);
  }

  // optional .TSP.Reference formulaError = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::formulaerror(this), target, stream);
  }

  // optional .TSK.FormatStructArchive number_format = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::number_format(this), target, stream);
  }

  // optional .TSK.FormatStructArchive currency_format = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::currency_format(this), target, stream);
  }

  // optional .TSK.FormatStructArchive duration_format = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::duration_format(this), target, stream);
  }

  // optional .TSK.FormatStructArchive date_format = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::date_format(this), target, stream);
  }

  // optional .TSK.FormatStructArchive custom_format = 16;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::custom_format(this), target, stream);
  }

  // optional .TSK.FormatStructArchive base_format = 17;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::base_format(this), target, stream);
  }

  // optional uint32 explicit_format_flags = 19;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_explicit_format_flags(), target);
  }

  // optional .TSP.Reference richText = 20;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::richtext(this), target, stream);
  }

  // optional .TSP.Reference conditional_style = 21;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::conditional_style(this), target, stream);
  }

  // optional .TSP.Reference comment_storage = 23;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::comment_storage(this), target, stream);
  }

  // optional uint32 conditional_style_applied_rule = 24;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_conditional_style_applied_rule(), target);
  }

  // optional .TST.ImportWarningSetArchive import_warning_set = 25;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::import_warning_set(this), target, stream);
  }

  // optional .TSK.CustomFormatArchive custom_format_object = 26;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::custom_format_object(this), target, stream);
  }

  // optional .TST.CellBorderArchive cell_border = 27;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::cell_border(this), target, stream);
  }

  // optional .TST.CellSpecArchive cell_spec = 28;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::cell_spec(this), target, stream);
  }

  // optional uint32 cell_format_kind = 29;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_cell_format_kind(), target);
  }

  // optional .TSK.FormatStructArchive text_format = 30;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::text_format(this), target, stream);
  }

  // optional .TSK.FormatStructArchive boolean_format = 31;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::boolean_format(this), target, stream);
  }

  // optional uint64 decimal_value_low = 32;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(32, this->_internal_decimal_value_low(), target);
  }

  // optional uint64 decimal_value_high = 33;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(33, this->_internal_decimal_value_high(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.Cell)
  return target;
}

size_t Cell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.Cell)
  size_t total_size = 0;

  // required .TST.CellValueType valueType = 2;
  if (_internal_has_valuetype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_valuetype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string stringValue = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stringvalue());
    }

    // optional .TSP.Reference cell_style = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_style_);
    }

    // optional .TSP.Reference text_style = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_style_);
    }

    // optional .TSK.FormatStructArchive current_format = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_format_);
    }

    // optional .TSP.Reference formulaError = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *formulaerror_);
    }

    // optional .TSK.FormatStructArchive number_format = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *number_format_);
    }

    // optional .TSK.FormatStructArchive currency_format = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *currency_format_);
    }

    // optional .TSK.FormatStructArchive duration_format = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *duration_format_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSK.FormatStructArchive date_format = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *date_format_);
    }

    // optional .TSK.FormatStructArchive custom_format = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *custom_format_);
    }

    // optional .TSK.FormatStructArchive base_format = 17;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_format_);
    }

    // optional .TSP.Reference richText = 20;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *richtext_);
    }

    // optional .TSP.Reference conditional_style = 21;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *conditional_style_);
    }

    // optional .TSP.Reference comment_storage = 23;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *comment_storage_);
    }

    // optional .TST.ImportWarningSetArchive import_warning_set = 25;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *import_warning_set_);
    }

    // optional .TSK.CustomFormatArchive custom_format_object = 26;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *custom_format_object_);
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional .TST.CellBorderArchive cell_border = 27;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_border_);
    }

    // optional .TST.CellSpecArchive cell_spec = 28;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_spec_);
    }

    // optional .TSK.FormatStructArchive text_format = 30;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_format_);
    }

    // optional .TSK.FormatStructArchive boolean_format = 31;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *boolean_format_);
    }

  }
  if (cached_has_bits & 0x00e00000u) {
    // optional bool boolValue = 7;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 1;
    }

    // optional double numberValue = 5;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 8;
    }

    // optional uint32 explicit_format_flags = 19;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_explicit_format_flags());
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional uint32 conditional_style_applied_rule = 24;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_conditional_style_applied_rule());
    }

    // optional uint32 cell_format_kind = 29;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cell_format_kind());
    }

    // optional uint64 decimal_value_low = 32;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_decimal_value_low());
    }

    // optional uint64 decimal_value_high = 33;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_decimal_value_high());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Cell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cell::GetClassData() const { return &_class_data_; }

void Cell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Cell *>(to)->MergeFrom(
      static_cast<const Cell &>(from));
}


void Cell::MergeFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.Cell)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stringvalue(from._internal_stringvalue());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_style()->::TSP::Reference::MergeFrom(from._internal_cell_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_text_style()->::TSP::Reference::MergeFrom(from._internal_text_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_current_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_current_format());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_formulaerror()->::TSP::Reference::MergeFrom(from._internal_formulaerror());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_number_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_number_format());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_currency_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_currency_format());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_duration_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_duration_format());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_date_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_date_format());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_custom_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_custom_format());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_base_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_base_format());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_richtext()->::TSP::Reference::MergeFrom(from._internal_richtext());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_conditional_style()->::TSP::Reference::MergeFrom(from._internal_conditional_style());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_comment_storage()->::TSP::Reference::MergeFrom(from._internal_comment_storage());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_import_warning_set()->::TST::ImportWarningSetArchive::MergeFrom(from._internal_import_warning_set());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_custom_format_object()->::TSK::CustomFormatArchive::MergeFrom(from._internal_custom_format_object());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_cell_border()->::TST::CellBorderArchive::MergeFrom(from._internal_cell_border());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_cell_spec()->::TST::CellSpecArchive::MergeFrom(from._internal_cell_spec());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_text_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_text_format());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_boolean_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_boolean_format());
    }
    if (cached_has_bits & 0x00100000u) {
      valuetype_ = from.valuetype_;
    }
    if (cached_has_bits & 0x00200000u) {
      boolvalue_ = from.boolvalue_;
    }
    if (cached_has_bits & 0x00400000u) {
      numbervalue_ = from.numbervalue_;
    }
    if (cached_has_bits & 0x00800000u) {
      explicit_format_flags_ = from.explicit_format_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      conditional_style_applied_rule_ = from.conditional_style_applied_rule_;
    }
    if (cached_has_bits & 0x02000000u) {
      cell_format_kind_ = from.cell_format_kind_;
    }
    if (cached_has_bits & 0x04000000u) {
      decimal_value_low_ = from.decimal_value_low_;
    }
    if (cached_has_bits & 0x08000000u) {
      decimal_value_high_ = from.decimal_value_high_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cell::CopyFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_cell_style()) {
    if (!cell_style_->IsInitialized()) return false;
  }
  if (_internal_has_text_style()) {
    if (!text_style_->IsInitialized()) return false;
  }
  if (_internal_has_current_format()) {
    if (!current_format_->IsInitialized()) return false;
  }
  if (_internal_has_formulaerror()) {
    if (!formulaerror_->IsInitialized()) return false;
  }
  if (_internal_has_number_format()) {
    if (!number_format_->IsInitialized()) return false;
  }
  if (_internal_has_currency_format()) {
    if (!currency_format_->IsInitialized()) return false;
  }
  if (_internal_has_duration_format()) {
    if (!duration_format_->IsInitialized()) return false;
  }
  if (_internal_has_date_format()) {
    if (!date_format_->IsInitialized()) return false;
  }
  if (_internal_has_custom_format()) {
    if (!custom_format_->IsInitialized()) return false;
  }
  if (_internal_has_base_format()) {
    if (!base_format_->IsInitialized()) return false;
  }
  if (_internal_has_richtext()) {
    if (!richtext_->IsInitialized()) return false;
  }
  if (_internal_has_conditional_style()) {
    if (!conditional_style_->IsInitialized()) return false;
  }
  if (_internal_has_comment_storage()) {
    if (!comment_storage_->IsInitialized()) return false;
  }
  if (_internal_has_import_warning_set()) {
    if (!import_warning_set_->IsInitialized()) return false;
  }
  if (_internal_has_custom_format_object()) {
    if (!custom_format_object_->IsInitialized()) return false;
  }
  if (_internal_has_cell_border()) {
    if (!cell_border_->IsInitialized()) return false;
  }
  if (_internal_has_cell_spec()) {
    if (!cell_spec_->IsInitialized()) return false;
  }
  if (_internal_has_text_format()) {
    if (!text_format_->IsInitialized()) return false;
  }
  if (_internal_has_boolean_format()) {
    if (!boolean_format_->IsInitialized()) return false;
  }
  return true;
}

void Cell::InternalSwap(Cell* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stringvalue_, GetArenaForAllocation(),
      &other->stringvalue_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cell, decimal_value_high_)
      + sizeof(Cell::decimal_value_high_)
      - PROTOBUF_FIELD_OFFSET(Cell, cell_style_)>(
          reinterpret_cast<char*>(&cell_style_),
          reinterpret_cast<char*>(&other->cell_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cell::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[47]);
}

// ===================================================================

class MergeRegionMapArchive::_Internal {
 public:
};

MergeRegionMapArchive::MergeRegionMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cell_range_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.MergeRegionMapArchive)
}
MergeRegionMapArchive::MergeRegionMapArchive(const MergeRegionMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cell_range_(from.cell_range_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.MergeRegionMapArchive)
}

inline void MergeRegionMapArchive::SharedCtor() {
}

MergeRegionMapArchive::~MergeRegionMapArchive() {
  // @@protoc_insertion_point(destructor:TST.MergeRegionMapArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MergeRegionMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MergeRegionMapArchive::ArenaDtor(void* object) {
  MergeRegionMapArchive* _this = reinterpret_cast< MergeRegionMapArchive* >(object);
  (void)_this;
}
void MergeRegionMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MergeRegionMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MergeRegionMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.MergeRegionMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_range_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeRegionMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.CellRange cell_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MergeRegionMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.MergeRegionMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.CellRange cell_range = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_range_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cell_range(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.MergeRegionMapArchive)
  return target;
}

size_t MergeRegionMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.MergeRegionMapArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.CellRange cell_range = 1;
  total_size += 1UL * this->_internal_cell_range_size();
  for (const auto& msg : this->cell_range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MergeRegionMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MergeRegionMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MergeRegionMapArchive::GetClassData() const { return &_class_data_; }

void MergeRegionMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MergeRegionMapArchive *>(to)->MergeFrom(
      static_cast<const MergeRegionMapArchive &>(from));
}


void MergeRegionMapArchive::MergeFrom(const MergeRegionMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.MergeRegionMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_range_.MergeFrom(from.cell_range_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MergeRegionMapArchive::CopyFrom(const MergeRegionMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.MergeRegionMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeRegionMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cell_range_)) return false;
  return true;
}

void MergeRegionMapArchive::InternalSwap(MergeRegionMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cell_range_.InternalSwap(&other->cell_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeRegionMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[48]);
}

// ===================================================================

class CellMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellMapArchive>()._has_bits_);
  static void set_has_uid_based(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::CellUIDListArchive& cell_uid_list(const CellMapArchive* msg);
  static void set_has_cell_uid_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_may_modify_formulas_in_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_may_modify_values_referenced_by_formulas(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TST::CellUIDListArchive&
CellMapArchive::_Internal::cell_uid_list(const CellMapArchive* msg) {
  return *msg->cell_uid_list_;
}
void CellMapArchive::clear_cell_tiles() {
  cell_tiles_.Clear();
}
void CellMapArchive::clear_expanded_cell_ids() {
  expanded_cell_ids_.Clear();
}
void CellMapArchive::clear_merge_uid_ranges() {
  merge_uid_ranges_.Clear();
}
void CellMapArchive::clear_unmerge_uid_ranges() {
  unmerge_uid_ranges_.Clear();
}
CellMapArchive::CellMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cell_tiles_(arena),
  merge_uid_ranges_(arena),
  unmerge_uid_ranges_(arena),
  merge_actions_(arena),
  expanded_cell_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CellMapArchive)
}
CellMapArchive::CellMapArchive(const CellMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cell_tiles_(from.cell_tiles_),
      merge_uid_ranges_(from.merge_uid_ranges_),
      unmerge_uid_ranges_(from.unmerge_uid_ranges_),
      merge_actions_(from.merge_actions_),
      expanded_cell_ids_(from.expanded_cell_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_uid_list()) {
    cell_uid_list_ = new ::TST::CellUIDListArchive(*from.cell_uid_list_);
  } else {
    cell_uid_list_ = nullptr;
  }
  ::memcpy(&uid_based_, &from.uid_based_,
    static_cast<size_t>(reinterpret_cast<char*>(&may_modify_values_referenced_by_formulas_) -
    reinterpret_cast<char*>(&uid_based_)) + sizeof(may_modify_values_referenced_by_formulas_));
  // @@protoc_insertion_point(copy_constructor:TST.CellMapArchive)
}

inline void CellMapArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_uid_list_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uid_based_) -
    reinterpret_cast<char*>(&cell_uid_list_)) + sizeof(uid_based_));
may_modify_formulas_in_cells_ = true;
may_modify_values_referenced_by_formulas_ = true;
}

CellMapArchive::~CellMapArchive() {
  // @@protoc_insertion_point(destructor:TST.CellMapArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cell_uid_list_;
}

void CellMapArchive::ArenaDtor(void* object) {
  CellMapArchive* _this = reinterpret_cast< CellMapArchive* >(object);
  (void)_this;
}
void CellMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_tiles_.Clear();
  merge_uid_ranges_.Clear();
  unmerge_uid_ranges_.Clear();
  merge_actions_.Clear();
  expanded_cell_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(cell_uid_list_ != nullptr);
    cell_uid_list_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    uid_based_ = false;
    may_modify_formulas_in_cells_ = true;
    may_modify_values_referenced_by_formulas_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference cell_tiles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool uid_based = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uid_based(&has_bits);
          uid_based_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellUIDListArchive cell_uid_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUIDRectArchive merge_uid_ranges = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_merge_uid_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUIDRectArchive unmerge_uid_ranges = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unmerge_uid_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool may_modify_formulas_in_cells = 10 [default = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_may_modify_formulas_in_cells(&has_bits);
          may_modify_formulas_in_cells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool may_modify_values_referenced_by_formulas = 11 [default = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_may_modify_values_referenced_by_formulas(&has_bits);
          may_modify_values_referenced_by_formulas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.MergeOperationArchive merge_actions = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_merge_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.CellCoordinateArchive expanded_cell_ids = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_expanded_cell_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference cell_tiles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_tiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cell_tiles(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required bool uid_based = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_uid_based(), target);
  }

  // optional .TST.CellUIDListArchive cell_uid_list = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cell_uid_list(this), target, stream);
  }

  // repeated .TSP.UUIDRectArchive merge_uid_ranges = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_merge_uid_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_merge_uid_ranges(i), target, stream);
  }

  // repeated .TSP.UUIDRectArchive unmerge_uid_ranges = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unmerge_uid_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_unmerge_uid_ranges(i), target, stream);
  }

  // optional bool may_modify_formulas_in_cells = 10 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_may_modify_formulas_in_cells(), target);
  }

  // optional bool may_modify_values_referenced_by_formulas = 11 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_may_modify_values_referenced_by_formulas(), target);
  }

  // repeated .TST.MergeOperationArchive merge_actions = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_merge_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_merge_actions(i), target, stream);
  }

  // repeated .TSCE.CellCoordinateArchive expanded_cell_ids = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_expanded_cell_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_expanded_cell_ids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellMapArchive)
  return target;
}

size_t CellMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellMapArchive)
  size_t total_size = 0;

  // required bool uid_based = 3;
  if (_internal_has_uid_based()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference cell_tiles = 2;
  total_size += 1UL * this->_internal_cell_tiles_size();
  for (const auto& msg : this->cell_tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUIDRectArchive merge_uid_ranges = 7;
  total_size += 1UL * this->_internal_merge_uid_ranges_size();
  for (const auto& msg : this->merge_uid_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUIDRectArchive unmerge_uid_ranges = 9;
  total_size += 1UL * this->_internal_unmerge_uid_ranges_size();
  for (const auto& msg : this->unmerge_uid_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.MergeOperationArchive merge_actions = 13;
  total_size += 1UL * this->_internal_merge_actions_size();
  for (const auto& msg : this->merge_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.CellCoordinateArchive expanded_cell_ids = 14;
  total_size += 1UL * this->_internal_expanded_cell_ids_size();
  for (const auto& msg : this->expanded_cell_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TST.CellUIDListArchive cell_uid_list = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_uid_list_);
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional bool may_modify_formulas_in_cells = 10 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool may_modify_values_referenced_by_formulas = 11 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellMapArchive::GetClassData() const { return &_class_data_; }

void CellMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CellMapArchive *>(to)->MergeFrom(
      static_cast<const CellMapArchive &>(from));
}


void CellMapArchive::MergeFrom(const CellMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CellMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_tiles_.MergeFrom(from.cell_tiles_);
  merge_uid_ranges_.MergeFrom(from.merge_uid_ranges_);
  unmerge_uid_ranges_.MergeFrom(from.unmerge_uid_ranges_);
  merge_actions_.MergeFrom(from.merge_actions_);
  expanded_cell_ids_.MergeFrom(from.expanded_cell_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cell_uid_list()->::TST::CellUIDListArchive::MergeFrom(from._internal_cell_uid_list());
    }
    if (cached_has_bits & 0x00000002u) {
      uid_based_ = from.uid_based_;
    }
    if (cached_has_bits & 0x00000004u) {
      may_modify_formulas_in_cells_ = from.may_modify_formulas_in_cells_;
    }
    if (cached_has_bits & 0x00000008u) {
      may_modify_values_referenced_by_formulas_ = from.may_modify_values_referenced_by_formulas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellMapArchive::CopyFrom(const CellMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellMapArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cell_tiles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(merge_uid_ranges_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(unmerge_uid_ranges_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(merge_actions_)) return false;
  if (_internal_has_cell_uid_list()) {
    if (!cell_uid_list_->IsInitialized()) return false;
  }
  return true;
}

void CellMapArchive::InternalSwap(CellMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cell_tiles_.InternalSwap(&other->cell_tiles_);
  merge_uid_ranges_.InternalSwap(&other->merge_uid_ranges_);
  unmerge_uid_ranges_.InternalSwap(&other->unmerge_uid_ranges_);
  merge_actions_.InternalSwap(&other->merge_actions_);
  expanded_cell_ids_.InternalSwap(&other->expanded_cell_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellMapArchive, uid_based_)
      + sizeof(CellMapArchive::uid_based_)
      - PROTOBUF_FIELD_OFFSET(CellMapArchive, cell_uid_list_)>(
          reinterpret_cast<char*>(&cell_uid_list_),
          reinterpret_cast<char*>(&other->cell_uid_list_));
  swap(may_modify_formulas_in_cells_, other->may_modify_formulas_in_cells_);
  swap(may_modify_values_referenced_by_formulas_, other->may_modify_values_referenced_by_formulas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[49]);
}

// ===================================================================

class CellListArchive_OptionalCell::_Internal {
 public:
  using HasBits = decltype(std::declval<CellListArchive_OptionalCell>()._has_bits_);
  static const ::TST::Cell& cell(const CellListArchive_OptionalCell* msg);
  static void set_has_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TST::Cell&
CellListArchive_OptionalCell::_Internal::cell(const CellListArchive_OptionalCell* msg) {
  return *msg->cell_;
}
CellListArchive_OptionalCell::CellListArchive_OptionalCell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CellListArchive.OptionalCell)
}
CellListArchive_OptionalCell::CellListArchive_OptionalCell(const CellListArchive_OptionalCell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell()) {
    cell_ = new ::TST::Cell(*from.cell_);
  } else {
    cell_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CellListArchive.OptionalCell)
}

inline void CellListArchive_OptionalCell::SharedCtor() {
cell_ = nullptr;
}

CellListArchive_OptionalCell::~CellListArchive_OptionalCell() {
  // @@protoc_insertion_point(destructor:TST.CellListArchive.OptionalCell)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellListArchive_OptionalCell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cell_;
}

void CellListArchive_OptionalCell::ArenaDtor(void* object) {
  CellListArchive_OptionalCell* _this = reinterpret_cast< CellListArchive_OptionalCell* >(object);
  (void)_this;
}
void CellListArchive_OptionalCell::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellListArchive_OptionalCell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellListArchive_OptionalCell::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellListArchive.OptionalCell)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(cell_ != nullptr);
    cell_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellListArchive_OptionalCell::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TST.Cell cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellListArchive_OptionalCell::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellListArchive.OptionalCell)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TST.Cell cell = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cell(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellListArchive.OptionalCell)
  return target;
}

size_t CellListArchive_OptionalCell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellListArchive.OptionalCell)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TST.Cell cell = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellListArchive_OptionalCell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellListArchive_OptionalCell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellListArchive_OptionalCell::GetClassData() const { return &_class_data_; }

void CellListArchive_OptionalCell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CellListArchive_OptionalCell *>(to)->MergeFrom(
      static_cast<const CellListArchive_OptionalCell &>(from));
}


void CellListArchive_OptionalCell::MergeFrom(const CellListArchive_OptionalCell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CellListArchive.OptionalCell)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cell()) {
    _internal_mutable_cell()->::TST::Cell::MergeFrom(from._internal_cell());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellListArchive_OptionalCell::CopyFrom(const CellListArchive_OptionalCell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellListArchive.OptionalCell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellListArchive_OptionalCell::IsInitialized() const {
  if (_internal_has_cell()) {
    if (!cell_->IsInitialized()) return false;
  }
  return true;
}

void CellListArchive_OptionalCell::InternalSwap(CellListArchive_OptionalCell* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cell_, other->cell_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellListArchive_OptionalCell::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[50]);
}

// ===================================================================

class CellListArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellListArchive>()._has_bits_);
  static void set_has_trailing_empty_cell_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CellListArchive::CellListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cells_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CellListArchive)
}
CellListArchive::CellListArchive(const CellListArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cells_(from.cells_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trailing_empty_cell_count_ = from.trailing_empty_cell_count_;
  // @@protoc_insertion_point(copy_constructor:TST.CellListArchive)
}

inline void CellListArchive::SharedCtor() {
trailing_empty_cell_count_ = 0u;
}

CellListArchive::~CellListArchive() {
  // @@protoc_insertion_point(destructor:TST.CellListArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellListArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CellListArchive::ArenaDtor(void* object) {
  CellListArchive* _this = reinterpret_cast< CellListArchive* >(object);
  (void)_this;
}
void CellListArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellListArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellListArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellListArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cells_.Clear();
  trailing_empty_cell_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellListArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.CellListArchive.OptionalCell cells = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 trailing_empty_cell_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_trailing_empty_cell_count(&has_bits);
          trailing_empty_cell_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellListArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellListArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.CellListArchive.OptionalCell cells = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cells_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cells(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 trailing_empty_cell_count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_trailing_empty_cell_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellListArchive)
  return target;
}

size_t CellListArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellListArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.CellListArchive.OptionalCell cells = 1;
  total_size += 1UL * this->_internal_cells_size();
  for (const auto& msg : this->cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 trailing_empty_cell_count = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_trailing_empty_cell_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellListArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellListArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellListArchive::GetClassData() const { return &_class_data_; }

void CellListArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CellListArchive *>(to)->MergeFrom(
      static_cast<const CellListArchive &>(from));
}


void CellListArchive::MergeFrom(const CellListArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CellListArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cells_.MergeFrom(from.cells_);
  if (from._internal_has_trailing_empty_cell_count()) {
    _internal_set_trailing_empty_cell_count(from._internal_trailing_empty_cell_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellListArchive::CopyFrom(const CellListArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellListArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellListArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cells_)) return false;
  return true;
}

void CellListArchive::InternalSwap(CellListArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cells_.InternalSwap(&other->cells_);
  swap(trailing_empty_cell_count_, other->trailing_empty_cell_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellListArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[51]);
}

// ===================================================================

class ConcurrentCellMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ConcurrentCellMapArchive>()._has_bits_);
  static void set_has_uid_based(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_may_modify_formulas_in_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_may_modify_values_referenced_by_formulas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

void ConcurrentCellMapArchive::clear_cell_lists() {
  cell_lists_.Clear();
}
ConcurrentCellMapArchive::ConcurrentCellMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cell_lists_(arena),
  merge_actions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ConcurrentCellMapArchive)
}
ConcurrentCellMapArchive::ConcurrentCellMapArchive(const ConcurrentCellMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cell_lists_(from.cell_lists_),
      merge_actions_(from.merge_actions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uid_based_, &from.uid_based_,
    static_cast<size_t>(reinterpret_cast<char*>(&may_modify_values_referenced_by_formulas_) -
    reinterpret_cast<char*>(&uid_based_)) + sizeof(may_modify_values_referenced_by_formulas_));
  // @@protoc_insertion_point(copy_constructor:TST.ConcurrentCellMapArchive)
}

inline void ConcurrentCellMapArchive::SharedCtor() {
uid_based_ = false;
may_modify_formulas_in_cells_ = true;
may_modify_values_referenced_by_formulas_ = true;
}

ConcurrentCellMapArchive::~ConcurrentCellMapArchive() {
  // @@protoc_insertion_point(destructor:TST.ConcurrentCellMapArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConcurrentCellMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConcurrentCellMapArchive::ArenaDtor(void* object) {
  ConcurrentCellMapArchive* _this = reinterpret_cast< ConcurrentCellMapArchive* >(object);
  (void)_this;
}
void ConcurrentCellMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConcurrentCellMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConcurrentCellMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ConcurrentCellMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_lists_.Clear();
  merge_actions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    uid_based_ = false;
    may_modify_formulas_in_cells_ = true;
    may_modify_values_referenced_by_formulas_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConcurrentCellMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference cell_lists = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_lists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool uid_based = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uid_based(&has_bits);
          uid_based_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.MergeOperationArchive merge_actions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_merge_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool may_modify_formulas_in_cells = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_may_modify_formulas_in_cells(&has_bits);
          may_modify_formulas_in_cells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool may_modify_values_referenced_by_formulas = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_may_modify_values_referenced_by_formulas(&has_bits);
          may_modify_values_referenced_by_formulas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConcurrentCellMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ConcurrentCellMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference cell_lists = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_lists_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cell_lists(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required bool uid_based = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_uid_based(), target);
  }

  // repeated .TST.MergeOperationArchive merge_actions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_merge_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_merge_actions(i), target, stream);
  }

  // optional bool may_modify_formulas_in_cells = 4 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_may_modify_formulas_in_cells(), target);
  }

  // optional bool may_modify_values_referenced_by_formulas = 5 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_may_modify_values_referenced_by_formulas(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ConcurrentCellMapArchive)
  return target;
}

size_t ConcurrentCellMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ConcurrentCellMapArchive)
  size_t total_size = 0;

  // required bool uid_based = 2;
  if (_internal_has_uid_based()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference cell_lists = 1;
  total_size += 1UL * this->_internal_cell_lists_size();
  for (const auto& msg : this->cell_lists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.MergeOperationArchive merge_actions = 3;
  total_size += 1UL * this->_internal_merge_actions_size();
  for (const auto& msg : this->merge_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional bool may_modify_formulas_in_cells = 4 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool may_modify_values_referenced_by_formulas = 5 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConcurrentCellMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConcurrentCellMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConcurrentCellMapArchive::GetClassData() const { return &_class_data_; }

void ConcurrentCellMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ConcurrentCellMapArchive *>(to)->MergeFrom(
      static_cast<const ConcurrentCellMapArchive &>(from));
}


void ConcurrentCellMapArchive::MergeFrom(const ConcurrentCellMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ConcurrentCellMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_lists_.MergeFrom(from.cell_lists_);
  merge_actions_.MergeFrom(from.merge_actions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      uid_based_ = from.uid_based_;
    }
    if (cached_has_bits & 0x00000002u) {
      may_modify_formulas_in_cells_ = from.may_modify_formulas_in_cells_;
    }
    if (cached_has_bits & 0x00000004u) {
      may_modify_values_referenced_by_formulas_ = from.may_modify_values_referenced_by_formulas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConcurrentCellMapArchive::CopyFrom(const ConcurrentCellMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ConcurrentCellMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcurrentCellMapArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cell_lists_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(merge_actions_)) return false;
  return true;
}

void ConcurrentCellMapArchive::InternalSwap(ConcurrentCellMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cell_lists_.InternalSwap(&other->cell_lists_);
  merge_actions_.InternalSwap(&other->merge_actions_);
  swap(uid_based_, other->uid_based_);
  swap(may_modify_formulas_in_cells_, other->may_modify_formulas_in_cells_);
  swap(may_modify_values_referenced_by_formulas_, other->may_modify_values_referenced_by_formulas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConcurrentCellMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[52]);
}

// ===================================================================

class ConcurrentCellListArchive_OptionalCell::_Internal {
 public:
  using HasBits = decltype(std::declval<ConcurrentCellListArchive_OptionalCell>()._has_bits_);
  static const ::TST::Cell& cell(const ConcurrentCellListArchive_OptionalCell* msg);
  static void set_has_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TST::Cell&
ConcurrentCellListArchive_OptionalCell::_Internal::cell(const ConcurrentCellListArchive_OptionalCell* msg) {
  return *msg->cell_;
}
ConcurrentCellListArchive_OptionalCell::ConcurrentCellListArchive_OptionalCell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ConcurrentCellListArchive.OptionalCell)
}
ConcurrentCellListArchive_OptionalCell::ConcurrentCellListArchive_OptionalCell(const ConcurrentCellListArchive_OptionalCell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell()) {
    cell_ = new ::TST::Cell(*from.cell_);
  } else {
    cell_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.ConcurrentCellListArchive.OptionalCell)
}

inline void ConcurrentCellListArchive_OptionalCell::SharedCtor() {
cell_ = nullptr;
}

ConcurrentCellListArchive_OptionalCell::~ConcurrentCellListArchive_OptionalCell() {
  // @@protoc_insertion_point(destructor:TST.ConcurrentCellListArchive.OptionalCell)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConcurrentCellListArchive_OptionalCell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cell_;
}

void ConcurrentCellListArchive_OptionalCell::ArenaDtor(void* object) {
  ConcurrentCellListArchive_OptionalCell* _this = reinterpret_cast< ConcurrentCellListArchive_OptionalCell* >(object);
  (void)_this;
}
void ConcurrentCellListArchive_OptionalCell::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConcurrentCellListArchive_OptionalCell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConcurrentCellListArchive_OptionalCell::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ConcurrentCellListArchive.OptionalCell)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(cell_ != nullptr);
    cell_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConcurrentCellListArchive_OptionalCell::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TST.Cell cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConcurrentCellListArchive_OptionalCell::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ConcurrentCellListArchive.OptionalCell)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TST.Cell cell = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cell(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ConcurrentCellListArchive.OptionalCell)
  return target;
}

size_t ConcurrentCellListArchive_OptionalCell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ConcurrentCellListArchive.OptionalCell)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TST.Cell cell = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConcurrentCellListArchive_OptionalCell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConcurrentCellListArchive_OptionalCell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConcurrentCellListArchive_OptionalCell::GetClassData() const { return &_class_data_; }

void ConcurrentCellListArchive_OptionalCell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ConcurrentCellListArchive_OptionalCell *>(to)->MergeFrom(
      static_cast<const ConcurrentCellListArchive_OptionalCell &>(from));
}


void ConcurrentCellListArchive_OptionalCell::MergeFrom(const ConcurrentCellListArchive_OptionalCell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ConcurrentCellListArchive.OptionalCell)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cell()) {
    _internal_mutable_cell()->::TST::Cell::MergeFrom(from._internal_cell());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConcurrentCellListArchive_OptionalCell::CopyFrom(const ConcurrentCellListArchive_OptionalCell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ConcurrentCellListArchive.OptionalCell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcurrentCellListArchive_OptionalCell::IsInitialized() const {
  if (_internal_has_cell()) {
    if (!cell_->IsInitialized()) return false;
  }
  return true;
}

void ConcurrentCellListArchive_OptionalCell::InternalSwap(ConcurrentCellListArchive_OptionalCell* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cell_, other->cell_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConcurrentCellListArchive_OptionalCell::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[53]);
}

// ===================================================================

class ConcurrentCellListArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ConcurrentCellListArchive>()._has_bits_);
  static const ::TSP::UUIDRectArchive& cell_uid_range(const ConcurrentCellListArchive* msg);
  static void set_has_cell_uid_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CellRange& cell_range(const ConcurrentCellListArchive* msg);
  static void set_has_cell_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::UUIDRectArchive&
ConcurrentCellListArchive::_Internal::cell_uid_range(const ConcurrentCellListArchive* msg) {
  return *msg->cell_uid_range_;
}
const ::TST::CellRange&
ConcurrentCellListArchive::_Internal::cell_range(const ConcurrentCellListArchive* msg) {
  return *msg->cell_range_;
}
void ConcurrentCellListArchive::clear_cell_uid_range() {
  if (cell_uid_range_ != nullptr) cell_uid_range_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ConcurrentCellListArchive::ConcurrentCellListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cells_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ConcurrentCellListArchive)
}
ConcurrentCellListArchive::ConcurrentCellListArchive(const ConcurrentCellListArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cells_(from.cells_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_uid_range()) {
    cell_uid_range_ = new ::TSP::UUIDRectArchive(*from.cell_uid_range_);
  } else {
    cell_uid_range_ = nullptr;
  }
  if (from._internal_has_cell_range()) {
    cell_range_ = new ::TST::CellRange(*from.cell_range_);
  } else {
    cell_range_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.ConcurrentCellListArchive)
}

inline void ConcurrentCellListArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_uid_range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cell_range_) -
    reinterpret_cast<char*>(&cell_uid_range_)) + sizeof(cell_range_));
}

ConcurrentCellListArchive::~ConcurrentCellListArchive() {
  // @@protoc_insertion_point(destructor:TST.ConcurrentCellListArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConcurrentCellListArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cell_uid_range_;
  if (this != internal_default_instance()) delete cell_range_;
}

void ConcurrentCellListArchive::ArenaDtor(void* object) {
  ConcurrentCellListArchive* _this = reinterpret_cast< ConcurrentCellListArchive* >(object);
  (void)_this;
}
void ConcurrentCellListArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConcurrentCellListArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConcurrentCellListArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ConcurrentCellListArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cells_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cell_uid_range_ != nullptr);
      cell_uid_range_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_range_ != nullptr);
      cell_range_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConcurrentCellListArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.ConcurrentCellListArchive.OptionalCell cells = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDRectArchive cell_uid_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellRange cell_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConcurrentCellListArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ConcurrentCellListArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.ConcurrentCellListArchive.OptionalCell cells = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cells_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cells(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.UUIDRectArchive cell_uid_range = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cell_uid_range(this), target, stream);
  }

  // optional .TST.CellRange cell_range = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cell_range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ConcurrentCellListArchive)
  return target;
}

size_t ConcurrentCellListArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ConcurrentCellListArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.ConcurrentCellListArchive.OptionalCell cells = 1;
  total_size += 1UL * this->_internal_cells_size();
  for (const auto& msg : this->cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.UUIDRectArchive cell_uid_range = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_uid_range_);
    }

    // optional .TST.CellRange cell_range = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_range_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConcurrentCellListArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConcurrentCellListArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConcurrentCellListArchive::GetClassData() const { return &_class_data_; }

void ConcurrentCellListArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ConcurrentCellListArchive *>(to)->MergeFrom(
      static_cast<const ConcurrentCellListArchive &>(from));
}


void ConcurrentCellListArchive::MergeFrom(const ConcurrentCellListArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ConcurrentCellListArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cells_.MergeFrom(from.cells_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cell_uid_range()->::TSP::UUIDRectArchive::MergeFrom(from._internal_cell_uid_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_range()->::TST::CellRange::MergeFrom(from._internal_cell_range());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConcurrentCellListArchive::CopyFrom(const ConcurrentCellListArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ConcurrentCellListArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcurrentCellListArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cells_)) return false;
  if (_internal_has_cell_uid_range()) {
    if (!cell_uid_range_->IsInitialized()) return false;
  }
  if (_internal_has_cell_range()) {
    if (!cell_range_->IsInitialized()) return false;
  }
  return true;
}

void ConcurrentCellListArchive::InternalSwap(ConcurrentCellListArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cells_.InternalSwap(&other->cells_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConcurrentCellListArchive, cell_range_)
      + sizeof(ConcurrentCellListArchive::cell_range_)
      - PROTOBUF_FIELD_OFFSET(ConcurrentCellListArchive, cell_uid_range_)>(
          reinterpret_cast<char*>(&cell_uid_range_),
          reinterpret_cast<char*>(&other->cell_uid_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConcurrentCellListArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[54]);
}

// ===================================================================

class CellFormatAndValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellFormatAndValueArchive>()._has_bits_);
  static void set_has_valuetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_numbervalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_stringvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_boolvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Reference& richtextstorage(const CellFormatAndValueArchive* msg);
  static void set_has_richtextstorage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_all_spare_formats(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_explicit_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cell_format_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSK::FormatStructArchive& number_format(const CellFormatAndValueArchive* msg);
  static void set_has_number_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSK::FormatStructArchive& currency_format(const CellFormatAndValueArchive* msg);
  static void set_has_currency_format(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSK::FormatStructArchive& date_format(const CellFormatAndValueArchive* msg);
  static void set_has_date_format(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSK::FormatStructArchive& duration_format(const CellFormatAndValueArchive* msg);
  static void set_has_duration_format(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSK::FormatStructArchive& text_format(const CellFormatAndValueArchive* msg);
  static void set_has_text_format(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSK::FormatStructArchive& boolean_format(const CellFormatAndValueArchive* msg);
  static void set_has_boolean_format(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_formatted_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& formatted_rich_text_value(const CellFormatAndValueArchive* msg);
  static void set_has_formatted_rich_text_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_apply_spare_format_only(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_spare_format_type(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_decimal_low(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_decimal_high(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0003b800) ^ 0x0003b800) != 0;
  }
};

const ::TSP::Reference&
CellFormatAndValueArchive::_Internal::richtextstorage(const CellFormatAndValueArchive* msg) {
  return *msg->richtextstorage_;
}
const ::TSK::FormatStructArchive&
CellFormatAndValueArchive::_Internal::number_format(const CellFormatAndValueArchive* msg) {
  return *msg->number_format_;
}
const ::TSK::FormatStructArchive&
CellFormatAndValueArchive::_Internal::currency_format(const CellFormatAndValueArchive* msg) {
  return *msg->currency_format_;
}
const ::TSK::FormatStructArchive&
CellFormatAndValueArchive::_Internal::date_format(const CellFormatAndValueArchive* msg) {
  return *msg->date_format_;
}
const ::TSK::FormatStructArchive&
CellFormatAndValueArchive::_Internal::duration_format(const CellFormatAndValueArchive* msg) {
  return *msg->duration_format_;
}
const ::TSK::FormatStructArchive&
CellFormatAndValueArchive::_Internal::text_format(const CellFormatAndValueArchive* msg) {
  return *msg->text_format_;
}
const ::TSK::FormatStructArchive&
CellFormatAndValueArchive::_Internal::boolean_format(const CellFormatAndValueArchive* msg) {
  return *msg->boolean_format_;
}
const ::TSP::Reference&
CellFormatAndValueArchive::_Internal::formatted_rich_text_value(const CellFormatAndValueArchive* msg) {
  return *msg->formatted_rich_text_value_;
}
void CellFormatAndValueArchive::clear_richtextstorage() {
  if (richtextstorage_ != nullptr) richtextstorage_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CellFormatAndValueArchive::clear_number_format() {
  if (number_format_ != nullptr) number_format_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CellFormatAndValueArchive::clear_currency_format() {
  if (currency_format_ != nullptr) currency_format_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CellFormatAndValueArchive::clear_date_format() {
  if (date_format_ != nullptr) date_format_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void CellFormatAndValueArchive::clear_duration_format() {
  if (duration_format_ != nullptr) duration_format_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void CellFormatAndValueArchive::clear_text_format() {
  if (text_format_ != nullptr) text_format_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void CellFormatAndValueArchive::clear_boolean_format() {
  if (boolean_format_ != nullptr) boolean_format_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void CellFormatAndValueArchive::clear_formatted_rich_text_value() {
  if (formatted_rich_text_value_ != nullptr) formatted_rich_text_value_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
CellFormatAndValueArchive::CellFormatAndValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CellFormatAndValueArchive)
}
CellFormatAndValueArchive::CellFormatAndValueArchive(const CellFormatAndValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stringvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stringvalue()) {
    stringvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stringvalue(), 
      GetArenaForAllocation());
  }
  formatted_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_formatted_value()) {
    formatted_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_formatted_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_richtextstorage()) {
    richtextstorage_ = new ::TSP::Reference(*from.richtextstorage_);
  } else {
    richtextstorage_ = nullptr;
  }
  if (from._internal_has_number_format()) {
    number_format_ = new ::TSK::FormatStructArchive(*from.number_format_);
  } else {
    number_format_ = nullptr;
  }
  if (from._internal_has_currency_format()) {
    currency_format_ = new ::TSK::FormatStructArchive(*from.currency_format_);
  } else {
    currency_format_ = nullptr;
  }
  if (from._internal_has_date_format()) {
    date_format_ = new ::TSK::FormatStructArchive(*from.date_format_);
  } else {
    date_format_ = nullptr;
  }
  if (from._internal_has_duration_format()) {
    duration_format_ = new ::TSK::FormatStructArchive(*from.duration_format_);
  } else {
    duration_format_ = nullptr;
  }
  if (from._internal_has_text_format()) {
    text_format_ = new ::TSK::FormatStructArchive(*from.text_format_);
  } else {
    text_format_ = nullptr;
  }
  if (from._internal_has_boolean_format()) {
    boolean_format_ = new ::TSK::FormatStructArchive(*from.boolean_format_);
  } else {
    boolean_format_ = nullptr;
  }
  if (from._internal_has_formatted_rich_text_value()) {
    formatted_rich_text_value_ = new ::TSP::Reference(*from.formatted_rich_text_value_);
  } else {
    formatted_rich_text_value_ = nullptr;
  }
  ::memcpy(&numbervalue_, &from.numbervalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&decimal_high_) -
    reinterpret_cast<char*>(&numbervalue_)) + sizeof(decimal_high_));
  // @@protoc_insertion_point(copy_constructor:TST.CellFormatAndValueArchive)
}

inline void CellFormatAndValueArchive::SharedCtor() {
stringvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
formatted_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&richtextstorage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&decimal_high_) -
    reinterpret_cast<char*>(&richtextstorage_)) + sizeof(decimal_high_));
}

CellFormatAndValueArchive::~CellFormatAndValueArchive() {
  // @@protoc_insertion_point(destructor:TST.CellFormatAndValueArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellFormatAndValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stringvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  formatted_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete richtextstorage_;
  if (this != internal_default_instance()) delete number_format_;
  if (this != internal_default_instance()) delete currency_format_;
  if (this != internal_default_instance()) delete date_format_;
  if (this != internal_default_instance()) delete duration_format_;
  if (this != internal_default_instance()) delete text_format_;
  if (this != internal_default_instance()) delete boolean_format_;
  if (this != internal_default_instance()) delete formatted_rich_text_value_;
}

void CellFormatAndValueArchive::ArenaDtor(void* object) {
  CellFormatAndValueArchive* _this = reinterpret_cast< CellFormatAndValueArchive* >(object);
  (void)_this;
}
void CellFormatAndValueArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellFormatAndValueArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellFormatAndValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellFormatAndValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      stringvalue_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      formatted_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(richtextstorage_ != nullptr);
      richtextstorage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(number_format_ != nullptr);
      number_format_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(currency_format_ != nullptr);
      currency_format_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(date_format_ != nullptr);
      date_format_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(duration_format_ != nullptr);
      duration_format_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(text_format_ != nullptr);
      text_format_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(boolean_format_ != nullptr);
      boolean_format_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(formatted_rich_text_value_ != nullptr);
      formatted_rich_text_value_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&numbervalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_all_spare_formats_) -
        reinterpret_cast<char*>(&numbervalue_)) + sizeof(use_all_spare_formats_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&apply_spare_format_only_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&decimal_high_) -
        reinterpret_cast<char*>(&apply_spare_format_only_)) + sizeof(decimal_high_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellFormatAndValueArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CellValueType valueType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::CellValueType_IsValid(val))) {
            _internal_set_valuetype(static_cast<::TST::CellValueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double numberValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_numbervalue(&has_bits);
          numbervalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string stringValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_stringvalue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.CellFormatAndValueArchive.stringValue");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool boolValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_boolvalue(&has_bits);
          boolvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference richTextStorage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_richtextstorage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool use_all_spare_formats = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_use_all_spare_formats(&has_bits);
          use_all_spare_formats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 explicit_flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_explicit_flags(&has_bits);
          explicit_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 cell_format_kind = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_cell_format_kind(&has_bits);
          cell_format_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive number_format = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_number_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive currency_format = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_currency_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive date_format = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive duration_format = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive text_format = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive boolean_format = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_boolean_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string formatted_value = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_formatted_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.CellFormatAndValueArchive.formatted_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference formatted_rich_text_value = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_formatted_rich_text_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool apply_spare_format_only = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_apply_spare_format_only(&has_bits);
          apply_spare_format_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool spare_format_type = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_spare_format_type(&has_bits);
          spare_format_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 decimal_low = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_decimal_low(&has_bits);
          decimal_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 decimal_high = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_decimal_high(&has_bits);
          decimal_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellFormatAndValueArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellFormatAndValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CellValueType valueType = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_valuetype(), target);
  }

  // optional double numberValue = 2;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_numbervalue(), target);
  }

  // optional string stringValue = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stringvalue().data(), static_cast<int>(this->_internal_stringvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CellFormatAndValueArchive.stringValue");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stringvalue(), target);
  }

  // optional bool boolValue = 4;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_boolvalue(), target);
  }

  // optional .TSP.Reference richTextStorage = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::richtextstorage(this), target, stream);
  }

  // required bool use_all_spare_formats = 6;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_use_all_spare_formats(), target);
  }

  // required uint32 explicit_flags = 7;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_explicit_flags(), target);
  }

  // required uint32 cell_format_kind = 8;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_cell_format_kind(), target);
  }

  // optional .TSK.FormatStructArchive number_format = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::number_format(this), target, stream);
  }

  // optional .TSK.FormatStructArchive currency_format = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::currency_format(this), target, stream);
  }

  // optional .TSK.FormatStructArchive date_format = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::date_format(this), target, stream);
  }

  // optional .TSK.FormatStructArchive duration_format = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::duration_format(this), target, stream);
  }

  // optional .TSK.FormatStructArchive text_format = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::text_format(this), target, stream);
  }

  // optional .TSK.FormatStructArchive boolean_format = 15;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::boolean_format(this), target, stream);
  }

  // optional string formatted_value = 16;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_formatted_value().data(), static_cast<int>(this->_internal_formatted_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CellFormatAndValueArchive.formatted_value");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_formatted_value(), target);
  }

  // optional .TSP.Reference formatted_rich_text_value = 17;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::formatted_rich_text_value(this), target, stream);
  }

  // required bool apply_spare_format_only = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_apply_spare_format_only(), target);
  }

  // required bool spare_format_type = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_spare_format_type(), target);
  }

  // optional uint64 decimal_low = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_decimal_low(), target);
  }

  // optional uint64 decimal_high = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(21, this->_internal_decimal_high(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellFormatAndValueArchive)
  return target;
}

size_t CellFormatAndValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CellFormatAndValueArchive)
  size_t total_size = 0;

  if (_internal_has_valuetype()) {
    // required .TST.CellValueType valueType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_valuetype());
  }

  if (_internal_has_explicit_flags()) {
    // required uint32 explicit_flags = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_explicit_flags());
  }

  if (_internal_has_cell_format_kind()) {
    // required uint32 cell_format_kind = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cell_format_kind());
  }

  if (_internal_has_use_all_spare_formats()) {
    // required bool use_all_spare_formats = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_apply_spare_format_only()) {
    // required bool apply_spare_format_only = 18;
    total_size += 2 + 1;
  }

  if (_internal_has_spare_format_type()) {
    // required bool spare_format_type = 19;
    total_size += 2 + 1;
  }

  return total_size;
}
size_t CellFormatAndValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellFormatAndValueArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0003b800) ^ 0x0003b800) == 0) {  // All required fields are present.
    // required .TST.CellValueType valueType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_valuetype());

    // required uint32 explicit_flags = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_explicit_flags());

    // required uint32 cell_format_kind = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cell_format_kind());

    // required bool use_all_spare_formats = 6;
    total_size += 1 + 1;

    // required bool apply_spare_format_only = 18;
    total_size += 2 + 1;

    // required bool spare_format_type = 19;
    total_size += 2 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string stringValue = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stringvalue());
    }

    // optional string formatted_value = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_formatted_value());
    }

    // optional .TSP.Reference richTextStorage = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *richtextstorage_);
    }

    // optional .TSK.FormatStructArchive number_format = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *number_format_);
    }

    // optional .TSK.FormatStructArchive currency_format = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *currency_format_);
    }

    // optional .TSK.FormatStructArchive date_format = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *date_format_);
    }

    // optional .TSK.FormatStructArchive duration_format = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *duration_format_);
    }

    // optional .TSK.FormatStructArchive text_format = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_format_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .TSK.FormatStructArchive boolean_format = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *boolean_format_);
    }

    // optional .TSP.Reference formatted_rich_text_value = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *formatted_rich_text_value_);
    }

    // optional double numberValue = 2;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  // optional bool boolValue = 4;
  if (cached_has_bits & 0x00004000u) {
    total_size += 1 + 1;
  }

  if (cached_has_bits & 0x000c0000u) {
    // optional uint64 decimal_low = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_decimal_low());
    }

    // optional uint64 decimal_high = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_decimal_high());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellFormatAndValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellFormatAndValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellFormatAndValueArchive::GetClassData() const { return &_class_data_; }

void CellFormatAndValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CellFormatAndValueArchive *>(to)->MergeFrom(
      static_cast<const CellFormatAndValueArchive &>(from));
}


void CellFormatAndValueArchive::MergeFrom(const CellFormatAndValueArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CellFormatAndValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stringvalue(from._internal_stringvalue());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_formatted_value(from._internal_formatted_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_richtextstorage()->::TSP::Reference::MergeFrom(from._internal_richtextstorage());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_number_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_number_format());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_currency_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_currency_format());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_date_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_date_format());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_duration_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_duration_format());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_text_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_text_format());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_boolean_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_boolean_format());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_formatted_rich_text_value()->::TSP::Reference::MergeFrom(from._internal_formatted_rich_text_value());
    }
    if (cached_has_bits & 0x00000400u) {
      numbervalue_ = from.numbervalue_;
    }
    if (cached_has_bits & 0x00000800u) {
      valuetype_ = from.valuetype_;
    }
    if (cached_has_bits & 0x00001000u) {
      explicit_flags_ = from.explicit_flags_;
    }
    if (cached_has_bits & 0x00002000u) {
      cell_format_kind_ = from.cell_format_kind_;
    }
    if (cached_has_bits & 0x00004000u) {
      boolvalue_ = from.boolvalue_;
    }
    if (cached_has_bits & 0x00008000u) {
      use_all_spare_formats_ = from.use_all_spare_formats_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      apply_spare_format_only_ = from.apply_spare_format_only_;
    }
    if (cached_has_bits & 0x00020000u) {
      spare_format_type_ = from.spare_format_type_;
    }
    if (cached_has_bits & 0x00040000u) {
      decimal_low_ = from.decimal_low_;
    }
    if (cached_has_bits & 0x00080000u) {
      decimal_high_ = from.decimal_high_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellFormatAndValueArchive::CopyFrom(const CellFormatAndValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellFormatAndValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellFormatAndValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_richtextstorage()) {
    if (!richtextstorage_->IsInitialized()) return false;
  }
  if (_internal_has_number_format()) {
    if (!number_format_->IsInitialized()) return false;
  }
  if (_internal_has_currency_format()) {
    if (!currency_format_->IsInitialized()) return false;
  }
  if (_internal_has_date_format()) {
    if (!date_format_->IsInitialized()) return false;
  }
  if (_internal_has_duration_format()) {
    if (!duration_format_->IsInitialized()) return false;
  }
  if (_internal_has_text_format()) {
    if (!text_format_->IsInitialized()) return false;
  }
  if (_internal_has_boolean_format()) {
    if (!boolean_format_->IsInitialized()) return false;
  }
  if (_internal_has_formatted_rich_text_value()) {
    if (!formatted_rich_text_value_->IsInitialized()) return false;
  }
  return true;
}

void CellFormatAndValueArchive::InternalSwap(CellFormatAndValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stringvalue_, GetArenaForAllocation(),
      &other->stringvalue_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &formatted_value_, GetArenaForAllocation(),
      &other->formatted_value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellFormatAndValueArchive, decimal_high_)
      + sizeof(CellFormatAndValueArchive::decimal_high_)
      - PROTOBUF_FIELD_OFFSET(CellFormatAndValueArchive, richtextstorage_)>(
          reinterpret_cast<char*>(&richtextstorage_),
          reinterpret_cast<char*>(&other->richtextstorage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellFormatAndValueArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[55]);
}

// ===================================================================

class CellSpecArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellSpecArchive>()._has_bits_);
  static void set_has_interaction_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::FormulaArchive& formula(const CellSpecArchive* msg);
  static void set_has_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_control_min(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_range_control_max(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_range_control_inc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& chooser_control_popup_model(const CellSpecArchive* msg);
  static void set_has_chooser_control_popup_model(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chooser_control_start_w_first(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_category_summary_should_display_label(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000020) ^ 0x00000020) != 0;
  }
};

const ::TSCE::FormulaArchive&
CellSpecArchive::_Internal::formula(const CellSpecArchive* msg) {
  return *msg->formula_;
}
const ::TSP::Reference&
CellSpecArchive::_Internal::chooser_control_popup_model(const CellSpecArchive* msg) {
  return *msg->chooser_control_popup_model_;
}
void CellSpecArchive::clear_formula() {
  if (formula_ != nullptr) formula_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CellSpecArchive::clear_chooser_control_popup_model() {
  if (chooser_control_popup_model_ != nullptr) chooser_control_popup_model_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CellSpecArchive::CellSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CellSpecArchive)
}
CellSpecArchive::CellSpecArchive(const CellSpecArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_formula()) {
    formula_ = new ::TSCE::FormulaArchive(*from.formula_);
  } else {
    formula_ = nullptr;
  }
  if (from._internal_has_chooser_control_popup_model()) {
    chooser_control_popup_model_ = new ::TSP::Reference(*from.chooser_control_popup_model_);
  } else {
    chooser_control_popup_model_ = nullptr;
  }
  ::memcpy(&range_control_min_, &from.range_control_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&category_summary_should_display_label_) -
    reinterpret_cast<char*>(&range_control_min_)) + sizeof(category_summary_should_display_label_));
  // @@protoc_insertion_point(copy_constructor:TST.CellSpecArchive)
}

inline void CellSpecArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&formula_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&category_summary_should_display_label_) -
    reinterpret_cast<char*>(&formula_)) + sizeof(category_summary_should_display_label_));
}

CellSpecArchive::~CellSpecArchive() {
  // @@protoc_insertion_point(destructor:TST.CellSpecArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellSpecArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete formula_;
  if (this != internal_default_instance()) delete chooser_control_popup_model_;
}

void CellSpecArchive::ArenaDtor(void* object) {
  CellSpecArchive* _this = reinterpret_cast< CellSpecArchive* >(object);
  (void)_this;
}
void CellSpecArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellSpecArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellSpecArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellSpecArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(formula_ != nullptr);
      formula_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(chooser_control_popup_model_ != nullptr);
      chooser_control_popup_model_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&range_control_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&category_summary_should_display_label_) -
        reinterpret_cast<char*>(&range_control_min_)) + sizeof(category_summary_should_display_label_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellSpecArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 interaction_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_interaction_type(&has_bits);
          interaction_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.FormulaArchive formula = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double range_control_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_range_control_min(&has_bits);
          range_control_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double range_control_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_range_control_max(&has_bits);
          range_control_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double range_control_inc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_range_control_inc(&has_bits);
          range_control_inc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference chooser_control_popup_model = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_chooser_control_popup_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool chooser_control_start_w_first = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_chooser_control_start_w_first(&has_bits);
          chooser_control_start_w_first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool category_summary_should_display_label = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_category_summary_should_display_label(&has_bits);
          category_summary_should_display_label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellSpecArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellSpecArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 interaction_type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_interaction_type(), target);
  }

  // optional .TSCE.FormulaArchive formula = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::formula(this), target, stream);
  }

  // optional double range_control_min = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_range_control_min(), target);
  }

  // optional double range_control_max = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_range_control_max(), target);
  }

  // optional double range_control_inc = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_range_control_inc(), target);
  }

  // optional .TSP.Reference chooser_control_popup_model = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::chooser_control_popup_model(this), target, stream);
  }

  // optional bool chooser_control_start_w_first = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_chooser_control_start_w_first(), target);
  }

  // optional bool category_summary_should_display_label = 8 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_category_summary_should_display_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellSpecArchive)
  return target;
}

size_t CellSpecArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellSpecArchive)
  size_t total_size = 0;

  // required uint32 interaction_type = 1;
  if (_internal_has_interaction_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_interaction_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSCE.FormulaArchive formula = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *formula_);
    }

    // optional .TSP.Reference chooser_control_popup_model = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chooser_control_popup_model_);
    }

    // optional double range_control_min = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double range_control_max = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double range_control_inc = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional bool chooser_control_start_w_first = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool category_summary_should_display_label = 8 [deprecated = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellSpecArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellSpecArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellSpecArchive::GetClassData() const { return &_class_data_; }

void CellSpecArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CellSpecArchive *>(to)->MergeFrom(
      static_cast<const CellSpecArchive &>(from));
}


void CellSpecArchive::MergeFrom(const CellSpecArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CellSpecArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_formula()->::TSCE::FormulaArchive::MergeFrom(from._internal_formula());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_chooser_control_popup_model()->::TSP::Reference::MergeFrom(from._internal_chooser_control_popup_model());
    }
    if (cached_has_bits & 0x00000004u) {
      range_control_min_ = from.range_control_min_;
    }
    if (cached_has_bits & 0x00000008u) {
      range_control_max_ = from.range_control_max_;
    }
    if (cached_has_bits & 0x00000010u) {
      range_control_inc_ = from.range_control_inc_;
    }
    if (cached_has_bits & 0x00000020u) {
      interaction_type_ = from.interaction_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      chooser_control_start_w_first_ = from.chooser_control_start_w_first_;
    }
    if (cached_has_bits & 0x00000080u) {
      category_summary_should_display_label_ = from.category_summary_should_display_label_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellSpecArchive::CopyFrom(const CellSpecArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellSpecArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellSpecArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_formula()) {
    if (!formula_->IsInitialized()) return false;
  }
  if (_internal_has_chooser_control_popup_model()) {
    if (!chooser_control_popup_model_->IsInitialized()) return false;
  }
  return true;
}

void CellSpecArchive::InternalSwap(CellSpecArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellSpecArchive, category_summary_should_display_label_)
      + sizeof(CellSpecArchive::category_summary_should_display_label_)
      - PROTOBUF_FIELD_OFFSET(CellSpecArchive, formula_)>(
          reinterpret_cast<char*>(&formula_),
          reinterpret_cast<char*>(&other->formula_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellSpecArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[56]);
}

// ===================================================================

class CommentStorageWrapperArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommentStorageWrapperArchive>()._has_bits_);
  static const ::TSP::Reference& comment_storage(const CommentStorageWrapperArchive* msg);
  static void set_has_comment_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
CommentStorageWrapperArchive::_Internal::comment_storage(const CommentStorageWrapperArchive* msg) {
  return *msg->comment_storage_;
}
void CommentStorageWrapperArchive::clear_comment_storage() {
  if (comment_storage_ != nullptr) comment_storage_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CommentStorageWrapperArchive::CommentStorageWrapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommentStorageWrapperArchive)
}
CommentStorageWrapperArchive::CommentStorageWrapperArchive(const CommentStorageWrapperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_comment_storage()) {
    comment_storage_ = new ::TSP::Reference(*from.comment_storage_);
  } else {
    comment_storage_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommentStorageWrapperArchive)
}

inline void CommentStorageWrapperArchive::SharedCtor() {
comment_storage_ = nullptr;
}

CommentStorageWrapperArchive::~CommentStorageWrapperArchive() {
  // @@protoc_insertion_point(destructor:TST.CommentStorageWrapperArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommentStorageWrapperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete comment_storage_;
}

void CommentStorageWrapperArchive::ArenaDtor(void* object) {
  CommentStorageWrapperArchive* _this = reinterpret_cast< CommentStorageWrapperArchive* >(object);
  (void)_this;
}
void CommentStorageWrapperArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommentStorageWrapperArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommentStorageWrapperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommentStorageWrapperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(comment_storage_ != nullptr);
    comment_storage_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommentStorageWrapperArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference comment_storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_comment_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommentStorageWrapperArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommentStorageWrapperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference comment_storage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::comment_storage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommentStorageWrapperArchive)
  return target;
}

size_t CommentStorageWrapperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommentStorageWrapperArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference comment_storage = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *comment_storage_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommentStorageWrapperArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommentStorageWrapperArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommentStorageWrapperArchive::GetClassData() const { return &_class_data_; }

void CommentStorageWrapperArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommentStorageWrapperArchive *>(to)->MergeFrom(
      static_cast<const CommentStorageWrapperArchive &>(from));
}


void CommentStorageWrapperArchive::MergeFrom(const CommentStorageWrapperArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommentStorageWrapperArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_comment_storage()) {
    _internal_mutable_comment_storage()->::TSP::Reference::MergeFrom(from._internal_comment_storage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommentStorageWrapperArchive::CopyFrom(const CommentStorageWrapperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommentStorageWrapperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentStorageWrapperArchive::IsInitialized() const {
  if (_internal_has_comment_storage()) {
    if (!comment_storage_->IsInitialized()) return false;
  }
  return true;
}

void CommentStorageWrapperArchive::InternalSwap(CommentStorageWrapperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(comment_storage_, other->comment_storage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommentStorageWrapperArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[57]);
}

// ===================================================================

class CellDiffArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellDiffArchive>()._has_bits_);
  static const ::TSS::CommandPropertyMapArchive& property_map_to_set(const CellDiffArchive* msg);
  static void set_has_property_map_to_set(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSS::CommandPropertyMapArchive& property_map_to_reset(const CellDiffArchive* msg);
  static void set_has_property_map_to_reset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSS::CommandPropertyMapArchive&
CellDiffArchive::_Internal::property_map_to_set(const CellDiffArchive* msg) {
  return *msg->property_map_to_set_;
}
const ::TSS::CommandPropertyMapArchive&
CellDiffArchive::_Internal::property_map_to_reset(const CellDiffArchive* msg) {
  return *msg->property_map_to_reset_;
}
void CellDiffArchive::clear_property_map_to_set() {
  if (property_map_to_set_ != nullptr) property_map_to_set_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CellDiffArchive::clear_property_map_to_reset() {
  if (property_map_to_reset_ != nullptr) property_map_to_reset_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CellDiffArchive::CellDiffArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CellDiffArchive)
}
CellDiffArchive::CellDiffArchive(const CellDiffArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_property_map_to_set()) {
    property_map_to_set_ = new ::TSS::CommandPropertyMapArchive(*from.property_map_to_set_);
  } else {
    property_map_to_set_ = nullptr;
  }
  if (from._internal_has_property_map_to_reset()) {
    property_map_to_reset_ = new ::TSS::CommandPropertyMapArchive(*from.property_map_to_reset_);
  } else {
    property_map_to_reset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CellDiffArchive)
}

inline void CellDiffArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&property_map_to_set_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&property_map_to_reset_) -
    reinterpret_cast<char*>(&property_map_to_set_)) + sizeof(property_map_to_reset_));
}

CellDiffArchive::~CellDiffArchive() {
  // @@protoc_insertion_point(destructor:TST.CellDiffArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellDiffArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete property_map_to_set_;
  if (this != internal_default_instance()) delete property_map_to_reset_;
}

void CellDiffArchive::ArenaDtor(void* object) {
  CellDiffArchive* _this = reinterpret_cast< CellDiffArchive* >(object);
  (void)_this;
}
void CellDiffArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellDiffArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellDiffArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellDiffArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(property_map_to_set_ != nullptr);
      property_map_to_set_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(property_map_to_reset_ != nullptr);
      property_map_to_reset_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellDiffArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.CommandPropertyMapArchive property_map_to_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_property_map_to_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSS.CommandPropertyMapArchive property_map_to_reset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_property_map_to_reset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellDiffArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellDiffArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.CommandPropertyMapArchive property_map_to_set = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::property_map_to_set(this), target, stream);
  }

  // required .TSS.CommandPropertyMapArchive property_map_to_reset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::property_map_to_reset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellDiffArchive)
  return target;
}

size_t CellDiffArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CellDiffArchive)
  size_t total_size = 0;

  if (_internal_has_property_map_to_set()) {
    // required .TSS.CommandPropertyMapArchive property_map_to_set = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_map_to_set_);
  }

  if (_internal_has_property_map_to_reset()) {
    // required .TSS.CommandPropertyMapArchive property_map_to_reset = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_map_to_reset_);
  }

  return total_size;
}
size_t CellDiffArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellDiffArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSS.CommandPropertyMapArchive property_map_to_set = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_map_to_set_);

    // required .TSS.CommandPropertyMapArchive property_map_to_reset = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_map_to_reset_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellDiffArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellDiffArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellDiffArchive::GetClassData() const { return &_class_data_; }

void CellDiffArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CellDiffArchive *>(to)->MergeFrom(
      static_cast<const CellDiffArchive &>(from));
}


void CellDiffArchive::MergeFrom(const CellDiffArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CellDiffArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_property_map_to_set()->::TSS::CommandPropertyMapArchive::MergeFrom(from._internal_property_map_to_set());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_property_map_to_reset()->::TSS::CommandPropertyMapArchive::MergeFrom(from._internal_property_map_to_reset());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellDiffArchive::CopyFrom(const CellDiffArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellDiffArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellDiffArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_property_map_to_set()) {
    if (!property_map_to_set_->IsInitialized()) return false;
  }
  if (_internal_has_property_map_to_reset()) {
    if (!property_map_to_reset_->IsInitialized()) return false;
  }
  return true;
}

void CellDiffArchive::InternalSwap(CellDiffArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellDiffArchive, property_map_to_reset_)
      + sizeof(CellDiffArchive::property_map_to_reset_)
      - PROTOBUF_FIELD_OFFSET(CellDiffArchive, property_map_to_set_)>(
          reinterpret_cast<char*>(&property_map_to_set_),
          reinterpret_cast<char*>(&other->property_map_to_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellDiffArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[58]);
}

// ===================================================================

class CellDiffArray::_Internal {
 public:
  using HasBits = decltype(std::declval<CellDiffArray>()._has_bits_);
  static const ::TSP::LargeArray& large_array(const CellDiffArray* msg);
  static void set_has_large_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeArray&
CellDiffArray::_Internal::large_array(const CellDiffArray* msg) {
  return *msg->large_array_;
}
void CellDiffArray::clear_large_array() {
  if (large_array_ != nullptr) large_array_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CellDiffArray::CellDiffArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CellDiffArray)
}
CellDiffArray::CellDiffArray(const CellDiffArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array()) {
    large_array_ = new ::TSP::LargeArray(*from.large_array_);
  } else {
    large_array_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CellDiffArray)
}

inline void CellDiffArray::SharedCtor() {
large_array_ = nullptr;
}

CellDiffArray::~CellDiffArray() {
  // @@protoc_insertion_point(destructor:TST.CellDiffArray)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellDiffArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete large_array_;
}

void CellDiffArray::ArenaDtor(void* object) {
  CellDiffArray* _this = reinterpret_cast< CellDiffArray* >(object);
  (void)_this;
}
void CellDiffArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellDiffArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellDiffArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellDiffArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(large_array_ != nullptr);
    large_array_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellDiffArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeArray large_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellDiffArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellDiffArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.LargeArray large_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::large_array(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellDiffArray)
  return target;
}

size_t CellDiffArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellDiffArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.LargeArray large_array = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_array_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellDiffArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellDiffArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellDiffArray::GetClassData() const { return &_class_data_; }

void CellDiffArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CellDiffArray *>(to)->MergeFrom(
      static_cast<const CellDiffArray &>(from));
}


void CellDiffArray::MergeFrom(const CellDiffArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CellDiffArray)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_array()) {
    _internal_mutable_large_array()->::TSP::LargeArray::MergeFrom(from._internal_large_array());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellDiffArray::CopyFrom(const CellDiffArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellDiffArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellDiffArray::IsInitialized() const {
  if (_internal_has_large_array()) {
    if (!large_array_->IsInitialized()) return false;
  }
  return true;
}

void CellDiffArray::InternalSwap(CellDiffArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(large_array_, other->large_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellDiffArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[59]);
}

// ===================================================================

class CellDiffArraySegment::_Internal {
 public:
  using HasBits = decltype(std::declval<CellDiffArraySegment>()._has_bits_);
  static const ::TSP::LargeArraySegment& large_array_segment(const CellDiffArraySegment* msg);
  static void set_has_large_array_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeArraySegment&
CellDiffArraySegment::_Internal::large_array_segment(const CellDiffArraySegment* msg) {
  return *msg->large_array_segment_;
}
void CellDiffArraySegment::clear_large_array_segment() {
  if (large_array_segment_ != nullptr) large_array_segment_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CellDiffArraySegment::CellDiffArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  elements_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CellDiffArraySegment)
}
CellDiffArraySegment::CellDiffArraySegment(const CellDiffArraySegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array_segment()) {
    large_array_segment_ = new ::TSP::LargeArraySegment(*from.large_array_segment_);
  } else {
    large_array_segment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CellDiffArraySegment)
}

inline void CellDiffArraySegment::SharedCtor() {
large_array_segment_ = nullptr;
}

CellDiffArraySegment::~CellDiffArraySegment() {
  // @@protoc_insertion_point(destructor:TST.CellDiffArraySegment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellDiffArraySegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete large_array_segment_;
}

void CellDiffArraySegment::ArenaDtor(void* object) {
  CellDiffArraySegment* _this = reinterpret_cast< CellDiffArraySegment* >(object);
  (void)_this;
}
void CellDiffArraySegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellDiffArraySegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellDiffArraySegment::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellDiffArraySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(large_array_segment_ != nullptr);
    large_array_segment_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellDiffArraySegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeArraySegment large_array_segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array_segment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.CellDiffArchive elements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellDiffArraySegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellDiffArraySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.LargeArraySegment large_array_segment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::large_array_segment(this), target, stream);
  }

  // repeated .TST.CellDiffArchive elements = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_elements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellDiffArraySegment)
  return target;
}

size_t CellDiffArraySegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellDiffArraySegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.CellDiffArchive elements = 2;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.LargeArraySegment large_array_segment = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_array_segment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellDiffArraySegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellDiffArraySegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellDiffArraySegment::GetClassData() const { return &_class_data_; }

void CellDiffArraySegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CellDiffArraySegment *>(to)->MergeFrom(
      static_cast<const CellDiffArraySegment &>(from));
}


void CellDiffArraySegment::MergeFrom(const CellDiffArraySegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CellDiffArraySegment)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
  if (from._internal_has_large_array_segment()) {
    _internal_mutable_large_array_segment()->::TSP::LargeArraySegment::MergeFrom(from._internal_large_array_segment());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellDiffArraySegment::CopyFrom(const CellDiffArraySegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellDiffArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellDiffArraySegment::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(elements_)) return false;
  return true;
}

void CellDiffArraySegment::InternalSwap(CellDiffArraySegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  elements_.InternalSwap(&other->elements_);
  swap(large_array_segment_, other->large_array_segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellDiffArraySegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[60]);
}

// ===================================================================

class CellDiffMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellDiffMapArchive>()._has_bits_);
  static void set_has_uid_based(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::CellUIDListArchive& cell_uids(const CellDiffMapArchive* msg);
  static void set_has_cell_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& cell_diff_array(const CellDiffMapArchive* msg);
  static void set_has_cell_diff_array(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TST::CellUIDListArchive&
CellDiffMapArchive::_Internal::cell_uids(const CellDiffMapArchive* msg) {
  return *msg->cell_uids_;
}
const ::TSP::Reference&
CellDiffMapArchive::_Internal::cell_diff_array(const CellDiffMapArchive* msg) {
  return *msg->cell_diff_array_;
}
void CellDiffMapArchive::clear_expanded_cell_ids() {
  expanded_cell_ids_.Clear();
}
void CellDiffMapArchive::clear_cell_diff_array() {
  if (cell_diff_array_ != nullptr) cell_diff_array_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CellDiffMapArchive::CellDiffMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  expanded_cell_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CellDiffMapArchive)
}
CellDiffMapArchive::CellDiffMapArchive(const CellDiffMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      expanded_cell_ids_(from.expanded_cell_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_uids()) {
    cell_uids_ = new ::TST::CellUIDListArchive(*from.cell_uids_);
  } else {
    cell_uids_ = nullptr;
  }
  if (from._internal_has_cell_diff_array()) {
    cell_diff_array_ = new ::TSP::Reference(*from.cell_diff_array_);
  } else {
    cell_diff_array_ = nullptr;
  }
  uid_based_ = from.uid_based_;
  // @@protoc_insertion_point(copy_constructor:TST.CellDiffMapArchive)
}

inline void CellDiffMapArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_uids_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uid_based_) -
    reinterpret_cast<char*>(&cell_uids_)) + sizeof(uid_based_));
}

CellDiffMapArchive::~CellDiffMapArchive() {
  // @@protoc_insertion_point(destructor:TST.CellDiffMapArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellDiffMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cell_uids_;
  if (this != internal_default_instance()) delete cell_diff_array_;
}

void CellDiffMapArchive::ArenaDtor(void* object) {
  CellDiffMapArchive* _this = reinterpret_cast< CellDiffMapArchive* >(object);
  (void)_this;
}
void CellDiffMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellDiffMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellDiffMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellDiffMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expanded_cell_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cell_uids_ != nullptr);
      cell_uids_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_diff_array_ != nullptr);
      cell_diff_array_->Clear();
    }
  }
  uid_based_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellDiffMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool uid_based = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid_based(&has_bits);
          uid_based_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.CellCoordinateArchive expanded_cell_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_expanded_cell_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required .TST.CellUIDListArchive cell_uids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference cell_diff_array = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellDiffMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellDiffMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool uid_based = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_uid_based(), target);
  }

  // repeated .TSCE.CellCoordinateArchive expanded_cell_ids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_expanded_cell_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_expanded_cell_ids(i), target, stream);
  }

  // required .TST.CellUIDListArchive cell_uids = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cell_uids(this), target, stream);
  }

  // optional .TSP.Reference cell_diff_array = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cell_diff_array(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellDiffMapArchive)
  return target;
}

size_t CellDiffMapArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CellDiffMapArchive)
  size_t total_size = 0;

  if (_internal_has_cell_uids()) {
    // required .TST.CellUIDListArchive cell_uids = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_uids_);
  }

  if (_internal_has_uid_based()) {
    // required bool uid_based = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CellDiffMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellDiffMapArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .TST.CellUIDListArchive cell_uids = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_uids_);

    // required bool uid_based = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellCoordinateArchive expanded_cell_ids = 2;
  total_size += 1UL * this->_internal_expanded_cell_ids_size();
  for (const auto& msg : this->expanded_cell_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference cell_diff_array = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_diff_array_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellDiffMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellDiffMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellDiffMapArchive::GetClassData() const { return &_class_data_; }

void CellDiffMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CellDiffMapArchive *>(to)->MergeFrom(
      static_cast<const CellDiffMapArchive &>(from));
}


void CellDiffMapArchive::MergeFrom(const CellDiffMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CellDiffMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  expanded_cell_ids_.MergeFrom(from.expanded_cell_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cell_uids()->::TST::CellUIDListArchive::MergeFrom(from._internal_cell_uids());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_diff_array()->::TSP::Reference::MergeFrom(from._internal_cell_diff_array());
    }
    if (cached_has_bits & 0x00000004u) {
      uid_based_ = from.uid_based_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellDiffMapArchive::CopyFrom(const CellDiffMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellDiffMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellDiffMapArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_cell_uids()) {
    if (!cell_uids_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_array()) {
    if (!cell_diff_array_->IsInitialized()) return false;
  }
  return true;
}

void CellDiffMapArchive::InternalSwap(CellDiffMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  expanded_cell_ids_.InternalSwap(&other->expanded_cell_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellDiffMapArchive, uid_based_)
      + sizeof(CellDiffMapArchive::uid_based_)
      - PROTOBUF_FIELD_OFFSET(CellDiffMapArchive, cell_uids_)>(
          reinterpret_cast<char*>(&cell_uids_),
          reinterpret_cast<char*>(&other->cell_uids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellDiffMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[61]);
}

// ===================================================================

class DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DoubleStyleMapArchive_DoubleStyleMapEntryArchive>()._has_bits_);
  static const ::TST::CellID& cell_id(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive* msg);
  static void set_has_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& old_style(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive* msg);
  static void set_has_old_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& new_style(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive* msg);
  static void set_has_new_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::CellID&
DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_Internal::cell_id(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive* msg) {
  return *msg->cell_id_;
}
const ::TSP::Reference&
DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_Internal::old_style(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive* msg) {
  return *msg->old_style_;
}
const ::TSP::Reference&
DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_Internal::new_style(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive* msg) {
  return *msg->new_style_;
}
void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::clear_old_style() {
  if (old_style_ != nullptr) old_style_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::clear_new_style() {
  if (new_style_ != nullptr) new_style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
DoubleStyleMapArchive_DoubleStyleMapEntryArchive::DoubleStyleMapArchive_DoubleStyleMapEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
}
DoubleStyleMapArchive_DoubleStyleMapEntryArchive::DoubleStyleMapArchive_DoubleStyleMapEntryArchive(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_id()) {
    cell_id_ = new ::TST::CellID(*from.cell_id_);
  } else {
    cell_id_ = nullptr;
  }
  if (from._internal_has_old_style()) {
    old_style_ = new ::TSP::Reference(*from.old_style_);
  } else {
    old_style_ = nullptr;
  }
  if (from._internal_has_new_style()) {
    new_style_ = new ::TSP::Reference(*from.new_style_);
  } else {
    new_style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
}

inline void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_style_) -
    reinterpret_cast<char*>(&cell_id_)) + sizeof(new_style_));
}

DoubleStyleMapArchive_DoubleStyleMapEntryArchive::~DoubleStyleMapArchive_DoubleStyleMapEntryArchive() {
  // @@protoc_insertion_point(destructor:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cell_id_;
  if (this != internal_default_instance()) delete old_style_;
  if (this != internal_default_instance()) delete new_style_;
}

void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::ArenaDtor(void* object) {
  DoubleStyleMapArchive_DoubleStyleMapEntryArchive* _this = reinterpret_cast< DoubleStyleMapArchive_DoubleStyleMapEntryArchive* >(object);
  (void)_this;
}
void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cell_id_ != nullptr);
      cell_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(old_style_ != nullptr);
      old_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(new_style_ != nullptr);
      new_style_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CellID cell_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference old_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference new_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CellID cell_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cell_id(this), target, stream);
  }

  // required .TSP.Reference old_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::old_style(this), target, stream);
  }

  // required .TSP.Reference new_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::new_style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
  return target;
}

size_t DoubleStyleMapArchive_DoubleStyleMapEntryArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
  size_t total_size = 0;

  if (_internal_has_cell_id()) {
    // required .TST.CellID cell_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_id_);
  }

  if (_internal_has_old_style()) {
    // required .TSP.Reference old_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_style_);
  }

  if (_internal_has_new_style()) {
    // required .TSP.Reference new_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_style_);
  }

  return total_size;
}
size_t DoubleStyleMapArchive_DoubleStyleMapEntryArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.CellID cell_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_id_);

    // required .TSP.Reference old_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_style_);

    // required .TSP.Reference new_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_style_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DoubleStyleMapArchive_DoubleStyleMapEntryArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DoubleStyleMapArchive_DoubleStyleMapEntryArchive::GetClassData() const { return &_class_data_; }

void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DoubleStyleMapArchive_DoubleStyleMapEntryArchive *>(to)->MergeFrom(
      static_cast<const DoubleStyleMapArchive_DoubleStyleMapEntryArchive &>(from));
}


void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::MergeFrom(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cell_id()->::TST::CellID::MergeFrom(from._internal_cell_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_old_style()->::TSP::Reference::MergeFrom(from._internal_old_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_new_style()->::TSP::Reference::MergeFrom(from._internal_new_style());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::CopyFrom(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleStyleMapArchive_DoubleStyleMapEntryArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_cell_id()) {
    if (!cell_id_->IsInitialized()) return false;
  }
  if (_internal_has_old_style()) {
    if (!old_style_->IsInitialized()) return false;
  }
  if (_internal_has_new_style()) {
    if (!new_style_->IsInitialized()) return false;
  }
  return true;
}

void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::InternalSwap(DoubleStyleMapArchive_DoubleStyleMapEntryArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoubleStyleMapArchive_DoubleStyleMapEntryArchive, new_style_)
      + sizeof(DoubleStyleMapArchive_DoubleStyleMapEntryArchive::new_style_)
      - PROTOBUF_FIELD_OFFSET(DoubleStyleMapArchive_DoubleStyleMapEntryArchive, cell_id_)>(
          reinterpret_cast<char*>(&cell_id_),
          reinterpret_cast<char*>(&other->cell_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleStyleMapArchive_DoubleStyleMapEntryArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[62]);
}

// ===================================================================

class DoubleStyleMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DoubleStyleMapArchive>()._has_bits_);
  static void set_has_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

DoubleStyleMapArchive::DoubleStyleMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cell_map_entry_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.DoubleStyleMapArchive)
}
DoubleStyleMapArchive::DoubleStyleMapArchive(const DoubleStyleMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cell_map_entry_(from.cell_map_entry_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&capacity_, &from.capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&capacity_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:TST.DoubleStyleMapArchive)
}

inline void DoubleStyleMapArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&capacity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&capacity_)) + sizeof(count_));
}

DoubleStyleMapArchive::~DoubleStyleMapArchive() {
  // @@protoc_insertion_point(destructor:TST.DoubleStyleMapArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DoubleStyleMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DoubleStyleMapArchive::ArenaDtor(void* object) {
  DoubleStyleMapArchive* _this = reinterpret_cast< DoubleStyleMapArchive* >(object);
  (void)_this;
}
void DoubleStyleMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoubleStyleMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DoubleStyleMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.DoubleStyleMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_map_entry_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&capacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&capacity_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleStyleMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 capacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_capacity(&has_bits);
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive cell_map_entry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_map_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleStyleMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.DoubleStyleMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 capacity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_capacity(), target);
  }

  // required uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive cell_map_entry = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_map_entry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_cell_map_entry(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.DoubleStyleMapArchive)
  return target;
}

size_t DoubleStyleMapArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.DoubleStyleMapArchive)
  size_t total_size = 0;

  if (_internal_has_capacity()) {
    // required uint32 capacity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_capacity());
  }

  if (_internal_has_count()) {
    // required uint32 count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  return total_size;
}
size_t DoubleStyleMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.DoubleStyleMapArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 capacity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_capacity());

    // required uint32 count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive cell_map_entry = 3;
  total_size += 1UL * this->_internal_cell_map_entry_size();
  for (const auto& msg : this->cell_map_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DoubleStyleMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DoubleStyleMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DoubleStyleMapArchive::GetClassData() const { return &_class_data_; }

void DoubleStyleMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DoubleStyleMapArchive *>(to)->MergeFrom(
      static_cast<const DoubleStyleMapArchive &>(from));
}


void DoubleStyleMapArchive::MergeFrom(const DoubleStyleMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.DoubleStyleMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_map_entry_.MergeFrom(from.cell_map_entry_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      capacity_ = from.capacity_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DoubleStyleMapArchive::CopyFrom(const DoubleStyleMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.DoubleStyleMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleStyleMapArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cell_map_entry_)) return false;
  return true;
}

void DoubleStyleMapArchive::InternalSwap(DoubleStyleMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cell_map_entry_.InternalSwap(&other->cell_map_entry_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoubleStyleMapArchive, count_)
      + sizeof(DoubleStyleMapArchive::count_)
      - PROTOBUF_FIELD_OFFSET(DoubleStyleMapArchive, capacity_)>(
          reinterpret_cast<char*>(&capacity_),
          reinterpret_cast<char*>(&other->capacity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleStyleMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[63]);
}

// ===================================================================

class StyleTableMapArchive_StyleTableMapEntryArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StyleTableMapArchive_StyleTableMapEntryArchive>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& old_style(const StyleTableMapArchive_StyleTableMapEntryArchive* msg);
  static void set_has_old_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& new_style(const StyleTableMapArchive_StyleTableMapEntryArchive* msg);
  static void set_has_new_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::Reference&
StyleTableMapArchive_StyleTableMapEntryArchive::_Internal::old_style(const StyleTableMapArchive_StyleTableMapEntryArchive* msg) {
  return *msg->old_style_;
}
const ::TSP::Reference&
StyleTableMapArchive_StyleTableMapEntryArchive::_Internal::new_style(const StyleTableMapArchive_StyleTableMapEntryArchive* msg) {
  return *msg->new_style_;
}
void StyleTableMapArchive_StyleTableMapEntryArchive::clear_old_style() {
  if (old_style_ != nullptr) old_style_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void StyleTableMapArchive_StyleTableMapEntryArchive::clear_new_style() {
  if (new_style_ != nullptr) new_style_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
StyleTableMapArchive_StyleTableMapEntryArchive::StyleTableMapArchive_StyleTableMapEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
}
StyleTableMapArchive_StyleTableMapEntryArchive::StyleTableMapArchive_StyleTableMapEntryArchive(const StyleTableMapArchive_StyleTableMapEntryArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_old_style()) {
    old_style_ = new ::TSP::Reference(*from.old_style_);
  } else {
    old_style_ = nullptr;
  }
  if (from._internal_has_new_style()) {
    new_style_ = new ::TSP::Reference(*from.new_style_);
  } else {
    new_style_ = nullptr;
  }
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
}

inline void StyleTableMapArchive_StyleTableMapEntryArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&old_style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&old_style_)) + sizeof(key_));
}

StyleTableMapArchive_StyleTableMapEntryArchive::~StyleTableMapArchive_StyleTableMapEntryArchive() {
  // @@protoc_insertion_point(destructor:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StyleTableMapArchive_StyleTableMapEntryArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete old_style_;
  if (this != internal_default_instance()) delete new_style_;
}

void StyleTableMapArchive_StyleTableMapEntryArchive::ArenaDtor(void* object) {
  StyleTableMapArchive_StyleTableMapEntryArchive* _this = reinterpret_cast< StyleTableMapArchive_StyleTableMapEntryArchive* >(object);
  (void)_this;
}
void StyleTableMapArchive_StyleTableMapEntryArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StyleTableMapArchive_StyleTableMapEntryArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StyleTableMapArchive_StyleTableMapEntryArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(old_style_ != nullptr);
      old_style_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(new_style_ != nullptr);
      new_style_->Clear();
    }
  }
  key_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleTableMapArchive_StyleTableMapEntryArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_key(&has_bits);
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference old_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference new_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StyleTableMapArchive_StyleTableMapEntryArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 key = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key(), target);
  }

  // required .TSP.Reference old_style = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::old_style(this), target, stream);
  }

  // required .TSP.Reference new_style = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::new_style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
  return target;
}

size_t StyleTableMapArchive_StyleTableMapEntryArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
  size_t total_size = 0;

  if (_internal_has_old_style()) {
    // required .TSP.Reference old_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_style_);
  }

  if (_internal_has_new_style()) {
    // required .TSP.Reference new_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_style_);
  }

  if (_internal_has_key()) {
    // required uint32 key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key());
  }

  return total_size;
}
size_t StyleTableMapArchive_StyleTableMapEntryArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSP.Reference old_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_style_);

    // required .TSP.Reference new_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_style_);

    // required uint32 key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StyleTableMapArchive_StyleTableMapEntryArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StyleTableMapArchive_StyleTableMapEntryArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StyleTableMapArchive_StyleTableMapEntryArchive::GetClassData() const { return &_class_data_; }

void StyleTableMapArchive_StyleTableMapEntryArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StyleTableMapArchive_StyleTableMapEntryArchive *>(to)->MergeFrom(
      static_cast<const StyleTableMapArchive_StyleTableMapEntryArchive &>(from));
}


void StyleTableMapArchive_StyleTableMapEntryArchive::MergeFrom(const StyleTableMapArchive_StyleTableMapEntryArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_old_style()->::TSP::Reference::MergeFrom(from._internal_old_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_new_style()->::TSP::Reference::MergeFrom(from._internal_new_style());
    }
    if (cached_has_bits & 0x00000004u) {
      key_ = from.key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StyleTableMapArchive_StyleTableMapEntryArchive::CopyFrom(const StyleTableMapArchive_StyleTableMapEntryArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleTableMapArchive_StyleTableMapEntryArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_old_style()) {
    if (!old_style_->IsInitialized()) return false;
  }
  if (_internal_has_new_style()) {
    if (!new_style_->IsInitialized()) return false;
  }
  return true;
}

void StyleTableMapArchive_StyleTableMapEntryArchive::InternalSwap(StyleTableMapArchive_StyleTableMapEntryArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StyleTableMapArchive_StyleTableMapEntryArchive, key_)
      + sizeof(StyleTableMapArchive_StyleTableMapEntryArchive::key_)
      - PROTOBUF_FIELD_OFFSET(StyleTableMapArchive_StyleTableMapEntryArchive, old_style_)>(
          reinterpret_cast<char*>(&old_style_),
          reinterpret_cast<char*>(&other->old_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleTableMapArchive_StyleTableMapEntryArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[64]);
}

// ===================================================================

class StyleTableMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StyleTableMapArchive>()._has_bits_);
  static void set_has_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

StyleTableMapArchive::StyleTableMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  map_entry_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.StyleTableMapArchive)
}
StyleTableMapArchive::StyleTableMapArchive(const StyleTableMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      map_entry_(from.map_entry_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&capacity_, &from.capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&capacity_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:TST.StyleTableMapArchive)
}

inline void StyleTableMapArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&capacity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&capacity_)) + sizeof(count_));
}

StyleTableMapArchive::~StyleTableMapArchive() {
  // @@protoc_insertion_point(destructor:TST.StyleTableMapArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StyleTableMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StyleTableMapArchive::ArenaDtor(void* object) {
  StyleTableMapArchive* _this = reinterpret_cast< StyleTableMapArchive* >(object);
  (void)_this;
}
void StyleTableMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StyleTableMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StyleTableMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StyleTableMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_entry_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&capacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&capacity_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleTableMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 capacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_capacity(&has_bits);
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.StyleTableMapArchive.StyleTableMapEntryArchive map_entry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StyleTableMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StyleTableMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 capacity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_capacity(), target);
  }

  // required uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .TST.StyleTableMapArchive.StyleTableMapEntryArchive map_entry = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_map_entry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_map_entry(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StyleTableMapArchive)
  return target;
}

size_t StyleTableMapArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.StyleTableMapArchive)
  size_t total_size = 0;

  if (_internal_has_capacity()) {
    // required uint32 capacity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_capacity());
  }

  if (_internal_has_count()) {
    // required uint32 count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  return total_size;
}
size_t StyleTableMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StyleTableMapArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 capacity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_capacity());

    // required uint32 count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.StyleTableMapArchive.StyleTableMapEntryArchive map_entry = 3;
  total_size += 1UL * this->_internal_map_entry_size();
  for (const auto& msg : this->map_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StyleTableMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StyleTableMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StyleTableMapArchive::GetClassData() const { return &_class_data_; }

void StyleTableMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StyleTableMapArchive *>(to)->MergeFrom(
      static_cast<const StyleTableMapArchive &>(from));
}


void StyleTableMapArchive::MergeFrom(const StyleTableMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.StyleTableMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_entry_.MergeFrom(from.map_entry_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      capacity_ = from.capacity_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StyleTableMapArchive::CopyFrom(const StyleTableMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StyleTableMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleTableMapArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(map_entry_)) return false;
  return true;
}

void StyleTableMapArchive::InternalSwap(StyleTableMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  map_entry_.InternalSwap(&other->map_entry_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StyleTableMapArchive, count_)
      + sizeof(StyleTableMapArchive::count_)
      - PROTOBUF_FIELD_OFFSET(StyleTableMapArchive, capacity_)>(
          reinterpret_cast<char*>(&capacity_),
          reinterpret_cast<char*>(&other->capacity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleTableMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[65]);
}

// ===================================================================

class SelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectionArchive>()._has_bits_);
  static const ::TSP::Reference& tablemodel(const SelectionArchive* msg);
  static void set_has_tablemodel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selection_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TST::CellID& anchor_cell(const SelectionArchive* msg);
  static void set_has_anchor_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::CellID& cursor_cell(const SelectionArchive* msg);
  static void set_has_cursor_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& table_info(const SelectionArchive* msg);
  static void set_has_table_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TST::CellUIDRegionArchive& cell_uid_region(const SelectionArchive* msg);
  static void set_has_cell_uid_region(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TST::CellUIDRegionArchive& base_uid_region(const SelectionArchive* msg);
  static void set_has_base_uid_region(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::UUIDCoordArchive& anchor_cell_uid(const SelectionArchive* msg);
  static void set_has_anchor_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::UUIDCoordArchive& cursor_cell_uid(const SelectionArchive* msg);
  static void set_has_cursor_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000100) ^ 0x00000100) != 0;
  }
};

const ::TSP::Reference&
SelectionArchive::_Internal::tablemodel(const SelectionArchive* msg) {
  return *msg->tablemodel_;
}
const ::TST::CellID&
SelectionArchive::_Internal::anchor_cell(const SelectionArchive* msg) {
  return *msg->anchor_cell_;
}
const ::TST::CellID&
SelectionArchive::_Internal::cursor_cell(const SelectionArchive* msg) {
  return *msg->cursor_cell_;
}
const ::TSP::Reference&
SelectionArchive::_Internal::table_info(const SelectionArchive* msg) {
  return *msg->table_info_;
}
const ::TST::CellUIDRegionArchive&
SelectionArchive::_Internal::cell_uid_region(const SelectionArchive* msg) {
  return *msg->cell_uid_region_;
}
const ::TST::CellUIDRegionArchive&
SelectionArchive::_Internal::base_uid_region(const SelectionArchive* msg) {
  return *msg->base_uid_region_;
}
const ::TSP::UUIDCoordArchive&
SelectionArchive::_Internal::anchor_cell_uid(const SelectionArchive* msg) {
  return *msg->anchor_cell_uid_;
}
const ::TSP::UUIDCoordArchive&
SelectionArchive::_Internal::cursor_cell_uid(const SelectionArchive* msg) {
  return *msg->cursor_cell_uid_;
}
void SelectionArchive::clear_tablemodel() {
  if (tablemodel_ != nullptr) tablemodel_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SelectionArchive::clear_table_info() {
  if (table_info_ != nullptr) table_info_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SelectionArchive::clear_anchor_cell_uid() {
  if (anchor_cell_uid_ != nullptr) anchor_cell_uid_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void SelectionArchive::clear_cursor_cell_uid() {
  if (cursor_cell_uid_ != nullptr) cursor_cell_uid_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
SelectionArchive::SelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cell_ranges_(arena),
  base_ranges_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.SelectionArchive)
}
SelectionArchive::SelectionArchive(const SelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cell_ranges_(from.cell_ranges_),
      base_ranges_(from.base_ranges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tablemodel()) {
    tablemodel_ = new ::TSP::Reference(*from.tablemodel_);
  } else {
    tablemodel_ = nullptr;
  }
  if (from._internal_has_anchor_cell()) {
    anchor_cell_ = new ::TST::CellID(*from.anchor_cell_);
  } else {
    anchor_cell_ = nullptr;
  }
  if (from._internal_has_cursor_cell()) {
    cursor_cell_ = new ::TST::CellID(*from.cursor_cell_);
  } else {
    cursor_cell_ = nullptr;
  }
  if (from._internal_has_table_info()) {
    table_info_ = new ::TSP::Reference(*from.table_info_);
  } else {
    table_info_ = nullptr;
  }
  if (from._internal_has_cell_uid_region()) {
    cell_uid_region_ = new ::TST::CellUIDRegionArchive(*from.cell_uid_region_);
  } else {
    cell_uid_region_ = nullptr;
  }
  if (from._internal_has_base_uid_region()) {
    base_uid_region_ = new ::TST::CellUIDRegionArchive(*from.base_uid_region_);
  } else {
    base_uid_region_ = nullptr;
  }
  if (from._internal_has_anchor_cell_uid()) {
    anchor_cell_uid_ = new ::TSP::UUIDCoordArchive(*from.anchor_cell_uid_);
  } else {
    anchor_cell_uid_ = nullptr;
  }
  if (from._internal_has_cursor_cell_uid()) {
    cursor_cell_uid_ = new ::TSP::UUIDCoordArchive(*from.cursor_cell_uid_);
  } else {
    cursor_cell_uid_ = nullptr;
  }
  selection_type_ = from.selection_type_;
  // @@protoc_insertion_point(copy_constructor:TST.SelectionArchive)
}

inline void SelectionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tablemodel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&selection_type_) -
    reinterpret_cast<char*>(&tablemodel_)) + sizeof(selection_type_));
}

SelectionArchive::~SelectionArchive() {
  // @@protoc_insertion_point(destructor:TST.SelectionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tablemodel_;
  if (this != internal_default_instance()) delete anchor_cell_;
  if (this != internal_default_instance()) delete cursor_cell_;
  if (this != internal_default_instance()) delete table_info_;
  if (this != internal_default_instance()) delete cell_uid_region_;
  if (this != internal_default_instance()) delete base_uid_region_;
  if (this != internal_default_instance()) delete anchor_cell_uid_;
  if (this != internal_default_instance()) delete cursor_cell_uid_;
}

void SelectionArchive::ArenaDtor(void* object) {
  SelectionArchive* _this = reinterpret_cast< SelectionArchive* >(object);
  (void)_this;
}
void SelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.SelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_ranges_.Clear();
  base_ranges_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tablemodel_ != nullptr);
      tablemodel_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(anchor_cell_ != nullptr);
      anchor_cell_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cursor_cell_ != nullptr);
      cursor_cell_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(table_info_ != nullptr);
      table_info_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(cell_uid_region_ != nullptr);
      cell_uid_region_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(base_uid_region_ != nullptr);
      base_uid_region_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(anchor_cell_uid_ != nullptr);
      anchor_cell_uid_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(cursor_cell_uid_ != nullptr);
      cursor_cell_uid_->Clear();
    }
  }
  selection_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference tableModel = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tablemodel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.SelectionTypeArchive selection_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::SelectionTypeArchive_IsValid(val))) {
            _internal_set_selection_type(static_cast<::TST::SelectionTypeArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TST.CellID anchor_cell = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchor_cell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.CellRange cell_ranges = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TST.CellRange base_ranges = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_base_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TST.CellID cursor_cell = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cursor_cell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference table_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellUIDRegionArchive cell_uid_region = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellUIDRegionArchive base_uid_region = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_uid_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDCoordArchive anchor_cell_uid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchor_cell_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDCoordArchive cursor_cell_uid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_cursor_cell_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.SelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference tableModel = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tablemodel(this), target, stream);
  }

  // required .TST.SelectionTypeArchive selection_type = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_selection_type(), target);
  }

  // optional .TST.CellID anchor_cell = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::anchor_cell(this), target, stream);
  }

  // repeated .TST.CellRange cell_ranges = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_cell_ranges(i), target, stream);
  }

  // repeated .TST.CellRange base_ranges = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_base_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_base_ranges(i), target, stream);
  }

  // optional .TST.CellID cursor_cell = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::cursor_cell(this), target, stream);
  }

  // optional .TSP.Reference table_info = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::table_info(this), target, stream);
  }

  // optional .TST.CellUIDRegionArchive cell_uid_region = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::cell_uid_region(this), target, stream);
  }

  // optional .TST.CellUIDRegionArchive base_uid_region = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::base_uid_region(this), target, stream);
  }

  // optional .TSP.UUIDCoordArchive anchor_cell_uid = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::anchor_cell_uid(this), target, stream);
  }

  // optional .TSP.UUIDCoordArchive cursor_cell_uid = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::cursor_cell_uid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.SelectionArchive)
  return target;
}

size_t SelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.SelectionArchive)
  size_t total_size = 0;

  // required .TST.SelectionTypeArchive selection_type = 4;
  if (_internal_has_selection_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_selection_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.CellRange cell_ranges = 6;
  total_size += 1UL * this->_internal_cell_ranges_size();
  for (const auto& msg : this->cell_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.CellRange base_ranges = 7;
  total_size += 1UL * this->_internal_base_ranges_size();
  for (const auto& msg : this->base_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Reference tableModel = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tablemodel_);
    }

    // optional .TST.CellID anchor_cell = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *anchor_cell_);
    }

    // optional .TST.CellID cursor_cell = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cursor_cell_);
    }

    // optional .TSP.Reference table_info = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_info_);
    }

    // optional .TST.CellUIDRegionArchive cell_uid_region = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_uid_region_);
    }

    // optional .TST.CellUIDRegionArchive base_uid_region = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_uid_region_);
    }

    // optional .TSP.UUIDCoordArchive anchor_cell_uid = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *anchor_cell_uid_);
    }

    // optional .TSP.UUIDCoordArchive cursor_cell_uid = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cursor_cell_uid_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectionArchive::GetClassData() const { return &_class_data_; }

void SelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SelectionArchive *>(to)->MergeFrom(
      static_cast<const SelectionArchive &>(from));
}


void SelectionArchive::MergeFrom(const SelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.SelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_ranges_.MergeFrom(from.cell_ranges_);
  base_ranges_.MergeFrom(from.base_ranges_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tablemodel()->::TSP::Reference::MergeFrom(from._internal_tablemodel());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_anchor_cell()->::TST::CellID::MergeFrom(from._internal_anchor_cell());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cursor_cell()->::TST::CellID::MergeFrom(from._internal_cursor_cell());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_table_info()->::TSP::Reference::MergeFrom(from._internal_table_info());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_cell_uid_region()->::TST::CellUIDRegionArchive::MergeFrom(from._internal_cell_uid_region());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_base_uid_region()->::TST::CellUIDRegionArchive::MergeFrom(from._internal_base_uid_region());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_anchor_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(from._internal_anchor_cell_uid());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_cursor_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(from._internal_cursor_cell_uid());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_selection_type(from._internal_selection_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectionArchive::CopyFrom(const SelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.SelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cell_ranges_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(base_ranges_)) return false;
  if (_internal_has_tablemodel()) {
    if (!tablemodel_->IsInitialized()) return false;
  }
  if (_internal_has_anchor_cell()) {
    if (!anchor_cell_->IsInitialized()) return false;
  }
  if (_internal_has_cursor_cell()) {
    if (!cursor_cell_->IsInitialized()) return false;
  }
  if (_internal_has_table_info()) {
    if (!table_info_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uid_region()) {
    if (!cell_uid_region_->IsInitialized()) return false;
  }
  if (_internal_has_base_uid_region()) {
    if (!base_uid_region_->IsInitialized()) return false;
  }
  if (_internal_has_anchor_cell_uid()) {
    if (!anchor_cell_uid_->IsInitialized()) return false;
  }
  if (_internal_has_cursor_cell_uid()) {
    if (!cursor_cell_uid_->IsInitialized()) return false;
  }
  return true;
}

void SelectionArchive::InternalSwap(SelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cell_ranges_.InternalSwap(&other->cell_ranges_);
  base_ranges_.InternalSwap(&other->base_ranges_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectionArchive, selection_type_)
      + sizeof(SelectionArchive::selection_type_)
      - PROTOBUF_FIELD_OFFSET(SelectionArchive, tablemodel_)>(
          reinterpret_cast<char*>(&tablemodel_),
          reinterpret_cast<char*>(&other->tablemodel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[66]);
}

// ===================================================================

class DeathhawkRdar39989167CellSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DeathhawkRdar39989167CellSelectionArchive>()._has_bits_);
  static const ::TSP::Reference& table_info(const DeathhawkRdar39989167CellSelectionArchive* msg);
  static void set_has_table_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selection_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TST::CellUIDRegionArchive& cell_uid_region(const DeathhawkRdar39989167CellSelectionArchive* msg);
  static void set_has_cell_uid_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::CellUIDRegionArchive& base_uid_region(const DeathhawkRdar39989167CellSelectionArchive* msg);
  static void set_has_base_uid_region(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUIDCoordArchive& anchor_cell_uid(const DeathhawkRdar39989167CellSelectionArchive* msg);
  static void set_has_anchor_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUIDCoordArchive& cursor_cell_uid(const DeathhawkRdar39989167CellSelectionArchive* msg);
  static void set_has_cursor_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSP::Reference&
DeathhawkRdar39989167CellSelectionArchive::_Internal::table_info(const DeathhawkRdar39989167CellSelectionArchive* msg) {
  return *msg->table_info_;
}
const ::TST::CellUIDRegionArchive&
DeathhawkRdar39989167CellSelectionArchive::_Internal::cell_uid_region(const DeathhawkRdar39989167CellSelectionArchive* msg) {
  return *msg->cell_uid_region_;
}
const ::TST::CellUIDRegionArchive&
DeathhawkRdar39989167CellSelectionArchive::_Internal::base_uid_region(const DeathhawkRdar39989167CellSelectionArchive* msg) {
  return *msg->base_uid_region_;
}
const ::TSP::UUIDCoordArchive&
DeathhawkRdar39989167CellSelectionArchive::_Internal::anchor_cell_uid(const DeathhawkRdar39989167CellSelectionArchive* msg) {
  return *msg->anchor_cell_uid_;
}
const ::TSP::UUIDCoordArchive&
DeathhawkRdar39989167CellSelectionArchive::_Internal::cursor_cell_uid(const DeathhawkRdar39989167CellSelectionArchive* msg) {
  return *msg->cursor_cell_uid_;
}
void DeathhawkRdar39989167CellSelectionArchive::clear_table_info() {
  if (table_info_ != nullptr) table_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DeathhawkRdar39989167CellSelectionArchive::clear_anchor_cell_uid() {
  if (anchor_cell_uid_ != nullptr) anchor_cell_uid_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void DeathhawkRdar39989167CellSelectionArchive::clear_cursor_cell_uid() {
  if (cursor_cell_uid_ != nullptr) cursor_cell_uid_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
DeathhawkRdar39989167CellSelectionArchive::DeathhawkRdar39989167CellSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.DeathhawkRdar39989167CellSelectionArchive)
}
DeathhawkRdar39989167CellSelectionArchive::DeathhawkRdar39989167CellSelectionArchive(const DeathhawkRdar39989167CellSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_info()) {
    table_info_ = new ::TSP::Reference(*from.table_info_);
  } else {
    table_info_ = nullptr;
  }
  if (from._internal_has_cell_uid_region()) {
    cell_uid_region_ = new ::TST::CellUIDRegionArchive(*from.cell_uid_region_);
  } else {
    cell_uid_region_ = nullptr;
  }
  if (from._internal_has_base_uid_region()) {
    base_uid_region_ = new ::TST::CellUIDRegionArchive(*from.base_uid_region_);
  } else {
    base_uid_region_ = nullptr;
  }
  if (from._internal_has_anchor_cell_uid()) {
    anchor_cell_uid_ = new ::TSP::UUIDCoordArchive(*from.anchor_cell_uid_);
  } else {
    anchor_cell_uid_ = nullptr;
  }
  if (from._internal_has_cursor_cell_uid()) {
    cursor_cell_uid_ = new ::TSP::UUIDCoordArchive(*from.cursor_cell_uid_);
  } else {
    cursor_cell_uid_ = nullptr;
  }
  selection_type_ = from.selection_type_;
  // @@protoc_insertion_point(copy_constructor:TST.DeathhawkRdar39989167CellSelectionArchive)
}

inline void DeathhawkRdar39989167CellSelectionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&table_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&selection_type_) -
    reinterpret_cast<char*>(&table_info_)) + sizeof(selection_type_));
}

DeathhawkRdar39989167CellSelectionArchive::~DeathhawkRdar39989167CellSelectionArchive() {
  // @@protoc_insertion_point(destructor:TST.DeathhawkRdar39989167CellSelectionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeathhawkRdar39989167CellSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete table_info_;
  if (this != internal_default_instance()) delete cell_uid_region_;
  if (this != internal_default_instance()) delete base_uid_region_;
  if (this != internal_default_instance()) delete anchor_cell_uid_;
  if (this != internal_default_instance()) delete cursor_cell_uid_;
}

void DeathhawkRdar39989167CellSelectionArchive::ArenaDtor(void* object) {
  DeathhawkRdar39989167CellSelectionArchive* _this = reinterpret_cast< DeathhawkRdar39989167CellSelectionArchive* >(object);
  (void)_this;
}
void DeathhawkRdar39989167CellSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeathhawkRdar39989167CellSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeathhawkRdar39989167CellSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.DeathhawkRdar39989167CellSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(table_info_ != nullptr);
      table_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_uid_region_ != nullptr);
      cell_uid_region_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(base_uid_region_ != nullptr);
      base_uid_region_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(anchor_cell_uid_ != nullptr);
      anchor_cell_uid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(cursor_cell_uid_ != nullptr);
      cursor_cell_uid_->Clear();
    }
  }
  selection_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeathhawkRdar39989167CellSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference table_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.SelectionTypeArchive selection_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::SelectionTypeArchive_IsValid(val))) {
            _internal_set_selection_type(static_cast<::TST::SelectionTypeArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TST.CellUIDRegionArchive cell_uid_region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellUIDRegionArchive base_uid_region = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_uid_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDCoordArchive anchor_cell_uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchor_cell_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDCoordArchive cursor_cell_uid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cursor_cell_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeathhawkRdar39989167CellSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.DeathhawkRdar39989167CellSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference table_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::table_info(this), target, stream);
  }

  // optional .TST.SelectionTypeArchive selection_type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_selection_type(), target);
  }

  // optional .TST.CellUIDRegionArchive cell_uid_region = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cell_uid_region(this), target, stream);
  }

  // optional .TST.CellUIDRegionArchive base_uid_region = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::base_uid_region(this), target, stream);
  }

  // optional .TSP.UUIDCoordArchive anchor_cell_uid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::anchor_cell_uid(this), target, stream);
  }

  // optional .TSP.UUIDCoordArchive cursor_cell_uid = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cursor_cell_uid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.DeathhawkRdar39989167CellSelectionArchive)
  return target;
}

size_t DeathhawkRdar39989167CellSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.DeathhawkRdar39989167CellSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TSP.Reference table_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_info_);
    }

    // optional .TST.CellUIDRegionArchive cell_uid_region = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_uid_region_);
    }

    // optional .TST.CellUIDRegionArchive base_uid_region = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_uid_region_);
    }

    // optional .TSP.UUIDCoordArchive anchor_cell_uid = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *anchor_cell_uid_);
    }

    // optional .TSP.UUIDCoordArchive cursor_cell_uid = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cursor_cell_uid_);
    }

    // optional .TST.SelectionTypeArchive selection_type = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_selection_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeathhawkRdar39989167CellSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeathhawkRdar39989167CellSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeathhawkRdar39989167CellSelectionArchive::GetClassData() const { return &_class_data_; }

void DeathhawkRdar39989167CellSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeathhawkRdar39989167CellSelectionArchive *>(to)->MergeFrom(
      static_cast<const DeathhawkRdar39989167CellSelectionArchive &>(from));
}


void DeathhawkRdar39989167CellSelectionArchive::MergeFrom(const DeathhawkRdar39989167CellSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.DeathhawkRdar39989167CellSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_table_info()->::TSP::Reference::MergeFrom(from._internal_table_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_uid_region()->::TST::CellUIDRegionArchive::MergeFrom(from._internal_cell_uid_region());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_base_uid_region()->::TST::CellUIDRegionArchive::MergeFrom(from._internal_base_uid_region());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_anchor_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(from._internal_anchor_cell_uid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_cursor_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(from._internal_cursor_cell_uid());
    }
    if (cached_has_bits & 0x00000020u) {
      selection_type_ = from.selection_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeathhawkRdar39989167CellSelectionArchive::CopyFrom(const DeathhawkRdar39989167CellSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.DeathhawkRdar39989167CellSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeathhawkRdar39989167CellSelectionArchive::IsInitialized() const {
  if (_internal_has_table_info()) {
    if (!table_info_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uid_region()) {
    if (!cell_uid_region_->IsInitialized()) return false;
  }
  if (_internal_has_base_uid_region()) {
    if (!base_uid_region_->IsInitialized()) return false;
  }
  if (_internal_has_anchor_cell_uid()) {
    if (!anchor_cell_uid_->IsInitialized()) return false;
  }
  if (_internal_has_cursor_cell_uid()) {
    if (!cursor_cell_uid_->IsInitialized()) return false;
  }
  return true;
}

void DeathhawkRdar39989167CellSelectionArchive::InternalSwap(DeathhawkRdar39989167CellSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeathhawkRdar39989167CellSelectionArchive, selection_type_)
      + sizeof(DeathhawkRdar39989167CellSelectionArchive::selection_type_)
      - PROTOBUF_FIELD_OFFSET(DeathhawkRdar39989167CellSelectionArchive, table_info_)>(
          reinterpret_cast<char*>(&table_info_),
          reinterpret_cast<char*>(&other->table_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeathhawkRdar39989167CellSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[67]);
}

// ===================================================================

class StrokeSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StrokeSelectionArchive>()._has_bits_);
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StrokeSelectionArchive::StrokeSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.StrokeSelectionArchive)
}
StrokeSelectionArchive::StrokeSelectionArchive(const StrokeSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mask_ = from.mask_;
  // @@protoc_insertion_point(copy_constructor:TST.StrokeSelectionArchive)
}

inline void StrokeSelectionArchive::SharedCtor() {
mask_ = 0;
}

StrokeSelectionArchive::~StrokeSelectionArchive() {
  // @@protoc_insertion_point(destructor:TST.StrokeSelectionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StrokeSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StrokeSelectionArchive::ArenaDtor(void* object) {
  StrokeSelectionArchive* _this = reinterpret_cast< StrokeSelectionArchive* >(object);
  (void)_this;
}
void StrokeSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StrokeSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StrokeSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StrokeSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mask_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrokeSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mask(&has_bits);
          mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StrokeSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StrokeSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mask = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StrokeSelectionArchive)
  return target;
}

size_t StrokeSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StrokeSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 mask = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mask());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrokeSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StrokeSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrokeSelectionArchive::GetClassData() const { return &_class_data_; }

void StrokeSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StrokeSelectionArchive *>(to)->MergeFrom(
      static_cast<const StrokeSelectionArchive &>(from));
}


void StrokeSelectionArchive::MergeFrom(const StrokeSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.StrokeSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mask()) {
    _internal_set_mask(from._internal_mask());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrokeSelectionArchive::CopyFrom(const StrokeSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StrokeSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrokeSelectionArchive::IsInitialized() const {
  return true;
}

void StrokeSelectionArchive::InternalSwap(StrokeSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mask_, other->mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StrokeSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[68]);
}

// ===================================================================

class ControlCellSelectionArchive::_Internal {
 public:
};

ControlCellSelectionArchive::ControlCellSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ControlCellSelectionArchive)
}
ControlCellSelectionArchive::ControlCellSelectionArchive(const ControlCellSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.ControlCellSelectionArchive)
}

inline void ControlCellSelectionArchive::SharedCtor() {
}

ControlCellSelectionArchive::~ControlCellSelectionArchive() {
  // @@protoc_insertion_point(destructor:TST.ControlCellSelectionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlCellSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlCellSelectionArchive::ArenaDtor(void* object) {
  ControlCellSelectionArchive* _this = reinterpret_cast< ControlCellSelectionArchive* >(object);
  (void)_this;
}
void ControlCellSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlCellSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlCellSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ControlCellSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlCellSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlCellSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ControlCellSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ControlCellSelectionArchive)
  return target;
}

size_t ControlCellSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ControlCellSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlCellSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlCellSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlCellSelectionArchive::GetClassData() const { return &_class_data_; }

void ControlCellSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ControlCellSelectionArchive *>(to)->MergeFrom(
      static_cast<const ControlCellSelectionArchive &>(from));
}


void ControlCellSelectionArchive::MergeFrom(const ControlCellSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ControlCellSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlCellSelectionArchive::CopyFrom(const ControlCellSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ControlCellSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCellSelectionArchive::IsInitialized() const {
  return true;
}

void ControlCellSelectionArchive::InternalSwap(ControlCellSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlCellSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[69]);
}

// ===================================================================

class StockCellSelectionArchive::_Internal {
 public:
};

StockCellSelectionArchive::StockCellSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.StockCellSelectionArchive)
}
StockCellSelectionArchive::StockCellSelectionArchive(const StockCellSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.StockCellSelectionArchive)
}

inline void StockCellSelectionArchive::SharedCtor() {
}

StockCellSelectionArchive::~StockCellSelectionArchive() {
  // @@protoc_insertion_point(destructor:TST.StockCellSelectionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StockCellSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StockCellSelectionArchive::ArenaDtor(void* object) {
  StockCellSelectionArchive* _this = reinterpret_cast< StockCellSelectionArchive* >(object);
  (void)_this;
}
void StockCellSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StockCellSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StockCellSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StockCellSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StockCellSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StockCellSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StockCellSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StockCellSelectionArchive)
  return target;
}

size_t StockCellSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StockCellSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StockCellSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StockCellSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StockCellSelectionArchive::GetClassData() const { return &_class_data_; }

void StockCellSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StockCellSelectionArchive *>(to)->MergeFrom(
      static_cast<const StockCellSelectionArchive &>(from));
}


void StockCellSelectionArchive::MergeFrom(const StockCellSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.StockCellSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StockCellSelectionArchive::CopyFrom(const StockCellSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StockCellSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockCellSelectionArchive::IsInitialized() const {
  return true;
}

void StockCellSelectionArchive::InternalSwap(StockCellSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StockCellSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[70]);
}

// ===================================================================

class TableNameSelectionArchive::_Internal {
 public:
};

TableNameSelectionArchive::TableNameSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TableNameSelectionArchive)
}
TableNameSelectionArchive::TableNameSelectionArchive(const TableNameSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.TableNameSelectionArchive)
}

inline void TableNameSelectionArchive::SharedCtor() {
}

TableNameSelectionArchive::~TableNameSelectionArchive() {
  // @@protoc_insertion_point(destructor:TST.TableNameSelectionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableNameSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TableNameSelectionArchive::ArenaDtor(void* object) {
  TableNameSelectionArchive* _this = reinterpret_cast< TableNameSelectionArchive* >(object);
  (void)_this;
}
void TableNameSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableNameSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableNameSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableNameSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableNameSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableNameSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableNameSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableNameSelectionArchive)
  return target;
}

size_t TableNameSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableNameSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableNameSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableNameSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableNameSelectionArchive::GetClassData() const { return &_class_data_; }

void TableNameSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableNameSelectionArchive *>(to)->MergeFrom(
      static_cast<const TableNameSelectionArchive &>(from));
}


void TableNameSelectionArchive::MergeFrom(const TableNameSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TableNameSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableNameSelectionArchive::CopyFrom(const TableNameSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableNameSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableNameSelectionArchive::IsInitialized() const {
  return true;
}

void TableNameSelectionArchive::InternalSwap(TableNameSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableNameSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[71]);
}

// ===================================================================

class AutofillSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillSelectionArchive>()._has_bits_);
  static const ::TST::CellRange& source_cell_range(const AutofillSelectionArchive* msg);
  static void set_has_source_cell_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CellRange& target_cell_range(const AutofillSelectionArchive* msg);
  static void set_has_target_cell_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TST::CellRange&
AutofillSelectionArchive::_Internal::source_cell_range(const AutofillSelectionArchive* msg) {
  return *msg->source_cell_range_;
}
const ::TST::CellRange&
AutofillSelectionArchive::_Internal::target_cell_range(const AutofillSelectionArchive* msg) {
  return *msg->target_cell_range_;
}
AutofillSelectionArchive::AutofillSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.AutofillSelectionArchive)
}
AutofillSelectionArchive::AutofillSelectionArchive(const AutofillSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_cell_range()) {
    source_cell_range_ = new ::TST::CellRange(*from.source_cell_range_);
  } else {
    source_cell_range_ = nullptr;
  }
  if (from._internal_has_target_cell_range()) {
    target_cell_range_ = new ::TST::CellRange(*from.target_cell_range_);
  } else {
    target_cell_range_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.AutofillSelectionArchive)
}

inline void AutofillSelectionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_cell_range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_cell_range_) -
    reinterpret_cast<char*>(&source_cell_range_)) + sizeof(target_cell_range_));
}

AutofillSelectionArchive::~AutofillSelectionArchive() {
  // @@protoc_insertion_point(destructor:TST.AutofillSelectionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AutofillSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete source_cell_range_;
  if (this != internal_default_instance()) delete target_cell_range_;
}

void AutofillSelectionArchive::ArenaDtor(void* object) {
  AutofillSelectionArchive* _this = reinterpret_cast< AutofillSelectionArchive* >(object);
  (void)_this;
}
void AutofillSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutofillSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.AutofillSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(source_cell_range_ != nullptr);
      source_cell_range_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_cell_range_ != nullptr);
      target_cell_range_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutofillSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TST.CellRange source_cell_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_cell_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellRange target_cell_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_cell_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutofillSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.AutofillSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TST.CellRange source_cell_range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source_cell_range(this), target, stream);
  }

  // optional .TST.CellRange target_cell_range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_cell_range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.AutofillSelectionArchive)
  return target;
}

size_t AutofillSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.AutofillSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TST.CellRange source_cell_range = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *source_cell_range_);
    }

    // optional .TST.CellRange target_cell_range = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_cell_range_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutofillSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AutofillSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutofillSelectionArchive::GetClassData() const { return &_class_data_; }

void AutofillSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AutofillSelectionArchive *>(to)->MergeFrom(
      static_cast<const AutofillSelectionArchive &>(from));
}


void AutofillSelectionArchive::MergeFrom(const AutofillSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.AutofillSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_source_cell_range()->::TST::CellRange::MergeFrom(from._internal_source_cell_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target_cell_range()->::TST::CellRange::MergeFrom(from._internal_target_cell_range());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutofillSelectionArchive::CopyFrom(const AutofillSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.AutofillSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillSelectionArchive::IsInitialized() const {
  if (_internal_has_source_cell_range()) {
    if (!source_cell_range_->IsInitialized()) return false;
  }
  if (_internal_has_target_cell_range()) {
    if (!target_cell_range_->IsInitialized()) return false;
  }
  return true;
}

void AutofillSelectionArchive::InternalSwap(AutofillSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutofillSelectionArchive, target_cell_range_)
      + sizeof(AutofillSelectionArchive::target_cell_range_)
      - PROTOBUF_FIELD_OFFSET(AutofillSelectionArchive, source_cell_range_)>(
          reinterpret_cast<char*>(&source_cell_range_),
          reinterpret_cast<char*>(&other->source_cell_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutofillSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[72]);
}

// ===================================================================

class FilterRuleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FilterRuleArchive>()._has_bits_);
  static const ::TST::FormulaPredicateArchive& predicate(const FilterRuleArchive* msg);
  static void set_has_predicate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::FormulaPredicateArchive&
FilterRuleArchive::_Internal::predicate(const FilterRuleArchive* msg) {
  return *msg->predicate_;
}
FilterRuleArchive::FilterRuleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.FilterRuleArchive)
}
FilterRuleArchive::FilterRuleArchive(const FilterRuleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_predicate()) {
    predicate_ = new ::TST::FormulaPredicateArchive(*from.predicate_);
  } else {
    predicate_ = nullptr;
  }
  disabled_ = from.disabled_;
  // @@protoc_insertion_point(copy_constructor:TST.FilterRuleArchive)
}

inline void FilterRuleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&predicate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disabled_) -
    reinterpret_cast<char*>(&predicate_)) + sizeof(disabled_));
}

FilterRuleArchive::~FilterRuleArchive() {
  // @@protoc_insertion_point(destructor:TST.FilterRuleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FilterRuleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete predicate_;
}

void FilterRuleArchive::ArenaDtor(void* object) {
  FilterRuleArchive* _this = reinterpret_cast< FilterRuleArchive* >(object);
  (void)_this;
}
void FilterRuleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilterRuleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FilterRuleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FilterRuleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(predicate_ != nullptr);
    predicate_->Clear();
  }
  disabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterRuleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.FormulaPredicateArchive predicate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_predicate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_disabled(&has_bits);
          disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterRuleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FilterRuleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.FormulaPredicateArchive predicate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::predicate(this), target, stream);
  }

  // optional bool disabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_disabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FilterRuleArchive)
  return target;
}

size_t FilterRuleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FilterRuleArchive)
  size_t total_size = 0;

  // required .TST.FormulaPredicateArchive predicate = 1;
  if (_internal_has_predicate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *predicate_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool disabled = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilterRuleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FilterRuleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilterRuleArchive::GetClassData() const { return &_class_data_; }

void FilterRuleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FilterRuleArchive *>(to)->MergeFrom(
      static_cast<const FilterRuleArchive &>(from));
}


void FilterRuleArchive::MergeFrom(const FilterRuleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.FilterRuleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_predicate()->::TST::FormulaPredicateArchive::MergeFrom(from._internal_predicate());
    }
    if (cached_has_bits & 0x00000002u) {
      disabled_ = from.disabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilterRuleArchive::CopyFrom(const FilterRuleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FilterRuleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterRuleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_predicate()) {
    if (!predicate_->IsInitialized()) return false;
  }
  return true;
}

void FilterRuleArchive::InternalSwap(FilterRuleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilterRuleArchive, disabled_)
      + sizeof(FilterRuleArchive::disabled_)
      - PROTOBUF_FIELD_OFFSET(FilterRuleArchive, predicate_)>(
          reinterpret_cast<char*>(&predicate_),
          reinterpret_cast<char*>(&other->predicate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterRuleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[73]);
}

// ===================================================================

class TableStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableStyleArchive>()._has_bits_);
  static const ::TSS::StyleArchive& super(const TableStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::TableStylePropertiesArchive& table_properties(const TableStyleArchive* msg);
  static void set_has_table_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
TableStyleArchive::_Internal::super(const TableStyleArchive* msg) {
  return *msg->super_;
}
const ::TST::TableStylePropertiesArchive&
TableStyleArchive::_Internal::table_properties(const TableStyleArchive* msg) {
  return *msg->table_properties_;
}
void TableStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TableStyleArchive::clear_table_properties() {
  if (table_properties_ != nullptr) table_properties_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TableStyleArchive::TableStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TableStyleArchive)
}
TableStyleArchive::TableStyleArchive(const TableStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_table_properties()) {
    table_properties_ = new ::TST::TableStylePropertiesArchive(*from.table_properties_);
  } else {
    table_properties_ = nullptr;
  }
  override_count_ = from.override_count_;
  // @@protoc_insertion_point(copy_constructor:TST.TableStyleArchive)
}

inline void TableStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&override_count_) -
    reinterpret_cast<char*>(&super_)) + sizeof(override_count_));
}

TableStyleArchive::~TableStyleArchive() {
  // @@protoc_insertion_point(destructor:TST.TableStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete table_properties_;
}

void TableStyleArchive::ArenaDtor(void* object) {
  TableStyleArchive* _this = reinterpret_cast< TableStyleArchive* >(object);
  (void)_this;
}
void TableStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(table_properties_ != nullptr);
      table_properties_->Clear();
    }
  }
  override_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.TableStylePropertiesArchive table_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // optional .TST.TableStylePropertiesArchive table_properties = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::table_properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableStyleArchive)
  return target;
}

size_t TableStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TST.TableStylePropertiesArchive table_properties = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_properties_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_override_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableStyleArchive::GetClassData() const { return &_class_data_; }

void TableStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableStyleArchive *>(to)->MergeFrom(
      static_cast<const TableStyleArchive &>(from));
}


void TableStyleArchive::MergeFrom(const TableStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TableStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSS::StyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_table_properties()->::TST::TableStylePropertiesArchive::MergeFrom(from._internal_table_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      override_count_ = from.override_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableStyleArchive::CopyFrom(const TableStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_table_properties()) {
    if (!table_properties_->IsInitialized()) return false;
  }
  return true;
}

void TableStyleArchive::InternalSwap(TableStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableStyleArchive, override_count_)
      + sizeof(TableStyleArchive::override_count_)
      - PROTOBUF_FIELD_OFFSET(TableStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[74]);
}

// ===================================================================

class CellStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellStyleArchive>()._has_bits_);
  static const ::TSS::StyleArchive& super(const CellStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::CellStylePropertiesArchive& cell_properties(const CellStyleArchive* msg);
  static void set_has_cell_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
CellStyleArchive::_Internal::super(const CellStyleArchive* msg) {
  return *msg->super_;
}
const ::TST::CellStylePropertiesArchive&
CellStyleArchive::_Internal::cell_properties(const CellStyleArchive* msg) {
  return *msg->cell_properties_;
}
void CellStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CellStyleArchive::clear_cell_properties() {
  if (cell_properties_ != nullptr) cell_properties_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CellStyleArchive::CellStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CellStyleArchive)
}
CellStyleArchive::CellStyleArchive(const CellStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_cell_properties()) {
    cell_properties_ = new ::TST::CellStylePropertiesArchive(*from.cell_properties_);
  } else {
    cell_properties_ = nullptr;
  }
  override_count_ = from.override_count_;
  // @@protoc_insertion_point(copy_constructor:TST.CellStyleArchive)
}

inline void CellStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&override_count_) -
    reinterpret_cast<char*>(&super_)) + sizeof(override_count_));
}

CellStyleArchive::~CellStyleArchive() {
  // @@protoc_insertion_point(destructor:TST.CellStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete cell_properties_;
}

void CellStyleArchive::ArenaDtor(void* object) {
  CellStyleArchive* _this = reinterpret_cast< CellStyleArchive* >(object);
  (void)_this;
}
void CellStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_properties_ != nullptr);
      cell_properties_->Clear();
    }
  }
  override_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellStylePropertiesArchive cell_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // optional .TST.CellStylePropertiesArchive cell_properties = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::cell_properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellStyleArchive)
  return target;
}

size_t CellStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TST.CellStylePropertiesArchive cell_properties = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_properties_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_override_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellStyleArchive::GetClassData() const { return &_class_data_; }

void CellStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CellStyleArchive *>(to)->MergeFrom(
      static_cast<const CellStyleArchive &>(from));
}


void CellStyleArchive::MergeFrom(const CellStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CellStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSS::StyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_properties()->::TST::CellStylePropertiesArchive::MergeFrom(from._internal_cell_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      override_count_ = from.override_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellStyleArchive::CopyFrom(const CellStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_properties()) {
    if (!cell_properties_->IsInitialized()) return false;
  }
  return true;
}

void CellStyleArchive::InternalSwap(CellStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellStyleArchive, override_count_)
      + sizeof(CellStyleArchive::override_count_)
      - PROTOBUF_FIELD_OFFSET(CellStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[75]);
}

// ===================================================================

class FormulaPredicateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaPredicateArchive>()._has_bits_);
  static const ::TSCE::FormulaArchive& formula(const FormulaPredicateArchive* msg);
  static void set_has_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_predicate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_qualifier1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_qualifier2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_param_index1(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_param_index2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_param_index0(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

const ::TSCE::FormulaArchive&
FormulaPredicateArchive::_Internal::formula(const FormulaPredicateArchive* msg) {
  return *msg->formula_;
}
void FormulaPredicateArchive::clear_formula() {
  if (formula_ != nullptr) formula_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FormulaPredicateArchive::FormulaPredicateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.FormulaPredicateArchive)
}
FormulaPredicateArchive::FormulaPredicateArchive(const FormulaPredicateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_formula()) {
    formula_ = new ::TSCE::FormulaArchive(*from.formula_);
  } else {
    formula_ = nullptr;
  }
  ::memcpy(&predicate_type_, &from.predicate_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&param_index0_) -
    reinterpret_cast<char*>(&predicate_type_)) + sizeof(param_index0_));
  // @@protoc_insertion_point(copy_constructor:TST.FormulaPredicateArchive)
}

inline void FormulaPredicateArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&formula_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&param_index0_) -
    reinterpret_cast<char*>(&formula_)) + sizeof(param_index0_));
}

FormulaPredicateArchive::~FormulaPredicateArchive() {
  // @@protoc_insertion_point(destructor:TST.FormulaPredicateArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FormulaPredicateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete formula_;
}

void FormulaPredicateArchive::ArenaDtor(void* object) {
  FormulaPredicateArchive* _this = reinterpret_cast< FormulaPredicateArchive* >(object);
  (void)_this;
}
void FormulaPredicateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormulaPredicateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormulaPredicateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FormulaPredicateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(formula_ != nullptr);
    formula_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&predicate_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&param_index0_) -
        reinterpret_cast<char*>(&predicate_type_)) + sizeof(param_index0_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaPredicateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.FormulaArchive formula = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.FormulaPredicateArchive.FormulaPredicateType predicate_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::FormulaPredicateArchive_FormulaPredicateType_IsValid(val))) {
            _internal_set_predicate_type(static_cast<::TST::FormulaPredicateArchive_FormulaPredicateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .TST.FormulaPredicateArchive.QualifierType qualifier1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::FormulaPredicateArchive_QualifierType_IsValid(val))) {
            _internal_set_qualifier1(static_cast<::TST::FormulaPredicateArchive_QualifierType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .TST.FormulaPredicateArchive.QualifierType qualifier2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::FormulaPredicateArchive_QualifierType_IsValid(val))) {
            _internal_set_qualifier2(static_cast<::TST::FormulaPredicateArchive_QualifierType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 param_index1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_param_index1(&has_bits);
          param_index1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 param_index2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_param_index2(&has_bits);
          param_index2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 param_index0 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_param_index0(&has_bits);
          param_index0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormulaPredicateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FormulaPredicateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.FormulaArchive formula = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::formula(this), target, stream);
  }

  // required .TST.FormulaPredicateArchive.FormulaPredicateType predicate_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_predicate_type(), target);
  }

  // required .TST.FormulaPredicateArchive.QualifierType qualifier1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_qualifier1(), target);
  }

  // required .TST.FormulaPredicateArchive.QualifierType qualifier2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_qualifier2(), target);
  }

  // required int32 param_index1 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_param_index1(), target);
  }

  // required int32 param_index2 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_param_index2(), target);
  }

  // required int32 param_index0 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_param_index0(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FormulaPredicateArchive)
  return target;
}

size_t FormulaPredicateArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.FormulaPredicateArchive)
  size_t total_size = 0;

  if (_internal_has_formula()) {
    // required .TSCE.FormulaArchive formula = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formula_);
  }

  if (_internal_has_predicate_type()) {
    // required .TST.FormulaPredicateArchive.FormulaPredicateType predicate_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_predicate_type());
  }

  if (_internal_has_qualifier1()) {
    // required .TST.FormulaPredicateArchive.QualifierType qualifier1 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_qualifier1());
  }

  if (_internal_has_qualifier2()) {
    // required .TST.FormulaPredicateArchive.QualifierType qualifier2 = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_qualifier2());
  }

  if (_internal_has_param_index1()) {
    // required int32 param_index1 = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_param_index1());
  }

  if (_internal_has_param_index2()) {
    // required int32 param_index2 = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_param_index2());
  }

  if (_internal_has_param_index0()) {
    // required int32 param_index0 = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_param_index0());
  }

  return total_size;
}
size_t FormulaPredicateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FormulaPredicateArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .TSCE.FormulaArchive formula = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formula_);

    // required .TST.FormulaPredicateArchive.FormulaPredicateType predicate_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_predicate_type());

    // required .TST.FormulaPredicateArchive.QualifierType qualifier1 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_qualifier1());

    // required .TST.FormulaPredicateArchive.QualifierType qualifier2 = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_qualifier2());

    // required int32 param_index1 = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_param_index1());

    // required int32 param_index2 = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_param_index2());

    // required int32 param_index0 = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_param_index0());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaPredicateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FormulaPredicateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaPredicateArchive::GetClassData() const { return &_class_data_; }

void FormulaPredicateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FormulaPredicateArchive *>(to)->MergeFrom(
      static_cast<const FormulaPredicateArchive &>(from));
}


void FormulaPredicateArchive::MergeFrom(const FormulaPredicateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.FormulaPredicateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_formula()->::TSCE::FormulaArchive::MergeFrom(from._internal_formula());
    }
    if (cached_has_bits & 0x00000002u) {
      predicate_type_ = from.predicate_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      qualifier1_ = from.qualifier1_;
    }
    if (cached_has_bits & 0x00000008u) {
      qualifier2_ = from.qualifier2_;
    }
    if (cached_has_bits & 0x00000010u) {
      param_index1_ = from.param_index1_;
    }
    if (cached_has_bits & 0x00000020u) {
      param_index2_ = from.param_index2_;
    }
    if (cached_has_bits & 0x00000040u) {
      param_index0_ = from.param_index0_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaPredicateArchive::CopyFrom(const FormulaPredicateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FormulaPredicateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaPredicateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_formula()) {
    if (!formula_->IsInitialized()) return false;
  }
  return true;
}

void FormulaPredicateArchive::InternalSwap(FormulaPredicateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaPredicateArchive, param_index0_)
      + sizeof(FormulaPredicateArchive::param_index0_)
      - PROTOBUF_FIELD_OFFSET(FormulaPredicateArchive, formula_)>(
          reinterpret_cast<char*>(&formula_),
          reinterpret_cast<char*>(&other->formula_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaPredicateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[76]);
}

// ===================================================================

class ConditionalStyleSetArchive_ConditionalStyleRule::_Internal {
 public:
  using HasBits = decltype(std::declval<ConditionalStyleSetArchive_ConditionalStyleRule>()._has_bits_);
  static const ::TST::FormulaPredicateArchive& predicate(const ConditionalStyleSetArchive_ConditionalStyleRule* msg);
  static void set_has_predicate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& cell_style(const ConditionalStyleSetArchive_ConditionalStyleRule* msg);
  static void set_has_cell_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& text_style(const ConditionalStyleSetArchive_ConditionalStyleRule* msg);
  static void set_has_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::FormulaPredicateArchive&
ConditionalStyleSetArchive_ConditionalStyleRule::_Internal::predicate(const ConditionalStyleSetArchive_ConditionalStyleRule* msg) {
  return *msg->predicate_;
}
const ::TSP::Reference&
ConditionalStyleSetArchive_ConditionalStyleRule::_Internal::cell_style(const ConditionalStyleSetArchive_ConditionalStyleRule* msg) {
  return *msg->cell_style_;
}
const ::TSP::Reference&
ConditionalStyleSetArchive_ConditionalStyleRule::_Internal::text_style(const ConditionalStyleSetArchive_ConditionalStyleRule* msg) {
  return *msg->text_style_;
}
void ConditionalStyleSetArchive_ConditionalStyleRule::clear_cell_style() {
  if (cell_style_ != nullptr) cell_style_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ConditionalStyleSetArchive_ConditionalStyleRule::clear_text_style() {
  if (text_style_ != nullptr) text_style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ConditionalStyleSetArchive_ConditionalStyleRule::ConditionalStyleSetArchive_ConditionalStyleRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
}
ConditionalStyleSetArchive_ConditionalStyleRule::ConditionalStyleSetArchive_ConditionalStyleRule(const ConditionalStyleSetArchive_ConditionalStyleRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_predicate()) {
    predicate_ = new ::TST::FormulaPredicateArchive(*from.predicate_);
  } else {
    predicate_ = nullptr;
  }
  if (from._internal_has_cell_style()) {
    cell_style_ = new ::TSP::Reference(*from.cell_style_);
  } else {
    cell_style_ = nullptr;
  }
  if (from._internal_has_text_style()) {
    text_style_ = new ::TSP::Reference(*from.text_style_);
  } else {
    text_style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
}

inline void ConditionalStyleSetArchive_ConditionalStyleRule::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&predicate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&text_style_) -
    reinterpret_cast<char*>(&predicate_)) + sizeof(text_style_));
}

ConditionalStyleSetArchive_ConditionalStyleRule::~ConditionalStyleSetArchive_ConditionalStyleRule() {
  // @@protoc_insertion_point(destructor:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConditionalStyleSetArchive_ConditionalStyleRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete predicate_;
  if (this != internal_default_instance()) delete cell_style_;
  if (this != internal_default_instance()) delete text_style_;
}

void ConditionalStyleSetArchive_ConditionalStyleRule::ArenaDtor(void* object) {
  ConditionalStyleSetArchive_ConditionalStyleRule* _this = reinterpret_cast< ConditionalStyleSetArchive_ConditionalStyleRule* >(object);
  (void)_this;
}
void ConditionalStyleSetArchive_ConditionalStyleRule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConditionalStyleSetArchive_ConditionalStyleRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConditionalStyleSetArchive_ConditionalStyleRule::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(predicate_ != nullptr);
      predicate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_style_ != nullptr);
      cell_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(text_style_ != nullptr);
      text_style_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConditionalStyleSetArchive_ConditionalStyleRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.FormulaPredicateArchive predicate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_predicate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference cell_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference text_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConditionalStyleSetArchive_ConditionalStyleRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.FormulaPredicateArchive predicate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::predicate(this), target, stream);
  }

  // required .TSP.Reference cell_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cell_style(this), target, stream);
  }

  // required .TSP.Reference text_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::text_style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
  return target;
}

size_t ConditionalStyleSetArchive_ConditionalStyleRule::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
  size_t total_size = 0;

  if (_internal_has_predicate()) {
    // required .TST.FormulaPredicateArchive predicate = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *predicate_);
  }

  if (_internal_has_cell_style()) {
    // required .TSP.Reference cell_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_style_);
  }

  if (_internal_has_text_style()) {
    // required .TSP.Reference text_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_style_);
  }

  return total_size;
}
size_t ConditionalStyleSetArchive_ConditionalStyleRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.FormulaPredicateArchive predicate = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *predicate_);

    // required .TSP.Reference cell_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_style_);

    // required .TSP.Reference text_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_style_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConditionalStyleSetArchive_ConditionalStyleRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConditionalStyleSetArchive_ConditionalStyleRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConditionalStyleSetArchive_ConditionalStyleRule::GetClassData() const { return &_class_data_; }

void ConditionalStyleSetArchive_ConditionalStyleRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ConditionalStyleSetArchive_ConditionalStyleRule *>(to)->MergeFrom(
      static_cast<const ConditionalStyleSetArchive_ConditionalStyleRule &>(from));
}


void ConditionalStyleSetArchive_ConditionalStyleRule::MergeFrom(const ConditionalStyleSetArchive_ConditionalStyleRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_predicate()->::TST::FormulaPredicateArchive::MergeFrom(from._internal_predicate());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_style()->::TSP::Reference::MergeFrom(from._internal_cell_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_text_style()->::TSP::Reference::MergeFrom(from._internal_text_style());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConditionalStyleSetArchive_ConditionalStyleRule::CopyFrom(const ConditionalStyleSetArchive_ConditionalStyleRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalStyleSetArchive_ConditionalStyleRule::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_predicate()) {
    if (!predicate_->IsInitialized()) return false;
  }
  if (_internal_has_cell_style()) {
    if (!cell_style_->IsInitialized()) return false;
  }
  if (_internal_has_text_style()) {
    if (!text_style_->IsInitialized()) return false;
  }
  return true;
}

void ConditionalStyleSetArchive_ConditionalStyleRule::InternalSwap(ConditionalStyleSetArchive_ConditionalStyleRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConditionalStyleSetArchive_ConditionalStyleRule, text_style_)
      + sizeof(ConditionalStyleSetArchive_ConditionalStyleRule::text_style_)
      - PROTOBUF_FIELD_OFFSET(ConditionalStyleSetArchive_ConditionalStyleRule, predicate_)>(
          reinterpret_cast<char*>(&predicate_),
          reinterpret_cast<char*>(&other->predicate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionalStyleSetArchive_ConditionalStyleRule::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[77]);
}

// ===================================================================

class ConditionalStyleSetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ConditionalStyleSetArchive>()._has_bits_);
  static void set_has_rulecount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ConditionalStyleSetArchive::ConditionalStyleSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rules_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ConditionalStyleSetArchive)
}
ConditionalStyleSetArchive::ConditionalStyleSetArchive(const ConditionalStyleSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rules_(from.rules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rulecount_ = from.rulecount_;
  // @@protoc_insertion_point(copy_constructor:TST.ConditionalStyleSetArchive)
}

inline void ConditionalStyleSetArchive::SharedCtor() {
rulecount_ = 0u;
}

ConditionalStyleSetArchive::~ConditionalStyleSetArchive() {
  // @@protoc_insertion_point(destructor:TST.ConditionalStyleSetArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConditionalStyleSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConditionalStyleSetArchive::ArenaDtor(void* object) {
  ConditionalStyleSetArchive* _this = reinterpret_cast< ConditionalStyleSetArchive* >(object);
  (void)_this;
}
void ConditionalStyleSetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConditionalStyleSetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConditionalStyleSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ConditionalStyleSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  rulecount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConditionalStyleSetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 ruleCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rulecount(&has_bits);
          rulecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.ConditionalStyleSetArchive.ConditionalStyleRule rules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConditionalStyleSetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ConditionalStyleSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ruleCount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rulecount(), target);
  }

  // repeated .TST.ConditionalStyleSetArchive.ConditionalStyleRule rules = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rules(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ConditionalStyleSetArchive)
  return target;
}

size_t ConditionalStyleSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ConditionalStyleSetArchive)
  size_t total_size = 0;

  // required uint32 ruleCount = 1;
  if (_internal_has_rulecount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rulecount());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.ConditionalStyleSetArchive.ConditionalStyleRule rules = 2;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConditionalStyleSetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConditionalStyleSetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConditionalStyleSetArchive::GetClassData() const { return &_class_data_; }

void ConditionalStyleSetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ConditionalStyleSetArchive *>(to)->MergeFrom(
      static_cast<const ConditionalStyleSetArchive &>(from));
}


void ConditionalStyleSetArchive::MergeFrom(const ConditionalStyleSetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ConditionalStyleSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
  if (from._internal_has_rulecount()) {
    _internal_set_rulecount(from._internal_rulecount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConditionalStyleSetArchive::CopyFrom(const ConditionalStyleSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ConditionalStyleSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalStyleSetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rules_)) return false;
  return true;
}

void ConditionalStyleSetArchive::InternalSwap(ConditionalStyleSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rules_.InternalSwap(&other->rules_);
  swap(rulecount_, other->rulecount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionalStyleSetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[78]);
}

// ===================================================================

class FilterSetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FilterSetArchive>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_needs_formula_rewrite_for_import(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FilterSetArchive::FilterSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filter_rules_(arena),
  filter_offsets_(arena),
  filter_enabled_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.FilterSetArchive)
}
FilterSetArchive::FilterSetArchive(const FilterSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      filter_rules_(from.filter_rules_),
      filter_offsets_(from.filter_offsets_),
      filter_enabled_(from.filter_enabled_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_enabled_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_enabled_));
  // @@protoc_insertion_point(copy_constructor:TST.FilterSetArchive)
}

inline void FilterSetArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&needs_formula_rewrite_for_import_) -
    reinterpret_cast<char*>(&type_)) + sizeof(needs_formula_rewrite_for_import_));
is_enabled_ = true;
}

FilterSetArchive::~FilterSetArchive() {
  // @@protoc_insertion_point(destructor:TST.FilterSetArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FilterSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FilterSetArchive::ArenaDtor(void* object) {
  FilterSetArchive* _this = reinterpret_cast< FilterSetArchive* >(object);
  (void)_this;
}
void FilterSetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilterSetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FilterSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FilterSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_rules_.Clear();
  filter_offsets_.Clear();
  filter_enabled_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&needs_formula_rewrite_for_import_) -
        reinterpret_cast<char*>(&type_)) + sizeof(needs_formula_rewrite_for_import_));
    is_enabled_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterSetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TST.FilterSetArchive.FilterSetType type = 1 [default = FilterSetArchiveTypeAll];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::FilterSetArchive_FilterSetType_IsValid(val))) {
            _internal_set_type(static_cast<::TST::FilterSetArchive_FilterSetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool is_enabled = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_enabled(&has_bits);
          is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.FilterRuleArchive filter_rules = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filter_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool needs_formula_rewrite_for_import = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_needs_formula_rewrite_for_import(&has_bits);
          needs_formula_rewrite_for_import_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 filter_offsets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_filter_offsets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_filter_offsets(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool filter_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_filter_enabled(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_filter_enabled(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterSetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FilterSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TST.FilterSetArchive.FilterSetType type = 1 [default = FilterSetArchiveTypeAll];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional bool is_enabled = 2 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_enabled(), target);
  }

  // repeated .TST.FilterRuleArchive filter_rules = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filter_rules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_filter_rules(i), target, stream);
  }

  // optional bool needs_formula_rewrite_for_import = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_needs_formula_rewrite_for_import(), target);
  }

  // repeated uint32 filter_offsets = 5;
  for (int i = 0, n = this->_internal_filter_offsets_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_filter_offsets(i), target);
  }

  // repeated bool filter_enabled = 6;
  for (int i = 0, n = this->_internal_filter_enabled_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_filter_enabled(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FilterSetArchive)
  return target;
}

size_t FilterSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FilterSetArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.FilterRuleArchive filter_rules = 3;
  total_size += 1UL * this->_internal_filter_rules_size();
  for (const auto& msg : this->filter_rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 filter_offsets = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->filter_offsets_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_filter_offsets_size());
    total_size += data_size;
  }

  // repeated bool filter_enabled = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_filter_enabled_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_filter_enabled_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TST.FilterSetArchive.FilterSetType type = 1 [default = FilterSetArchiveTypeAll];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional bool needs_formula_rewrite_for_import = 4 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_enabled = 2 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilterSetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FilterSetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilterSetArchive::GetClassData() const { return &_class_data_; }

void FilterSetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FilterSetArchive *>(to)->MergeFrom(
      static_cast<const FilterSetArchive &>(from));
}


void FilterSetArchive::MergeFrom(const FilterSetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.FilterSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filter_rules_.MergeFrom(from.filter_rules_);
  filter_offsets_.MergeFrom(from.filter_offsets_);
  filter_enabled_.MergeFrom(from.filter_enabled_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      needs_formula_rewrite_for_import_ = from.needs_formula_rewrite_for_import_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_enabled_ = from.is_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilterSetArchive::CopyFrom(const FilterSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FilterSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterSetArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(filter_rules_)) return false;
  return true;
}

void FilterSetArchive::InternalSwap(FilterSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filter_rules_.InternalSwap(&other->filter_rules_);
  filter_offsets_.InternalSwap(&other->filter_offsets_);
  filter_enabled_.InternalSwap(&other->filter_enabled_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilterSetArchive, needs_formula_rewrite_for_import_)
      + sizeof(FilterSetArchive::needs_formula_rewrite_for_import_)
      - PROTOBUF_FIELD_OFFSET(FilterSetArchive, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
  swap(is_enabled_, other->is_enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterSetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[79]);
}

// ===================================================================

class HiddenStateExtentArchive_RowOrColumnState::_Internal {
 public:
  using HasBits = decltype(std::declval<HiddenStateExtentArchive_RowOrColumnState>()._has_bits_);
  static const ::TSP::UUID& row_or_column_uid(const HiddenStateExtentArchive_RowOrColumnState* msg);
  static void set_has_row_or_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_filtered(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
HiddenStateExtentArchive_RowOrColumnState::_Internal::row_or_column_uid(const HiddenStateExtentArchive_RowOrColumnState* msg) {
  return *msg->row_or_column_uid_;
}
void HiddenStateExtentArchive_RowOrColumnState::clear_row_or_column_uid() {
  if (row_or_column_uid_ != nullptr) row_or_column_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
HiddenStateExtentArchive_RowOrColumnState::HiddenStateExtentArchive_RowOrColumnState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.HiddenStateExtentArchive.RowOrColumnState)
}
HiddenStateExtentArchive_RowOrColumnState::HiddenStateExtentArchive_RowOrColumnState(const HiddenStateExtentArchive_RowOrColumnState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_row_or_column_uid()) {
    row_or_column_uid_ = new ::TSP::UUID(*from.row_or_column_uid_);
  } else {
    row_or_column_uid_ = nullptr;
  }
  ::memcpy(&user_hidden_, &from.user_hidden_,
    static_cast<size_t>(reinterpret_cast<char*>(&filtered_) -
    reinterpret_cast<char*>(&user_hidden_)) + sizeof(filtered_));
  // @@protoc_insertion_point(copy_constructor:TST.HiddenStateExtentArchive.RowOrColumnState)
}

inline void HiddenStateExtentArchive_RowOrColumnState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&row_or_column_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&filtered_) -
    reinterpret_cast<char*>(&row_or_column_uid_)) + sizeof(filtered_));
}

HiddenStateExtentArchive_RowOrColumnState::~HiddenStateExtentArchive_RowOrColumnState() {
  // @@protoc_insertion_point(destructor:TST.HiddenStateExtentArchive.RowOrColumnState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HiddenStateExtentArchive_RowOrColumnState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete row_or_column_uid_;
}

void HiddenStateExtentArchive_RowOrColumnState::ArenaDtor(void* object) {
  HiddenStateExtentArchive_RowOrColumnState* _this = reinterpret_cast< HiddenStateExtentArchive_RowOrColumnState* >(object);
  (void)_this;
}
void HiddenStateExtentArchive_RowOrColumnState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HiddenStateExtentArchive_RowOrColumnState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HiddenStateExtentArchive_RowOrColumnState::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HiddenStateExtentArchive.RowOrColumnState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(row_or_column_uid_ != nullptr);
    row_or_column_uid_->Clear();
  }
  ::memset(&user_hidden_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filtered_) -
      reinterpret_cast<char*>(&user_hidden_)) + sizeof(filtered_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HiddenStateExtentArchive_RowOrColumnState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID row_or_column_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_or_column_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool user_hidden = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_user_hidden(&has_bits);
          user_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool filtered = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_filtered(&has_bits);
          filtered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HiddenStateExtentArchive_RowOrColumnState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HiddenStateExtentArchive.RowOrColumnState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID row_or_column_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::row_or_column_uid(this), target, stream);
  }

  // optional bool user_hidden = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_user_hidden(), target);
  }

  // optional bool filtered = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_filtered(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HiddenStateExtentArchive.RowOrColumnState)
  return target;
}

size_t HiddenStateExtentArchive_RowOrColumnState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HiddenStateExtentArchive.RowOrColumnState)
  size_t total_size = 0;

  // required .TSP.UUID row_or_column_uid = 1;
  if (_internal_has_row_or_column_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *row_or_column_uid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional bool user_hidden = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool filtered = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HiddenStateExtentArchive_RowOrColumnState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HiddenStateExtentArchive_RowOrColumnState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HiddenStateExtentArchive_RowOrColumnState::GetClassData() const { return &_class_data_; }

void HiddenStateExtentArchive_RowOrColumnState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HiddenStateExtentArchive_RowOrColumnState *>(to)->MergeFrom(
      static_cast<const HiddenStateExtentArchive_RowOrColumnState &>(from));
}


void HiddenStateExtentArchive_RowOrColumnState::MergeFrom(const HiddenStateExtentArchive_RowOrColumnState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.HiddenStateExtentArchive.RowOrColumnState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_row_or_column_uid()->::TSP::UUID::MergeFrom(from._internal_row_or_column_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      user_hidden_ = from.user_hidden_;
    }
    if (cached_has_bits & 0x00000004u) {
      filtered_ = from.filtered_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HiddenStateExtentArchive_RowOrColumnState::CopyFrom(const HiddenStateExtentArchive_RowOrColumnState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HiddenStateExtentArchive.RowOrColumnState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HiddenStateExtentArchive_RowOrColumnState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_row_or_column_uid()) {
    if (!row_or_column_uid_->IsInitialized()) return false;
  }
  return true;
}

void HiddenStateExtentArchive_RowOrColumnState::InternalSwap(HiddenStateExtentArchive_RowOrColumnState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HiddenStateExtentArchive_RowOrColumnState, filtered_)
      + sizeof(HiddenStateExtentArchive_RowOrColumnState::filtered_)
      - PROTOBUF_FIELD_OFFSET(HiddenStateExtentArchive_RowOrColumnState, row_or_column_uid_)>(
          reinterpret_cast<char*>(&row_or_column_uid_),
          reinterpret_cast<char*>(&other->row_or_column_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HiddenStateExtentArchive_RowOrColumnState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[80]);
}

// ===================================================================

class HiddenStateExtentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HiddenStateExtentArchive>()._has_bits_);
  static const ::TSP::UUID& hidden_state_extent_uid(const HiddenStateExtentArchive* msg);
  static void set_has_hidden_state_extent_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_row_or_column_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_needs_to_update_filter_set_for_import(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
HiddenStateExtentArchive::_Internal::hidden_state_extent_uid(const HiddenStateExtentArchive* msg) {
  return *msg->hidden_state_extent_uid_;
}
void HiddenStateExtentArchive::clear_hidden_state_extent_uid() {
  if (hidden_state_extent_uid_ != nullptr) hidden_state_extent_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void HiddenStateExtentArchive::clear_threshold_value() {
  threshold_value_.Clear();
}
void HiddenStateExtentArchive::clear_collapsed_group_uids() {
  collapsed_group_uids_.Clear();
}
HiddenStateExtentArchive::HiddenStateExtentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  hidden_states_(arena),
  threshold_value_(arena),
  collapsed_group_uids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.HiddenStateExtentArchive)
}
HiddenStateExtentArchive::HiddenStateExtentArchive(const HiddenStateExtentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      hidden_states_(from.hidden_states_),
      threshold_value_(from.threshold_value_),
      collapsed_group_uids_(from.collapsed_group_uids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hidden_state_extent_uid()) {
    hidden_state_extent_uid_ = new ::TSP::UUID(*from.hidden_state_extent_uid_);
  } else {
    hidden_state_extent_uid_ = nullptr;
  }
  ::memcpy(&row_or_column_direction_, &from.row_or_column_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&needs_to_update_filter_set_for_import_) -
    reinterpret_cast<char*>(&row_or_column_direction_)) + sizeof(needs_to_update_filter_set_for_import_));
  // @@protoc_insertion_point(copy_constructor:TST.HiddenStateExtentArchive)
}

inline void HiddenStateExtentArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hidden_state_extent_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&needs_to_update_filter_set_for_import_) -
    reinterpret_cast<char*>(&hidden_state_extent_uid_)) + sizeof(needs_to_update_filter_set_for_import_));
}

HiddenStateExtentArchive::~HiddenStateExtentArchive() {
  // @@protoc_insertion_point(destructor:TST.HiddenStateExtentArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HiddenStateExtentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hidden_state_extent_uid_;
}

void HiddenStateExtentArchive::ArenaDtor(void* object) {
  HiddenStateExtentArchive* _this = reinterpret_cast< HiddenStateExtentArchive* >(object);
  (void)_this;
}
void HiddenStateExtentArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HiddenStateExtentArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HiddenStateExtentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HiddenStateExtentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hidden_states_.Clear();
  threshold_value_.Clear();
  collapsed_group_uids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(hidden_state_extent_uid_ != nullptr);
    hidden_state_extent_uid_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&row_or_column_direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&needs_to_update_filter_set_for_import_) -
        reinterpret_cast<char*>(&row_or_column_direction_)) + sizeof(needs_to_update_filter_set_for_import_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HiddenStateExtentArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID hidden_state_extent_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hidden_state_extent_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.HiddenStateExtentArchive.RowOrColumnState hidden_states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hidden_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required .TST.HiddenStateExtentArchive.RowOrColumnDirection row_or_column_direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::HiddenStateExtentArchive_RowOrColumnDirection_IsValid(val))) {
            _internal_set_row_or_column_direction(static_cast<::TST::HiddenStateExtentArchive_RowOrColumnDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.CellValueArchive threshold_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_threshold_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool needs_to_update_filter_set_for_import = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_needs_to_update_filter_set_for_import(&has_bits);
          needs_to_update_filter_set_for_import_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID collapsed_group_uids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collapsed_group_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HiddenStateExtentArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HiddenStateExtentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID hidden_state_extent_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hidden_state_extent_uid(this), target, stream);
  }

  // repeated .TST.HiddenStateExtentArchive.RowOrColumnState hidden_states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hidden_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_hidden_states(i), target, stream);
  }

  // required .TST.HiddenStateExtentArchive.RowOrColumnDirection row_or_column_direction = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_row_or_column_direction(), target);
  }

  // repeated .TSCE.CellValueArchive threshold_value = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_threshold_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_threshold_value(i), target, stream);
  }

  // optional bool needs_to_update_filter_set_for_import = 6 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_needs_to_update_filter_set_for_import(), target);
  }

  // repeated .TSP.UUID collapsed_group_uids = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collapsed_group_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_collapsed_group_uids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HiddenStateExtentArchive)
  return target;
}

size_t HiddenStateExtentArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.HiddenStateExtentArchive)
  size_t total_size = 0;

  if (_internal_has_hidden_state_extent_uid()) {
    // required .TSP.UUID hidden_state_extent_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hidden_state_extent_uid_);
  }

  if (_internal_has_row_or_column_direction()) {
    // required .TST.HiddenStateExtentArchive.RowOrColumnDirection row_or_column_direction = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_row_or_column_direction());
  }

  return total_size;
}
size_t HiddenStateExtentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HiddenStateExtentArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID hidden_state_extent_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hidden_state_extent_uid_);

    // required .TST.HiddenStateExtentArchive.RowOrColumnDirection row_or_column_direction = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_row_or_column_direction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.HiddenStateExtentArchive.RowOrColumnState hidden_states = 2;
  total_size += 1UL * this->_internal_hidden_states_size();
  for (const auto& msg : this->hidden_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.CellValueArchive threshold_value = 5;
  total_size += 1UL * this->_internal_threshold_value_size();
  for (const auto& msg : this->threshold_value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID collapsed_group_uids = 7;
  total_size += 1UL * this->_internal_collapsed_group_uids_size();
  for (const auto& msg : this->collapsed_group_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool needs_to_update_filter_set_for_import = 6 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HiddenStateExtentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HiddenStateExtentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HiddenStateExtentArchive::GetClassData() const { return &_class_data_; }

void HiddenStateExtentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HiddenStateExtentArchive *>(to)->MergeFrom(
      static_cast<const HiddenStateExtentArchive &>(from));
}


void HiddenStateExtentArchive::MergeFrom(const HiddenStateExtentArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.HiddenStateExtentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hidden_states_.MergeFrom(from.hidden_states_);
  threshold_value_.MergeFrom(from.threshold_value_);
  collapsed_group_uids_.MergeFrom(from.collapsed_group_uids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_hidden_state_extent_uid()->::TSP::UUID::MergeFrom(from._internal_hidden_state_extent_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      row_or_column_direction_ = from.row_or_column_direction_;
    }
    if (cached_has_bits & 0x00000004u) {
      needs_to_update_filter_set_for_import_ = from.needs_to_update_filter_set_for_import_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HiddenStateExtentArchive::CopyFrom(const HiddenStateExtentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HiddenStateExtentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HiddenStateExtentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(hidden_states_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(threshold_value_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(collapsed_group_uids_)) return false;
  if (_internal_has_hidden_state_extent_uid()) {
    if (!hidden_state_extent_uid_->IsInitialized()) return false;
  }
  return true;
}

void HiddenStateExtentArchive::InternalSwap(HiddenStateExtentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hidden_states_.InternalSwap(&other->hidden_states_);
  threshold_value_.InternalSwap(&other->threshold_value_);
  collapsed_group_uids_.InternalSwap(&other->collapsed_group_uids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HiddenStateExtentArchive, needs_to_update_filter_set_for_import_)
      + sizeof(HiddenStateExtentArchive::needs_to_update_filter_set_for_import_)
      - PROTOBUF_FIELD_OFFSET(HiddenStateExtentArchive, hidden_state_extent_uid_)>(
          reinterpret_cast<char*>(&hidden_state_extent_uid_),
          reinterpret_cast<char*>(&other->hidden_state_extent_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HiddenStateExtentArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[81]);
}

// ===================================================================

class HiddenStatesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HiddenStatesArchive>()._has_bits_);
  static const ::TSP::UUID& hidden_states_uid(const HiddenStatesArchive* msg);
  static void set_has_hidden_states_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::HiddenStateExtentArchive& column_hidden_state_extent(const HiddenStatesArchive* msg);
  static void set_has_column_hidden_state_extent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::HiddenStateExtentArchive& row_hidden_state_extent(const HiddenStatesArchive* msg);
  static void set_has_row_hidden_state_extent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::UUID&
HiddenStatesArchive::_Internal::hidden_states_uid(const HiddenStatesArchive* msg) {
  return *msg->hidden_states_uid_;
}
const ::TST::HiddenStateExtentArchive&
HiddenStatesArchive::_Internal::column_hidden_state_extent(const HiddenStatesArchive* msg) {
  return *msg->column_hidden_state_extent_;
}
const ::TST::HiddenStateExtentArchive&
HiddenStatesArchive::_Internal::row_hidden_state_extent(const HiddenStatesArchive* msg) {
  return *msg->row_hidden_state_extent_;
}
void HiddenStatesArchive::clear_hidden_states_uid() {
  if (hidden_states_uid_ != nullptr) hidden_states_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
HiddenStatesArchive::HiddenStatesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.HiddenStatesArchive)
}
HiddenStatesArchive::HiddenStatesArchive(const HiddenStatesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hidden_states_uid()) {
    hidden_states_uid_ = new ::TSP::UUID(*from.hidden_states_uid_);
  } else {
    hidden_states_uid_ = nullptr;
  }
  if (from._internal_has_column_hidden_state_extent()) {
    column_hidden_state_extent_ = new ::TST::HiddenStateExtentArchive(*from.column_hidden_state_extent_);
  } else {
    column_hidden_state_extent_ = nullptr;
  }
  if (from._internal_has_row_hidden_state_extent()) {
    row_hidden_state_extent_ = new ::TST::HiddenStateExtentArchive(*from.row_hidden_state_extent_);
  } else {
    row_hidden_state_extent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.HiddenStatesArchive)
}

inline void HiddenStatesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hidden_states_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&row_hidden_state_extent_) -
    reinterpret_cast<char*>(&hidden_states_uid_)) + sizeof(row_hidden_state_extent_));
}

HiddenStatesArchive::~HiddenStatesArchive() {
  // @@protoc_insertion_point(destructor:TST.HiddenStatesArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HiddenStatesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hidden_states_uid_;
  if (this != internal_default_instance()) delete column_hidden_state_extent_;
  if (this != internal_default_instance()) delete row_hidden_state_extent_;
}

void HiddenStatesArchive::ArenaDtor(void* object) {
  HiddenStatesArchive* _this = reinterpret_cast< HiddenStatesArchive* >(object);
  (void)_this;
}
void HiddenStatesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HiddenStatesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HiddenStatesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HiddenStatesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(hidden_states_uid_ != nullptr);
      hidden_states_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(column_hidden_state_extent_ != nullptr);
      column_hidden_state_extent_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(row_hidden_state_extent_ != nullptr);
      row_hidden_state_extent_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HiddenStatesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID hidden_states_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hidden_states_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.HiddenStateExtentArchive column_hidden_state_extent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_hidden_state_extent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.HiddenStateExtentArchive row_hidden_state_extent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_hidden_state_extent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HiddenStatesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HiddenStatesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID hidden_states_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hidden_states_uid(this), target, stream);
  }

  // required .TST.HiddenStateExtentArchive column_hidden_state_extent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::column_hidden_state_extent(this), target, stream);
  }

  // required .TST.HiddenStateExtentArchive row_hidden_state_extent = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::row_hidden_state_extent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HiddenStatesArchive)
  return target;
}

size_t HiddenStatesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.HiddenStatesArchive)
  size_t total_size = 0;

  if (_internal_has_hidden_states_uid()) {
    // required .TSP.UUID hidden_states_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hidden_states_uid_);
  }

  if (_internal_has_column_hidden_state_extent()) {
    // required .TST.HiddenStateExtentArchive column_hidden_state_extent = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_hidden_state_extent_);
  }

  if (_internal_has_row_hidden_state_extent()) {
    // required .TST.HiddenStateExtentArchive row_hidden_state_extent = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *row_hidden_state_extent_);
  }

  return total_size;
}
size_t HiddenStatesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HiddenStatesArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSP.UUID hidden_states_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hidden_states_uid_);

    // required .TST.HiddenStateExtentArchive column_hidden_state_extent = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_hidden_state_extent_);

    // required .TST.HiddenStateExtentArchive row_hidden_state_extent = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *row_hidden_state_extent_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HiddenStatesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HiddenStatesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HiddenStatesArchive::GetClassData() const { return &_class_data_; }

void HiddenStatesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HiddenStatesArchive *>(to)->MergeFrom(
      static_cast<const HiddenStatesArchive &>(from));
}


void HiddenStatesArchive::MergeFrom(const HiddenStatesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.HiddenStatesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_hidden_states_uid()->::TSP::UUID::MergeFrom(from._internal_hidden_states_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_column_hidden_state_extent()->::TST::HiddenStateExtentArchive::MergeFrom(from._internal_column_hidden_state_extent());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_row_hidden_state_extent()->::TST::HiddenStateExtentArchive::MergeFrom(from._internal_row_hidden_state_extent());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HiddenStatesArchive::CopyFrom(const HiddenStatesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HiddenStatesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HiddenStatesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_hidden_states_uid()) {
    if (!hidden_states_uid_->IsInitialized()) return false;
  }
  if (_internal_has_column_hidden_state_extent()) {
    if (!column_hidden_state_extent_->IsInitialized()) return false;
  }
  if (_internal_has_row_hidden_state_extent()) {
    if (!row_hidden_state_extent_->IsInitialized()) return false;
  }
  return true;
}

void HiddenStatesArchive::InternalSwap(HiddenStatesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HiddenStatesArchive, row_hidden_state_extent_)
      + sizeof(HiddenStatesArchive::row_hidden_state_extent_)
      - PROTOBUF_FIELD_OFFSET(HiddenStatesArchive, hidden_states_uid_)>(
          reinterpret_cast<char*>(&hidden_states_uid_),
          reinterpret_cast<char*>(&other->hidden_states_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HiddenStatesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[82]);
}

// ===================================================================

class HiddenStatesOwnerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HiddenStatesOwnerArchive>()._has_bits_);
  static const ::TSP::UUID& owner_uid(const HiddenStatesOwnerArchive* msg);
  static void set_has_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
HiddenStatesOwnerArchive::_Internal::owner_uid(const HiddenStatesOwnerArchive* msg) {
  return *msg->owner_uid_;
}
void HiddenStatesOwnerArchive::clear_owner_uid() {
  if (owner_uid_ != nullptr) owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
HiddenStatesOwnerArchive::HiddenStatesOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  hidden_states_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.HiddenStatesOwnerArchive)
}
HiddenStatesOwnerArchive::HiddenStatesOwnerArchive(const HiddenStatesOwnerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      hidden_states_(from.hidden_states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_uid()) {
    owner_uid_ = new ::TSP::UUID(*from.owner_uid_);
  } else {
    owner_uid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.HiddenStatesOwnerArchive)
}

inline void HiddenStatesOwnerArchive::SharedCtor() {
owner_uid_ = nullptr;
}

HiddenStatesOwnerArchive::~HiddenStatesOwnerArchive() {
  // @@protoc_insertion_point(destructor:TST.HiddenStatesOwnerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HiddenStatesOwnerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete owner_uid_;
}

void HiddenStatesOwnerArchive::ArenaDtor(void* object) {
  HiddenStatesOwnerArchive* _this = reinterpret_cast< HiddenStatesOwnerArchive* >(object);
  (void)_this;
}
void HiddenStatesOwnerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HiddenStatesOwnerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HiddenStatesOwnerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HiddenStatesOwnerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hidden_states_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_uid_ != nullptr);
    owner_uid_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HiddenStatesOwnerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID owner_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.HiddenStatesArchive hidden_states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hidden_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HiddenStatesOwnerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HiddenStatesOwnerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID owner_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::owner_uid(this), target, stream);
  }

  // repeated .TST.HiddenStatesArchive hidden_states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hidden_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_hidden_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HiddenStatesOwnerArchive)
  return target;
}

size_t HiddenStatesOwnerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HiddenStatesOwnerArchive)
  size_t total_size = 0;

  // required .TSP.UUID owner_uid = 1;
  if (_internal_has_owner_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_uid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.HiddenStatesArchive hidden_states = 2;
  total_size += 1UL * this->_internal_hidden_states_size();
  for (const auto& msg : this->hidden_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HiddenStatesOwnerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HiddenStatesOwnerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HiddenStatesOwnerArchive::GetClassData() const { return &_class_data_; }

void HiddenStatesOwnerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HiddenStatesOwnerArchive *>(to)->MergeFrom(
      static_cast<const HiddenStatesOwnerArchive &>(from));
}


void HiddenStatesOwnerArchive::MergeFrom(const HiddenStatesOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.HiddenStatesOwnerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hidden_states_.MergeFrom(from.hidden_states_);
  if (from._internal_has_owner_uid()) {
    _internal_mutable_owner_uid()->::TSP::UUID::MergeFrom(from._internal_owner_uid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HiddenStatesOwnerArchive::CopyFrom(const HiddenStatesOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HiddenStatesOwnerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HiddenStatesOwnerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(hidden_states_)) return false;
  if (_internal_has_owner_uid()) {
    if (!owner_uid_->IsInitialized()) return false;
  }
  return true;
}

void HiddenStatesOwnerArchive::InternalSwap(HiddenStatesOwnerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hidden_states_.InternalSwap(&other->hidden_states_);
  swap(owner_uid_, other->owner_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HiddenStatesOwnerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[83]);
}

// ===================================================================

class ExpandCollapseStateArchive::_Internal {
 public:
};

void ExpandCollapseStateArchive::clear_uids_collapsed() {
  uids_collapsed_.Clear();
}
void ExpandCollapseStateArchive::clear_uids_expanded() {
  uids_expanded_.Clear();
}
ExpandCollapseStateArchive::ExpandCollapseStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  uids_collapsed_(arena),
  uids_expanded_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ExpandCollapseStateArchive)
}
ExpandCollapseStateArchive::ExpandCollapseStateArchive(const ExpandCollapseStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uids_collapsed_(from.uids_collapsed_),
      uids_expanded_(from.uids_expanded_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.ExpandCollapseStateArchive)
}

inline void ExpandCollapseStateArchive::SharedCtor() {
}

ExpandCollapseStateArchive::~ExpandCollapseStateArchive() {
  // @@protoc_insertion_point(destructor:TST.ExpandCollapseStateArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExpandCollapseStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExpandCollapseStateArchive::ArenaDtor(void* object) {
  ExpandCollapseStateArchive* _this = reinterpret_cast< ExpandCollapseStateArchive* >(object);
  (void)_this;
}
void ExpandCollapseStateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpandCollapseStateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExpandCollapseStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ExpandCollapseStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uids_collapsed_.Clear();
  uids_expanded_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpandCollapseStateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID uids_collapsed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uids_collapsed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID uids_expanded = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uids_expanded(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpandCollapseStateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ExpandCollapseStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID uids_collapsed = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uids_collapsed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_uids_collapsed(i), target, stream);
  }

  // repeated .TSP.UUID uids_expanded = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uids_expanded_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_uids_expanded(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ExpandCollapseStateArchive)
  return target;
}

size_t ExpandCollapseStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ExpandCollapseStateArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uids_collapsed = 1;
  total_size += 1UL * this->_internal_uids_collapsed_size();
  for (const auto& msg : this->uids_collapsed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID uids_expanded = 2;
  total_size += 1UL * this->_internal_uids_expanded_size();
  for (const auto& msg : this->uids_expanded_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpandCollapseStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExpandCollapseStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpandCollapseStateArchive::GetClassData() const { return &_class_data_; }

void ExpandCollapseStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ExpandCollapseStateArchive *>(to)->MergeFrom(
      static_cast<const ExpandCollapseStateArchive &>(from));
}


void ExpandCollapseStateArchive::MergeFrom(const ExpandCollapseStateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ExpandCollapseStateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uids_collapsed_.MergeFrom(from.uids_collapsed_);
  uids_expanded_.MergeFrom(from.uids_expanded_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpandCollapseStateArchive::CopyFrom(const ExpandCollapseStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ExpandCollapseStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandCollapseStateArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(uids_collapsed_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(uids_expanded_)) return false;
  return true;
}

void ExpandCollapseStateArchive::InternalSwap(ExpandCollapseStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  uids_collapsed_.InternalSwap(&other->uids_collapsed_);
  uids_expanded_.InternalSwap(&other->uids_expanded_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpandCollapseStateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[84]);
}

// ===================================================================

class TokenAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TokenAttachmentArchive>()._has_bits_);
  static const ::TSWP::UIGraphicalAttachment& super(const TokenAttachmentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& expressionnode(const TokenAttachmentArchive* msg);
  static void set_has_expressionnode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::UIGraphicalAttachment&
TokenAttachmentArchive::_Internal::super(const TokenAttachmentArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
TokenAttachmentArchive::_Internal::expressionnode(const TokenAttachmentArchive* msg) {
  return *msg->expressionnode_;
}
void TokenAttachmentArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TokenAttachmentArchive::clear_expressionnode() {
  if (expressionnode_ != nullptr) expressionnode_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TokenAttachmentArchive::TokenAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TokenAttachmentArchive)
}
TokenAttachmentArchive::TokenAttachmentArchive(const TokenAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::UIGraphicalAttachment(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_expressionnode()) {
    expressionnode_ = new ::TSP::Reference(*from.expressionnode_);
  } else {
    expressionnode_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.TokenAttachmentArchive)
}

inline void TokenAttachmentArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expressionnode_) -
    reinterpret_cast<char*>(&super_)) + sizeof(expressionnode_));
}

TokenAttachmentArchive::~TokenAttachmentArchive() {
  // @@protoc_insertion_point(destructor:TST.TokenAttachmentArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TokenAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete expressionnode_;
}

void TokenAttachmentArchive::ArenaDtor(void* object) {
  TokenAttachmentArchive* _this = reinterpret_cast< TokenAttachmentArchive* >(object);
  (void)_this;
}
void TokenAttachmentArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenAttachmentArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TokenAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TokenAttachmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(expressionnode_ != nullptr);
      expressionnode_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenAttachmentArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.UIGraphicalAttachment super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference expressionNode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expressionnode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TokenAttachmentArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TokenAttachmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.UIGraphicalAttachment super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference expressionNode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::expressionnode(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TokenAttachmentArchive)
  return target;
}

size_t TokenAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TokenAttachmentArchive)
  size_t total_size = 0;

  // required .TSWP.UIGraphicalAttachment super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference expressionNode = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expressionnode_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TokenAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenAttachmentArchive::GetClassData() const { return &_class_data_; }

void TokenAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TokenAttachmentArchive *>(to)->MergeFrom(
      static_cast<const TokenAttachmentArchive &>(from));
}


void TokenAttachmentArchive::MergeFrom(const TokenAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TokenAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSWP::UIGraphicalAttachment::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_expressionnode()->::TSP::Reference::MergeFrom(from._internal_expressionnode());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenAttachmentArchive::CopyFrom(const TokenAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TokenAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenAttachmentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_expressionnode()) {
    if (!expressionnode_->IsInitialized()) return false;
  }
  return true;
}

void TokenAttachmentArchive::InternalSwap(TokenAttachmentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenAttachmentArchive, expressionnode_)
      + sizeof(TokenAttachmentArchive::expressionnode_)
      - PROTOBUF_FIELD_OFFSET(TokenAttachmentArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenAttachmentArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[85]);
}

// ===================================================================

class FormulaArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaArchive>()._has_bits_);
  static const ::TSP::Reference& expressiontree(const FormulaArchive* msg);
  static void set_has_expressiontree(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
FormulaArchive::_Internal::expressiontree(const FormulaArchive* msg) {
  return *msg->expressiontree_;
}
void FormulaArchive::clear_expressiontree() {
  if (expressiontree_ != nullptr) expressiontree_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FormulaArchive::FormulaArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.FormulaArchive)
}
FormulaArchive::FormulaArchive(const FormulaArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expressiontree()) {
    expressiontree_ = new ::TSP::Reference(*from.expressiontree_);
  } else {
    expressiontree_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.FormulaArchive)
}

inline void FormulaArchive::SharedCtor() {
expressiontree_ = nullptr;
}

FormulaArchive::~FormulaArchive() {
  // @@protoc_insertion_point(destructor:TST.FormulaArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FormulaArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete expressiontree_;
}

void FormulaArchive::ArenaDtor(void* object) {
  FormulaArchive* _this = reinterpret_cast< FormulaArchive* >(object);
  (void)_this;
}
void FormulaArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormulaArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormulaArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FormulaArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(expressiontree_ != nullptr);
    expressiontree_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference expressionTree = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expressiontree(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormulaArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FormulaArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference expressionTree = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::expressiontree(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FormulaArchive)
  return target;
}

size_t FormulaArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FormulaArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference expressionTree = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expressiontree_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FormulaArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaArchive::GetClassData() const { return &_class_data_; }

void FormulaArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FormulaArchive *>(to)->MergeFrom(
      static_cast<const FormulaArchive &>(from));
}


void FormulaArchive::MergeFrom(const FormulaArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.FormulaArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_expressiontree()) {
    _internal_mutable_expressiontree()->::TSP::Reference::MergeFrom(from._internal_expressiontree());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaArchive::CopyFrom(const FormulaArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FormulaArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaArchive::IsInitialized() const {
  if (_internal_has_expressiontree()) {
    if (!expressiontree_->IsInitialized()) return false;
  }
  return true;
}

void FormulaArchive::InternalSwap(FormulaArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(expressiontree_, other->expressiontree_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[86]);
}

// ===================================================================

class ExpressionNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ExpressionNodeArchive>()._has_bits_);
  static void set_has_first_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void ExpressionNodeArchive::clear_children() {
  children_.Clear();
}
ExpressionNodeArchive::ExpressionNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  children_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ExpressionNodeArchive)
}
ExpressionNodeArchive::ExpressionNodeArchive(const ExpressionNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      children_(from.children_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&first_index_, &from.first_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_index_) -
    reinterpret_cast<char*>(&first_index_)) + sizeof(last_index_));
  // @@protoc_insertion_point(copy_constructor:TST.ExpressionNodeArchive)
}

inline void ExpressionNodeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&first_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_index_) -
    reinterpret_cast<char*>(&first_index_)) + sizeof(last_index_));
}

ExpressionNodeArchive::~ExpressionNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.ExpressionNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExpressionNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExpressionNodeArchive::ArenaDtor(void* object) {
  ExpressionNodeArchive* _this = reinterpret_cast< ExpressionNodeArchive* >(object);
  (void)_this;
}
void ExpressionNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpressionNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExpressionNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ExpressionNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&first_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_index_) -
        reinterpret_cast<char*>(&first_index_)) + sizeof(last_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpressionNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference children = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 first_index = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_first_index(&has_bits);
          first_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 last_index = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_last_index(&has_bits);
          last_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpressionNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ExpressionNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference children = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_children(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 first_index = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_first_index(), target);
  }

  // optional uint64 last_index = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ExpressionNodeArchive)
  return target;
}

size_t ExpressionNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ExpressionNodeArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference children = 1;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 first_index = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_first_index());
    }

    // optional uint64 last_index = 3 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_last_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpressionNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExpressionNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpressionNodeArchive::GetClassData() const { return &_class_data_; }

void ExpressionNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ExpressionNodeArchive *>(to)->MergeFrom(
      static_cast<const ExpressionNodeArchive &>(from));
}


void ExpressionNodeArchive::MergeFrom(const ExpressionNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ExpressionNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      first_index_ = from.first_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_index_ = from.last_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpressionNodeArchive::CopyFrom(const ExpressionNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ExpressionNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressionNodeArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(children_)) return false;
  return true;
}

void ExpressionNodeArchive::InternalSwap(ExpressionNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  children_.InternalSwap(&other->children_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExpressionNodeArchive, last_index_)
      + sizeof(ExpressionNodeArchive::last_index_)
      - PROTOBUF_FIELD_OFFSET(ExpressionNodeArchive, first_index_)>(
          reinterpret_cast<char*>(&first_index_),
          reinterpret_cast<char*>(&other->first_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpressionNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[87]);
}

// ===================================================================

class BooleanNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BooleanNodeArchive>()._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const BooleanNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
BooleanNodeArchive::_Internal::super(const BooleanNodeArchive* msg) {
  return *msg->super_;
}
BooleanNodeArchive::BooleanNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.BooleanNodeArchive)
}
BooleanNodeArchive::BooleanNodeArchive(const BooleanNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::ExpressionNodeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:TST.BooleanNodeArchive)
}

inline void BooleanNodeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&super_)) + sizeof(value_));
}

BooleanNodeArchive::~BooleanNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.BooleanNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BooleanNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void BooleanNodeArchive::ArenaDtor(void* object) {
  BooleanNodeArchive* _this = reinterpret_cast< BooleanNodeArchive* >(object);
  (void)_this;
}
void BooleanNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BooleanNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BooleanNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.BooleanNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  value_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BooleanNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BooleanNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.BooleanNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required bool value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.BooleanNodeArchive)
  return target;
}

size_t BooleanNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.BooleanNodeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_value()) {
    // required bool value = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t BooleanNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.BooleanNodeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required bool value = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BooleanNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BooleanNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BooleanNodeArchive::GetClassData() const { return &_class_data_; }

void BooleanNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BooleanNodeArchive *>(to)->MergeFrom(
      static_cast<const BooleanNodeArchive &>(from));
}


void BooleanNodeArchive::MergeFrom(const BooleanNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.BooleanNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BooleanNodeArchive::CopyFrom(const BooleanNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.BooleanNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BooleanNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void BooleanNodeArchive::InternalSwap(BooleanNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BooleanNodeArchive, value_)
      + sizeof(BooleanNodeArchive::value_)
      - PROTOBUF_FIELD_OFFSET(BooleanNodeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BooleanNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[88]);
}

// ===================================================================

class NumberNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NumberNodeArchive>()._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const NumberNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_decimal_low(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_decimal_high(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
NumberNodeArchive::_Internal::super(const NumberNodeArchive* msg) {
  return *msg->super_;
}
NumberNodeArchive::NumberNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.NumberNodeArchive)
}
NumberNodeArchive::NumberNodeArchive(const NumberNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::ExpressionNodeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&number_, &from.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&decimal_high_) -
    reinterpret_cast<char*>(&number_)) + sizeof(decimal_high_));
  // @@protoc_insertion_point(copy_constructor:TST.NumberNodeArchive)
}

inline void NumberNodeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&decimal_high_) -
    reinterpret_cast<char*>(&super_)) + sizeof(decimal_high_));
}

NumberNodeArchive::~NumberNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.NumberNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NumberNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void NumberNodeArchive::ArenaDtor(void* object) {
  NumberNodeArchive* _this = reinterpret_cast< NumberNodeArchive* >(object);
  (void)_this;
}
void NumberNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NumberNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NumberNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.NumberNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&decimal_high_) -
        reinterpret_cast<char*>(&number_)) + sizeof(decimal_high_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumberNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_number(&has_bits);
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 decimal_low = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_decimal_low(&has_bits);
          decimal_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 decimal_high = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_decimal_high(&has_bits);
          decimal_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NumberNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.NumberNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional double number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_number(), target);
  }

  // optional uint64 decimal_low = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_decimal_low(), target);
  }

  // optional uint64 decimal_high = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_decimal_high(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.NumberNodeArchive)
  return target;
}

size_t NumberNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.NumberNodeArchive)
  size_t total_size = 0;

  // required .TST.ExpressionNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional double number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint64 decimal_low = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_decimal_low());
    }

    // optional uint64 decimal_high = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_decimal_high());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NumberNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NumberNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NumberNodeArchive::GetClassData() const { return &_class_data_; }

void NumberNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NumberNodeArchive *>(to)->MergeFrom(
      static_cast<const NumberNodeArchive &>(from));
}


void NumberNodeArchive::MergeFrom(const NumberNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.NumberNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      number_ = from.number_;
    }
    if (cached_has_bits & 0x00000004u) {
      decimal_low_ = from.decimal_low_;
    }
    if (cached_has_bits & 0x00000008u) {
      decimal_high_ = from.decimal_high_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NumberNodeArchive::CopyFrom(const NumberNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.NumberNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void NumberNodeArchive::InternalSwap(NumberNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NumberNodeArchive, decimal_high_)
      + sizeof(NumberNodeArchive::decimal_high_)
      - PROTOBUF_FIELD_OFFSET(NumberNodeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NumberNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[89]);
}

// ===================================================================

class StringNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StringNodeArchive>()._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const StringNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
StringNodeArchive::_Internal::super(const StringNodeArchive* msg) {
  return *msg->super_;
}
StringNodeArchive::StringNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.StringNodeArchive)
}
StringNodeArchive::StringNodeArchive(const StringNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TST::ExpressionNodeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.StringNodeArchive)
}

inline void StringNodeArchive::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
super_ = nullptr;
}

StringNodeArchive::~StringNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.StringNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StringNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void StringNodeArchive::ArenaDtor(void* object) {
  StringNodeArchive* _this = reinterpret_cast< StringNodeArchive* >(object);
  (void)_this;
}
void StringNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StringNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.StringNodeArchive.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StringNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.StringNodeArchive.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StringNodeArchive)
  return target;
}

size_t StringNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.StringNodeArchive)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_super()) {
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  return total_size;
}
size_t StringNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StringNodeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StringNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringNodeArchive::GetClassData() const { return &_class_data_; }

void StringNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StringNodeArchive *>(to)->MergeFrom(
      static_cast<const StringNodeArchive &>(from));
}


void StringNodeArchive::MergeFrom(const StringNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.StringNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from._internal_super());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringNodeArchive::CopyFrom(const StringNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StringNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void StringNodeArchive::InternalSwap(StringNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[90]);
}

// ===================================================================

class IdentifierNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<IdentifierNodeArchive>()._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const IdentifierNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
IdentifierNodeArchive::_Internal::super(const IdentifierNodeArchive* msg) {
  return *msg->super_;
}
IdentifierNodeArchive::IdentifierNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.IdentifierNodeArchive)
}
IdentifierNodeArchive::IdentifierNodeArchive(const IdentifierNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TST::ExpressionNodeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  symbol_ = from.symbol_;
  // @@protoc_insertion_point(copy_constructor:TST.IdentifierNodeArchive)
}

inline void IdentifierNodeArchive::SharedCtor() {
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&symbol_) -
    reinterpret_cast<char*>(&super_)) + sizeof(symbol_));
}

IdentifierNodeArchive::~IdentifierNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.IdentifierNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IdentifierNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void IdentifierNodeArchive::ArenaDtor(void* object) {
  IdentifierNodeArchive* _this = reinterpret_cast< IdentifierNodeArchive* >(object);
  (void)_this;
}
void IdentifierNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IdentifierNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IdentifierNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.IdentifierNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  symbol_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdentifierNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.IdentifierNodeArchive.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_symbol(&has_bits);
          symbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IdentifierNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.IdentifierNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional string identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.IdentifierNodeArchive.identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identifier(), target);
  }

  // optional uint32 symbol = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_symbol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.IdentifierNodeArchive)
  return target;
}

size_t IdentifierNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.IdentifierNodeArchive)
  size_t total_size = 0;

  // required .TST.ExpressionNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string identifier = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  // optional uint32 symbol = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_symbol());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdentifierNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IdentifierNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdentifierNodeArchive::GetClassData() const { return &_class_data_; }

void IdentifierNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<IdentifierNodeArchive *>(to)->MergeFrom(
      static_cast<const IdentifierNodeArchive &>(from));
}


void IdentifierNodeArchive::MergeFrom(const IdentifierNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.IdentifierNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      symbol_ = from.symbol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdentifierNodeArchive::CopyFrom(const IdentifierNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.IdentifierNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentifierNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void IdentifierNodeArchive::InternalSwap(IdentifierNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &identifier_, GetArenaForAllocation(),
      &other->identifier_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IdentifierNodeArchive, symbol_)
      + sizeof(IdentifierNodeArchive::symbol_)
      - PROTOBUF_FIELD_OFFSET(IdentifierNodeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IdentifierNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[91]);
}

// ===================================================================

class ArrayNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ArrayNodeArchive>()._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const ArrayNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
ArrayNodeArchive::_Internal::super(const ArrayNodeArchive* msg) {
  return *msg->super_;
}
ArrayNodeArchive::ArrayNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ArrayNodeArchive)
}
ArrayNodeArchive::ArrayNodeArchive(const ArrayNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::ExpressionNodeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&columns_, &from.columns_,
    static_cast<size_t>(reinterpret_cast<char*>(&rows_) -
    reinterpret_cast<char*>(&columns_)) + sizeof(rows_));
  // @@protoc_insertion_point(copy_constructor:TST.ArrayNodeArchive)
}

inline void ArrayNodeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rows_) -
    reinterpret_cast<char*>(&super_)) + sizeof(rows_));
}

ArrayNodeArchive::~ArrayNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.ArrayNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ArrayNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ArrayNodeArchive::ArenaDtor(void* object) {
  ArrayNodeArchive* _this = reinterpret_cast< ArrayNodeArchive* >(object);
  (void)_this;
}
void ArrayNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArrayNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ArrayNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ArrayNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&columns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rows_) -
        reinterpret_cast<char*>(&columns_)) + sizeof(rows_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArrayNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_columns(&has_bits);
          columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rows(&has_bits);
          rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArrayNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ArrayNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 columns = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_columns(), target);
  }

  // optional uint32 rows = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ArrayNodeArchive)
  return target;
}

size_t ArrayNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ArrayNodeArchive)
  size_t total_size = 0;

  // required .TST.ExpressionNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 columns = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_columns());
    }

    // optional uint32 rows = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rows());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArrayNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ArrayNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArrayNodeArchive::GetClassData() const { return &_class_data_; }

void ArrayNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ArrayNodeArchive *>(to)->MergeFrom(
      static_cast<const ArrayNodeArchive &>(from));
}


void ArrayNodeArchive::MergeFrom(const ArrayNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ArrayNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      columns_ = from.columns_;
    }
    if (cached_has_bits & 0x00000004u) {
      rows_ = from.rows_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArrayNodeArchive::CopyFrom(const ArrayNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ArrayNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ArrayNodeArchive::InternalSwap(ArrayNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArrayNodeArchive, rows_)
      + sizeof(ArrayNodeArchive::rows_)
      - PROTOBUF_FIELD_OFFSET(ArrayNodeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[92]);
}

// ===================================================================

class ListNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ListNodeArchive>()._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const ListNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
ListNodeArchive::_Internal::super(const ListNodeArchive* msg) {
  return *msg->super_;
}
ListNodeArchive::ListNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ListNodeArchive)
}
ListNodeArchive::ListNodeArchive(const ListNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::ExpressionNodeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.ListNodeArchive)
}

inline void ListNodeArchive::SharedCtor() {
super_ = nullptr;
}

ListNodeArchive::~ListNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.ListNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ListNodeArchive::ArenaDtor(void* object) {
  ListNodeArchive* _this = reinterpret_cast< ListNodeArchive* >(object);
  (void)_this;
}
void ListNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ListNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ListNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ListNodeArchive)
  return target;
}

size_t ListNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ListNodeArchive)
  size_t total_size = 0;

  // required .TST.ExpressionNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListNodeArchive::GetClassData() const { return &_class_data_; }

void ListNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListNodeArchive *>(to)->MergeFrom(
      static_cast<const ListNodeArchive &>(from));
}


void ListNodeArchive::MergeFrom(const ListNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ListNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListNodeArchive::CopyFrom(const ListNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ListNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ListNodeArchive::InternalSwap(ListNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[93]);
}

// ===================================================================

class OperatorNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<OperatorNodeArchive>()._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const OperatorNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_operatorchar(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
OperatorNodeArchive::_Internal::super(const OperatorNodeArchive* msg) {
  return *msg->super_;
}
OperatorNodeArchive::OperatorNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.OperatorNodeArchive)
}
OperatorNodeArchive::OperatorNodeArchive(const OperatorNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::ExpressionNodeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  operatorchar_ = from.operatorchar_;
  // @@protoc_insertion_point(copy_constructor:TST.OperatorNodeArchive)
}

inline void OperatorNodeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&operatorchar_) -
    reinterpret_cast<char*>(&super_)) + sizeof(operatorchar_));
}

OperatorNodeArchive::~OperatorNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.OperatorNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperatorNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void OperatorNodeArchive::ArenaDtor(void* object) {
  OperatorNodeArchive* _this = reinterpret_cast< OperatorNodeArchive* >(object);
  (void)_this;
}
void OperatorNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperatorNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperatorNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.OperatorNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  operatorchar_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperatorNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 operatorChar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_operatorchar(&has_bits);
          operatorchar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperatorNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.OperatorNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required uint32 operatorChar = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_operatorchar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.OperatorNodeArchive)
  return target;
}

size_t OperatorNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.OperatorNodeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_operatorchar()) {
    // required uint32 operatorChar = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_operatorchar());
  }

  return total_size;
}
size_t OperatorNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.OperatorNodeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 operatorChar = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_operatorchar());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperatorNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperatorNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperatorNodeArchive::GetClassData() const { return &_class_data_; }

void OperatorNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OperatorNodeArchive *>(to)->MergeFrom(
      static_cast<const OperatorNodeArchive &>(from));
}


void OperatorNodeArchive::MergeFrom(const OperatorNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.OperatorNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      operatorchar_ = from.operatorchar_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperatorNodeArchive::CopyFrom(const OperatorNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.OperatorNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatorNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void OperatorNodeArchive::InternalSwap(OperatorNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperatorNodeArchive, operatorchar_)
      + sizeof(OperatorNodeArchive::operatorchar_)
      - PROTOBUF_FIELD_OFFSET(OperatorNodeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperatorNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[94]);
}

// ===================================================================

class PostfixOperatorNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PostfixOperatorNodeArchive>()._has_bits_);
  static const ::TST::OperatorNodeArchive& super(const PostfixOperatorNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::OperatorNodeArchive&
PostfixOperatorNodeArchive::_Internal::super(const PostfixOperatorNodeArchive* msg) {
  return *msg->super_;
}
PostfixOperatorNodeArchive::PostfixOperatorNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.PostfixOperatorNodeArchive)
}
PostfixOperatorNodeArchive::PostfixOperatorNodeArchive(const PostfixOperatorNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::OperatorNodeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.PostfixOperatorNodeArchive)
}

inline void PostfixOperatorNodeArchive::SharedCtor() {
super_ = nullptr;
}

PostfixOperatorNodeArchive::~PostfixOperatorNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.PostfixOperatorNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostfixOperatorNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void PostfixOperatorNodeArchive::ArenaDtor(void* object) {
  PostfixOperatorNodeArchive* _this = reinterpret_cast< PostfixOperatorNodeArchive* >(object);
  (void)_this;
}
void PostfixOperatorNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostfixOperatorNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostfixOperatorNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.PostfixOperatorNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostfixOperatorNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.OperatorNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostfixOperatorNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.PostfixOperatorNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.OperatorNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.PostfixOperatorNodeArchive)
  return target;
}

size_t PostfixOperatorNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.PostfixOperatorNodeArchive)
  size_t total_size = 0;

  // required .TST.OperatorNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostfixOperatorNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostfixOperatorNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostfixOperatorNodeArchive::GetClassData() const { return &_class_data_; }

void PostfixOperatorNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PostfixOperatorNodeArchive *>(to)->MergeFrom(
      static_cast<const PostfixOperatorNodeArchive &>(from));
}


void PostfixOperatorNodeArchive::MergeFrom(const PostfixOperatorNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.PostfixOperatorNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TST::OperatorNodeArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostfixOperatorNodeArchive::CopyFrom(const PostfixOperatorNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.PostfixOperatorNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostfixOperatorNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void PostfixOperatorNodeArchive::InternalSwap(PostfixOperatorNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostfixOperatorNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[95]);
}

// ===================================================================

class PrefixOperatorNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PrefixOperatorNodeArchive>()._has_bits_);
  static const ::TST::OperatorNodeArchive& super(const PrefixOperatorNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::OperatorNodeArchive&
PrefixOperatorNodeArchive::_Internal::super(const PrefixOperatorNodeArchive* msg) {
  return *msg->super_;
}
PrefixOperatorNodeArchive::PrefixOperatorNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.PrefixOperatorNodeArchive)
}
PrefixOperatorNodeArchive::PrefixOperatorNodeArchive(const PrefixOperatorNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::OperatorNodeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.PrefixOperatorNodeArchive)
}

inline void PrefixOperatorNodeArchive::SharedCtor() {
super_ = nullptr;
}

PrefixOperatorNodeArchive::~PrefixOperatorNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.PrefixOperatorNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PrefixOperatorNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void PrefixOperatorNodeArchive::ArenaDtor(void* object) {
  PrefixOperatorNodeArchive* _this = reinterpret_cast< PrefixOperatorNodeArchive* >(object);
  (void)_this;
}
void PrefixOperatorNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrefixOperatorNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrefixOperatorNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.PrefixOperatorNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrefixOperatorNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.OperatorNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrefixOperatorNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.PrefixOperatorNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.OperatorNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.PrefixOperatorNodeArchive)
  return target;
}

size_t PrefixOperatorNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.PrefixOperatorNodeArchive)
  size_t total_size = 0;

  // required .TST.OperatorNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrefixOperatorNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PrefixOperatorNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrefixOperatorNodeArchive::GetClassData() const { return &_class_data_; }

void PrefixOperatorNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PrefixOperatorNodeArchive *>(to)->MergeFrom(
      static_cast<const PrefixOperatorNodeArchive &>(from));
}


void PrefixOperatorNodeArchive::MergeFrom(const PrefixOperatorNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.PrefixOperatorNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TST::OperatorNodeArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrefixOperatorNodeArchive::CopyFrom(const PrefixOperatorNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.PrefixOperatorNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrefixOperatorNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void PrefixOperatorNodeArchive::InternalSwap(PrefixOperatorNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrefixOperatorNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[96]);
}

// ===================================================================

class FunctionNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionNodeArchive>()._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const FunctionNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_functionindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_invalidfunctionname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
FunctionNodeArchive::_Internal::super(const FunctionNodeArchive* msg) {
  return *msg->super_;
}
FunctionNodeArchive::FunctionNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.FunctionNodeArchive)
}
FunctionNodeArchive::FunctionNodeArchive(const FunctionNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalidfunctionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_invalidfunctionname()) {
    invalidfunctionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invalidfunctionname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TST::ExpressionNodeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  functionindex_ = from.functionindex_;
  // @@protoc_insertion_point(copy_constructor:TST.FunctionNodeArchive)
}

inline void FunctionNodeArchive::SharedCtor() {
invalidfunctionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&functionindex_) -
    reinterpret_cast<char*>(&super_)) + sizeof(functionindex_));
}

FunctionNodeArchive::~FunctionNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.FunctionNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  invalidfunctionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void FunctionNodeArchive::ArenaDtor(void* object) {
  FunctionNodeArchive* _this = reinterpret_cast< FunctionNodeArchive* >(object);
  (void)_this;
}
void FunctionNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FunctionNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      invalidfunctionname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  functionindex_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 functionIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_functionindex(&has_bits);
          functionindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string invalidFunctionName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_invalidfunctionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.FunctionNodeArchive.invalidFunctionName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FunctionNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FunctionNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required uint32 functionIndex = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_functionindex(), target);
  }

  // optional string invalidFunctionName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invalidfunctionname().data(), static_cast<int>(this->_internal_invalidfunctionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.FunctionNodeArchive.invalidFunctionName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_invalidfunctionname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FunctionNodeArchive)
  return target;
}

size_t FunctionNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.FunctionNodeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_functionindex()) {
    // required uint32 functionIndex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_functionindex());
  }

  return total_size;
}
size_t FunctionNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FunctionNodeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 functionIndex = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_functionindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string invalidFunctionName = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invalidfunctionname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionNodeArchive::GetClassData() const { return &_class_data_; }

void FunctionNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FunctionNodeArchive *>(to)->MergeFrom(
      static_cast<const FunctionNodeArchive &>(from));
}


void FunctionNodeArchive::MergeFrom(const FunctionNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.FunctionNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_invalidfunctionname(from._internal_invalidfunctionname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      functionindex_ = from.functionindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionNodeArchive::CopyFrom(const FunctionNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FunctionNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void FunctionNodeArchive::InternalSwap(FunctionNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &invalidfunctionname_, GetArenaForAllocation(),
      &other->invalidfunctionname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionNodeArchive, functionindex_)
      + sizeof(FunctionNodeArchive::functionindex_)
      - PROTOBUF_FIELD_OFFSET(FunctionNodeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[97]);
}

// ===================================================================

class FunctionEndNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionEndNodeArchive>()._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const FunctionEndNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
FunctionEndNodeArchive::_Internal::super(const FunctionEndNodeArchive* msg) {
  return *msg->super_;
}
FunctionEndNodeArchive::FunctionEndNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.FunctionEndNodeArchive)
}
FunctionEndNodeArchive::FunctionEndNodeArchive(const FunctionEndNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::ExpressionNodeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.FunctionEndNodeArchive)
}

inline void FunctionEndNodeArchive::SharedCtor() {
super_ = nullptr;
}

FunctionEndNodeArchive::~FunctionEndNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.FunctionEndNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionEndNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void FunctionEndNodeArchive::ArenaDtor(void* object) {
  FunctionEndNodeArchive* _this = reinterpret_cast< FunctionEndNodeArchive* >(object);
  (void)_this;
}
void FunctionEndNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionEndNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionEndNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FunctionEndNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionEndNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FunctionEndNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FunctionEndNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FunctionEndNodeArchive)
  return target;
}

size_t FunctionEndNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FunctionEndNodeArchive)
  size_t total_size = 0;

  // required .TST.ExpressionNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionEndNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionEndNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionEndNodeArchive::GetClassData() const { return &_class_data_; }

void FunctionEndNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FunctionEndNodeArchive *>(to)->MergeFrom(
      static_cast<const FunctionEndNodeArchive &>(from));
}


void FunctionEndNodeArchive::MergeFrom(const FunctionEndNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.FunctionEndNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionEndNodeArchive::CopyFrom(const FunctionEndNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FunctionEndNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionEndNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void FunctionEndNodeArchive::InternalSwap(FunctionEndNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionEndNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[98]);
}

// ===================================================================

class DateNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DateNodeArchive>()._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const DateNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
DateNodeArchive::_Internal::super(const DateNodeArchive* msg) {
  return *msg->super_;
}
DateNodeArchive::DateNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.DateNodeArchive)
}
DateNodeArchive::DateNodeArchive(const DateNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_format()) {
    format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_format(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TST::ExpressionNodeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.DateNodeArchive)
}

inline void DateNodeArchive::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
super_ = nullptr;
}

DateNodeArchive::~DateNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.DateNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DateNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void DateNodeArchive::ArenaDtor(void* object) {
  DateNodeArchive* _this = reinterpret_cast< DateNodeArchive* >(object);
  (void)_this;
}
void DateNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DateNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DateNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.DateNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DateNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.DateNodeArchive.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.DateNodeArchive.format");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DateNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.DateNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.DateNodeArchive.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // optional string format = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.DateNodeArchive.format");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.DateNodeArchive)
  return target;
}

size_t DateNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.DateNodeArchive)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_super()) {
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  return total_size;
}
size_t DateNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.DateNodeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string format = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DateNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DateNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DateNodeArchive::GetClassData() const { return &_class_data_; }

void DateNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DateNodeArchive *>(to)->MergeFrom(
      static_cast<const DateNodeArchive &>(from));
}


void DateNodeArchive::MergeFrom(const DateNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.DateNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_format(from._internal_format());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from._internal_super());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DateNodeArchive::CopyFrom(const DateNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.DateNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void DateNodeArchive::InternalSwap(DateNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &format_, GetArenaForAllocation(),
      &other->format_, other->GetArenaForAllocation()
  );
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DateNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[99]);
}

// ===================================================================

class ReferenceNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceNodeArchive>()._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const ReferenceNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RangeReferenceArchive& rangereference(const ReferenceNodeArchive* msg);
  static void set_has_rangereference(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preserve_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_hosttableid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellReferenceArchive& host_cell_ref(const ReferenceNodeArchive* msg);
  static void set_has_host_cell_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::UUID& table_uid(const ReferenceNodeArchive* msg);
  static void set_has_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUIDCoordArchive& range_top_left(const ReferenceNodeArchive* msg);
  static void set_has_range_top_left(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::UUIDCoordArchive& range_bottom_right(const ReferenceNodeArchive* msg);
  static void set_has_range_bottom_right(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::CategoryReferenceArchive& category_ref(const ReferenceNodeArchive* msg);
  static void set_has_category_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::UUIDRectArchive& uid_range_rect(const ReferenceNodeArchive* msg);
  static void set_has_uid_range_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000202) ^ 0x00000202) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
ReferenceNodeArchive::_Internal::super(const ReferenceNodeArchive* msg) {
  return *msg->super_;
}
const ::TSCE::RangeReferenceArchive&
ReferenceNodeArchive::_Internal::rangereference(const ReferenceNodeArchive* msg) {
  return *msg->rangereference_;
}
const ::TSCE::CellReferenceArchive&
ReferenceNodeArchive::_Internal::host_cell_ref(const ReferenceNodeArchive* msg) {
  return *msg->host_cell_ref_;
}
const ::TSP::UUID&
ReferenceNodeArchive::_Internal::table_uid(const ReferenceNodeArchive* msg) {
  return *msg->table_uid_;
}
const ::TSP::UUIDCoordArchive&
ReferenceNodeArchive::_Internal::range_top_left(const ReferenceNodeArchive* msg) {
  return *msg->range_top_left_;
}
const ::TSP::UUIDCoordArchive&
ReferenceNodeArchive::_Internal::range_bottom_right(const ReferenceNodeArchive* msg) {
  return *msg->range_bottom_right_;
}
const ::TSCE::CategoryReferenceArchive&
ReferenceNodeArchive::_Internal::category_ref(const ReferenceNodeArchive* msg) {
  return *msg->category_ref_;
}
const ::TSP::UUIDRectArchive&
ReferenceNodeArchive::_Internal::uid_range_rect(const ReferenceNodeArchive* msg) {
  return *msg->uid_range_rect_;
}
void ReferenceNodeArchive::clear_rangereference() {
  if (rangereference_ != nullptr) rangereference_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ReferenceNodeArchive::clear_host_cell_ref() {
  if (host_cell_ref_ != nullptr) host_cell_ref_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ReferenceNodeArchive::clear_table_uid() {
  if (table_uid_ != nullptr) table_uid_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ReferenceNodeArchive::clear_range_top_left() {
  if (range_top_left_ != nullptr) range_top_left_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ReferenceNodeArchive::clear_range_bottom_right() {
  if (range_bottom_right_ != nullptr) range_bottom_right_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ReferenceNodeArchive::clear_category_ref() {
  if (category_ref_ != nullptr) category_ref_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ReferenceNodeArchive::clear_uid_range_rect() {
  if (uid_range_rect_ != nullptr) uid_range_rect_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
ReferenceNodeArchive::ReferenceNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ReferenceNodeArchive)
}
ReferenceNodeArchive::ReferenceNodeArchive(const ReferenceNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hosttableid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hosttableid()) {
    hosttableid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hosttableid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TST::ExpressionNodeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_rangereference()) {
    rangereference_ = new ::TSCE::RangeReferenceArchive(*from.rangereference_);
  } else {
    rangereference_ = nullptr;
  }
  if (from._internal_has_table_uid()) {
    table_uid_ = new ::TSP::UUID(*from.table_uid_);
  } else {
    table_uid_ = nullptr;
  }
  if (from._internal_has_range_top_left()) {
    range_top_left_ = new ::TSP::UUIDCoordArchive(*from.range_top_left_);
  } else {
    range_top_left_ = nullptr;
  }
  if (from._internal_has_range_bottom_right()) {
    range_bottom_right_ = new ::TSP::UUIDCoordArchive(*from.range_bottom_right_);
  } else {
    range_bottom_right_ = nullptr;
  }
  if (from._internal_has_category_ref()) {
    category_ref_ = new ::TSCE::CategoryReferenceArchive(*from.category_ref_);
  } else {
    category_ref_ = nullptr;
  }
  if (from._internal_has_uid_range_rect()) {
    uid_range_rect_ = new ::TSP::UUIDRectArchive(*from.uid_range_rect_);
  } else {
    uid_range_rect_ = nullptr;
  }
  if (from._internal_has_host_cell_ref()) {
    host_cell_ref_ = new ::TSCE::CellReferenceArchive(*from.host_cell_ref_);
  } else {
    host_cell_ref_ = nullptr;
  }
  preserve_flags_ = from.preserve_flags_;
  // @@protoc_insertion_point(copy_constructor:TST.ReferenceNodeArchive)
}

inline void ReferenceNodeArchive::SharedCtor() {
hosttableid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&preserve_flags_) -
    reinterpret_cast<char*>(&super_)) + sizeof(preserve_flags_));
}

ReferenceNodeArchive::~ReferenceNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.ReferenceNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReferenceNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hosttableid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete rangereference_;
  if (this != internal_default_instance()) delete table_uid_;
  if (this != internal_default_instance()) delete range_top_left_;
  if (this != internal_default_instance()) delete range_bottom_right_;
  if (this != internal_default_instance()) delete category_ref_;
  if (this != internal_default_instance()) delete uid_range_rect_;
  if (this != internal_default_instance()) delete host_cell_ref_;
}

void ReferenceNodeArchive::ArenaDtor(void* object) {
  ReferenceNodeArchive* _this = reinterpret_cast< ReferenceNodeArchive* >(object);
  (void)_this;
}
void ReferenceNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferenceNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReferenceNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ReferenceNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      hosttableid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rangereference_ != nullptr);
      rangereference_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(table_uid_ != nullptr);
      table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(range_top_left_ != nullptr);
      range_top_left_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(range_bottom_right_ != nullptr);
      range_bottom_right_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(category_ref_ != nullptr);
      category_ref_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(uid_range_rect_ != nullptr);
      uid_range_rect_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(host_cell_ref_ != nullptr);
    host_cell_ref_->Clear();
  }
  preserve_flags_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.RangeReferenceArchive rangeReference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rangereference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 preserve_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_preserve_flags(&has_bits);
          preserve_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hostTableID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hosttableid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.ReferenceNodeArchive.hostTableID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID table_uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDCoordArchive range_top_left = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_top_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDCoordArchive range_bottom_right = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_bottom_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CategoryReferenceArchive category_ref = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDRectArchive uid_range_rect = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_uid_range_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellReferenceArchive host_cell_ref = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_cell_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ReferenceNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSCE.RangeReferenceArchive rangeReference = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rangereference(this), target, stream);
  }

  // required uint32 preserve_flags = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_preserve_flags(), target);
  }

  // optional string hostTableID = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hosttableid().data(), static_cast<int>(this->_internal_hosttableid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.ReferenceNodeArchive.hostTableID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hosttableid(), target);
  }

  // optional .TSP.UUID table_uid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::table_uid(this), target, stream);
  }

  // optional .TSP.UUIDCoordArchive range_top_left = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::range_top_left(this), target, stream);
  }

  // optional .TSP.UUIDCoordArchive range_bottom_right = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::range_bottom_right(this), target, stream);
  }

  // optional .TSCE.CategoryReferenceArchive category_ref = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::category_ref(this), target, stream);
  }

  // optional .TSP.UUIDRectArchive uid_range_rect = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::uid_range_rect(this), target, stream);
  }

  // optional .TSCE.CellReferenceArchive host_cell_ref = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::host_cell_ref(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ReferenceNodeArchive)
  return target;
}

size_t ReferenceNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.ReferenceNodeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_preserve_flags()) {
    // required uint32 preserve_flags = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_preserve_flags());
  }

  return total_size;
}
size_t ReferenceNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ReferenceNodeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000202) ^ 0x00000202) == 0) {  // All required fields are present.
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 preserve_flags = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_preserve_flags());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string hostTableID = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hosttableid());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional .TSCE.RangeReferenceArchive rangeReference = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rangereference_);
    }

    // optional .TSP.UUID table_uid = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_uid_);
    }

    // optional .TSP.UUIDCoordArchive range_top_left = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *range_top_left_);
    }

    // optional .TSP.UUIDCoordArchive range_bottom_right = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *range_bottom_right_);
    }

    // optional .TSCE.CategoryReferenceArchive category_ref = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_ref_);
    }

    // optional .TSP.UUIDRectArchive uid_range_rect = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uid_range_rect_);
    }

  }
  // optional .TSCE.CellReferenceArchive host_cell_ref = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_cell_ref_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReferenceNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceNodeArchive::GetClassData() const { return &_class_data_; }

void ReferenceNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ReferenceNodeArchive *>(to)->MergeFrom(
      static_cast<const ReferenceNodeArchive &>(from));
}


void ReferenceNodeArchive::MergeFrom(const ReferenceNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ReferenceNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hosttableid(from._internal_hosttableid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rangereference()->::TSCE::RangeReferenceArchive::MergeFrom(from._internal_rangereference());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_table_uid()->::TSP::UUID::MergeFrom(from._internal_table_uid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_range_top_left()->::TSP::UUIDCoordArchive::MergeFrom(from._internal_range_top_left());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_range_bottom_right()->::TSP::UUIDCoordArchive::MergeFrom(from._internal_range_bottom_right());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_category_ref()->::TSCE::CategoryReferenceArchive::MergeFrom(from._internal_category_ref());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_uid_range_rect()->::TSP::UUIDRectArchive::MergeFrom(from._internal_uid_range_rect());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_host_cell_ref()->::TSCE::CellReferenceArchive::MergeFrom(from._internal_host_cell_ref());
    }
    if (cached_has_bits & 0x00000200u) {
      preserve_flags_ = from.preserve_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferenceNodeArchive::CopyFrom(const ReferenceNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ReferenceNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_rangereference()) {
    if (!rangereference_->IsInitialized()) return false;
  }
  if (_internal_has_table_uid()) {
    if (!table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_range_top_left()) {
    if (!range_top_left_->IsInitialized()) return false;
  }
  if (_internal_has_range_bottom_right()) {
    if (!range_bottom_right_->IsInitialized()) return false;
  }
  if (_internal_has_category_ref()) {
    if (!category_ref_->IsInitialized()) return false;
  }
  if (_internal_has_uid_range_rect()) {
    if (!uid_range_rect_->IsInitialized()) return false;
  }
  if (_internal_has_host_cell_ref()) {
    if (!host_cell_ref_->IsInitialized()) return false;
  }
  return true;
}

void ReferenceNodeArchive::InternalSwap(ReferenceNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hosttableid_, GetArenaForAllocation(),
      &other->hosttableid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferenceNodeArchive, preserve_flags_)
      + sizeof(ReferenceNodeArchive::preserve_flags_)
      - PROTOBUF_FIELD_OFFSET(ReferenceNodeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[100]);
}

// ===================================================================

class DurationNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DurationNodeArchive>()._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const DurationNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timeinterval(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_smallest(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_largest(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
DurationNodeArchive::_Internal::super(const DurationNodeArchive* msg) {
  return *msg->super_;
}
DurationNodeArchive::DurationNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.DurationNodeArchive)
}
DurationNodeArchive::DurationNodeArchive(const DurationNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::ExpressionNodeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&timeinterval_, &from.timeinterval_,
    static_cast<size_t>(reinterpret_cast<char*>(&style_) -
    reinterpret_cast<char*>(&timeinterval_)) + sizeof(style_));
  // @@protoc_insertion_point(copy_constructor:TST.DurationNodeArchive)
}

inline void DurationNodeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&style_) -
    reinterpret_cast<char*>(&super_)) + sizeof(style_));
}

DurationNodeArchive::~DurationNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.DurationNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DurationNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void DurationNodeArchive::ArenaDtor(void* object) {
  DurationNodeArchive* _this = reinterpret_cast< DurationNodeArchive* >(object);
  (void)_this;
}
void DurationNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DurationNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DurationNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.DurationNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&timeinterval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&style_) -
        reinterpret_cast<char*>(&timeinterval_)) + sizeof(style_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DurationNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double timeinterval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_timeinterval(&has_bits);
          timeinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint32 smallest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_smallest(&has_bits);
          smallest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 largest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_largest(&has_bits);
          largest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_style(&has_bits);
          style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DurationNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.DurationNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required double timeinterval = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_timeinterval(), target);
  }

  // required uint32 smallest = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_smallest(), target);
  }

  // required uint32 largest = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_largest(), target);
  }

  // required uint32 style = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_style(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.DurationNodeArchive)
  return target;
}

size_t DurationNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.DurationNodeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_timeinterval()) {
    // required double timeinterval = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_smallest()) {
    // required uint32 smallest = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_smallest());
  }

  if (_internal_has_largest()) {
    // required uint32 largest = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_largest());
  }

  if (_internal_has_style()) {
    // required uint32 style = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_style());
  }

  return total_size;
}
size_t DurationNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.DurationNodeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required double timeinterval = 2;
    total_size += 1 + 8;

    // required uint32 smallest = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_smallest());

    // required uint32 largest = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_largest());

    // required uint32 style = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_style());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DurationNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DurationNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DurationNodeArchive::GetClassData() const { return &_class_data_; }

void DurationNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DurationNodeArchive *>(to)->MergeFrom(
      static_cast<const DurationNodeArchive &>(from));
}


void DurationNodeArchive::MergeFrom(const DurationNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.DurationNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      timeinterval_ = from.timeinterval_;
    }
    if (cached_has_bits & 0x00000004u) {
      smallest_ = from.smallest_;
    }
    if (cached_has_bits & 0x00000008u) {
      largest_ = from.largest_;
    }
    if (cached_has_bits & 0x00000010u) {
      style_ = from.style_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DurationNodeArchive::CopyFrom(const DurationNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.DurationNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DurationNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void DurationNodeArchive::InternalSwap(DurationNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DurationNodeArchive, style_)
      + sizeof(DurationNodeArchive::style_)
      - PROTOBUF_FIELD_OFFSET(DurationNodeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DurationNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[101]);
}

// ===================================================================

class ArgumentPlaceholderNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ArgumentPlaceholderNodeArchive>()._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const ArgumentPlaceholderNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_functionindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_argumentindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
ArgumentPlaceholderNodeArchive::_Internal::super(const ArgumentPlaceholderNodeArchive* msg) {
  return *msg->super_;
}
ArgumentPlaceholderNodeArchive::ArgumentPlaceholderNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ArgumentPlaceholderNodeArchive)
}
ArgumentPlaceholderNodeArchive::ArgumentPlaceholderNodeArchive(const ArgumentPlaceholderNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::ExpressionNodeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&functionindex_, &from.functionindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&functionindex_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:TST.ArgumentPlaceholderNodeArchive)
}

inline void ArgumentPlaceholderNodeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&super_)) + sizeof(mode_));
}

ArgumentPlaceholderNodeArchive::~ArgumentPlaceholderNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.ArgumentPlaceholderNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ArgumentPlaceholderNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ArgumentPlaceholderNodeArchive::ArenaDtor(void* object) {
  ArgumentPlaceholderNodeArchive* _this = reinterpret_cast< ArgumentPlaceholderNodeArchive* >(object);
  (void)_this;
}
void ArgumentPlaceholderNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArgumentPlaceholderNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ArgumentPlaceholderNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ArgumentPlaceholderNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&functionindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mode_) -
        reinterpret_cast<char*>(&functionindex_)) + sizeof(mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArgumentPlaceholderNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 functionIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_functionindex(&has_bits);
          functionindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 argumentIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_argumentindex(&has_bits);
          argumentindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mode(&has_bits);
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArgumentPlaceholderNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ArgumentPlaceholderNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 functionIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_functionindex(), target);
  }

  // optional uint32 argumentIndex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_argumentindex(), target);
  }

  // optional uint32 mode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ArgumentPlaceholderNodeArchive)
  return target;
}

size_t ArgumentPlaceholderNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ArgumentPlaceholderNodeArchive)
  size_t total_size = 0;

  // required .TST.ExpressionNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional uint32 functionIndex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_functionindex());
    }

    // optional uint32 argumentIndex = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_argumentindex());
    }

    // optional uint32 mode = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArgumentPlaceholderNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ArgumentPlaceholderNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArgumentPlaceholderNodeArchive::GetClassData() const { return &_class_data_; }

void ArgumentPlaceholderNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ArgumentPlaceholderNodeArchive *>(to)->MergeFrom(
      static_cast<const ArgumentPlaceholderNodeArchive &>(from));
}


void ArgumentPlaceholderNodeArchive::MergeFrom(const ArgumentPlaceholderNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ArgumentPlaceholderNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      functionindex_ = from.functionindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      argumentindex_ = from.argumentindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArgumentPlaceholderNodeArchive::CopyFrom(const ArgumentPlaceholderNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ArgumentPlaceholderNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArgumentPlaceholderNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ArgumentPlaceholderNodeArchive::InternalSwap(ArgumentPlaceholderNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArgumentPlaceholderNodeArchive, mode_)
      + sizeof(ArgumentPlaceholderNodeArchive::mode_)
      - PROTOBUF_FIELD_OFFSET(ArgumentPlaceholderNodeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArgumentPlaceholderNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[102]);
}

// ===================================================================

class EmptyExpressionNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<EmptyExpressionNodeArchive>()._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const EmptyExpressionNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
EmptyExpressionNodeArchive::_Internal::super(const EmptyExpressionNodeArchive* msg) {
  return *msg->super_;
}
EmptyExpressionNodeArchive::EmptyExpressionNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.EmptyExpressionNodeArchive)
}
EmptyExpressionNodeArchive::EmptyExpressionNodeArchive(const EmptyExpressionNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::ExpressionNodeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.EmptyExpressionNodeArchive)
}

inline void EmptyExpressionNodeArchive::SharedCtor() {
super_ = nullptr;
}

EmptyExpressionNodeArchive::~EmptyExpressionNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.EmptyExpressionNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EmptyExpressionNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void EmptyExpressionNodeArchive::ArenaDtor(void* object) {
  EmptyExpressionNodeArchive* _this = reinterpret_cast< EmptyExpressionNodeArchive* >(object);
  (void)_this;
}
void EmptyExpressionNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmptyExpressionNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EmptyExpressionNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.EmptyExpressionNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmptyExpressionNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmptyExpressionNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.EmptyExpressionNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.EmptyExpressionNodeArchive)
  return target;
}

size_t EmptyExpressionNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.EmptyExpressionNodeArchive)
  size_t total_size = 0;

  // required .TST.ExpressionNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmptyExpressionNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EmptyExpressionNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmptyExpressionNodeArchive::GetClassData() const { return &_class_data_; }

void EmptyExpressionNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EmptyExpressionNodeArchive *>(to)->MergeFrom(
      static_cast<const EmptyExpressionNodeArchive &>(from));
}


void EmptyExpressionNodeArchive::MergeFrom(const EmptyExpressionNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.EmptyExpressionNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmptyExpressionNodeArchive::CopyFrom(const EmptyExpressionNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.EmptyExpressionNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyExpressionNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void EmptyExpressionNodeArchive::InternalSwap(EmptyExpressionNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyExpressionNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[103]);
}

// ===================================================================

class LetNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LetNodeArchive>()._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const LetNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_whitespace_after_let(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_whitespace_after_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_whitespace_after_equals(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_whitespace_after_delimiter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
LetNodeArchive::_Internal::super(const LetNodeArchive* msg) {
  return *msg->super_;
}
LetNodeArchive::LetNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.LetNodeArchive)
}
LetNodeArchive::LetNodeArchive(const LetNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  whitespace_after_let_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_whitespace_after_let()) {
    whitespace_after_let_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_whitespace_after_let(), 
      GetArenaForAllocation());
  }
  whitespace_after_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_whitespace_after_identifier()) {
    whitespace_after_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_whitespace_after_identifier(), 
      GetArenaForAllocation());
  }
  whitespace_after_equals_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_whitespace_after_equals()) {
    whitespace_after_equals_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_whitespace_after_equals(), 
      GetArenaForAllocation());
  }
  whitespace_after_delimiter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_whitespace_after_delimiter()) {
    whitespace_after_delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_whitespace_after_delimiter(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TST::ExpressionNodeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.LetNodeArchive)
}

inline void LetNodeArchive::SharedCtor() {
whitespace_after_let_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
whitespace_after_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
whitespace_after_equals_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
whitespace_after_delimiter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
super_ = nullptr;
}

LetNodeArchive::~LetNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.LetNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LetNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  whitespace_after_let_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  whitespace_after_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  whitespace_after_equals_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  whitespace_after_delimiter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void LetNodeArchive::ArenaDtor(void* object) {
  LetNodeArchive* _this = reinterpret_cast< LetNodeArchive* >(object);
  (void)_this;
}
void LetNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LetNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LetNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.LetNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      whitespace_after_let_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      whitespace_after_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      whitespace_after_equals_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      whitespace_after_delimiter_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LetNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string whitespace_after_let = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_whitespace_after_let();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.LetNodeArchive.whitespace_after_let");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string whitespace_after_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_whitespace_after_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.LetNodeArchive.whitespace_after_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string whitespace_after_equals = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_whitespace_after_equals();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.LetNodeArchive.whitespace_after_equals");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string whitespace_after_delimiter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_whitespace_after_delimiter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.LetNodeArchive.whitespace_after_delimiter");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LetNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.LetNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional string whitespace_after_let = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_whitespace_after_let().data(), static_cast<int>(this->_internal_whitespace_after_let().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.LetNodeArchive.whitespace_after_let");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_whitespace_after_let(), target);
  }

  // optional string whitespace_after_identifier = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_whitespace_after_identifier().data(), static_cast<int>(this->_internal_whitespace_after_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.LetNodeArchive.whitespace_after_identifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_whitespace_after_identifier(), target);
  }

  // optional string whitespace_after_equals = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_whitespace_after_equals().data(), static_cast<int>(this->_internal_whitespace_after_equals().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.LetNodeArchive.whitespace_after_equals");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_whitespace_after_equals(), target);
  }

  // optional string whitespace_after_delimiter = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_whitespace_after_delimiter().data(), static_cast<int>(this->_internal_whitespace_after_delimiter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.LetNodeArchive.whitespace_after_delimiter");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_whitespace_after_delimiter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.LetNodeArchive)
  return target;
}

size_t LetNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.LetNodeArchive)
  size_t total_size = 0;

  // required .TST.ExpressionNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string whitespace_after_let = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_whitespace_after_let());
    }

    // optional string whitespace_after_identifier = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_whitespace_after_identifier());
    }

    // optional string whitespace_after_equals = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_whitespace_after_equals());
    }

    // optional string whitespace_after_delimiter = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_whitespace_after_delimiter());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LetNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LetNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LetNodeArchive::GetClassData() const { return &_class_data_; }

void LetNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LetNodeArchive *>(to)->MergeFrom(
      static_cast<const LetNodeArchive &>(from));
}


void LetNodeArchive::MergeFrom(const LetNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.LetNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_whitespace_after_let(from._internal_whitespace_after_let());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_whitespace_after_identifier(from._internal_whitespace_after_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_whitespace_after_equals(from._internal_whitespace_after_equals());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_whitespace_after_delimiter(from._internal_whitespace_after_delimiter());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from._internal_super());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LetNodeArchive::CopyFrom(const LetNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.LetNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LetNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void LetNodeArchive::InternalSwap(LetNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &whitespace_after_let_, GetArenaForAllocation(),
      &other->whitespace_after_let_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &whitespace_after_identifier_, GetArenaForAllocation(),
      &other->whitespace_after_identifier_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &whitespace_after_equals_, GetArenaForAllocation(),
      &other->whitespace_after_equals_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &whitespace_after_delimiter_, GetArenaForAllocation(),
      &other->whitespace_after_delimiter_, other->GetArenaForAllocation()
  );
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LetNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[104]);
}

// ===================================================================

class InNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InNodeArchive>()._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const InNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
InNodeArchive::_Internal::super(const InNodeArchive* msg) {
  return *msg->super_;
}
InNodeArchive::InNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.InNodeArchive)
}
InNodeArchive::InNodeArchive(const InNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::ExpressionNodeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.InNodeArchive)
}

inline void InNodeArchive::SharedCtor() {
super_ = nullptr;
}

InNodeArchive::~InNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.InNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void InNodeArchive::ArenaDtor(void* object) {
  InNodeArchive* _this = reinterpret_cast< InNodeArchive* >(object);
  (void)_this;
}
void InNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.InNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.InNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.InNodeArchive)
  return target;
}

size_t InNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.InNodeArchive)
  size_t total_size = 0;

  // required .TST.ExpressionNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InNodeArchive::GetClassData() const { return &_class_data_; }

void InNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InNodeArchive *>(to)->MergeFrom(
      static_cast<const InNodeArchive &>(from));
}


void InNodeArchive::MergeFrom(const InNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.InNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InNodeArchive::CopyFrom(const InNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.InNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void InNodeArchive::InternalSwap(InNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[105]);
}

// ===================================================================

class VariableNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<VariableNodeArchive>()._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const VariableNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
VariableNodeArchive::_Internal::super(const VariableNodeArchive* msg) {
  return *msg->super_;
}
VariableNodeArchive::VariableNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.VariableNodeArchive)
}
VariableNodeArchive::VariableNodeArchive(const VariableNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TST::ExpressionNodeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  symbol_ = from.symbol_;
  // @@protoc_insertion_point(copy_constructor:TST.VariableNodeArchive)
}

inline void VariableNodeArchive::SharedCtor() {
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&symbol_) -
    reinterpret_cast<char*>(&super_)) + sizeof(symbol_));
}

VariableNodeArchive::~VariableNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.VariableNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VariableNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void VariableNodeArchive::ArenaDtor(void* object) {
  VariableNodeArchive* _this = reinterpret_cast< VariableNodeArchive* >(object);
  (void)_this;
}
void VariableNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VariableNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VariableNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.VariableNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  symbol_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariableNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.VariableNodeArchive.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_symbol(&has_bits);
          symbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VariableNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.VariableNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required string identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.VariableNodeArchive.identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identifier(), target);
  }

  // required uint32 symbol = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_symbol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.VariableNodeArchive)
  return target;
}

size_t VariableNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.VariableNodeArchive)
  size_t total_size = 0;

  if (_internal_has_identifier()) {
    // required string identifier = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  if (_internal_has_super()) {
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_symbol()) {
    // required uint32 symbol = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_symbol());
  }

  return total_size;
}
size_t VariableNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.VariableNodeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string identifier = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());

    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 symbol = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_symbol());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VariableNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VariableNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VariableNodeArchive::GetClassData() const { return &_class_data_; }

void VariableNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VariableNodeArchive *>(to)->MergeFrom(
      static_cast<const VariableNodeArchive &>(from));
}


void VariableNodeArchive::MergeFrom(const VariableNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.VariableNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      symbol_ = from.symbol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VariableNodeArchive::CopyFrom(const VariableNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.VariableNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void VariableNodeArchive::InternalSwap(VariableNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &identifier_, GetArenaForAllocation(),
      &other->identifier_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VariableNodeArchive, symbol_)
      + sizeof(VariableNodeArchive::symbol_)
      - PROTOBUF_FIELD_OFFSET(VariableNodeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VariableNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[106]);
}

// ===================================================================

class LayoutHintArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LayoutHintArchive>()._has_bits_);
  static void set_has_isvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TST::CellRange& cellrange(const LayoutHintArchive* msg);
  static void set_has_cellrange(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CellID& hintid(const LayoutHintArchive* msg);
  static void set_has_hintid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Size& maximumsize(const LayoutHintArchive* msg);
  static void set_has_maximumsize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_partitionposition(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_horizontal(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Size& effectivesize(const LayoutHintArchive* msg);
  static void set_has_effectivesize(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_partitioningpass(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000074) ^ 0x00000074) != 0;
  }
};

const ::TST::CellRange&
LayoutHintArchive::_Internal::cellrange(const LayoutHintArchive* msg) {
  return *msg->cellrange_;
}
const ::TST::CellID&
LayoutHintArchive::_Internal::hintid(const LayoutHintArchive* msg) {
  return *msg->hintid_;
}
const ::TSP::Size&
LayoutHintArchive::_Internal::maximumsize(const LayoutHintArchive* msg) {
  return *msg->maximumsize_;
}
const ::TSP::Size&
LayoutHintArchive::_Internal::effectivesize(const LayoutHintArchive* msg) {
  return *msg->effectivesize_;
}
void LayoutHintArchive::clear_maximumsize() {
  if (maximumsize_ != nullptr) maximumsize_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void LayoutHintArchive::clear_effectivesize() {
  if (effectivesize_ != nullptr) effectivesize_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
LayoutHintArchive::LayoutHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.LayoutHintArchive)
}
LayoutHintArchive::LayoutHintArchive(const LayoutHintArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cellrange()) {
    cellrange_ = new ::TST::CellRange(*from.cellrange_);
  } else {
    cellrange_ = nullptr;
  }
  if (from._internal_has_hintid()) {
    hintid_ = new ::TST::CellID(*from.hintid_);
  } else {
    hintid_ = nullptr;
  }
  if (from._internal_has_maximumsize()) {
    maximumsize_ = new ::TSP::Size(*from.maximumsize_);
  } else {
    maximumsize_ = nullptr;
  }
  if (from._internal_has_effectivesize()) {
    effectivesize_ = new ::TSP::Size(*from.effectivesize_);
  } else {
    effectivesize_ = nullptr;
  }
  ::memcpy(&isvalid_, &from.isvalid_,
    static_cast<size_t>(reinterpret_cast<char*>(&partitioningpass_) -
    reinterpret_cast<char*>(&isvalid_)) + sizeof(partitioningpass_));
  // @@protoc_insertion_point(copy_constructor:TST.LayoutHintArchive)
}

inline void LayoutHintArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cellrange_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&partitioningpass_) -
    reinterpret_cast<char*>(&cellrange_)) + sizeof(partitioningpass_));
}

LayoutHintArchive::~LayoutHintArchive() {
  // @@protoc_insertion_point(destructor:TST.LayoutHintArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LayoutHintArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cellrange_;
  if (this != internal_default_instance()) delete hintid_;
  if (this != internal_default_instance()) delete maximumsize_;
  if (this != internal_default_instance()) delete effectivesize_;
}

void LayoutHintArchive::ArenaDtor(void* object) {
  LayoutHintArchive* _this = reinterpret_cast< LayoutHintArchive* >(object);
  (void)_this;
}
void LayoutHintArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LayoutHintArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LayoutHintArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.LayoutHintArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cellrange_ != nullptr);
      cellrange_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(hintid_ != nullptr);
      hintid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(maximumsize_ != nullptr);
      maximumsize_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(effectivesize_ != nullptr);
      effectivesize_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&isvalid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&partitioningpass_) -
        reinterpret_cast<char*>(&isvalid_)) + sizeof(partitioningpass_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayoutHintArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool isValid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_isvalid(&has_bits);
          isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellRange cellRange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cellrange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellID hintID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hintid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Size maximumSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_maximumsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 partitionPosition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_partitionposition(&has_bits);
          partitionposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool horizontal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_horizontal(&has_bits);
          horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size effectiveSize = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_effectivesize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 partitioningPass = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_partitioningpass(&has_bits);
          partitioningpass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LayoutHintArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.LayoutHintArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool isValid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isvalid(), target);
  }

  // optional .TST.CellRange cellRange = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cellrange(this), target, stream);
  }

  // optional .TST.CellID hintID = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hintid(this), target, stream);
  }

  // required .TSP.Size maximumSize = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::maximumsize(this), target, stream);
  }

  // required uint32 partitionPosition = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_partitionposition(), target);
  }

  // required bool horizontal = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_horizontal(), target);
  }

  // optional .TSP.Size effectiveSize = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::effectivesize(this), target, stream);
  }

  // optional uint32 partitioningPass = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_partitioningpass(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.LayoutHintArchive)
  return target;
}

size_t LayoutHintArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.LayoutHintArchive)
  size_t total_size = 0;

  if (_internal_has_maximumsize()) {
    // required .TSP.Size maximumSize = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maximumsize_);
  }

  if (_internal_has_isvalid()) {
    // required bool isValid = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_horizontal()) {
    // required bool horizontal = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_partitionposition()) {
    // required uint32 partitionPosition = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_partitionposition());
  }

  return total_size;
}
size_t LayoutHintArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.LayoutHintArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000074) ^ 0x00000074) == 0) {  // All required fields are present.
    // required .TSP.Size maximumSize = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maximumsize_);

    // required bool isValid = 1;
    total_size += 1 + 1;

    // required bool horizontal = 6;
    total_size += 1 + 1;

    // required uint32 partitionPosition = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_partitionposition());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TST.CellRange cellRange = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cellrange_);
    }

    // optional .TST.CellID hintID = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hintid_);
    }

  }
  // optional .TSP.Size effectiveSize = 7;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *effectivesize_);
  }

  // optional uint32 partitioningPass = 8;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_partitioningpass());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LayoutHintArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LayoutHintArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LayoutHintArchive::GetClassData() const { return &_class_data_; }

void LayoutHintArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LayoutHintArchive *>(to)->MergeFrom(
      static_cast<const LayoutHintArchive &>(from));
}


void LayoutHintArchive::MergeFrom(const LayoutHintArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.LayoutHintArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cellrange()->::TST::CellRange::MergeFrom(from._internal_cellrange());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_hintid()->::TST::CellID::MergeFrom(from._internal_hintid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_maximumsize()->::TSP::Size::MergeFrom(from._internal_maximumsize());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_effectivesize()->::TSP::Size::MergeFrom(from._internal_effectivesize());
    }
    if (cached_has_bits & 0x00000010u) {
      isvalid_ = from.isvalid_;
    }
    if (cached_has_bits & 0x00000020u) {
      horizontal_ = from.horizontal_;
    }
    if (cached_has_bits & 0x00000040u) {
      partitionposition_ = from.partitionposition_;
    }
    if (cached_has_bits & 0x00000080u) {
      partitioningpass_ = from.partitioningpass_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LayoutHintArchive::CopyFrom(const LayoutHintArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.LayoutHintArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutHintArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_cellrange()) {
    if (!cellrange_->IsInitialized()) return false;
  }
  if (_internal_has_hintid()) {
    if (!hintid_->IsInitialized()) return false;
  }
  if (_internal_has_maximumsize()) {
    if (!maximumsize_->IsInitialized()) return false;
  }
  if (_internal_has_effectivesize()) {
    if (!effectivesize_->IsInitialized()) return false;
  }
  return true;
}

void LayoutHintArchive::InternalSwap(LayoutHintArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LayoutHintArchive, partitioningpass_)
      + sizeof(LayoutHintArchive::partitioningpass_)
      - PROTOBUF_FIELD_OFFSET(LayoutHintArchive, cellrange_)>(
          reinterpret_cast<char*>(&cellrange_),
          reinterpret_cast<char*>(&other->cellrange_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LayoutHintArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[107]);
}

// ===================================================================

class CompletionTokenAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CompletionTokenAttachmentArchive>()._has_bits_);
  static const ::TST::TokenAttachmentArchive& super(const CompletionTokenAttachmentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_completiontext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_caretposition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prefixstart(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TST::TokenAttachmentArchive&
CompletionTokenAttachmentArchive::_Internal::super(const CompletionTokenAttachmentArchive* msg) {
  return *msg->super_;
}
CompletionTokenAttachmentArchive::CompletionTokenAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CompletionTokenAttachmentArchive)
}
CompletionTokenAttachmentArchive::CompletionTokenAttachmentArchive(const CompletionTokenAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  completiontext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_completiontext()) {
    completiontext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_completiontext(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TST::TokenAttachmentArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&caretposition_, &from.caretposition_,
    static_cast<size_t>(reinterpret_cast<char*>(&prefixstart_) -
    reinterpret_cast<char*>(&caretposition_)) + sizeof(prefixstart_));
  // @@protoc_insertion_point(copy_constructor:TST.CompletionTokenAttachmentArchive)
}

inline void CompletionTokenAttachmentArchive::SharedCtor() {
completiontext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prefixstart_) -
    reinterpret_cast<char*>(&super_)) + sizeof(prefixstart_));
}

CompletionTokenAttachmentArchive::~CompletionTokenAttachmentArchive() {
  // @@protoc_insertion_point(destructor:TST.CompletionTokenAttachmentArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CompletionTokenAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  completiontext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void CompletionTokenAttachmentArchive::ArenaDtor(void* object) {
  CompletionTokenAttachmentArchive* _this = reinterpret_cast< CompletionTokenAttachmentArchive* >(object);
  (void)_this;
}
void CompletionTokenAttachmentArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompletionTokenAttachmentArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompletionTokenAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CompletionTokenAttachmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      completiontext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&caretposition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prefixstart_) -
        reinterpret_cast<char*>(&caretposition_)) + sizeof(prefixstart_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompletionTokenAttachmentArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TokenAttachmentArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string completionText = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_completiontext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.CompletionTokenAttachmentArchive.completionText");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 caretPosition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_caretposition(&has_bits);
          caretposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prefixStart = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_prefixstart(&has_bits);
          prefixstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompletionTokenAttachmentArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CompletionTokenAttachmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TokenAttachmentArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional string completionText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_completiontext().data(), static_cast<int>(this->_internal_completiontext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CompletionTokenAttachmentArchive.completionText");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_completiontext(), target);
  }

  // optional uint32 caretPosition = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_caretposition(), target);
  }

  // optional uint32 prefixStart = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_prefixstart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CompletionTokenAttachmentArchive)
  return target;
}

size_t CompletionTokenAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CompletionTokenAttachmentArchive)
  size_t total_size = 0;

  // required .TST.TokenAttachmentArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string completionText = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_completiontext());
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional uint32 caretPosition = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_caretposition());
    }

    // optional uint32 prefixStart = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prefixstart());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompletionTokenAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CompletionTokenAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompletionTokenAttachmentArchive::GetClassData() const { return &_class_data_; }

void CompletionTokenAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CompletionTokenAttachmentArchive *>(to)->MergeFrom(
      static_cast<const CompletionTokenAttachmentArchive &>(from));
}


void CompletionTokenAttachmentArchive::MergeFrom(const CompletionTokenAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CompletionTokenAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_completiontext(from._internal_completiontext());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TST::TokenAttachmentArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      caretposition_ = from.caretposition_;
    }
    if (cached_has_bits & 0x00000008u) {
      prefixstart_ = from.prefixstart_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompletionTokenAttachmentArchive::CopyFrom(const CompletionTokenAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CompletionTokenAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompletionTokenAttachmentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CompletionTokenAttachmentArchive::InternalSwap(CompletionTokenAttachmentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &completiontext_, GetArenaForAllocation(),
      &other->completiontext_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompletionTokenAttachmentArchive, prefixstart_)
      + sizeof(CompletionTokenAttachmentArchive::prefixstart_)
      - PROTOBUF_FIELD_OFFSET(CompletionTokenAttachmentArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompletionTokenAttachmentArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[108]);
}

// ===================================================================

class HiddenStateFormulaOwnerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HiddenStateFormulaOwnerArchive>()._has_bits_);
  static const ::TSP::CFUUIDArchive& owner_id(const HiddenStateFormulaOwnerArchive* msg);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_needs_to_update_filter_set_for_import(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::CFUUIDArchive&
HiddenStateFormulaOwnerArchive::_Internal::owner_id(const HiddenStateFormulaOwnerArchive* msg) {
  return *msg->owner_id_;
}
void HiddenStateFormulaOwnerArchive::clear_owner_id() {
  if (owner_id_ != nullptr) owner_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void HiddenStateFormulaOwnerArchive::clear_threshold_value() {
  threshold_value_.Clear();
}
HiddenStateFormulaOwnerArchive::HiddenStateFormulaOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  threshold_value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.HiddenStateFormulaOwnerArchive)
}
HiddenStateFormulaOwnerArchive::HiddenStateFormulaOwnerArchive(const HiddenStateFormulaOwnerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      threshold_value_(from.threshold_value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_id()) {
    owner_id_ = new ::TSP::CFUUIDArchive(*from.owner_id_);
  } else {
    owner_id_ = nullptr;
  }
  needs_to_update_filter_set_for_import_ = from.needs_to_update_filter_set_for_import_;
  // @@protoc_insertion_point(copy_constructor:TST.HiddenStateFormulaOwnerArchive)
}

inline void HiddenStateFormulaOwnerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&needs_to_update_filter_set_for_import_) -
    reinterpret_cast<char*>(&owner_id_)) + sizeof(needs_to_update_filter_set_for_import_));
}

HiddenStateFormulaOwnerArchive::~HiddenStateFormulaOwnerArchive() {
  // @@protoc_insertion_point(destructor:TST.HiddenStateFormulaOwnerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HiddenStateFormulaOwnerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete owner_id_;
}

void HiddenStateFormulaOwnerArchive::ArenaDtor(void* object) {
  HiddenStateFormulaOwnerArchive* _this = reinterpret_cast< HiddenStateFormulaOwnerArchive* >(object);
  (void)_this;
}
void HiddenStateFormulaOwnerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HiddenStateFormulaOwnerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HiddenStateFormulaOwnerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HiddenStateFormulaOwnerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  threshold_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_id_ != nullptr);
    owner_id_->Clear();
  }
  needs_to_update_filter_set_for_import_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HiddenStateFormulaOwnerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.CFUUIDArchive owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.CellValueArchive threshold_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_threshold_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool needs_to_update_filter_set_for_import = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_needs_to_update_filter_set_for_import(&has_bits);
          needs_to_update_filter_set_for_import_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HiddenStateFormulaOwnerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HiddenStateFormulaOwnerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.CFUUIDArchive owner_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::owner_id(this), target, stream);
  }

  // repeated .TSCE.CellValueArchive threshold_value = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_threshold_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_threshold_value(i), target, stream);
  }

  // optional bool needs_to_update_filter_set_for_import = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_needs_to_update_filter_set_for_import(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HiddenStateFormulaOwnerArchive)
  return target;
}

size_t HiddenStateFormulaOwnerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HiddenStateFormulaOwnerArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellValueArchive threshold_value = 2;
  total_size += 1UL * this->_internal_threshold_value_size();
  for (const auto& msg : this->threshold_value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.CFUUIDArchive owner_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *owner_id_);
    }

    // optional bool needs_to_update_filter_set_for_import = 3 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HiddenStateFormulaOwnerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HiddenStateFormulaOwnerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HiddenStateFormulaOwnerArchive::GetClassData() const { return &_class_data_; }

void HiddenStateFormulaOwnerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HiddenStateFormulaOwnerArchive *>(to)->MergeFrom(
      static_cast<const HiddenStateFormulaOwnerArchive &>(from));
}


void HiddenStateFormulaOwnerArchive::MergeFrom(const HiddenStateFormulaOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.HiddenStateFormulaOwnerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  threshold_value_.MergeFrom(from.threshold_value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_owner_id()->::TSP::CFUUIDArchive::MergeFrom(from._internal_owner_id());
    }
    if (cached_has_bits & 0x00000002u) {
      needs_to_update_filter_set_for_import_ = from.needs_to_update_filter_set_for_import_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HiddenStateFormulaOwnerArchive::CopyFrom(const HiddenStateFormulaOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HiddenStateFormulaOwnerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HiddenStateFormulaOwnerArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(threshold_value_)) return false;
  return true;
}

void HiddenStateFormulaOwnerArchive::InternalSwap(HiddenStateFormulaOwnerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  threshold_value_.InternalSwap(&other->threshold_value_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HiddenStateFormulaOwnerArchive, needs_to_update_filter_set_for_import_)
      + sizeof(HiddenStateFormulaOwnerArchive::needs_to_update_filter_set_for_import_)
      - PROTOBUF_FIELD_OFFSET(HiddenStateFormulaOwnerArchive, owner_id_)>(
          reinterpret_cast<char*>(&owner_id_),
          reinterpret_cast<char*>(&other->owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HiddenStateFormulaOwnerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[109]);
}

// ===================================================================

class FormulaStoreArchive_FormulaStorePair::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaStoreArchive_FormulaStorePair>()._has_bits_);
  static void set_has_formula_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::FormulaArchive& formula(const FormulaStoreArchive_FormulaStorePair* msg);
  static void set_has_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::FormulaArchive&
FormulaStoreArchive_FormulaStorePair::_Internal::formula(const FormulaStoreArchive_FormulaStorePair* msg) {
  return *msg->formula_;
}
void FormulaStoreArchive_FormulaStorePair::clear_formula() {
  if (formula_ != nullptr) formula_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FormulaStoreArchive_FormulaStorePair::FormulaStoreArchive_FormulaStorePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.FormulaStoreArchive.FormulaStorePair)
}
FormulaStoreArchive_FormulaStorePair::FormulaStoreArchive_FormulaStorePair(const FormulaStoreArchive_FormulaStorePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_formula()) {
    formula_ = new ::TSCE::FormulaArchive(*from.formula_);
  } else {
    formula_ = nullptr;
  }
  formula_index_ = from.formula_index_;
  // @@protoc_insertion_point(copy_constructor:TST.FormulaStoreArchive.FormulaStorePair)
}

inline void FormulaStoreArchive_FormulaStorePair::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&formula_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&formula_index_) -
    reinterpret_cast<char*>(&formula_)) + sizeof(formula_index_));
}

FormulaStoreArchive_FormulaStorePair::~FormulaStoreArchive_FormulaStorePair() {
  // @@protoc_insertion_point(destructor:TST.FormulaStoreArchive.FormulaStorePair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FormulaStoreArchive_FormulaStorePair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete formula_;
}

void FormulaStoreArchive_FormulaStorePair::ArenaDtor(void* object) {
  FormulaStoreArchive_FormulaStorePair* _this = reinterpret_cast< FormulaStoreArchive_FormulaStorePair* >(object);
  (void)_this;
}
void FormulaStoreArchive_FormulaStorePair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormulaStoreArchive_FormulaStorePair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormulaStoreArchive_FormulaStorePair::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FormulaStoreArchive.FormulaStorePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(formula_ != nullptr);
    formula_->Clear();
  }
  formula_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaStoreArchive_FormulaStorePair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 formula_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_formula_index(&has_bits);
          formula_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.FormulaArchive formula = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormulaStoreArchive_FormulaStorePair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FormulaStoreArchive.FormulaStorePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 formula_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_formula_index(), target);
  }

  // required .TSCE.FormulaArchive formula = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::formula(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FormulaStoreArchive.FormulaStorePair)
  return target;
}

size_t FormulaStoreArchive_FormulaStorePair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.FormulaStoreArchive.FormulaStorePair)
  size_t total_size = 0;

  if (_internal_has_formula()) {
    // required .TSCE.FormulaArchive formula = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formula_);
  }

  if (_internal_has_formula_index()) {
    // required uint32 formula_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_formula_index());
  }

  return total_size;
}
size_t FormulaStoreArchive_FormulaStorePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FormulaStoreArchive.FormulaStorePair)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.FormulaArchive formula = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formula_);

    // required uint32 formula_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_formula_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaStoreArchive_FormulaStorePair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FormulaStoreArchive_FormulaStorePair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaStoreArchive_FormulaStorePair::GetClassData() const { return &_class_data_; }

void FormulaStoreArchive_FormulaStorePair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FormulaStoreArchive_FormulaStorePair *>(to)->MergeFrom(
      static_cast<const FormulaStoreArchive_FormulaStorePair &>(from));
}


void FormulaStoreArchive_FormulaStorePair::MergeFrom(const FormulaStoreArchive_FormulaStorePair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.FormulaStoreArchive.FormulaStorePair)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_formula()->::TSCE::FormulaArchive::MergeFrom(from._internal_formula());
    }
    if (cached_has_bits & 0x00000002u) {
      formula_index_ = from.formula_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaStoreArchive_FormulaStorePair::CopyFrom(const FormulaStoreArchive_FormulaStorePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FormulaStoreArchive.FormulaStorePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaStoreArchive_FormulaStorePair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_formula()) {
    if (!formula_->IsInitialized()) return false;
  }
  return true;
}

void FormulaStoreArchive_FormulaStorePair::InternalSwap(FormulaStoreArchive_FormulaStorePair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaStoreArchive_FormulaStorePair, formula_index_)
      + sizeof(FormulaStoreArchive_FormulaStorePair::formula_index_)
      - PROTOBUF_FIELD_OFFSET(FormulaStoreArchive_FormulaStorePair, formula_)>(
          reinterpret_cast<char*>(&formula_),
          reinterpret_cast<char*>(&other->formula_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaStoreArchive_FormulaStorePair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[110]);
}

// ===================================================================

class FormulaStoreArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaStoreArchive>()._has_bits_);
  static void set_has_next_formula_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FormulaStoreArchive::FormulaStoreArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  formulas_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.FormulaStoreArchive)
}
FormulaStoreArchive::FormulaStoreArchive(const FormulaStoreArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      formulas_(from.formulas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_formula_index_ = from.next_formula_index_;
  // @@protoc_insertion_point(copy_constructor:TST.FormulaStoreArchive)
}

inline void FormulaStoreArchive::SharedCtor() {
next_formula_index_ = 0u;
}

FormulaStoreArchive::~FormulaStoreArchive() {
  // @@protoc_insertion_point(destructor:TST.FormulaStoreArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FormulaStoreArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FormulaStoreArchive::ArenaDtor(void* object) {
  FormulaStoreArchive* _this = reinterpret_cast< FormulaStoreArchive* >(object);
  (void)_this;
}
void FormulaStoreArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormulaStoreArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormulaStoreArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FormulaStoreArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  formulas_.Clear();
  next_formula_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaStoreArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 next_formula_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_next_formula_index(&has_bits);
          next_formula_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.FormulaStoreArchive.FormulaStorePair formulas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formulas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormulaStoreArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FormulaStoreArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 next_formula_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_next_formula_index(), target);
  }

  // repeated .TST.FormulaStoreArchive.FormulaStorePair formulas = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_formulas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_formulas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FormulaStoreArchive)
  return target;
}

size_t FormulaStoreArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FormulaStoreArchive)
  size_t total_size = 0;

  // required uint32 next_formula_index = 2;
  if (_internal_has_next_formula_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_next_formula_index());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.FormulaStoreArchive.FormulaStorePair formulas = 3;
  total_size += 1UL * this->_internal_formulas_size();
  for (const auto& msg : this->formulas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaStoreArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FormulaStoreArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaStoreArchive::GetClassData() const { return &_class_data_; }

void FormulaStoreArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FormulaStoreArchive *>(to)->MergeFrom(
      static_cast<const FormulaStoreArchive &>(from));
}


void FormulaStoreArchive::MergeFrom(const FormulaStoreArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.FormulaStoreArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  formulas_.MergeFrom(from.formulas_);
  if (from._internal_has_next_formula_index()) {
    _internal_set_next_formula_index(from._internal_next_formula_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaStoreArchive::CopyFrom(const FormulaStoreArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FormulaStoreArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaStoreArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(formulas_)) return false;
  return true;
}

void FormulaStoreArchive::InternalSwap(FormulaStoreArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  formulas_.InternalSwap(&other->formulas_);
  swap(next_formula_index_, other->next_formula_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaStoreArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[111]);
}

// ===================================================================

class MergeOperationArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MergeOperationArchive>()._has_bits_);
  static void set_has_merge_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

void MergeOperationArchive::clear_merge_ranges() {
  merge_ranges_.Clear();
}
void MergeOperationArchive::clear_merge_formulas() {
  merge_formulas_.Clear();
}
MergeOperationArchive::MergeOperationArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  merge_ranges_(arena),
  merge_formulas_(arena),
  merge_formula_indexes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.MergeOperationArchive)
}
MergeOperationArchive::MergeOperationArchive(const MergeOperationArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      merge_ranges_(from.merge_ranges_),
      merge_formulas_(from.merge_formulas_),
      merge_formula_indexes_(from.merge_formula_indexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  merge_type_ = from.merge_type_;
  // @@protoc_insertion_point(copy_constructor:TST.MergeOperationArchive)
}

inline void MergeOperationArchive::SharedCtor() {
merge_type_ = 1;
}

MergeOperationArchive::~MergeOperationArchive() {
  // @@protoc_insertion_point(destructor:TST.MergeOperationArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MergeOperationArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MergeOperationArchive::ArenaDtor(void* object) {
  MergeOperationArchive* _this = reinterpret_cast< MergeOperationArchive* >(object);
  (void)_this;
}
void MergeOperationArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MergeOperationArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MergeOperationArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.MergeOperationArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  merge_ranges_.Clear();
  merge_formulas_.Clear();
  merge_formula_indexes_.Clear();
  merge_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeOperationArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.MergeActionArchive merge_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::MergeActionArchive_IsValid(val))) {
            _internal_set_merge_type(static_cast<::TST::MergeActionArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUIDRectArchive merge_ranges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_merge_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaArchive merge_formulas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_merge_formulas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 merge_formula_indexes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_merge_formula_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_merge_formula_indexes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MergeOperationArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.MergeOperationArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.MergeActionArchive merge_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_merge_type(), target);
  }

  // repeated .TSP.UUIDRectArchive merge_ranges = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_merge_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_merge_ranges(i), target, stream);
  }

  // repeated .TSCE.FormulaArchive merge_formulas = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_merge_formulas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_merge_formulas(i), target, stream);
  }

  // repeated uint32 merge_formula_indexes = 4;
  for (int i = 0, n = this->_internal_merge_formula_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_merge_formula_indexes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.MergeOperationArchive)
  return target;
}

size_t MergeOperationArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.MergeOperationArchive)
  size_t total_size = 0;

  // required .TST.MergeActionArchive merge_type = 1;
  if (_internal_has_merge_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_merge_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUIDRectArchive merge_ranges = 2;
  total_size += 1UL * this->_internal_merge_ranges_size();
  for (const auto& msg : this->merge_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.FormulaArchive merge_formulas = 3;
  total_size += 1UL * this->_internal_merge_formulas_size();
  for (const auto& msg : this->merge_formulas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 merge_formula_indexes = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->merge_formula_indexes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_merge_formula_indexes_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MergeOperationArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MergeOperationArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MergeOperationArchive::GetClassData() const { return &_class_data_; }

void MergeOperationArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MergeOperationArchive *>(to)->MergeFrom(
      static_cast<const MergeOperationArchive &>(from));
}


void MergeOperationArchive::MergeFrom(const MergeOperationArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.MergeOperationArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  merge_ranges_.MergeFrom(from.merge_ranges_);
  merge_formulas_.MergeFrom(from.merge_formulas_);
  merge_formula_indexes_.MergeFrom(from.merge_formula_indexes_);
  if (from._internal_has_merge_type()) {
    _internal_set_merge_type(from._internal_merge_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MergeOperationArchive::CopyFrom(const MergeOperationArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.MergeOperationArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeOperationArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(merge_ranges_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(merge_formulas_)) return false;
  return true;
}

void MergeOperationArchive::InternalSwap(MergeOperationArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  merge_ranges_.InternalSwap(&other->merge_ranges_);
  merge_formulas_.InternalSwap(&other->merge_formulas_);
  merge_formula_indexes_.InternalSwap(&other->merge_formula_indexes_);
  swap(merge_type_, other->merge_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeOperationArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[112]);
}

// ===================================================================

class MergeOwnerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MergeOwnerArchive>()._has_bits_);
  static const ::TSP::CFUUIDArchive& owner_id(const MergeOwnerArchive* msg);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::FormulaStoreArchive& formula_store(const MergeOwnerArchive* msg);
  static void set_has_formula_store(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::CFUUIDArchive&
MergeOwnerArchive::_Internal::owner_id(const MergeOwnerArchive* msg) {
  return *msg->owner_id_;
}
const ::TST::FormulaStoreArchive&
MergeOwnerArchive::_Internal::formula_store(const MergeOwnerArchive* msg) {
  return *msg->formula_store_;
}
void MergeOwnerArchive::clear_owner_id() {
  if (owner_id_ != nullptr) owner_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MergeOwnerArchive::MergeOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.MergeOwnerArchive)
}
MergeOwnerArchive::MergeOwnerArchive(const MergeOwnerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_id()) {
    owner_id_ = new ::TSP::CFUUIDArchive(*from.owner_id_);
  } else {
    owner_id_ = nullptr;
  }
  if (from._internal_has_formula_store()) {
    formula_store_ = new ::TST::FormulaStoreArchive(*from.formula_store_);
  } else {
    formula_store_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.MergeOwnerArchive)
}

inline void MergeOwnerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&formula_store_) -
    reinterpret_cast<char*>(&owner_id_)) + sizeof(formula_store_));
}

MergeOwnerArchive::~MergeOwnerArchive() {
  // @@protoc_insertion_point(destructor:TST.MergeOwnerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MergeOwnerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete owner_id_;
  if (this != internal_default_instance()) delete formula_store_;
}

void MergeOwnerArchive::ArenaDtor(void* object) {
  MergeOwnerArchive* _this = reinterpret_cast< MergeOwnerArchive* >(object);
  (void)_this;
}
void MergeOwnerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MergeOwnerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MergeOwnerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.MergeOwnerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(owner_id_ != nullptr);
      owner_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(formula_store_ != nullptr);
      formula_store_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeOwnerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.CFUUIDArchive owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.FormulaStoreArchive formula_store = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_store(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MergeOwnerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.MergeOwnerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.CFUUIDArchive owner_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::owner_id(this), target, stream);
  }

  // optional .TST.FormulaStoreArchive formula_store = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::formula_store(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.MergeOwnerArchive)
  return target;
}

size_t MergeOwnerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.MergeOwnerArchive)
  size_t total_size = 0;

  // required .TSP.CFUUIDArchive owner_id = 1;
  if (_internal_has_owner_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TST.FormulaStoreArchive formula_store = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formula_store_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MergeOwnerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MergeOwnerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MergeOwnerArchive::GetClassData() const { return &_class_data_; }

void MergeOwnerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MergeOwnerArchive *>(to)->MergeFrom(
      static_cast<const MergeOwnerArchive &>(from));
}


void MergeOwnerArchive::MergeFrom(const MergeOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.MergeOwnerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_owner_id()->::TSP::CFUUIDArchive::MergeFrom(from._internal_owner_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_formula_store()->::TST::FormulaStoreArchive::MergeFrom(from._internal_formula_store());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MergeOwnerArchive::CopyFrom(const MergeOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.MergeOwnerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeOwnerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_formula_store()) {
    if (!formula_store_->IsInitialized()) return false;
  }
  return true;
}

void MergeOwnerArchive::InternalSwap(MergeOwnerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MergeOwnerArchive, formula_store_)
      + sizeof(MergeOwnerArchive::formula_store_)
      - PROTOBUF_FIELD_OFFSET(MergeOwnerArchive, owner_id_)>(
          reinterpret_cast<char*>(&owner_id_),
          reinterpret_cast<char*>(&other->owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeOwnerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[113]);
}

// ===================================================================

class PencilAnnotationArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PencilAnnotationArchive>()._has_bits_);
  static const ::TSP::Reference& table_info(const PencilAnnotationArchive* msg);
  static void set_has_table_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& pencil_annotation_storage(const PencilAnnotationArchive* msg);
  static void set_has_pencil_annotation_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
PencilAnnotationArchive::_Internal::table_info(const PencilAnnotationArchive* msg) {
  return *msg->table_info_;
}
const ::TSP::Reference&
PencilAnnotationArchive::_Internal::pencil_annotation_storage(const PencilAnnotationArchive* msg) {
  return *msg->pencil_annotation_storage_;
}
void PencilAnnotationArchive::clear_table_info() {
  if (table_info_ != nullptr) table_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PencilAnnotationArchive::clear_pencil_annotation_storage() {
  if (pencil_annotation_storage_ != nullptr) pencil_annotation_storage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
PencilAnnotationArchive::PencilAnnotationArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.PencilAnnotationArchive)
}
PencilAnnotationArchive::PencilAnnotationArchive(const PencilAnnotationArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_info()) {
    table_info_ = new ::TSP::Reference(*from.table_info_);
  } else {
    table_info_ = nullptr;
  }
  if (from._internal_has_pencil_annotation_storage()) {
    pencil_annotation_storage_ = new ::TSP::Reference(*from.pencil_annotation_storage_);
  } else {
    pencil_annotation_storage_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.PencilAnnotationArchive)
}

inline void PencilAnnotationArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&table_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pencil_annotation_storage_) -
    reinterpret_cast<char*>(&table_info_)) + sizeof(pencil_annotation_storage_));
}

PencilAnnotationArchive::~PencilAnnotationArchive() {
  // @@protoc_insertion_point(destructor:TST.PencilAnnotationArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PencilAnnotationArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete table_info_;
  if (this != internal_default_instance()) delete pencil_annotation_storage_;
}

void PencilAnnotationArchive::ArenaDtor(void* object) {
  PencilAnnotationArchive* _this = reinterpret_cast< PencilAnnotationArchive* >(object);
  (void)_this;
}
void PencilAnnotationArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PencilAnnotationArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PencilAnnotationArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.PencilAnnotationArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(table_info_ != nullptr);
      table_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pencil_annotation_storage_ != nullptr);
      pencil_annotation_storage_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PencilAnnotationArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference table_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference pencil_annotation_storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pencil_annotation_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PencilAnnotationArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.PencilAnnotationArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference table_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::table_info(this), target, stream);
  }

  // optional .TSP.Reference pencil_annotation_storage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pencil_annotation_storage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.PencilAnnotationArchive)
  return target;
}

size_t PencilAnnotationArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.PencilAnnotationArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference table_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_info_);
    }

    // optional .TSP.Reference pencil_annotation_storage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pencil_annotation_storage_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PencilAnnotationArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PencilAnnotationArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PencilAnnotationArchive::GetClassData() const { return &_class_data_; }

void PencilAnnotationArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PencilAnnotationArchive *>(to)->MergeFrom(
      static_cast<const PencilAnnotationArchive &>(from));
}


void PencilAnnotationArchive::MergeFrom(const PencilAnnotationArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.PencilAnnotationArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_table_info()->::TSP::Reference::MergeFrom(from._internal_table_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pencil_annotation_storage()->::TSP::Reference::MergeFrom(from._internal_pencil_annotation_storage());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PencilAnnotationArchive::CopyFrom(const PencilAnnotationArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.PencilAnnotationArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PencilAnnotationArchive::IsInitialized() const {
  if (_internal_has_table_info()) {
    if (!table_info_->IsInitialized()) return false;
  }
  if (_internal_has_pencil_annotation_storage()) {
    if (!pencil_annotation_storage_->IsInitialized()) return false;
  }
  return true;
}

void PencilAnnotationArchive::InternalSwap(PencilAnnotationArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PencilAnnotationArchive, pencil_annotation_storage_)
      + sizeof(PencilAnnotationArchive::pencil_annotation_storage_)
      - PROTOBUF_FIELD_OFFSET(PencilAnnotationArchive, table_info_)>(
          reinterpret_cast<char*>(&table_info_),
          reinterpret_cast<char*>(&other->table_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PencilAnnotationArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[114]);
}

// ===================================================================

class PencilAnnotationOwnerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PencilAnnotationOwnerArchive>()._has_bits_);
  static const ::TSP::CFUUIDArchive& owner_id(const PencilAnnotationOwnerArchive* msg);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::FormulaStoreArchive& formula_store(const PencilAnnotationOwnerArchive* msg);
  static void set_has_formula_store(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::CFUUIDArchive&
PencilAnnotationOwnerArchive::_Internal::owner_id(const PencilAnnotationOwnerArchive* msg) {
  return *msg->owner_id_;
}
const ::TST::FormulaStoreArchive&
PencilAnnotationOwnerArchive::_Internal::formula_store(const PencilAnnotationOwnerArchive* msg) {
  return *msg->formula_store_;
}
void PencilAnnotationOwnerArchive::clear_owner_id() {
  if (owner_id_ != nullptr) owner_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PencilAnnotationOwnerArchive::clear_annotations() {
  annotations_.Clear();
}
PencilAnnotationOwnerArchive::PencilAnnotationOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.PencilAnnotationOwnerArchive)
}
PencilAnnotationOwnerArchive::PencilAnnotationOwnerArchive(const PencilAnnotationOwnerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      annotations_(from.annotations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_id()) {
    owner_id_ = new ::TSP::CFUUIDArchive(*from.owner_id_);
  } else {
    owner_id_ = nullptr;
  }
  if (from._internal_has_formula_store()) {
    formula_store_ = new ::TST::FormulaStoreArchive(*from.formula_store_);
  } else {
    formula_store_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.PencilAnnotationOwnerArchive)
}

inline void PencilAnnotationOwnerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&formula_store_) -
    reinterpret_cast<char*>(&owner_id_)) + sizeof(formula_store_));
}

PencilAnnotationOwnerArchive::~PencilAnnotationOwnerArchive() {
  // @@protoc_insertion_point(destructor:TST.PencilAnnotationOwnerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PencilAnnotationOwnerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete owner_id_;
  if (this != internal_default_instance()) delete formula_store_;
}

void PencilAnnotationOwnerArchive::ArenaDtor(void* object) {
  PencilAnnotationOwnerArchive* _this = reinterpret_cast< PencilAnnotationOwnerArchive* >(object);
  (void)_this;
}
void PencilAnnotationOwnerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PencilAnnotationOwnerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PencilAnnotationOwnerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.PencilAnnotationOwnerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(owner_id_ != nullptr);
      owner_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(formula_store_ != nullptr);
      formula_store_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PencilAnnotationOwnerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.CFUUIDArchive owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.FormulaStoreArchive formula_store = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_store(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference annotations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PencilAnnotationOwnerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.PencilAnnotationOwnerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.CFUUIDArchive owner_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::owner_id(this), target, stream);
  }

  // optional .TST.FormulaStoreArchive formula_store = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::formula_store(this), target, stream);
  }

  // repeated .TSP.Reference annotations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_annotations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.PencilAnnotationOwnerArchive)
  return target;
}

size_t PencilAnnotationOwnerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.PencilAnnotationOwnerArchive)
  size_t total_size = 0;

  // required .TSP.CFUUIDArchive owner_id = 1;
  if (_internal_has_owner_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference annotations = 3;
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TST.FormulaStoreArchive formula_store = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formula_store_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PencilAnnotationOwnerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PencilAnnotationOwnerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PencilAnnotationOwnerArchive::GetClassData() const { return &_class_data_; }

void PencilAnnotationOwnerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PencilAnnotationOwnerArchive *>(to)->MergeFrom(
      static_cast<const PencilAnnotationOwnerArchive &>(from));
}


void PencilAnnotationOwnerArchive::MergeFrom(const PencilAnnotationOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.PencilAnnotationOwnerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_owner_id()->::TSP::CFUUIDArchive::MergeFrom(from._internal_owner_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_formula_store()->::TST::FormulaStoreArchive::MergeFrom(from._internal_formula_store());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PencilAnnotationOwnerArchive::CopyFrom(const PencilAnnotationOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.PencilAnnotationOwnerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PencilAnnotationOwnerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(annotations_)) return false;
  if (_internal_has_formula_store()) {
    if (!formula_store_->IsInitialized()) return false;
  }
  return true;
}

void PencilAnnotationOwnerArchive::InternalSwap(PencilAnnotationOwnerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  annotations_.InternalSwap(&other->annotations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PencilAnnotationOwnerArchive, formula_store_)
      + sizeof(PencilAnnotationOwnerArchive::formula_store_)
      - PROTOBUF_FIELD_OFFSET(PencilAnnotationOwnerArchive, owner_id_)>(
          reinterpret_cast<char*>(&owner_id_),
          reinterpret_cast<char*>(&other->owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PencilAnnotationOwnerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[115]);
}

// ===================================================================

class AccumulatorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AccumulatorArchive>()._has_bits_);
  static void set_has_bool_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bool_true_count(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_number_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_date_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_duration_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_string_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_error_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_circular_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSCE::CellValueArchive& min_value(const AccumulatorArchive* msg);
  static void set_has_min_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellValueArchive& max_value(const AccumulatorArchive* msg);
  static void set_has_max_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::CellValueArchive& number_total_value(const AccumulatorArchive* msg);
  static void set_has_number_total_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::CellValueArchive& first_date_seen(const AccumulatorArchive* msg);
  static void set_has_first_date_seen(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_total_secs_since_ref_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_secs_to_add(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCE::CellValueArchive&
AccumulatorArchive::_Internal::min_value(const AccumulatorArchive* msg) {
  return *msg->min_value_;
}
const ::TSCE::CellValueArchive&
AccumulatorArchive::_Internal::max_value(const AccumulatorArchive* msg) {
  return *msg->max_value_;
}
const ::TSCE::CellValueArchive&
AccumulatorArchive::_Internal::number_total_value(const AccumulatorArchive* msg) {
  return *msg->number_total_value_;
}
const ::TSCE::CellValueArchive&
AccumulatorArchive::_Internal::first_date_seen(const AccumulatorArchive* msg) {
  return *msg->first_date_seen_;
}
void AccumulatorArchive::clear_min_value() {
  if (min_value_ != nullptr) min_value_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void AccumulatorArchive::clear_max_value() {
  if (max_value_ != nullptr) max_value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void AccumulatorArchive::clear_number_total_value() {
  if (number_total_value_ != nullptr) number_total_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void AccumulatorArchive::clear_first_date_seen() {
  if (first_date_seen_ != nullptr) first_date_seen_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
AccumulatorArchive::AccumulatorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.AccumulatorArchive)
}
AccumulatorArchive::AccumulatorArchive(const AccumulatorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_min_value()) {
    min_value_ = new ::TSCE::CellValueArchive(*from.min_value_);
  } else {
    min_value_ = nullptr;
  }
  if (from._internal_has_max_value()) {
    max_value_ = new ::TSCE::CellValueArchive(*from.max_value_);
  } else {
    max_value_ = nullptr;
  }
  if (from._internal_has_number_total_value()) {
    number_total_value_ = new ::TSCE::CellValueArchive(*from.number_total_value_);
  } else {
    number_total_value_ = nullptr;
  }
  if (from._internal_has_first_date_seen()) {
    first_date_seen_ = new ::TSCE::CellValueArchive(*from.first_date_seen_);
  } else {
    first_date_seen_ = nullptr;
  }
  ::memcpy(&bool_count_, &from.bool_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_circular_ref_) -
    reinterpret_cast<char*>(&bool_count_)) + sizeof(is_circular_ref_));
  // @@protoc_insertion_point(copy_constructor:TST.AccumulatorArchive)
}

inline void AccumulatorArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_circular_ref_) -
    reinterpret_cast<char*>(&min_value_)) + sizeof(is_circular_ref_));
}

AccumulatorArchive::~AccumulatorArchive() {
  // @@protoc_insertion_point(destructor:TST.AccumulatorArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccumulatorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete min_value_;
  if (this != internal_default_instance()) delete max_value_;
  if (this != internal_default_instance()) delete number_total_value_;
  if (this != internal_default_instance()) delete first_date_seen_;
}

void AccumulatorArchive::ArenaDtor(void* object) {
  AccumulatorArchive* _this = reinterpret_cast< AccumulatorArchive* >(object);
  (void)_this;
}
void AccumulatorArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccumulatorArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccumulatorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.AccumulatorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(min_value_ != nullptr);
      min_value_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(max_value_ != nullptr);
      max_value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(number_total_value_ != nullptr);
      number_total_value_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(first_date_seen_ != nullptr);
      first_date_seen_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&bool_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_count_) -
        reinterpret_cast<char*>(&bool_count_)) + sizeof(duration_count_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&string_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_circular_ref_) -
        reinterpret_cast<char*>(&string_count_)) + sizeof(is_circular_ref_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccumulatorArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 bool_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bool_count(&has_bits);
          bool_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_number_count(&has_bits);
          number_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 date_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_date_count(&has_bits);
          date_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_duration_count(&has_bits);
          duration_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 string_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_string_count(&has_bits);
          string_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.CellValueArchive min_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.CellValueArchive max_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.CellValueArchive number_total_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_number_total_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellValueArchive first_date_seen = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_date_seen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double total_secs_since_ref_date = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_total_secs_since_ref_date(&has_bits);
          total_secs_since_ref_date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double secs_to_add = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_secs_to_add(&has_bits);
          secs_to_add_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 bool_true_count = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_bool_true_count(&has_bits);
          bool_true_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 error_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_error_count(&has_bits);
          error_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_circular_ref = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_is_circular_ref(&has_bits);
          is_circular_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccumulatorArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.AccumulatorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 bool_count = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bool_count(), target);
  }

  // optional uint32 number_count = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_number_count(), target);
  }

  // optional uint32 date_count = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_date_count(), target);
  }

  // optional uint32 duration_count = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_duration_count(), target);
  }

  // optional uint32 string_count = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_string_count(), target);
  }

  // required .TSCE.CellValueArchive min_value = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::min_value(this), target, stream);
  }

  // required .TSCE.CellValueArchive max_value = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::max_value(this), target, stream);
  }

  // required .TSCE.CellValueArchive number_total_value = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::number_total_value(this), target, stream);
  }

  // optional .TSCE.CellValueArchive first_date_seen = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::first_date_seen(this), target, stream);
  }

  // optional double total_secs_since_ref_date = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_total_secs_since_ref_date(), target);
  }

  // optional double secs_to_add = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_secs_to_add(), target);
  }

  // optional uint32 bool_true_count = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_bool_true_count(), target);
  }

  // optional uint32 error_count = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_error_count(), target);
  }

  // optional bool is_circular_ref = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_circular_ref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.AccumulatorArchive)
  return target;
}

size_t AccumulatorArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.AccumulatorArchive)
  size_t total_size = 0;

  if (_internal_has_min_value()) {
    // required .TSCE.CellValueArchive min_value = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_value_);
  }

  if (_internal_has_max_value()) {
    // required .TSCE.CellValueArchive max_value = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_value_);
  }

  if (_internal_has_number_total_value()) {
    // required .TSCE.CellValueArchive number_total_value = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *number_total_value_);
  }

  return total_size;
}
size_t AccumulatorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.AccumulatorArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCE.CellValueArchive min_value = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_value_);

    // required .TSCE.CellValueArchive max_value = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_value_);

    // required .TSCE.CellValueArchive number_total_value = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *number_total_value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f8u) {
    // optional .TSCE.CellValueArchive first_date_seen = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *first_date_seen_);
    }

    // optional uint32 bool_count = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bool_count());
    }

    // optional uint32 number_count = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_number_count());
    }

    // optional uint32 date_count = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_date_count());
    }

    // optional uint32 duration_count = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration_count());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 string_count = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_string_count());
    }

    // optional uint32 bool_true_count = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bool_true_count());
    }

    // optional double total_secs_since_ref_date = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double secs_to_add = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional uint32 error_count = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_error_count());
    }

    // optional bool is_circular_ref = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccumulatorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccumulatorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccumulatorArchive::GetClassData() const { return &_class_data_; }

void AccumulatorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AccumulatorArchive *>(to)->MergeFrom(
      static_cast<const AccumulatorArchive &>(from));
}


void AccumulatorArchive::MergeFrom(const AccumulatorArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.AccumulatorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_min_value()->::TSCE::CellValueArchive::MergeFrom(from._internal_min_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_max_value()->::TSCE::CellValueArchive::MergeFrom(from._internal_max_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_number_total_value()->::TSCE::CellValueArchive::MergeFrom(from._internal_number_total_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_first_date_seen()->::TSCE::CellValueArchive::MergeFrom(from._internal_first_date_seen());
    }
    if (cached_has_bits & 0x00000010u) {
      bool_count_ = from.bool_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      number_count_ = from.number_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      date_count_ = from.date_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      duration_count_ = from.duration_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      string_count_ = from.string_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      bool_true_count_ = from.bool_true_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      total_secs_since_ref_date_ = from.total_secs_since_ref_date_;
    }
    if (cached_has_bits & 0x00000800u) {
      secs_to_add_ = from.secs_to_add_;
    }
    if (cached_has_bits & 0x00001000u) {
      error_count_ = from.error_count_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_circular_ref_ = from.is_circular_ref_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccumulatorArchive::CopyFrom(const AccumulatorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.AccumulatorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccumulatorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_min_value()) {
    if (!min_value_->IsInitialized()) return false;
  }
  if (_internal_has_max_value()) {
    if (!max_value_->IsInitialized()) return false;
  }
  if (_internal_has_number_total_value()) {
    if (!number_total_value_->IsInitialized()) return false;
  }
  if (_internal_has_first_date_seen()) {
    if (!first_date_seen_->IsInitialized()) return false;
  }
  return true;
}

void AccumulatorArchive::InternalSwap(AccumulatorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccumulatorArchive, is_circular_ref_)
      + sizeof(AccumulatorArchive::is_circular_ref_)
      - PROTOBUF_FIELD_OFFSET(AccumulatorArchive, min_value_)>(
          reinterpret_cast<char*>(&min_value_),
          reinterpret_cast<char*>(&other->min_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccumulatorArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[116]);
}

// ===================================================================

class GroupColumnArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupColumnArchive>()._has_bits_);
  static const ::TSP::UUID& column_uid(const GroupColumnArchive* msg);
  static void set_has_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_grouping_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::FunctorArchive& grouping_functor(const GroupColumnArchive* msg);
  static void set_has_grouping_functor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& grouping_column_uid(const GroupColumnArchive* msg);
  static void set_has_grouping_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

const ::TSP::UUID&
GroupColumnArchive::_Internal::column_uid(const GroupColumnArchive* msg) {
  return *msg->column_uid_;
}
const ::TSCE::FunctorArchive&
GroupColumnArchive::_Internal::grouping_functor(const GroupColumnArchive* msg) {
  return *msg->grouping_functor_;
}
const ::TSP::UUID&
GroupColumnArchive::_Internal::grouping_column_uid(const GroupColumnArchive* msg) {
  return *msg->grouping_column_uid_;
}
void GroupColumnArchive::clear_column_uid() {
  if (column_uid_ != nullptr) column_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GroupColumnArchive::clear_grouping_functor() {
  if (grouping_functor_ != nullptr) grouping_functor_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GroupColumnArchive::clear_grouping_column_uid() {
  if (grouping_column_uid_ != nullptr) grouping_column_uid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
GroupColumnArchive::GroupColumnArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.GroupColumnArchive)
}
GroupColumnArchive::GroupColumnArchive(const GroupColumnArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_uid()) {
    column_uid_ = new ::TSP::UUID(*from.column_uid_);
  } else {
    column_uid_ = nullptr;
  }
  if (from._internal_has_grouping_functor()) {
    grouping_functor_ = new ::TSCE::FunctorArchive(*from.grouping_functor_);
  } else {
    grouping_functor_ = nullptr;
  }
  if (from._internal_has_grouping_column_uid()) {
    grouping_column_uid_ = new ::TSP::UUID(*from.grouping_column_uid_);
  } else {
    grouping_column_uid_ = nullptr;
  }
  grouping_type_ = from.grouping_type_;
  // @@protoc_insertion_point(copy_constructor:TST.GroupColumnArchive)
}

inline void GroupColumnArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&column_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&grouping_type_) -
    reinterpret_cast<char*>(&column_uid_)) + sizeof(grouping_type_));
}

GroupColumnArchive::~GroupColumnArchive() {
  // @@protoc_insertion_point(destructor:TST.GroupColumnArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GroupColumnArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete column_uid_;
  if (this != internal_default_instance()) delete grouping_functor_;
  if (this != internal_default_instance()) delete grouping_column_uid_;
}

void GroupColumnArchive::ArenaDtor(void* object) {
  GroupColumnArchive* _this = reinterpret_cast< GroupColumnArchive* >(object);
  (void)_this;
}
void GroupColumnArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupColumnArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroupColumnArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.GroupColumnArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(column_uid_ != nullptr);
      column_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(grouping_functor_ != nullptr);
      grouping_functor_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(grouping_column_uid_ != nullptr);
      grouping_column_uid_->Clear();
    }
  }
  grouping_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupColumnArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID column_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.GroupingType grouping_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::GroupingType_IsValid(val))) {
            _internal_set_grouping_type(static_cast<::TST::GroupingType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSCE.FunctorArchive grouping_functor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_grouping_functor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID grouping_column_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_grouping_column_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupColumnArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.GroupColumnArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID column_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::column_uid(this), target, stream);
  }

  // required .TST.GroupingType grouping_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_grouping_type(), target);
  }

  // optional .TSCE.FunctorArchive grouping_functor = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::grouping_functor(this), target, stream);
  }

  // optional .TSP.UUID grouping_column_uid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::grouping_column_uid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.GroupColumnArchive)
  return target;
}

size_t GroupColumnArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.GroupColumnArchive)
  size_t total_size = 0;

  if (_internal_has_column_uid()) {
    // required .TSP.UUID column_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_uid_);
  }

  if (_internal_has_grouping_type()) {
    // required .TST.GroupingType grouping_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_grouping_type());
  }

  return total_size;
}
size_t GroupColumnArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.GroupColumnArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required .TSP.UUID column_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_uid_);

    // required .TST.GroupingType grouping_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_grouping_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSCE.FunctorArchive grouping_functor = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *grouping_functor_);
    }

    // optional .TSP.UUID grouping_column_uid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *grouping_column_uid_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupColumnArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GroupColumnArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupColumnArchive::GetClassData() const { return &_class_data_; }

void GroupColumnArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GroupColumnArchive *>(to)->MergeFrom(
      static_cast<const GroupColumnArchive &>(from));
}


void GroupColumnArchive::MergeFrom(const GroupColumnArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.GroupColumnArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_column_uid()->::TSP::UUID::MergeFrom(from._internal_column_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_grouping_functor()->::TSCE::FunctorArchive::MergeFrom(from._internal_grouping_functor());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_grouping_column_uid()->::TSP::UUID::MergeFrom(from._internal_grouping_column_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      grouping_type_ = from.grouping_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupColumnArchive::CopyFrom(const GroupColumnArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.GroupColumnArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupColumnArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_column_uid()) {
    if (!column_uid_->IsInitialized()) return false;
  }
  if (_internal_has_grouping_functor()) {
    if (!grouping_functor_->IsInitialized()) return false;
  }
  if (_internal_has_grouping_column_uid()) {
    if (!grouping_column_uid_->IsInitialized()) return false;
  }
  return true;
}

void GroupColumnArchive::InternalSwap(GroupColumnArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupColumnArchive, grouping_type_)
      + sizeof(GroupColumnArchive::grouping_type_)
      - PROTOBUF_FIELD_OFFSET(GroupColumnArchive, column_uid_)>(
          reinterpret_cast<char*>(&column_uid_),
          reinterpret_cast<char*>(&other->column_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupColumnArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[117]);
}

// ===================================================================

class GroupColumnListArchive::_Internal {
 public:
};

GroupColumnListArchive::GroupColumnListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  group_column_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.GroupColumnListArchive)
}
GroupColumnListArchive::GroupColumnListArchive(const GroupColumnListArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      group_column_(from.group_column_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.GroupColumnListArchive)
}

inline void GroupColumnListArchive::SharedCtor() {
}

GroupColumnListArchive::~GroupColumnListArchive() {
  // @@protoc_insertion_point(destructor:TST.GroupColumnListArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GroupColumnListArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GroupColumnListArchive::ArenaDtor(void* object) {
  GroupColumnListArchive* _this = reinterpret_cast< GroupColumnListArchive* >(object);
  (void)_this;
}
void GroupColumnListArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupColumnListArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroupColumnListArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.GroupColumnListArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_column_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupColumnListArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.GroupColumnArchive group_column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_column(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupColumnListArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.GroupColumnListArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.GroupColumnArchive group_column = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_group_column_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_group_column(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.GroupColumnListArchive)
  return target;
}

size_t GroupColumnListArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.GroupColumnListArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.GroupColumnArchive group_column = 1;
  total_size += 1UL * this->_internal_group_column_size();
  for (const auto& msg : this->group_column_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupColumnListArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GroupColumnListArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupColumnListArchive::GetClassData() const { return &_class_data_; }

void GroupColumnListArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GroupColumnListArchive *>(to)->MergeFrom(
      static_cast<const GroupColumnListArchive &>(from));
}


void GroupColumnListArchive::MergeFrom(const GroupColumnListArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.GroupColumnListArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_column_.MergeFrom(from.group_column_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupColumnListArchive::CopyFrom(const GroupColumnListArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.GroupColumnListArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupColumnListArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(group_column_)) return false;
  return true;
}

void GroupColumnListArchive::InternalSwap(GroupColumnListArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  group_column_.InternalSwap(&other->group_column_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupColumnListArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[118]);
}

// ===================================================================

class ColumnAggregateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnAggregateArchive>()._has_bits_);
  static const ::TSP::UUID& column_uid(const ColumnAggregateArchive* msg);
  static void set_has_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_agg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::UUID&
ColumnAggregateArchive::_Internal::column_uid(const ColumnAggregateArchive* msg) {
  return *msg->column_uid_;
}
void ColumnAggregateArchive::clear_column_uid() {
  if (column_uid_ != nullptr) column_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ColumnAggregateArchive::ColumnAggregateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ColumnAggregateArchive)
}
ColumnAggregateArchive::ColumnAggregateArchive(const ColumnAggregateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_uid()) {
    column_uid_ = new ::TSP::UUID(*from.column_uid_);
  } else {
    column_uid_ = nullptr;
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&agg_type_) -
    reinterpret_cast<char*>(&level_)) + sizeof(agg_type_));
  // @@protoc_insertion_point(copy_constructor:TST.ColumnAggregateArchive)
}

inline void ColumnAggregateArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&column_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&agg_type_) -
    reinterpret_cast<char*>(&column_uid_)) + sizeof(agg_type_));
}

ColumnAggregateArchive::~ColumnAggregateArchive() {
  // @@protoc_insertion_point(destructor:TST.ColumnAggregateArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColumnAggregateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete column_uid_;
}

void ColumnAggregateArchive::ArenaDtor(void* object) {
  ColumnAggregateArchive* _this = reinterpret_cast< ColumnAggregateArchive* >(object);
  (void)_this;
}
void ColumnAggregateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColumnAggregateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColumnAggregateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ColumnAggregateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(column_uid_ != nullptr);
    column_uid_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&agg_type_) -
        reinterpret_cast<char*>(&level_)) + sizeof(agg_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnAggregateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID column_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.AggregateType agg_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::AggregateType_IsValid(val))) {
            _internal_set_agg_type(static_cast<::TST::AggregateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnAggregateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ColumnAggregateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID column_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::column_uid(this), target, stream);
  }

  // required uint32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // required .TST.AggregateType agg_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_agg_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ColumnAggregateArchive)
  return target;
}

size_t ColumnAggregateArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.ColumnAggregateArchive)
  size_t total_size = 0;

  if (_internal_has_column_uid()) {
    // required .TSP.UUID column_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_uid_);
  }

  if (_internal_has_level()) {
    // required uint32 level = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());
  }

  if (_internal_has_agg_type()) {
    // required .TST.AggregateType agg_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_agg_type());
  }

  return total_size;
}
size_t ColumnAggregateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ColumnAggregateArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSP.UUID column_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_uid_);

    // required uint32 level = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());

    // required .TST.AggregateType agg_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_agg_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnAggregateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColumnAggregateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnAggregateArchive::GetClassData() const { return &_class_data_; }

void ColumnAggregateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ColumnAggregateArchive *>(to)->MergeFrom(
      static_cast<const ColumnAggregateArchive &>(from));
}


void ColumnAggregateArchive::MergeFrom(const ColumnAggregateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ColumnAggregateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_column_uid()->::TSP::UUID::MergeFrom(from._internal_column_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000004u) {
      agg_type_ = from.agg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnAggregateArchive::CopyFrom(const ColumnAggregateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ColumnAggregateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnAggregateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_column_uid()) {
    if (!column_uid_->IsInitialized()) return false;
  }
  return true;
}

void ColumnAggregateArchive::InternalSwap(ColumnAggregateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnAggregateArchive, agg_type_)
      + sizeof(ColumnAggregateArchive::agg_type_)
      - PROTOBUF_FIELD_OFFSET(ColumnAggregateArchive, column_uid_)>(
          reinterpret_cast<char*>(&column_uid_),
          reinterpret_cast<char*>(&other->column_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnAggregateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[119]);
}

// ===================================================================

class ColumnAggregateListArchive::_Internal {
 public:
};

ColumnAggregateListArchive::ColumnAggregateListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  aggregates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ColumnAggregateListArchive)
}
ColumnAggregateListArchive::ColumnAggregateListArchive(const ColumnAggregateListArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      aggregates_(from.aggregates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.ColumnAggregateListArchive)
}

inline void ColumnAggregateListArchive::SharedCtor() {
}

ColumnAggregateListArchive::~ColumnAggregateListArchive() {
  // @@protoc_insertion_point(destructor:TST.ColumnAggregateListArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColumnAggregateListArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColumnAggregateListArchive::ArenaDtor(void* object) {
  ColumnAggregateListArchive* _this = reinterpret_cast< ColumnAggregateListArchive* >(object);
  (void)_this;
}
void ColumnAggregateListArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColumnAggregateListArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColumnAggregateListArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ColumnAggregateListArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aggregates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnAggregateListArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.ColumnAggregateArchive aggregates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aggregates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnAggregateListArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ColumnAggregateListArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.ColumnAggregateArchive aggregates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_aggregates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_aggregates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ColumnAggregateListArchive)
  return target;
}

size_t ColumnAggregateListArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ColumnAggregateListArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.ColumnAggregateArchive aggregates = 1;
  total_size += 1UL * this->_internal_aggregates_size();
  for (const auto& msg : this->aggregates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnAggregateListArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColumnAggregateListArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnAggregateListArchive::GetClassData() const { return &_class_data_; }

void ColumnAggregateListArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ColumnAggregateListArchive *>(to)->MergeFrom(
      static_cast<const ColumnAggregateListArchive &>(from));
}


void ColumnAggregateListArchive::MergeFrom(const ColumnAggregateListArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ColumnAggregateListArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aggregates_.MergeFrom(from.aggregates_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnAggregateListArchive::CopyFrom(const ColumnAggregateListArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ColumnAggregateListArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnAggregateListArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(aggregates_)) return false;
  return true;
}

void ColumnAggregateListArchive::InternalSwap(ColumnAggregateListArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  aggregates_.InternalSwap(&other->aggregates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnAggregateListArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[120]);
}

// ===================================================================

class CategoryOwnerArchive_GroupByArchive_AggNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CategoryOwnerArchive_GroupByArchive_AggNodeArchive>()._has_bits_);
  static const ::TSCE::CellCoordinateArchive& formula_coord(const CategoryOwnerArchive_GroupByArchive_AggNodeArchive* msg);
  static void set_has_formula_coord(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::AccumulatorArchive& accum(const CategoryOwnerArchive_GroupByArchive_AggNodeArchive* msg);
  static void set_has_accum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::CellCoordinateArchive&
CategoryOwnerArchive_GroupByArchive_AggNodeArchive::_Internal::formula_coord(const CategoryOwnerArchive_GroupByArchive_AggNodeArchive* msg) {
  return *msg->formula_coord_;
}
const ::TST::AccumulatorArchive&
CategoryOwnerArchive_GroupByArchive_AggNodeArchive::_Internal::accum(const CategoryOwnerArchive_GroupByArchive_AggNodeArchive* msg) {
  return *msg->accum_;
}
void CategoryOwnerArchive_GroupByArchive_AggNodeArchive::clear_formula_coord() {
  if (formula_coord_ != nullptr) formula_coord_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CategoryOwnerArchive_GroupByArchive_AggNodeArchive::CategoryOwnerArchive_GroupByArchive_AggNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  child_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive)
}
CategoryOwnerArchive_GroupByArchive_AggNodeArchive::CategoryOwnerArchive_GroupByArchive_AggNodeArchive(const CategoryOwnerArchive_GroupByArchive_AggNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      child_(from.child_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_formula_coord()) {
    formula_coord_ = new ::TSCE::CellCoordinateArchive(*from.formula_coord_);
  } else {
    formula_coord_ = nullptr;
  }
  if (from._internal_has_accum()) {
    accum_ = new ::TST::AccumulatorArchive(*from.accum_);
  } else {
    accum_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive)
}

inline void CategoryOwnerArchive_GroupByArchive_AggNodeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&formula_coord_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&accum_) -
    reinterpret_cast<char*>(&formula_coord_)) + sizeof(accum_));
}

CategoryOwnerArchive_GroupByArchive_AggNodeArchive::~CategoryOwnerArchive_GroupByArchive_AggNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CategoryOwnerArchive_GroupByArchive_AggNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete formula_coord_;
  if (this != internal_default_instance()) delete accum_;
}

void CategoryOwnerArchive_GroupByArchive_AggNodeArchive::ArenaDtor(void* object) {
  CategoryOwnerArchive_GroupByArchive_AggNodeArchive* _this = reinterpret_cast< CategoryOwnerArchive_GroupByArchive_AggNodeArchive* >(object);
  (void)_this;
}
void CategoryOwnerArchive_GroupByArchive_AggNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CategoryOwnerArchive_GroupByArchive_AggNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CategoryOwnerArchive_GroupByArchive_AggNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(formula_coord_ != nullptr);
      formula_coord_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(accum_ != nullptr);
      accum_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryOwnerArchive_GroupByArchive_AggNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellCoordinateArchive formula_coord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.AccumulatorArchive accum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_accum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_child(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CategoryOwnerArchive_GroupByArchive_AggNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.CellCoordinateArchive formula_coord = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::formula_coord(this), target, stream);
  }

  // optional .TST.AccumulatorArchive accum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::accum(this), target, stream);
  }

  // repeated .TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive child = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_child_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_child(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive)
  return target;
}

size_t CategoryOwnerArchive_GroupByArchive_AggNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive)
  size_t total_size = 0;

  // required .TSCE.CellCoordinateArchive formula_coord = 1;
  if (_internal_has_formula_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formula_coord_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive child = 3;
  total_size += 1UL * this->_internal_child_size();
  for (const auto& msg : this->child_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TST.AccumulatorArchive accum = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accum_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryOwnerArchive_GroupByArchive_AggNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CategoryOwnerArchive_GroupByArchive_AggNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryOwnerArchive_GroupByArchive_AggNodeArchive::GetClassData() const { return &_class_data_; }

void CategoryOwnerArchive_GroupByArchive_AggNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CategoryOwnerArchive_GroupByArchive_AggNodeArchive *>(to)->MergeFrom(
      static_cast<const CategoryOwnerArchive_GroupByArchive_AggNodeArchive &>(from));
}


void CategoryOwnerArchive_GroupByArchive_AggNodeArchive::MergeFrom(const CategoryOwnerArchive_GroupByArchive_AggNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  child_.MergeFrom(from.child_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_formula_coord()->::TSCE::CellCoordinateArchive::MergeFrom(from._internal_formula_coord());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_accum()->::TST::AccumulatorArchive::MergeFrom(from._internal_accum());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryOwnerArchive_GroupByArchive_AggNodeArchive::CopyFrom(const CategoryOwnerArchive_GroupByArchive_AggNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryOwnerArchive_GroupByArchive_AggNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(child_)) return false;
  if (_internal_has_accum()) {
    if (!accum_->IsInitialized()) return false;
  }
  return true;
}

void CategoryOwnerArchive_GroupByArchive_AggNodeArchive::InternalSwap(CategoryOwnerArchive_GroupByArchive_AggNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  child_.InternalSwap(&other->child_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CategoryOwnerArchive_GroupByArchive_AggNodeArchive, accum_)
      + sizeof(CategoryOwnerArchive_GroupByArchive_AggNodeArchive::accum_)
      - PROTOBUF_FIELD_OFFSET(CategoryOwnerArchive_GroupByArchive_AggNodeArchive, formula_coord_)>(
          reinterpret_cast<char*>(&formula_coord_),
          reinterpret_cast<char*>(&other->formula_coord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryOwnerArchive_GroupByArchive_AggNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[121]);
}

// ===================================================================

class CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::_Internal {
 public:
};

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::clear_value() {
  value_.Clear();
}
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive)
}
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive)
}

inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::SharedCtor() {
}

CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::~CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive() {
  // @@protoc_insertion_point(destructor:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::ArenaDtor(void* object) {
  CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* _this = reinterpret_cast< CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* >(object);
  (void)_this;
}
void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.CellValueArchive value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.CellValueArchive value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive)
  return target;
}

size_t CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellValueArchive value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::GetClassData() const { return &_class_data_; }

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive *>(to)->MergeFrom(
      static_cast<const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive &>(from));
}


void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::MergeFrom(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::CopyFrom(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(value_)) return false;
  return true;
}

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::InternalSwap(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[122]);
}

// ===================================================================

class CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::_Internal {
 public:
};

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::clear_row_uids() {
  row_uids_.Clear();
}
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  row_uids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive)
}
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      row_uids_(from.row_uids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive)
}

inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::SharedCtor() {
}

CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::~CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive() {
  // @@protoc_insertion_point(destructor:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::ArenaDtor(void* object) {
  CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive* _this = reinterpret_cast< CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive* >(object);
  (void)_this;
}
void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_uids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID row_uids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID row_uids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_row_uids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive)
  return target;
}

size_t CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID row_uids = 1;
  total_size += 1UL * this->_internal_row_uids_size();
  for (const auto& msg : this->row_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::GetClassData() const { return &_class_data_; }

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive *>(to)->MergeFrom(
      static_cast<const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive &>(from));
}


void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::MergeFrom(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_uids_.MergeFrom(from.row_uids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::CopyFrom(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(row_uids_)) return false;
  return true;
}

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::InternalSwap(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  row_uids_.InternalSwap(&other->row_uids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[123]);
}

// ===================================================================

class CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive>()._has_bits_);
  static const ::TSCE::CellValueArchive& cell_value(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* msg);
  static void set_has_cell_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSCE::CellValueArchive&
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::_Internal::cell_value(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* msg) {
  return *msg->cell_value_;
}
void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::clear_cell_value() {
  if (cell_value_ != nullptr) cell_value_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::clear_formats() {
  formats_.Clear();
}
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  formats_(arena),
  row_sets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive)
}
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      formats_(from.formats_),
      row_sets_(from.row_sets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_value()) {
    cell_value_ = new ::TSCE::CellValueArchive(*from.cell_value_);
  } else {
    cell_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive)
}

inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::SharedCtor() {
cell_value_ = nullptr;
}

CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::~CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive() {
  // @@protoc_insertion_point(destructor:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cell_value_;
}

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::ArenaDtor(void* object) {
  CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* _this = reinterpret_cast< CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* >(object);
  (void)_this;
}
void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  formats_.Clear();
  row_sets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(cell_value_ != nullptr);
    cell_value_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCE.CellValueArchive cell_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.FormatStructArchive formats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive row_sets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_sets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSCE.CellValueArchive cell_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cell_value(this), target, stream);
  }

  // repeated .TSK.FormatStructArchive formats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_formats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_formats(i), target, stream);
  }

  // repeated .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive row_sets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_sets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_row_sets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive)
  return target;
}

size_t CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.FormatStructArchive formats = 2;
  total_size += 1UL * this->_internal_formats_size();
  for (const auto& msg : this->formats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive row_sets = 3;
  total_size += 1UL * this->_internal_row_sets_size();
  for (const auto& msg : this->row_sets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSCE.CellValueArchive cell_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::GetClassData() const { return &_class_data_; }

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive *>(to)->MergeFrom(
      static_cast<const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive &>(from));
}


void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::MergeFrom(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  formats_.MergeFrom(from.formats_);
  row_sets_.MergeFrom(from.row_sets_);
  if (from._internal_has_cell_value()) {
    _internal_mutable_cell_value()->::TSCE::CellValueArchive::MergeFrom(from._internal_cell_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::CopyFrom(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(formats_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(row_sets_)) return false;
  if (_internal_has_cell_value()) {
    if (!cell_value_->IsInitialized()) return false;
  }
  return true;
}

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::InternalSwap(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  formats_.InternalSwap(&other->formats_);
  row_sets_.InternalSwap(&other->row_sets_);
  swap(cell_value_, other->cell_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[124]);
}

// ===================================================================

class CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CategoryOwnerArchive_GroupByArchive_GroupNodeArchive>()._has_bits_);
  static const ::TSP::UUID& group_uid(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* msg);
  static void set_has_group_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive& group_value_tuple(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* msg);
  static void set_has_group_value_tuple(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::CellValueArchive& group_cell_value(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* msg);
  static void set_has_group_cell_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive& format_manager(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* msg);
  static void set_has_format_manager(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_Internal::group_uid(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* msg) {
  return *msg->group_uid_;
}
const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive&
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_Internal::group_value_tuple(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* msg) {
  return *msg->group_value_tuple_;
}
const ::TSCE::CellValueArchive&
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_Internal::group_cell_value(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* msg) {
  return *msg->group_cell_value_;
}
const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive&
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_Internal::format_manager(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* msg) {
  return *msg->format_manager_;
}
void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::clear_group_uid() {
  if (group_uid_ != nullptr) group_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::clear_group_cell_value() {
  if (group_cell_value_ != nullptr) group_cell_value_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::clear_row_uid() {
  row_uid_.Clear();
}
void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::clear_agg_formula_coords() {
  agg_formula_coords_.Clear();
}
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  child_(arena),
  row_uid_(arena),
  agg_formula_coords_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive)
}
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      child_(from.child_),
      row_uid_(from.row_uid_),
      agg_formula_coords_(from.agg_formula_coords_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group_uid()) {
    group_uid_ = new ::TSP::UUID(*from.group_uid_);
  } else {
    group_uid_ = nullptr;
  }
  if (from._internal_has_group_value_tuple()) {
    group_value_tuple_ = new ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive(*from.group_value_tuple_);
  } else {
    group_value_tuple_ = nullptr;
  }
  if (from._internal_has_format_manager()) {
    format_manager_ = new ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive(*from.format_manager_);
  } else {
    format_manager_ = nullptr;
  }
  if (from._internal_has_group_cell_value()) {
    group_cell_value_ = new ::TSCE::CellValueArchive(*from.group_cell_value_);
  } else {
    group_cell_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive)
}

inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_cell_value_) -
    reinterpret_cast<char*>(&group_uid_)) + sizeof(group_cell_value_));
}

CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::~CategoryOwnerArchive_GroupByArchive_GroupNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete group_uid_;
  if (this != internal_default_instance()) delete group_value_tuple_;
  if (this != internal_default_instance()) delete format_manager_;
  if (this != internal_default_instance()) delete group_cell_value_;
}

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::ArenaDtor(void* object) {
  CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* _this = reinterpret_cast< CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* >(object);
  (void)_this;
}
void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_.Clear();
  row_uid_.Clear();
  agg_formula_coords_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(group_uid_ != nullptr);
      group_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(group_value_tuple_ != nullptr);
      group_value_tuple_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(format_manager_ != nullptr);
      format_manager_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(group_cell_value_ != nullptr);
      group_cell_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID group_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive group_value_tuple = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_value_tuple(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_child(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID row_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_uid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.CellCoordinateArchive agg_formula_coords = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agg_formula_coords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive format_manager = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_format_manager(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellValueArchive group_cell_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_cell_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID group_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::group_uid(this), target, stream);
  }

  // optional .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive group_value_tuple = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::group_value_tuple(this), target, stream);
  }

  // repeated .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive child = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_child_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_child(i), target, stream);
  }

  // repeated .TSP.UUID row_uid = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_uid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_row_uid(i), target, stream);
  }

  // repeated .TSCE.CellCoordinateArchive agg_formula_coords = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agg_formula_coords_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_agg_formula_coords(i), target, stream);
  }

  // optional .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive format_manager = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::format_manager(this), target, stream);
  }

  // optional .TSCE.CellValueArchive group_cell_value = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::group_cell_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive)
  return target;
}

size_t CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive)
  size_t total_size = 0;

  // required .TSP.UUID group_uid = 1;
  if (_internal_has_group_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_uid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive child = 3;
  total_size += 1UL * this->_internal_child_size();
  for (const auto& msg : this->child_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID row_uid = 4;
  total_size += 1UL * this->_internal_row_uid_size();
  for (const auto& msg : this->row_uid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.CellCoordinateArchive agg_formula_coords = 5;
  total_size += 1UL * this->_internal_agg_formula_coords_size();
  for (const auto& msg : this->agg_formula_coords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive group_value_tuple = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *group_value_tuple_);
    }

    // optional .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive format_manager = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *format_manager_);
    }

    // optional .TSCE.CellValueArchive group_cell_value = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *group_cell_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::GetClassData() const { return &_class_data_; }

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CategoryOwnerArchive_GroupByArchive_GroupNodeArchive *>(to)->MergeFrom(
      static_cast<const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive &>(from));
}


void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::MergeFrom(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  child_.MergeFrom(from.child_);
  row_uid_.MergeFrom(from.row_uid_);
  agg_formula_coords_.MergeFrom(from.agg_formula_coords_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_group_uid()->::TSP::UUID::MergeFrom(from._internal_group_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_group_value_tuple()->::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::MergeFrom(from._internal_group_value_tuple());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_format_manager()->::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::MergeFrom(from._internal_format_manager());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_group_cell_value()->::TSCE::CellValueArchive::MergeFrom(from._internal_group_cell_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::CopyFrom(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(child_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(row_uid_)) return false;
  if (_internal_has_group_uid()) {
    if (!group_uid_->IsInitialized()) return false;
  }
  if (_internal_has_group_value_tuple()) {
    if (!group_value_tuple_->IsInitialized()) return false;
  }
  if (_internal_has_format_manager()) {
    if (!format_manager_->IsInitialized()) return false;
  }
  if (_internal_has_group_cell_value()) {
    if (!group_cell_value_->IsInitialized()) return false;
  }
  return true;
}

void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::InternalSwap(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  child_.InternalSwap(&other->child_);
  row_uid_.InternalSwap(&other->row_uid_);
  agg_formula_coords_.InternalSwap(&other->agg_formula_coords_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive, group_cell_value_)
      + sizeof(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::group_cell_value_)
      - PROTOBUF_FIELD_OFFSET(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive, group_uid_)>(
          reinterpret_cast<char*>(&group_uid_),
          reinterpret_cast<char*>(&other->group_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[125]);
}

// ===================================================================

class CategoryOwnerArchive_GroupByArchive_AggregatorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CategoryOwnerArchive_GroupByArchive_AggregatorArchive>()._has_bits_);
  static const ::TSP::UUID& column_uid(const CategoryOwnerArchive_GroupByArchive_AggregatorArchive* msg);
  static void set_has_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive& agg_node(const CategoryOwnerArchive_GroupByArchive_AggregatorArchive* msg);
  static void set_has_agg_node(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
CategoryOwnerArchive_GroupByArchive_AggregatorArchive::_Internal::column_uid(const CategoryOwnerArchive_GroupByArchive_AggregatorArchive* msg) {
  return *msg->column_uid_;
}
const ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive&
CategoryOwnerArchive_GroupByArchive_AggregatorArchive::_Internal::agg_node(const CategoryOwnerArchive_GroupByArchive_AggregatorArchive* msg) {
  return *msg->agg_node_;
}
void CategoryOwnerArchive_GroupByArchive_AggregatorArchive::clear_column_uid() {
  if (column_uid_ != nullptr) column_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CategoryOwnerArchive_GroupByArchive_AggregatorArchive::CategoryOwnerArchive_GroupByArchive_AggregatorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive)
}
CategoryOwnerArchive_GroupByArchive_AggregatorArchive::CategoryOwnerArchive_GroupByArchive_AggregatorArchive(const CategoryOwnerArchive_GroupByArchive_AggregatorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_uid()) {
    column_uid_ = new ::TSP::UUID(*from.column_uid_);
  } else {
    column_uid_ = nullptr;
  }
  if (from._internal_has_agg_node()) {
    agg_node_ = new ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive(*from.agg_node_);
  } else {
    agg_node_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive)
}

inline void CategoryOwnerArchive_GroupByArchive_AggregatorArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&column_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&agg_node_) -
    reinterpret_cast<char*>(&column_uid_)) + sizeof(agg_node_));
}

CategoryOwnerArchive_GroupByArchive_AggregatorArchive::~CategoryOwnerArchive_GroupByArchive_AggregatorArchive() {
  // @@protoc_insertion_point(destructor:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CategoryOwnerArchive_GroupByArchive_AggregatorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete column_uid_;
  if (this != internal_default_instance()) delete agg_node_;
}

void CategoryOwnerArchive_GroupByArchive_AggregatorArchive::ArenaDtor(void* object) {
  CategoryOwnerArchive_GroupByArchive_AggregatorArchive* _this = reinterpret_cast< CategoryOwnerArchive_GroupByArchive_AggregatorArchive* >(object);
  (void)_this;
}
void CategoryOwnerArchive_GroupByArchive_AggregatorArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CategoryOwnerArchive_GroupByArchive_AggregatorArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CategoryOwnerArchive_GroupByArchive_AggregatorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(column_uid_ != nullptr);
      column_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(agg_node_ != nullptr);
      agg_node_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryOwnerArchive_GroupByArchive_AggregatorArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID column_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive agg_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_agg_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CategoryOwnerArchive_GroupByArchive_AggregatorArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID column_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::column_uid(this), target, stream);
  }

  // optional .TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive agg_node = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::agg_node(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive)
  return target;
}

size_t CategoryOwnerArchive_GroupByArchive_AggregatorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive)
  size_t total_size = 0;

  // required .TSP.UUID column_uid = 1;
  if (_internal_has_column_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_uid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive agg_node = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agg_node_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryOwnerArchive_GroupByArchive_AggregatorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CategoryOwnerArchive_GroupByArchive_AggregatorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryOwnerArchive_GroupByArchive_AggregatorArchive::GetClassData() const { return &_class_data_; }

void CategoryOwnerArchive_GroupByArchive_AggregatorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CategoryOwnerArchive_GroupByArchive_AggregatorArchive *>(to)->MergeFrom(
      static_cast<const CategoryOwnerArchive_GroupByArchive_AggregatorArchive &>(from));
}


void CategoryOwnerArchive_GroupByArchive_AggregatorArchive::MergeFrom(const CategoryOwnerArchive_GroupByArchive_AggregatorArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_column_uid()->::TSP::UUID::MergeFrom(from._internal_column_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_agg_node()->::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive::MergeFrom(from._internal_agg_node());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryOwnerArchive_GroupByArchive_AggregatorArchive::CopyFrom(const CategoryOwnerArchive_GroupByArchive_AggregatorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryOwnerArchive_GroupByArchive_AggregatorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_column_uid()) {
    if (!column_uid_->IsInitialized()) return false;
  }
  if (_internal_has_agg_node()) {
    if (!agg_node_->IsInitialized()) return false;
  }
  return true;
}

void CategoryOwnerArchive_GroupByArchive_AggregatorArchive::InternalSwap(CategoryOwnerArchive_GroupByArchive_AggregatorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CategoryOwnerArchive_GroupByArchive_AggregatorArchive, agg_node_)
      + sizeof(CategoryOwnerArchive_GroupByArchive_AggregatorArchive::agg_node_)
      - PROTOBUF_FIELD_OFFSET(CategoryOwnerArchive_GroupByArchive_AggregatorArchive, column_uid_)>(
          reinterpret_cast<char*>(&column_uid_),
          reinterpret_cast<char*>(&other->column_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryOwnerArchive_GroupByArchive_AggregatorArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[126]);
}

// ===================================================================

class CategoryOwnerArchive_GroupByArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CategoryOwnerArchive_GroupByArchive>()._has_bits_);
  static const ::TSP::UUID& group_by_uid(const CategoryOwnerArchive_GroupByArchive* msg);
  static void set_has_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& group_node_root(const CategoryOwnerArchive_GroupByArchive* msg);
  static void set_has_group_node_root(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSCE::CellCoordinateArchive& indirect_agg_type_change_formula(const CategoryOwnerArchive_GroupByArchive* msg);
  static void set_has_indirect_agg_type_change_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::CellCoordinateArchive& grouping_columns_formula(const CategoryOwnerArchive_GroupByArchive* msg);
  static void set_has_grouping_columns_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::CellCoordinateArchive& grouping_column_headers_formula(const CategoryOwnerArchive_GroupByArchive* msg);
  static void set_has_grouping_column_headers_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::CellCoordinateArchive& aggs_in_group_root_formula(const CategoryOwnerArchive_GroupByArchive* msg);
  static void set_has_aggs_in_group_root_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCE::CellCoordinateArchive& column_order_changed_formula(const CategoryOwnerArchive_GroupByArchive* msg);
  static void set_has_column_order_changed_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSCE::CellCoordinateArchive& row_order_changed_formula(const CategoryOwnerArchive_GroupByArchive* msg);
  static void set_has_row_order_changed_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCE::CellCoordinateArchive& row_order_changed_ignoring_recalc_formula(const CategoryOwnerArchive_GroupByArchive* msg);
  static void set_has_row_order_changed_ignoring_recalc_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000203) ^ 0x00000203) != 0;
  }
};

const ::TSP::UUID&
CategoryOwnerArchive_GroupByArchive::_Internal::group_by_uid(const CategoryOwnerArchive_GroupByArchive* msg) {
  return *msg->group_by_uid_;
}
const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive&
CategoryOwnerArchive_GroupByArchive::_Internal::group_node_root(const CategoryOwnerArchive_GroupByArchive* msg) {
  return *msg->group_node_root_;
}
const ::TSCE::CellCoordinateArchive&
CategoryOwnerArchive_GroupByArchive::_Internal::indirect_agg_type_change_formula(const CategoryOwnerArchive_GroupByArchive* msg) {
  return *msg->indirect_agg_type_change_formula_;
}
const ::TSCE::CellCoordinateArchive&
CategoryOwnerArchive_GroupByArchive::_Internal::grouping_columns_formula(const CategoryOwnerArchive_GroupByArchive* msg) {
  return *msg->grouping_columns_formula_;
}
const ::TSCE::CellCoordinateArchive&
CategoryOwnerArchive_GroupByArchive::_Internal::grouping_column_headers_formula(const CategoryOwnerArchive_GroupByArchive* msg) {
  return *msg->grouping_column_headers_formula_;
}
const ::TSCE::CellCoordinateArchive&
CategoryOwnerArchive_GroupByArchive::_Internal::aggs_in_group_root_formula(const CategoryOwnerArchive_GroupByArchive* msg) {
  return *msg->aggs_in_group_root_formula_;
}
const ::TSCE::CellCoordinateArchive&
CategoryOwnerArchive_GroupByArchive::_Internal::column_order_changed_formula(const CategoryOwnerArchive_GroupByArchive* msg) {
  return *msg->column_order_changed_formula_;
}
const ::TSCE::CellCoordinateArchive&
CategoryOwnerArchive_GroupByArchive::_Internal::row_order_changed_formula(const CategoryOwnerArchive_GroupByArchive* msg) {
  return *msg->row_order_changed_formula_;
}
const ::TSCE::CellCoordinateArchive&
CategoryOwnerArchive_GroupByArchive::_Internal::row_order_changed_ignoring_recalc_formula(const CategoryOwnerArchive_GroupByArchive* msg) {
  return *msg->row_order_changed_ignoring_recalc_formula_;
}
void CategoryOwnerArchive_GroupByArchive::clear_group_by_uid() {
  if (group_by_uid_ != nullptr) group_by_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CategoryOwnerArchive_GroupByArchive::clear_indirect_agg_type_change_formula() {
  if (indirect_agg_type_change_formula_ != nullptr) indirect_agg_type_change_formula_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CategoryOwnerArchive_GroupByArchive::clear_grouping_columns_formula() {
  if (grouping_columns_formula_ != nullptr) grouping_columns_formula_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CategoryOwnerArchive_GroupByArchive::clear_grouping_column_headers_formula() {
  if (grouping_column_headers_formula_ != nullptr) grouping_column_headers_formula_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void CategoryOwnerArchive_GroupByArchive::clear_aggs_in_group_root_formula() {
  if (aggs_in_group_root_formula_ != nullptr) aggs_in_group_root_formula_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CategoryOwnerArchive_GroupByArchive::clear_column_order_changed_formula() {
  if (column_order_changed_formula_ != nullptr) column_order_changed_formula_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void CategoryOwnerArchive_GroupByArchive::clear_row_order_changed_formula() {
  if (row_order_changed_formula_ != nullptr) row_order_changed_formula_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void CategoryOwnerArchive_GroupByArchive::clear_row_order_changed_ignoring_recalc_formula() {
  if (row_order_changed_ignoring_recalc_formula_ != nullptr) row_order_changed_ignoring_recalc_formula_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
CategoryOwnerArchive_GroupByArchive::CategoryOwnerArchive_GroupByArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  group_column_(arena),
  aggregator_(arena),
  column_agg_type_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CategoryOwnerArchive.GroupByArchive)
}
CategoryOwnerArchive_GroupByArchive::CategoryOwnerArchive_GroupByArchive(const CategoryOwnerArchive_GroupByArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      group_column_(from.group_column_),
      aggregator_(from.aggregator_),
      column_agg_type_(from.column_agg_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group_by_uid()) {
    group_by_uid_ = new ::TSP::UUID(*from.group_by_uid_);
  } else {
    group_by_uid_ = nullptr;
  }
  if (from._internal_has_group_node_root()) {
    group_node_root_ = new ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive(*from.group_node_root_);
  } else {
    group_node_root_ = nullptr;
  }
  if (from._internal_has_indirect_agg_type_change_formula()) {
    indirect_agg_type_change_formula_ = new ::TSCE::CellCoordinateArchive(*from.indirect_agg_type_change_formula_);
  } else {
    indirect_agg_type_change_formula_ = nullptr;
  }
  if (from._internal_has_grouping_columns_formula()) {
    grouping_columns_formula_ = new ::TSCE::CellCoordinateArchive(*from.grouping_columns_formula_);
  } else {
    grouping_columns_formula_ = nullptr;
  }
  if (from._internal_has_aggs_in_group_root_formula()) {
    aggs_in_group_root_formula_ = new ::TSCE::CellCoordinateArchive(*from.aggs_in_group_root_formula_);
  } else {
    aggs_in_group_root_formula_ = nullptr;
  }
  if (from._internal_has_grouping_column_headers_formula()) {
    grouping_column_headers_formula_ = new ::TSCE::CellCoordinateArchive(*from.grouping_column_headers_formula_);
  } else {
    grouping_column_headers_formula_ = nullptr;
  }
  if (from._internal_has_column_order_changed_formula()) {
    column_order_changed_formula_ = new ::TSCE::CellCoordinateArchive(*from.column_order_changed_formula_);
  } else {
    column_order_changed_formula_ = nullptr;
  }
  if (from._internal_has_row_order_changed_formula()) {
    row_order_changed_formula_ = new ::TSCE::CellCoordinateArchive(*from.row_order_changed_formula_);
  } else {
    row_order_changed_formula_ = nullptr;
  }
  if (from._internal_has_row_order_changed_ignoring_recalc_formula()) {
    row_order_changed_ignoring_recalc_formula_ = new ::TSCE::CellCoordinateArchive(*from.row_order_changed_ignoring_recalc_formula_);
  } else {
    row_order_changed_ignoring_recalc_formula_ = nullptr;
  }
  is_enabled_ = from.is_enabled_;
  // @@protoc_insertion_point(copy_constructor:TST.CategoryOwnerArchive.GroupByArchive)
}

inline void CategoryOwnerArchive_GroupByArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_by_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_enabled_) -
    reinterpret_cast<char*>(&group_by_uid_)) + sizeof(is_enabled_));
}

CategoryOwnerArchive_GroupByArchive::~CategoryOwnerArchive_GroupByArchive() {
  // @@protoc_insertion_point(destructor:TST.CategoryOwnerArchive.GroupByArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CategoryOwnerArchive_GroupByArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete group_by_uid_;
  if (this != internal_default_instance()) delete group_node_root_;
  if (this != internal_default_instance()) delete indirect_agg_type_change_formula_;
  if (this != internal_default_instance()) delete grouping_columns_formula_;
  if (this != internal_default_instance()) delete aggs_in_group_root_formula_;
  if (this != internal_default_instance()) delete grouping_column_headers_formula_;
  if (this != internal_default_instance()) delete column_order_changed_formula_;
  if (this != internal_default_instance()) delete row_order_changed_formula_;
  if (this != internal_default_instance()) delete row_order_changed_ignoring_recalc_formula_;
}

void CategoryOwnerArchive_GroupByArchive::ArenaDtor(void* object) {
  CategoryOwnerArchive_GroupByArchive* _this = reinterpret_cast< CategoryOwnerArchive_GroupByArchive* >(object);
  (void)_this;
}
void CategoryOwnerArchive_GroupByArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CategoryOwnerArchive_GroupByArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CategoryOwnerArchive_GroupByArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CategoryOwnerArchive.GroupByArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_column_.Clear();
  aggregator_.Clear();
  column_agg_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(group_by_uid_ != nullptr);
      group_by_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(group_node_root_ != nullptr);
      group_node_root_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(indirect_agg_type_change_formula_ != nullptr);
      indirect_agg_type_change_formula_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(grouping_columns_formula_ != nullptr);
      grouping_columns_formula_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(aggs_in_group_root_formula_ != nullptr);
      aggs_in_group_root_formula_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(grouping_column_headers_formula_ != nullptr);
      grouping_column_headers_formula_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(column_order_changed_formula_ != nullptr);
      column_order_changed_formula_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(row_order_changed_formula_ != nullptr);
      row_order_changed_formula_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(row_order_changed_ignoring_recalc_formula_ != nullptr);
    row_order_changed_ignoring_recalc_formula_->Clear();
  }
  is_enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryOwnerArchive_GroupByArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID group_by_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.GroupColumnArchive group_column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_column(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive group_node_root = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_node_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive aggregator = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aggregator(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TST.ColumnAggregateArchive column_agg_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_agg_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool is_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_enabled(&has_bits);
          is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordinateArchive indirect_agg_type_change_formula = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_indirect_agg_type_change_formula(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordinateArchive grouping_columns_formula = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_grouping_columns_formula(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordinateArchive aggs_in_group_root_formula = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_aggs_in_group_root_formula(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordinateArchive grouping_column_headers_formula = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_grouping_column_headers_formula(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordinateArchive column_order_changed_formula = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_order_changed_formula(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordinateArchive row_order_changed_formula = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_order_changed_formula(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordinateArchive row_order_changed_ignoring_recalc_formula = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_order_changed_ignoring_recalc_formula(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CategoryOwnerArchive_GroupByArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CategoryOwnerArchive.GroupByArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID group_by_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::group_by_uid(this), target, stream);
  }

  // repeated .TST.GroupColumnArchive group_column = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_group_column_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_group_column(i), target, stream);
  }

  // required .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive group_node_root = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::group_node_root(this), target, stream);
  }

  // repeated .TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive aggregator = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_aggregator_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_aggregator(i), target, stream);
  }

  // repeated .TST.ColumnAggregateArchive column_agg_type = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_column_agg_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_column_agg_type(i), target, stream);
  }

  // required bool is_enabled = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_enabled(), target);
  }

  // optional .TSCE.CellCoordinateArchive indirect_agg_type_change_formula = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::indirect_agg_type_change_formula(this), target, stream);
  }

  // optional .TSCE.CellCoordinateArchive grouping_columns_formula = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::grouping_columns_formula(this), target, stream);
  }

  // optional .TSCE.CellCoordinateArchive aggs_in_group_root_formula = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::aggs_in_group_root_formula(this), target, stream);
  }

  // optional .TSCE.CellCoordinateArchive grouping_column_headers_formula = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::grouping_column_headers_formula(this), target, stream);
  }

  // optional .TSCE.CellCoordinateArchive column_order_changed_formula = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::column_order_changed_formula(this), target, stream);
  }

  // optional .TSCE.CellCoordinateArchive row_order_changed_formula = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::row_order_changed_formula(this), target, stream);
  }

  // optional .TSCE.CellCoordinateArchive row_order_changed_ignoring_recalc_formula = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::row_order_changed_ignoring_recalc_formula(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CategoryOwnerArchive.GroupByArchive)
  return target;
}

size_t CategoryOwnerArchive_GroupByArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CategoryOwnerArchive.GroupByArchive)
  size_t total_size = 0;

  if (_internal_has_group_by_uid()) {
    // required .TSP.UUID group_by_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_by_uid_);
  }

  if (_internal_has_group_node_root()) {
    // required .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive group_node_root = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_node_root_);
  }

  if (_internal_has_is_enabled()) {
    // required bool is_enabled = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CategoryOwnerArchive_GroupByArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CategoryOwnerArchive.GroupByArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000203) ^ 0x00000203) == 0) {  // All required fields are present.
    // required .TSP.UUID group_by_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_by_uid_);

    // required .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive group_node_root = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_node_root_);

    // required bool is_enabled = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.GroupColumnArchive group_column = 2;
  total_size += 1UL * this->_internal_group_column_size();
  for (const auto& msg : this->group_column_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive aggregator = 4;
  total_size += 1UL * this->_internal_aggregator_size();
  for (const auto& msg : this->aggregator_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.ColumnAggregateArchive column_agg_type = 5;
  total_size += 1UL * this->_internal_column_agg_type_size();
  for (const auto& msg : this->column_agg_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    // optional .TSCE.CellCoordinateArchive indirect_agg_type_change_formula = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *indirect_agg_type_change_formula_);
    }

    // optional .TSCE.CellCoordinateArchive grouping_columns_formula = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *grouping_columns_formula_);
    }

    // optional .TSCE.CellCoordinateArchive aggs_in_group_root_formula = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aggs_in_group_root_formula_);
    }

    // optional .TSCE.CellCoordinateArchive grouping_column_headers_formula = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *grouping_column_headers_formula_);
    }

    // optional .TSCE.CellCoordinateArchive column_order_changed_formula = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *column_order_changed_formula_);
    }

    // optional .TSCE.CellCoordinateArchive row_order_changed_formula = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *row_order_changed_formula_);
    }

  }
  // optional .TSCE.CellCoordinateArchive row_order_changed_ignoring_recalc_formula = 13;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *row_order_changed_ignoring_recalc_formula_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryOwnerArchive_GroupByArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CategoryOwnerArchive_GroupByArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryOwnerArchive_GroupByArchive::GetClassData() const { return &_class_data_; }

void CategoryOwnerArchive_GroupByArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CategoryOwnerArchive_GroupByArchive *>(to)->MergeFrom(
      static_cast<const CategoryOwnerArchive_GroupByArchive &>(from));
}


void CategoryOwnerArchive_GroupByArchive::MergeFrom(const CategoryOwnerArchive_GroupByArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CategoryOwnerArchive.GroupByArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_column_.MergeFrom(from.group_column_);
  aggregator_.MergeFrom(from.aggregator_);
  column_agg_type_.MergeFrom(from.column_agg_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_group_by_uid()->::TSP::UUID::MergeFrom(from._internal_group_by_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_group_node_root()->::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::MergeFrom(from._internal_group_node_root());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_indirect_agg_type_change_formula()->::TSCE::CellCoordinateArchive::MergeFrom(from._internal_indirect_agg_type_change_formula());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_grouping_columns_formula()->::TSCE::CellCoordinateArchive::MergeFrom(from._internal_grouping_columns_formula());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_aggs_in_group_root_formula()->::TSCE::CellCoordinateArchive::MergeFrom(from._internal_aggs_in_group_root_formula());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_grouping_column_headers_formula()->::TSCE::CellCoordinateArchive::MergeFrom(from._internal_grouping_column_headers_formula());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_column_order_changed_formula()->::TSCE::CellCoordinateArchive::MergeFrom(from._internal_column_order_changed_formula());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_row_order_changed_formula()->::TSCE::CellCoordinateArchive::MergeFrom(from._internal_row_order_changed_formula());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_row_order_changed_ignoring_recalc_formula()->::TSCE::CellCoordinateArchive::MergeFrom(from._internal_row_order_changed_ignoring_recalc_formula());
    }
    if (cached_has_bits & 0x00000200u) {
      is_enabled_ = from.is_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryOwnerArchive_GroupByArchive::CopyFrom(const CategoryOwnerArchive_GroupByArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CategoryOwnerArchive.GroupByArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryOwnerArchive_GroupByArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(group_column_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(aggregator_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(column_agg_type_)) return false;
  if (_internal_has_group_by_uid()) {
    if (!group_by_uid_->IsInitialized()) return false;
  }
  if (_internal_has_group_node_root()) {
    if (!group_node_root_->IsInitialized()) return false;
  }
  return true;
}

void CategoryOwnerArchive_GroupByArchive::InternalSwap(CategoryOwnerArchive_GroupByArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  group_column_.InternalSwap(&other->group_column_);
  aggregator_.InternalSwap(&other->aggregator_);
  column_agg_type_.InternalSwap(&other->column_agg_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CategoryOwnerArchive_GroupByArchive, is_enabled_)
      + sizeof(CategoryOwnerArchive_GroupByArchive::is_enabled_)
      - PROTOBUF_FIELD_OFFSET(CategoryOwnerArchive_GroupByArchive, group_by_uid_)>(
          reinterpret_cast<char*>(&group_by_uid_),
          reinterpret_cast<char*>(&other->group_by_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryOwnerArchive_GroupByArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[127]);
}

// ===================================================================

class CategoryOwnerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CategoryOwnerArchive>()._has_bits_);
  static const ::TSP::UUID& owner_uid(const CategoryOwnerArchive* msg);
  static void set_has_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
CategoryOwnerArchive::_Internal::owner_uid(const CategoryOwnerArchive* msg) {
  return *msg->owner_uid_;
}
void CategoryOwnerArchive::clear_owner_uid() {
  if (owner_uid_ != nullptr) owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CategoryOwnerArchive::CategoryOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  group_by_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CategoryOwnerArchive)
}
CategoryOwnerArchive::CategoryOwnerArchive(const CategoryOwnerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      group_by_(from.group_by_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_uid()) {
    owner_uid_ = new ::TSP::UUID(*from.owner_uid_);
  } else {
    owner_uid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CategoryOwnerArchive)
}

inline void CategoryOwnerArchive::SharedCtor() {
owner_uid_ = nullptr;
}

CategoryOwnerArchive::~CategoryOwnerArchive() {
  // @@protoc_insertion_point(destructor:TST.CategoryOwnerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CategoryOwnerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete owner_uid_;
}

void CategoryOwnerArchive::ArenaDtor(void* object) {
  CategoryOwnerArchive* _this = reinterpret_cast< CategoryOwnerArchive* >(object);
  (void)_this;
}
void CategoryOwnerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CategoryOwnerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CategoryOwnerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CategoryOwnerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_by_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_uid_ != nullptr);
    owner_uid_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryOwnerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID owner_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.CategoryOwnerArchive.GroupByArchive group_by = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_by(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CategoryOwnerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CategoryOwnerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID owner_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::owner_uid(this), target, stream);
  }

  // repeated .TST.CategoryOwnerArchive.GroupByArchive group_by = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_group_by_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_group_by(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CategoryOwnerArchive)
  return target;
}

size_t CategoryOwnerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CategoryOwnerArchive)
  size_t total_size = 0;

  // required .TSP.UUID owner_uid = 1;
  if (_internal_has_owner_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_uid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.CategoryOwnerArchive.GroupByArchive group_by = 2;
  total_size += 1UL * this->_internal_group_by_size();
  for (const auto& msg : this->group_by_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryOwnerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CategoryOwnerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryOwnerArchive::GetClassData() const { return &_class_data_; }

void CategoryOwnerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CategoryOwnerArchive *>(to)->MergeFrom(
      static_cast<const CategoryOwnerArchive &>(from));
}


void CategoryOwnerArchive::MergeFrom(const CategoryOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CategoryOwnerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_by_.MergeFrom(from.group_by_);
  if (from._internal_has_owner_uid()) {
    _internal_mutable_owner_uid()->::TSP::UUID::MergeFrom(from._internal_owner_uid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryOwnerArchive::CopyFrom(const CategoryOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CategoryOwnerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryOwnerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(group_by_)) return false;
  if (_internal_has_owner_uid()) {
    if (!owner_uid_->IsInitialized()) return false;
  }
  return true;
}

void CategoryOwnerArchive::InternalSwap(CategoryOwnerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  group_by_.InternalSwap(&other->group_by_);
  swap(owner_uid_, other->owner_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryOwnerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[128]);
}

// ===================================================================

class RichTextPayloadArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RichTextPayloadArchive>()._has_bits_);
  static const ::TSP::Reference& storage(const RichTextPayloadArchive* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Range& range(const RichTextPayloadArchive* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::CellID& cellid(const RichTextPayloadArchive* msg);
  static void set_has_cellid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TSP::Reference&
RichTextPayloadArchive::_Internal::storage(const RichTextPayloadArchive* msg) {
  return *msg->storage_;
}
const ::TSP::Range&
RichTextPayloadArchive::_Internal::range(const RichTextPayloadArchive* msg) {
  return *msg->range_;
}
const ::TST::CellID&
RichTextPayloadArchive::_Internal::cellid(const RichTextPayloadArchive* msg) {
  return *msg->cellid_;
}
void RichTextPayloadArchive::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RichTextPayloadArchive::clear_range() {
  if (range_ != nullptr) range_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RichTextPayloadArchive::RichTextPayloadArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.RichTextPayloadArchive)
}
RichTextPayloadArchive::RichTextPayloadArchive(const RichTextPayloadArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_storage()) {
    storage_ = new ::TSP::Reference(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  if (from._internal_has_range()) {
    range_ = new ::TSP::Range(*from.range_);
  } else {
    range_ = nullptr;
  }
  if (from._internal_has_cellid()) {
    cellid_ = new ::TST::CellID(*from.cellid_);
  } else {
    cellid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.RichTextPayloadArchive)
}

inline void RichTextPayloadArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&storage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cellid_) -
    reinterpret_cast<char*>(&storage_)) + sizeof(cellid_));
}

RichTextPayloadArchive::~RichTextPayloadArchive() {
  // @@protoc_insertion_point(destructor:TST.RichTextPayloadArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RichTextPayloadArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete range_;
  if (this != internal_default_instance()) delete cellid_;
}

void RichTextPayloadArchive::ArenaDtor(void* object) {
  RichTextPayloadArchive* _this = reinterpret_cast< RichTextPayloadArchive* >(object);
  (void)_this;
}
void RichTextPayloadArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RichTextPayloadArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RichTextPayloadArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.RichTextPayloadArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(storage_ != nullptr);
      storage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(range_ != nullptr);
      range_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cellid_ != nullptr);
      cellid_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RichTextPayloadArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Range range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.CellID cellid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cellid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RichTextPayloadArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.RichTextPayloadArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference storage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::storage(this), target, stream);
  }

  // optional .TSP.Range range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::range(this), target, stream);
  }

  // required .TST.CellID cellid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cellid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.RichTextPayloadArchive)
  return target;
}

size_t RichTextPayloadArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.RichTextPayloadArchive)
  size_t total_size = 0;

  if (_internal_has_storage()) {
    // required .TSP.Reference storage = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storage_);
  }

  if (_internal_has_cellid()) {
    // required .TST.CellID cellid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cellid_);
  }

  return total_size;
}
size_t RichTextPayloadArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.RichTextPayloadArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .TSP.Reference storage = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storage_);

    // required .TST.CellID cellid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cellid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Range range = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RichTextPayloadArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RichTextPayloadArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RichTextPayloadArchive::GetClassData() const { return &_class_data_; }

void RichTextPayloadArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RichTextPayloadArchive *>(to)->MergeFrom(
      static_cast<const RichTextPayloadArchive &>(from));
}


void RichTextPayloadArchive::MergeFrom(const RichTextPayloadArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.RichTextPayloadArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_storage()->::TSP::Reference::MergeFrom(from._internal_storage());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_range()->::TSP::Range::MergeFrom(from._internal_range());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cellid()->::TST::CellID::MergeFrom(from._internal_cellid());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RichTextPayloadArchive::CopyFrom(const RichTextPayloadArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.RichTextPayloadArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RichTextPayloadArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_storage()) {
    if (!storage_->IsInitialized()) return false;
  }
  if (_internal_has_range()) {
    if (!range_->IsInitialized()) return false;
  }
  if (_internal_has_cellid()) {
    if (!cellid_->IsInitialized()) return false;
  }
  return true;
}

void RichTextPayloadArchive::InternalSwap(RichTextPayloadArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RichTextPayloadArchive, cellid_)
      + sizeof(RichTextPayloadArchive::cellid_)
      - PROTOBUF_FIELD_OFFSET(RichTextPayloadArchive, storage_)>(
          reinterpret_cast<char*>(&storage_),
          reinterpret_cast<char*>(&other->storage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RichTextPayloadArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[129]);
}

// ===================================================================

class FormulaEqualsTokenAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaEqualsTokenAttachmentArchive>()._has_bits_);
  static const ::TSWP::UIGraphicalAttachment& super(const FormulaEqualsTokenAttachmentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::UIGraphicalAttachment&
FormulaEqualsTokenAttachmentArchive::_Internal::super(const FormulaEqualsTokenAttachmentArchive* msg) {
  return *msg->super_;
}
void FormulaEqualsTokenAttachmentArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FormulaEqualsTokenAttachmentArchive::FormulaEqualsTokenAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.FormulaEqualsTokenAttachmentArchive)
}
FormulaEqualsTokenAttachmentArchive::FormulaEqualsTokenAttachmentArchive(const FormulaEqualsTokenAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::UIGraphicalAttachment(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.FormulaEqualsTokenAttachmentArchive)
}

inline void FormulaEqualsTokenAttachmentArchive::SharedCtor() {
super_ = nullptr;
}

FormulaEqualsTokenAttachmentArchive::~FormulaEqualsTokenAttachmentArchive() {
  // @@protoc_insertion_point(destructor:TST.FormulaEqualsTokenAttachmentArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FormulaEqualsTokenAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void FormulaEqualsTokenAttachmentArchive::ArenaDtor(void* object) {
  FormulaEqualsTokenAttachmentArchive* _this = reinterpret_cast< FormulaEqualsTokenAttachmentArchive* >(object);
  (void)_this;
}
void FormulaEqualsTokenAttachmentArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormulaEqualsTokenAttachmentArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormulaEqualsTokenAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FormulaEqualsTokenAttachmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaEqualsTokenAttachmentArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.UIGraphicalAttachment super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormulaEqualsTokenAttachmentArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FormulaEqualsTokenAttachmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.UIGraphicalAttachment super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FormulaEqualsTokenAttachmentArchive)
  return target;
}

size_t FormulaEqualsTokenAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FormulaEqualsTokenAttachmentArchive)
  size_t total_size = 0;

  // required .TSWP.UIGraphicalAttachment super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaEqualsTokenAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FormulaEqualsTokenAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaEqualsTokenAttachmentArchive::GetClassData() const { return &_class_data_; }

void FormulaEqualsTokenAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FormulaEqualsTokenAttachmentArchive *>(to)->MergeFrom(
      static_cast<const FormulaEqualsTokenAttachmentArchive &>(from));
}


void FormulaEqualsTokenAttachmentArchive::MergeFrom(const FormulaEqualsTokenAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.FormulaEqualsTokenAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSWP::UIGraphicalAttachment::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaEqualsTokenAttachmentArchive::CopyFrom(const FormulaEqualsTokenAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FormulaEqualsTokenAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaEqualsTokenAttachmentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FormulaEqualsTokenAttachmentArchive::InternalSwap(FormulaEqualsTokenAttachmentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaEqualsTokenAttachmentArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[130]);
}

// ===================================================================

class CellFillStandIn::_Internal {
 public:
  using HasBits = decltype(std::declval<CellFillStandIn>()._has_bits_);
  static const ::TSD::FillArchive& fill(const CellFillStandIn* msg);
  static void set_has_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type_is_mixed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_color_has_been_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_color_is_mixed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_first_color_has_been_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_first_color_is_mixed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_last_color_has_been_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_last_color_is_mixed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_gradient_type_has_been_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_gradient_type_is_mixed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_gradient_angle_has_been_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_gradient_angle_is_mixed(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_image_data_has_been_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_image_data_is_mixed(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tint_color_has_been_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tint_color_is_mixed(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_scale_has_been_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_scale_is_mixed(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_technique_has_been_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_technique_is_mixed(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::FillArchive&
CellFillStandIn::_Internal::fill(const CellFillStandIn* msg) {
  return *msg->fill_;
}
void CellFillStandIn::clear_fill() {
  if (fill_ != nullptr) fill_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CellFillStandIn::CellFillStandIn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CellFillStandIn)
}
CellFillStandIn::CellFillStandIn(const CellFillStandIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fill()) {
    fill_ = new ::TSD::FillArchive(*from.fill_);
  } else {
    fill_ = nullptr;
  }
  ::memcpy(&type_is_mixed_, &from.type_is_mixed_,
    static_cast<size_t>(reinterpret_cast<char*>(&technique_is_mixed_) -
    reinterpret_cast<char*>(&type_is_mixed_)) + sizeof(technique_is_mixed_));
  // @@protoc_insertion_point(copy_constructor:TST.CellFillStandIn)
}

inline void CellFillStandIn::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fill_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&technique_is_mixed_) -
    reinterpret_cast<char*>(&fill_)) + sizeof(technique_is_mixed_));
}

CellFillStandIn::~CellFillStandIn() {
  // @@protoc_insertion_point(destructor:TST.CellFillStandIn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellFillStandIn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete fill_;
}

void CellFillStandIn::ArenaDtor(void* object) {
  CellFillStandIn* _this = reinterpret_cast< CellFillStandIn* >(object);
  (void)_this;
}
void CellFillStandIn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellFillStandIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellFillStandIn::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellFillStandIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(fill_ != nullptr);
    fill_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&type_is_mixed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_color_is_mixed_) -
        reinterpret_cast<char*>(&type_is_mixed_)) + sizeof(last_color_is_mixed_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&gradient_type_has_been_modified_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tint_color_is_mixed_) -
        reinterpret_cast<char*>(&gradient_type_has_been_modified_)) + sizeof(tint_color_is_mixed_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&scale_has_been_modified_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&technique_is_mixed_) -
        reinterpret_cast<char*>(&scale_has_been_modified_)) + sizeof(technique_is_mixed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellFillStandIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.FillArchive fill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool type_is_mixed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_type_is_mixed(&has_bits);
          type_is_mixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool color_has_been_modified = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_color_has_been_modified(&has_bits);
          color_has_been_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool color_is_mixed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_color_is_mixed(&has_bits);
          color_is_mixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool first_color_has_been_modified = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_first_color_has_been_modified(&has_bits);
          first_color_has_been_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool first_color_is_mixed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_first_color_is_mixed(&has_bits);
          first_color_is_mixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool last_color_has_been_modified = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_last_color_has_been_modified(&has_bits);
          last_color_has_been_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool last_color_is_mixed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_last_color_is_mixed(&has_bits);
          last_color_is_mixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gradient_type_has_been_modified = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_gradient_type_has_been_modified(&has_bits);
          gradient_type_has_been_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gradient_type_is_mixed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_gradient_type_is_mixed(&has_bits);
          gradient_type_is_mixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gradient_angle_has_been_modified = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_gradient_angle_has_been_modified(&has_bits);
          gradient_angle_has_been_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gradient_angle_is_mixed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_gradient_angle_is_mixed(&has_bits);
          gradient_angle_is_mixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool image_data_has_been_modified = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_image_data_has_been_modified(&has_bits);
          image_data_has_been_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool image_data_is_mixed = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_image_data_is_mixed(&has_bits);
          image_data_is_mixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tint_color_has_been_modified = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_tint_color_has_been_modified(&has_bits);
          tint_color_has_been_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tint_color_is_mixed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_tint_color_is_mixed(&has_bits);
          tint_color_is_mixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool scale_has_been_modified = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_scale_has_been_modified(&has_bits);
          scale_has_been_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool scale_is_mixed = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_scale_is_mixed(&has_bits);
          scale_is_mixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool technique_has_been_modified = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_technique_has_been_modified(&has_bits);
          technique_has_been_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool technique_is_mixed = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_technique_is_mixed(&has_bits);
          technique_is_mixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellFillStandIn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellFillStandIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.FillArchive fill = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fill(this), target, stream);
  }

  // optional bool type_is_mixed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_type_is_mixed(), target);
  }

  // optional bool color_has_been_modified = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_color_has_been_modified(), target);
  }

  // optional bool color_is_mixed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_color_is_mixed(), target);
  }

  // optional bool first_color_has_been_modified = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_first_color_has_been_modified(), target);
  }

  // optional bool first_color_is_mixed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_first_color_is_mixed(), target);
  }

  // optional bool last_color_has_been_modified = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_last_color_has_been_modified(), target);
  }

  // optional bool last_color_is_mixed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_last_color_is_mixed(), target);
  }

  // optional bool gradient_type_has_been_modified = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_gradient_type_has_been_modified(), target);
  }

  // optional bool gradient_type_is_mixed = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_gradient_type_is_mixed(), target);
  }

  // optional bool gradient_angle_has_been_modified = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_gradient_angle_has_been_modified(), target);
  }

  // optional bool gradient_angle_is_mixed = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_gradient_angle_is_mixed(), target);
  }

  // optional bool image_data_has_been_modified = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_image_data_has_been_modified(), target);
  }

  // optional bool image_data_is_mixed = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_image_data_is_mixed(), target);
  }

  // optional bool tint_color_has_been_modified = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_tint_color_has_been_modified(), target);
  }

  // optional bool tint_color_is_mixed = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_tint_color_is_mixed(), target);
  }

  // optional bool scale_has_been_modified = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_scale_has_been_modified(), target);
  }

  // optional bool scale_is_mixed = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_scale_is_mixed(), target);
  }

  // optional bool technique_has_been_modified = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_technique_has_been_modified(), target);
  }

  // optional bool technique_is_mixed = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_technique_is_mixed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellFillStandIn)
  return target;
}

size_t CellFillStandIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellFillStandIn)
  size_t total_size = 0;

  // required .TSD.FillArchive fill = 1;
  if (_internal_has_fill()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fill_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional bool type_is_mixed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool color_has_been_modified = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool color_is_mixed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool first_color_has_been_modified = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool first_color_is_mixed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool last_color_has_been_modified = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool last_color_is_mixed = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool gradient_type_has_been_modified = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool gradient_type_is_mixed = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool gradient_angle_has_been_modified = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool gradient_angle_is_mixed = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool image_data_has_been_modified = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool image_data_is_mixed = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool tint_color_has_been_modified = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool tint_color_is_mixed = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional bool scale_has_been_modified = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool scale_is_mixed = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool technique_has_been_modified = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool technique_is_mixed = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellFillStandIn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellFillStandIn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellFillStandIn::GetClassData() const { return &_class_data_; }

void CellFillStandIn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CellFillStandIn *>(to)->MergeFrom(
      static_cast<const CellFillStandIn &>(from));
}


void CellFillStandIn::MergeFrom(const CellFillStandIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CellFillStandIn)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fill()->::TSD::FillArchive::MergeFrom(from._internal_fill());
    }
    if (cached_has_bits & 0x00000002u) {
      type_is_mixed_ = from.type_is_mixed_;
    }
    if (cached_has_bits & 0x00000004u) {
      color_has_been_modified_ = from.color_has_been_modified_;
    }
    if (cached_has_bits & 0x00000008u) {
      color_is_mixed_ = from.color_is_mixed_;
    }
    if (cached_has_bits & 0x00000010u) {
      first_color_has_been_modified_ = from.first_color_has_been_modified_;
    }
    if (cached_has_bits & 0x00000020u) {
      first_color_is_mixed_ = from.first_color_is_mixed_;
    }
    if (cached_has_bits & 0x00000040u) {
      last_color_has_been_modified_ = from.last_color_has_been_modified_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_color_is_mixed_ = from.last_color_is_mixed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      gradient_type_has_been_modified_ = from.gradient_type_has_been_modified_;
    }
    if (cached_has_bits & 0x00000200u) {
      gradient_type_is_mixed_ = from.gradient_type_is_mixed_;
    }
    if (cached_has_bits & 0x00000400u) {
      gradient_angle_has_been_modified_ = from.gradient_angle_has_been_modified_;
    }
    if (cached_has_bits & 0x00000800u) {
      gradient_angle_is_mixed_ = from.gradient_angle_is_mixed_;
    }
    if (cached_has_bits & 0x00001000u) {
      image_data_has_been_modified_ = from.image_data_has_been_modified_;
    }
    if (cached_has_bits & 0x00002000u) {
      image_data_is_mixed_ = from.image_data_is_mixed_;
    }
    if (cached_has_bits & 0x00004000u) {
      tint_color_has_been_modified_ = from.tint_color_has_been_modified_;
    }
    if (cached_has_bits & 0x00008000u) {
      tint_color_is_mixed_ = from.tint_color_is_mixed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      scale_has_been_modified_ = from.scale_has_been_modified_;
    }
    if (cached_has_bits & 0x00020000u) {
      scale_is_mixed_ = from.scale_is_mixed_;
    }
    if (cached_has_bits & 0x00040000u) {
      technique_has_been_modified_ = from.technique_has_been_modified_;
    }
    if (cached_has_bits & 0x00080000u) {
      technique_is_mixed_ = from.technique_is_mixed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellFillStandIn::CopyFrom(const CellFillStandIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellFillStandIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellFillStandIn::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_fill()) {
    if (!fill_->IsInitialized()) return false;
  }
  return true;
}

void CellFillStandIn::InternalSwap(CellFillStandIn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellFillStandIn, technique_is_mixed_)
      + sizeof(CellFillStandIn::technique_is_mixed_)
      - PROTOBUF_FIELD_OFFSET(CellFillStandIn, fill_)>(
          reinterpret_cast<char*>(&fill_),
          reinterpret_cast<char*>(&other->fill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellFillStandIn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[131]);
}

// ===================================================================

class FormulaSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaSelectionArchive>()._has_bits_);
  static const ::TSWP::SelectionArchive& super(const FormulaSelectionArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_activetokencharindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::SelectionArchive&
FormulaSelectionArchive::_Internal::super(const FormulaSelectionArchive* msg) {
  return *msg->super_;
}
void FormulaSelectionArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FormulaSelectionArchive::FormulaSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.FormulaSelectionArchive)
}
FormulaSelectionArchive::FormulaSelectionArchive(const FormulaSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::SelectionArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  activetokencharindex_ = from.activetokencharindex_;
  // @@protoc_insertion_point(copy_constructor:TST.FormulaSelectionArchive)
}

inline void FormulaSelectionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&activetokencharindex_) -
    reinterpret_cast<char*>(&super_)) + sizeof(activetokencharindex_));
}

FormulaSelectionArchive::~FormulaSelectionArchive() {
  // @@protoc_insertion_point(destructor:TST.FormulaSelectionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FormulaSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void FormulaSelectionArchive::ArenaDtor(void* object) {
  FormulaSelectionArchive* _this = reinterpret_cast< FormulaSelectionArchive* >(object);
  (void)_this;
}
void FormulaSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormulaSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormulaSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FormulaSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  activetokencharindex_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.SelectionArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 activeTokenCharIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_activetokencharindex(&has_bits);
          activetokencharindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormulaSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FormulaSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.SelectionArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 activeTokenCharIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_activetokencharindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FormulaSelectionArchive)
  return target;
}

size_t FormulaSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FormulaSelectionArchive)
  size_t total_size = 0;

  // required .TSWP.SelectionArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 activeTokenCharIndex = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_activetokencharindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FormulaSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaSelectionArchive::GetClassData() const { return &_class_data_; }

void FormulaSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FormulaSelectionArchive *>(to)->MergeFrom(
      static_cast<const FormulaSelectionArchive &>(from));
}


void FormulaSelectionArchive::MergeFrom(const FormulaSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.FormulaSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSWP::SelectionArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      activetokencharindex_ = from.activetokencharindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaSelectionArchive::CopyFrom(const FormulaSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FormulaSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaSelectionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void FormulaSelectionArchive::InternalSwap(FormulaSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaSelectionArchive, activetokencharindex_)
      + sizeof(FormulaSelectionArchive::activetokencharindex_)
      - PROTOBUF_FIELD_OFFSET(FormulaSelectionArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[132]);
}

// ===================================================================

class CellBorderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellBorderArchive>()._has_bits_);
  static const ::TSD::StrokeArchive& top_stroke(const CellBorderArchive* msg);
  static void set_has_top_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top_stroke_order(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::StrokeArchive& right_stroke(const CellBorderArchive* msg);
  static void set_has_right_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_right_stroke_order(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::StrokeArchive& bottom_stroke(const CellBorderArchive* msg);
  static void set_has_bottom_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bottom_stroke_order(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::StrokeArchive& left_stroke(const CellBorderArchive* msg);
  static void set_has_left_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_left_stroke_order(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::TSD::StrokeArchive&
CellBorderArchive::_Internal::top_stroke(const CellBorderArchive* msg) {
  return *msg->top_stroke_;
}
const ::TSD::StrokeArchive&
CellBorderArchive::_Internal::right_stroke(const CellBorderArchive* msg) {
  return *msg->right_stroke_;
}
const ::TSD::StrokeArchive&
CellBorderArchive::_Internal::bottom_stroke(const CellBorderArchive* msg) {
  return *msg->bottom_stroke_;
}
const ::TSD::StrokeArchive&
CellBorderArchive::_Internal::left_stroke(const CellBorderArchive* msg) {
  return *msg->left_stroke_;
}
void CellBorderArchive::clear_top_stroke() {
  if (top_stroke_ != nullptr) top_stroke_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CellBorderArchive::clear_right_stroke() {
  if (right_stroke_ != nullptr) right_stroke_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CellBorderArchive::clear_bottom_stroke() {
  if (bottom_stroke_ != nullptr) bottom_stroke_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CellBorderArchive::clear_left_stroke() {
  if (left_stroke_ != nullptr) left_stroke_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CellBorderArchive::CellBorderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CellBorderArchive)
}
CellBorderArchive::CellBorderArchive(const CellBorderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_top_stroke()) {
    top_stroke_ = new ::TSD::StrokeArchive(*from.top_stroke_);
  } else {
    top_stroke_ = nullptr;
  }
  if (from._internal_has_right_stroke()) {
    right_stroke_ = new ::TSD::StrokeArchive(*from.right_stroke_);
  } else {
    right_stroke_ = nullptr;
  }
  if (from._internal_has_bottom_stroke()) {
    bottom_stroke_ = new ::TSD::StrokeArchive(*from.bottom_stroke_);
  } else {
    bottom_stroke_ = nullptr;
  }
  if (from._internal_has_left_stroke()) {
    left_stroke_ = new ::TSD::StrokeArchive(*from.left_stroke_);
  } else {
    left_stroke_ = nullptr;
  }
  ::memcpy(&top_stroke_order_, &from.top_stroke_order_,
    static_cast<size_t>(reinterpret_cast<char*>(&left_stroke_order_) -
    reinterpret_cast<char*>(&top_stroke_order_)) + sizeof(left_stroke_order_));
  // @@protoc_insertion_point(copy_constructor:TST.CellBorderArchive)
}

inline void CellBorderArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&top_stroke_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&left_stroke_order_) -
    reinterpret_cast<char*>(&top_stroke_)) + sizeof(left_stroke_order_));
}

CellBorderArchive::~CellBorderArchive() {
  // @@protoc_insertion_point(destructor:TST.CellBorderArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellBorderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete top_stroke_;
  if (this != internal_default_instance()) delete right_stroke_;
  if (this != internal_default_instance()) delete bottom_stroke_;
  if (this != internal_default_instance()) delete left_stroke_;
}

void CellBorderArchive::ArenaDtor(void* object) {
  CellBorderArchive* _this = reinterpret_cast< CellBorderArchive* >(object);
  (void)_this;
}
void CellBorderArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellBorderArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellBorderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellBorderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(top_stroke_ != nullptr);
      top_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(right_stroke_ != nullptr);
      right_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bottom_stroke_ != nullptr);
      bottom_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(left_stroke_ != nullptr);
      left_stroke_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&top_stroke_order_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&left_stroke_order_) -
        reinterpret_cast<char*>(&top_stroke_order_)) + sizeof(left_stroke_order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellBorderArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.StrokeArchive top_stroke = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_stroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 top_stroke_order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_top_stroke_order(&has_bits);
          top_stroke_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive right_stroke = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_stroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 right_stroke_order = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_right_stroke_order(&has_bits);
          right_stroke_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive bottom_stroke = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottom_stroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bottom_stroke_order = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_bottom_stroke_order(&has_bits);
          bottom_stroke_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive left_stroke = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_stroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 left_stroke_order = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_left_stroke_order(&has_bits);
          left_stroke_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellBorderArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellBorderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.StrokeArchive top_stroke = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::top_stroke(this), target, stream);
  }

  // optional int32 top_stroke_order = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_top_stroke_order(), target);
  }

  // optional .TSD.StrokeArchive right_stroke = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right_stroke(this), target, stream);
  }

  // optional int32 right_stroke_order = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_right_stroke_order(), target);
  }

  // optional .TSD.StrokeArchive bottom_stroke = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bottom_stroke(this), target, stream);
  }

  // optional int32 bottom_stroke_order = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_bottom_stroke_order(), target);
  }

  // optional .TSD.StrokeArchive left_stroke = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::left_stroke(this), target, stream);
  }

  // optional int32 left_stroke_order = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_left_stroke_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellBorderArchive)
  return target;
}

size_t CellBorderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellBorderArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSD.StrokeArchive top_stroke = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *top_stroke_);
    }

    // optional .TSD.StrokeArchive right_stroke = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *right_stroke_);
    }

    // optional .TSD.StrokeArchive bottom_stroke = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bottom_stroke_);
    }

    // optional .TSD.StrokeArchive left_stroke = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *left_stroke_);
    }

    // optional int32 top_stroke_order = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_top_stroke_order());
    }

    // optional int32 right_stroke_order = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_right_stroke_order());
    }

    // optional int32 bottom_stroke_order = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bottom_stroke_order());
    }

    // optional int32 left_stroke_order = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_left_stroke_order());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellBorderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellBorderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellBorderArchive::GetClassData() const { return &_class_data_; }

void CellBorderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CellBorderArchive *>(to)->MergeFrom(
      static_cast<const CellBorderArchive &>(from));
}


void CellBorderArchive::MergeFrom(const CellBorderArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CellBorderArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_top_stroke()->::TSD::StrokeArchive::MergeFrom(from._internal_top_stroke());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_right_stroke()->::TSD::StrokeArchive::MergeFrom(from._internal_right_stroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_bottom_stroke()->::TSD::StrokeArchive::MergeFrom(from._internal_bottom_stroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_left_stroke()->::TSD::StrokeArchive::MergeFrom(from._internal_left_stroke());
    }
    if (cached_has_bits & 0x00000010u) {
      top_stroke_order_ = from.top_stroke_order_;
    }
    if (cached_has_bits & 0x00000020u) {
      right_stroke_order_ = from.right_stroke_order_;
    }
    if (cached_has_bits & 0x00000040u) {
      bottom_stroke_order_ = from.bottom_stroke_order_;
    }
    if (cached_has_bits & 0x00000080u) {
      left_stroke_order_ = from.left_stroke_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellBorderArchive::CopyFrom(const CellBorderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellBorderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellBorderArchive::IsInitialized() const {
  if (_internal_has_top_stroke()) {
    if (!top_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_right_stroke()) {
    if (!right_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_bottom_stroke()) {
    if (!bottom_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_left_stroke()) {
    if (!left_stroke_->IsInitialized()) return false;
  }
  return true;
}

void CellBorderArchive::InternalSwap(CellBorderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellBorderArchive, left_stroke_order_)
      + sizeof(CellBorderArchive::left_stroke_order_)
      - PROTOBUF_FIELD_OFFSET(CellBorderArchive, top_stroke_)>(
          reinterpret_cast<char*>(&top_stroke_),
          reinterpret_cast<char*>(&other->top_stroke_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellBorderArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[133]);
}

// ===================================================================

class DefaultCellStylesContainerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DefaultCellStylesContainerArchive>()._has_bits_);
  static const ::TSP::Reference& table_style_network(const DefaultCellStylesContainerArchive* msg);
  static void set_has_table_style_network(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
DefaultCellStylesContainerArchive::_Internal::table_style_network(const DefaultCellStylesContainerArchive* msg) {
  return *msg->table_style_network_;
}
void DefaultCellStylesContainerArchive::clear_table_style_network() {
  if (table_style_network_ != nullptr) table_style_network_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DefaultCellStylesContainerArchive::clear_header_row_uids() {
  header_row_uids_.Clear();
}
void DefaultCellStylesContainerArchive::clear_footer_row_uids() {
  footer_row_uids_.Clear();
}
void DefaultCellStylesContainerArchive::clear_header_column_uids() {
  header_column_uids_.Clear();
}
DefaultCellStylesContainerArchive::DefaultCellStylesContainerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  header_row_uids_(arena),
  footer_row_uids_(arena),
  header_column_uids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.DefaultCellStylesContainerArchive)
}
DefaultCellStylesContainerArchive::DefaultCellStylesContainerArchive(const DefaultCellStylesContainerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      header_row_uids_(from.header_row_uids_),
      footer_row_uids_(from.footer_row_uids_),
      header_column_uids_(from.header_column_uids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_style_network()) {
    table_style_network_ = new ::TSP::Reference(*from.table_style_network_);
  } else {
    table_style_network_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.DefaultCellStylesContainerArchive)
}

inline void DefaultCellStylesContainerArchive::SharedCtor() {
table_style_network_ = nullptr;
}

DefaultCellStylesContainerArchive::~DefaultCellStylesContainerArchive() {
  // @@protoc_insertion_point(destructor:TST.DefaultCellStylesContainerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DefaultCellStylesContainerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete table_style_network_;
}

void DefaultCellStylesContainerArchive::ArenaDtor(void* object) {
  DefaultCellStylesContainerArchive* _this = reinterpret_cast< DefaultCellStylesContainerArchive* >(object);
  (void)_this;
}
void DefaultCellStylesContainerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DefaultCellStylesContainerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DefaultCellStylesContainerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.DefaultCellStylesContainerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  header_row_uids_.Clear();
  footer_row_uids_.Clear();
  header_column_uids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(table_style_network_ != nullptr);
    table_style_network_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefaultCellStylesContainerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference table_style_network = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_style_network(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID header_row_uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_header_row_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID footer_row_uids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_footer_row_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID header_column_uids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_header_column_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefaultCellStylesContainerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.DefaultCellStylesContainerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference table_style_network = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::table_style_network(this), target, stream);
  }

  // repeated .TSP.UUID header_row_uids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_header_row_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_header_row_uids(i), target, stream);
  }

  // repeated .TSP.UUID footer_row_uids = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_footer_row_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_footer_row_uids(i), target, stream);
  }

  // repeated .TSP.UUID header_column_uids = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_header_column_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_header_column_uids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.DefaultCellStylesContainerArchive)
  return target;
}

size_t DefaultCellStylesContainerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.DefaultCellStylesContainerArchive)
  size_t total_size = 0;

  // required .TSP.Reference table_style_network = 1;
  if (_internal_has_table_style_network()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_style_network_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID header_row_uids = 2;
  total_size += 1UL * this->_internal_header_row_uids_size();
  for (const auto& msg : this->header_row_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID footer_row_uids = 3;
  total_size += 1UL * this->_internal_footer_row_uids_size();
  for (const auto& msg : this->footer_row_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID header_column_uids = 4;
  total_size += 1UL * this->_internal_header_column_uids_size();
  for (const auto& msg : this->header_column_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DefaultCellStylesContainerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DefaultCellStylesContainerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DefaultCellStylesContainerArchive::GetClassData() const { return &_class_data_; }

void DefaultCellStylesContainerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DefaultCellStylesContainerArchive *>(to)->MergeFrom(
      static_cast<const DefaultCellStylesContainerArchive &>(from));
}


void DefaultCellStylesContainerArchive::MergeFrom(const DefaultCellStylesContainerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.DefaultCellStylesContainerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  header_row_uids_.MergeFrom(from.header_row_uids_);
  footer_row_uids_.MergeFrom(from.footer_row_uids_);
  header_column_uids_.MergeFrom(from.header_column_uids_);
  if (from._internal_has_table_style_network()) {
    _internal_mutable_table_style_network()->::TSP::Reference::MergeFrom(from._internal_table_style_network());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DefaultCellStylesContainerArchive::CopyFrom(const DefaultCellStylesContainerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.DefaultCellStylesContainerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultCellStylesContainerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(header_row_uids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(footer_row_uids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(header_column_uids_)) return false;
  if (_internal_has_table_style_network()) {
    if (!table_style_network_->IsInitialized()) return false;
  }
  return true;
}

void DefaultCellStylesContainerArchive::InternalSwap(DefaultCellStylesContainerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  header_row_uids_.InternalSwap(&other->header_row_uids_);
  footer_row_uids_.InternalSwap(&other->footer_row_uids_);
  header_column_uids_.InternalSwap(&other->header_column_uids_);
  swap(table_style_network_, other->table_style_network_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefaultCellStylesContainerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[134]);
}

// ===================================================================

class MultiTableRemapperArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiTableRemapperArchive>()._has_bits_);
  static void set_has_mapping_purpose(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_should_steal_references(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_reuse_table_names(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUIDMapArchive& backing_tables_for_charts(const MultiTableRemapperArchive* msg);
  static void set_has_backing_tables_for_charts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cross_document_paste(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_nested_inner_mapper(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::TSP::UUIDMapArchive&
MultiTableRemapperArchive::_Internal::backing_tables_for_charts(const MultiTableRemapperArchive* msg) {
  return *msg->backing_tables_for_charts_;
}
void MultiTableRemapperArchive::clear_owner_uid_mapper() {
  owner_uid_mapper_.Clear();
}
void MultiTableRemapperArchive::clear_backing_tables_for_charts() {
  if (backing_tables_for_charts_ != nullptr) backing_tables_for_charts_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MultiTableRemapperArchive::MultiTableRemapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  owner_uid_mapper_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.MultiTableRemapperArchive)
}
MultiTableRemapperArchive::MultiTableRemapperArchive(const MultiTableRemapperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      owner_uid_mapper_(from.owner_uid_mapper_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_backing_tables_for_charts()) {
    backing_tables_for_charts_ = new ::TSP::UUIDMapArchive(*from.backing_tables_for_charts_);
  } else {
    backing_tables_for_charts_ = nullptr;
  }
  ::memcpy(&mapping_purpose_, &from.mapping_purpose_,
    static_cast<size_t>(reinterpret_cast<char*>(&nested_inner_mapper_) -
    reinterpret_cast<char*>(&mapping_purpose_)) + sizeof(nested_inner_mapper_));
  // @@protoc_insertion_point(copy_constructor:TST.MultiTableRemapperArchive)
}

inline void MultiTableRemapperArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&backing_tables_for_charts_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nested_inner_mapper_) -
    reinterpret_cast<char*>(&backing_tables_for_charts_)) + sizeof(nested_inner_mapper_));
}

MultiTableRemapperArchive::~MultiTableRemapperArchive() {
  // @@protoc_insertion_point(destructor:TST.MultiTableRemapperArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiTableRemapperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete backing_tables_for_charts_;
}

void MultiTableRemapperArchive::ArenaDtor(void* object) {
  MultiTableRemapperArchive* _this = reinterpret_cast< MultiTableRemapperArchive* >(object);
  (void)_this;
}
void MultiTableRemapperArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiTableRemapperArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiTableRemapperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.MultiTableRemapperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_uid_mapper_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(backing_tables_for_charts_ != nullptr);
    backing_tables_for_charts_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&mapping_purpose_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nested_inner_mapper_) -
        reinterpret_cast<char*>(&mapping_purpose_)) + sizeof(nested_inner_mapper_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiTableRemapperArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.MultiTableRemapperArchive.Purpose mapping_purpose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::MultiTableRemapperArchive_Purpose_IsValid(val))) {
            _internal_set_mapping_purpose(static_cast<::TST::MultiTableRemapperArchive_Purpose>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bool should_steal_references = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_should_steal_references(&has_bits);
          should_steal_references_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool can_reuse_table_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_can_reuse_table_names(&has_bits);
          can_reuse_table_names_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.OwnerUIDMapperArchive owner_uid_mapper = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owner_uid_mapper(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDMapArchive backing_tables_for_charts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_backing_tables_for_charts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool cross_document_paste = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_cross_document_paste(&has_bits);
          cross_document_paste_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool nested_inner_mapper = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_nested_inner_mapper(&has_bits);
          nested_inner_mapper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiTableRemapperArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.MultiTableRemapperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.MultiTableRemapperArchive.Purpose mapping_purpose = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mapping_purpose(), target);
  }

  // required bool should_steal_references = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_should_steal_references(), target);
  }

  // required bool can_reuse_table_names = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_can_reuse_table_names(), target);
  }

  // repeated .TSCE.OwnerUIDMapperArchive owner_uid_mapper = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_owner_uid_mapper_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_owner_uid_mapper(i), target, stream);
  }

  // required .TSP.UUIDMapArchive backing_tables_for_charts = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::backing_tables_for_charts(this), target, stream);
  }

  // required bool cross_document_paste = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_cross_document_paste(), target);
  }

  // required bool nested_inner_mapper = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_nested_inner_mapper(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.MultiTableRemapperArchive)
  return target;
}

size_t MultiTableRemapperArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.MultiTableRemapperArchive)
  size_t total_size = 0;

  if (_internal_has_backing_tables_for_charts()) {
    // required .TSP.UUIDMapArchive backing_tables_for_charts = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *backing_tables_for_charts_);
  }

  if (_internal_has_mapping_purpose()) {
    // required .TST.MultiTableRemapperArchive.Purpose mapping_purpose = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mapping_purpose());
  }

  if (_internal_has_should_steal_references()) {
    // required bool should_steal_references = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_can_reuse_table_names()) {
    // required bool can_reuse_table_names = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_cross_document_paste()) {
    // required bool cross_document_paste = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_nested_inner_mapper()) {
    // required bool nested_inner_mapper = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t MultiTableRemapperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.MultiTableRemapperArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .TSP.UUIDMapArchive backing_tables_for_charts = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *backing_tables_for_charts_);

    // required .TST.MultiTableRemapperArchive.Purpose mapping_purpose = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mapping_purpose());

    // required bool should_steal_references = 2;
    total_size += 1 + 1;

    // required bool can_reuse_table_names = 3;
    total_size += 1 + 1;

    // required bool cross_document_paste = 6;
    total_size += 1 + 1;

    // required bool nested_inner_mapper = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.OwnerUIDMapperArchive owner_uid_mapper = 4;
  total_size += 1UL * this->_internal_owner_uid_mapper_size();
  for (const auto& msg : this->owner_uid_mapper_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiTableRemapperArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiTableRemapperArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiTableRemapperArchive::GetClassData() const { return &_class_data_; }

void MultiTableRemapperArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MultiTableRemapperArchive *>(to)->MergeFrom(
      static_cast<const MultiTableRemapperArchive &>(from));
}


void MultiTableRemapperArchive::MergeFrom(const MultiTableRemapperArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.MultiTableRemapperArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  owner_uid_mapper_.MergeFrom(from.owner_uid_mapper_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_backing_tables_for_charts()->::TSP::UUIDMapArchive::MergeFrom(from._internal_backing_tables_for_charts());
    }
    if (cached_has_bits & 0x00000002u) {
      mapping_purpose_ = from.mapping_purpose_;
    }
    if (cached_has_bits & 0x00000004u) {
      should_steal_references_ = from.should_steal_references_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_reuse_table_names_ = from.can_reuse_table_names_;
    }
    if (cached_has_bits & 0x00000010u) {
      cross_document_paste_ = from.cross_document_paste_;
    }
    if (cached_has_bits & 0x00000020u) {
      nested_inner_mapper_ = from.nested_inner_mapper_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiTableRemapperArchive::CopyFrom(const MultiTableRemapperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.MultiTableRemapperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiTableRemapperArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(owner_uid_mapper_)) return false;
  if (_internal_has_backing_tables_for_charts()) {
    if (!backing_tables_for_charts_->IsInitialized()) return false;
  }
  return true;
}

void MultiTableRemapperArchive::InternalSwap(MultiTableRemapperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  owner_uid_mapper_.InternalSwap(&other->owner_uid_mapper_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiTableRemapperArchive, nested_inner_mapper_)
      + sizeof(MultiTableRemapperArchive::nested_inner_mapper_)
      - PROTOBUF_FIELD_OFFSET(MultiTableRemapperArchive, backing_tables_for_charts_)>(
          reinterpret_cast<char*>(&backing_tables_for_charts_),
          reinterpret_cast<char*>(&other->backing_tables_for_charts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiTableRemapperArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[135]);
}

// ===================================================================

class ChangePropagationMapWrapper::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangePropagationMapWrapper>()._has_bits_);
  static void set_has_replacement_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& table_preset_replace_prototype(const ChangePropagationMapWrapper* msg);
  static void set_has_table_preset_replace_prototype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& table_preset_replace_replacement(const ChangePropagationMapWrapper* msg);
  static void set_has_table_preset_replace_replacement(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& table_preset_delete_prototype(const ChangePropagationMapWrapper* msg);
  static void set_has_table_preset_delete_prototype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& table_preset_delete_replacement(const ChangePropagationMapWrapper* msg);
  static void set_has_table_preset_delete_replacement(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::TSP::Reference&
ChangePropagationMapWrapper::_Internal::table_preset_replace_prototype(const ChangePropagationMapWrapper* msg) {
  return *msg->table_preset_replace_prototype_;
}
const ::TSP::Reference&
ChangePropagationMapWrapper::_Internal::table_preset_replace_replacement(const ChangePropagationMapWrapper* msg) {
  return *msg->table_preset_replace_replacement_;
}
const ::TSP::Reference&
ChangePropagationMapWrapper::_Internal::table_preset_delete_prototype(const ChangePropagationMapWrapper* msg) {
  return *msg->table_preset_delete_prototype_;
}
const ::TSP::Reference&
ChangePropagationMapWrapper::_Internal::table_preset_delete_replacement(const ChangePropagationMapWrapper* msg) {
  return *msg->table_preset_delete_replacement_;
}
void ChangePropagationMapWrapper::clear_style_replace_prototypes() {
  style_replace_prototypes_.Clear();
}
void ChangePropagationMapWrapper::clear_style_replace_replacements() {
  style_replace_replacements_.Clear();
}
void ChangePropagationMapWrapper::clear_style_modify_styles() {
  style_modify_styles_.Clear();
}
void ChangePropagationMapWrapper::clear_style_modify_old_prop_maps() {
  style_modify_old_prop_maps_.Clear();
}
void ChangePropagationMapWrapper::clear_style_modify_new_prop_maps() {
  style_modify_new_prop_maps_.Clear();
}
void ChangePropagationMapWrapper::clear_style_delete_prototypes() {
  style_delete_prototypes_.Clear();
}
void ChangePropagationMapWrapper::clear_style_delete_replacements() {
  style_delete_replacements_.Clear();
}
void ChangePropagationMapWrapper::clear_table_preset_replace_prototype() {
  if (table_preset_replace_prototype_ != nullptr) table_preset_replace_prototype_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ChangePropagationMapWrapper::clear_table_preset_replace_replacement() {
  if (table_preset_replace_replacement_ != nullptr) table_preset_replace_replacement_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChangePropagationMapWrapper::clear_table_preset_delete_prototype() {
  if (table_preset_delete_prototype_ != nullptr) table_preset_delete_prototype_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChangePropagationMapWrapper::clear_table_preset_delete_replacement() {
  if (table_preset_delete_replacement_ != nullptr) table_preset_delete_replacement_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ChangePropagationMapWrapper::ChangePropagationMapWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  style_replace_prototypes_(arena),
  style_replace_replacements_(arena),
  style_modify_styles_(arena),
  style_modify_old_prop_maps_(arena),
  style_modify_new_prop_maps_(arena),
  style_delete_prototypes_(arena),
  style_delete_replacements_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ChangePropagationMapWrapper)
}
ChangePropagationMapWrapper::ChangePropagationMapWrapper(const ChangePropagationMapWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      style_replace_prototypes_(from.style_replace_prototypes_),
      style_replace_replacements_(from.style_replace_replacements_),
      style_modify_styles_(from.style_modify_styles_),
      style_modify_old_prop_maps_(from.style_modify_old_prop_maps_),
      style_modify_new_prop_maps_(from.style_modify_new_prop_maps_),
      style_delete_prototypes_(from.style_delete_prototypes_),
      style_delete_replacements_(from.style_delete_replacements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_preset_replace_prototype()) {
    table_preset_replace_prototype_ = new ::TSP::Reference(*from.table_preset_replace_prototype_);
  } else {
    table_preset_replace_prototype_ = nullptr;
  }
  if (from._internal_has_table_preset_replace_replacement()) {
    table_preset_replace_replacement_ = new ::TSP::Reference(*from.table_preset_replace_replacement_);
  } else {
    table_preset_replace_replacement_ = nullptr;
  }
  if (from._internal_has_table_preset_delete_prototype()) {
    table_preset_delete_prototype_ = new ::TSP::Reference(*from.table_preset_delete_prototype_);
  } else {
    table_preset_delete_prototype_ = nullptr;
  }
  if (from._internal_has_table_preset_delete_replacement()) {
    table_preset_delete_replacement_ = new ::TSP::Reference(*from.table_preset_delete_replacement_);
  } else {
    table_preset_delete_replacement_ = nullptr;
  }
  replacement_behavior_ = from.replacement_behavior_;
  // @@protoc_insertion_point(copy_constructor:TST.ChangePropagationMapWrapper)
}

inline void ChangePropagationMapWrapper::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&table_preset_replace_prototype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&replacement_behavior_) -
    reinterpret_cast<char*>(&table_preset_replace_prototype_)) + sizeof(replacement_behavior_));
}

ChangePropagationMapWrapper::~ChangePropagationMapWrapper() {
  // @@protoc_insertion_point(destructor:TST.ChangePropagationMapWrapper)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChangePropagationMapWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete table_preset_replace_prototype_;
  if (this != internal_default_instance()) delete table_preset_replace_replacement_;
  if (this != internal_default_instance()) delete table_preset_delete_prototype_;
  if (this != internal_default_instance()) delete table_preset_delete_replacement_;
}

void ChangePropagationMapWrapper::ArenaDtor(void* object) {
  ChangePropagationMapWrapper* _this = reinterpret_cast< ChangePropagationMapWrapper* >(object);
  (void)_this;
}
void ChangePropagationMapWrapper::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangePropagationMapWrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangePropagationMapWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ChangePropagationMapWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  style_replace_prototypes_.Clear();
  style_replace_replacements_.Clear();
  style_modify_styles_.Clear();
  style_modify_old_prop_maps_.Clear();
  style_modify_new_prop_maps_.Clear();
  style_delete_prototypes_.Clear();
  style_delete_replacements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(table_preset_replace_prototype_ != nullptr);
      table_preset_replace_prototype_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(table_preset_replace_replacement_ != nullptr);
      table_preset_replace_replacement_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(table_preset_delete_prototype_ != nullptr);
      table_preset_delete_prototype_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(table_preset_delete_replacement_ != nullptr);
      table_preset_delete_replacement_->Clear();
    }
  }
  replacement_behavior_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangePropagationMapWrapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 replacement_behavior = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_replacement_behavior(&has_bits);
          replacement_behavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference style_replace_prototypes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_style_replace_prototypes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference style_replace_replacements = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_style_replace_replacements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference style_modify_styles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_style_modify_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference style_modify_old_prop_maps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_style_modify_old_prop_maps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference style_modify_new_prop_maps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_style_modify_new_prop_maps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference style_delete_prototypes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_style_delete_prototypes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference style_delete_replacements = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_style_delete_replacements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference table_preset_replace_prototype = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_preset_replace_prototype(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference table_preset_replace_replacement = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_preset_replace_replacement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference table_preset_delete_prototype = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_preset_delete_prototype(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference table_preset_delete_replacement = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_preset_delete_replacement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangePropagationMapWrapper::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ChangePropagationMapWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 replacement_behavior = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_replacement_behavior(), target);
  }

  // repeated .TSP.Reference style_replace_prototypes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_style_replace_prototypes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_style_replace_prototypes(i), target, stream);
  }

  // repeated .TSP.Reference style_replace_replacements = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_style_replace_replacements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_style_replace_replacements(i), target, stream);
  }

  // repeated .TSP.Reference style_modify_styles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_style_modify_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_style_modify_styles(i), target, stream);
  }

  // repeated .TSP.Reference style_modify_old_prop_maps = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_style_modify_old_prop_maps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_style_modify_old_prop_maps(i), target, stream);
  }

  // repeated .TSP.Reference style_modify_new_prop_maps = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_style_modify_new_prop_maps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_style_modify_new_prop_maps(i), target, stream);
  }

  // repeated .TSP.Reference style_delete_prototypes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_style_delete_prototypes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_style_delete_prototypes(i), target, stream);
  }

  // repeated .TSP.Reference style_delete_replacements = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_style_delete_replacements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_style_delete_replacements(i), target, stream);
  }

  // optional .TSP.Reference table_preset_replace_prototype = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::table_preset_replace_prototype(this), target, stream);
  }

  // optional .TSP.Reference table_preset_replace_replacement = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::table_preset_replace_replacement(this), target, stream);
  }

  // optional .TSP.Reference table_preset_delete_prototype = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::table_preset_delete_prototype(this), target, stream);
  }

  // optional .TSP.Reference table_preset_delete_replacement = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::table_preset_delete_replacement(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ChangePropagationMapWrapper)
  return target;
}

size_t ChangePropagationMapWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ChangePropagationMapWrapper)
  size_t total_size = 0;

  // required int32 replacement_behavior = 1;
  if (_internal_has_replacement_behavior()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_replacement_behavior());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference style_replace_prototypes = 2;
  total_size += 1UL * this->_internal_style_replace_prototypes_size();
  for (const auto& msg : this->style_replace_prototypes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference style_replace_replacements = 3;
  total_size += 1UL * this->_internal_style_replace_replacements_size();
  for (const auto& msg : this->style_replace_replacements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference style_modify_styles = 4;
  total_size += 1UL * this->_internal_style_modify_styles_size();
  for (const auto& msg : this->style_modify_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference style_modify_old_prop_maps = 5;
  total_size += 1UL * this->_internal_style_modify_old_prop_maps_size();
  for (const auto& msg : this->style_modify_old_prop_maps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference style_modify_new_prop_maps = 6;
  total_size += 1UL * this->_internal_style_modify_new_prop_maps_size();
  for (const auto& msg : this->style_modify_new_prop_maps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference style_delete_prototypes = 7;
  total_size += 1UL * this->_internal_style_delete_prototypes_size();
  for (const auto& msg : this->style_delete_prototypes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference style_delete_replacements = 8;
  total_size += 1UL * this->_internal_style_delete_replacements_size();
  for (const auto& msg : this->style_delete_replacements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSP.Reference table_preset_replace_prototype = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_preset_replace_prototype_);
    }

    // optional .TSP.Reference table_preset_replace_replacement = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_preset_replace_replacement_);
    }

    // optional .TSP.Reference table_preset_delete_prototype = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_preset_delete_prototype_);
    }

    // optional .TSP.Reference table_preset_delete_replacement = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_preset_delete_replacement_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangePropagationMapWrapper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangePropagationMapWrapper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangePropagationMapWrapper::GetClassData() const { return &_class_data_; }

void ChangePropagationMapWrapper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChangePropagationMapWrapper *>(to)->MergeFrom(
      static_cast<const ChangePropagationMapWrapper &>(from));
}


void ChangePropagationMapWrapper::MergeFrom(const ChangePropagationMapWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ChangePropagationMapWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  style_replace_prototypes_.MergeFrom(from.style_replace_prototypes_);
  style_replace_replacements_.MergeFrom(from.style_replace_replacements_);
  style_modify_styles_.MergeFrom(from.style_modify_styles_);
  style_modify_old_prop_maps_.MergeFrom(from.style_modify_old_prop_maps_);
  style_modify_new_prop_maps_.MergeFrom(from.style_modify_new_prop_maps_);
  style_delete_prototypes_.MergeFrom(from.style_delete_prototypes_);
  style_delete_replacements_.MergeFrom(from.style_delete_replacements_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_table_preset_replace_prototype()->::TSP::Reference::MergeFrom(from._internal_table_preset_replace_prototype());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_table_preset_replace_replacement()->::TSP::Reference::MergeFrom(from._internal_table_preset_replace_replacement());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_table_preset_delete_prototype()->::TSP::Reference::MergeFrom(from._internal_table_preset_delete_prototype());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_table_preset_delete_replacement()->::TSP::Reference::MergeFrom(from._internal_table_preset_delete_replacement());
    }
    if (cached_has_bits & 0x00000010u) {
      replacement_behavior_ = from.replacement_behavior_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangePropagationMapWrapper::CopyFrom(const ChangePropagationMapWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ChangePropagationMapWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePropagationMapWrapper::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(style_replace_prototypes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(style_replace_replacements_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(style_modify_styles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(style_modify_old_prop_maps_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(style_modify_new_prop_maps_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(style_delete_prototypes_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(style_delete_replacements_)) return false;
  if (_internal_has_table_preset_replace_prototype()) {
    if (!table_preset_replace_prototype_->IsInitialized()) return false;
  }
  if (_internal_has_table_preset_replace_replacement()) {
    if (!table_preset_replace_replacement_->IsInitialized()) return false;
  }
  if (_internal_has_table_preset_delete_prototype()) {
    if (!table_preset_delete_prototype_->IsInitialized()) return false;
  }
  if (_internal_has_table_preset_delete_replacement()) {
    if (!table_preset_delete_replacement_->IsInitialized()) return false;
  }
  return true;
}

void ChangePropagationMapWrapper::InternalSwap(ChangePropagationMapWrapper* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  style_replace_prototypes_.InternalSwap(&other->style_replace_prototypes_);
  style_replace_replacements_.InternalSwap(&other->style_replace_replacements_);
  style_modify_styles_.InternalSwap(&other->style_modify_styles_);
  style_modify_old_prop_maps_.InternalSwap(&other->style_modify_old_prop_maps_);
  style_modify_new_prop_maps_.InternalSwap(&other->style_modify_new_prop_maps_);
  style_delete_prototypes_.InternalSwap(&other->style_delete_prototypes_);
  style_delete_replacements_.InternalSwap(&other->style_delete_replacements_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangePropagationMapWrapper, replacement_behavior_)
      + sizeof(ChangePropagationMapWrapper::replacement_behavior_)
      - PROTOBUF_FIELD_OFFSET(ChangePropagationMapWrapper, table_preset_replace_prototype_)>(
          reinterpret_cast<char*>(&table_preset_replace_prototype_),
          reinterpret_cast<char*>(&other->table_preset_replace_prototype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangePropagationMapWrapper::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[136]);
}

// ===================================================================

class SummaryCellVendorArchive_SummaryCellEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<SummaryCellVendorArchive_SummaryCellEntry>()._has_bits_);
  static const ::TSP::UUID& wildcarduid(const SummaryCellVendorArchive_SummaryCellEntry* msg);
  static void set_has_wildcarduid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& columnuid(const SummaryCellVendorArchive_SummaryCellEntry* msg);
  static void set_has_columnuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::Cell& cell(const SummaryCellVendorArchive_SummaryCellEntry* msg);
  static void set_has_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::UUID&
SummaryCellVendorArchive_SummaryCellEntry::_Internal::wildcarduid(const SummaryCellVendorArchive_SummaryCellEntry* msg) {
  return *msg->wildcarduid_;
}
const ::TSP::UUID&
SummaryCellVendorArchive_SummaryCellEntry::_Internal::columnuid(const SummaryCellVendorArchive_SummaryCellEntry* msg) {
  return *msg->columnuid_;
}
const ::TST::Cell&
SummaryCellVendorArchive_SummaryCellEntry::_Internal::cell(const SummaryCellVendorArchive_SummaryCellEntry* msg) {
  return *msg->cell_;
}
void SummaryCellVendorArchive_SummaryCellEntry::clear_wildcarduid() {
  if (wildcarduid_ != nullptr) wildcarduid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SummaryCellVendorArchive_SummaryCellEntry::clear_columnuid() {
  if (columnuid_ != nullptr) columnuid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SummaryCellVendorArchive_SummaryCellEntry::SummaryCellVendorArchive_SummaryCellEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.SummaryCellVendorArchive.SummaryCellEntry)
}
SummaryCellVendorArchive_SummaryCellEntry::SummaryCellVendorArchive_SummaryCellEntry(const SummaryCellVendorArchive_SummaryCellEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_wildcarduid()) {
    wildcarduid_ = new ::TSP::UUID(*from.wildcarduid_);
  } else {
    wildcarduid_ = nullptr;
  }
  if (from._internal_has_columnuid()) {
    columnuid_ = new ::TSP::UUID(*from.columnuid_);
  } else {
    columnuid_ = nullptr;
  }
  if (from._internal_has_cell()) {
    cell_ = new ::TST::Cell(*from.cell_);
  } else {
    cell_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.SummaryCellVendorArchive.SummaryCellEntry)
}

inline void SummaryCellVendorArchive_SummaryCellEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&wildcarduid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cell_) -
    reinterpret_cast<char*>(&wildcarduid_)) + sizeof(cell_));
}

SummaryCellVendorArchive_SummaryCellEntry::~SummaryCellVendorArchive_SummaryCellEntry() {
  // @@protoc_insertion_point(destructor:TST.SummaryCellVendorArchive.SummaryCellEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SummaryCellVendorArchive_SummaryCellEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete wildcarduid_;
  if (this != internal_default_instance()) delete columnuid_;
  if (this != internal_default_instance()) delete cell_;
}

void SummaryCellVendorArchive_SummaryCellEntry::ArenaDtor(void* object) {
  SummaryCellVendorArchive_SummaryCellEntry* _this = reinterpret_cast< SummaryCellVendorArchive_SummaryCellEntry* >(object);
  (void)_this;
}
void SummaryCellVendorArchive_SummaryCellEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SummaryCellVendorArchive_SummaryCellEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SummaryCellVendorArchive_SummaryCellEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.SummaryCellVendorArchive.SummaryCellEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(wildcarduid_ != nullptr);
      wildcarduid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(columnuid_ != nullptr);
      columnuid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cell_ != nullptr);
      cell_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryCellVendorArchive_SummaryCellEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID wildcardUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_wildcarduid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID columnUID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_columnuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.Cell cell = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SummaryCellVendorArchive_SummaryCellEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.SummaryCellVendorArchive.SummaryCellEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID wildcardUID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::wildcarduid(this), target, stream);
  }

  // required .TSP.UUID columnUID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::columnuid(this), target, stream);
  }

  // required .TST.Cell cell = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cell(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.SummaryCellVendorArchive.SummaryCellEntry)
  return target;
}

size_t SummaryCellVendorArchive_SummaryCellEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.SummaryCellVendorArchive.SummaryCellEntry)
  size_t total_size = 0;

  if (_internal_has_wildcarduid()) {
    // required .TSP.UUID wildcardUID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wildcarduid_);
  }

  if (_internal_has_columnuid()) {
    // required .TSP.UUID columnUID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *columnuid_);
  }

  if (_internal_has_cell()) {
    // required .TST.Cell cell = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_);
  }

  return total_size;
}
size_t SummaryCellVendorArchive_SummaryCellEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.SummaryCellVendorArchive.SummaryCellEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSP.UUID wildcardUID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wildcarduid_);

    // required .TSP.UUID columnUID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *columnuid_);

    // required .TST.Cell cell = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SummaryCellVendorArchive_SummaryCellEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SummaryCellVendorArchive_SummaryCellEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SummaryCellVendorArchive_SummaryCellEntry::GetClassData() const { return &_class_data_; }

void SummaryCellVendorArchive_SummaryCellEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SummaryCellVendorArchive_SummaryCellEntry *>(to)->MergeFrom(
      static_cast<const SummaryCellVendorArchive_SummaryCellEntry &>(from));
}


void SummaryCellVendorArchive_SummaryCellEntry::MergeFrom(const SummaryCellVendorArchive_SummaryCellEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.SummaryCellVendorArchive.SummaryCellEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_wildcarduid()->::TSP::UUID::MergeFrom(from._internal_wildcarduid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_columnuid()->::TSP::UUID::MergeFrom(from._internal_columnuid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cell()->::TST::Cell::MergeFrom(from._internal_cell());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SummaryCellVendorArchive_SummaryCellEntry::CopyFrom(const SummaryCellVendorArchive_SummaryCellEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.SummaryCellVendorArchive.SummaryCellEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryCellVendorArchive_SummaryCellEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_wildcarduid()) {
    if (!wildcarduid_->IsInitialized()) return false;
  }
  if (_internal_has_columnuid()) {
    if (!columnuid_->IsInitialized()) return false;
  }
  if (_internal_has_cell()) {
    if (!cell_->IsInitialized()) return false;
  }
  return true;
}

void SummaryCellVendorArchive_SummaryCellEntry::InternalSwap(SummaryCellVendorArchive_SummaryCellEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SummaryCellVendorArchive_SummaryCellEntry, cell_)
      + sizeof(SummaryCellVendorArchive_SummaryCellEntry::cell_)
      - PROTOBUF_FIELD_OFFSET(SummaryCellVendorArchive_SummaryCellEntry, wildcarduid_)>(
          reinterpret_cast<char*>(&wildcarduid_),
          reinterpret_cast<char*>(&other->wildcarduid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryCellVendorArchive_SummaryCellEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[137]);
}

// ===================================================================

class SummaryCellVendorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SummaryCellVendorArchive>()._has_bits_);
  static const ::TSP::Reference& table_info(const SummaryCellVendorArchive* msg);
  static void set_has_table_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
SummaryCellVendorArchive::_Internal::table_info(const SummaryCellVendorArchive* msg) {
  return *msg->table_info_;
}
void SummaryCellVendorArchive::clear_table_info() {
  if (table_info_ != nullptr) table_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SummaryCellVendorArchive::SummaryCellVendorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.SummaryCellVendorArchive)
}
SummaryCellVendorArchive::SummaryCellVendorArchive(const SummaryCellVendorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_info()) {
    table_info_ = new ::TSP::Reference(*from.table_info_);
  } else {
    table_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.SummaryCellVendorArchive)
}

inline void SummaryCellVendorArchive::SharedCtor() {
table_info_ = nullptr;
}

SummaryCellVendorArchive::~SummaryCellVendorArchive() {
  // @@protoc_insertion_point(destructor:TST.SummaryCellVendorArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SummaryCellVendorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete table_info_;
}

void SummaryCellVendorArchive::ArenaDtor(void* object) {
  SummaryCellVendorArchive* _this = reinterpret_cast< SummaryCellVendorArchive* >(object);
  (void)_this;
}
void SummaryCellVendorArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SummaryCellVendorArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SummaryCellVendorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.SummaryCellVendorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(table_info_ != nullptr);
    table_info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryCellVendorArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference table_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.SummaryCellVendorArchive.SummaryCellEntry entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SummaryCellVendorArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.SummaryCellVendorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference table_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::table_info(this), target, stream);
  }

  // repeated .TST.SummaryCellVendorArchive.SummaryCellEntry entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.SummaryCellVendorArchive)
  return target;
}

size_t SummaryCellVendorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.SummaryCellVendorArchive)
  size_t total_size = 0;

  // required .TSP.Reference table_info = 1;
  if (_internal_has_table_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_info_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.SummaryCellVendorArchive.SummaryCellEntry entries = 2;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SummaryCellVendorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SummaryCellVendorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SummaryCellVendorArchive::GetClassData() const { return &_class_data_; }

void SummaryCellVendorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SummaryCellVendorArchive *>(to)->MergeFrom(
      static_cast<const SummaryCellVendorArchive &>(from));
}


void SummaryCellVendorArchive::MergeFrom(const SummaryCellVendorArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.SummaryCellVendorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from._internal_has_table_info()) {
    _internal_mutable_table_info()->::TSP::Reference::MergeFrom(from._internal_table_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SummaryCellVendorArchive::CopyFrom(const SummaryCellVendorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.SummaryCellVendorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryCellVendorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  if (_internal_has_table_info()) {
    if (!table_info_->IsInitialized()) return false;
  }
  return true;
}

void SummaryCellVendorArchive::InternalSwap(SummaryCellVendorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  swap(table_info_, other->table_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryCellVendorArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[138]);
}

// ===================================================================

class CategoryOrderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CategoryOrderArchive>()._has_bits_);
  static const ::TSP::Reference& table_info(const CategoryOrderArchive* msg);
  static void set_has_table_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& uid_map(const CategoryOrderArchive* msg);
  static void set_has_uid_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
CategoryOrderArchive::_Internal::table_info(const CategoryOrderArchive* msg) {
  return *msg->table_info_;
}
const ::TSP::Reference&
CategoryOrderArchive::_Internal::uid_map(const CategoryOrderArchive* msg) {
  return *msg->uid_map_;
}
void CategoryOrderArchive::clear_table_info() {
  if (table_info_ != nullptr) table_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CategoryOrderArchive::clear_uid_map() {
  if (uid_map_ != nullptr) uid_map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CategoryOrderArchive::CategoryOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CategoryOrderArchive)
}
CategoryOrderArchive::CategoryOrderArchive(const CategoryOrderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_info()) {
    table_info_ = new ::TSP::Reference(*from.table_info_);
  } else {
    table_info_ = nullptr;
  }
  if (from._internal_has_uid_map()) {
    uid_map_ = new ::TSP::Reference(*from.uid_map_);
  } else {
    uid_map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CategoryOrderArchive)
}

inline void CategoryOrderArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&table_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uid_map_) -
    reinterpret_cast<char*>(&table_info_)) + sizeof(uid_map_));
}

CategoryOrderArchive::~CategoryOrderArchive() {
  // @@protoc_insertion_point(destructor:TST.CategoryOrderArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CategoryOrderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete table_info_;
  if (this != internal_default_instance()) delete uid_map_;
}

void CategoryOrderArchive::ArenaDtor(void* object) {
  CategoryOrderArchive* _this = reinterpret_cast< CategoryOrderArchive* >(object);
  (void)_this;
}
void CategoryOrderArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CategoryOrderArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CategoryOrderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CategoryOrderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(table_info_ != nullptr);
      table_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(uid_map_ != nullptr);
      uid_map_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryOrderArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference table_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference uid_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uid_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CategoryOrderArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CategoryOrderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference table_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::table_info(this), target, stream);
  }

  // required .TSP.Reference uid_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::uid_map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CategoryOrderArchive)
  return target;
}

size_t CategoryOrderArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CategoryOrderArchive)
  size_t total_size = 0;

  if (_internal_has_table_info()) {
    // required .TSP.Reference table_info = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_info_);
  }

  if (_internal_has_uid_map()) {
    // required .TSP.Reference uid_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uid_map_);
  }

  return total_size;
}
size_t CategoryOrderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CategoryOrderArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference table_info = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_info_);

    // required .TSP.Reference uid_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uid_map_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryOrderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CategoryOrderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryOrderArchive::GetClassData() const { return &_class_data_; }

void CategoryOrderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CategoryOrderArchive *>(to)->MergeFrom(
      static_cast<const CategoryOrderArchive &>(from));
}


void CategoryOrderArchive::MergeFrom(const CategoryOrderArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CategoryOrderArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_table_info()->::TSP::Reference::MergeFrom(from._internal_table_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_uid_map()->::TSP::Reference::MergeFrom(from._internal_uid_map());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryOrderArchive::CopyFrom(const CategoryOrderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CategoryOrderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryOrderArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_table_info()) {
    if (!table_info_->IsInitialized()) return false;
  }
  if (_internal_has_uid_map()) {
    if (!uid_map_->IsInitialized()) return false;
  }
  return true;
}

void CategoryOrderArchive::InternalSwap(CategoryOrderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CategoryOrderArchive, uid_map_)
      + sizeof(CategoryOrderArchive::uid_map_)
      - PROTOBUF_FIELD_OFFSET(CategoryOrderArchive, table_info_)>(
          reinterpret_cast<char*>(&table_info_),
          reinterpret_cast<char*>(&other->table_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryOrderArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[139]);
}

// ===================================================================

class HeaderNameMgrTileArchive_NameFragmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderNameMgrTileArchive_NameFragmentArchive>()._has_bits_);
  static void set_has_name_fragment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellCoordinateArchive& name_precedent(const HeaderNameMgrTileArchive_NameFragmentArchive* msg);
  static void set_has_name_precedent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::UidCellRefSetArchive& uses_of_name_fragment(const HeaderNameMgrTileArchive_NameFragmentArchive* msg);
  static void set_has_uses_of_name_fragment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::CellCoordinateArchive&
HeaderNameMgrTileArchive_NameFragmentArchive::_Internal::name_precedent(const HeaderNameMgrTileArchive_NameFragmentArchive* msg) {
  return *msg->name_precedent_;
}
const ::TSCE::UidCellRefSetArchive&
HeaderNameMgrTileArchive_NameFragmentArchive::_Internal::uses_of_name_fragment(const HeaderNameMgrTileArchive_NameFragmentArchive* msg) {
  return *msg->uses_of_name_fragment_;
}
void HeaderNameMgrTileArchive_NameFragmentArchive::clear_name_precedent() {
  if (name_precedent_ != nullptr) name_precedent_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void HeaderNameMgrTileArchive_NameFragmentArchive::clear_uses_of_name_fragment() {
  if (uses_of_name_fragment_ != nullptr) uses_of_name_fragment_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
HeaderNameMgrTileArchive_NameFragmentArchive::HeaderNameMgrTileArchive_NameFragmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
}
HeaderNameMgrTileArchive_NameFragmentArchive::HeaderNameMgrTileArchive_NameFragmentArchive(const HeaderNameMgrTileArchive_NameFragmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_fragment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name_fragment()) {
    name_fragment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name_fragment(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_name_precedent()) {
    name_precedent_ = new ::TSCE::CellCoordinateArchive(*from.name_precedent_);
  } else {
    name_precedent_ = nullptr;
  }
  if (from._internal_has_uses_of_name_fragment()) {
    uses_of_name_fragment_ = new ::TSCE::UidCellRefSetArchive(*from.uses_of_name_fragment_);
  } else {
    uses_of_name_fragment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
}

inline void HeaderNameMgrTileArchive_NameFragmentArchive::SharedCtor() {
name_fragment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&name_precedent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uses_of_name_fragment_) -
    reinterpret_cast<char*>(&name_precedent_)) + sizeof(uses_of_name_fragment_));
}

HeaderNameMgrTileArchive_NameFragmentArchive::~HeaderNameMgrTileArchive_NameFragmentArchive() {
  // @@protoc_insertion_point(destructor:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeaderNameMgrTileArchive_NameFragmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_fragment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete name_precedent_;
  if (this != internal_default_instance()) delete uses_of_name_fragment_;
}

void HeaderNameMgrTileArchive_NameFragmentArchive::ArenaDtor(void* object) {
  HeaderNameMgrTileArchive_NameFragmentArchive* _this = reinterpret_cast< HeaderNameMgrTileArchive_NameFragmentArchive* >(object);
  (void)_this;
}
void HeaderNameMgrTileArchive_NameFragmentArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeaderNameMgrTileArchive_NameFragmentArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeaderNameMgrTileArchive_NameFragmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_fragment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(name_precedent_ != nullptr);
      name_precedent_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(uses_of_name_fragment_ != nullptr);
      uses_of_name_fragment_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderNameMgrTileArchive_NameFragmentArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name_fragment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name_fragment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.HeaderNameMgrTileArchive.NameFragmentArchive.name_fragment");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.CellCoordinateArchive name_precedent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_name_precedent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.UidCellRefSetArchive uses_of_name_fragment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_uses_of_name_fragment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeaderNameMgrTileArchive_NameFragmentArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name_fragment = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_fragment().data(), static_cast<int>(this->_internal_name_fragment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.HeaderNameMgrTileArchive.NameFragmentArchive.name_fragment");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name_fragment(), target);
  }

  // required .TSCE.CellCoordinateArchive name_precedent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::name_precedent(this), target, stream);
  }

  // optional .TSCE.UidCellRefSetArchive uses_of_name_fragment = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::uses_of_name_fragment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
  return target;
}

size_t HeaderNameMgrTileArchive_NameFragmentArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
  size_t total_size = 0;

  if (_internal_has_name_fragment()) {
    // required string name_fragment = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_fragment());
  }

  if (_internal_has_name_precedent()) {
    // required .TSCE.CellCoordinateArchive name_precedent = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_precedent_);
  }

  return total_size;
}
size_t HeaderNameMgrTileArchive_NameFragmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name_fragment = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_fragment());

    // required .TSCE.CellCoordinateArchive name_precedent = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_precedent_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.UidCellRefSetArchive uses_of_name_fragment = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uses_of_name_fragment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderNameMgrTileArchive_NameFragmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeaderNameMgrTileArchive_NameFragmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderNameMgrTileArchive_NameFragmentArchive::GetClassData() const { return &_class_data_; }

void HeaderNameMgrTileArchive_NameFragmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HeaderNameMgrTileArchive_NameFragmentArchive *>(to)->MergeFrom(
      static_cast<const HeaderNameMgrTileArchive_NameFragmentArchive &>(from));
}


void HeaderNameMgrTileArchive_NameFragmentArchive::MergeFrom(const HeaderNameMgrTileArchive_NameFragmentArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name_fragment(from._internal_name_fragment());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_name_precedent()->::TSCE::CellCoordinateArchive::MergeFrom(from._internal_name_precedent());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_uses_of_name_fragment()->::TSCE::UidCellRefSetArchive::MergeFrom(from._internal_uses_of_name_fragment());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderNameMgrTileArchive_NameFragmentArchive::CopyFrom(const HeaderNameMgrTileArchive_NameFragmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderNameMgrTileArchive_NameFragmentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_uses_of_name_fragment()) {
    if (!uses_of_name_fragment_->IsInitialized()) return false;
  }
  return true;
}

void HeaderNameMgrTileArchive_NameFragmentArchive::InternalSwap(HeaderNameMgrTileArchive_NameFragmentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_fragment_, GetArenaForAllocation(),
      &other->name_fragment_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeaderNameMgrTileArchive_NameFragmentArchive, uses_of_name_fragment_)
      + sizeof(HeaderNameMgrTileArchive_NameFragmentArchive::uses_of_name_fragment_)
      - PROTOBUF_FIELD_OFFSET(HeaderNameMgrTileArchive_NameFragmentArchive, name_precedent_)>(
          reinterpret_cast<char*>(&name_precedent_),
          reinterpret_cast<char*>(&other->name_precedent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderNameMgrTileArchive_NameFragmentArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[140]);
}

// ===================================================================

class HeaderNameMgrTileArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderNameMgrTileArchive>()._has_bits_);
  static void set_has_first_fragment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_fragment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

HeaderNameMgrTileArchive::HeaderNameMgrTileArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_frag_entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.HeaderNameMgrTileArchive)
}
HeaderNameMgrTileArchive::HeaderNameMgrTileArchive(const HeaderNameMgrTileArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_frag_entries_(from.name_frag_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  first_fragment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_first_fragment()) {
    first_fragment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_first_fragment(), 
      GetArenaForAllocation());
  }
  last_fragment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_last_fragment()) {
    last_fragment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_fragment(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TST.HeaderNameMgrTileArchive)
}

inline void HeaderNameMgrTileArchive::SharedCtor() {
first_fragment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
last_fragment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HeaderNameMgrTileArchive::~HeaderNameMgrTileArchive() {
  // @@protoc_insertion_point(destructor:TST.HeaderNameMgrTileArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeaderNameMgrTileArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  first_fragment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_fragment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HeaderNameMgrTileArchive::ArenaDtor(void* object) {
  HeaderNameMgrTileArchive* _this = reinterpret_cast< HeaderNameMgrTileArchive* >(object);
  (void)_this;
}
void HeaderNameMgrTileArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeaderNameMgrTileArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeaderNameMgrTileArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HeaderNameMgrTileArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_frag_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      first_fragment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      last_fragment_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderNameMgrTileArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string first_fragment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_first_fragment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.HeaderNameMgrTileArchive.first_fragment");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string last_fragment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_last_fragment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.HeaderNameMgrTileArchive.last_fragment");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.HeaderNameMgrTileArchive.NameFragmentArchive name_frag_entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_name_frag_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeaderNameMgrTileArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HeaderNameMgrTileArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string first_fragment = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_first_fragment().data(), static_cast<int>(this->_internal_first_fragment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.HeaderNameMgrTileArchive.first_fragment");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_first_fragment(), target);
  }

  // required string last_fragment = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_last_fragment().data(), static_cast<int>(this->_internal_last_fragment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.HeaderNameMgrTileArchive.last_fragment");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_last_fragment(), target);
  }

  // repeated .TST.HeaderNameMgrTileArchive.NameFragmentArchive name_frag_entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_name_frag_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_name_frag_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HeaderNameMgrTileArchive)
  return target;
}

size_t HeaderNameMgrTileArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.HeaderNameMgrTileArchive)
  size_t total_size = 0;

  if (_internal_has_first_fragment()) {
    // required string first_fragment = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_fragment());
  }

  if (_internal_has_last_fragment()) {
    // required string last_fragment = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_fragment());
  }

  return total_size;
}
size_t HeaderNameMgrTileArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HeaderNameMgrTileArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string first_fragment = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_fragment());

    // required string last_fragment = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_fragment());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.HeaderNameMgrTileArchive.NameFragmentArchive name_frag_entries = 3;
  total_size += 1UL * this->_internal_name_frag_entries_size();
  for (const auto& msg : this->name_frag_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderNameMgrTileArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeaderNameMgrTileArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderNameMgrTileArchive::GetClassData() const { return &_class_data_; }

void HeaderNameMgrTileArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HeaderNameMgrTileArchive *>(to)->MergeFrom(
      static_cast<const HeaderNameMgrTileArchive &>(from));
}


void HeaderNameMgrTileArchive::MergeFrom(const HeaderNameMgrTileArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.HeaderNameMgrTileArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  name_frag_entries_.MergeFrom(from.name_frag_entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_first_fragment(from._internal_first_fragment());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_last_fragment(from._internal_last_fragment());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderNameMgrTileArchive::CopyFrom(const HeaderNameMgrTileArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HeaderNameMgrTileArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderNameMgrTileArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(name_frag_entries_)) return false;
  return true;
}

void HeaderNameMgrTileArchive::InternalSwap(HeaderNameMgrTileArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_frag_entries_.InternalSwap(&other->name_frag_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &first_fragment_, GetArenaForAllocation(),
      &other->first_fragment_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_fragment_, GetArenaForAllocation(),
      &other->last_fragment_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderNameMgrTileArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[141]);
}

// ===================================================================

class HeaderNameMgrArchive_PerTableArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderNameMgrArchive_PerTableArchive>()._has_bits_);
  static const ::TSP::UUID& table_uid(const HeaderNameMgrArchive_PerTableArchive* msg);
  static void set_has_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellCoordinateArchive& per_table_precedent(const HeaderNameMgrArchive_PerTableArchive* msg);
  static void set_has_per_table_precedent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
HeaderNameMgrArchive_PerTableArchive::_Internal::table_uid(const HeaderNameMgrArchive_PerTableArchive* msg) {
  return *msg->table_uid_;
}
const ::TSCE::CellCoordinateArchive&
HeaderNameMgrArchive_PerTableArchive::_Internal::per_table_precedent(const HeaderNameMgrArchive_PerTableArchive* msg) {
  return *msg->per_table_precedent_;
}
void HeaderNameMgrArchive_PerTableArchive::clear_table_uid() {
  if (table_uid_ != nullptr) table_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void HeaderNameMgrArchive_PerTableArchive::clear_per_table_precedent() {
  if (per_table_precedent_ != nullptr) per_table_precedent_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void HeaderNameMgrArchive_PerTableArchive::clear_header_row_uids() {
  header_row_uids_.Clear();
}
void HeaderNameMgrArchive_PerTableArchive::clear_header_column_uids() {
  header_column_uids_.Clear();
}
void HeaderNameMgrArchive_PerTableArchive::clear_update_header_row_uids() {
  update_header_row_uids_.Clear();
}
void HeaderNameMgrArchive_PerTableArchive::clear_update_header_column_uids() {
  update_header_column_uids_.Clear();
}
HeaderNameMgrArchive_PerTableArchive::HeaderNameMgrArchive_PerTableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  header_row_uids_(arena),
  header_column_uids_(arena),
  update_header_row_uids_(arena),
  update_header_column_uids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.HeaderNameMgrArchive.PerTableArchive)
}
HeaderNameMgrArchive_PerTableArchive::HeaderNameMgrArchive_PerTableArchive(const HeaderNameMgrArchive_PerTableArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      header_row_uids_(from.header_row_uids_),
      header_column_uids_(from.header_column_uids_),
      update_header_row_uids_(from.update_header_row_uids_),
      update_header_column_uids_(from.update_header_column_uids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_uid()) {
    table_uid_ = new ::TSP::UUID(*from.table_uid_);
  } else {
    table_uid_ = nullptr;
  }
  if (from._internal_has_per_table_precedent()) {
    per_table_precedent_ = new ::TSCE::CellCoordinateArchive(*from.per_table_precedent_);
  } else {
    per_table_precedent_ = nullptr;
  }
  is_deleted_ = from.is_deleted_;
  // @@protoc_insertion_point(copy_constructor:TST.HeaderNameMgrArchive.PerTableArchive)
}

inline void HeaderNameMgrArchive_PerTableArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&table_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_deleted_) -
    reinterpret_cast<char*>(&table_uid_)) + sizeof(is_deleted_));
}

HeaderNameMgrArchive_PerTableArchive::~HeaderNameMgrArchive_PerTableArchive() {
  // @@protoc_insertion_point(destructor:TST.HeaderNameMgrArchive.PerTableArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeaderNameMgrArchive_PerTableArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete table_uid_;
  if (this != internal_default_instance()) delete per_table_precedent_;
}

void HeaderNameMgrArchive_PerTableArchive::ArenaDtor(void* object) {
  HeaderNameMgrArchive_PerTableArchive* _this = reinterpret_cast< HeaderNameMgrArchive_PerTableArchive* >(object);
  (void)_this;
}
void HeaderNameMgrArchive_PerTableArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeaderNameMgrArchive_PerTableArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeaderNameMgrArchive_PerTableArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HeaderNameMgrArchive.PerTableArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  header_row_uids_.Clear();
  header_column_uids_.Clear();
  update_header_row_uids_.Clear();
  update_header_column_uids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(table_uid_ != nullptr);
      table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(per_table_precedent_ != nullptr);
      per_table_precedent_->Clear();
    }
  }
  is_deleted_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderNameMgrArchive_PerTableArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID table_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.CellCoordinateArchive per_table_precedent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_per_table_precedent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_deleted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_deleted(&has_bits);
          is_deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID header_row_uids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_header_row_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID header_column_uids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_header_column_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID update_header_row_uids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_update_header_row_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID update_header_column_uids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_update_header_column_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeaderNameMgrArchive_PerTableArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HeaderNameMgrArchive.PerTableArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID table_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::table_uid(this), target, stream);
  }

  // required .TSCE.CellCoordinateArchive per_table_precedent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::per_table_precedent(this), target, stream);
  }

  // optional bool is_deleted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_deleted(), target);
  }

  // repeated .TSP.UUID header_row_uids = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_header_row_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_header_row_uids(i), target, stream);
  }

  // repeated .TSP.UUID header_column_uids = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_header_column_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_header_column_uids(i), target, stream);
  }

  // repeated .TSP.UUID update_header_row_uids = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_update_header_row_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_update_header_row_uids(i), target, stream);
  }

  // repeated .TSP.UUID update_header_column_uids = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_update_header_column_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_update_header_column_uids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HeaderNameMgrArchive.PerTableArchive)
  return target;
}

size_t HeaderNameMgrArchive_PerTableArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.HeaderNameMgrArchive.PerTableArchive)
  size_t total_size = 0;

  if (_internal_has_table_uid()) {
    // required .TSP.UUID table_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_uid_);
  }

  if (_internal_has_per_table_precedent()) {
    // required .TSCE.CellCoordinateArchive per_table_precedent = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *per_table_precedent_);
  }

  return total_size;
}
size_t HeaderNameMgrArchive_PerTableArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HeaderNameMgrArchive.PerTableArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID table_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_uid_);

    // required .TSCE.CellCoordinateArchive per_table_precedent = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *per_table_precedent_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID header_row_uids = 5;
  total_size += 1UL * this->_internal_header_row_uids_size();
  for (const auto& msg : this->header_row_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID header_column_uids = 6;
  total_size += 1UL * this->_internal_header_column_uids_size();
  for (const auto& msg : this->header_column_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID update_header_row_uids = 7;
  total_size += 1UL * this->_internal_update_header_row_uids_size();
  for (const auto& msg : this->update_header_row_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID update_header_column_uids = 8;
  total_size += 1UL * this->_internal_update_header_column_uids_size();
  for (const auto& msg : this->update_header_column_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool is_deleted = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderNameMgrArchive_PerTableArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeaderNameMgrArchive_PerTableArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderNameMgrArchive_PerTableArchive::GetClassData() const { return &_class_data_; }

void HeaderNameMgrArchive_PerTableArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HeaderNameMgrArchive_PerTableArchive *>(to)->MergeFrom(
      static_cast<const HeaderNameMgrArchive_PerTableArchive &>(from));
}


void HeaderNameMgrArchive_PerTableArchive::MergeFrom(const HeaderNameMgrArchive_PerTableArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.HeaderNameMgrArchive.PerTableArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  header_row_uids_.MergeFrom(from.header_row_uids_);
  header_column_uids_.MergeFrom(from.header_column_uids_);
  update_header_row_uids_.MergeFrom(from.update_header_row_uids_);
  update_header_column_uids_.MergeFrom(from.update_header_column_uids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_table_uid()->::TSP::UUID::MergeFrom(from._internal_table_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_per_table_precedent()->::TSCE::CellCoordinateArchive::MergeFrom(from._internal_per_table_precedent());
    }
    if (cached_has_bits & 0x00000004u) {
      is_deleted_ = from.is_deleted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderNameMgrArchive_PerTableArchive::CopyFrom(const HeaderNameMgrArchive_PerTableArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HeaderNameMgrArchive.PerTableArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderNameMgrArchive_PerTableArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(header_row_uids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(header_column_uids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(update_header_row_uids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(update_header_column_uids_)) return false;
  if (_internal_has_table_uid()) {
    if (!table_uid_->IsInitialized()) return false;
  }
  return true;
}

void HeaderNameMgrArchive_PerTableArchive::InternalSwap(HeaderNameMgrArchive_PerTableArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  header_row_uids_.InternalSwap(&other->header_row_uids_);
  header_column_uids_.InternalSwap(&other->header_column_uids_);
  update_header_row_uids_.InternalSwap(&other->update_header_row_uids_);
  update_header_column_uids_.InternalSwap(&other->update_header_column_uids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeaderNameMgrArchive_PerTableArchive, is_deleted_)
      + sizeof(HeaderNameMgrArchive_PerTableArchive::is_deleted_)
      - PROTOBUF_FIELD_OFFSET(HeaderNameMgrArchive_PerTableArchive, table_uid_)>(
          reinterpret_cast<char*>(&table_uid_),
          reinterpret_cast<char*>(&other->table_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderNameMgrArchive_PerTableArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[142]);
}

// ===================================================================

class HeaderNameMgrArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderNameMgrArchive>()._has_bits_);
  static const ::TSP::UUID& owner_uid(const HeaderNameMgrArchive* msg);
  static void set_has_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& nrm_owner_uid(const HeaderNameMgrArchive* msg);
  static void set_has_nrm_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
HeaderNameMgrArchive::_Internal::owner_uid(const HeaderNameMgrArchive* msg) {
  return *msg->owner_uid_;
}
const ::TSP::UUID&
HeaderNameMgrArchive::_Internal::nrm_owner_uid(const HeaderNameMgrArchive* msg) {
  return *msg->nrm_owner_uid_;
}
void HeaderNameMgrArchive::clear_owner_uid() {
  if (owner_uid_ != nullptr) owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void HeaderNameMgrArchive::clear_nrm_owner_uid() {
  if (nrm_owner_uid_ != nullptr) nrm_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void HeaderNameMgrArchive::clear_name_frag_tiles() {
  name_frag_tiles_.Clear();
}
HeaderNameMgrArchive::HeaderNameMgrArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  per_tables_(arena),
  name_frag_tiles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.HeaderNameMgrArchive)
}
HeaderNameMgrArchive::HeaderNameMgrArchive(const HeaderNameMgrArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      per_tables_(from.per_tables_),
      name_frag_tiles_(from.name_frag_tiles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_uid()) {
    owner_uid_ = new ::TSP::UUID(*from.owner_uid_);
  } else {
    owner_uid_ = nullptr;
  }
  if (from._internal_has_nrm_owner_uid()) {
    nrm_owner_uid_ = new ::TSP::UUID(*from.nrm_owner_uid_);
  } else {
    nrm_owner_uid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.HeaderNameMgrArchive)
}

inline void HeaderNameMgrArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nrm_owner_uid_) -
    reinterpret_cast<char*>(&owner_uid_)) + sizeof(nrm_owner_uid_));
}

HeaderNameMgrArchive::~HeaderNameMgrArchive() {
  // @@protoc_insertion_point(destructor:TST.HeaderNameMgrArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeaderNameMgrArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete owner_uid_;
  if (this != internal_default_instance()) delete nrm_owner_uid_;
}

void HeaderNameMgrArchive::ArenaDtor(void* object) {
  HeaderNameMgrArchive* _this = reinterpret_cast< HeaderNameMgrArchive* >(object);
  (void)_this;
}
void HeaderNameMgrArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeaderNameMgrArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeaderNameMgrArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HeaderNameMgrArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  per_tables_.Clear();
  name_frag_tiles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(owner_uid_ != nullptr);
      owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(nrm_owner_uid_ != nullptr);
      nrm_owner_uid_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderNameMgrArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID owner_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID nrm_owner_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nrm_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.HeaderNameMgrArchive.PerTableArchive per_tables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_per_tables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference name_frag_tiles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_name_frag_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeaderNameMgrArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HeaderNameMgrArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID owner_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::owner_uid(this), target, stream);
  }

  // optional .TSP.UUID nrm_owner_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nrm_owner_uid(this), target, stream);
  }

  // repeated .TST.HeaderNameMgrArchive.PerTableArchive per_tables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_per_tables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_per_tables(i), target, stream);
  }

  // repeated .TSP.Reference name_frag_tiles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_name_frag_tiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_name_frag_tiles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HeaderNameMgrArchive)
  return target;
}

size_t HeaderNameMgrArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HeaderNameMgrArchive)
  size_t total_size = 0;

  // required .TSP.UUID owner_uid = 1;
  if (_internal_has_owner_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_uid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.HeaderNameMgrArchive.PerTableArchive per_tables = 3;
  total_size += 1UL * this->_internal_per_tables_size();
  for (const auto& msg : this->per_tables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference name_frag_tiles = 4;
  total_size += 1UL * this->_internal_name_frag_tiles_size();
  for (const auto& msg : this->name_frag_tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.UUID nrm_owner_uid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nrm_owner_uid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderNameMgrArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeaderNameMgrArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderNameMgrArchive::GetClassData() const { return &_class_data_; }

void HeaderNameMgrArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HeaderNameMgrArchive *>(to)->MergeFrom(
      static_cast<const HeaderNameMgrArchive &>(from));
}


void HeaderNameMgrArchive::MergeFrom(const HeaderNameMgrArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.HeaderNameMgrArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  per_tables_.MergeFrom(from.per_tables_);
  name_frag_tiles_.MergeFrom(from.name_frag_tiles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_owner_uid()->::TSP::UUID::MergeFrom(from._internal_owner_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_nrm_owner_uid()->::TSP::UUID::MergeFrom(from._internal_nrm_owner_uid());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderNameMgrArchive::CopyFrom(const HeaderNameMgrArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HeaderNameMgrArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderNameMgrArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(per_tables_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(name_frag_tiles_)) return false;
  if (_internal_has_owner_uid()) {
    if (!owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_nrm_owner_uid()) {
    if (!nrm_owner_uid_->IsInitialized()) return false;
  }
  return true;
}

void HeaderNameMgrArchive::InternalSwap(HeaderNameMgrArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  per_tables_.InternalSwap(&other->per_tables_);
  name_frag_tiles_.InternalSwap(&other->name_frag_tiles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeaderNameMgrArchive, nrm_owner_uid_)
      + sizeof(HeaderNameMgrArchive::nrm_owner_uid_)
      - PROTOBUF_FIELD_OFFSET(HeaderNameMgrArchive, owner_uid_)>(
          reinterpret_cast<char*>(&owner_uid_),
          reinterpret_cast<char*>(&other->owner_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderNameMgrArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[143]);
}

// ===================================================================

class WidthHeightCacheFittingEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<WidthHeightCacheFittingEntry>()._has_bits_);
  static void set_has_fitting_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fitting_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WidthHeightCacheFittingEntry::WidthHeightCacheFittingEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.WidthHeightCacheFittingEntry)
}
WidthHeightCacheFittingEntry::WidthHeightCacheFittingEntry(const WidthHeightCacheFittingEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fitting_index_, &from.fitting_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&fitting_size_) -
    reinterpret_cast<char*>(&fitting_index_)) + sizeof(fitting_size_));
  // @@protoc_insertion_point(copy_constructor:TST.WidthHeightCacheFittingEntry)
}

inline void WidthHeightCacheFittingEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fitting_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fitting_size_) -
    reinterpret_cast<char*>(&fitting_index_)) + sizeof(fitting_size_));
}

WidthHeightCacheFittingEntry::~WidthHeightCacheFittingEntry() {
  // @@protoc_insertion_point(destructor:TST.WidthHeightCacheFittingEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WidthHeightCacheFittingEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WidthHeightCacheFittingEntry::ArenaDtor(void* object) {
  WidthHeightCacheFittingEntry* _this = reinterpret_cast< WidthHeightCacheFittingEntry* >(object);
  (void)_this;
}
void WidthHeightCacheFittingEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WidthHeightCacheFittingEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WidthHeightCacheFittingEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.WidthHeightCacheFittingEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&fitting_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fitting_size_) -
        reinterpret_cast<char*>(&fitting_index_)) + sizeof(fitting_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WidthHeightCacheFittingEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 fitting_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fitting_index(&has_bits);
          fitting_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float fitting_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_fitting_size(&has_bits);
          fitting_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WidthHeightCacheFittingEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.WidthHeightCacheFittingEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fitting_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fitting_index(), target);
  }

  // optional float fitting_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fitting_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.WidthHeightCacheFittingEntry)
  return target;
}

size_t WidthHeightCacheFittingEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.WidthHeightCacheFittingEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 fitting_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fitting_index());
    }

    // optional float fitting_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WidthHeightCacheFittingEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WidthHeightCacheFittingEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WidthHeightCacheFittingEntry::GetClassData() const { return &_class_data_; }

void WidthHeightCacheFittingEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WidthHeightCacheFittingEntry *>(to)->MergeFrom(
      static_cast<const WidthHeightCacheFittingEntry &>(from));
}


void WidthHeightCacheFittingEntry::MergeFrom(const WidthHeightCacheFittingEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.WidthHeightCacheFittingEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      fitting_index_ = from.fitting_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      fitting_size_ = from.fitting_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WidthHeightCacheFittingEntry::CopyFrom(const WidthHeightCacheFittingEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.WidthHeightCacheFittingEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WidthHeightCacheFittingEntry::IsInitialized() const {
  return true;
}

void WidthHeightCacheFittingEntry::InternalSwap(WidthHeightCacheFittingEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WidthHeightCacheFittingEntry, fitting_size_)
      + sizeof(WidthHeightCacheFittingEntry::fitting_size_)
      - PROTOBUF_FIELD_OFFSET(WidthHeightCacheFittingEntry, fitting_index_)>(
          reinterpret_cast<char*>(&fitting_index_),
          reinterpret_cast<char*>(&other->fitting_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WidthHeightCacheFittingEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[144]);
}

// ===================================================================

class WidthHeightCache::_Internal {
 public:
  using HasBits = decltype(std::declval<WidthHeightCache>()._has_bits_);
  static void set_has_columns_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WidthHeightCache::WidthHeightCache(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rows_fitting_entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.WidthHeightCache)
}
WidthHeightCache::WidthHeightCache(const WidthHeightCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rows_fitting_entries_(from.rows_fitting_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  columns_count_ = from.columns_count_;
  // @@protoc_insertion_point(copy_constructor:TST.WidthHeightCache)
}

inline void WidthHeightCache::SharedCtor() {
columns_count_ = 0u;
}

WidthHeightCache::~WidthHeightCache() {
  // @@protoc_insertion_point(destructor:TST.WidthHeightCache)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WidthHeightCache::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WidthHeightCache::ArenaDtor(void* object) {
  WidthHeightCache* _this = reinterpret_cast< WidthHeightCache* >(object);
  (void)_this;
}
void WidthHeightCache::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WidthHeightCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WidthHeightCache::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.WidthHeightCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rows_fitting_entries_.Clear();
  columns_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WidthHeightCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.WidthHeightCacheFittingEntry rows_fitting_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rows_fitting_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 columns_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_columns_count(&has_bits);
          columns_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WidthHeightCache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.WidthHeightCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.WidthHeightCacheFittingEntry rows_fitting_entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rows_fitting_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rows_fitting_entries(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 columns_count = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_columns_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.WidthHeightCache)
  return target;
}

size_t WidthHeightCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.WidthHeightCache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.WidthHeightCacheFittingEntry rows_fitting_entries = 1;
  total_size += 1UL * this->_internal_rows_fitting_entries_size();
  for (const auto& msg : this->rows_fitting_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 columns_count = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_columns_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WidthHeightCache::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WidthHeightCache::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WidthHeightCache::GetClassData() const { return &_class_data_; }

void WidthHeightCache::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WidthHeightCache *>(to)->MergeFrom(
      static_cast<const WidthHeightCache &>(from));
}


void WidthHeightCache::MergeFrom(const WidthHeightCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.WidthHeightCache)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_fitting_entries_.MergeFrom(from.rows_fitting_entries_);
  if (from._internal_has_columns_count()) {
    _internal_set_columns_count(from._internal_columns_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WidthHeightCache::CopyFrom(const WidthHeightCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.WidthHeightCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WidthHeightCache::IsInitialized() const {
  return true;
}

void WidthHeightCache::InternalSwap(WidthHeightCache* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rows_fitting_entries_.InternalSwap(&other->rows_fitting_entries_);
  swap(columns_count_, other->columns_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WidthHeightCache::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[145]);
}

// ===================================================================

class LayoutEngineArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LayoutEngineArchive>()._has_bits_);
  static const ::TST::WidthHeightCache& width_height_cache(const LayoutEngineArchive* msg);
  static void set_has_width_height_cache(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TST::WidthHeightCache&
LayoutEngineArchive::_Internal::width_height_cache(const LayoutEngineArchive* msg) {
  return *msg->width_height_cache_;
}
LayoutEngineArchive::LayoutEngineArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.LayoutEngineArchive)
}
LayoutEngineArchive::LayoutEngineArchive(const LayoutEngineArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_width_height_cache()) {
    width_height_cache_ = new ::TST::WidthHeightCache(*from.width_height_cache_);
  } else {
    width_height_cache_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.LayoutEngineArchive)
}

inline void LayoutEngineArchive::SharedCtor() {
width_height_cache_ = nullptr;
}

LayoutEngineArchive::~LayoutEngineArchive() {
  // @@protoc_insertion_point(destructor:TST.LayoutEngineArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LayoutEngineArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete width_height_cache_;
}

void LayoutEngineArchive::ArenaDtor(void* object) {
  LayoutEngineArchive* _this = reinterpret_cast< LayoutEngineArchive* >(object);
  (void)_this;
}
void LayoutEngineArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LayoutEngineArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LayoutEngineArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.LayoutEngineArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(width_height_cache_ != nullptr);
    width_height_cache_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayoutEngineArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TST.WidthHeightCache width_height_cache = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_width_height_cache(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LayoutEngineArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.LayoutEngineArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TST.WidthHeightCache width_height_cache = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::width_height_cache(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.LayoutEngineArchive)
  return target;
}

size_t LayoutEngineArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.LayoutEngineArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TST.WidthHeightCache width_height_cache = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *width_height_cache_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LayoutEngineArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LayoutEngineArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LayoutEngineArchive::GetClassData() const { return &_class_data_; }

void LayoutEngineArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LayoutEngineArchive *>(to)->MergeFrom(
      static_cast<const LayoutEngineArchive &>(from));
}


void LayoutEngineArchive::MergeFrom(const LayoutEngineArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.LayoutEngineArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_width_height_cache()) {
    _internal_mutable_width_height_cache()->::TST::WidthHeightCache::MergeFrom(from._internal_width_height_cache());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LayoutEngineArchive::CopyFrom(const LayoutEngineArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.LayoutEngineArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutEngineArchive::IsInitialized() const {
  return true;
}

void LayoutEngineArchive::InternalSwap(LayoutEngineArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(width_height_cache_, other->width_height_cache_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LayoutEngineArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[146]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TST::ImportWarningSetArchive >, 11, false >
  import_warning_set(kImportWarningSetFieldNumber, ::TST::ImportWarningSetArchive::default_instance());
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TST::CellFormatAndValueArchive >, 11, false >
  format_and_value(kFormatAndValueFieldNumber, ::TST::CellFormatAndValueArchive::default_instance());
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TST::CellBorderArchive >, 11, false >
  cell_border(kCellBorderFieldNumber, ::TST::CellBorderArchive::default_instance());
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TST::CommentStorageWrapperArchive >, 11, false >
  comment_storage(kCommentStorageFieldNumber, ::TST::CommentStorageWrapperArchive::default_instance());
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TST::CellSpecArchive >, 11, false >
  cell_spec(kCellSpecFieldNumber, ::TST::CellSpecArchive::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace TST
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TST::CellID* Arena::CreateMaybeMessage< ::TST::CellID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellID >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellUIDLookupListArchive* Arena::CreateMaybeMessage< ::TST::CellUIDLookupListArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellUIDLookupListArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellUIDListArchive* Arena::CreateMaybeMessage< ::TST::CellUIDListArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellUIDListArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableSize* Arena::CreateMaybeMessage< ::TST::TableSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableSize >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ExpandedTableSize* Arena::CreateMaybeMessage< ::TST::ExpandedTableSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ExpandedTableSize >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellRange* Arena::CreateMaybeMessage< ::TST::CellRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellRange >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ExpandedCellRange* Arena::CreateMaybeMessage< ::TST::ExpandedCellRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ExpandedCellRange >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableSelection* Arena::CreateMaybeMessage< ::TST::TableSelection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableSelection >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TileRowInfo* Arena::CreateMaybeMessage< ::TST::TileRowInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TileRowInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::Tile* Arena::CreateMaybeMessage< ::TST::Tile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::Tile >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TileStorage_Tile* Arena::CreateMaybeMessage< ::TST::TileStorage_Tile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TileStorage_Tile >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TileStorage* Arena::CreateMaybeMessage< ::TST::TileStorage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TileStorage >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::PopUpMenuModel_CellValue* Arena::CreateMaybeMessage< ::TST::PopUpMenuModel_CellValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::PopUpMenuModel_CellValue >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::PopUpMenuModel* Arena::CreateMaybeMessage< ::TST::PopUpMenuModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::PopUpMenuModel >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ImportWarningSetArchive_FormulaImportWarning* Arena::CreateMaybeMessage< ::TST::ImportWarningSetArchive_FormulaImportWarning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ImportWarningSetArchive_FormulaImportWarning >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ImportWarningSetArchive* Arena::CreateMaybeMessage< ::TST::ImportWarningSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ImportWarningSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellRefImportWarningSetPairArchive* Arena::CreateMaybeMessage< ::TST::CellRefImportWarningSetPairArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellRefImportWarningSetPairArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ImportWarningSetByCellRefArchive* Arena::CreateMaybeMessage< ::TST::ImportWarningSetByCellRefArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ImportWarningSetByCellRefArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableDataList_ListEntry* Arena::CreateMaybeMessage< ::TST::TableDataList_ListEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableDataList_ListEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableDataList* Arena::CreateMaybeMessage< ::TST::TableDataList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableDataList >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableDataListSegment* Arena::CreateMaybeMessage< ::TST::TableDataListSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableDataListSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableRBTree_Node* Arena::CreateMaybeMessage< ::TST::TableRBTree_Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableRBTree_Node >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableRBTree* Arena::CreateMaybeMessage< ::TST::TableRBTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableRBTree >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HeaderStorageBucket_Header* Arena::CreateMaybeMessage< ::TST::HeaderStorageBucket_Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HeaderStorageBucket_Header >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HeaderStorageBucket* Arena::CreateMaybeMessage< ::TST::HeaderStorageBucket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HeaderStorageBucket >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HeaderStorage* Arena::CreateMaybeMessage< ::TST::HeaderStorage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HeaderStorage >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::DataStore* Arena::CreateMaybeMessage< ::TST::DataStore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::DataStore >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableInfoArchive* Arena::CreateMaybeMessage< ::TST::TableInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CategoryInfoArchive* Arena::CreateMaybeMessage< ::TST::CategoryInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CategoryInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::WPTableInfoArchive* Arena::CreateMaybeMessage< ::TST::WPTableInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::WPTableInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableStyleNetworkArchive* Arena::CreateMaybeMessage< ::TST::TableStyleNetworkArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableStyleNetworkArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableSortOrderArchive_SortRuleArchive* Arena::CreateMaybeMessage< ::TST::TableSortOrderArchive_SortRuleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableSortOrderArchive_SortRuleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableSortOrderArchive* Arena::CreateMaybeMessage< ::TST::TableSortOrderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableSortOrderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableSortOrderUIDArchive_SortRuleArchive* Arena::CreateMaybeMessage< ::TST::TableSortOrderUIDArchive_SortRuleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableSortOrderUIDArchive_SortRuleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableSortOrderUIDArchive* Arena::CreateMaybeMessage< ::TST::TableSortOrderUIDArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableSortOrderUIDArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::SortRuleReferenceTrackerArchive* Arena::CreateMaybeMessage< ::TST::SortRuleReferenceTrackerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::SortRuleReferenceTrackerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellRegion* Arena::CreateMaybeMessage< ::TST::CellRegion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellRegion >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellUIDRegionArchive* Arena::CreateMaybeMessage< ::TST::CellUIDRegionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellUIDRegionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StructuredTextImportRecord* Arena::CreateMaybeMessage< ::TST::StructuredTextImportRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StructuredTextImportRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableModelArchive* Arena::CreateMaybeMessage< ::TST::TableModelArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableModelArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::SummaryModelArchive* Arena::CreateMaybeMessage< ::TST::SummaryModelArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::SummaryModelArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::SummaryModelGroupByChangeStateArchive* Arena::CreateMaybeMessage< ::TST::SummaryModelGroupByChangeStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::SummaryModelGroupByChangeStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ColumnRowUIDMapArchive* Arena::CreateMaybeMessage< ::TST::ColumnRowUIDMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ColumnRowUIDMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StrokeLayerArchive_StrokeRunArchive* Arena::CreateMaybeMessage< ::TST::StrokeLayerArchive_StrokeRunArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StrokeLayerArchive_StrokeRunArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StrokeLayerArchive* Arena::CreateMaybeMessage< ::TST::StrokeLayerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StrokeLayerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StrokeSidecarArchive* Arena::CreateMaybeMessage< ::TST::StrokeSidecarArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StrokeSidecarArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::DurationWrapperArchive* Arena::CreateMaybeMessage< ::TST::DurationWrapperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::DurationWrapperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::Cell* Arena::CreateMaybeMessage< ::TST::Cell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::Cell >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::MergeRegionMapArchive* Arena::CreateMaybeMessage< ::TST::MergeRegionMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::MergeRegionMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellMapArchive* Arena::CreateMaybeMessage< ::TST::CellMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellListArchive_OptionalCell* Arena::CreateMaybeMessage< ::TST::CellListArchive_OptionalCell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellListArchive_OptionalCell >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellListArchive* Arena::CreateMaybeMessage< ::TST::CellListArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellListArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ConcurrentCellMapArchive* Arena::CreateMaybeMessage< ::TST::ConcurrentCellMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ConcurrentCellMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ConcurrentCellListArchive_OptionalCell* Arena::CreateMaybeMessage< ::TST::ConcurrentCellListArchive_OptionalCell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ConcurrentCellListArchive_OptionalCell >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ConcurrentCellListArchive* Arena::CreateMaybeMessage< ::TST::ConcurrentCellListArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ConcurrentCellListArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellFormatAndValueArchive* Arena::CreateMaybeMessage< ::TST::CellFormatAndValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellFormatAndValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellSpecArchive* Arena::CreateMaybeMessage< ::TST::CellSpecArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellSpecArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommentStorageWrapperArchive* Arena::CreateMaybeMessage< ::TST::CommentStorageWrapperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommentStorageWrapperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellDiffArchive* Arena::CreateMaybeMessage< ::TST::CellDiffArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellDiffArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellDiffArray* Arena::CreateMaybeMessage< ::TST::CellDiffArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellDiffArray >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellDiffArraySegment* Arena::CreateMaybeMessage< ::TST::CellDiffArraySegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellDiffArraySegment >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellDiffMapArchive* Arena::CreateMaybeMessage< ::TST::CellDiffMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellDiffMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive* Arena::CreateMaybeMessage< ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::DoubleStyleMapArchive* Arena::CreateMaybeMessage< ::TST::DoubleStyleMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::DoubleStyleMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StyleTableMapArchive_StyleTableMapEntryArchive* Arena::CreateMaybeMessage< ::TST::StyleTableMapArchive_StyleTableMapEntryArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StyleTableMapArchive_StyleTableMapEntryArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StyleTableMapArchive* Arena::CreateMaybeMessage< ::TST::StyleTableMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StyleTableMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::SelectionArchive* Arena::CreateMaybeMessage< ::TST::SelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::SelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::DeathhawkRdar39989167CellSelectionArchive* Arena::CreateMaybeMessage< ::TST::DeathhawkRdar39989167CellSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::DeathhawkRdar39989167CellSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StrokeSelectionArchive* Arena::CreateMaybeMessage< ::TST::StrokeSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StrokeSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ControlCellSelectionArchive* Arena::CreateMaybeMessage< ::TST::ControlCellSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ControlCellSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StockCellSelectionArchive* Arena::CreateMaybeMessage< ::TST::StockCellSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StockCellSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableNameSelectionArchive* Arena::CreateMaybeMessage< ::TST::TableNameSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableNameSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::AutofillSelectionArchive* Arena::CreateMaybeMessage< ::TST::AutofillSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::AutofillSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FilterRuleArchive* Arena::CreateMaybeMessage< ::TST::FilterRuleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FilterRuleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableStyleArchive* Arena::CreateMaybeMessage< ::TST::TableStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellStyleArchive* Arena::CreateMaybeMessage< ::TST::CellStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FormulaPredicateArchive* Arena::CreateMaybeMessage< ::TST::FormulaPredicateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FormulaPredicateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ConditionalStyleSetArchive_ConditionalStyleRule* Arena::CreateMaybeMessage< ::TST::ConditionalStyleSetArchive_ConditionalStyleRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ConditionalStyleSetArchive_ConditionalStyleRule >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ConditionalStyleSetArchive* Arena::CreateMaybeMessage< ::TST::ConditionalStyleSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ConditionalStyleSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FilterSetArchive* Arena::CreateMaybeMessage< ::TST::FilterSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FilterSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HiddenStateExtentArchive_RowOrColumnState* Arena::CreateMaybeMessage< ::TST::HiddenStateExtentArchive_RowOrColumnState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HiddenStateExtentArchive_RowOrColumnState >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HiddenStateExtentArchive* Arena::CreateMaybeMessage< ::TST::HiddenStateExtentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HiddenStateExtentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HiddenStatesArchive* Arena::CreateMaybeMessage< ::TST::HiddenStatesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HiddenStatesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HiddenStatesOwnerArchive* Arena::CreateMaybeMessage< ::TST::HiddenStatesOwnerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HiddenStatesOwnerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ExpandCollapseStateArchive* Arena::CreateMaybeMessage< ::TST::ExpandCollapseStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ExpandCollapseStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TokenAttachmentArchive* Arena::CreateMaybeMessage< ::TST::TokenAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TokenAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FormulaArchive* Arena::CreateMaybeMessage< ::TST::FormulaArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FormulaArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ExpressionNodeArchive* Arena::CreateMaybeMessage< ::TST::ExpressionNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ExpressionNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::BooleanNodeArchive* Arena::CreateMaybeMessage< ::TST::BooleanNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::BooleanNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::NumberNodeArchive* Arena::CreateMaybeMessage< ::TST::NumberNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::NumberNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StringNodeArchive* Arena::CreateMaybeMessage< ::TST::StringNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StringNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::IdentifierNodeArchive* Arena::CreateMaybeMessage< ::TST::IdentifierNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::IdentifierNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ArrayNodeArchive* Arena::CreateMaybeMessage< ::TST::ArrayNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ArrayNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ListNodeArchive* Arena::CreateMaybeMessage< ::TST::ListNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ListNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::OperatorNodeArchive* Arena::CreateMaybeMessage< ::TST::OperatorNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::OperatorNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::PostfixOperatorNodeArchive* Arena::CreateMaybeMessage< ::TST::PostfixOperatorNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::PostfixOperatorNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::PrefixOperatorNodeArchive* Arena::CreateMaybeMessage< ::TST::PrefixOperatorNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::PrefixOperatorNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FunctionNodeArchive* Arena::CreateMaybeMessage< ::TST::FunctionNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FunctionNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FunctionEndNodeArchive* Arena::CreateMaybeMessage< ::TST::FunctionEndNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FunctionEndNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::DateNodeArchive* Arena::CreateMaybeMessage< ::TST::DateNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::DateNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ReferenceNodeArchive* Arena::CreateMaybeMessage< ::TST::ReferenceNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ReferenceNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::DurationNodeArchive* Arena::CreateMaybeMessage< ::TST::DurationNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::DurationNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ArgumentPlaceholderNodeArchive* Arena::CreateMaybeMessage< ::TST::ArgumentPlaceholderNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ArgumentPlaceholderNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::EmptyExpressionNodeArchive* Arena::CreateMaybeMessage< ::TST::EmptyExpressionNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::EmptyExpressionNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::LetNodeArchive* Arena::CreateMaybeMessage< ::TST::LetNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::LetNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::InNodeArchive* Arena::CreateMaybeMessage< ::TST::InNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::InNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::VariableNodeArchive* Arena::CreateMaybeMessage< ::TST::VariableNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::VariableNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::LayoutHintArchive* Arena::CreateMaybeMessage< ::TST::LayoutHintArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::LayoutHintArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CompletionTokenAttachmentArchive* Arena::CreateMaybeMessage< ::TST::CompletionTokenAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CompletionTokenAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HiddenStateFormulaOwnerArchive* Arena::CreateMaybeMessage< ::TST::HiddenStateFormulaOwnerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HiddenStateFormulaOwnerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FormulaStoreArchive_FormulaStorePair* Arena::CreateMaybeMessage< ::TST::FormulaStoreArchive_FormulaStorePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FormulaStoreArchive_FormulaStorePair >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FormulaStoreArchive* Arena::CreateMaybeMessage< ::TST::FormulaStoreArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FormulaStoreArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::MergeOperationArchive* Arena::CreateMaybeMessage< ::TST::MergeOperationArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::MergeOperationArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::MergeOwnerArchive* Arena::CreateMaybeMessage< ::TST::MergeOwnerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::MergeOwnerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::PencilAnnotationArchive* Arena::CreateMaybeMessage< ::TST::PencilAnnotationArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::PencilAnnotationArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::PencilAnnotationOwnerArchive* Arena::CreateMaybeMessage< ::TST::PencilAnnotationOwnerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::PencilAnnotationOwnerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::AccumulatorArchive* Arena::CreateMaybeMessage< ::TST::AccumulatorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::AccumulatorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::GroupColumnArchive* Arena::CreateMaybeMessage< ::TST::GroupColumnArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::GroupColumnArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::GroupColumnListArchive* Arena::CreateMaybeMessage< ::TST::GroupColumnListArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::GroupColumnListArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ColumnAggregateArchive* Arena::CreateMaybeMessage< ::TST::ColumnAggregateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ColumnAggregateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ColumnAggregateListArchive* Arena::CreateMaybeMessage< ::TST::ColumnAggregateListArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ColumnAggregateListArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* Arena::CreateMaybeMessage< ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* Arena::CreateMaybeMessage< ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive* Arena::CreateMaybeMessage< ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* Arena::CreateMaybeMessage< ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* Arena::CreateMaybeMessage< ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive* Arena::CreateMaybeMessage< ::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CategoryOwnerArchive_GroupByArchive* Arena::CreateMaybeMessage< ::TST::CategoryOwnerArchive_GroupByArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CategoryOwnerArchive_GroupByArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CategoryOwnerArchive* Arena::CreateMaybeMessage< ::TST::CategoryOwnerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CategoryOwnerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::RichTextPayloadArchive* Arena::CreateMaybeMessage< ::TST::RichTextPayloadArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::RichTextPayloadArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FormulaEqualsTokenAttachmentArchive* Arena::CreateMaybeMessage< ::TST::FormulaEqualsTokenAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FormulaEqualsTokenAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellFillStandIn* Arena::CreateMaybeMessage< ::TST::CellFillStandIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellFillStandIn >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FormulaSelectionArchive* Arena::CreateMaybeMessage< ::TST::FormulaSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FormulaSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellBorderArchive* Arena::CreateMaybeMessage< ::TST::CellBorderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellBorderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::DefaultCellStylesContainerArchive* Arena::CreateMaybeMessage< ::TST::DefaultCellStylesContainerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::DefaultCellStylesContainerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::MultiTableRemapperArchive* Arena::CreateMaybeMessage< ::TST::MultiTableRemapperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::MultiTableRemapperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ChangePropagationMapWrapper* Arena::CreateMaybeMessage< ::TST::ChangePropagationMapWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ChangePropagationMapWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::SummaryCellVendorArchive_SummaryCellEntry* Arena::CreateMaybeMessage< ::TST::SummaryCellVendorArchive_SummaryCellEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::SummaryCellVendorArchive_SummaryCellEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::SummaryCellVendorArchive* Arena::CreateMaybeMessage< ::TST::SummaryCellVendorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::SummaryCellVendorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CategoryOrderArchive* Arena::CreateMaybeMessage< ::TST::CategoryOrderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CategoryOrderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HeaderNameMgrTileArchive_NameFragmentArchive* Arena::CreateMaybeMessage< ::TST::HeaderNameMgrTileArchive_NameFragmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HeaderNameMgrTileArchive_NameFragmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HeaderNameMgrTileArchive* Arena::CreateMaybeMessage< ::TST::HeaderNameMgrTileArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HeaderNameMgrTileArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HeaderNameMgrArchive_PerTableArchive* Arena::CreateMaybeMessage< ::TST::HeaderNameMgrArchive_PerTableArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HeaderNameMgrArchive_PerTableArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HeaderNameMgrArchive* Arena::CreateMaybeMessage< ::TST::HeaderNameMgrArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HeaderNameMgrArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::WidthHeightCacheFittingEntry* Arena::CreateMaybeMessage< ::TST::WidthHeightCacheFittingEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::WidthHeightCacheFittingEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::WidthHeightCache* Arena::CreateMaybeMessage< ::TST::WidthHeightCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::WidthHeightCache >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::LayoutEngineArchive* Arena::CreateMaybeMessage< ::TST::LayoutEngineArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::LayoutEngineArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
