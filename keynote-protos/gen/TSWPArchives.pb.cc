// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSWPArchives.proto

#include "TSWPArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TSWP {
constexpr SelectionArchive::SelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : range_(nullptr)
  , smart_field_range_(nullptr)
  , type_(0)

  , styleinsertionbehavior_(0)

  , caretaffinity_(0)
{}
struct SelectionArchiveDefaultTypeInternal {
  constexpr SelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectionArchiveDefaultTypeInternal() {}
  union {
    SelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectionArchiveDefaultTypeInternal _SelectionArchive_default_instance_;
constexpr ObjectAttributeTable_ObjectAttribute::ObjectAttributeTable_ObjectAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(nullptr)
  , character_index_(0u){}
struct ObjectAttributeTable_ObjectAttributeDefaultTypeInternal {
  constexpr ObjectAttributeTable_ObjectAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectAttributeTable_ObjectAttributeDefaultTypeInternal() {}
  union {
    ObjectAttributeTable_ObjectAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectAttributeTable_ObjectAttributeDefaultTypeInternal _ObjectAttributeTable_ObjectAttribute_default_instance_;
constexpr ObjectAttributeTable::ObjectAttributeTable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_(){}
struct ObjectAttributeTableDefaultTypeInternal {
  constexpr ObjectAttributeTableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectAttributeTableDefaultTypeInternal() {}
  union {
    ObjectAttributeTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectAttributeTableDefaultTypeInternal _ObjectAttributeTable_default_instance_;
constexpr StringAttributeTable_StringAttribute::StringAttributeTable_StringAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , character_index_(0u){}
struct StringAttributeTable_StringAttributeDefaultTypeInternal {
  constexpr StringAttributeTable_StringAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringAttributeTable_StringAttributeDefaultTypeInternal() {}
  union {
    StringAttributeTable_StringAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringAttributeTable_StringAttributeDefaultTypeInternal _StringAttributeTable_StringAttribute_default_instance_;
constexpr StringAttributeTable::StringAttributeTable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_(){}
struct StringAttributeTableDefaultTypeInternal {
  constexpr StringAttributeTableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringAttributeTableDefaultTypeInternal() {}
  union {
    StringAttributeTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringAttributeTableDefaultTypeInternal _StringAttributeTable_default_instance_;
constexpr ParaDataAttributeTable_ParaDataAttribute::ParaDataAttributeTable_ParaDataAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : character_index_(0u)
  , first_(0u)
  , second_(0u){}
struct ParaDataAttributeTable_ParaDataAttributeDefaultTypeInternal {
  constexpr ParaDataAttributeTable_ParaDataAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParaDataAttributeTable_ParaDataAttributeDefaultTypeInternal() {}
  union {
    ParaDataAttributeTable_ParaDataAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParaDataAttributeTable_ParaDataAttributeDefaultTypeInternal _ParaDataAttributeTable_ParaDataAttribute_default_instance_;
constexpr ParaDataAttributeTable::ParaDataAttributeTable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_(){}
struct ParaDataAttributeTableDefaultTypeInternal {
  constexpr ParaDataAttributeTableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParaDataAttributeTableDefaultTypeInternal() {}
  union {
    ParaDataAttributeTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParaDataAttributeTableDefaultTypeInternal _ParaDataAttributeTable_default_instance_;
constexpr OverlappingFieldAttributeTable_OverlappingFieldAttribute::OverlappingFieldAttributeTable_OverlappingFieldAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : range_(nullptr)
  , field_(nullptr){}
struct OverlappingFieldAttributeTable_OverlappingFieldAttributeDefaultTypeInternal {
  constexpr OverlappingFieldAttributeTable_OverlappingFieldAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OverlappingFieldAttributeTable_OverlappingFieldAttributeDefaultTypeInternal() {}
  union {
    OverlappingFieldAttributeTable_OverlappingFieldAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OverlappingFieldAttributeTable_OverlappingFieldAttributeDefaultTypeInternal _OverlappingFieldAttributeTable_OverlappingFieldAttribute_default_instance_;
constexpr OverlappingFieldAttributeTable::OverlappingFieldAttributeTable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_(){}
struct OverlappingFieldAttributeTableDefaultTypeInternal {
  constexpr OverlappingFieldAttributeTableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OverlappingFieldAttributeTableDefaultTypeInternal() {}
  union {
    OverlappingFieldAttributeTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OverlappingFieldAttributeTableDefaultTypeInternal _OverlappingFieldAttributeTable_default_instance_;
constexpr StorageArchive::StorageArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_()
  , style_sheet_(nullptr)
  , table_para_style_(nullptr)
  , table_para_data_(nullptr)
  , table_list_style_(nullptr)
  , table_char_style_(nullptr)
  , table_attachment_(nullptr)
  , table_smartfield_(nullptr)
  , table_layout_style_(nullptr)
  , table_para_starts_(nullptr)
  , table_bookmark_(nullptr)
  , table_footnote_(nullptr)
  , table_section_(nullptr)
  , table_rubyfield_(nullptr)
  , table_language_(nullptr)
  , table_dictation_(nullptr)
  , table_insertion_(nullptr)
  , table_deletion_(nullptr)
  , table_highlight_(nullptr)
  , table_para_bidi_(nullptr)
  , table_overlapping_highlight_(nullptr)
  , table_pencil_annotation_(nullptr)
  , table_tatechuyoko_(nullptr)
  , table_drop_cap_style_(nullptr)
  , has_itext_(false)
  , in_document_(false)
  , kind_(3)
{}
struct StorageArchiveDefaultTypeInternal {
  constexpr StorageArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StorageArchiveDefaultTypeInternal() {}
  union {
    StorageArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StorageArchiveDefaultTypeInternal _StorageArchive_default_instance_;
constexpr HighlightArchive::HighlightArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_attribute_uuid_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commentstorage_(nullptr){}
struct HighlightArchiveDefaultTypeInternal {
  constexpr HighlightArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HighlightArchiveDefaultTypeInternal() {}
  union {
    HighlightArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HighlightArchiveDefaultTypeInternal _HighlightArchive_default_instance_;
constexpr PencilAnnotationArchive::PencilAnnotationArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_attribute_uuid_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pencil_annotation_storage_(nullptr){}
struct PencilAnnotationArchiveDefaultTypeInternal {
  constexpr PencilAnnotationArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PencilAnnotationArchiveDefaultTypeInternal() {}
  union {
    PencilAnnotationArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PencilAnnotationArchiveDefaultTypeInternal _PencilAnnotationArchive_default_instance_;
constexpr FontFeatureArchive::FontFeatureArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : feature_type_(0u)
  , feature_selector_(0u){}
struct FontFeatureArchiveDefaultTypeInternal {
  constexpr FontFeatureArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FontFeatureArchiveDefaultTypeInternal() {}
  union {
    FontFeatureArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FontFeatureArchiveDefaultTypeInternal _FontFeatureArchive_default_instance_;
constexpr CharacterStylePropertiesArchive::CharacterStylePropertiesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : font_features_()
  , font_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , emphasis_marks_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , compatibility_font_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , font_color_(nullptr)
  , outline_color_(nullptr)
  , shadow_(nullptr)
  , strikethru_color_(nullptr)
  , background_color_(nullptr)
  , underline_color_(nullptr)
  , tsd_stroke_(nullptr)
  , tsd_fill_(nullptr)
  , font_size_(0)
  , bold_(false)
  , italic_(false)
  , font_name_null_(false)
  , font_color_null_(false)
  , superscript_(0)

  , underline_(0)

  , strikethru_(0)

  , capitalization_(0)

  , baseline_shift_(0)
  , kerning_(0)
  , ligatures_(0)

  , language_null_(false)
  , outline_color_null_(false)
  , shadow_null_(false)
  , strikethru_color_null_(false)
  , outline_(0)
  , strikethru_width_(0)
  , tracking_(0)
  , background_color_null_(false)
  , underline_color_null_(false)
  , word_strikethru_(false)
  , word_underline_(false)
  , underline_width_(0)
  , font_features_null_(false)
  , emphasis_marks_null_(false)
  , compatibility_font_name_null_(false)
  , is_named_point_size_(false)
  , capitalization_uses_linguistics_(false)
  , tate_chu_yoko_(false)
  , tsd_stroke_null_(false)
  , tsd_fill_null_(false)
  , tsd_fill_should_fill_text_container_(false)
  , writing_direction_(-1)
{}
struct CharacterStylePropertiesArchiveDefaultTypeInternal {
  constexpr CharacterStylePropertiesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CharacterStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    CharacterStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CharacterStylePropertiesArchiveDefaultTypeInternal _CharacterStylePropertiesArchive_default_instance_;
constexpr CharacterStyleArchive::CharacterStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , char_properties_(nullptr)
  , override_count_(0u){}
struct CharacterStyleArchiveDefaultTypeInternal {
  constexpr CharacterStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CharacterStyleArchiveDefaultTypeInternal() {}
  union {
    CharacterStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CharacterStyleArchiveDefaultTypeInternal _CharacterStyleArchive_default_instance_;
constexpr TabArchive::TabArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : leader_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , position_(0)
  , alignment_(0)
{}
struct TabArchiveDefaultTypeInternal {
  constexpr TabArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TabArchiveDefaultTypeInternal() {}
  union {
    TabArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TabArchiveDefaultTypeInternal _TabArchive_default_instance_;
constexpr TabsArchive::TabsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tabs_(){}
struct TabsArchiveDefaultTypeInternal {
  constexpr TabsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TabsArchiveDefaultTypeInternal() {}
  union {
    TabsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TabsArchiveDefaultTypeInternal _TabsArchive_default_instance_;
constexpr LineSpacingArchive::LineSpacingArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mode_(0)

  , amount_(0)
  , baselinerule_(0){}
struct LineSpacingArchiveDefaultTypeInternal {
  constexpr LineSpacingArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LineSpacingArchiveDefaultTypeInternal() {}
  union {
    LineSpacingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LineSpacingArchiveDefaultTypeInternal _LineSpacingArchive_default_instance_;
constexpr ParagraphStylePropertiesArchive::ParagraphStylePropertiesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : decimal_tab_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , following_style_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , toc_style_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fill_(nullptr)
  , line_spacing_(nullptr)
  , rule_offset_(nullptr)
  , tabs_(nullptr)
  , stroke_(nullptr)
  , list_style_(nullptr)
  , following_style_(nullptr)
  , alignment_(0)

  , default_tab_stops_(0)
  , decimal_tab_null_(false)
  , fill_null_(false)
  , hyphenate_(false)
  , keep_lines_together_(false)
  , first_line_indent_(0)
  , left_indent_(0)
  , keep_with_next_(false)
  , line_spacing_null_(false)
  , page_break_before_(false)
  , rule_offset_null_(false)
  , borders_(0)

  , rule_width_(0)
  , right_indent_(0)
  , space_after_(0)
  , space_before_(0)
  , outline_level_(0u)
  , tabs_null_(false)
  , widow_control_(false)
  , following_style_id_null_(false)
  , stroke_null_(false)
  , outline_style_(0)

  , show_in_toc_(false)
  , toc_style_id_null_(false)
  , list_style_null_(false)
  , following_style_null_(false)
  , show_in_bookmarks_list_(false)
  , show_in_toc_navigator_(false)
  , writing_direction_(-1)
{}
struct ParagraphStylePropertiesArchiveDefaultTypeInternal {
  constexpr ParagraphStylePropertiesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParagraphStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    ParagraphStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParagraphStylePropertiesArchiveDefaultTypeInternal _ParagraphStylePropertiesArchive_default_instance_;
constexpr ParagraphStyleArchive::ParagraphStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , char_properties_(nullptr)
  , para_properties_(nullptr)
  , override_count_(0u){}
struct ParagraphStyleArchiveDefaultTypeInternal {
  constexpr ParagraphStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParagraphStyleArchiveDefaultTypeInternal() {}
  union {
    ParagraphStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParagraphStyleArchiveDefaultTypeInternal _ParagraphStyleArchive_default_instance_;
constexpr ListStyleArchive_LabelGeometry::ListStyleArchive_LabelGeometry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : baseline_offset_(0)
  , scale_(1)
  , scale_with_text_(true){}
struct ListStyleArchive_LabelGeometryDefaultTypeInternal {
  constexpr ListStyleArchive_LabelGeometryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListStyleArchive_LabelGeometryDefaultTypeInternal() {}
  union {
    ListStyleArchive_LabelGeometry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListStyleArchive_LabelGeometryDefaultTypeInternal _ListStyleArchive_LabelGeometry_default_instance_;
constexpr ListStyleArchive_LabelImage::ListStyleArchive_LabelImage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : database_image_(nullptr)
  , image_(nullptr)
  , image_null_(false){}
struct ListStyleArchive_LabelImageDefaultTypeInternal {
  constexpr ListStyleArchive_LabelImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListStyleArchive_LabelImageDefaultTypeInternal() {}
  union {
    ListStyleArchive_LabelImage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListStyleArchive_LabelImageDefaultTypeInternal _ListStyleArchive_LabelImage_default_instance_;
constexpr ListStyleArchive::ListStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : label_types_()
  , text_indents_()
  , indents_()
  , geometries_()
  , number_types_()
  , strings_()
  , images_()
  , tiered_numbers_()
  , font_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , shadow_(nullptr)
  , font_color_(nullptr)
  , override_count_(0u)
  , shadow_null_(false)
  , font_color_null_(false)
  , font_name_null_(false)
  , writing_direction_(-1)
{}
struct ListStyleArchiveDefaultTypeInternal {
  constexpr ListStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListStyleArchiveDefaultTypeInternal() {}
  union {
    ListStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListStyleArchiveDefaultTypeInternal _ListStyleArchive_default_instance_;
constexpr TextStylePresetArchive::TextStylePresetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preset_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , paragraph_style_(nullptr)
  , list_style_(nullptr){}
struct TextStylePresetArchiveDefaultTypeInternal {
  constexpr TextStylePresetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextStylePresetArchiveDefaultTypeInternal() {}
  union {
    TextStylePresetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextStylePresetArchiveDefaultTypeInternal _TextStylePresetArchive_default_instance_;
constexpr ColumnsArchive_EqualColumnsArchive::ColumnsArchive_EqualColumnsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : count_(0u)
  , gap_(0){}
struct ColumnsArchive_EqualColumnsArchiveDefaultTypeInternal {
  constexpr ColumnsArchive_EqualColumnsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColumnsArchive_EqualColumnsArchiveDefaultTypeInternal() {}
  union {
    ColumnsArchive_EqualColumnsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColumnsArchive_EqualColumnsArchiveDefaultTypeInternal _ColumnsArchive_EqualColumnsArchive_default_instance_;
constexpr ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gap_(0)
  , width_(0){}
struct ColumnsArchive_NonEqualColumnsArchive_GapWidthArchiveDefaultTypeInternal {
  constexpr ColumnsArchive_NonEqualColumnsArchive_GapWidthArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColumnsArchive_NonEqualColumnsArchive_GapWidthArchiveDefaultTypeInternal() {}
  union {
    ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColumnsArchive_NonEqualColumnsArchive_GapWidthArchiveDefaultTypeInternal _ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive_default_instance_;
constexpr ColumnsArchive_NonEqualColumnsArchive::ColumnsArchive_NonEqualColumnsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : following_()
  , first_(0){}
struct ColumnsArchive_NonEqualColumnsArchiveDefaultTypeInternal {
  constexpr ColumnsArchive_NonEqualColumnsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColumnsArchive_NonEqualColumnsArchiveDefaultTypeInternal() {}
  union {
    ColumnsArchive_NonEqualColumnsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColumnsArchive_NonEqualColumnsArchiveDefaultTypeInternal _ColumnsArchive_NonEqualColumnsArchive_default_instance_;
constexpr ColumnsArchive::ColumnsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : equal_columns_(nullptr)
  , non_equal_columns_(nullptr){}
struct ColumnsArchiveDefaultTypeInternal {
  constexpr ColumnsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColumnsArchiveDefaultTypeInternal() {}
  union {
    ColumnsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColumnsArchiveDefaultTypeInternal _ColumnsArchive_default_instance_;
constexpr PaddingArchive::PaddingArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : left_(0)
  , top_(0)
  , right_(0)
  , bottom_(0){}
struct PaddingArchiveDefaultTypeInternal {
  constexpr PaddingArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PaddingArchiveDefaultTypeInternal() {}
  union {
    PaddingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PaddingArchiveDefaultTypeInternal _PaddingArchive_default_instance_;
constexpr ColumnStylePropertiesArchive::ColumnStylePropertiesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_(nullptr)
  , margins_(nullptr)
  , padding_(nullptr)
  , continuous_(false)
  , shrink_to_fit_(false)
  , vertical_text_(false)
  , columns_null_(false)
  , min_horizontal_inset_(0)
  , vertical_alignment_(0)

  , margins_null_(false)
  , padding_null_(false)
  , writing_direction_(-1)
{}
struct ColumnStylePropertiesArchiveDefaultTypeInternal {
  constexpr ColumnStylePropertiesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColumnStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    ColumnStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColumnStylePropertiesArchiveDefaultTypeInternal _ColumnStylePropertiesArchive_default_instance_;
constexpr ColumnStyleArchive::ColumnStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , column_properties_(nullptr)
  , override_count_(0u){}
struct ColumnStyleArchiveDefaultTypeInternal {
  constexpr ColumnStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColumnStyleArchiveDefaultTypeInternal() {}
  union {
    ColumnStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColumnStyleArchiveDefaultTypeInternal _ColumnStyleArchive_default_instance_;
constexpr ShapeStylePropertiesArchive::ShapeStylePropertiesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_(nullptr)
  , padding_(nullptr)
  , paragraph_style_(nullptr)
  , vertical_alignment_(0)

  , shrink_to_fit_(false)
  , columns_null_(false)
  , padding_null_(false)
  , vertical_text_(false)
  , default_text_preset_index_(0u)
  , paragraph_style_null_(false)
  , vertical_text_40_(false){}
struct ShapeStylePropertiesArchiveDefaultTypeInternal {
  constexpr ShapeStylePropertiesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShapeStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    ShapeStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShapeStylePropertiesArchiveDefaultTypeInternal _ShapeStylePropertiesArchive_default_instance_;
constexpr ShapeStyleArchive::ShapeStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , shape_properties_(nullptr)
  , override_count_(0u){}
struct ShapeStyleArchiveDefaultTypeInternal {
  constexpr ShapeStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShapeStyleArchiveDefaultTypeInternal() {}
  union {
    ShapeStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShapeStyleArchiveDefaultTypeInternal _ShapeStyleArchive_default_instance_;
constexpr ThemePresetsArchive::ThemePresetsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : list_style_presets_()
  , text_style_presets_()
  , imported_text_style_presets_()
  , toc_entry_style_presets_()
  , toc_settings_presets_()
  , character_style_presets_()
  , paragraph_style_presets_()
  , dropcap_style_presets_(){}
struct ThemePresetsArchiveDefaultTypeInternal {
  constexpr ThemePresetsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ThemePresetsArchiveDefaultTypeInternal() {}
  union {
    ThemePresetsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ThemePresetsArchiveDefaultTypeInternal _ThemePresetsArchive_default_instance_;
constexpr TextPresetDisplayItemArchive::TextPresetDisplayItemArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : display_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , preset_(nullptr){}
struct TextPresetDisplayItemArchiveDefaultTypeInternal {
  constexpr TextPresetDisplayItemArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextPresetDisplayItemArchiveDefaultTypeInternal() {}
  union {
    TextPresetDisplayItemArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextPresetDisplayItemArchiveDefaultTypeInternal _TextPresetDisplayItemArchive_default_instance_;
constexpr TOCEntryStylePropertiesArchive::TOCEntryStylePropertiesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : page_number_style_(nullptr)
  , page_number_style_null_(false)
  , show_page_number_(false){}
struct TOCEntryStylePropertiesArchiveDefaultTypeInternal {
  constexpr TOCEntryStylePropertiesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TOCEntryStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    TOCEntryStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TOCEntryStylePropertiesArchiveDefaultTypeInternal _TOCEntryStylePropertiesArchive_default_instance_;
constexpr TOCEntryStyleArchive::TOCEntryStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , toc_properties_(nullptr){}
struct TOCEntryStyleArchiveDefaultTypeInternal {
  constexpr TOCEntryStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TOCEntryStyleArchiveDefaultTypeInternal() {}
  union {
    TOCEntryStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TOCEntryStyleArchiveDefaultTypeInternal _TOCEntryStyleArchive_default_instance_;
constexpr TOCSettingsArchive_TOCEntryData::TOCSettingsArchive_TOCEntryData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : paragraph_style_(nullptr)
  , toc_entry_style_(nullptr)
  , show_in_toc_(false){}
struct TOCSettingsArchive_TOCEntryDataDefaultTypeInternal {
  constexpr TOCSettingsArchive_TOCEntryDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TOCSettingsArchive_TOCEntryDataDefaultTypeInternal() {}
  union {
    TOCSettingsArchive_TOCEntryData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TOCSettingsArchive_TOCEntryDataDefaultTypeInternal _TOCSettingsArchive_TOCEntryData_default_instance_;
constexpr TOCSettingsArchive::TOCSettingsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , toc_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , toc_scope_(0u){}
struct TOCSettingsArchiveDefaultTypeInternal {
  constexpr TOCSettingsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TOCSettingsArchiveDefaultTypeInternal() {}
  union {
    TOCSettingsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TOCSettingsArchiveDefaultTypeInternal _TOCSettingsArchive_default_instance_;
constexpr TOCEntryInstanceArchive::TOCEntryInstanceArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : heading_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , number_format_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , indexed_style_(nullptr)
  , indexed_list_style_(nullptr)
  , paragraph_index_(0u)
  , page_number_(0u)
  , number_format_(0u)
  , indexed_list_start_(0u)
  , indexed_paragraph_level_(0u){}
struct TOCEntryInstanceArchiveDefaultTypeInternal {
  constexpr TOCEntryInstanceArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TOCEntryInstanceArchiveDefaultTypeInternal() {}
  union {
    TOCEntryInstanceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TOCEntryInstanceArchiveDefaultTypeInternal _TOCEntryInstanceArchive_default_instance_;
constexpr UndoTransaction_GenericTransaction::UndoTransaction_GenericTransaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value1_(0u)
  , value2_(0u)
  , value3_(0u){}
struct UndoTransaction_GenericTransactionDefaultTypeInternal {
  constexpr UndoTransaction_GenericTransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UndoTransaction_GenericTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_GenericTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UndoTransaction_GenericTransactionDefaultTypeInternal _UndoTransaction_GenericTransaction_default_instance_;
constexpr UndoTransaction_TextTransaction::UndoTransaction_TextTransaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : string_to_delete_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , insert_location_(0u)
  , insert_length_(0u){}
struct UndoTransaction_TextTransactionDefaultTypeInternal {
  constexpr UndoTransaction_TextTransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UndoTransaction_TextTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_TextTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UndoTransaction_TextTransactionDefaultTypeInternal _UndoTransaction_TextTransaction_default_instance_;
constexpr UndoTransaction_CharIndexTransaction::UndoTransaction_CharIndexTransaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(nullptr)
  , char_index_(0u)
  , count_(0u){}
struct UndoTransaction_CharIndexTransactionDefaultTypeInternal {
  constexpr UndoTransaction_CharIndexTransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UndoTransaction_CharIndexTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_CharIndexTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UndoTransaction_CharIndexTransactionDefaultTypeInternal _UndoTransaction_CharIndexTransaction_default_instance_;
constexpr UndoTransaction_ReplaceCharIndexTransaction::UndoTransaction_ReplaceCharIndexTransaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attribute_index_(0u)
  , char_index_(0u){}
struct UndoTransaction_ReplaceCharIndexTransactionDefaultTypeInternal {
  constexpr UndoTransaction_ReplaceCharIndexTransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UndoTransaction_ReplaceCharIndexTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_ReplaceCharIndexTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UndoTransaction_ReplaceCharIndexTransactionDefaultTypeInternal _UndoTransaction_ReplaceCharIndexTransaction_default_instance_;
constexpr UndoTransaction_AttributeIndexTransaction::UndoTransaction_AttributeIndexTransaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , object_(nullptr)
  , attribute_index_(0u)
  , char_index_(0u){}
struct UndoTransaction_AttributeIndexTransactionDefaultTypeInternal {
  constexpr UndoTransaction_AttributeIndexTransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UndoTransaction_AttributeIndexTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_AttributeIndexTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UndoTransaction_AttributeIndexTransactionDefaultTypeInternal _UndoTransaction_AttributeIndexTransaction_default_instance_;
constexpr UndoTransaction_InsertAttributeTransaction::UndoTransaction_InsertAttributeTransaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , object_(nullptr)
  , attribute_index_(0u)
  , attribute_count_(0u){}
struct UndoTransaction_InsertAttributeTransactionDefaultTypeInternal {
  constexpr UndoTransaction_InsertAttributeTransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UndoTransaction_InsertAttributeTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_InsertAttributeTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UndoTransaction_InsertAttributeTransactionDefaultTypeInternal _UndoTransaction_InsertAttributeTransaction_default_instance_;
constexpr UndoTransaction_InsertNilTransaction::UndoTransaction_InsertNilTransaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attribute_index_(0u)
  , attribute_count_(0u){}
struct UndoTransaction_InsertNilTransactionDefaultTypeInternal {
  constexpr UndoTransaction_InsertNilTransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UndoTransaction_InsertNilTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_InsertNilTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UndoTransaction_InsertNilTransactionDefaultTypeInternal _UndoTransaction_InsertNilTransaction_default_instance_;
constexpr UndoTransaction_CharDeltaTransaction::UndoTransaction_CharDeltaTransaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : char_index_(0u)
  , attribute_index_(0u)
  , char_delta_(0){}
struct UndoTransaction_CharDeltaTransactionDefaultTypeInternal {
  constexpr UndoTransaction_CharDeltaTransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UndoTransaction_CharDeltaTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_CharDeltaTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UndoTransaction_CharDeltaTransactionDefaultTypeInternal _UndoTransaction_CharDeltaTransaction_default_instance_;
constexpr UndoTransaction_ParagraphDataTransaction::UndoTransaction_ParagraphDataTransaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attribute_index_(0u)
  , first_(0u)
  , second_(0u)
  , char_index_(0u){}
struct UndoTransaction_ParagraphDataTransactionDefaultTypeInternal {
  constexpr UndoTransaction_ParagraphDataTransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UndoTransaction_ParagraphDataTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_ParagraphDataTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UndoTransaction_ParagraphDataTransactionDefaultTypeInternal _UndoTransaction_ParagraphDataTransaction_default_instance_;
constexpr UndoTransaction_ObjectDOLCTransaction::UndoTransaction_ObjectDOLCTransaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(nullptr)
  , flags_(0u){}
struct UndoTransaction_ObjectDOLCTransactionDefaultTypeInternal {
  constexpr UndoTransaction_ObjectDOLCTransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UndoTransaction_ObjectDOLCTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_ObjectDOLCTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UndoTransaction_ObjectDOLCTransactionDefaultTypeInternal _UndoTransaction_ObjectDOLCTransaction_default_instance_;
constexpr UndoTransaction_CTDateTransaction::UndoTransaction_CTDateTransaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : date_(nullptr)
  , attribute_index_(0u){}
struct UndoTransaction_CTDateTransactionDefaultTypeInternal {
  constexpr UndoTransaction_CTDateTransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UndoTransaction_CTDateTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_CTDateTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UndoTransaction_CTDateTransactionDefaultTypeInternal _UndoTransaction_CTDateTransaction_default_instance_;
constexpr UndoTransaction_UnionTransaction::UndoTransaction_UnionTransaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : generic_(nullptr)
  , text_(nullptr)
  , char_index_(nullptr)
  , replace_char_index_(nullptr)
  , attribute_index_(nullptr)
  , insert_nil_(nullptr)
  , insert_attribute_(nullptr)
  , char_delta_(nullptr)
  , paragraph_data_(nullptr)
  , object_dolc_(nullptr)
  , ct_date_(nullptr)
  , table_(0u)
  , kind_(1)
{}
struct UndoTransaction_UnionTransactionDefaultTypeInternal {
  constexpr UndoTransaction_UnionTransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UndoTransaction_UnionTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_UnionTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UndoTransaction_UnionTransactionDefaultTypeInternal _UndoTransaction_UnionTransaction_default_instance_;
constexpr UndoTransaction_StorageAction::UndoTransaction_StorageAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , placement_uuid_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , range_(nullptr)
  , object_(nullptr)
  , date_(nullptr)
  , undo_object_(nullptr)
  , kind_(0)

  , flags_(0u)
  , table_(0u)
  , paragraph_level_(0u)
  , paragraph_flags_(0u)
  , paragraph_value_(0u)
  , placement_index_(0){}
struct UndoTransaction_StorageActionDefaultTypeInternal {
  constexpr UndoTransaction_StorageActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UndoTransaction_StorageActionDefaultTypeInternal() {}
  union {
    UndoTransaction_StorageAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UndoTransaction_StorageActionDefaultTypeInternal _UndoTransaction_StorageAction_default_instance_;
constexpr UndoTransaction_StorageActionGroup::UndoTransaction_StorageActionGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : forward_actions_()
  , inverse_forward_actions_()
  , inverse_detail_actions_()
  , kind_(0)
{}
struct UndoTransaction_StorageActionGroupDefaultTypeInternal {
  constexpr UndoTransaction_StorageActionGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UndoTransaction_StorageActionGroupDefaultTypeInternal() {}
  union {
    UndoTransaction_StorageActionGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UndoTransaction_StorageActionGroupDefaultTypeInternal _UndoTransaction_StorageActionGroup_default_instance_;
constexpr UndoTransaction::UndoTransaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , group_entries_()
  , flags_(0u)
  , version_(0u){}
struct UndoTransactionDefaultTypeInternal {
  constexpr UndoTransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UndoTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UndoTransactionDefaultTypeInternal _UndoTransaction_default_instance_;
constexpr UndoTransactionWrapperArchive::UndoTransactionWrapperArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : undo_transaction_(nullptr){}
struct UndoTransactionWrapperArchiveDefaultTypeInternal {
  constexpr UndoTransactionWrapperArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UndoTransactionWrapperArchiveDefaultTypeInternal() {}
  union {
    UndoTransactionWrapperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UndoTransactionWrapperArchiveDefaultTypeInternal _UndoTransactionWrapperArchive_default_instance_;
constexpr ShapeInfoArchive::ShapeInfoArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , deprecated_storage_(nullptr)
  , text_flow_(nullptr)
  , owned_storage_(nullptr)
  , is_text_box_(false){}
struct ShapeInfoArchiveDefaultTypeInternal {
  constexpr ShapeInfoArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShapeInfoArchiveDefaultTypeInternal() {}
  union {
    ShapeInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShapeInfoArchiveDefaultTypeInternal _ShapeInfoArchive_default_instance_;
constexpr CommentInfoArchive::CommentInfoArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , comment_storage_(nullptr){}
struct CommentInfoArchiveDefaultTypeInternal {
  constexpr CommentInfoArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommentInfoArchiveDefaultTypeInternal() {}
  union {
    CommentInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommentInfoArchiveDefaultTypeInternal _CommentInfoArchive_default_instance_;
constexpr TOCInfoArchive::TOCInfoArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : toc_entry_data_()
  , page_number_ranges_()
  , super_(nullptr)
  , toc_settings_(nullptr)
  , sync_toc_settings_with_toc_navigator_(false){}
struct TOCInfoArchiveDefaultTypeInternal {
  constexpr TOCInfoArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TOCInfoArchiveDefaultTypeInternal() {}
  union {
    TOCInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TOCInfoArchiveDefaultTypeInternal _TOCInfoArchive_default_instance_;
constexpr TOCLayoutHintArchive::TOCLayoutHintArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : charrange_(nullptr){}
struct TOCLayoutHintArchiveDefaultTypeInternal {
  constexpr TOCLayoutHintArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TOCLayoutHintArchiveDefaultTypeInternal() {}
  union {
    TOCLayoutHintArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TOCLayoutHintArchiveDefaultTypeInternal _TOCLayoutHintArchive_default_instance_;
constexpr EquationInfoArchive::EquationInfoArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EquationInfoArchiveDefaultTypeInternal {
  constexpr EquationInfoArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EquationInfoArchiveDefaultTypeInternal() {}
  union {
    EquationInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EquationInfoArchiveDefaultTypeInternal _EquationInfoArchive_default_instance_;
constexpr TextualAttachmentArchive::TextualAttachmentArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : string_equivalent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kind_(0)
{}
struct TextualAttachmentArchiveDefaultTypeInternal {
  constexpr TextualAttachmentArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextualAttachmentArchiveDefaultTypeInternal() {}
  union {
    TextualAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextualAttachmentArchiveDefaultTypeInternal _TextualAttachmentArchive_default_instance_;
constexpr TSWPTOCPageNumberAttachmentArchive::TSWPTOCPageNumberAttachmentArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : page_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bookmark_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr){}
struct TSWPTOCPageNumberAttachmentArchiveDefaultTypeInternal {
  constexpr TSWPTOCPageNumberAttachmentArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TSWPTOCPageNumberAttachmentArchiveDefaultTypeInternal() {}
  union {
    TSWPTOCPageNumberAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TSWPTOCPageNumberAttachmentArchiveDefaultTypeInternal _TSWPTOCPageNumberAttachmentArchive_default_instance_;
constexpr UIGraphicalAttachment::UIGraphicalAttachment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UIGraphicalAttachmentDefaultTypeInternal {
  constexpr UIGraphicalAttachmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UIGraphicalAttachmentDefaultTypeInternal() {}
  union {
    UIGraphicalAttachment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UIGraphicalAttachmentDefaultTypeInternal _UIGraphicalAttachment_default_instance_;
constexpr DrawableAttachmentArchive::DrawableAttachmentArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drawable_(nullptr)
  , h_offset_type_(0u)
  , h_offset_(0)
  , v_offset_type_(0u)
  , v_offset_(0){}
struct DrawableAttachmentArchiveDefaultTypeInternal {
  constexpr DrawableAttachmentArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DrawableAttachmentArchiveDefaultTypeInternal() {}
  union {
    DrawableAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DrawableAttachmentArchiveDefaultTypeInternal _DrawableAttachmentArchive_default_instance_;
constexpr TOCAttachmentArchive::TOCAttachmentArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct TOCAttachmentArchiveDefaultTypeInternal {
  constexpr TOCAttachmentArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TOCAttachmentArchiveDefaultTypeInternal() {}
  union {
    TOCAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TOCAttachmentArchiveDefaultTypeInternal _TOCAttachmentArchive_default_instance_;
constexpr FootnoteReferenceAttachmentArchive::FootnoteReferenceAttachmentArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_mark_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , contained_storage_(nullptr){}
struct FootnoteReferenceAttachmentArchiveDefaultTypeInternal {
  constexpr FootnoteReferenceAttachmentArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FootnoteReferenceAttachmentArchiveDefaultTypeInternal() {}
  union {
    FootnoteReferenceAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FootnoteReferenceAttachmentArchiveDefaultTypeInternal _FootnoteReferenceAttachmentArchive_default_instance_;
constexpr NumberAttachmentArchive::NumberAttachmentArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : string_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , number_format_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , number_format_(0u){}
struct NumberAttachmentArchiveDefaultTypeInternal {
  constexpr NumberAttachmentArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NumberAttachmentArchiveDefaultTypeInternal() {}
  union {
    NumberAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NumberAttachmentArchiveDefaultTypeInternal _NumberAttachmentArchive_default_instance_;
constexpr SmartFieldArchive::SmartFieldArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_attribute_uuid_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SmartFieldArchiveDefaultTypeInternal {
  constexpr SmartFieldArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SmartFieldArchiveDefaultTypeInternal() {}
  union {
    SmartFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SmartFieldArchiveDefaultTypeInternal _SmartFieldArchive_default_instance_;
constexpr HyperlinkFieldArchive::HyperlinkFieldArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_ref_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr){}
struct HyperlinkFieldArchiveDefaultTypeInternal {
  constexpr HyperlinkFieldArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HyperlinkFieldArchiveDefaultTypeInternal() {}
  union {
    HyperlinkFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HyperlinkFieldArchiveDefaultTypeInternal _HyperlinkFieldArchive_default_instance_;
constexpr PlaceholderSmartFieldArchive::PlaceholderSmartFieldArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : script_tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , localizable_(false){}
struct PlaceholderSmartFieldArchiveDefaultTypeInternal {
  constexpr PlaceholderSmartFieldArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlaceholderSmartFieldArchiveDefaultTypeInternal() {}
  union {
    PlaceholderSmartFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlaceholderSmartFieldArchiveDefaultTypeInternal _PlaceholderSmartFieldArchive_default_instance_;
constexpr UnsupportedHyperlinkFieldArchive::UnsupportedHyperlinkFieldArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_ref_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_original_ref_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr){}
struct UnsupportedHyperlinkFieldArchiveDefaultTypeInternal {
  constexpr UnsupportedHyperlinkFieldArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnsupportedHyperlinkFieldArchiveDefaultTypeInternal() {}
  union {
    UnsupportedHyperlinkFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnsupportedHyperlinkFieldArchiveDefaultTypeInternal _UnsupportedHyperlinkFieldArchive_default_instance_;
constexpr BibliographySmartFieldArchive::BibliographySmartFieldArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : citation_records_()
  , old_super_(nullptr)
  , super_(nullptr)
  , localizable_(false){}
struct BibliographySmartFieldArchiveDefaultTypeInternal {
  constexpr BibliographySmartFieldArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BibliographySmartFieldArchiveDefaultTypeInternal() {}
  union {
    BibliographySmartFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BibliographySmartFieldArchiveDefaultTypeInternal _BibliographySmartFieldArchive_default_instance_;
constexpr CitationRecordArchive::CitationRecordArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : endnote_xml_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_range_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , suffix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , authors_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , year_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hide_author_names_(false)
  , hide_year_(false){}
struct CitationRecordArchiveDefaultTypeInternal {
  constexpr CitationRecordArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CitationRecordArchiveDefaultTypeInternal() {}
  union {
    CitationRecordArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CitationRecordArchiveDefaultTypeInternal _CitationRecordArchive_default_instance_;
constexpr CitationSmartFieldArchive::CitationSmartFieldArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : citation_records_()
  , old_super_(nullptr)
  , super_(nullptr)
  , localizable_(false){}
struct CitationSmartFieldArchiveDefaultTypeInternal {
  constexpr CitationSmartFieldArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CitationSmartFieldArchiveDefaultTypeInternal() {}
  union {
    CitationSmartFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CitationSmartFieldArchiveDefaultTypeInternal _CitationSmartFieldArchive_default_instance_;
constexpr DateTimeSmartFieldArchive::DateTimeSmartFieldArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , locale_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , date_(nullptr)
  , date_style_(0)

  , time_style_(0)

  , update_plan_(0)

  , needs_update_(false){}
struct DateTimeSmartFieldArchiveDefaultTypeInternal {
  constexpr DateTimeSmartFieldArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DateTimeSmartFieldArchiveDefaultTypeInternal() {}
  union {
    DateTimeSmartFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DateTimeSmartFieldArchiveDefaultTypeInternal _DateTimeSmartFieldArchive_default_instance_;
constexpr BookmarkFieldArchive::BookmarkFieldArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , ranged_(0u)
  , hidden_(0u){}
struct BookmarkFieldArchiveDefaultTypeInternal {
  constexpr BookmarkFieldArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BookmarkFieldArchiveDefaultTypeInternal() {}
  union {
    BookmarkFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BookmarkFieldArchiveDefaultTypeInternal _BookmarkFieldArchive_default_instance_;
constexpr FilenameSmartFieldArchive::FilenameSmartFieldArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , display_flags_(0u){}
struct FilenameSmartFieldArchiveDefaultTypeInternal {
  constexpr FilenameSmartFieldArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FilenameSmartFieldArchiveDefaultTypeInternal() {}
  union {
    FilenameSmartFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FilenameSmartFieldArchiveDefaultTypeInternal _FilenameSmartFieldArchive_default_instance_;
constexpr MergeSmartFieldArchive::MergeSmartFieldArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , whitespace_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , guid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_field_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , category_(0)

  , requires_following_whitespace_(false){}
struct MergeSmartFieldArchiveDefaultTypeInternal {
  constexpr MergeSmartFieldArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MergeSmartFieldArchiveDefaultTypeInternal() {}
  union {
    MergeSmartFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MergeSmartFieldArchiveDefaultTypeInternal _MergeSmartFieldArchive_default_instance_;
constexpr TOCSmartFieldArchive_TOCEntry::TOCSmartFieldArchive_TOCEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bookmark_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_style_(nullptr)
  , range_(nullptr){}
struct TOCSmartFieldArchive_TOCEntryDefaultTypeInternal {
  constexpr TOCSmartFieldArchive_TOCEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TOCSmartFieldArchive_TOCEntryDefaultTypeInternal() {}
  union {
    TOCSmartFieldArchive_TOCEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TOCSmartFieldArchive_TOCEntryDefaultTypeInternal _TOCSmartFieldArchive_TOCEntry_default_instance_;
constexpr TOCSmartFieldArchive::TOCSmartFieldArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : toc_entries_()
  , super_(nullptr){}
struct TOCSmartFieldArchiveDefaultTypeInternal {
  constexpr TOCSmartFieldArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TOCSmartFieldArchiveDefaultTypeInternal() {}
  union {
    TOCSmartFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TOCSmartFieldArchiveDefaultTypeInternal _TOCSmartFieldArchive_default_instance_;
constexpr RubyFieldArchive::RubyFieldArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ruby_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr){}
struct RubyFieldArchiveDefaultTypeInternal {
  constexpr RubyFieldArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RubyFieldArchiveDefaultTypeInternal() {}
  union {
    RubyFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RubyFieldArchiveDefaultTypeInternal _RubyFieldArchive_default_instance_;
constexpr TateChuYokoFieldArchive::TateChuYokoFieldArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct TateChuYokoFieldArchiveDefaultTypeInternal {
  constexpr TateChuYokoFieldArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TateChuYokoFieldArchiveDefaultTypeInternal() {}
  union {
    TateChuYokoFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TateChuYokoFieldArchiveDefaultTypeInternal _TateChuYokoFieldArchive_default_instance_;
constexpr ChangeArchive::ChangeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_attribute_uuid_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_(nullptr)
  , date_(nullptr)
  , kind_(1)
{}
struct ChangeArchiveDefaultTypeInternal {
  constexpr ChangeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeArchiveDefaultTypeInternal() {}
  union {
    ChangeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeArchiveDefaultTypeInternal _ChangeArchive_default_instance_;
constexpr ChangeSessionArchive::ChangeSessionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : author_(nullptr)
  , date_(nullptr)
  , session_uid_(0u){}
struct ChangeSessionArchiveDefaultTypeInternal {
  constexpr ChangeSessionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeSessionArchiveDefaultTypeInternal() {}
  union {
    ChangeSessionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeSessionArchiveDefaultTypeInternal _ChangeSessionArchive_default_instance_;
constexpr SectionPlaceholderArchive::SectionPlaceholderArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_storage_(nullptr){}
struct SectionPlaceholderArchiveDefaultTypeInternal {
  constexpr SectionPlaceholderArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SectionPlaceholderArchiveDefaultTypeInternal() {}
  union {
    SectionPlaceholderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SectionPlaceholderArchiveDefaultTypeInternal _SectionPlaceholderArchive_default_instance_;
constexpr HyperlinkSelectionArchive::HyperlinkSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct HyperlinkSelectionArchiveDefaultTypeInternal {
  constexpr HyperlinkSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HyperlinkSelectionArchiveDefaultTypeInternal() {}
  union {
    HyperlinkSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HyperlinkSelectionArchiveDefaultTypeInternal _HyperlinkSelectionArchive_default_instance_;
constexpr FlowInfoArchive::FlowInfoArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : textboxes_()
  , text_storage_(nullptr)
  , user_interface_identifier_(0u){}
struct FlowInfoArchiveDefaultTypeInternal {
  constexpr FlowInfoArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlowInfoArchiveDefaultTypeInternal() {}
  union {
    FlowInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlowInfoArchiveDefaultTypeInternal _FlowInfoArchive_default_instance_;
constexpr FlowInfoContainerArchive::FlowInfoContainerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flow_infos_()
  , next_user_interface_identifier_(0u){}
struct FlowInfoContainerArchiveDefaultTypeInternal {
  constexpr FlowInfoContainerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlowInfoContainerArchiveDefaultTypeInternal() {}
  union {
    FlowInfoContainerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlowInfoContainerArchiveDefaultTypeInternal _FlowInfoContainerArchive_default_instance_;
constexpr DropCapArchive::DropCapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , number_of_raised_lines_(0u)
  , deprecated_outdent_(0)
  , deprecated_padding_(0)
  , wrap_type_(0)

  , shape_enabled_(false)
  , deprecated_corner_radius_(0)
  , deprecated_character_scale_(0)
  , outdent_(0)
  , padding_(0)
  , corner_radius_(0)
  , number_of_lines_(3u)
  , number_of_characters_(1u)
  , character_scale_(1){}
struct DropCapArchiveDefaultTypeInternal {
  constexpr DropCapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DropCapArchiveDefaultTypeInternal() {}
  union {
    DropCapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DropCapArchiveDefaultTypeInternal _DropCapArchive_default_instance_;
constexpr DropCapStylePropertiesArchive::DropCapStylePropertiesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drop_cap_(nullptr)
  , drop_cap_shape_stroke_(nullptr)
  , drop_cap_shape_fill_(nullptr)
  , drop_cap_shape_fill_null_(false){}
struct DropCapStylePropertiesArchiveDefaultTypeInternal {
  constexpr DropCapStylePropertiesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DropCapStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    DropCapStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DropCapStylePropertiesArchiveDefaultTypeInternal _DropCapStylePropertiesArchive_default_instance_;
constexpr DropCapStyleArchive::DropCapStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , char_properties_(nullptr)
  , drop_cap_properties_(nullptr)
  , override_count_(0u){}
struct DropCapStyleArchiveDefaultTypeInternal {
  constexpr DropCapStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DropCapStyleArchiveDefaultTypeInternal() {}
  union {
    DropCapStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DropCapStyleArchiveDefaultTypeInternal _DropCapStyleArchive_default_instance_;
}  // namespace TSWP
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TSWPArchives_2eproto[92];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TSWPArchives_2eproto[29];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TSWPArchives_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TSWPArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSWP::SelectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::SelectionArchive, type_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SelectionArchive, range_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SelectionArchive, styleinsertionbehavior_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SelectionArchive, caretaffinity_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SelectionArchive, smart_field_range_),
  2,
  0,
  3,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectAttributeTable_ObjectAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectAttributeTable_ObjectAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectAttributeTable_ObjectAttribute, character_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectAttributeTable_ObjectAttribute, object_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectAttributeTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectAttributeTable, entries_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StringAttributeTable_StringAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StringAttributeTable_StringAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::StringAttributeTable_StringAttribute, character_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StringAttributeTable_StringAttribute, object_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::StringAttributeTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::StringAttributeTable, entries_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParaDataAttributeTable_ParaDataAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParaDataAttributeTable_ParaDataAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ParaDataAttributeTable_ParaDataAttribute, character_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParaDataAttributeTable_ParaDataAttribute, first_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParaDataAttributeTable_ParaDataAttribute, second_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::ParaDataAttributeTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ParaDataAttributeTable, entries_),
  PROTOBUF_FIELD_OFFSET(::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute, range_),
  PROTOBUF_FIELD_OFFSET(::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute, field_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::OverlappingFieldAttributeTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::OverlappingFieldAttributeTable, entries_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, kind_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, style_sheet_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, text_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, has_itext_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, in_document_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_para_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_para_data_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_list_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_char_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_attachment_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_smartfield_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_layout_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_para_starts_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_bookmark_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_footnote_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_section_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_rubyfield_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_language_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_dictation_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_insertion_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_deletion_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_highlight_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_para_bidi_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_overlapping_highlight_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_pencil_annotation_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_tatechuyoko_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, table_drop_cap_style_),
  25,
  0,
  ~0u,
  23,
  24,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  PROTOBUF_FIELD_OFFSET(::TSWP::HighlightArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::HighlightArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::HighlightArchive, commentstorage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::HighlightArchive, text_attribute_uuid_string_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::PencilAnnotationArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::PencilAnnotationArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::PencilAnnotationArchive, pencil_annotation_storage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::PencilAnnotationArchive, text_attribute_uuid_string_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::FontFeatureArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::FontFeatureArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::FontFeatureArchive, feature_type_),
  PROTOBUF_FIELD_OFFSET(::TSWP::FontFeatureArchive, feature_selector_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, bold_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, italic_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, font_size_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, font_name_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, font_name_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, font_color_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, font_color_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, language_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, language_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, superscript_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, underline_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, strikethru_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, capitalization_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, baseline_shift_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, kerning_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, ligatures_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, outline_color_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, outline_color_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, outline_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, shadow_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, shadow_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, strikethru_color_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, strikethru_color_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, strikethru_width_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, background_color_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, background_color_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, tracking_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, underline_color_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, underline_color_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, underline_width_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, word_strikethru_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, word_underline_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, font_features_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, font_features_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, writing_direction_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, emphasis_marks_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, emphasis_marks_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, compatibility_font_name_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, compatibility_font_name_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, is_named_point_size_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, capitalization_uses_linguistics_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, tate_chu_yoko_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, tsd_stroke_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, tsd_stroke_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, tsd_fill_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, tsd_fill_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, tsd_fill_should_fill_text_container_),
  13,
  14,
  12,
  15,
  0,
  16,
  4,
  24,
  1,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  25,
  5,
  28,
  26,
  6,
  27,
  7,
  29,
  31,
  8,
  30,
  32,
  9,
  35,
  33,
  34,
  36,
  ~0u,
  45,
  37,
  2,
  38,
  3,
  39,
  40,
  41,
  42,
  10,
  43,
  11,
  44,
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStyleArchive, override_count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStyleArchive, char_properties_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::TabArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TabArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TabArchive, position_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TabArchive, alignment_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TabArchive, leader_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::TabsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TabsArchive, tabs_),
  PROTOBUF_FIELD_OFFSET(::TSWP::LineSpacingArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::LineSpacingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::LineSpacingArchive, mode_),
  PROTOBUF_FIELD_OFFSET(::TSWP::LineSpacingArchive, amount_),
  PROTOBUF_FIELD_OFFSET(::TSWP::LineSpacingArchive, baselinerule_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, alignment_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, decimal_tab_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, decimal_tab_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, default_tab_stops_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, fill_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, fill_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, first_line_indent_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, hyphenate_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, keep_lines_together_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, keep_with_next_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, left_indent_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, line_spacing_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, line_spacing_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, page_break_before_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, borders_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, rule_offset_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, rule_offset_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, rule_width_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, right_indent_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, space_after_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, space_before_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, tabs_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, tabs_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, widow_control_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, outline_level_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, outline_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, following_style_id_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, following_style_id_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, stroke_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, stroke_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, show_in_toc_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, toc_style_id_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, toc_style_id_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, writing_direction_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, list_style_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, list_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, following_style_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, following_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, show_in_bookmarks_list_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, show_in_toc_navigator_),
  10,
  12,
  0,
  11,
  13,
  3,
  16,
  14,
  15,
  18,
  17,
  19,
  4,
  20,
  22,
  21,
  5,
  23,
  24,
  25,
  26,
  28,
  6,
  29,
  27,
  32,
  30,
  1,
  31,
  7,
  33,
  34,
  2,
  39,
  35,
  8,
  36,
  9,
  37,
  38,
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStyleArchive, override_count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStyleArchive, char_properties_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStyleArchive, para_properties_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive_LabelGeometry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive_LabelGeometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive_LabelGeometry, scale_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive_LabelGeometry, baseline_offset_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive_LabelGeometry, scale_with_text_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive_LabelImage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive_LabelImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive_LabelImage, image_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive_LabelImage, image_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive_LabelImage, database_image_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, override_count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, label_types_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, text_indents_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, indents_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, geometries_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, number_types_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, strings_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, images_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, shadow_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, shadow_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, font_color_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, font_color_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, font_name_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, font_name_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, writing_direction_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, tiered_numbers_),
  1,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  5,
  2,
  6,
  3,
  7,
  0,
  8,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSWP::TextStylePresetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextStylePresetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TextStylePresetArchive, preset_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextStylePresetArchive, paragraph_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextStylePresetArchive, list_style_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_EqualColumnsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_EqualColumnsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_EqualColumnsArchive, count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_EqualColumnsArchive, gap_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive, gap_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive, width_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_NonEqualColumnsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_NonEqualColumnsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_NonEqualColumnsArchive, first_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_NonEqualColumnsArchive, following_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive, equal_columns_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive, non_equal_columns_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::PaddingArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::PaddingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::PaddingArchive, left_),
  PROTOBUF_FIELD_OFFSET(::TSWP::PaddingArchive, top_),
  PROTOBUF_FIELD_OFFSET(::TSWP::PaddingArchive, right_),
  PROTOBUF_FIELD_OFFSET(::TSWP::PaddingArchive, bottom_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, continuous_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, shrink_to_fit_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, vertical_text_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, min_horizontal_inset_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, vertical_alignment_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, columns_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, columns_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, margins_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, margins_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, padding_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, padding_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, writing_direction_),
  3,
  4,
  5,
  7,
  8,
  6,
  0,
  9,
  1,
  10,
  2,
  11,
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStyleArchive, override_count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStyleArchive, column_properties_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, shrink_to_fit_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, vertical_alignment_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, columns_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, columns_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, padding_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, padding_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, default_text_preset_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, vertical_text_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, paragraph_style_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, paragraph_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, vertical_text_40_),
  4,
  3,
  5,
  0,
  6,
  1,
  8,
  7,
  9,
  2,
  10,
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStyleArchive, override_count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStyleArchive, shape_properties_),
  0,
  2,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::ThemePresetsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ThemePresetsArchive, list_style_presets_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ThemePresetsArchive, text_style_presets_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ThemePresetsArchive, imported_text_style_presets_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ThemePresetsArchive, toc_entry_style_presets_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ThemePresetsArchive, toc_settings_presets_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ThemePresetsArchive, character_style_presets_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ThemePresetsArchive, paragraph_style_presets_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ThemePresetsArchive, dropcap_style_presets_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextPresetDisplayItemArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextPresetDisplayItemArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TextPresetDisplayItemArchive, preset_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextPresetDisplayItemArchive, display_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryStylePropertiesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryStylePropertiesArchive, page_number_style_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryStylePropertiesArchive, page_number_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryStylePropertiesArchive, show_page_number_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryStyleArchive, toc_properties_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSettingsArchive_TOCEntryData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSettingsArchive_TOCEntryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSettingsArchive_TOCEntryData, paragraph_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSettingsArchive_TOCEntryData, toc_entry_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSettingsArchive_TOCEntryData, show_in_toc_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSettingsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSettingsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSettingsArchive, toc_name_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSettingsArchive, toc_scope_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSettingsArchive, entries_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryInstanceArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryInstanceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryInstanceArchive, paragraph_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryInstanceArchive, page_number_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryInstanceArchive, number_format_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryInstanceArchive, heading_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryInstanceArchive, indexed_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryInstanceArchive, indexed_list_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryInstanceArchive, indexed_list_start_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryInstanceArchive, indexed_paragraph_level_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryInstanceArchive, number_format_name_),
  4,
  5,
  6,
  0,
  2,
  3,
  7,
  8,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_GenericTransaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_GenericTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_GenericTransaction, value1_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_GenericTransaction, value2_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_GenericTransaction, value3_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_TextTransaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_TextTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_TextTransaction, insert_location_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_TextTransaction, insert_length_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_TextTransaction, string_to_delete_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CharIndexTransaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CharIndexTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CharIndexTransaction, char_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CharIndexTransaction, count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CharIndexTransaction, object_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ReplaceCharIndexTransaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ReplaceCharIndexTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ReplaceCharIndexTransaction, attribute_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ReplaceCharIndexTransaction, char_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_AttributeIndexTransaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_AttributeIndexTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_AttributeIndexTransaction, attribute_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_AttributeIndexTransaction, char_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_AttributeIndexTransaction, object_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_AttributeIndexTransaction, string_),
  2,
  3,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_InsertAttributeTransaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_InsertAttributeTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_InsertAttributeTransaction, attribute_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_InsertAttributeTransaction, attribute_count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_InsertAttributeTransaction, object_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_InsertAttributeTransaction, string_),
  2,
  3,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_InsertNilTransaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_InsertNilTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_InsertNilTransaction, attribute_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_InsertNilTransaction, attribute_count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CharDeltaTransaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CharDeltaTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CharDeltaTransaction, char_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CharDeltaTransaction, attribute_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CharDeltaTransaction, char_delta_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ParagraphDataTransaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ParagraphDataTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ParagraphDataTransaction, attribute_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ParagraphDataTransaction, first_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ParagraphDataTransaction, second_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ParagraphDataTransaction, char_index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ObjectDOLCTransaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ObjectDOLCTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ObjectDOLCTransaction, flags_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ObjectDOLCTransaction, object_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CTDateTransaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CTDateTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CTDateTransaction, attribute_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CTDateTransaction, date_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, kind_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, table_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, generic_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, text_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, char_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, replace_char_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, attribute_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, insert_nil_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, insert_attribute_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, char_delta_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, paragraph_data_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, object_dolc_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, ct_date_),
  12,
  11,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageAction, kind_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageAction, flags_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageAction, table_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageAction, range_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageAction, string_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageAction, object_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageAction, date_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageAction, paragraph_level_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageAction, paragraph_flags_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageAction, paragraph_value_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageAction, placement_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageAction, placement_uuid_path_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageAction, undo_object_),
  6,
  7,
  8,
  2,
  0,
  3,
  4,
  9,
  10,
  11,
  12,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageActionGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageActionGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageActionGroup, kind_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageActionGroup, forward_actions_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageActionGroup, inverse_forward_actions_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_StorageActionGroup, inverse_detail_actions_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction, entries_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction, group_entries_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction, flags_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction, version_),
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransactionWrapperArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransactionWrapperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransactionWrapperArchive, undo_transaction_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeInfoArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeInfoArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeInfoArchive, deprecated_storage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeInfoArchive, text_flow_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeInfoArchive, owned_storage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeInfoArchive, is_text_box_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSWP::CommentInfoArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CommentInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::CommentInfoArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CommentInfoArchive, comment_storage_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCInfoArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCInfoArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCInfoArchive, toc_settings_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCInfoArchive, toc_entry_data_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCInfoArchive, page_number_ranges_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCInfoArchive, sync_toc_settings_with_toc_navigator_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCLayoutHintArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCLayoutHintArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCLayoutHintArchive, charrange_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::EquationInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TextualAttachmentArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextualAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TextualAttachmentArchive, string_equivalent_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextualAttachmentArchive, kind_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::TSWPTOCPageNumberAttachmentArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TSWPTOCPageNumberAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TSWPTOCPageNumberAttachmentArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TSWPTOCPageNumberAttachmentArchive, page_number_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TSWPTOCPageNumberAttachmentArchive, bookmark_name_),
  2,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::UIGraphicalAttachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::DrawableAttachmentArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DrawableAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::DrawableAttachmentArchive, drawable_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DrawableAttachmentArchive, h_offset_type_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DrawableAttachmentArchive, h_offset_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DrawableAttachmentArchive, v_offset_type_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DrawableAttachmentArchive, v_offset_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCAttachmentArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCAttachmentArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::FootnoteReferenceAttachmentArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::FootnoteReferenceAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::FootnoteReferenceAttachmentArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::FootnoteReferenceAttachmentArchive, contained_storage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::FootnoteReferenceAttachmentArchive, custom_mark_string_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::NumberAttachmentArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::NumberAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::NumberAttachmentArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::NumberAttachmentArchive, number_format_),
  PROTOBUF_FIELD_OFFSET(::TSWP::NumberAttachmentArchive, string_value_),
  PROTOBUF_FIELD_OFFSET(::TSWP::NumberAttachmentArchive, number_format_name_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::SmartFieldArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SmartFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::SmartFieldArchive, text_attribute_uuid_string_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::HyperlinkFieldArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::HyperlinkFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::HyperlinkFieldArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::HyperlinkFieldArchive, url_ref_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::PlaceholderSmartFieldArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::PlaceholderSmartFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::PlaceholderSmartFieldArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::PlaceholderSmartFieldArchive, localizable_),
  PROTOBUF_FIELD_OFFSET(::TSWP::PlaceholderSmartFieldArchive, script_tag_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::UnsupportedHyperlinkFieldArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UnsupportedHyperlinkFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::UnsupportedHyperlinkFieldArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UnsupportedHyperlinkFieldArchive, url_ref_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UnsupportedHyperlinkFieldArchive, url_original_ref_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::BibliographySmartFieldArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::BibliographySmartFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::BibliographySmartFieldArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::BibliographySmartFieldArchive, citation_records_),
  PROTOBUF_FIELD_OFFSET(::TSWP::BibliographySmartFieldArchive, localizable_),
  PROTOBUF_FIELD_OFFSET(::TSWP::BibliographySmartFieldArchive, old_super_),
  1,
  ~0u,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, endnote_xml_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, hide_author_names_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, hide_year_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, page_range_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, prefix_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, suffix_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, authors_string_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, title_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, year_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, type_),
  0,
  8,
  9,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationSmartFieldArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationSmartFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationSmartFieldArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationSmartFieldArchive, citation_records_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationSmartFieldArchive, localizable_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationSmartFieldArchive, old_super_),
  1,
  ~0u,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::DateTimeSmartFieldArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DateTimeSmartFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::DateTimeSmartFieldArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DateTimeSmartFieldArchive, format_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DateTimeSmartFieldArchive, locale_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DateTimeSmartFieldArchive, date_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DateTimeSmartFieldArchive, time_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DateTimeSmartFieldArchive, update_plan_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DateTimeSmartFieldArchive, needs_update_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DateTimeSmartFieldArchive, date_),
  2,
  0,
  1,
  4,
  5,
  6,
  7,
  3,
  PROTOBUF_FIELD_OFFSET(::TSWP::BookmarkFieldArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::BookmarkFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::BookmarkFieldArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::BookmarkFieldArchive, name_),
  PROTOBUF_FIELD_OFFSET(::TSWP::BookmarkFieldArchive, ranged_),
  PROTOBUF_FIELD_OFFSET(::TSWP::BookmarkFieldArchive, hidden_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSWP::FilenameSmartFieldArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::FilenameSmartFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::FilenameSmartFieldArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::FilenameSmartFieldArchive, display_flags_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, property_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, label_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, key_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, category_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, requires_following_whitespace_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, whitespace_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, guid_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, table_field_),
  6,
  0,
  1,
  2,
  7,
  8,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSmartFieldArchive_TOCEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSmartFieldArchive_TOCEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSmartFieldArchive_TOCEntry, bookmark_name_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSmartFieldArchive_TOCEntry, target_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSmartFieldArchive_TOCEntry, range_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSmartFieldArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSmartFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSmartFieldArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSmartFieldArchive, toc_entries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSWP::RubyFieldArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::RubyFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::RubyFieldArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::RubyFieldArchive, ruby_text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::TateChuYokoFieldArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TateChuYokoFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TateChuYokoFieldArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeArchive, kind_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeArchive, session_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeArchive, date_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeArchive, text_attribute_uuid_string_),
  3,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeSessionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeSessionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeSessionArchive, session_uid_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeSessionArchive, author_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeSessionArchive, date_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::SectionPlaceholderArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SectionPlaceholderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::SectionPlaceholderArchive, parent_storage_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::HyperlinkSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::FlowInfoArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::FlowInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::FlowInfoArchive, text_storage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::FlowInfoArchive, textboxes_),
  PROTOBUF_FIELD_OFFSET(::TSWP::FlowInfoArchive, user_interface_identifier_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::FlowInfoContainerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::FlowInfoContainerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::FlowInfoContainerArchive, flow_infos_),
  PROTOBUF_FIELD_OFFSET(::TSWP::FlowInfoContainerArchive, next_user_interface_identifier_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapArchive, type_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapArchive, number_of_lines_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapArchive, number_of_raised_lines_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapArchive, deprecated_outdent_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapArchive, outdent_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapArchive, deprecated_padding_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapArchive, padding_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapArchive, wrap_type_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapArchive, shape_enabled_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapArchive, deprecated_corner_radius_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapArchive, corner_radius_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapArchive, deprecated_character_scale_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapArchive, character_scale_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapArchive, number_of_characters_),
  0,
  11,
  1,
  2,
  8,
  3,
  9,
  4,
  5,
  6,
  10,
  7,
  13,
  12,
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapStylePropertiesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapStylePropertiesArchive, drop_cap_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapStylePropertiesArchive, drop_cap_shape_stroke_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapStylePropertiesArchive, drop_cap_shape_fill_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapStylePropertiesArchive, drop_cap_shape_fill_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapStyleArchive, override_count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapStyleArchive, char_properties_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DropCapStyleArchive, drop_cap_properties_),
  0,
  3,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::TSWP::SelectionArchive)},
  { 15, 22, sizeof(::TSWP::ObjectAttributeTable_ObjectAttribute)},
  { 24, -1, sizeof(::TSWP::ObjectAttributeTable)},
  { 30, 37, sizeof(::TSWP::StringAttributeTable_StringAttribute)},
  { 39, -1, sizeof(::TSWP::StringAttributeTable)},
  { 45, 53, sizeof(::TSWP::ParaDataAttributeTable_ParaDataAttribute)},
  { 56, -1, sizeof(::TSWP::ParaDataAttributeTable)},
  { 62, 69, sizeof(::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute)},
  { 71, -1, sizeof(::TSWP::OverlappingFieldAttributeTable)},
  { 77, 109, sizeof(::TSWP::StorageArchive)},
  { 136, 143, sizeof(::TSWP::HighlightArchive)},
  { 145, 152, sizeof(::TSWP::PencilAnnotationArchive)},
  { 154, 161, sizeof(::TSWP::FontFeatureArchive)},
  { 163, 215, sizeof(::TSWP::CharacterStylePropertiesArchive)},
  { 262, 270, sizeof(::TSWP::CharacterStyleArchive)},
  { 273, 281, sizeof(::TSWP::TabArchive)},
  { 284, -1, sizeof(::TSWP::TabsArchive)},
  { 290, 298, sizeof(::TSWP::LineSpacingArchive)},
  { 301, 346, sizeof(::TSWP::ParagraphStylePropertiesArchive)},
  { 386, 395, sizeof(::TSWP::ParagraphStyleArchive)},
  { 399, 407, sizeof(::TSWP::ListStyleArchive_LabelGeometry)},
  { 410, 418, sizeof(::TSWP::ListStyleArchive_LabelImage)},
  { 421, 443, sizeof(::TSWP::ListStyleArchive)},
  { 460, 468, sizeof(::TSWP::TextStylePresetArchive)},
  { 471, 478, sizeof(::TSWP::ColumnsArchive_EqualColumnsArchive)},
  { 480, 487, sizeof(::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive)},
  { 489, 496, sizeof(::TSWP::ColumnsArchive_NonEqualColumnsArchive)},
  { 498, 505, sizeof(::TSWP::ColumnsArchive)},
  { 507, 516, sizeof(::TSWP::PaddingArchive)},
  { 520, 537, sizeof(::TSWP::ColumnStylePropertiesArchive)},
  { 549, 557, sizeof(::TSWP::ColumnStyleArchive)},
  { 560, 576, sizeof(::TSWP::ShapeStylePropertiesArchive)},
  { 587, 595, sizeof(::TSWP::ShapeStyleArchive)},
  { 598, -1, sizeof(::TSWP::ThemePresetsArchive)},
  { 611, 618, sizeof(::TSWP::TextPresetDisplayItemArchive)},
  { 620, 628, sizeof(::TSWP::TOCEntryStylePropertiesArchive)},
  { 631, 638, sizeof(::TSWP::TOCEntryStyleArchive)},
  { 640, 648, sizeof(::TSWP::TOCSettingsArchive_TOCEntryData)},
  { 651, 659, sizeof(::TSWP::TOCSettingsArchive)},
  { 662, 676, sizeof(::TSWP::TOCEntryInstanceArchive)},
  { 685, 693, sizeof(::TSWP::UndoTransaction_GenericTransaction)},
  { 696, 704, sizeof(::TSWP::UndoTransaction_TextTransaction)},
  { 707, 715, sizeof(::TSWP::UndoTransaction_CharIndexTransaction)},
  { 718, 725, sizeof(::TSWP::UndoTransaction_ReplaceCharIndexTransaction)},
  { 727, 736, sizeof(::TSWP::UndoTransaction_AttributeIndexTransaction)},
  { 740, 749, sizeof(::TSWP::UndoTransaction_InsertAttributeTransaction)},
  { 753, 760, sizeof(::TSWP::UndoTransaction_InsertNilTransaction)},
  { 762, 770, sizeof(::TSWP::UndoTransaction_CharDeltaTransaction)},
  { 773, 782, sizeof(::TSWP::UndoTransaction_ParagraphDataTransaction)},
  { 786, 793, sizeof(::TSWP::UndoTransaction_ObjectDOLCTransaction)},
  { 795, 802, sizeof(::TSWP::UndoTransaction_CTDateTransaction)},
  { 804, 822, sizeof(::TSWP::UndoTransaction_UnionTransaction)},
  { 835, 853, sizeof(::TSWP::UndoTransaction_StorageAction)},
  { 866, 875, sizeof(::TSWP::UndoTransaction_StorageActionGroup)},
  { 879, 888, sizeof(::TSWP::UndoTransaction)},
  { 892, 898, sizeof(::TSWP::UndoTransactionWrapperArchive)},
  { 899, 909, sizeof(::TSWP::ShapeInfoArchive)},
  { 914, 921, sizeof(::TSWP::CommentInfoArchive)},
  { 923, 933, sizeof(::TSWP::TOCInfoArchive)},
  { 938, 944, sizeof(::TSWP::TOCLayoutHintArchive)},
  { 945, -1, sizeof(::TSWP::EquationInfoArchive)},
  { 950, 957, sizeof(::TSWP::TextualAttachmentArchive)},
  { 959, 967, sizeof(::TSWP::TSWPTOCPageNumberAttachmentArchive)},
  { 970, -1, sizeof(::TSWP::UIGraphicalAttachment)},
  { 975, 985, sizeof(::TSWP::DrawableAttachmentArchive)},
  { 990, 996, sizeof(::TSWP::TOCAttachmentArchive)},
  { 997, 1005, sizeof(::TSWP::FootnoteReferenceAttachmentArchive)},
  { 1008, 1017, sizeof(::TSWP::NumberAttachmentArchive)},
  { 1021, 1027, sizeof(::TSWP::SmartFieldArchive)},
  { 1028, 1035, sizeof(::TSWP::HyperlinkFieldArchive)},
  { 1037, 1045, sizeof(::TSWP::PlaceholderSmartFieldArchive)},
  { 1048, 1056, sizeof(::TSWP::UnsupportedHyperlinkFieldArchive)},
  { 1059, 1068, sizeof(::TSWP::BibliographySmartFieldArchive)},
  { 1072, 1087, sizeof(::TSWP::CitationRecordArchive)},
  { 1097, 1106, sizeof(::TSWP::CitationSmartFieldArchive)},
  { 1110, 1123, sizeof(::TSWP::DateTimeSmartFieldArchive)},
  { 1131, 1140, sizeof(::TSWP::BookmarkFieldArchive)},
  { 1144, 1151, sizeof(::TSWP::FilenameSmartFieldArchive)},
  { 1153, 1167, sizeof(::TSWP::MergeSmartFieldArchive)},
  { 1176, 1184, sizeof(::TSWP::TOCSmartFieldArchive_TOCEntry)},
  { 1187, 1194, sizeof(::TSWP::TOCSmartFieldArchive)},
  { 1196, 1203, sizeof(::TSWP::RubyFieldArchive)},
  { 1205, 1211, sizeof(::TSWP::TateChuYokoFieldArchive)},
  { 1212, 1221, sizeof(::TSWP::ChangeArchive)},
  { 1225, 1233, sizeof(::TSWP::ChangeSessionArchive)},
  { 1236, 1242, sizeof(::TSWP::SectionPlaceholderArchive)},
  { 1243, -1, sizeof(::TSWP::HyperlinkSelectionArchive)},
  { 1248, 1256, sizeof(::TSWP::FlowInfoArchive)},
  { 1259, 1266, sizeof(::TSWP::FlowInfoContainerArchive)},
  { 1268, 1287, sizeof(::TSWP::DropCapArchive)},
  { 1301, 1310, sizeof(::TSWP::DropCapStylePropertiesArchive)},
  { 1314, 1323, sizeof(::TSWP::DropCapStyleArchive)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_SelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ObjectAttributeTable_ObjectAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ObjectAttributeTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_StringAttributeTable_StringAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_StringAttributeTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ParaDataAttributeTable_ParaDataAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ParaDataAttributeTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_OverlappingFieldAttributeTable_OverlappingFieldAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_OverlappingFieldAttributeTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_StorageArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_HighlightArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_PencilAnnotationArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_FontFeatureArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_CharacterStylePropertiesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_CharacterStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_TabArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_TabsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_LineSpacingArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ParagraphStylePropertiesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ParagraphStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ListStyleArchive_LabelGeometry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ListStyleArchive_LabelImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ListStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_TextStylePresetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ColumnsArchive_EqualColumnsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ColumnsArchive_NonEqualColumnsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ColumnsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_PaddingArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ColumnStylePropertiesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ColumnStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ShapeStylePropertiesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ShapeStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ThemePresetsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_TextPresetDisplayItemArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_TOCEntryStylePropertiesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_TOCEntryStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_TOCSettingsArchive_TOCEntryData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_TOCSettingsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_TOCEntryInstanceArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_UndoTransaction_GenericTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_UndoTransaction_TextTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_UndoTransaction_CharIndexTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_UndoTransaction_ReplaceCharIndexTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_UndoTransaction_AttributeIndexTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_UndoTransaction_InsertAttributeTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_UndoTransaction_InsertNilTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_UndoTransaction_CharDeltaTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_UndoTransaction_ParagraphDataTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_UndoTransaction_ObjectDOLCTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_UndoTransaction_CTDateTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_UndoTransaction_UnionTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_UndoTransaction_StorageAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_UndoTransaction_StorageActionGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_UndoTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_UndoTransactionWrapperArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ShapeInfoArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_CommentInfoArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_TOCInfoArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_TOCLayoutHintArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_EquationInfoArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_TextualAttachmentArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_TSWPTOCPageNumberAttachmentArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_UIGraphicalAttachment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_DrawableAttachmentArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_TOCAttachmentArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_FootnoteReferenceAttachmentArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_NumberAttachmentArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_SmartFieldArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_HyperlinkFieldArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_PlaceholderSmartFieldArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_UnsupportedHyperlinkFieldArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_BibliographySmartFieldArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_CitationRecordArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_CitationSmartFieldArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_DateTimeSmartFieldArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_BookmarkFieldArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_FilenameSmartFieldArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_MergeSmartFieldArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_TOCSmartFieldArchive_TOCEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_TOCSmartFieldArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_RubyFieldArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_TateChuYokoFieldArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ChangeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ChangeSessionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_SectionPlaceholderArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_HyperlinkSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_FlowInfoArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_FlowInfoContainerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_DropCapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_DropCapStylePropertiesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_DropCapStyleArchive_default_instance_),
};

const char descriptor_table_protodef_TSWPArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022TSWPArchives.proto\022\004TSWP\032\021TSPMessages."
  "proto\032\021TSSArchives.proto\032\021TSDArchives.pr"
  "oto\032\021TSKArchives.proto\"\341\001\n\020SelectionArch"
  "ive\022!\n\004type\030\001 \002(\0162\023.TSWP.SelectionType\022\031"
  "\n\005range\030\002 \002(\0132\n.TSP.Range\022<\n\026styleInsert"
  "ionBehavior\030\003 \002(\0162\034.TSWP.StyleInsertionB"
  "ehavior\022*\n\rcaretAffinity\030\004 \002(\0162\023.TSWP.Ca"
  "retAffinity\022%\n\021smart_field_range\030\005 \002(\0132\n"
  ".TSP.Range\"\237\001\n\024ObjectAttributeTable\022;\n\007e"
  "ntries\030\001 \003(\0132*.TSWP.ObjectAttributeTable"
  ".ObjectAttribute\032J\n\017ObjectAttribute\022\027\n\017c"
  "haracter_index\030\001 \002(\r\022\036\n\006object\030\002 \001(\0132\016.T"
  "SP.Reference\"\217\001\n\024StringAttributeTable\022;\n"
  "\007entries\030\001 \003(\0132*.TSWP.StringAttributeTab"
  "le.StringAttribute\032:\n\017StringAttribute\022\027\n"
  "\017character_index\030\001 \002(\r\022\016\n\006object\030\002 \001(\t\"\246"
  "\001\n\026ParaDataAttributeTable\022\?\n\007entries\030\001 \003"
  "(\0132..TSWP.ParaDataAttributeTable.ParaDat"
  "aAttribute\032K\n\021ParaDataAttribute\022\027\n\017chara"
  "cter_index\030\001 \002(\r\022\r\n\005first\030\002 \002(\r\022\016\n\006secon"
  "d\030\003 \002(\r\"\310\001\n\036OverlappingFieldAttributeTab"
  "le\022O\n\007entries\030\001 \003(\0132>.TSWP.OverlappingFi"
  "eldAttributeTable.OverlappingFieldAttrib"
  "ute\032U\n\031OverlappingFieldAttribute\022\031\n\005rang"
  "e\030\001 \002(\0132\n.TSP.Range\022\035\n\005field\030\002 \002(\0132\016.TSP"
  ".Reference\"\356\013\n\016StorageArchive\0224\n\004kind\030\001 "
  "\001(\0162\035.TSWP.StorageArchive.KindType:\007TEXT"
  "BOX\022#\n\013style_sheet\030\002 \001(\0132\016.TSP.Reference"
  "\022\014\n\004text\030\003 \003(\t\022\030\n\thas_itext\030\004 \001(\010:\005false"
  "\022\032\n\013in_document\030\n \001(\010:\005false\0224\n\020table_pa"
  "ra_style\030\005 \001(\0132\032.TSWP.ObjectAttributeTab"
  "le\0225\n\017table_para_data\030\006 \001(\0132\034.TSWP.ParaD"
  "ataAttributeTable\0224\n\020table_list_style\030\007 "
  "\001(\0132\032.TSWP.ObjectAttributeTable\0224\n\020table"
  "_char_style\030\010 \001(\0132\032.TSWP.ObjectAttribute"
  "Table\0224\n\020table_attachment\030\t \001(\0132\032.TSWP.O"
  "bjectAttributeTable\0224\n\020table_smartfield\030"
  "\013 \001(\0132\032.TSWP.ObjectAttributeTable\0226\n\022tab"
  "le_layout_style\030\014 \001(\0132\032.TSWP.ObjectAttri"
  "buteTable\0227\n\021table_para_starts\030\016 \001(\0132\034.T"
  "SWP.ParaDataAttributeTable\0222\n\016table_book"
  "mark\030\017 \001(\0132\032.TSWP.ObjectAttributeTable\0222"
  "\n\016table_footnote\030\020 \001(\0132\032.TSWP.ObjectAttr"
  "ibuteTable\0221\n\rtable_section\030\021 \001(\0132\032.TSWP"
  ".ObjectAttributeTable\0223\n\017table_rubyfield"
  "\030\022 \001(\0132\032.TSWP.ObjectAttributeTable\0222\n\016ta"
  "ble_language\030\023 \001(\0132\032.TSWP.StringAttribut"
  "eTable\0223\n\017table_dictation\030\024 \001(\0132\032.TSWP.S"
  "tringAttributeTable\0223\n\017table_insertion\030\025"
  " \001(\0132\032.TSWP.ObjectAttributeTable\0222\n\016tabl"
  "e_deletion\030\026 \001(\0132\032.TSWP.ObjectAttributeT"
  "able\0223\n\017table_highlight\030\027 \001(\0132\032.TSWP.Obj"
  "ectAttributeTable\0225\n\017table_para_bidi\030\030 \001"
  "(\0132\034.TSWP.ParaDataAttributeTable\022I\n\033tabl"
  "e_overlapping_highlight\030\031 \001(\0132$.TSWP.Ove"
  "rlappingFieldAttributeTable\022E\n\027table_pen"
  "cil_annotation\030\032 \001(\0132$.TSWP.OverlappingF"
  "ieldAttributeTable\0225\n\021table_tatechuyoko\030"
  "\033 \001(\0132\032.TSWP.ObjectAttributeTable\0228\n\024tab"
  "le_drop_cap_style\030\034 \001(\0132\032.TSWP.ObjectAtt"
  "ributeTable\"v\n\010KindType\022\010\n\004BODY\020\000\022\n\n\006HEA"
  "DER\020\001\022\014\n\010FOOTNOTE\020\002\022\013\n\007TEXTBOX\020\003\022\010\n\004NOTE"
  "\020\004\022\010\n\004CELL\020\005\022\020\n\014UNCLASSIFIED\020\006\022\023\n\017TABLEO"
  "FCONTENTS\020\007\"^\n\020HighlightArchive\022&\n\016comme"
  "ntStorage\030\001 \001(\0132\016.TSP.Reference\022\"\n\032text_"
  "attribute_uuid_string\030\002 \001(\t\"p\n\027PencilAnn"
  "otationArchive\0221\n\031pencil_annotation_stor"
  "age\030\001 \001(\0132\016.TSP.Reference\022\"\n\032text_attrib"
  "ute_uuid_string\030\002 \001(\t\"D\n\022FontFeatureArch"
  "ive\022\024\n\014feature_type\030\001 \002(\r\022\030\n\020feature_sel"
  "ector\030\002 \002(\r\"\237\020\n\037CharacterStyleProperties"
  "Archive\022\014\n\004bold\030\001 \001(\010\022\016\n\006italic\030\002 \001(\010\022\021\n"
  "\tfont_size\030\003 \001(\002\022\026\n\016font_name_null\030\004 \001(\010"
  "\022\021\n\tfont_name\030\005 \001(\t\022\027\n\017font_color_null\030\006"
  " \001(\010\022\036\n\nfont_color\030\007 \001(\0132\n.TSP.Color\022\025\n\r"
  "language_null\030\010 \001(\010\022\020\n\010language\030\t \001(\t\022J\n"
  "\013superscript\030\n \001(\01625.TSWP.CharacterStyle"
  "PropertiesArchive.SuperscriptType\022F\n\tund"
  "erline\030\013 \001(\01623.TSWP.CharacterStyleProper"
  "tiesArchive.UnderlineType\022H\n\nstrikethru\030"
  "\014 \001(\01624.TSWP.CharacterStylePropertiesArc"
  "hive.StrikethruType\022P\n\016capitalization\030\r "
  "\001(\01628.TSWP.CharacterStylePropertiesArchi"
  "ve.CapitalizationType\022\026\n\016baseline_shift\030"
  "\016 \001(\002\022\017\n\007kerning\030\017 \001(\002\022F\n\tligatures\030\020 \001("
  "\01623.TSWP.CharacterStylePropertiesArchive"
  ".LigaturesType\022\032\n\022outline_color_null\030\021 \001"
  "(\010\022!\n\routline_color\030\022 \001(\0132\n.TSP.Color\022\017\n"
  "\007outline\030\023 \001(\002\022\023\n\013shadow_null\030\024 \001(\010\022\"\n\006s"
  "hadow\030\025 \001(\0132\022.TSD.ShadowArchive\022\035\n\025strik"
  "ethru_color_null\030\026 \001(\010\022$\n\020strikethru_col"
  "or\030\027 \001(\0132\n.TSP.Color\022\030\n\020strikethru_width"
  "\030\030 \001(\002\022\035\n\025background_color_null\030\031 \001(\010\022$\n"
  "\020background_color\030\032 \001(\0132\n.TSP.Color\022\020\n\010t"
  "racking\030\033 \001(\002\022\034\n\024underline_color_null\030\034 "
  "\001(\010\022#\n\017underline_color\030\035 \001(\0132\n.TSP.Color"
  "\022\027\n\017underline_width\030\036 \001(\002\022\027\n\017word_strike"
  "thru\030\037 \001(\010\022\026\n\016word_underline\030  \001(\010\022\032\n\022fo"
  "nt_features_null\030! \001(\010\022/\n\rfont_features\030"
  "\" \003(\0132\030.TSWP.FontFeatureArchive\022O\n\021writi"
  "ng_direction\030# \001(\0162\032.TSWP.WritingDirecti"
  "onType:\030kWritingDirectionNatural\022\033\n\023emph"
  "asis_marks_null\030$ \001(\010\022\026\n\016emphasis_marks\030"
  "% \001(\t\022$\n\034compatibility_font_name_null\030& "
  "\001(\010\022\037\n\027compatibility_font_name\030\' \001(\t\022\033\n\023"
  "is_named_point_size\030( \001(\010\022\'\n\037capitalizat"
  "ion_uses_linguistics\030) \001(\010\022\025\n\rtate_chu_y"
  "oko\030* \001(\010\022\027\n\017tsd_stroke_null\030+ \001(\010\022&\n\nts"
  "d_stroke\030, \001(\0132\022.TSD.StrokeArchive\022\025\n\rts"
  "d_fill_null\030- \001(\010\022\"\n\010tsd_fill\030. \001(\0132\020.TS"
  "D.FillArchive\022+\n#tsd_fill_should_fill_te"
  "xt_container\030/ \001(\010\"L\n\022CapitalizationType"
  "\022\013\n\007kNoCaps\020\000\022\014\n\010kAllCaps\020\001\022\016\n\nkSmallCap"
  "s\020\002\022\013\n\007kTitled\020\003\"a\n\rUnderlineType\022\020\n\014kNo"
  "Underline\020\000\022\024\n\020kSingleUnderline\020\001\022\024\n\020kDo"
  "ubleUnderline\020\002\022\022\n\016kWavyUnderline\020\003\"R\n\rL"
  "igaturesType\022\026\n\022kRequiredLigatures\020\000\022\026\n\022"
  "kStandardLigatures\020\001\022\021\n\rkAllLigatures\020\002\""
  "h\n\016StrikethruType\022\021\n\rkNoStrikethru\020\000\022\025\n\021"
  "kSingleStrikethru\020\001\022\025\n\021kDoubleStrikethru"
  "\020\002\022\025\n\021kTripleStrikethru\020\003\"B\n\017Superscript"
  "Type\022\r\n\tkNoScript\020\000\022\020\n\014kSuperscript\020\001\022\016\n"
  "\nkSubscript\020\002\"\224\001\n\025CharacterStyleArchive\022"
  " \n\005super\030\001 \002(\0132\021.TSS.StyleArchive\022\031\n\016ove"
  "rride_count\030\n \001(\r:\0010\022>\n\017char_properties\030"
  "\013 \001(\0132%.TSWP.CharacterStylePropertiesArc"
  "hive\"\332\001\n\nTabArchive\022\020\n\010position\030\001 \001(\002\0224\n"
  "\talignment\030\002 \001(\0162!.TSWP.TabArchive.TabAl"
  "ignmentType\022\016\n\006leader\030\003 \001(\t\"t\n\020TabAlignm"
  "entType\022\025\n\021kTabAlignmentLeft\020\000\022\027\n\023kTabAl"
  "ignmentCenter\020\001\022\026\n\022kTabAlignmentRight\020\002\022"
  "\030\n\024kTabAlignmentDecimal\020\003\"-\n\013TabsArchive"
  "\022\036\n\004tabs\030\001 \003(\0132\020.TSWP.TabArchive\"\217\002\n\022Lin"
  "eSpacingArchive\022:\n\004mode\030\001 \001(\0162,.TSWP.Lin"
  "eSpacingArchive.LineSpacingModeType\022\016\n\006a"
  "mount\030\002 \001(\002\022\024\n\014baselineRule\030\003 \001(\002\"\226\001\n\023Li"
  "neSpacingModeType\022\030\n\024kRelativeLineSpacin"
  "g\020\000\022\027\n\023kMinimumLineSpacing\020\001\022\025\n\021kExactLi"
  "neSpacing\020\002\022\027\n\023kMaximumLineSpacing\020\003\022\034\n\030"
  "kSpaceBetweenLineSpacing\020\004\"\242\014\n\037Paragraph"
  "StylePropertiesArchive\022J\n\talignment\030\001 \001("
  "\01627.TSWP.ParagraphStylePropertiesArchive"
  ".TextAlignmentType\022\030\n\020decimal_tab_null\030\002"
  " \001(\010\022\023\n\013decimal_tab\030\003 \001(\t\022\031\n\021default_tab"
  "_stops\030\004 \001(\002\022\021\n\tfill_null\030\005 \001(\010\022\030\n\004fill\030"
  "\006 \001(\0132\n.TSP.Color\022\031\n\021first_line_indent\030\007"
  " \001(\002\022\021\n\thyphenate\030\010 \001(\010\022\033\n\023keep_lines_to"
  "gether\030\t \001(\010\022\026\n\016keep_with_next\030\n \001(\010\022\023\n\013"
  "left_indent\030\013 \001(\002\022\031\n\021line_spacing_null\030\014"
  " \001(\010\022.\n\014line_spacing\030\r \001(\0132\030.TSWP.LineSp"
  "acingArchive\022\031\n\021page_break_before\030\016 \001(\010\022"
  "J\n\007borders\030\017 \001(\01629.TSWP.ParagraphStylePr"
  "opertiesArchive.ParagraphBorderType\022\030\n\020r"
  "ule_offset_null\030\020 \001(\010\022\037\n\013rule_offset\030\021 \001"
  "(\0132\n.TSP.Point\022\022\n\nrule_width\030\022 \001(\002\022\024\n\014ri"
  "ght_indent\030\023 \001(\002\022\023\n\013space_after\030\024 \001(\002\022\024\n"
  "\014space_before\030\025 \001(\002\022\021\n\ttabs_null\030\030 \001(\010\022\037"
  "\n\004tabs\030\031 \001(\0132\021.TSWP.TabsArchive\022\025\n\rwidow"
  "_control\030\032 \001(\010\022\025\n\routline_level\030\033 \001(\r\022M\n"
  "\routline_style\030\034 \001(\01626.TSWP.ParagraphSty"
  "lePropertiesArchive.OutlineStyleType\022\037\n\027"
  "following_style_id_null\030\035 \001(\010\022\032\n\022followi"
  "ng_style_id\030\036 \001(\t\022\023\n\013stroke_null\030\037 \001(\010\022\""
  "\n\006stroke\030  \001(\0132\022.TSD.StrokeArchive\022\023\n\013sh"
  "ow_in_toc\030! \001(\010\022\031\n\021toc_style_id_null\030\" \001"
  "(\010\022\024\n\014toc_style_id\030# \001(\t\022O\n\021writing_dire"
  "ction\030& \001(\0162\032.TSWP.WritingDirectionType:"
  "\030kWritingDirectionNatural\022\027\n\017list_style_"
  "null\030\' \001(\010\022\"\n\nlist_style\030( \001(\0132\016.TSP.Ref"
  "erence\022\034\n\024following_style_null\030) \001(\010\022\'\n\017"
  "following_style\030* \001(\0132\016.TSP.Reference\022\036\n"
  "\026show_in_bookmarks_list\030+ \001(\010\022\035\n\025show_in"
  "_toc_navigator\030, \001(\010\"^\n\021TextAlignmentTyp"
  "e\022\r\n\tTATvalue0\020\000\022\r\n\tTATvalue1\020\001\022\r\n\tTATva"
  "lue2\020\002\022\r\n\tTATvalue3\020\003\022\r\n\tTATvalue4\020\004\"`\n\023"
  "ParagraphBorderType\022\r\n\tPBTvalue0\020\000\022\r\n\tPB"
  "Tvalue1\020\001\022\r\n\tPBTvalue2\020\002\022\r\n\tPBTvalue3\020\003\022"
  "\r\n\tPBTvalue4\020\004\"\?\n\020OutlineStyleType\022\r\n\tOS"
  "Tvalue0\020\000\022\r\n\tOSTvalue1\020\001\022\r\n\tOSTvalue2\020\002\""
  "\324\001\n\025ParagraphStyleArchive\022 \n\005super\030\001 \002(\013"
  "2\021.TSS.StyleArchive\022\031\n\016override_count\030\n "
  "\001(\r:\0010\022>\n\017char_properties\030\013 \001(\0132%.TSWP.C"
  "haracterStylePropertiesArchive\022>\n\017para_p"
  "roperties\030\014 \001(\0132%.TSWP.ParagraphStylePro"
  "pertiesArchive\"\360\030\n\020ListStyleArchive\022 \n\005s"
  "uper\030\001 \002(\0132\021.TSS.StyleArchive\022\031\n\016overrid"
  "e_count\030\n \001(\r:\0010\0225\n\013label_types\030\013 \003(\0162 ."
  "TSWP.ListStyleArchive.LabelType\022\024\n\014text_"
  "indents\030\014 \003(\002\022\017\n\007indents\030\r \003(\002\0228\n\ngeomet"
  "ries\030\016 \003(\0132$.TSWP.ListStyleArchive.Label"
  "Geometry\0227\n\014number_types\030\017 \003(\0162!.TSWP.Li"
  "stStyleArchive.NumberType\022\017\n\007strings\030\020 \003"
  "(\t\0221\n\006images\030\021 \003(\0132!.TSWP.ListStyleArchi"
  "ve.LabelImage\022\023\n\013shadow_null\030\022 \001(\010\022\"\n\006sh"
  "adow\030\023 \001(\0132\022.TSD.ShadowArchive\022\027\n\017font_c"
  "olor_null\030\024 \001(\010\022\036\n\nfont_color\030\025 \001(\0132\n.TS"
  "P.Color\022\026\n\016font_name_null\030\026 \001(\010\022\021\n\tfont_"
  "name\030\027 \001(\t\022O\n\021writing_direction\030\030 \001(\0162\032."
  "TSWP.WritingDirectionType:\030kWritingDirec"
  "tionNatural\022\026\n\016tiered_numbers\030\031 \003(\010\032\\\n\rL"
  "abelGeometry\022\020\n\005scale\030\001 \001(\002:\0011\022\032\n\017baseli"
  "ne_offset\030\002 \001(\002:\0010\022\035\n\017scale_with_text\030\003 "
  "\001(\010:\004true\032k\n\nLabelImage\022!\n\005image\030\003 \001(\0132\022"
  ".TSP.DataReference\022\022\n\nimage_null\030\002 \001(\010\022&"
  "\n\016database_image\030\001 \001(\0132\016.TSP.Reference\"<"
  "\n\tLabelType\022\t\n\005kNone\020\000\022\n\n\006kImage\020\001\022\013\n\007kS"
  "tring\020\002\022\013\n\007kNumber\020\003\"\372\021\n\nNumberType\022\023\n\017k"
  "NumericDecimal\020\000\022\027\n\023kNumericDoubleParen\020"
  "\001\022\026\n\022kNumericRightParen\020\002\022\026\n\022kRomanUpper"
  "Decimal\020\003\022\032\n\026kRomanUpperDoubleParen\020\004\022\031\n"
  "\025kRomanUpperRightParen\020\005\022\026\n\022kRomanLowerD"
  "ecimal\020\006\022\032\n\026kRomanLowerDoubleParen\020\007\022\031\n\025"
  "kRomanLowerRightParen\020\010\022\026\n\022kAlphaUpperDe"
  "cimal\020\t\022\032\n\026kAlphaUpperDoubleParen\020\n\022\031\n\025k"
  "AlphaUpperRightParen\020\013\022\026\n\022kAlphaLowerDec"
  "imal\020\014\022\032\n\026kAlphaLowerDoubleParen\020\r\022\031\n\025kA"
  "lphaLowerRightParen\020\016\022#\n\037kIdeographicJap"
  "aneseDecimalKind\020\017\022\'\n#kIdeographicJapane"
  "seDoubleParenKind\020\020\022&\n\"kIdeographicJapan"
  "eseRightParenKind\020\021\022\030\n\024kHiraganaDecimalK"
  "ind\020\022\022\034\n\030kHiraganaDoubleParenKind\020\023\022\033\n\027k"
  "HiraganaRightParenKind\020\024\022\030\n\024kKatakanaDec"
  "imalKind\020\025\022\034\n\030kKatakanaDoubleParenKind\020\026"
  "\022\033\n\027kKatakanaRightParenKind\020\027\022\035\n\031kHiraga"
  "naIrohaDecimalKind\020\030\022!\n\035kHiraganaIrohaDo"
  "ubleParenKind\020\031\022 \n\034kHiraganaIrohaRightPa"
  "renKind\020\032\022\035\n\031kKatakanaIrohaDecimalKind\020\033"
  "\022!\n\035kKatakanaIrohaDoubleParenKind\020\034\022 \n\034k"
  "KatakanaIrohaRightParenKind\020\035\022,\n(kIdeogr"
  "aphicSimplifiedChineseDecimalKind\020\036\0220\n,k"
  "IdeographicSimplifiedChineseDoubleParenK"
  "ind\020\037\022/\n+kIdeographicSimplifiedChineseRi"
  "ghtParenKind\020 \022-\n)kIdeographicTraditiona"
  "lChineseDecimalKind\020!\0221\n-kIdeographicTra"
  "ditionalChineseDoubleParenKind\020\"\0220\n,kIde"
  "ographicTraditionalChineseRightParenKind"
  "\020#\022)\n%kIdeographicFormalJapaneseDecimalK"
  "ind\020$\022-\n)kIdeographicFormalJapaneseDoubl"
  "eParenKind\020%\022,\n(kIdeographicFormalJapane"
  "seRightParenKind\020&\0222\n.kIdeographicFormal"
  "SimplifiedChineseDecimalKind\020\'\0226\n2kIdeog"
  "raphicFormalSimplifiedChineseDoubleParen"
  "Kind\020(\0225\n1kIdeographicFormalSimplifiedCh"
  "ineseRightParenKind\020)\0223\n/kIdeographicFor"
  "malTraditionalChineseDecimalKind\020*\0227\n3kI"
  "deographicFormalTraditionalChineseDouble"
  "ParenKind\020+\0226\n2kIdeographicFormalTraditi"
  "onalChineseRightParenKind\020,\022\036\n\032kKoreanAl"
  "phabetDecimalKind\020-\022\"\n\036kKoreanAlphabetDo"
  "ubleParenKind\020.\022!\n\035kKoreanAlphabetRightP"
  "arenKind\020/\022\026\n\022kCircledNumberKind\0200\022\036\n\032kA"
  "rabianNumericDecimalKind\0201\022\"\n\036kArabianNu"
  "mericDoubleParenKind\0202\022!\n\035kArabianNumeri"
  "cRightParenKind\0203\022\034\n\030kArabianAlphaDecima"
  "lKind\0204\022 \n\034kArabianAlphaDoubleParenKind\020"
  "5\022\037\n\033kArabianAlphaRightParenKind\0206\022\034\n\030kA"
  "rabianAbjadDecimalKind\0207\022 \n\034kArabianAbja"
  "dDoubleParenKind\0208\022\037\n\033kArabianAbjadRight"
  "ParenKind\0209\022\033\n\027kHebrewAlphaDecimalKind\020:"
  "\022\037\n\033kHebrewAlphaDoubleParenKind\020;\022\036\n\032kHe"
  "brewAlphaRightParenKind\020<\022\037\n\033kHebrewBibl"
  "icalStandardKind\020=\022\036\n\032kHebrewBiblicalDec"
  "imalKind\020>\022\"\n\036kHebrewBiblicalDoubleParen"
  "Kind\020\?\022!\n\035kHebrewBiblicalRightParenKind\020"
  "@\"\200\001\n\026TextStylePresetArchive\022\031\n\021preset_i"
  "dentifier\030\001 \001(\t\022\'\n\017paragraph_style\030\002 \001(\013"
  "2\016.TSP.Reference\022\"\n\nlist_style\030\003 \001(\0132\016.T"
  "SP.Reference\"\365\002\n\016ColumnsArchive\022\?\n\requal"
  "_columns\030\001 \001(\0132(.TSWP.ColumnsArchive.Equ"
  "alColumnsArchive\022F\n\021non_equal_columns\030\002 "
  "\001(\0132+.TSWP.ColumnsArchive.NonEqualColumn"
  "sArchive\0321\n\023EqualColumnsArchive\022\r\n\005count"
  "\030\001 \001(\r\022\013\n\003gap\030\002 \001(\002\032\246\001\n\026NonEqualColumnsA"
  "rchive\022\r\n\005first\030\001 \002(\002\022N\n\tfollowing\030\002 \003(\013"
  "2;.TSWP.ColumnsArchive.NonEqualColumnsAr"
  "chive.GapWidthArchive\032-\n\017GapWidthArchive"
  "\022\013\n\003gap\030\001 \002(\002\022\r\n\005width\030\002 \002(\002\"J\n\016PaddingA"
  "rchive\022\014\n\004left\030\001 \001(\002\022\013\n\003top\030\002 \001(\002\022\r\n\005rig"
  "ht\030\003 \001(\002\022\016\n\006bottom\030\004 \001(\002\"\317\004\n\034ColumnStyle"
  "PropertiesArchive\022\022\n\ncontinuous\030\001 \001(\010\022\025\n"
  "\rshrink_to_fit\030\002 \001(\010\022\025\n\rvertical_text\030\003 "
  "\001(\010\022\034\n\024min_horizontal_inset\030\004 \001(\002\022T\n\022ver"
  "tical_alignment\030\005 \001(\01628.TSWP.ColumnStyle"
  "PropertiesArchive.VerticalAlignmentType\022"
  "\024\n\014columns_null\030\006 \001(\010\022%\n\007columns\030\007 \001(\0132\024"
  ".TSWP.ColumnsArchive\022\024\n\014margins_null\030\010 \001"
  "(\010\022%\n\007margins\030\t \001(\0132\024.TSWP.PaddingArchiv"
  "e\022\024\n\014padding_null\030\n \001(\010\022%\n\007padding\030\013 \001(\013"
  "2\024.TSWP.PaddingArchive\022O\n\021writing_direct"
  "ion\030\014 \001(\0162\032.TSWP.WritingDirectionType:\030k"
  "WritingDirectionNatural\"q\n\025VerticalAlign"
  "mentType\022\022\n\016kFrameAlignTop\020\000\022\025\n\021kFrameAl"
  "ignMiddle\020\001\022\025\n\021kFrameAlignBottom\020\002\022\026\n\022kF"
  "rameAlignJustify\020\003\"\220\001\n\022ColumnStyleArchiv"
  "e\022 \n\005super\030\001 \002(\0132\021.TSS.StyleArchive\022\031\n\016o"
  "verride_count\030\n \001(\r:\0010\022=\n\021column_propert"
  "ies\030\013 \001(\0132\".TSWP.ColumnStylePropertiesAr"
  "chive\"\221\004\n\033ShapeStylePropertiesArchive\022\025\n"
  "\rshrink_to_fit\030\001 \001(\010\022S\n\022vertical_alignme"
  "nt\030\002 \001(\01627.TSWP.ShapeStylePropertiesArch"
  "ive.VerticalAlignmentType\022\024\n\014columns_nul"
  "l\030\003 \001(\010\022%\n\007columns\030\004 \001(\0132\024.TSWP.ColumnsA"
  "rchive\022\024\n\014padding_null\030\005 \001(\010\022%\n\007padding\030"
  "\006 \001(\0132\024.TSWP.PaddingArchive\022!\n\031default_t"
  "ext_preset_index\030\007 \001(\r\022\025\n\rvertical_text\030"
  "\010 \001(\010\022\034\n\024paragraph_style_null\030\t \001(\010\022\'\n\017p"
  "aragraph_style\030\n \001(\0132\016.TSP.Reference\022\030\n\020"
  "vertical_text_40\030\013 \001(\010\"q\n\025VerticalAlignm"
  "entType\022\022\n\016kFrameAlignTop\020\000\022\025\n\021kFrameAli"
  "gnMiddle\020\001\022\025\n\021kFrameAlignBottom\020\002\022\026\n\022kFr"
  "ameAlignJustify\020\003\"\222\001\n\021ShapeStyleArchive\022"
  "%\n\005super\030\001 \002(\0132\026.TSD.ShapeStyleArchive\022\031"
  "\n\016override_count\030\n \001(\r:\0010\022;\n\020shape_prope"
  "rties\030\013 \001(\0132!.TSWP.ShapeStylePropertiesA"
  "rchive\"\323\003\n\023ThemePresetsArchive\022*\n\022list_s"
  "tyle_presets\030\001 \003(\0132\016.TSP.Reference\022*\n\022te"
  "xt_style_presets\030\002 \003(\0132\016.TSP.Reference\0223"
  "\n\033imported_text_style_presets\030\003 \003(\0132\016.TS"
  "P.Reference\022/\n\027toc_entry_style_presets\030\004"
  " \003(\0132\016.TSP.Reference\022,\n\024toc_settings_pre"
  "sets\030\005 \003(\0132\016.TSP.Reference\022/\n\027character_"
  "style_presets\030\006 \003(\0132\016.TSP.Reference\022/\n\027p"
  "aragraph_style_presets\030\007 \003(\0132\016.TSP.Refer"
  "ence\022-\n\025dropcap_style_presets\030\010 \003(\0132\016.TS"
  "P.Reference2\?\n\textension\022\021.TSS.ThemeArch"
  "ive\030n \001(\0132\031.TSWP.ThemePresetsArchive\"T\n\034"
  "TextPresetDisplayItemArchive\022\036\n\006preset\030\001"
  " \002(\0132\016.TSP.Reference\022\024\n\014display_name\030\002 \002"
  "(\t\"\205\001\n\036TOCEntryStylePropertiesArchive\022\036\n"
  "\026page_number_style_null\030\001 \001(\010\022)\n\021page_nu"
  "mber_style\030\002 \001(\0132\016.TSP.Reference\022\030\n\020show"
  "_page_number\030\003 \001(\010\"\200\001\n\024TOCEntryStyleArch"
  "ive\022*\n\005super\030\001 \002(\0132\033.TSWP.ParagraphStyle"
  "Archive\022<\n\016toc_properties\030\002 \001(\0132$.TSWP.T"
  "OCEntryStylePropertiesArchive\"\350\001\n\022TOCSet"
  "tingsArchive\022\020\n\010toc_name\030\001 \001(\t\022\021\n\ttoc_sc"
  "ope\030\002 \001(\r\0226\n\007entries\030\003 \003(\0132%.TSWP.TOCSet"
  "tingsArchive.TOCEntryData\032u\n\014TOCEntryDat"
  "a\022\'\n\017paragraph_style\030\001 \001(\0132\016.TSP.Referen"
  "ce\022\'\n\017toc_entry_style\030\002 \001(\0132\016.TSP.Refere"
  "nce\022\023\n\013show_in_toc\030\003 \001(\010\"\233\002\n\027TOCEntryIns"
  "tanceArchive\022\027\n\017paragraph_index\030\001 \002(\r\022\023\n"
  "\013page_number\030\002 \002(\r\022\025\n\rnumber_format\030\003 \002("
  "\r\022\017\n\007heading\030\004 \002(\t\022%\n\rindexed_style\030\005 \002("
  "\0132\016.TSP.Reference\022*\n\022indexed_list_style\030"
  "\006 \001(\0132\016.TSP.Reference\022\032\n\022indexed_list_st"
  "art\030\007 \001(\r\022\037\n\027indexed_paragraph_level\030\010 \001"
  "(\r\022\032\n\022number_format_name\030\t \001(\t\"\311\027\n\017UndoT"
  "ransaction\0227\n\007entries\030\001 \003(\0132&.TSWP.UndoT"
  "ransaction.UnionTransaction\022\?\n\rgroup_ent"
  "ries\030\002 \003(\0132(.TSWP.UndoTransaction.Storag"
  "eActionGroup\022\r\n\005flags\030\003 \001(\r\022\017\n\007version\030\004"
  " \001(\r\032D\n\022GenericTransaction\022\016\n\006value1\030\001 \002"
  "(\r\022\016\n\006value2\030\002 \002(\r\022\016\n\006value3\030\003 \002(\r\032[\n\017Te"
  "xtTransaction\022\027\n\017insert_location\030\001 \002(\r\022\025"
  "\n\rinsert_length\030\002 \002(\r\022\030\n\020string_to_delet"
  "e\030\003 \001(\t\032Y\n\024CharIndexTransaction\022\022\n\nchar_"
  "index\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\022\036\n\006object\030\003 \001"
  "(\0132\016.TSP.Reference\032J\n\033ReplaceCharIndexTr"
  "ansaction\022\027\n\017attribute_index\030\001 \002(\r\022\022\n\nch"
  "ar_index\030\002 \002(\r\032x\n\031AttributeIndexTransact"
  "ion\022\027\n\017attribute_index\030\001 \002(\r\022\022\n\nchar_ind"
  "ex\030\002 \002(\r\022\036\n\006object\030\003 \001(\0132\016.TSP.Reference"
  "\022\016\n\006string\030\004 \001(\t\032~\n\032InsertAttributeTrans"
  "action\022\027\n\017attribute_index\030\001 \002(\r\022\027\n\017attri"
  "bute_count\030\002 \002(\r\022\036\n\006object\030\003 \001(\0132\016.TSP.R"
  "eference\022\016\n\006string\030\004 \001(\t\032H\n\024InsertNilTra"
  "nsaction\022\027\n\017attribute_index\030\001 \002(\r\022\027\n\017att"
  "ribute_count\030\002 \002(\r\032W\n\024CharDeltaTransacti"
  "on\022\022\n\nchar_index\030\001 \002(\r\022\027\n\017attribute_inde"
  "x\030\002 \002(\r\022\022\n\nchar_delta\030\003 \002(\021\032f\n\030Paragraph"
  "DataTransaction\022\027\n\017attribute_index\030\001 \002(\r"
  "\022\r\n\005first\030\002 \002(\r\022\016\n\006second\030\003 \002(\r\022\022\n\nchar_"
  "index\030\004 \002(\r\032F\n\025ObjectDOLCTransaction\022\r\n\005"
  "flags\030\001 \002(\r\022\036\n\006object\030\002 \001(\0132\016.TSP.Refere"
  "nce\032E\n\021CTDateTransaction\022\027\n\017attribute_in"
  "dex\030\001 \002(\r\022\027\n\004date\030\002 \001(\0132\t.TSP.Date\032\250\006\n\020U"
  "nionTransaction\022,\n\004kind\030\001 \002(\0162\036.TSWP.Und"
  "oTransaction.UndoKind\022\r\n\005table\030\002 \001(\r\0229\n\007"
  "generic\030\005 \001(\0132(.TSWP.UndoTransaction.Gen"
  "ericTransaction\0223\n\004text\030\006 \001(\0132%.TSWP.Und"
  "oTransaction.TextTransaction\022>\n\nchar_ind"
  "ex\030\007 \001(\0132*.TSWP.UndoTransaction.CharInde"
  "xTransaction\022M\n\022replace_char_index\030\010 \001(\013"
  "21.TSWP.UndoTransaction.ReplaceCharIndex"
  "Transaction\022H\n\017attribute_index\030\t \001(\0132/.T"
  "SWP.UndoTransaction.AttributeIndexTransa"
  "ction\022>\n\ninsert_nil\030\n \001(\0132*.TSWP.UndoTra"
  "nsaction.InsertNilTransaction\022J\n\020insert_"
  "attribute\030\013 \001(\01320.TSWP.UndoTransaction.I"
  "nsertAttributeTransaction\022>\n\nchar_delta\030"
  "\014 \001(\0132*.TSWP.UndoTransaction.CharDeltaTr"
  "ansaction\022F\n\016paragraph_data\030\r \001(\0132..TSWP"
  ".UndoTransaction.ParagraphDataTransactio"
  "n\022@\n\013object_dolc\030\016 \001(\0132+.TSWP.UndoTransa"
  "ction.ObjectDOLCTransaction\0228\n\007ct_date\030\017"
  " \001(\0132\'.TSWP.UndoTransaction.CTDateTransa"
  "ction\032\347\002\n\rStorageAction\022.\n\004kind\030\001 \002(\0162 ."
  "TSWP.UndoTransaction.ActionKind\022\r\n\005flags"
  "\030\002 \001(\r\022\r\n\005table\030\003 \001(\r\022\031\n\005range\030\004 \001(\0132\n.T"
  "SP.Range\022\016\n\006string\030\005 \001(\t\022\036\n\006object\030\006 \001(\013"
  "2\016.TSP.Reference\022\027\n\004date\030\007 \001(\0132\t.TSP.Dat"
  "e\022\027\n\017paragraph_level\030\010 \001(\r\022\027\n\017paragraph_"
  "flags\030\t \001(\r\022\027\n\017paragraph_value\030\n \001(\r\022\027\n\017"
  "placement_index\030\013 \001(\005\022\033\n\023placement_uuid_"
  "path\030\014 \001(\t\022#\n\013undo_object\030\r \001(\0132\016.TSP.Re"
  "ference\032\222\002\n\022StorageActionGroup\0223\n\004kind\030\001"
  " \002(\0162%.TSWP.UndoTransaction.ActionGroupK"
  "ind\022<\n\017forward_actions\030\003 \003(\0132#.TSWP.Undo"
  "Transaction.StorageAction\022D\n\027inverse_for"
  "ward_actions\030\004 \003(\0132#.TSWP.UndoTransactio"
  "n.StorageAction\022C\n\026inverse_detail_action"
  "s\030\006 \003(\0132#.TSWP.UndoTransaction.StorageAc"
  "tion\"\346\001\n\010UndoKind\022\020\n\014REPLACE_TEXT\020\001\022\024\n\020I"
  "NSERT_ATTRIBUTE\020\002\022\024\n\020DELETE_ATTRIBUTE\020\003\022"
  "\027\n\023ADJUST_CHAR_INDEXES\020\004\022\035\n\031COMPR_ADJUST"
  "_CHAR_INDEXES\020\005\022\026\n\022REPLACE_CHAR_INDEX\020\006\022"
  "\022\n\016REPLACE_OBJECT\020\007\022\032\n\026REPLACE_PARAGRAPH"
  "_DATA\020\010\022\017\n\013OBJECT_DOLC\020\t\022\013\n\007CT_DATE\020\n\"I\n"
  "\nActionKind\022\024\n\020ACTION_UNDEFINED\020\000\022\017\n\013ACT"
  "ION_TEXT\020\001\022\024\n\020ACTION_ATTRIBUTE\020\002\"`\n\017Acti"
  "onGroupKind\022\032\n\026ACTION_GROUP_UNDEFINED\020\000\022"
  "\025\n\021ACTION_GROUP_TEXT\020\001\022\032\n\026ACTION_GROUP_A"
  "TTRIBUTE\020\002\"P\n\035UndoTransactionWrapperArch"
  "ive\022/\n\020undo_transaction\030\001 \002(\0132\025.TSWP.Und"
  "oTransaction\"\303\001\n\020ShapeInfoArchive\022 \n\005sup"
  "er\030\001 \002(\0132\021.TSD.ShapeArchive\022.\n\022deprecate"
  "d_storage\030\002 \001(\0132\016.TSP.ReferenceB\002\030\001\022!\n\tt"
  "ext_flow\030\003 \001(\0132\016.TSP.Reference\022%\n\rowned_"
  "storage\030\004 \001(\0132\016.TSP.Reference\022\023\n\013is_text"
  "_box\030\006 \001(\010\"d\n\022CommentInfoArchive\022%\n\005supe"
  "r\030\001 \002(\0132\026.TSWP.ShapeInfoArchive\022\'\n\017comme"
  "nt_storage\030\002 \001(\0132\016.TSP.Reference\"\333\001\n\016TOC"
  "InfoArchive\022%\n\005super\030\001 \002(\0132\026.TSWP.ShapeI"
  "nfoArchive\022$\n\014toc_settings\030\002 \001(\0132\016.TSP.R"
  "eference\022&\n\016toc_entry_data\030\003 \003(\0132\016.TSP.R"
  "eference\022&\n\022page_number_ranges\030\004 \003(\0132\n.T"
  "SP.Range\022,\n$sync_toc_settings_with_toc_n"
  "avigator\030\005 \001(\010\"5\n\024TOCLayoutHintArchive\022\035"
  "\n\tcharRange\030\001 \002(\0132\n.TSP.Range\"\375\001\n\023Equati"
  "onInfoArchive2.\n\023equation_source_old\022\021.T"
  "SD.ImageArchive\030d \001(\t2Z\n\030equation_text_p"
  "roperties\022\021.TSD.ImageArchive\030e \001(\0132%.TSW"
  "P.CharacterStylePropertiesArchive2)\n\016equ"
  "ation_depth\022\021.TSD.ImageArchive\030f \001(\0022/\n\024"
  "equation_source_text\022\021.TSD.ImageArchive\030"
  "g \001(\t\"\260\001\n\030TextualAttachmentArchive\022\031\n\021st"
  "ring_equivalent\030\001 \001(\t\0221\n\004kind\030\002 \001(\0162#.TS"
  "WP.TextualAttachmentArchive.Kind\"F\n\004Kind"
  "\022\023\n\017kKindPageNumber\020\000\022\022\n\016kKindPageCount\020"
  "\001\022\025\n\021kKindFootnoteMark\020\002\"\177\n\"TSWPTOCPageN"
  "umberAttachmentArchive\022-\n\005super\030\001 \001(\0132\036."
  "TSWP.TextualAttachmentArchive\022\023\n\013page_nu"
  "mber\030\002 \001(\t\022\025\n\rbookmark_name\030\003 \001(\t\"\027\n\025UIG"
  "raphicalAttachment\"\217\001\n\031DrawableAttachmen"
  "tArchive\022 \n\010drawable\030\001 \001(\0132\016.TSP.Referen"
  "ce\022\025\n\rh_offset_type\030\002 \001(\r\022\020\n\010h_offset\030\003 "
  "\001(\002\022\025\n\rv_offset_type\030\004 \001(\r\022\020\n\010v_offset\030\005"
  " \001(\002\"F\n\024TOCAttachmentArchive\022.\n\005super\030\001 "
  "\002(\0132\037.TSWP.DrawableAttachmentArchive\"\232\001\n"
  "\"FootnoteReferenceAttachmentArchive\022-\n\005s"
  "uper\030\001 \001(\0132\036.TSWP.TextualAttachmentArchi"
  "ve\022)\n\021contained_storage\030\002 \001(\0132\016.TSP.Refe"
  "rence\022\032\n\022custom_mark_string\030\003 \001(\t\"\221\001\n\027Nu"
  "mberAttachmentArchive\022-\n\005super\030\001 \001(\0132\036.T"
  "SWP.TextualAttachmentArchive\022\025\n\rnumber_f"
  "ormat\030\002 \001(\r\022\024\n\014string_value\030\003 \001(\t\022\032\n\022num"
  "ber_format_name\030\004 \001(\t\"7\n\021SmartFieldArchi"
  "ve\022\"\n\032text_attribute_uuid_string\030\001 \001(\t\"P"
  "\n\025HyperlinkFieldArchive\022&\n\005super\030\001 \001(\0132\027"
  ".TSWP.SmartFieldArchive\022\017\n\007url_ref\030\002 \001(\t"
  "\"o\n\034PlaceholderSmartFieldArchive\022&\n\005supe"
  "r\030\001 \001(\0132\027.TSWP.SmartFieldArchive\022\023\n\013loca"
  "lizable\030\002 \001(\010\022\022\n\nscript_tag\030\003 \001(\t\"\200\001\n Un"
  "supportedHyperlinkFieldArchive\0221\n\005super\030"
  "\001 \001(\0132\".TSWP.PlaceholderSmartFieldArchiv"
  "e\022\017\n\007url_ref\030\002 \001(\t\022\030\n\020url_original_ref\030\003"
  " \001(\t\"\275\001\n\035BibliographySmartFieldArchive\022&"
  "\n\005super\030\003 \001(\0132\027.TSWP.SmartFieldArchive\022("
  "\n\020citation_records\030\002 \003(\0132\016.TSP.Reference"
  "\022\023\n\013localizable\030\004 \001(\010\0225\n\told_super\030\001 \001(\013"
  "2\".TSWP.PlaceholderSmartFieldArchive\"\321\001\n"
  "\025CitationRecordArchive\022\023\n\013endnote_xml\030\001 "
  "\001(\t\022\031\n\021hide_author_names\030\002 \001(\010\022\021\n\thide_y"
  "ear\030\003 \001(\010\022\022\n\npage_range\030\004 \001(\t\022\016\n\006prefix\030"
  "\005 \001(\t\022\016\n\006suffix\030\006 \001(\t\022\026\n\016authors_string\030"
  "\007 \001(\t\022\r\n\005title\030\010 \001(\t\022\014\n\004year\030\t \001(\t\022\014\n\004ty"
  "pe\030\n \001(\t\"\271\001\n\031CitationSmartFieldArchive\022&"
  "\n\005super\030\003 \001(\0132\027.TSWP.SmartFieldArchive\022("
  "\n\020citation_records\030\002 \003(\0132\016.TSP.Reference"
  "\022\023\n\013localizable\030\004 \001(\010\0225\n\told_super\030\001 \001(\013"
  "2\".TSWP.PlaceholderSmartFieldArchive\"\257\005\n"
  "\031DateTimeSmartFieldArchive\022&\n\005super\030\001 \001("
  "\0132\027.TSWP.SmartFieldArchive\022\016\n\006format\030\002 \001"
  "(\t\022\031\n\021locale_identifier\030\003 \001(\t\022J\n\ndate_st"
  "yle\030\004 \001(\01626.TSWP.DateTimeSmartFieldArchi"
  "ve.DateTimeFormatterStyle\022J\n\ntime_style\030"
  "\005 \001(\01626.TSWP.DateTimeSmartFieldArchive.D"
  "ateTimeFormatterStyle\022G\n\013update_plan\030\006 \001"
  "(\01622.TSWP.DateTimeSmartFieldArchive.Date"
  "TimeUpdatePlan\022\024\n\014needs_update\030\007 \001(\010\022\027\n\004"
  "date\030\010 \001(\0132\t.TSP.Date\"l\n\022DateTimeUpdateP"
  "lan\022\034\n\030kDateTimeUpdatePlanNever\020\000\022\033\n\027kDa"
  "teTimeUpdatePlanAuto\020\001\022\033\n\027kDateTimeUpdat"
  "ePlanOnce\020\002\"\300\001\n\026DateTimeFormatterStyle\022\037"
  "\n\033kDateTimeFormatterStyleNone\020\000\022 \n\034kDate"
  "TimeFormatterStyleShort\020\001\022!\n\035kDateTimeFo"
  "rmatterStyleMedium\020\002\022\037\n\033kDateTimeFormatt"
  "erStyleLong\020\003\022\037\n\033kDateTimeFormatterStyle"
  "Full\020\004\"l\n\024BookmarkFieldArchive\022&\n\005super\030"
  "\001 \001(\0132\027.TSWP.SmartFieldArchive\022\014\n\004name\030\002"
  " \001(\t\022\016\n\006ranged\030\003 \001(\r\022\016\n\006hidden\030\004 \001(\r\"e\n\031"
  "FilenameSmartFieldArchive\0221\n\005super\030\001 \001(\013"
  "2\".TSWP.PlaceholderSmartFieldArchive\022\025\n\r"
  "display_flags\030\002 \001(\r\"\324\002\n\026MergeSmartFieldA"
  "rchive\0221\n\005super\030\001 \001(\0132\".TSWP.Placeholder"
  "SmartFieldArchive\022\020\n\010property\030\002 \001(\t\022\r\n\005l"
  "abel\030\003 \001(\t\022\013\n\003key\030\004 \001(\t\022<\n\010category\030\005 \001("
  "\0162*.TSWP.MergeSmartFieldArchive.MergeCat"
  "egory\022%\n\035requires_following_whitespace\030\006"
  " \001(\010\022\022\n\nwhitespace\030\007 \001(\t\022\014\n\004guid\030\010 \001(\t\022\023"
  "\n\013table_field\030\t \001(\t\"=\n\rMergeCategory\022\024\n\020"
  "kMergeCategoryTo\020\000\022\026\n\022kMergeCategoryFrom"
  "\020\001\"\347\001\n\024TOCSmartFieldArchive\0221\n\005super\030\001 \001"
  "(\0132\".TSWP.PlaceholderSmartFieldArchive\0228"
  "\n\013toc_entries\030\002 \003(\0132#.TSWP.TOCSmartField"
  "Archive.TOCEntry\032b\n\010TOCEntry\022\025\n\rbookmark"
  "_name\030\001 \001(\t\022$\n\014target_style\030\002 \001(\0132\016.TSP."
  "Reference\022\031\n\005range\030\003 \001(\0132\n.TSP.Range\"M\n\020"
  "RubyFieldArchive\022&\n\005super\030\001 \001(\0132\027.TSWP.S"
  "martFieldArchive\022\021\n\truby_text\030\002 \001(\t\"A\n\027T"
  "ateChuYokoFieldArchive\022&\n\005super\030\001 \001(\0132\027."
  "TSWP.SmartFieldArchive\"\334\001\n\rChangeArchive"
  "\022,\n\004kind\030\001 \001(\0162\036.TSWP.ChangeArchive.Chan"
  "geKind\022\037\n\007session\030\002 \001(\0132\016.TSP.Reference\022"
  "\027\n\004date\030\003 \001(\0132\t.TSP.Date\022\"\n\032text_attribu"
  "te_uuid_string\030\004 \001(\t\"\?\n\nChangeKind\022\030\n\024kC"
  "hangeKindInsertion\020\001\022\027\n\023kChangeKindDelet"
  "ion\020\002\"d\n\024ChangeSessionArchive\022\023\n\013session"
  "_uid\030\001 \001(\r\022\036\n\006author\030\002 \001(\0132\016.TSP.Referen"
  "ce\022\027\n\004date\030\003 \001(\0132\t.TSP.Date\"C\n\031SectionPl"
  "aceholderArchive\022&\n\016parent_storage\030\001 \001(\013"
  "2\016.TSP.Reference\"\033\n\031HyperlinkSelectionAr"
  "chive\"}\n\017FlowInfoArchive\022$\n\014text_storage"
  "\030\001 \001(\0132\016.TSP.Reference\022!\n\ttextboxes\030\002 \003("
  "\0132\016.TSP.Reference\022!\n\031user_interface_iden"
  "tifier\030\003 \001(\r\"f\n\030FlowInfoContainerArchive"
  "\022\"\n\nflow_infos\030\001 \003(\0132\016.TSP.Reference\022&\n\036"
  "next_user_interface_identifier\030\002 \001(\r\"\330\005\n"
  "\016DropCapArchive\022C\n\004type\030\001 \001(\0162 .TSWP.Dro"
  "pCapArchive.DropCapType:\023TSWPDropCapType"
  "Text\022\032\n\017number_of_lines\030\002 \001(\r:\0013\022!\n\026numb"
  "er_of_raised_lines\030\003 \001(\r:\0010\022\032\n\022deprecate"
  "d_outdent\030\004 \001(\002\022\022\n\007outdent\030\013 \001(\001:\0010\022\032\n\022d"
  "eprecated_padding\030\005 \001(\002\022\022\n\007padding\030\014 \001(\001"
  ":\0010\022W\n\twrap_type\030\006 \001(\0162$.TSWP.DropCapArc"
  "hive.DropCapWrapType:\036TSWPDropCapWrapTyp"
  "eRectangular\022\034\n\rshape_enabled\030\007 \001(\010:\005fal"
  "se\022 \n\030deprecated_corner_radius\030\010 \001(\002\022\030\n\r"
  "corner_radius\030\r \001(\001:\0010\022\"\n\032deprecated_cha"
  "racter_scale\030\t \001(\002\022\032\n\017character_scale\030\016 "
  "\001(\001:\0011\022\037\n\024number_of_characters\030\n \001(\r:\0011\""
  "Z\n\013DropCapType\022\027\n\023TSWPDropCapTypeText\020\000\022"
  "\030\n\024TSWPDropCapTypeShape\020\001\022\030\n\024TSWPDropCap"
  "TypeImage\020\002\"r\n\017DropCapWrapType\022\"\n\036TSWPDr"
  "opCapWrapTypeRectangular\020\000\022\036\n\032TSWPDropCa"
  "pWrapTypeContour\020\001\022\033\n\027TSWPDropCapWrapTyp"
  "eNone\020\002\"\313\001\n\035DropCapStylePropertiesArchiv"
  "e\022&\n\010drop_cap\030\001 \001(\0132\024.TSWP.DropCapArchiv"
  "e\0221\n\025drop_cap_shape_stroke\030\003 \001(\0132\022.TSD.S"
  "trokeArchive\022 \n\030drop_cap_shape_fill_null"
  "\030\004 \001(\010\022-\n\023drop_cap_shape_fill\030\005 \001(\0132\020.TS"
  "D.FillArchive\"\324\001\n\023DropCapStyleArchive\022 \n"
  "\005super\030\001 \002(\0132\021.TSS.StyleArchive\022\031\n\016overr"
  "ide_count\030\n \001(\r:\0010\022>\n\017char_properties\030\013 "
  "\001(\0132%.TSWP.CharacterStylePropertiesArchi"
  "ve\022@\n\023drop_cap_properties\030\014 \001(\0132#.TSWP.D"
  "ropCapStylePropertiesArchive*\364\001\n\rSelecti"
  "onType\022\030\n\024SelectionType_Normal\020\000\022\033\n\027Sele"
  "ctionType_ListLabel\020\001\022\033\n\027SelectionType_L"
  "istTopic\020\002\022\031\n\025SelectionType_Replace\020\003\022 \n"
  "\034SelectionType_CopyPasteStyle\020\004\022\032\n\026Selec"
  "tionType_Replace2\020\005\022\034\n\030SelectionType_Sma"
  "rtField\020\006\022\030\n\024SelectionType_Visual\020\007*\206\001\n\026"
  "StyleInsertionBehavior\022!\n\035StyleInsertion"
  "Behavior_NoGrow\020\000\022#\n\037StyleInsertionBehav"
  "ior_GrowLeft\020\001\022$\n StyleInsertionBehavior"
  "_GrowRight\020\002*\?\n\rCaretAffinity\022\027\n\023CaretAf"
  "finity_Start\020\000\022\025\n\021CaretAffinity_End\020\001*\201\001"
  "\n\024WritingDirectionType\022%\n\030kWritingDirect"
  "ionNatural\020\377\377\377\377\377\377\377\377\377\001\022 \n\034kWritingDirecti"
  "onLeftToRight\020\000\022 \n\034kWritingDirectionRigh"
  "tToLeft\020\001:G\n\007padding\022 .TSS.CommandProper"
  "tyEntryArchive\030d \001(\0132\024.TSWP.PaddingArchi"
  "ve"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TSWPArchives_2eproto_deps[4] = {
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TSWPArchives_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSWPArchives_2eproto = {
  false, false, 23762, descriptor_table_protodef_TSWPArchives_2eproto, "TSWPArchives.proto", 
  &descriptor_table_TSWPArchives_2eproto_once, descriptor_table_TSWPArchives_2eproto_deps, 4, 92,
  schemas, file_default_instances, TableStruct_TSWPArchives_2eproto::offsets,
  file_level_metadata_TSWPArchives_2eproto, file_level_enum_descriptors_TSWPArchives_2eproto, file_level_service_descriptors_TSWPArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TSWPArchives_2eproto_getter() {
  return &descriptor_table_TSWPArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TSWPArchives_2eproto(&descriptor_table_TSWPArchives_2eproto);
namespace TSWP {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StorageArchive_KindType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[0];
}
bool StorageArchive_KindType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StorageArchive_KindType StorageArchive::BODY;
constexpr StorageArchive_KindType StorageArchive::HEADER;
constexpr StorageArchive_KindType StorageArchive::FOOTNOTE;
constexpr StorageArchive_KindType StorageArchive::TEXTBOX;
constexpr StorageArchive_KindType StorageArchive::NOTE;
constexpr StorageArchive_KindType StorageArchive::CELL;
constexpr StorageArchive_KindType StorageArchive::UNCLASSIFIED;
constexpr StorageArchive_KindType StorageArchive::TABLEOFCONTENTS;
constexpr StorageArchive_KindType StorageArchive::KindType_MIN;
constexpr StorageArchive_KindType StorageArchive::KindType_MAX;
constexpr int StorageArchive::KindType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterStylePropertiesArchive_CapitalizationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[1];
}
bool CharacterStylePropertiesArchive_CapitalizationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive::kNoCaps;
constexpr CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive::kAllCaps;
constexpr CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive::kSmallCaps;
constexpr CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive::kTitled;
constexpr CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive::CapitalizationType_MIN;
constexpr CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive::CapitalizationType_MAX;
constexpr int CharacterStylePropertiesArchive::CapitalizationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterStylePropertiesArchive_UnderlineType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[2];
}
bool CharacterStylePropertiesArchive_UnderlineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive::kNoUnderline;
constexpr CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive::kSingleUnderline;
constexpr CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive::kDoubleUnderline;
constexpr CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive::kWavyUnderline;
constexpr CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive::UnderlineType_MIN;
constexpr CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive::UnderlineType_MAX;
constexpr int CharacterStylePropertiesArchive::UnderlineType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterStylePropertiesArchive_LigaturesType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[3];
}
bool CharacterStylePropertiesArchive_LigaturesType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CharacterStylePropertiesArchive_LigaturesType CharacterStylePropertiesArchive::kRequiredLigatures;
constexpr CharacterStylePropertiesArchive_LigaturesType CharacterStylePropertiesArchive::kStandardLigatures;
constexpr CharacterStylePropertiesArchive_LigaturesType CharacterStylePropertiesArchive::kAllLigatures;
constexpr CharacterStylePropertiesArchive_LigaturesType CharacterStylePropertiesArchive::LigaturesType_MIN;
constexpr CharacterStylePropertiesArchive_LigaturesType CharacterStylePropertiesArchive::LigaturesType_MAX;
constexpr int CharacterStylePropertiesArchive::LigaturesType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterStylePropertiesArchive_StrikethruType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[4];
}
bool CharacterStylePropertiesArchive_StrikethruType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive::kNoStrikethru;
constexpr CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive::kSingleStrikethru;
constexpr CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive::kDoubleStrikethru;
constexpr CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive::kTripleStrikethru;
constexpr CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive::StrikethruType_MIN;
constexpr CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive::StrikethruType_MAX;
constexpr int CharacterStylePropertiesArchive::StrikethruType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterStylePropertiesArchive_SuperscriptType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[5];
}
bool CharacterStylePropertiesArchive_SuperscriptType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CharacterStylePropertiesArchive_SuperscriptType CharacterStylePropertiesArchive::kNoScript;
constexpr CharacterStylePropertiesArchive_SuperscriptType CharacterStylePropertiesArchive::kSuperscript;
constexpr CharacterStylePropertiesArchive_SuperscriptType CharacterStylePropertiesArchive::kSubscript;
constexpr CharacterStylePropertiesArchive_SuperscriptType CharacterStylePropertiesArchive::SuperscriptType_MIN;
constexpr CharacterStylePropertiesArchive_SuperscriptType CharacterStylePropertiesArchive::SuperscriptType_MAX;
constexpr int CharacterStylePropertiesArchive::SuperscriptType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TabArchive_TabAlignmentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[6];
}
bool TabArchive_TabAlignmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TabArchive_TabAlignmentType TabArchive::kTabAlignmentLeft;
constexpr TabArchive_TabAlignmentType TabArchive::kTabAlignmentCenter;
constexpr TabArchive_TabAlignmentType TabArchive::kTabAlignmentRight;
constexpr TabArchive_TabAlignmentType TabArchive::kTabAlignmentDecimal;
constexpr TabArchive_TabAlignmentType TabArchive::TabAlignmentType_MIN;
constexpr TabArchive_TabAlignmentType TabArchive::TabAlignmentType_MAX;
constexpr int TabArchive::TabAlignmentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LineSpacingArchive_LineSpacingModeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[7];
}
bool LineSpacingArchive_LineSpacingModeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LineSpacingArchive_LineSpacingModeType LineSpacingArchive::kRelativeLineSpacing;
constexpr LineSpacingArchive_LineSpacingModeType LineSpacingArchive::kMinimumLineSpacing;
constexpr LineSpacingArchive_LineSpacingModeType LineSpacingArchive::kExactLineSpacing;
constexpr LineSpacingArchive_LineSpacingModeType LineSpacingArchive::kMaximumLineSpacing;
constexpr LineSpacingArchive_LineSpacingModeType LineSpacingArchive::kSpaceBetweenLineSpacing;
constexpr LineSpacingArchive_LineSpacingModeType LineSpacingArchive::LineSpacingModeType_MIN;
constexpr LineSpacingArchive_LineSpacingModeType LineSpacingArchive::LineSpacingModeType_MAX;
constexpr int LineSpacingArchive::LineSpacingModeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParagraphStylePropertiesArchive_TextAlignmentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[8];
}
bool ParagraphStylePropertiesArchive_TextAlignmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TATvalue0;
constexpr ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TATvalue1;
constexpr ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TATvalue2;
constexpr ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TATvalue3;
constexpr ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TATvalue4;
constexpr ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TextAlignmentType_MIN;
constexpr ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TextAlignmentType_MAX;
constexpr int ParagraphStylePropertiesArchive::TextAlignmentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParagraphStylePropertiesArchive_ParagraphBorderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[9];
}
bool ParagraphStylePropertiesArchive_ParagraphBorderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::PBTvalue0;
constexpr ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::PBTvalue1;
constexpr ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::PBTvalue2;
constexpr ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::PBTvalue3;
constexpr ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::PBTvalue4;
constexpr ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::ParagraphBorderType_MIN;
constexpr ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::ParagraphBorderType_MAX;
constexpr int ParagraphStylePropertiesArchive::ParagraphBorderType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParagraphStylePropertiesArchive_OutlineStyleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[10];
}
bool ParagraphStylePropertiesArchive_OutlineStyleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ParagraphStylePropertiesArchive_OutlineStyleType ParagraphStylePropertiesArchive::OSTvalue0;
constexpr ParagraphStylePropertiesArchive_OutlineStyleType ParagraphStylePropertiesArchive::OSTvalue1;
constexpr ParagraphStylePropertiesArchive_OutlineStyleType ParagraphStylePropertiesArchive::OSTvalue2;
constexpr ParagraphStylePropertiesArchive_OutlineStyleType ParagraphStylePropertiesArchive::OutlineStyleType_MIN;
constexpr ParagraphStylePropertiesArchive_OutlineStyleType ParagraphStylePropertiesArchive::OutlineStyleType_MAX;
constexpr int ParagraphStylePropertiesArchive::OutlineStyleType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListStyleArchive_LabelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[11];
}
bool ListStyleArchive_LabelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ListStyleArchive_LabelType ListStyleArchive::kNone;
constexpr ListStyleArchive_LabelType ListStyleArchive::kImage;
constexpr ListStyleArchive_LabelType ListStyleArchive::kString;
constexpr ListStyleArchive_LabelType ListStyleArchive::kNumber;
constexpr ListStyleArchive_LabelType ListStyleArchive::LabelType_MIN;
constexpr ListStyleArchive_LabelType ListStyleArchive::LabelType_MAX;
constexpr int ListStyleArchive::LabelType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListStyleArchive_NumberType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[12];
}
bool ListStyleArchive_NumberType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ListStyleArchive_NumberType ListStyleArchive::kNumericDecimal;
constexpr ListStyleArchive_NumberType ListStyleArchive::kNumericDoubleParen;
constexpr ListStyleArchive_NumberType ListStyleArchive::kNumericRightParen;
constexpr ListStyleArchive_NumberType ListStyleArchive::kRomanUpperDecimal;
constexpr ListStyleArchive_NumberType ListStyleArchive::kRomanUpperDoubleParen;
constexpr ListStyleArchive_NumberType ListStyleArchive::kRomanUpperRightParen;
constexpr ListStyleArchive_NumberType ListStyleArchive::kRomanLowerDecimal;
constexpr ListStyleArchive_NumberType ListStyleArchive::kRomanLowerDoubleParen;
constexpr ListStyleArchive_NumberType ListStyleArchive::kRomanLowerRightParen;
constexpr ListStyleArchive_NumberType ListStyleArchive::kAlphaUpperDecimal;
constexpr ListStyleArchive_NumberType ListStyleArchive::kAlphaUpperDoubleParen;
constexpr ListStyleArchive_NumberType ListStyleArchive::kAlphaUpperRightParen;
constexpr ListStyleArchive_NumberType ListStyleArchive::kAlphaLowerDecimal;
constexpr ListStyleArchive_NumberType ListStyleArchive::kAlphaLowerDoubleParen;
constexpr ListStyleArchive_NumberType ListStyleArchive::kAlphaLowerRightParen;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicJapaneseDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicJapaneseDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicJapaneseRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHiraganaDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHiraganaDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHiraganaRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kKatakanaDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kKatakanaDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kKatakanaRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHiraganaIrohaDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHiraganaIrohaDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHiraganaIrohaRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kKatakanaIrohaDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kKatakanaIrohaDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kKatakanaIrohaRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicSimplifiedChineseDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicSimplifiedChineseDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicSimplifiedChineseRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicTraditionalChineseDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicTraditionalChineseDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicTraditionalChineseRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalJapaneseDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalJapaneseDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalJapaneseRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalSimplifiedChineseDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalSimplifiedChineseDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalSimplifiedChineseRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalTraditionalChineseDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalTraditionalChineseDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalTraditionalChineseRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kKoreanAlphabetDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kKoreanAlphabetDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kKoreanAlphabetRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kCircledNumberKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kArabianNumericDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kArabianNumericDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kArabianNumericRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kArabianAlphaDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kArabianAlphaDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kArabianAlphaRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kArabianAbjadDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kArabianAbjadDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kArabianAbjadRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHebrewAlphaDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHebrewAlphaDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHebrewAlphaRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHebrewBiblicalStandardKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHebrewBiblicalDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHebrewBiblicalDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHebrewBiblicalRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::NumberType_MIN;
constexpr ListStyleArchive_NumberType ListStyleArchive::NumberType_MAX;
constexpr int ListStyleArchive::NumberType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ColumnStylePropertiesArchive_VerticalAlignmentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[13];
}
bool ColumnStylePropertiesArchive_VerticalAlignmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive::kFrameAlignTop;
constexpr ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive::kFrameAlignMiddle;
constexpr ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive::kFrameAlignBottom;
constexpr ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive::kFrameAlignJustify;
constexpr ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive::VerticalAlignmentType_MIN;
constexpr ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive::VerticalAlignmentType_MAX;
constexpr int ColumnStylePropertiesArchive::VerticalAlignmentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShapeStylePropertiesArchive_VerticalAlignmentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[14];
}
bool ShapeStylePropertiesArchive_VerticalAlignmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive::kFrameAlignTop;
constexpr ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive::kFrameAlignMiddle;
constexpr ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive::kFrameAlignBottom;
constexpr ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive::kFrameAlignJustify;
constexpr ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive::VerticalAlignmentType_MIN;
constexpr ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive::VerticalAlignmentType_MAX;
constexpr int ShapeStylePropertiesArchive::VerticalAlignmentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UndoTransaction_UndoKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[15];
}
bool UndoTransaction_UndoKind_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UndoTransaction_UndoKind UndoTransaction::REPLACE_TEXT;
constexpr UndoTransaction_UndoKind UndoTransaction::INSERT_ATTRIBUTE;
constexpr UndoTransaction_UndoKind UndoTransaction::DELETE_ATTRIBUTE;
constexpr UndoTransaction_UndoKind UndoTransaction::ADJUST_CHAR_INDEXES;
constexpr UndoTransaction_UndoKind UndoTransaction::COMPR_ADJUST_CHAR_INDEXES;
constexpr UndoTransaction_UndoKind UndoTransaction::REPLACE_CHAR_INDEX;
constexpr UndoTransaction_UndoKind UndoTransaction::REPLACE_OBJECT;
constexpr UndoTransaction_UndoKind UndoTransaction::REPLACE_PARAGRAPH_DATA;
constexpr UndoTransaction_UndoKind UndoTransaction::OBJECT_DOLC;
constexpr UndoTransaction_UndoKind UndoTransaction::CT_DATE;
constexpr UndoTransaction_UndoKind UndoTransaction::UndoKind_MIN;
constexpr UndoTransaction_UndoKind UndoTransaction::UndoKind_MAX;
constexpr int UndoTransaction::UndoKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UndoTransaction_ActionKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[16];
}
bool UndoTransaction_ActionKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UndoTransaction_ActionKind UndoTransaction::ACTION_UNDEFINED;
constexpr UndoTransaction_ActionKind UndoTransaction::ACTION_TEXT;
constexpr UndoTransaction_ActionKind UndoTransaction::ACTION_ATTRIBUTE;
constexpr UndoTransaction_ActionKind UndoTransaction::ActionKind_MIN;
constexpr UndoTransaction_ActionKind UndoTransaction::ActionKind_MAX;
constexpr int UndoTransaction::ActionKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UndoTransaction_ActionGroupKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[17];
}
bool UndoTransaction_ActionGroupKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UndoTransaction_ActionGroupKind UndoTransaction::ACTION_GROUP_UNDEFINED;
constexpr UndoTransaction_ActionGroupKind UndoTransaction::ACTION_GROUP_TEXT;
constexpr UndoTransaction_ActionGroupKind UndoTransaction::ACTION_GROUP_ATTRIBUTE;
constexpr UndoTransaction_ActionGroupKind UndoTransaction::ActionGroupKind_MIN;
constexpr UndoTransaction_ActionGroupKind UndoTransaction::ActionGroupKind_MAX;
constexpr int UndoTransaction::ActionGroupKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextualAttachmentArchive_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[18];
}
bool TextualAttachmentArchive_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TextualAttachmentArchive_Kind TextualAttachmentArchive::kKindPageNumber;
constexpr TextualAttachmentArchive_Kind TextualAttachmentArchive::kKindPageCount;
constexpr TextualAttachmentArchive_Kind TextualAttachmentArchive::kKindFootnoteMark;
constexpr TextualAttachmentArchive_Kind TextualAttachmentArchive::Kind_MIN;
constexpr TextualAttachmentArchive_Kind TextualAttachmentArchive::Kind_MAX;
constexpr int TextualAttachmentArchive::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DateTimeSmartFieldArchive_DateTimeUpdatePlan_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[19];
}
bool DateTimeSmartFieldArchive_DateTimeUpdatePlan_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DateTimeSmartFieldArchive_DateTimeUpdatePlan DateTimeSmartFieldArchive::kDateTimeUpdatePlanNever;
constexpr DateTimeSmartFieldArchive_DateTimeUpdatePlan DateTimeSmartFieldArchive::kDateTimeUpdatePlanAuto;
constexpr DateTimeSmartFieldArchive_DateTimeUpdatePlan DateTimeSmartFieldArchive::kDateTimeUpdatePlanOnce;
constexpr DateTimeSmartFieldArchive_DateTimeUpdatePlan DateTimeSmartFieldArchive::DateTimeUpdatePlan_MIN;
constexpr DateTimeSmartFieldArchive_DateTimeUpdatePlan DateTimeSmartFieldArchive::DateTimeUpdatePlan_MAX;
constexpr int DateTimeSmartFieldArchive::DateTimeUpdatePlan_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DateTimeSmartFieldArchive_DateTimeFormatterStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[20];
}
bool DateTimeSmartFieldArchive_DateTimeFormatterStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::kDateTimeFormatterStyleNone;
constexpr DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::kDateTimeFormatterStyleShort;
constexpr DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::kDateTimeFormatterStyleMedium;
constexpr DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::kDateTimeFormatterStyleLong;
constexpr DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::kDateTimeFormatterStyleFull;
constexpr DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::DateTimeFormatterStyle_MIN;
constexpr DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::DateTimeFormatterStyle_MAX;
constexpr int DateTimeSmartFieldArchive::DateTimeFormatterStyle_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MergeSmartFieldArchive_MergeCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[21];
}
bool MergeSmartFieldArchive_MergeCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MergeSmartFieldArchive_MergeCategory MergeSmartFieldArchive::kMergeCategoryTo;
constexpr MergeSmartFieldArchive_MergeCategory MergeSmartFieldArchive::kMergeCategoryFrom;
constexpr MergeSmartFieldArchive_MergeCategory MergeSmartFieldArchive::MergeCategory_MIN;
constexpr MergeSmartFieldArchive_MergeCategory MergeSmartFieldArchive::MergeCategory_MAX;
constexpr int MergeSmartFieldArchive::MergeCategory_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeArchive_ChangeKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[22];
}
bool ChangeArchive_ChangeKind_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChangeArchive_ChangeKind ChangeArchive::kChangeKindInsertion;
constexpr ChangeArchive_ChangeKind ChangeArchive::kChangeKindDeletion;
constexpr ChangeArchive_ChangeKind ChangeArchive::ChangeKind_MIN;
constexpr ChangeArchive_ChangeKind ChangeArchive::ChangeKind_MAX;
constexpr int ChangeArchive::ChangeKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DropCapArchive_DropCapType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[23];
}
bool DropCapArchive_DropCapType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DropCapArchive_DropCapType DropCapArchive::TSWPDropCapTypeText;
constexpr DropCapArchive_DropCapType DropCapArchive::TSWPDropCapTypeShape;
constexpr DropCapArchive_DropCapType DropCapArchive::TSWPDropCapTypeImage;
constexpr DropCapArchive_DropCapType DropCapArchive::DropCapType_MIN;
constexpr DropCapArchive_DropCapType DropCapArchive::DropCapType_MAX;
constexpr int DropCapArchive::DropCapType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DropCapArchive_DropCapWrapType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[24];
}
bool DropCapArchive_DropCapWrapType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DropCapArchive_DropCapWrapType DropCapArchive::TSWPDropCapWrapTypeRectangular;
constexpr DropCapArchive_DropCapWrapType DropCapArchive::TSWPDropCapWrapTypeContour;
constexpr DropCapArchive_DropCapWrapType DropCapArchive::TSWPDropCapWrapTypeNone;
constexpr DropCapArchive_DropCapWrapType DropCapArchive::DropCapWrapType_MIN;
constexpr DropCapArchive_DropCapWrapType DropCapArchive::DropCapWrapType_MAX;
constexpr int DropCapArchive::DropCapWrapType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[25];
}
bool SelectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StyleInsertionBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[26];
}
bool StyleInsertionBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CaretAffinity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[27];
}
bool CaretAffinity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WritingDirectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[28];
}
bool WritingDirectionType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectionArchive>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Range& range(const SelectionArchive* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_styleinsertionbehavior(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_caretaffinity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Range& smart_field_range(const SelectionArchive* msg);
  static void set_has_smart_field_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSP::Range&
SelectionArchive::_Internal::range(const SelectionArchive* msg) {
  return *msg->range_;
}
const ::TSP::Range&
SelectionArchive::_Internal::smart_field_range(const SelectionArchive* msg) {
  return *msg->smart_field_range_;
}
void SelectionArchive::clear_range() {
  if (range_ != nullptr) range_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SelectionArchive::clear_smart_field_range() {
  if (smart_field_range_ != nullptr) smart_field_range_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SelectionArchive::SelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.SelectionArchive)
}
SelectionArchive::SelectionArchive(const SelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range()) {
    range_ = new ::TSP::Range(*from.range_);
  } else {
    range_ = nullptr;
  }
  if (from._internal_has_smart_field_range()) {
    smart_field_range_ = new ::TSP::Range(*from.smart_field_range_);
  } else {
    smart_field_range_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&caretaffinity_) -
    reinterpret_cast<char*>(&type_)) + sizeof(caretaffinity_));
  // @@protoc_insertion_point(copy_constructor:TSWP.SelectionArchive)
}

inline void SelectionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&caretaffinity_) -
    reinterpret_cast<char*>(&range_)) + sizeof(caretaffinity_));
}

SelectionArchive::~SelectionArchive() {
  // @@protoc_insertion_point(destructor:TSWP.SelectionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete range_;
  if (this != internal_default_instance()) delete smart_field_range_;
}

void SelectionArchive::ArenaDtor(void* object) {
  SelectionArchive* _this = reinterpret_cast< SelectionArchive* >(object);
  (void)_this;
}
void SelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.SelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(range_ != nullptr);
      range_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(smart_field_range_ != nullptr);
      smart_field_range_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&caretaffinity_) -
        reinterpret_cast<char*>(&type_)) + sizeof(caretaffinity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.SelectionType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::SelectionType_IsValid(val))) {
            _internal_set_type(static_cast<::TSWP::SelectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .TSP.Range range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSWP.StyleInsertionBehavior styleInsertionBehavior = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::StyleInsertionBehavior_IsValid(val))) {
            _internal_set_styleinsertionbehavior(static_cast<::TSWP::StyleInsertionBehavior>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .TSWP.CaretAffinity caretAffinity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::CaretAffinity_IsValid(val))) {
            _internal_set_caretaffinity(static_cast<::TSWP::CaretAffinity>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .TSP.Range smart_field_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_smart_field_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.SelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.SelectionType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required .TSP.Range range = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::range(this), target, stream);
  }

  // required .TSWP.StyleInsertionBehavior styleInsertionBehavior = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_styleinsertionbehavior(), target);
  }

  // required .TSWP.CaretAffinity caretAffinity = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_caretaffinity(), target);
  }

  // required .TSP.Range smart_field_range = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::smart_field_range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.SelectionArchive)
  return target;
}

size_t SelectionArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.SelectionArchive)
  size_t total_size = 0;

  if (_internal_has_range()) {
    // required .TSP.Range range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  if (_internal_has_smart_field_range()) {
    // required .TSP.Range smart_field_range = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *smart_field_range_);
  }

  if (_internal_has_type()) {
    // required .TSWP.SelectionType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_styleinsertionbehavior()) {
    // required .TSWP.StyleInsertionBehavior styleInsertionBehavior = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_styleinsertionbehavior());
  }

  if (_internal_has_caretaffinity()) {
    // required .TSWP.CaretAffinity caretAffinity = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_caretaffinity());
  }

  return total_size;
}
size_t SelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.SelectionArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TSP.Range range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);

    // required .TSP.Range smart_field_range = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *smart_field_range_);

    // required .TSWP.SelectionType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

    // required .TSWP.StyleInsertionBehavior styleInsertionBehavior = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_styleinsertionbehavior());

    // required .TSWP.CaretAffinity caretAffinity = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_caretaffinity());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectionArchive::GetClassData() const { return &_class_data_; }

void SelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SelectionArchive *>(to)->MergeFrom(
      static_cast<const SelectionArchive &>(from));
}


void SelectionArchive::MergeFrom(const SelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.SelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_range()->::TSP::Range::MergeFrom(from._internal_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_smart_field_range()->::TSP::Range::MergeFrom(from._internal_smart_field_range());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      styleinsertionbehavior_ = from.styleinsertionbehavior_;
    }
    if (cached_has_bits & 0x00000010u) {
      caretaffinity_ = from.caretaffinity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectionArchive::CopyFrom(const SelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.SelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_range()) {
    if (!range_->IsInitialized()) return false;
  }
  if (_internal_has_smart_field_range()) {
    if (!smart_field_range_->IsInitialized()) return false;
  }
  return true;
}

void SelectionArchive::InternalSwap(SelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectionArchive, caretaffinity_)
      + sizeof(SelectionArchive::caretaffinity_)
      - PROTOBUF_FIELD_OFFSET(SelectionArchive, range_)>(
          reinterpret_cast<char*>(&range_),
          reinterpret_cast<char*>(&other->range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[0]);
}

// ===================================================================

class ObjectAttributeTable_ObjectAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectAttributeTable_ObjectAttribute>()._has_bits_);
  static void set_has_character_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& object(const ObjectAttributeTable_ObjectAttribute* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::Reference&
ObjectAttributeTable_ObjectAttribute::_Internal::object(const ObjectAttributeTable_ObjectAttribute* msg) {
  return *msg->object_;
}
void ObjectAttributeTable_ObjectAttribute::clear_object() {
  if (object_ != nullptr) object_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ObjectAttributeTable_ObjectAttribute::ObjectAttributeTable_ObjectAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ObjectAttributeTable.ObjectAttribute)
}
ObjectAttributeTable_ObjectAttribute::ObjectAttributeTable_ObjectAttribute(const ObjectAttributeTable_ObjectAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::TSP::Reference(*from.object_);
  } else {
    object_ = nullptr;
  }
  character_index_ = from.character_index_;
  // @@protoc_insertion_point(copy_constructor:TSWP.ObjectAttributeTable.ObjectAttribute)
}

inline void ObjectAttributeTable_ObjectAttribute::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&character_index_) -
    reinterpret_cast<char*>(&object_)) + sizeof(character_index_));
}

ObjectAttributeTable_ObjectAttribute::~ObjectAttributeTable_ObjectAttribute() {
  // @@protoc_insertion_point(destructor:TSWP.ObjectAttributeTable.ObjectAttribute)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObjectAttributeTable_ObjectAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void ObjectAttributeTable_ObjectAttribute::ArenaDtor(void* object) {
  ObjectAttributeTable_ObjectAttribute* _this = reinterpret_cast< ObjectAttributeTable_ObjectAttribute* >(object);
  (void)_this;
}
void ObjectAttributeTable_ObjectAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectAttributeTable_ObjectAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectAttributeTable_ObjectAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ObjectAttributeTable.ObjectAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(object_ != nullptr);
    object_->Clear();
  }
  character_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectAttributeTable_ObjectAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 character_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_character_index(&has_bits);
          character_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectAttributeTable_ObjectAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ObjectAttributeTable.ObjectAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 character_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_character_index(), target);
  }

  // optional .TSP.Reference object = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ObjectAttributeTable.ObjectAttribute)
  return target;
}

size_t ObjectAttributeTable_ObjectAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ObjectAttributeTable.ObjectAttribute)
  size_t total_size = 0;

  // required uint32 character_index = 1;
  if (_internal_has_character_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character_index());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference object = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectAttributeTable_ObjectAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectAttributeTable_ObjectAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectAttributeTable_ObjectAttribute::GetClassData() const { return &_class_data_; }

void ObjectAttributeTable_ObjectAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ObjectAttributeTable_ObjectAttribute *>(to)->MergeFrom(
      static_cast<const ObjectAttributeTable_ObjectAttribute &>(from));
}


void ObjectAttributeTable_ObjectAttribute::MergeFrom(const ObjectAttributeTable_ObjectAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ObjectAttributeTable.ObjectAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_object()->::TSP::Reference::MergeFrom(from._internal_object());
    }
    if (cached_has_bits & 0x00000002u) {
      character_index_ = from.character_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectAttributeTable_ObjectAttribute::CopyFrom(const ObjectAttributeTable_ObjectAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ObjectAttributeTable.ObjectAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeTable_ObjectAttribute::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_object()) {
    if (!object_->IsInitialized()) return false;
  }
  return true;
}

void ObjectAttributeTable_ObjectAttribute::InternalSwap(ObjectAttributeTable_ObjectAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectAttributeTable_ObjectAttribute, character_index_)
      + sizeof(ObjectAttributeTable_ObjectAttribute::character_index_)
      - PROTOBUF_FIELD_OFFSET(ObjectAttributeTable_ObjectAttribute, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectAttributeTable_ObjectAttribute::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[1]);
}

// ===================================================================

class ObjectAttributeTable::_Internal {
 public:
};

ObjectAttributeTable::ObjectAttributeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ObjectAttributeTable)
}
ObjectAttributeTable::ObjectAttributeTable(const ObjectAttributeTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.ObjectAttributeTable)
}

inline void ObjectAttributeTable::SharedCtor() {
}

ObjectAttributeTable::~ObjectAttributeTable() {
  // @@protoc_insertion_point(destructor:TSWP.ObjectAttributeTable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObjectAttributeTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObjectAttributeTable::ArenaDtor(void* object) {
  ObjectAttributeTable* _this = reinterpret_cast< ObjectAttributeTable* >(object);
  (void)_this;
}
void ObjectAttributeTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectAttributeTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectAttributeTable::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ObjectAttributeTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectAttributeTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSWP.ObjectAttributeTable.ObjectAttribute entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectAttributeTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ObjectAttributeTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSWP.ObjectAttributeTable.ObjectAttribute entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ObjectAttributeTable)
  return target;
}

size_t ObjectAttributeTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ObjectAttributeTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.ObjectAttributeTable.ObjectAttribute entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectAttributeTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectAttributeTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectAttributeTable::GetClassData() const { return &_class_data_; }

void ObjectAttributeTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ObjectAttributeTable *>(to)->MergeFrom(
      static_cast<const ObjectAttributeTable &>(from));
}


void ObjectAttributeTable::MergeFrom(const ObjectAttributeTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ObjectAttributeTable)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectAttributeTable::CopyFrom(const ObjectAttributeTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ObjectAttributeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeTable::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  return true;
}

void ObjectAttributeTable::InternalSwap(ObjectAttributeTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectAttributeTable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[2]);
}

// ===================================================================

class StringAttributeTable_StringAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<StringAttributeTable_StringAttribute>()._has_bits_);
  static void set_has_character_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

StringAttributeTable_StringAttribute::StringAttributeTable_StringAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.StringAttributeTable.StringAttribute)
}
StringAttributeTable_StringAttribute::StringAttributeTable_StringAttribute(const StringAttributeTable_StringAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_object()) {
    object_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object(), 
      GetArenaForAllocation());
  }
  character_index_ = from.character_index_;
  // @@protoc_insertion_point(copy_constructor:TSWP.StringAttributeTable.StringAttribute)
}

inline void StringAttributeTable_StringAttribute::SharedCtor() {
object_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
character_index_ = 0u;
}

StringAttributeTable_StringAttribute::~StringAttributeTable_StringAttribute() {
  // @@protoc_insertion_point(destructor:TSWP.StringAttributeTable.StringAttribute)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StringAttributeTable_StringAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  object_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StringAttributeTable_StringAttribute::ArenaDtor(void* object) {
  StringAttributeTable_StringAttribute* _this = reinterpret_cast< StringAttributeTable_StringAttribute* >(object);
  (void)_this;
}
void StringAttributeTable_StringAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringAttributeTable_StringAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringAttributeTable_StringAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.StringAttributeTable.StringAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    object_.ClearNonDefaultToEmpty();
  }
  character_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringAttributeTable_StringAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 character_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_character_index(&has_bits);
          character_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_object();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.StringAttributeTable.StringAttribute.object");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringAttributeTable_StringAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.StringAttributeTable.StringAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 character_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_character_index(), target);
  }

  // optional string object = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_object().data(), static_cast<int>(this->_internal_object().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.StringAttributeTable.StringAttribute.object");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_object(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.StringAttributeTable.StringAttribute)
  return target;
}

size_t StringAttributeTable_StringAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.StringAttributeTable.StringAttribute)
  size_t total_size = 0;

  // required uint32 character_index = 1;
  if (_internal_has_character_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character_index());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string object = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringAttributeTable_StringAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StringAttributeTable_StringAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringAttributeTable_StringAttribute::GetClassData() const { return &_class_data_; }

void StringAttributeTable_StringAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StringAttributeTable_StringAttribute *>(to)->MergeFrom(
      static_cast<const StringAttributeTable_StringAttribute &>(from));
}


void StringAttributeTable_StringAttribute::MergeFrom(const StringAttributeTable_StringAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.StringAttributeTable.StringAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_object(from._internal_object());
    }
    if (cached_has_bits & 0x00000002u) {
      character_index_ = from.character_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringAttributeTable_StringAttribute::CopyFrom(const StringAttributeTable_StringAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.StringAttributeTable.StringAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringAttributeTable_StringAttribute::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void StringAttributeTable_StringAttribute::InternalSwap(StringAttributeTable_StringAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &object_, GetArenaForAllocation(),
      &other->object_, other->GetArenaForAllocation()
  );
  swap(character_index_, other->character_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringAttributeTable_StringAttribute::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[3]);
}

// ===================================================================

class StringAttributeTable::_Internal {
 public:
};

StringAttributeTable::StringAttributeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.StringAttributeTable)
}
StringAttributeTable::StringAttributeTable(const StringAttributeTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.StringAttributeTable)
}

inline void StringAttributeTable::SharedCtor() {
}

StringAttributeTable::~StringAttributeTable() {
  // @@protoc_insertion_point(destructor:TSWP.StringAttributeTable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StringAttributeTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StringAttributeTable::ArenaDtor(void* object) {
  StringAttributeTable* _this = reinterpret_cast< StringAttributeTable* >(object);
  (void)_this;
}
void StringAttributeTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringAttributeTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringAttributeTable::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.StringAttributeTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringAttributeTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSWP.StringAttributeTable.StringAttribute entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringAttributeTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.StringAttributeTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSWP.StringAttributeTable.StringAttribute entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.StringAttributeTable)
  return target;
}

size_t StringAttributeTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.StringAttributeTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.StringAttributeTable.StringAttribute entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringAttributeTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StringAttributeTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringAttributeTable::GetClassData() const { return &_class_data_; }

void StringAttributeTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StringAttributeTable *>(to)->MergeFrom(
      static_cast<const StringAttributeTable &>(from));
}


void StringAttributeTable::MergeFrom(const StringAttributeTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.StringAttributeTable)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringAttributeTable::CopyFrom(const StringAttributeTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.StringAttributeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringAttributeTable::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  return true;
}

void StringAttributeTable::InternalSwap(StringAttributeTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringAttributeTable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[4]);
}

// ===================================================================

class ParaDataAttributeTable_ParaDataAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<ParaDataAttributeTable_ParaDataAttribute>()._has_bits_);
  static void set_has_character_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_first(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_second(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ParaDataAttributeTable_ParaDataAttribute::ParaDataAttributeTable_ParaDataAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ParaDataAttributeTable.ParaDataAttribute)
}
ParaDataAttributeTable_ParaDataAttribute::ParaDataAttributeTable_ParaDataAttribute(const ParaDataAttributeTable_ParaDataAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&character_index_, &from.character_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&character_index_)) + sizeof(second_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ParaDataAttributeTable.ParaDataAttribute)
}

inline void ParaDataAttributeTable_ParaDataAttribute::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&character_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&character_index_)) + sizeof(second_));
}

ParaDataAttributeTable_ParaDataAttribute::~ParaDataAttributeTable_ParaDataAttribute() {
  // @@protoc_insertion_point(destructor:TSWP.ParaDataAttributeTable.ParaDataAttribute)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParaDataAttributeTable_ParaDataAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParaDataAttributeTable_ParaDataAttribute::ArenaDtor(void* object) {
  ParaDataAttributeTable_ParaDataAttribute* _this = reinterpret_cast< ParaDataAttributeTable_ParaDataAttribute* >(object);
  (void)_this;
}
void ParaDataAttributeTable_ParaDataAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParaDataAttributeTable_ParaDataAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParaDataAttributeTable_ParaDataAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ParaDataAttributeTable.ParaDataAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&character_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&second_) -
        reinterpret_cast<char*>(&character_index_)) + sizeof(second_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParaDataAttributeTable_ParaDataAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 character_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_character_index(&has_bits);
          character_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 first = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_first(&has_bits);
          first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 second = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_second(&has_bits);
          second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParaDataAttributeTable_ParaDataAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ParaDataAttributeTable.ParaDataAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 character_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_character_index(), target);
  }

  // required uint32 first = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_first(), target);
  }

  // required uint32 second = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ParaDataAttributeTable.ParaDataAttribute)
  return target;
}

size_t ParaDataAttributeTable_ParaDataAttribute::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.ParaDataAttributeTable.ParaDataAttribute)
  size_t total_size = 0;

  if (_internal_has_character_index()) {
    // required uint32 character_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character_index());
  }

  if (_internal_has_first()) {
    // required uint32 first = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_first());
  }

  if (_internal_has_second()) {
    // required uint32 second = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_second());
  }

  return total_size;
}
size_t ParaDataAttributeTable_ParaDataAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ParaDataAttributeTable.ParaDataAttribute)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 character_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character_index());

    // required uint32 first = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_first());

    // required uint32 second = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_second());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParaDataAttributeTable_ParaDataAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParaDataAttributeTable_ParaDataAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParaDataAttributeTable_ParaDataAttribute::GetClassData() const { return &_class_data_; }

void ParaDataAttributeTable_ParaDataAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ParaDataAttributeTable_ParaDataAttribute *>(to)->MergeFrom(
      static_cast<const ParaDataAttributeTable_ParaDataAttribute &>(from));
}


void ParaDataAttributeTable_ParaDataAttribute::MergeFrom(const ParaDataAttributeTable_ParaDataAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ParaDataAttributeTable.ParaDataAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      character_index_ = from.character_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      first_ = from.first_;
    }
    if (cached_has_bits & 0x00000004u) {
      second_ = from.second_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParaDataAttributeTable_ParaDataAttribute::CopyFrom(const ParaDataAttributeTable_ParaDataAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ParaDataAttributeTable.ParaDataAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaDataAttributeTable_ParaDataAttribute::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ParaDataAttributeTable_ParaDataAttribute::InternalSwap(ParaDataAttributeTable_ParaDataAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParaDataAttributeTable_ParaDataAttribute, second_)
      + sizeof(ParaDataAttributeTable_ParaDataAttribute::second_)
      - PROTOBUF_FIELD_OFFSET(ParaDataAttributeTable_ParaDataAttribute, character_index_)>(
          reinterpret_cast<char*>(&character_index_),
          reinterpret_cast<char*>(&other->character_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParaDataAttributeTable_ParaDataAttribute::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[5]);
}

// ===================================================================

class ParaDataAttributeTable::_Internal {
 public:
};

ParaDataAttributeTable::ParaDataAttributeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ParaDataAttributeTable)
}
ParaDataAttributeTable::ParaDataAttributeTable(const ParaDataAttributeTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.ParaDataAttributeTable)
}

inline void ParaDataAttributeTable::SharedCtor() {
}

ParaDataAttributeTable::~ParaDataAttributeTable() {
  // @@protoc_insertion_point(destructor:TSWP.ParaDataAttributeTable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParaDataAttributeTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParaDataAttributeTable::ArenaDtor(void* object) {
  ParaDataAttributeTable* _this = reinterpret_cast< ParaDataAttributeTable* >(object);
  (void)_this;
}
void ParaDataAttributeTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParaDataAttributeTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParaDataAttributeTable::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ParaDataAttributeTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParaDataAttributeTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSWP.ParaDataAttributeTable.ParaDataAttribute entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParaDataAttributeTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ParaDataAttributeTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSWP.ParaDataAttributeTable.ParaDataAttribute entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ParaDataAttributeTable)
  return target;
}

size_t ParaDataAttributeTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ParaDataAttributeTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.ParaDataAttributeTable.ParaDataAttribute entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParaDataAttributeTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParaDataAttributeTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParaDataAttributeTable::GetClassData() const { return &_class_data_; }

void ParaDataAttributeTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ParaDataAttributeTable *>(to)->MergeFrom(
      static_cast<const ParaDataAttributeTable &>(from));
}


void ParaDataAttributeTable::MergeFrom(const ParaDataAttributeTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ParaDataAttributeTable)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParaDataAttributeTable::CopyFrom(const ParaDataAttributeTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ParaDataAttributeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaDataAttributeTable::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  return true;
}

void ParaDataAttributeTable::InternalSwap(ParaDataAttributeTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParaDataAttributeTable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[6]);
}

// ===================================================================

class OverlappingFieldAttributeTable_OverlappingFieldAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<OverlappingFieldAttributeTable_OverlappingFieldAttribute>()._has_bits_);
  static const ::TSP::Range& range(const OverlappingFieldAttributeTable_OverlappingFieldAttribute* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& field(const OverlappingFieldAttributeTable_OverlappingFieldAttribute* msg);
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Range&
OverlappingFieldAttributeTable_OverlappingFieldAttribute::_Internal::range(const OverlappingFieldAttributeTable_OverlappingFieldAttribute* msg) {
  return *msg->range_;
}
const ::TSP::Reference&
OverlappingFieldAttributeTable_OverlappingFieldAttribute::_Internal::field(const OverlappingFieldAttributeTable_OverlappingFieldAttribute* msg) {
  return *msg->field_;
}
void OverlappingFieldAttributeTable_OverlappingFieldAttribute::clear_range() {
  if (range_ != nullptr) range_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void OverlappingFieldAttributeTable_OverlappingFieldAttribute::clear_field() {
  if (field_ != nullptr) field_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
OverlappingFieldAttributeTable_OverlappingFieldAttribute::OverlappingFieldAttributeTable_OverlappingFieldAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute)
}
OverlappingFieldAttributeTable_OverlappingFieldAttribute::OverlappingFieldAttributeTable_OverlappingFieldAttribute(const OverlappingFieldAttributeTable_OverlappingFieldAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range()) {
    range_ = new ::TSP::Range(*from.range_);
  } else {
    range_ = nullptr;
  }
  if (from._internal_has_field()) {
    field_ = new ::TSP::Reference(*from.field_);
  } else {
    field_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute)
}

inline void OverlappingFieldAttributeTable_OverlappingFieldAttribute::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&field_) -
    reinterpret_cast<char*>(&range_)) + sizeof(field_));
}

OverlappingFieldAttributeTable_OverlappingFieldAttribute::~OverlappingFieldAttributeTable_OverlappingFieldAttribute() {
  // @@protoc_insertion_point(destructor:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OverlappingFieldAttributeTable_OverlappingFieldAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete range_;
  if (this != internal_default_instance()) delete field_;
}

void OverlappingFieldAttributeTable_OverlappingFieldAttribute::ArenaDtor(void* object) {
  OverlappingFieldAttributeTable_OverlappingFieldAttribute* _this = reinterpret_cast< OverlappingFieldAttributeTable_OverlappingFieldAttribute* >(object);
  (void)_this;
}
void OverlappingFieldAttributeTable_OverlappingFieldAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OverlappingFieldAttributeTable_OverlappingFieldAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OverlappingFieldAttributeTable_OverlappingFieldAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(range_ != nullptr);
      range_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(field_ != nullptr);
      field_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OverlappingFieldAttributeTable_OverlappingFieldAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Range range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_field(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OverlappingFieldAttributeTable_OverlappingFieldAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Range range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::range(this), target, stream);
  }

  // required .TSP.Reference field = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::field(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute)
  return target;
}

size_t OverlappingFieldAttributeTable_OverlappingFieldAttribute::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute)
  size_t total_size = 0;

  if (_internal_has_range()) {
    // required .TSP.Range range = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  if (_internal_has_field()) {
    // required .TSP.Reference field = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *field_);
  }

  return total_size;
}
size_t OverlappingFieldAttributeTable_OverlappingFieldAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Range range = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);

    // required .TSP.Reference field = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *field_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OverlappingFieldAttributeTable_OverlappingFieldAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OverlappingFieldAttributeTable_OverlappingFieldAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OverlappingFieldAttributeTable_OverlappingFieldAttribute::GetClassData() const { return &_class_data_; }

void OverlappingFieldAttributeTable_OverlappingFieldAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OverlappingFieldAttributeTable_OverlappingFieldAttribute *>(to)->MergeFrom(
      static_cast<const OverlappingFieldAttributeTable_OverlappingFieldAttribute &>(from));
}


void OverlappingFieldAttributeTable_OverlappingFieldAttribute::MergeFrom(const OverlappingFieldAttributeTable_OverlappingFieldAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_range()->::TSP::Range::MergeFrom(from._internal_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_field()->::TSP::Reference::MergeFrom(from._internal_field());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OverlappingFieldAttributeTable_OverlappingFieldAttribute::CopyFrom(const OverlappingFieldAttributeTable_OverlappingFieldAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverlappingFieldAttributeTable_OverlappingFieldAttribute::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_range()) {
    if (!range_->IsInitialized()) return false;
  }
  if (_internal_has_field()) {
    if (!field_->IsInitialized()) return false;
  }
  return true;
}

void OverlappingFieldAttributeTable_OverlappingFieldAttribute::InternalSwap(OverlappingFieldAttributeTable_OverlappingFieldAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OverlappingFieldAttributeTable_OverlappingFieldAttribute, field_)
      + sizeof(OverlappingFieldAttributeTable_OverlappingFieldAttribute::field_)
      - PROTOBUF_FIELD_OFFSET(OverlappingFieldAttributeTable_OverlappingFieldAttribute, range_)>(
          reinterpret_cast<char*>(&range_),
          reinterpret_cast<char*>(&other->range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OverlappingFieldAttributeTable_OverlappingFieldAttribute::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[7]);
}

// ===================================================================

class OverlappingFieldAttributeTable::_Internal {
 public:
};

OverlappingFieldAttributeTable::OverlappingFieldAttributeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.OverlappingFieldAttributeTable)
}
OverlappingFieldAttributeTable::OverlappingFieldAttributeTable(const OverlappingFieldAttributeTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.OverlappingFieldAttributeTable)
}

inline void OverlappingFieldAttributeTable::SharedCtor() {
}

OverlappingFieldAttributeTable::~OverlappingFieldAttributeTable() {
  // @@protoc_insertion_point(destructor:TSWP.OverlappingFieldAttributeTable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OverlappingFieldAttributeTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OverlappingFieldAttributeTable::ArenaDtor(void* object) {
  OverlappingFieldAttributeTable* _this = reinterpret_cast< OverlappingFieldAttributeTable* >(object);
  (void)_this;
}
void OverlappingFieldAttributeTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OverlappingFieldAttributeTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OverlappingFieldAttributeTable::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.OverlappingFieldAttributeTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OverlappingFieldAttributeTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OverlappingFieldAttributeTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.OverlappingFieldAttributeTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.OverlappingFieldAttributeTable)
  return target;
}

size_t OverlappingFieldAttributeTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.OverlappingFieldAttributeTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OverlappingFieldAttributeTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OverlappingFieldAttributeTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OverlappingFieldAttributeTable::GetClassData() const { return &_class_data_; }

void OverlappingFieldAttributeTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OverlappingFieldAttributeTable *>(to)->MergeFrom(
      static_cast<const OverlappingFieldAttributeTable &>(from));
}


void OverlappingFieldAttributeTable::MergeFrom(const OverlappingFieldAttributeTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.OverlappingFieldAttributeTable)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OverlappingFieldAttributeTable::CopyFrom(const OverlappingFieldAttributeTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.OverlappingFieldAttributeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverlappingFieldAttributeTable::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  return true;
}

void OverlappingFieldAttributeTable::InternalSwap(OverlappingFieldAttributeTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OverlappingFieldAttributeTable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[8]);
}

// ===================================================================

class StorageArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StorageArchive>()._has_bits_);
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::TSP::Reference& style_sheet(const StorageArchive* msg);
  static void set_has_style_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_itext(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_in_document(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TSWP::ObjectAttributeTable& table_para_style(const StorageArchive* msg);
  static void set_has_table_para_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSWP::ParaDataAttributeTable& table_para_data(const StorageArchive* msg);
  static void set_has_table_para_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSWP::ObjectAttributeTable& table_list_style(const StorageArchive* msg);
  static void set_has_table_list_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSWP::ObjectAttributeTable& table_char_style(const StorageArchive* msg);
  static void set_has_table_char_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSWP::ObjectAttributeTable& table_attachment(const StorageArchive* msg);
  static void set_has_table_attachment(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSWP::ObjectAttributeTable& table_smartfield(const StorageArchive* msg);
  static void set_has_table_smartfield(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSWP::ObjectAttributeTable& table_layout_style(const StorageArchive* msg);
  static void set_has_table_layout_style(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSWP::ParaDataAttributeTable& table_para_starts(const StorageArchive* msg);
  static void set_has_table_para_starts(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSWP::ObjectAttributeTable& table_bookmark(const StorageArchive* msg);
  static void set_has_table_bookmark(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSWP::ObjectAttributeTable& table_footnote(const StorageArchive* msg);
  static void set_has_table_footnote(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSWP::ObjectAttributeTable& table_section(const StorageArchive* msg);
  static void set_has_table_section(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSWP::ObjectAttributeTable& table_rubyfield(const StorageArchive* msg);
  static void set_has_table_rubyfield(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSWP::StringAttributeTable& table_language(const StorageArchive* msg);
  static void set_has_table_language(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSWP::StringAttributeTable& table_dictation(const StorageArchive* msg);
  static void set_has_table_dictation(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSWP::ObjectAttributeTable& table_insertion(const StorageArchive* msg);
  static void set_has_table_insertion(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSWP::ObjectAttributeTable& table_deletion(const StorageArchive* msg);
  static void set_has_table_deletion(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSWP::ObjectAttributeTable& table_highlight(const StorageArchive* msg);
  static void set_has_table_highlight(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSWP::ParaDataAttributeTable& table_para_bidi(const StorageArchive* msg);
  static void set_has_table_para_bidi(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSWP::OverlappingFieldAttributeTable& table_overlapping_highlight(const StorageArchive* msg);
  static void set_has_table_overlapping_highlight(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSWP::OverlappingFieldAttributeTable& table_pencil_annotation(const StorageArchive* msg);
  static void set_has_table_pencil_annotation(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSWP::ObjectAttributeTable& table_tatechuyoko(const StorageArchive* msg);
  static void set_has_table_tatechuyoko(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSWP::ObjectAttributeTable& table_drop_cap_style(const StorageArchive* msg);
  static void set_has_table_drop_cap_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

const ::TSP::Reference&
StorageArchive::_Internal::style_sheet(const StorageArchive* msg) {
  return *msg->style_sheet_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_para_style(const StorageArchive* msg) {
  return *msg->table_para_style_;
}
const ::TSWP::ParaDataAttributeTable&
StorageArchive::_Internal::table_para_data(const StorageArchive* msg) {
  return *msg->table_para_data_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_list_style(const StorageArchive* msg) {
  return *msg->table_list_style_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_char_style(const StorageArchive* msg) {
  return *msg->table_char_style_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_attachment(const StorageArchive* msg) {
  return *msg->table_attachment_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_smartfield(const StorageArchive* msg) {
  return *msg->table_smartfield_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_layout_style(const StorageArchive* msg) {
  return *msg->table_layout_style_;
}
const ::TSWP::ParaDataAttributeTable&
StorageArchive::_Internal::table_para_starts(const StorageArchive* msg) {
  return *msg->table_para_starts_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_bookmark(const StorageArchive* msg) {
  return *msg->table_bookmark_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_footnote(const StorageArchive* msg) {
  return *msg->table_footnote_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_section(const StorageArchive* msg) {
  return *msg->table_section_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_rubyfield(const StorageArchive* msg) {
  return *msg->table_rubyfield_;
}
const ::TSWP::StringAttributeTable&
StorageArchive::_Internal::table_language(const StorageArchive* msg) {
  return *msg->table_language_;
}
const ::TSWP::StringAttributeTable&
StorageArchive::_Internal::table_dictation(const StorageArchive* msg) {
  return *msg->table_dictation_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_insertion(const StorageArchive* msg) {
  return *msg->table_insertion_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_deletion(const StorageArchive* msg) {
  return *msg->table_deletion_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_highlight(const StorageArchive* msg) {
  return *msg->table_highlight_;
}
const ::TSWP::ParaDataAttributeTable&
StorageArchive::_Internal::table_para_bidi(const StorageArchive* msg) {
  return *msg->table_para_bidi_;
}
const ::TSWP::OverlappingFieldAttributeTable&
StorageArchive::_Internal::table_overlapping_highlight(const StorageArchive* msg) {
  return *msg->table_overlapping_highlight_;
}
const ::TSWP::OverlappingFieldAttributeTable&
StorageArchive::_Internal::table_pencil_annotation(const StorageArchive* msg) {
  return *msg->table_pencil_annotation_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_tatechuyoko(const StorageArchive* msg) {
  return *msg->table_tatechuyoko_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_drop_cap_style(const StorageArchive* msg) {
  return *msg->table_drop_cap_style_;
}
void StorageArchive::clear_style_sheet() {
  if (style_sheet_ != nullptr) style_sheet_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
StorageArchive::StorageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  text_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.StorageArchive)
}
StorageArchive::StorageArchive(const StorageArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      text_(from.text_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_style_sheet()) {
    style_sheet_ = new ::TSP::Reference(*from.style_sheet_);
  } else {
    style_sheet_ = nullptr;
  }
  if (from._internal_has_table_para_style()) {
    table_para_style_ = new ::TSWP::ObjectAttributeTable(*from.table_para_style_);
  } else {
    table_para_style_ = nullptr;
  }
  if (from._internal_has_table_para_data()) {
    table_para_data_ = new ::TSWP::ParaDataAttributeTable(*from.table_para_data_);
  } else {
    table_para_data_ = nullptr;
  }
  if (from._internal_has_table_list_style()) {
    table_list_style_ = new ::TSWP::ObjectAttributeTable(*from.table_list_style_);
  } else {
    table_list_style_ = nullptr;
  }
  if (from._internal_has_table_char_style()) {
    table_char_style_ = new ::TSWP::ObjectAttributeTable(*from.table_char_style_);
  } else {
    table_char_style_ = nullptr;
  }
  if (from._internal_has_table_attachment()) {
    table_attachment_ = new ::TSWP::ObjectAttributeTable(*from.table_attachment_);
  } else {
    table_attachment_ = nullptr;
  }
  if (from._internal_has_table_smartfield()) {
    table_smartfield_ = new ::TSWP::ObjectAttributeTable(*from.table_smartfield_);
  } else {
    table_smartfield_ = nullptr;
  }
  if (from._internal_has_table_layout_style()) {
    table_layout_style_ = new ::TSWP::ObjectAttributeTable(*from.table_layout_style_);
  } else {
    table_layout_style_ = nullptr;
  }
  if (from._internal_has_table_para_starts()) {
    table_para_starts_ = new ::TSWP::ParaDataAttributeTable(*from.table_para_starts_);
  } else {
    table_para_starts_ = nullptr;
  }
  if (from._internal_has_table_bookmark()) {
    table_bookmark_ = new ::TSWP::ObjectAttributeTable(*from.table_bookmark_);
  } else {
    table_bookmark_ = nullptr;
  }
  if (from._internal_has_table_footnote()) {
    table_footnote_ = new ::TSWP::ObjectAttributeTable(*from.table_footnote_);
  } else {
    table_footnote_ = nullptr;
  }
  if (from._internal_has_table_section()) {
    table_section_ = new ::TSWP::ObjectAttributeTable(*from.table_section_);
  } else {
    table_section_ = nullptr;
  }
  if (from._internal_has_table_rubyfield()) {
    table_rubyfield_ = new ::TSWP::ObjectAttributeTable(*from.table_rubyfield_);
  } else {
    table_rubyfield_ = nullptr;
  }
  if (from._internal_has_table_language()) {
    table_language_ = new ::TSWP::StringAttributeTable(*from.table_language_);
  } else {
    table_language_ = nullptr;
  }
  if (from._internal_has_table_dictation()) {
    table_dictation_ = new ::TSWP::StringAttributeTable(*from.table_dictation_);
  } else {
    table_dictation_ = nullptr;
  }
  if (from._internal_has_table_insertion()) {
    table_insertion_ = new ::TSWP::ObjectAttributeTable(*from.table_insertion_);
  } else {
    table_insertion_ = nullptr;
  }
  if (from._internal_has_table_deletion()) {
    table_deletion_ = new ::TSWP::ObjectAttributeTable(*from.table_deletion_);
  } else {
    table_deletion_ = nullptr;
  }
  if (from._internal_has_table_highlight()) {
    table_highlight_ = new ::TSWP::ObjectAttributeTable(*from.table_highlight_);
  } else {
    table_highlight_ = nullptr;
  }
  if (from._internal_has_table_para_bidi()) {
    table_para_bidi_ = new ::TSWP::ParaDataAttributeTable(*from.table_para_bidi_);
  } else {
    table_para_bidi_ = nullptr;
  }
  if (from._internal_has_table_overlapping_highlight()) {
    table_overlapping_highlight_ = new ::TSWP::OverlappingFieldAttributeTable(*from.table_overlapping_highlight_);
  } else {
    table_overlapping_highlight_ = nullptr;
  }
  if (from._internal_has_table_pencil_annotation()) {
    table_pencil_annotation_ = new ::TSWP::OverlappingFieldAttributeTable(*from.table_pencil_annotation_);
  } else {
    table_pencil_annotation_ = nullptr;
  }
  if (from._internal_has_table_tatechuyoko()) {
    table_tatechuyoko_ = new ::TSWP::ObjectAttributeTable(*from.table_tatechuyoko_);
  } else {
    table_tatechuyoko_ = nullptr;
  }
  if (from._internal_has_table_drop_cap_style()) {
    table_drop_cap_style_ = new ::TSWP::ObjectAttributeTable(*from.table_drop_cap_style_);
  } else {
    table_drop_cap_style_ = nullptr;
  }
  ::memcpy(&has_itext_, &from.has_itext_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&has_itext_)) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:TSWP.StorageArchive)
}

inline void StorageArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&style_sheet_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&in_document_) -
    reinterpret_cast<char*>(&style_sheet_)) + sizeof(in_document_));
kind_ = 3;
}

StorageArchive::~StorageArchive() {
  // @@protoc_insertion_point(destructor:TSWP.StorageArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StorageArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete style_sheet_;
  if (this != internal_default_instance()) delete table_para_style_;
  if (this != internal_default_instance()) delete table_para_data_;
  if (this != internal_default_instance()) delete table_list_style_;
  if (this != internal_default_instance()) delete table_char_style_;
  if (this != internal_default_instance()) delete table_attachment_;
  if (this != internal_default_instance()) delete table_smartfield_;
  if (this != internal_default_instance()) delete table_layout_style_;
  if (this != internal_default_instance()) delete table_para_starts_;
  if (this != internal_default_instance()) delete table_bookmark_;
  if (this != internal_default_instance()) delete table_footnote_;
  if (this != internal_default_instance()) delete table_section_;
  if (this != internal_default_instance()) delete table_rubyfield_;
  if (this != internal_default_instance()) delete table_language_;
  if (this != internal_default_instance()) delete table_dictation_;
  if (this != internal_default_instance()) delete table_insertion_;
  if (this != internal_default_instance()) delete table_deletion_;
  if (this != internal_default_instance()) delete table_highlight_;
  if (this != internal_default_instance()) delete table_para_bidi_;
  if (this != internal_default_instance()) delete table_overlapping_highlight_;
  if (this != internal_default_instance()) delete table_pencil_annotation_;
  if (this != internal_default_instance()) delete table_tatechuyoko_;
  if (this != internal_default_instance()) delete table_drop_cap_style_;
}

void StorageArchive::ArenaDtor(void* object) {
  StorageArchive* _this = reinterpret_cast< StorageArchive* >(object);
  (void)_this;
}
void StorageArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StorageArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StorageArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.StorageArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(style_sheet_ != nullptr);
      style_sheet_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(table_para_style_ != nullptr);
      table_para_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(table_para_data_ != nullptr);
      table_para_data_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(table_list_style_ != nullptr);
      table_list_style_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(table_char_style_ != nullptr);
      table_char_style_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(table_attachment_ != nullptr);
      table_attachment_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(table_smartfield_ != nullptr);
      table_smartfield_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(table_layout_style_ != nullptr);
      table_layout_style_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(table_para_starts_ != nullptr);
      table_para_starts_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(table_bookmark_ != nullptr);
      table_bookmark_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(table_footnote_ != nullptr);
      table_footnote_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(table_section_ != nullptr);
      table_section_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(table_rubyfield_ != nullptr);
      table_rubyfield_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(table_language_ != nullptr);
      table_language_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(table_dictation_ != nullptr);
      table_dictation_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(table_insertion_ != nullptr);
      table_insertion_->Clear();
    }
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(table_deletion_ != nullptr);
      table_deletion_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(table_highlight_ != nullptr);
      table_highlight_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(table_para_bidi_ != nullptr);
      table_para_bidi_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(table_overlapping_highlight_ != nullptr);
      table_overlapping_highlight_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(table_pencil_annotation_ != nullptr);
      table_pencil_annotation_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(table_tatechuyoko_ != nullptr);
      table_tatechuyoko_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(table_drop_cap_style_ != nullptr);
      table_drop_cap_style_->Clear();
    }
  }
  has_itext_ = false;
  if (cached_has_bits & 0x03000000u) {
    in_document_ = false;
    kind_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StorageArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.StorageArchive.KindType kind = 1 [default = TEXTBOX];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::StorageArchive_KindType_IsValid(val))) {
            _internal_set_kind(static_cast<::TSWP::StorageArchive_KindType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference style_sheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_style_sheet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_text();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.StorageArchive.text");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool has_itext = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_has_itext(&has_bits);
          has_itext_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_para_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_para_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ParaDataAttributeTable table_para_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_para_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_list_style = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_list_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_char_style = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_char_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_attachment = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_attachment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool in_document = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_in_document(&has_bits);
          in_document_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_smartfield = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_smartfield(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_layout_style = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_layout_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ParaDataAttributeTable table_para_starts = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_para_starts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_bookmark = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_bookmark(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_footnote = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_footnote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_section = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_section(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_rubyfield = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_rubyfield(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.StringAttributeTable table_language = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_language(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.StringAttributeTable table_dictation = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_dictation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_insertion = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_insertion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_deletion = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_deletion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_highlight = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_highlight(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ParaDataAttributeTable table_para_bidi = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_para_bidi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.OverlappingFieldAttributeTable table_overlapping_highlight = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_overlapping_highlight(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.OverlappingFieldAttributeTable table_pencil_annotation = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_pencil_annotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_tatechuyoko = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_tatechuyoko(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_drop_cap_style = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_drop_cap_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StorageArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.StorageArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.StorageArchive.KindType kind = 1 [default = TEXTBOX];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // optional .TSP.Reference style_sheet = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::style_sheet(this), target, stream);
  }

  // repeated string text = 3;
  for (int i = 0, n = this->_internal_text_size(); i < n; i++) {
    const auto& s = this->_internal_text(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.StorageArchive.text");
    target = stream->WriteString(3, s, target);
  }

  // optional bool has_itext = 4 [default = false];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_has_itext(), target);
  }

  // optional .TSWP.ObjectAttributeTable table_para_style = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::table_para_style(this), target, stream);
  }

  // optional .TSWP.ParaDataAttributeTable table_para_data = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::table_para_data(this), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_list_style = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::table_list_style(this), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_char_style = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::table_char_style(this), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_attachment = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::table_attachment(this), target, stream);
  }

  // optional bool in_document = 10 [default = false];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_in_document(), target);
  }

  // optional .TSWP.ObjectAttributeTable table_smartfield = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::table_smartfield(this), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_layout_style = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::table_layout_style(this), target, stream);
  }

  // optional .TSWP.ParaDataAttributeTable table_para_starts = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::table_para_starts(this), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_bookmark = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::table_bookmark(this), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_footnote = 16;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::table_footnote(this), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_section = 17;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::table_section(this), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_rubyfield = 18;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::table_rubyfield(this), target, stream);
  }

  // optional .TSWP.StringAttributeTable table_language = 19;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::table_language(this), target, stream);
  }

  // optional .TSWP.StringAttributeTable table_dictation = 20;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::table_dictation(this), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_insertion = 21;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::table_insertion(this), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_deletion = 22;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::table_deletion(this), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_highlight = 23;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::table_highlight(this), target, stream);
  }

  // optional .TSWP.ParaDataAttributeTable table_para_bidi = 24;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::table_para_bidi(this), target, stream);
  }

  // optional .TSWP.OverlappingFieldAttributeTable table_overlapping_highlight = 25;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::table_overlapping_highlight(this), target, stream);
  }

  // optional .TSWP.OverlappingFieldAttributeTable table_pencil_annotation = 26;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::table_pencil_annotation(this), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_tatechuyoko = 27;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::table_tatechuyoko(this), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_drop_cap_style = 28;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::table_drop_cap_style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.StorageArchive)
  return target;
}

size_t StorageArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.StorageArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string text = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(text_.size());
  for (int i = 0, n = text_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      text_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Reference style_sheet = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *style_sheet_);
    }

    // optional .TSWP.ObjectAttributeTable table_para_style = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_para_style_);
    }

    // optional .TSWP.ParaDataAttributeTable table_para_data = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_para_data_);
    }

    // optional .TSWP.ObjectAttributeTable table_list_style = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_list_style_);
    }

    // optional .TSWP.ObjectAttributeTable table_char_style = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_char_style_);
    }

    // optional .TSWP.ObjectAttributeTable table_attachment = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_attachment_);
    }

    // optional .TSWP.ObjectAttributeTable table_smartfield = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_smartfield_);
    }

    // optional .TSWP.ObjectAttributeTable table_layout_style = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_layout_style_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSWP.ParaDataAttributeTable table_para_starts = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_para_starts_);
    }

    // optional .TSWP.ObjectAttributeTable table_bookmark = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_bookmark_);
    }

    // optional .TSWP.ObjectAttributeTable table_footnote = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_footnote_);
    }

    // optional .TSWP.ObjectAttributeTable table_section = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_section_);
    }

    // optional .TSWP.ObjectAttributeTable table_rubyfield = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_rubyfield_);
    }

    // optional .TSWP.StringAttributeTable table_language = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_language_);
    }

    // optional .TSWP.StringAttributeTable table_dictation = 20;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_dictation_);
    }

    // optional .TSWP.ObjectAttributeTable table_insertion = 21;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_insertion_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSWP.ObjectAttributeTable table_deletion = 22;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_deletion_);
    }

    // optional .TSWP.ObjectAttributeTable table_highlight = 23;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_highlight_);
    }

    // optional .TSWP.ParaDataAttributeTable table_para_bidi = 24;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_para_bidi_);
    }

    // optional .TSWP.OverlappingFieldAttributeTable table_overlapping_highlight = 25;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_overlapping_highlight_);
    }

    // optional .TSWP.OverlappingFieldAttributeTable table_pencil_annotation = 26;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_pencil_annotation_);
    }

    // optional .TSWP.ObjectAttributeTable table_tatechuyoko = 27;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_tatechuyoko_);
    }

    // optional .TSWP.ObjectAttributeTable table_drop_cap_style = 28;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_drop_cap_style_);
    }

    // optional bool has_itext = 4 [default = false];
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional bool in_document = 10 [default = false];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 1;
    }

    // optional .TSWP.StorageArchive.KindType kind = 1 [default = TEXTBOX];
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StorageArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StorageArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StorageArchive::GetClassData() const { return &_class_data_; }

void StorageArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StorageArchive *>(to)->MergeFrom(
      static_cast<const StorageArchive &>(from));
}


void StorageArchive::MergeFrom(const StorageArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.StorageArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  text_.MergeFrom(from.text_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_style_sheet()->::TSP::Reference::MergeFrom(from._internal_style_sheet());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_table_para_style()->::TSWP::ObjectAttributeTable::MergeFrom(from._internal_table_para_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_table_para_data()->::TSWP::ParaDataAttributeTable::MergeFrom(from._internal_table_para_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_table_list_style()->::TSWP::ObjectAttributeTable::MergeFrom(from._internal_table_list_style());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_table_char_style()->::TSWP::ObjectAttributeTable::MergeFrom(from._internal_table_char_style());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_table_attachment()->::TSWP::ObjectAttributeTable::MergeFrom(from._internal_table_attachment());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_table_smartfield()->::TSWP::ObjectAttributeTable::MergeFrom(from._internal_table_smartfield());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_table_layout_style()->::TSWP::ObjectAttributeTable::MergeFrom(from._internal_table_layout_style());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_table_para_starts()->::TSWP::ParaDataAttributeTable::MergeFrom(from._internal_table_para_starts());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_table_bookmark()->::TSWP::ObjectAttributeTable::MergeFrom(from._internal_table_bookmark());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_table_footnote()->::TSWP::ObjectAttributeTable::MergeFrom(from._internal_table_footnote());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_table_section()->::TSWP::ObjectAttributeTable::MergeFrom(from._internal_table_section());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_table_rubyfield()->::TSWP::ObjectAttributeTable::MergeFrom(from._internal_table_rubyfield());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_table_language()->::TSWP::StringAttributeTable::MergeFrom(from._internal_table_language());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_table_dictation()->::TSWP::StringAttributeTable::MergeFrom(from._internal_table_dictation());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_table_insertion()->::TSWP::ObjectAttributeTable::MergeFrom(from._internal_table_insertion());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_table_deletion()->::TSWP::ObjectAttributeTable::MergeFrom(from._internal_table_deletion());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_table_highlight()->::TSWP::ObjectAttributeTable::MergeFrom(from._internal_table_highlight());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_table_para_bidi()->::TSWP::ParaDataAttributeTable::MergeFrom(from._internal_table_para_bidi());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_table_overlapping_highlight()->::TSWP::OverlappingFieldAttributeTable::MergeFrom(from._internal_table_overlapping_highlight());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_table_pencil_annotation()->::TSWP::OverlappingFieldAttributeTable::MergeFrom(from._internal_table_pencil_annotation());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_table_tatechuyoko()->::TSWP::ObjectAttributeTable::MergeFrom(from._internal_table_tatechuyoko());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_table_drop_cap_style()->::TSWP::ObjectAttributeTable::MergeFrom(from._internal_table_drop_cap_style());
    }
    if (cached_has_bits & 0x00800000u) {
      has_itext_ = from.has_itext_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      in_document_ = from.in_document_;
    }
    if (cached_has_bits & 0x02000000u) {
      kind_ = from.kind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StorageArchive::CopyFrom(const StorageArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.StorageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageArchive::IsInitialized() const {
  if (_internal_has_style_sheet()) {
    if (!style_sheet_->IsInitialized()) return false;
  }
  if (_internal_has_table_para_style()) {
    if (!table_para_style_->IsInitialized()) return false;
  }
  if (_internal_has_table_para_data()) {
    if (!table_para_data_->IsInitialized()) return false;
  }
  if (_internal_has_table_list_style()) {
    if (!table_list_style_->IsInitialized()) return false;
  }
  if (_internal_has_table_char_style()) {
    if (!table_char_style_->IsInitialized()) return false;
  }
  if (_internal_has_table_attachment()) {
    if (!table_attachment_->IsInitialized()) return false;
  }
  if (_internal_has_table_smartfield()) {
    if (!table_smartfield_->IsInitialized()) return false;
  }
  if (_internal_has_table_layout_style()) {
    if (!table_layout_style_->IsInitialized()) return false;
  }
  if (_internal_has_table_para_starts()) {
    if (!table_para_starts_->IsInitialized()) return false;
  }
  if (_internal_has_table_bookmark()) {
    if (!table_bookmark_->IsInitialized()) return false;
  }
  if (_internal_has_table_footnote()) {
    if (!table_footnote_->IsInitialized()) return false;
  }
  if (_internal_has_table_section()) {
    if (!table_section_->IsInitialized()) return false;
  }
  if (_internal_has_table_rubyfield()) {
    if (!table_rubyfield_->IsInitialized()) return false;
  }
  if (_internal_has_table_language()) {
    if (!table_language_->IsInitialized()) return false;
  }
  if (_internal_has_table_dictation()) {
    if (!table_dictation_->IsInitialized()) return false;
  }
  if (_internal_has_table_insertion()) {
    if (!table_insertion_->IsInitialized()) return false;
  }
  if (_internal_has_table_deletion()) {
    if (!table_deletion_->IsInitialized()) return false;
  }
  if (_internal_has_table_highlight()) {
    if (!table_highlight_->IsInitialized()) return false;
  }
  if (_internal_has_table_para_bidi()) {
    if (!table_para_bidi_->IsInitialized()) return false;
  }
  if (_internal_has_table_overlapping_highlight()) {
    if (!table_overlapping_highlight_->IsInitialized()) return false;
  }
  if (_internal_has_table_pencil_annotation()) {
    if (!table_pencil_annotation_->IsInitialized()) return false;
  }
  if (_internal_has_table_tatechuyoko()) {
    if (!table_tatechuyoko_->IsInitialized()) return false;
  }
  if (_internal_has_table_drop_cap_style()) {
    if (!table_drop_cap_style_->IsInitialized()) return false;
  }
  return true;
}

void StorageArchive::InternalSwap(StorageArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.InternalSwap(&other->text_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StorageArchive, in_document_)
      + sizeof(StorageArchive::in_document_)
      - PROTOBUF_FIELD_OFFSET(StorageArchive, style_sheet_)>(
          reinterpret_cast<char*>(&style_sheet_),
          reinterpret_cast<char*>(&other->style_sheet_));
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[9]);
}

// ===================================================================

class HighlightArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HighlightArchive>()._has_bits_);
  static const ::TSP::Reference& commentstorage(const HighlightArchive* msg);
  static void set_has_commentstorage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text_attribute_uuid_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
HighlightArchive::_Internal::commentstorage(const HighlightArchive* msg) {
  return *msg->commentstorage_;
}
void HighlightArchive::clear_commentstorage() {
  if (commentstorage_ != nullptr) commentstorage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
HighlightArchive::HighlightArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.HighlightArchive)
}
HighlightArchive::HighlightArchive(const HighlightArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_attribute_uuid_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text_attribute_uuid_string()) {
    text_attribute_uuid_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text_attribute_uuid_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_commentstorage()) {
    commentstorage_ = new ::TSP::Reference(*from.commentstorage_);
  } else {
    commentstorage_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.HighlightArchive)
}

inline void HighlightArchive::SharedCtor() {
text_attribute_uuid_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
commentstorage_ = nullptr;
}

HighlightArchive::~HighlightArchive() {
  // @@protoc_insertion_point(destructor:TSWP.HighlightArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HighlightArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_attribute_uuid_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete commentstorage_;
}

void HighlightArchive::ArenaDtor(void* object) {
  HighlightArchive* _this = reinterpret_cast< HighlightArchive* >(object);
  (void)_this;
}
void HighlightArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HighlightArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HighlightArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.HighlightArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      text_attribute_uuid_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(commentstorage_ != nullptr);
      commentstorage_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HighlightArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference commentStorage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commentstorage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text_attribute_uuid_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text_attribute_uuid_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.HighlightArchive.text_attribute_uuid_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HighlightArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.HighlightArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference commentStorage = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commentstorage(this), target, stream);
  }

  // optional string text_attribute_uuid_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text_attribute_uuid_string().data(), static_cast<int>(this->_internal_text_attribute_uuid_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.HighlightArchive.text_attribute_uuid_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text_attribute_uuid_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.HighlightArchive)
  return target;
}

size_t HighlightArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.HighlightArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text_attribute_uuid_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text_attribute_uuid_string());
    }

    // optional .TSP.Reference commentStorage = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commentstorage_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HighlightArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HighlightArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HighlightArchive::GetClassData() const { return &_class_data_; }

void HighlightArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HighlightArchive *>(to)->MergeFrom(
      static_cast<const HighlightArchive &>(from));
}


void HighlightArchive::MergeFrom(const HighlightArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.HighlightArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text_attribute_uuid_string(from._internal_text_attribute_uuid_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_commentstorage()->::TSP::Reference::MergeFrom(from._internal_commentstorage());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HighlightArchive::CopyFrom(const HighlightArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.HighlightArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HighlightArchive::IsInitialized() const {
  if (_internal_has_commentstorage()) {
    if (!commentstorage_->IsInitialized()) return false;
  }
  return true;
}

void HighlightArchive::InternalSwap(HighlightArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_attribute_uuid_string_, GetArenaForAllocation(),
      &other->text_attribute_uuid_string_, other->GetArenaForAllocation()
  );
  swap(commentstorage_, other->commentstorage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HighlightArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[10]);
}

// ===================================================================

class PencilAnnotationArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PencilAnnotationArchive>()._has_bits_);
  static const ::TSP::Reference& pencil_annotation_storage(const PencilAnnotationArchive* msg);
  static void set_has_pencil_annotation_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text_attribute_uuid_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
PencilAnnotationArchive::_Internal::pencil_annotation_storage(const PencilAnnotationArchive* msg) {
  return *msg->pencil_annotation_storage_;
}
void PencilAnnotationArchive::clear_pencil_annotation_storage() {
  if (pencil_annotation_storage_ != nullptr) pencil_annotation_storage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
PencilAnnotationArchive::PencilAnnotationArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.PencilAnnotationArchive)
}
PencilAnnotationArchive::PencilAnnotationArchive(const PencilAnnotationArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_attribute_uuid_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text_attribute_uuid_string()) {
    text_attribute_uuid_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text_attribute_uuid_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pencil_annotation_storage()) {
    pencil_annotation_storage_ = new ::TSP::Reference(*from.pencil_annotation_storage_);
  } else {
    pencil_annotation_storage_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.PencilAnnotationArchive)
}

inline void PencilAnnotationArchive::SharedCtor() {
text_attribute_uuid_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pencil_annotation_storage_ = nullptr;
}

PencilAnnotationArchive::~PencilAnnotationArchive() {
  // @@protoc_insertion_point(destructor:TSWP.PencilAnnotationArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PencilAnnotationArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_attribute_uuid_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pencil_annotation_storage_;
}

void PencilAnnotationArchive::ArenaDtor(void* object) {
  PencilAnnotationArchive* _this = reinterpret_cast< PencilAnnotationArchive* >(object);
  (void)_this;
}
void PencilAnnotationArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PencilAnnotationArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PencilAnnotationArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.PencilAnnotationArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      text_attribute_uuid_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pencil_annotation_storage_ != nullptr);
      pencil_annotation_storage_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PencilAnnotationArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference pencil_annotation_storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pencil_annotation_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text_attribute_uuid_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text_attribute_uuid_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.PencilAnnotationArchive.text_attribute_uuid_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PencilAnnotationArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.PencilAnnotationArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference pencil_annotation_storage = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pencil_annotation_storage(this), target, stream);
  }

  // optional string text_attribute_uuid_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text_attribute_uuid_string().data(), static_cast<int>(this->_internal_text_attribute_uuid_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.PencilAnnotationArchive.text_attribute_uuid_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text_attribute_uuid_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.PencilAnnotationArchive)
  return target;
}

size_t PencilAnnotationArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.PencilAnnotationArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text_attribute_uuid_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text_attribute_uuid_string());
    }

    // optional .TSP.Reference pencil_annotation_storage = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pencil_annotation_storage_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PencilAnnotationArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PencilAnnotationArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PencilAnnotationArchive::GetClassData() const { return &_class_data_; }

void PencilAnnotationArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PencilAnnotationArchive *>(to)->MergeFrom(
      static_cast<const PencilAnnotationArchive &>(from));
}


void PencilAnnotationArchive::MergeFrom(const PencilAnnotationArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.PencilAnnotationArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text_attribute_uuid_string(from._internal_text_attribute_uuid_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pencil_annotation_storage()->::TSP::Reference::MergeFrom(from._internal_pencil_annotation_storage());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PencilAnnotationArchive::CopyFrom(const PencilAnnotationArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.PencilAnnotationArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PencilAnnotationArchive::IsInitialized() const {
  if (_internal_has_pencil_annotation_storage()) {
    if (!pencil_annotation_storage_->IsInitialized()) return false;
  }
  return true;
}

void PencilAnnotationArchive::InternalSwap(PencilAnnotationArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_attribute_uuid_string_, GetArenaForAllocation(),
      &other->text_attribute_uuid_string_, other->GetArenaForAllocation()
  );
  swap(pencil_annotation_storage_, other->pencil_annotation_storage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PencilAnnotationArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[11]);
}

// ===================================================================

class FontFeatureArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FontFeatureArchive>()._has_bits_);
  static void set_has_feature_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_feature_selector(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FontFeatureArchive::FontFeatureArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.FontFeatureArchive)
}
FontFeatureArchive::FontFeatureArchive(const FontFeatureArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&feature_type_, &from.feature_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&feature_selector_) -
    reinterpret_cast<char*>(&feature_type_)) + sizeof(feature_selector_));
  // @@protoc_insertion_point(copy_constructor:TSWP.FontFeatureArchive)
}

inline void FontFeatureArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&feature_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&feature_selector_) -
    reinterpret_cast<char*>(&feature_type_)) + sizeof(feature_selector_));
}

FontFeatureArchive::~FontFeatureArchive() {
  // @@protoc_insertion_point(destructor:TSWP.FontFeatureArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FontFeatureArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FontFeatureArchive::ArenaDtor(void* object) {
  FontFeatureArchive* _this = reinterpret_cast< FontFeatureArchive* >(object);
  (void)_this;
}
void FontFeatureArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FontFeatureArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FontFeatureArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.FontFeatureArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&feature_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&feature_selector_) -
        reinterpret_cast<char*>(&feature_type_)) + sizeof(feature_selector_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FontFeatureArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 feature_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_feature_type(&has_bits);
          feature_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 feature_selector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_feature_selector(&has_bits);
          feature_selector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FontFeatureArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.FontFeatureArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 feature_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_feature_type(), target);
  }

  // required uint32 feature_selector = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_feature_selector(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.FontFeatureArchive)
  return target;
}

size_t FontFeatureArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.FontFeatureArchive)
  size_t total_size = 0;

  if (_internal_has_feature_type()) {
    // required uint32 feature_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_feature_type());
  }

  if (_internal_has_feature_selector()) {
    // required uint32 feature_selector = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_feature_selector());
  }

  return total_size;
}
size_t FontFeatureArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.FontFeatureArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 feature_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_feature_type());

    // required uint32 feature_selector = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_feature_selector());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FontFeatureArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FontFeatureArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FontFeatureArchive::GetClassData() const { return &_class_data_; }

void FontFeatureArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FontFeatureArchive *>(to)->MergeFrom(
      static_cast<const FontFeatureArchive &>(from));
}


void FontFeatureArchive::MergeFrom(const FontFeatureArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.FontFeatureArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      feature_type_ = from.feature_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      feature_selector_ = from.feature_selector_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FontFeatureArchive::CopyFrom(const FontFeatureArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.FontFeatureArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontFeatureArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FontFeatureArchive::InternalSwap(FontFeatureArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FontFeatureArchive, feature_selector_)
      + sizeof(FontFeatureArchive::feature_selector_)
      - PROTOBUF_FIELD_OFFSET(FontFeatureArchive, feature_type_)>(
          reinterpret_cast<char*>(&feature_type_),
          reinterpret_cast<char*>(&other->feature_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FontFeatureArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[12]);
}

// ===================================================================

class CharacterStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CharacterStylePropertiesArchive>()._has_bits_);
  static void set_has_bold(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_italic(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_font_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_font_name_null(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_font_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_font_color_null(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSP::Color& font_color(const CharacterStylePropertiesArchive* msg);
  static void set_has_font_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_language_null(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_superscript(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_underline(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_strikethru(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_capitalization(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_baseline_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_kerning(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_ligatures(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_outline_color_null(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::TSP::Color& outline_color(const CharacterStylePropertiesArchive* msg);
  static void set_has_outline_color(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_outline(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_shadow_null(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::TSD::ShadowArchive& shadow(const CharacterStylePropertiesArchive* msg);
  static void set_has_shadow(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_strikethru_color_null(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::TSP::Color& strikethru_color(const CharacterStylePropertiesArchive* msg);
  static void set_has_strikethru_color(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_strikethru_width(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_background_color_null(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::TSP::Color& background_color(const CharacterStylePropertiesArchive* msg);
  static void set_has_background_color(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tracking(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_underline_color_null(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::TSP::Color& underline_color(const CharacterStylePropertiesArchive* msg);
  static void set_has_underline_color(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_underline_width(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_word_strikethru(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_word_underline(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_font_features_null(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_writing_direction(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_emphasis_marks_null(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_emphasis_marks(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_compatibility_font_name_null(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_compatibility_font_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_named_point_size(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_capitalization_uses_linguistics(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_tate_chu_yoko(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_tsd_stroke_null(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::TSD::StrokeArchive& tsd_stroke(const CharacterStylePropertiesArchive* msg);
  static void set_has_tsd_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tsd_fill_null(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::TSD::FillArchive& tsd_fill(const CharacterStylePropertiesArchive* msg);
  static void set_has_tsd_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tsd_fill_should_fill_text_container(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
};

const ::TSP::Color&
CharacterStylePropertiesArchive::_Internal::font_color(const CharacterStylePropertiesArchive* msg) {
  return *msg->font_color_;
}
const ::TSP::Color&
CharacterStylePropertiesArchive::_Internal::outline_color(const CharacterStylePropertiesArchive* msg) {
  return *msg->outline_color_;
}
const ::TSD::ShadowArchive&
CharacterStylePropertiesArchive::_Internal::shadow(const CharacterStylePropertiesArchive* msg) {
  return *msg->shadow_;
}
const ::TSP::Color&
CharacterStylePropertiesArchive::_Internal::strikethru_color(const CharacterStylePropertiesArchive* msg) {
  return *msg->strikethru_color_;
}
const ::TSP::Color&
CharacterStylePropertiesArchive::_Internal::background_color(const CharacterStylePropertiesArchive* msg) {
  return *msg->background_color_;
}
const ::TSP::Color&
CharacterStylePropertiesArchive::_Internal::underline_color(const CharacterStylePropertiesArchive* msg) {
  return *msg->underline_color_;
}
const ::TSD::StrokeArchive&
CharacterStylePropertiesArchive::_Internal::tsd_stroke(const CharacterStylePropertiesArchive* msg) {
  return *msg->tsd_stroke_;
}
const ::TSD::FillArchive&
CharacterStylePropertiesArchive::_Internal::tsd_fill(const CharacterStylePropertiesArchive* msg) {
  return *msg->tsd_fill_;
}
void CharacterStylePropertiesArchive::clear_font_color() {
  if (font_color_ != nullptr) font_color_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CharacterStylePropertiesArchive::clear_outline_color() {
  if (outline_color_ != nullptr) outline_color_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void CharacterStylePropertiesArchive::clear_shadow() {
  if (shadow_ != nullptr) shadow_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void CharacterStylePropertiesArchive::clear_strikethru_color() {
  if (strikethru_color_ != nullptr) strikethru_color_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void CharacterStylePropertiesArchive::clear_background_color() {
  if (background_color_ != nullptr) background_color_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void CharacterStylePropertiesArchive::clear_underline_color() {
  if (underline_color_ != nullptr) underline_color_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void CharacterStylePropertiesArchive::clear_tsd_stroke() {
  if (tsd_stroke_ != nullptr) tsd_stroke_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void CharacterStylePropertiesArchive::clear_tsd_fill() {
  if (tsd_fill_ != nullptr) tsd_fill_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
CharacterStylePropertiesArchive::CharacterStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  font_features_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.CharacterStylePropertiesArchive)
}
CharacterStylePropertiesArchive::CharacterStylePropertiesArchive(const CharacterStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      font_features_(from.font_features_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  font_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_font_name()) {
    font_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_font_name(), 
      GetArenaForAllocation());
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  emphasis_marks_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_emphasis_marks()) {
    emphasis_marks_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_emphasis_marks(), 
      GetArenaForAllocation());
  }
  compatibility_font_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_compatibility_font_name()) {
    compatibility_font_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_compatibility_font_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_font_color()) {
    font_color_ = new ::TSP::Color(*from.font_color_);
  } else {
    font_color_ = nullptr;
  }
  if (from._internal_has_outline_color()) {
    outline_color_ = new ::TSP::Color(*from.outline_color_);
  } else {
    outline_color_ = nullptr;
  }
  if (from._internal_has_shadow()) {
    shadow_ = new ::TSD::ShadowArchive(*from.shadow_);
  } else {
    shadow_ = nullptr;
  }
  if (from._internal_has_strikethru_color()) {
    strikethru_color_ = new ::TSP::Color(*from.strikethru_color_);
  } else {
    strikethru_color_ = nullptr;
  }
  if (from._internal_has_background_color()) {
    background_color_ = new ::TSP::Color(*from.background_color_);
  } else {
    background_color_ = nullptr;
  }
  if (from._internal_has_underline_color()) {
    underline_color_ = new ::TSP::Color(*from.underline_color_);
  } else {
    underline_color_ = nullptr;
  }
  if (from._internal_has_tsd_stroke()) {
    tsd_stroke_ = new ::TSD::StrokeArchive(*from.tsd_stroke_);
  } else {
    tsd_stroke_ = nullptr;
  }
  if (from._internal_has_tsd_fill()) {
    tsd_fill_ = new ::TSD::FillArchive(*from.tsd_fill_);
  } else {
    tsd_fill_ = nullptr;
  }
  ::memcpy(&font_size_, &from.font_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&writing_direction_) -
    reinterpret_cast<char*>(&font_size_)) + sizeof(writing_direction_));
  // @@protoc_insertion_point(copy_constructor:TSWP.CharacterStylePropertiesArchive)
}

inline void CharacterStylePropertiesArchive::SharedCtor() {
font_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
emphasis_marks_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
compatibility_font_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&font_color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tsd_fill_should_fill_text_container_) -
    reinterpret_cast<char*>(&font_color_)) + sizeof(tsd_fill_should_fill_text_container_));
writing_direction_ = -1;
}

CharacterStylePropertiesArchive::~CharacterStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:TSWP.CharacterStylePropertiesArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CharacterStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  font_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  emphasis_marks_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  compatibility_font_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete font_color_;
  if (this != internal_default_instance()) delete outline_color_;
  if (this != internal_default_instance()) delete shadow_;
  if (this != internal_default_instance()) delete strikethru_color_;
  if (this != internal_default_instance()) delete background_color_;
  if (this != internal_default_instance()) delete underline_color_;
  if (this != internal_default_instance()) delete tsd_stroke_;
  if (this != internal_default_instance()) delete tsd_fill_;
}

void CharacterStylePropertiesArchive::ArenaDtor(void* object) {
  CharacterStylePropertiesArchive* _this = reinterpret_cast< CharacterStylePropertiesArchive* >(object);
  (void)_this;
}
void CharacterStylePropertiesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CharacterStylePropertiesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CharacterStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.CharacterStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  font_features_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      font_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      emphasis_marks_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      compatibility_font_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(font_color_ != nullptr);
      font_color_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(outline_color_ != nullptr);
      outline_color_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(shadow_ != nullptr);
      shadow_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(strikethru_color_ != nullptr);
      strikethru_color_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(background_color_ != nullptr);
      background_color_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(underline_color_ != nullptr);
      underline_color_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(tsd_stroke_ != nullptr);
      tsd_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(tsd_fill_ != nullptr);
      tsd_fill_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&font_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&font_name_null_) -
        reinterpret_cast<char*>(&font_size_)) + sizeof(font_name_null_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&font_color_null_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ligatures_) -
        reinterpret_cast<char*>(&font_color_null_)) + sizeof(ligatures_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&language_null_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&background_color_null_) -
        reinterpret_cast<char*>(&language_null_)) + sizeof(background_color_null_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&underline_color_null_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_named_point_size_) -
        reinterpret_cast<char*>(&underline_color_null_)) + sizeof(is_named_point_size_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&capitalization_uses_linguistics_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tsd_fill_should_fill_text_container_) -
        reinterpret_cast<char*>(&capitalization_uses_linguistics_)) + sizeof(tsd_fill_should_fill_text_container_));
    writing_direction_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterStylePropertiesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bold(&_has_bits_);
          bold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool italic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_italic(&_has_bits_);
          italic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float font_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_font_size(&_has_bits_);
          font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool font_name_null = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_font_name_null(&_has_bits_);
          font_name_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string font_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_font_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.CharacterStylePropertiesArchive.font_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool font_color_null = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_font_color_null(&_has_bits_);
          font_color_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color font_color = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_font_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool language_null = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_language_null(&_has_bits_);
          language_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.CharacterStylePropertiesArchive.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.CharacterStylePropertiesArchive.SuperscriptType superscript = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::CharacterStylePropertiesArchive_SuperscriptType_IsValid(val))) {
            _internal_set_superscript(static_cast<::TSWP::CharacterStylePropertiesArchive_SuperscriptType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSWP.CharacterStylePropertiesArchive.UnderlineType underline = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::CharacterStylePropertiesArchive_UnderlineType_IsValid(val))) {
            _internal_set_underline(static_cast<::TSWP::CharacterStylePropertiesArchive_UnderlineType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSWP.CharacterStylePropertiesArchive.StrikethruType strikethru = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::CharacterStylePropertiesArchive_StrikethruType_IsValid(val))) {
            _internal_set_strikethru(static_cast<::TSWP::CharacterStylePropertiesArchive_StrikethruType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSWP.CharacterStylePropertiesArchive.CapitalizationType capitalization = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::CharacterStylePropertiesArchive_CapitalizationType_IsValid(val))) {
            _internal_set_capitalization(static_cast<::TSWP::CharacterStylePropertiesArchive_CapitalizationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float baseline_shift = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_baseline_shift(&_has_bits_);
          baseline_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float kerning = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_kerning(&_has_bits_);
          kerning_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.CharacterStylePropertiesArchive.LigaturesType ligatures = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::CharacterStylePropertiesArchive_LigaturesType_IsValid(val))) {
            _internal_set_ligatures(static_cast<::TSWP::CharacterStylePropertiesArchive_LigaturesType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool outline_color_null = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_outline_color_null(&_has_bits_);
          outline_color_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color outline_color = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_outline_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float outline = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_outline(&_has_bits_);
          outline_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool shadow_null = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_shadow_null(&_has_bits_);
          shadow_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive shadow = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_shadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool strikethru_color_null = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_strikethru_color_null(&_has_bits_);
          strikethru_color_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color strikethru_color = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_strikethru_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float strikethru_width = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_strikethru_width(&_has_bits_);
          strikethru_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool background_color_null = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_background_color_null(&_has_bits_);
          background_color_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color background_color = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_background_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tracking = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_tracking(&_has_bits_);
          tracking_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool underline_color_null = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_underline_color_null(&_has_bits_);
          underline_color_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color underline_color = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_underline_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float underline_width = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_underline_width(&_has_bits_);
          underline_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool word_strikethru = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_word_strikethru(&_has_bits_);
          word_strikethru_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool word_underline = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_word_underline(&_has_bits_);
          word_underline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool font_features_null = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_font_features_null(&_has_bits_);
          font_features_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSWP.FontFeatureArchive font_features = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_font_features(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSWP.WritingDirectionType writing_direction = 35 [default = kWritingDirectionNatural];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::WritingDirectionType_IsValid(val))) {
            _internal_set_writing_direction(static_cast<::TSWP::WritingDirectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(35, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool emphasis_marks_null = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_emphasis_marks_null(&_has_bits_);
          emphasis_marks_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string emphasis_marks = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_emphasis_marks();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.CharacterStylePropertiesArchive.emphasis_marks");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool compatibility_font_name_null = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_compatibility_font_name_null(&_has_bits_);
          compatibility_font_name_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string compatibility_font_name = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_compatibility_font_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.CharacterStylePropertiesArchive.compatibility_font_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_named_point_size = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_named_point_size(&_has_bits_);
          is_named_point_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool capitalization_uses_linguistics = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_capitalization_uses_linguistics(&_has_bits_);
          capitalization_uses_linguistics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tate_chu_yoko = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tate_chu_yoko(&_has_bits_);
          tate_chu_yoko_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tsd_stroke_null = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_tsd_stroke_null(&_has_bits_);
          tsd_stroke_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tsd_stroke = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tsd_stroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tsd_fill_null = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_tsd_fill_null(&_has_bits_);
          tsd_fill_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tsd_fill = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tsd_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tsd_fill_should_fill_text_container = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_tsd_fill_should_fill_text_container(&_has_bits_);
          tsd_fill_should_fill_text_container_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CharacterStylePropertiesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.CharacterStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bold = 1;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bold(), target);
  }

  // optional bool italic = 2;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_italic(), target);
  }

  // optional float font_size = 3;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_font_size(), target);
  }

  // optional bool font_name_null = 4;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_font_name_null(), target);
  }

  // optional string font_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_font_name().data(), static_cast<int>(this->_internal_font_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CharacterStylePropertiesArchive.font_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_font_name(), target);
  }

  // optional bool font_color_null = 6;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_font_color_null(), target);
  }

  // optional .TSP.Color font_color = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::font_color(this), target, stream);
  }

  // optional bool language_null = 8;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_language_null(), target);
  }

  // optional string language = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CharacterStylePropertiesArchive.language");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_language(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive.SuperscriptType superscript = 10;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_superscript(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive.UnderlineType underline = 11;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_underline(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive.StrikethruType strikethru = 12;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_strikethru(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive.CapitalizationType capitalization = 13;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_capitalization(), target);
  }

  // optional float baseline_shift = 14;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_baseline_shift(), target);
  }

  // optional float kerning = 15;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_kerning(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive.LigaturesType ligatures = 16;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_ligatures(), target);
  }

  // optional bool outline_color_null = 17;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_outline_color_null(), target);
  }

  // optional .TSP.Color outline_color = 18;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::outline_color(this), target, stream);
  }

  // optional float outline = 19;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_outline(), target);
  }

  // optional bool shadow_null = 20;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_shadow_null(), target);
  }

  // optional .TSD.ShadowArchive shadow = 21;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::shadow(this), target, stream);
  }

  // optional bool strikethru_color_null = 22;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_strikethru_color_null(), target);
  }

  // optional .TSP.Color strikethru_color = 23;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::strikethru_color(this), target, stream);
  }

  // optional float strikethru_width = 24;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_strikethru_width(), target);
  }

  // optional bool background_color_null = 25;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_background_color_null(), target);
  }

  // optional .TSP.Color background_color = 26;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::background_color(this), target, stream);
  }

  // optional float tracking = 27;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(27, this->_internal_tracking(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool underline_color_null = 28;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_underline_color_null(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Color underline_color = 29;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::underline_color(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional float underline_width = 30;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_underline_width(), target);
  }

  // optional bool word_strikethru = 31;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_word_strikethru(), target);
  }

  // optional bool word_underline = 32;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_word_underline(), target);
  }

  // optional bool font_features_null = 33;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_font_features_null(), target);
  }

  // repeated .TSWP.FontFeatureArchive font_features = 34;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_font_features_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, this->_internal_font_features(i), target, stream);
  }

  // optional .TSWP.WritingDirectionType writing_direction = 35 [default = kWritingDirectionNatural];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      35, this->_internal_writing_direction(), target);
  }

  // optional bool emphasis_marks_null = 36;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_emphasis_marks_null(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string emphasis_marks = 37;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_emphasis_marks().data(), static_cast<int>(this->_internal_emphasis_marks().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CharacterStylePropertiesArchive.emphasis_marks");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_emphasis_marks(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool compatibility_font_name_null = 38;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(38, this->_internal_compatibility_font_name_null(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string compatibility_font_name = 39;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_compatibility_font_name().data(), static_cast<int>(this->_internal_compatibility_font_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CharacterStylePropertiesArchive.compatibility_font_name");
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_compatibility_font_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_named_point_size = 40;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_is_named_point_size(), target);
  }

  // optional bool capitalization_uses_linguistics = 41;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->_internal_capitalization_uses_linguistics(), target);
  }

  // optional bool tate_chu_yoko = 42;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(42, this->_internal_tate_chu_yoko(), target);
  }

  // optional bool tsd_stroke_null = 43;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_tsd_stroke_null(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.StrokeArchive tsd_stroke = 44;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::tsd_stroke(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool tsd_fill_null = 45;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(45, this->_internal_tsd_fill_null(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSD.FillArchive tsd_fill = 46;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        46, _Internal::tsd_fill(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool tsd_fill_should_fill_text_container = 47;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(47, this->_internal_tsd_fill_should_fill_text_container(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.CharacterStylePropertiesArchive)
  return target;
}

size_t CharacterStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.CharacterStylePropertiesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.FontFeatureArchive font_features = 34;
  total_size += 2UL * this->_internal_font_features_size();
  for (const auto& msg : this->font_features_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string font_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_font_name());
    }

    // optional string language = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional string emphasis_marks = 37;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_emphasis_marks());
    }

    // optional string compatibility_font_name = 39;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_compatibility_font_name());
    }

    // optional .TSP.Color font_color = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *font_color_);
    }

    // optional .TSP.Color outline_color = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *outline_color_);
    }

    // optional .TSD.ShadowArchive shadow = 21;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shadow_);
    }

    // optional .TSP.Color strikethru_color = 23;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *strikethru_color_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.Color background_color = 26;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_color_);
    }

    // optional .TSP.Color underline_color = 29;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *underline_color_);
    }

    // optional .TSD.StrokeArchive tsd_stroke = 44;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tsd_stroke_);
    }

    // optional .TSD.FillArchive tsd_fill = 46;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tsd_fill_);
    }

    // optional float font_size = 3;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional bool bold = 1;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool italic = 2;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool font_name_null = 4;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool font_color_null = 6;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional .TSWP.CharacterStylePropertiesArchive.SuperscriptType superscript = 10;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_superscript());
    }

    // optional .TSWP.CharacterStylePropertiesArchive.UnderlineType underline = 11;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_underline());
    }

    // optional .TSWP.CharacterStylePropertiesArchive.StrikethruType strikethru = 12;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_strikethru());
    }

    // optional .TSWP.CharacterStylePropertiesArchive.CapitalizationType capitalization = 13;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_capitalization());
    }

    // optional float baseline_shift = 14;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 4;
    }

    // optional float kerning = 15;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 4;
    }

    // optional .TSWP.CharacterStylePropertiesArchive.LigaturesType ligatures = 16;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ligatures());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool language_null = 8;
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 1;
    }

    // optional bool outline_color_null = 17;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool shadow_null = 20;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool strikethru_color_null = 22;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional float outline = 19;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional float strikethru_width = 24;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float tracking = 27;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional bool background_color_null = 25;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool underline_color_null = 28;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool word_strikethru = 31;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool word_underline = 32;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional float underline_width = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional bool font_features_null = 33;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool emphasis_marks_null = 36;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool compatibility_font_name_null = 38;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool is_named_point_size = 40;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool capitalization_uses_linguistics = 41;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool tate_chu_yoko = 42;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool tsd_stroke_null = 43;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool tsd_fill_null = 45;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool tsd_fill_should_fill_text_container = 47;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional .TSWP.WritingDirectionType writing_direction = 35 [default = kWritingDirectionNatural];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_writing_direction());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharacterStylePropertiesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CharacterStylePropertiesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharacterStylePropertiesArchive::GetClassData() const { return &_class_data_; }

void CharacterStylePropertiesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CharacterStylePropertiesArchive *>(to)->MergeFrom(
      static_cast<const CharacterStylePropertiesArchive &>(from));
}


void CharacterStylePropertiesArchive::MergeFrom(const CharacterStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.CharacterStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  font_features_.MergeFrom(from.font_features_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_font_name(from._internal_font_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_emphasis_marks(from._internal_emphasis_marks());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_compatibility_font_name(from._internal_compatibility_font_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_font_color()->::TSP::Color::MergeFrom(from._internal_font_color());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_outline_color()->::TSP::Color::MergeFrom(from._internal_outline_color());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_shadow()->::TSD::ShadowArchive::MergeFrom(from._internal_shadow());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_strikethru_color()->::TSP::Color::MergeFrom(from._internal_strikethru_color());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_background_color()->::TSP::Color::MergeFrom(from._internal_background_color());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_underline_color()->::TSP::Color::MergeFrom(from._internal_underline_color());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_tsd_stroke()->::TSD::StrokeArchive::MergeFrom(from._internal_tsd_stroke());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_tsd_fill()->::TSD::FillArchive::MergeFrom(from._internal_tsd_fill());
    }
    if (cached_has_bits & 0x00001000u) {
      font_size_ = from.font_size_;
    }
    if (cached_has_bits & 0x00002000u) {
      bold_ = from.bold_;
    }
    if (cached_has_bits & 0x00004000u) {
      italic_ = from.italic_;
    }
    if (cached_has_bits & 0x00008000u) {
      font_name_null_ = from.font_name_null_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      font_color_null_ = from.font_color_null_;
    }
    if (cached_has_bits & 0x00020000u) {
      superscript_ = from.superscript_;
    }
    if (cached_has_bits & 0x00040000u) {
      underline_ = from.underline_;
    }
    if (cached_has_bits & 0x00080000u) {
      strikethru_ = from.strikethru_;
    }
    if (cached_has_bits & 0x00100000u) {
      capitalization_ = from.capitalization_;
    }
    if (cached_has_bits & 0x00200000u) {
      baseline_shift_ = from.baseline_shift_;
    }
    if (cached_has_bits & 0x00400000u) {
      kerning_ = from.kerning_;
    }
    if (cached_has_bits & 0x00800000u) {
      ligatures_ = from.ligatures_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      language_null_ = from.language_null_;
    }
    if (cached_has_bits & 0x02000000u) {
      outline_color_null_ = from.outline_color_null_;
    }
    if (cached_has_bits & 0x04000000u) {
      shadow_null_ = from.shadow_null_;
    }
    if (cached_has_bits & 0x08000000u) {
      strikethru_color_null_ = from.strikethru_color_null_;
    }
    if (cached_has_bits & 0x10000000u) {
      outline_ = from.outline_;
    }
    if (cached_has_bits & 0x20000000u) {
      strikethru_width_ = from.strikethru_width_;
    }
    if (cached_has_bits & 0x40000000u) {
      tracking_ = from.tracking_;
    }
    if (cached_has_bits & 0x80000000u) {
      background_color_null_ = from.background_color_null_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      underline_color_null_ = from.underline_color_null_;
    }
    if (cached_has_bits & 0x00000002u) {
      word_strikethru_ = from.word_strikethru_;
    }
    if (cached_has_bits & 0x00000004u) {
      word_underline_ = from.word_underline_;
    }
    if (cached_has_bits & 0x00000008u) {
      underline_width_ = from.underline_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      font_features_null_ = from.font_features_null_;
    }
    if (cached_has_bits & 0x00000020u) {
      emphasis_marks_null_ = from.emphasis_marks_null_;
    }
    if (cached_has_bits & 0x00000040u) {
      compatibility_font_name_null_ = from.compatibility_font_name_null_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_named_point_size_ = from.is_named_point_size_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      capitalization_uses_linguistics_ = from.capitalization_uses_linguistics_;
    }
    if (cached_has_bits & 0x00000200u) {
      tate_chu_yoko_ = from.tate_chu_yoko_;
    }
    if (cached_has_bits & 0x00000400u) {
      tsd_stroke_null_ = from.tsd_stroke_null_;
    }
    if (cached_has_bits & 0x00000800u) {
      tsd_fill_null_ = from.tsd_fill_null_;
    }
    if (cached_has_bits & 0x00001000u) {
      tsd_fill_should_fill_text_container_ = from.tsd_fill_should_fill_text_container_;
    }
    if (cached_has_bits & 0x00002000u) {
      writing_direction_ = from.writing_direction_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterStylePropertiesArchive::CopyFrom(const CharacterStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.CharacterStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterStylePropertiesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(font_features_)) return false;
  if (_internal_has_font_color()) {
    if (!font_color_->IsInitialized()) return false;
  }
  if (_internal_has_outline_color()) {
    if (!outline_color_->IsInitialized()) return false;
  }
  if (_internal_has_shadow()) {
    if (!shadow_->IsInitialized()) return false;
  }
  if (_internal_has_strikethru_color()) {
    if (!strikethru_color_->IsInitialized()) return false;
  }
  if (_internal_has_background_color()) {
    if (!background_color_->IsInitialized()) return false;
  }
  if (_internal_has_underline_color()) {
    if (!underline_color_->IsInitialized()) return false;
  }
  if (_internal_has_tsd_stroke()) {
    if (!tsd_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_tsd_fill()) {
    if (!tsd_fill_->IsInitialized()) return false;
  }
  return true;
}

void CharacterStylePropertiesArchive::InternalSwap(CharacterStylePropertiesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  font_features_.InternalSwap(&other->font_features_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &font_name_, GetArenaForAllocation(),
      &other->font_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, GetArenaForAllocation(),
      &other->language_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &emphasis_marks_, GetArenaForAllocation(),
      &other->emphasis_marks_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &compatibility_font_name_, GetArenaForAllocation(),
      &other->compatibility_font_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterStylePropertiesArchive, tsd_fill_should_fill_text_container_)
      + sizeof(CharacterStylePropertiesArchive::tsd_fill_should_fill_text_container_)
      - PROTOBUF_FIELD_OFFSET(CharacterStylePropertiesArchive, font_color_)>(
          reinterpret_cast<char*>(&font_color_),
          reinterpret_cast<char*>(&other->font_color_));
  swap(writing_direction_, other->writing_direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterStylePropertiesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[13]);
}

// ===================================================================

class CharacterStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CharacterStyleArchive>()._has_bits_);
  static const ::TSS::StyleArchive& super(const CharacterStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSWP::CharacterStylePropertiesArchive& char_properties(const CharacterStyleArchive* msg);
  static void set_has_char_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
CharacterStyleArchive::_Internal::super(const CharacterStyleArchive* msg) {
  return *msg->super_;
}
const ::TSWP::CharacterStylePropertiesArchive&
CharacterStyleArchive::_Internal::char_properties(const CharacterStyleArchive* msg) {
  return *msg->char_properties_;
}
void CharacterStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CharacterStyleArchive::CharacterStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.CharacterStyleArchive)
}
CharacterStyleArchive::CharacterStyleArchive(const CharacterStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_char_properties()) {
    char_properties_ = new ::TSWP::CharacterStylePropertiesArchive(*from.char_properties_);
  } else {
    char_properties_ = nullptr;
  }
  override_count_ = from.override_count_;
  // @@protoc_insertion_point(copy_constructor:TSWP.CharacterStyleArchive)
}

inline void CharacterStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&override_count_) -
    reinterpret_cast<char*>(&super_)) + sizeof(override_count_));
}

CharacterStyleArchive::~CharacterStyleArchive() {
  // @@protoc_insertion_point(destructor:TSWP.CharacterStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CharacterStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete char_properties_;
}

void CharacterStyleArchive::ArenaDtor(void* object) {
  CharacterStyleArchive* _this = reinterpret_cast< CharacterStyleArchive* >(object);
  (void)_this;
}
void CharacterStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CharacterStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CharacterStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.CharacterStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(char_properties_ != nullptr);
      char_properties_->Clear();
    }
  }
  override_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_char_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CharacterStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.CharacterStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::char_properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.CharacterStyleArchive)
  return target;
}

size_t CharacterStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.CharacterStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *char_properties_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_override_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharacterStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CharacterStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharacterStyleArchive::GetClassData() const { return &_class_data_; }

void CharacterStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CharacterStyleArchive *>(to)->MergeFrom(
      static_cast<const CharacterStyleArchive &>(from));
}


void CharacterStyleArchive::MergeFrom(const CharacterStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.CharacterStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSS::StyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_char_properties()->::TSWP::CharacterStylePropertiesArchive::MergeFrom(from._internal_char_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      override_count_ = from.override_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterStyleArchive::CopyFrom(const CharacterStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.CharacterStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_char_properties()) {
    if (!char_properties_->IsInitialized()) return false;
  }
  return true;
}

void CharacterStyleArchive::InternalSwap(CharacterStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterStyleArchive, override_count_)
      + sizeof(CharacterStyleArchive::override_count_)
      - PROTOBUF_FIELD_OFFSET(CharacterStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[14]);
}

// ===================================================================

class TabArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TabArchive>()._has_bits_);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_leader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TabArchive::TabArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.TabArchive)
}
TabArchive::TabArchive(const TabArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leader_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_leader()) {
    leader_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_leader(), 
      GetArenaForAllocation());
  }
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&alignment_) -
    reinterpret_cast<char*>(&position_)) + sizeof(alignment_));
  // @@protoc_insertion_point(copy_constructor:TSWP.TabArchive)
}

inline void TabArchive::SharedCtor() {
leader_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&alignment_) -
    reinterpret_cast<char*>(&position_)) + sizeof(alignment_));
}

TabArchive::~TabArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TabArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TabArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  leader_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TabArchive::ArenaDtor(void* object) {
  TabArchive* _this = reinterpret_cast< TabArchive* >(object);
  (void)_this;
}
void TabArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TabArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TabArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TabArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    leader_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&alignment_) -
        reinterpret_cast<char*>(&position_)) + sizeof(alignment_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TabArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_position(&has_bits);
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.TabArchive.TabAlignmentType alignment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::TabArchive_TabAlignmentType_IsValid(val))) {
            _internal_set_alignment(static_cast<::TSWP::TabArchive_TabAlignmentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string leader = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_leader();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.TabArchive.leader");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TabArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TabArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float position = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_position(), target);
  }

  // optional .TSWP.TabArchive.TabAlignmentType alignment = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_alignment(), target);
  }

  // optional string leader = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_leader().data(), static_cast<int>(this->_internal_leader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.TabArchive.leader");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_leader(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TabArchive)
  return target;
}

size_t TabArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TabArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string leader = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_leader());
    }

    // optional float position = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional .TSWP.TabArchive.TabAlignmentType alignment = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_alignment());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TabArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TabArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TabArchive::GetClassData() const { return &_class_data_; }

void TabArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TabArchive *>(to)->MergeFrom(
      static_cast<const TabArchive &>(from));
}


void TabArchive::MergeFrom(const TabArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TabArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_leader(from._internal_leader());
    }
    if (cached_has_bits & 0x00000002u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000004u) {
      alignment_ = from.alignment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TabArchive::CopyFrom(const TabArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TabArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabArchive::IsInitialized() const {
  return true;
}

void TabArchive::InternalSwap(TabArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &leader_, GetArenaForAllocation(),
      &other->leader_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TabArchive, alignment_)
      + sizeof(TabArchive::alignment_)
      - PROTOBUF_FIELD_OFFSET(TabArchive, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TabArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[15]);
}

// ===================================================================

class TabsArchive::_Internal {
 public:
};

TabsArchive::TabsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tabs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.TabsArchive)
}
TabsArchive::TabsArchive(const TabsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tabs_(from.tabs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.TabsArchive)
}

inline void TabsArchive::SharedCtor() {
}

TabsArchive::~TabsArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TabsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TabsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TabsArchive::ArenaDtor(void* object) {
  TabsArchive* _this = reinterpret_cast< TabsArchive* >(object);
  (void)_this;
}
void TabsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TabsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TabsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TabsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tabs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TabsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSWP.TabArchive tabs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tabs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TabsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TabsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSWP.TabArchive tabs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tabs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tabs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TabsArchive)
  return target;
}

size_t TabsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TabsArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.TabArchive tabs = 1;
  total_size += 1UL * this->_internal_tabs_size();
  for (const auto& msg : this->tabs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TabsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TabsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TabsArchive::GetClassData() const { return &_class_data_; }

void TabsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TabsArchive *>(to)->MergeFrom(
      static_cast<const TabsArchive &>(from));
}


void TabsArchive::MergeFrom(const TabsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TabsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tabs_.MergeFrom(from.tabs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TabsArchive::CopyFrom(const TabsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TabsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabsArchive::IsInitialized() const {
  return true;
}

void TabsArchive::InternalSwap(TabsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tabs_.InternalSwap(&other->tabs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TabsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[16]);
}

// ===================================================================

class LineSpacingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LineSpacingArchive>()._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_baselinerule(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LineSpacingArchive::LineSpacingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.LineSpacingArchive)
}
LineSpacingArchive::LineSpacingArchive(const LineSpacingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&baselinerule_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(baselinerule_));
  // @@protoc_insertion_point(copy_constructor:TSWP.LineSpacingArchive)
}

inline void LineSpacingArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&baselinerule_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(baselinerule_));
}

LineSpacingArchive::~LineSpacingArchive() {
  // @@protoc_insertion_point(destructor:TSWP.LineSpacingArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LineSpacingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LineSpacingArchive::ArenaDtor(void* object) {
  LineSpacingArchive* _this = reinterpret_cast< LineSpacingArchive* >(object);
  (void)_this;
}
void LineSpacingArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LineSpacingArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LineSpacingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.LineSpacingArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&baselinerule_) -
        reinterpret_cast<char*>(&mode_)) + sizeof(baselinerule_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LineSpacingArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.LineSpacingArchive.LineSpacingModeType mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::LineSpacingArchive_LineSpacingModeType_IsValid(val))) {
            _internal_set_mode(static_cast<::TSWP::LineSpacingArchive_LineSpacingModeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float baselineRule = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_baselinerule(&has_bits);
          baselinerule_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LineSpacingArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.LineSpacingArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.LineSpacingArchive.LineSpacingModeType mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // optional float amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_amount(), target);
  }

  // optional float baselineRule = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_baselinerule(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.LineSpacingArchive)
  return target;
}

size_t LineSpacingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.LineSpacingArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSWP.LineSpacingArchive.LineSpacingModeType mode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
    }

    // optional float amount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float baselineRule = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LineSpacingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LineSpacingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LineSpacingArchive::GetClassData() const { return &_class_data_; }

void LineSpacingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LineSpacingArchive *>(to)->MergeFrom(
      static_cast<const LineSpacingArchive &>(from));
}


void LineSpacingArchive::MergeFrom(const LineSpacingArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.LineSpacingArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      baselinerule_ = from.baselinerule_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LineSpacingArchive::CopyFrom(const LineSpacingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.LineSpacingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineSpacingArchive::IsInitialized() const {
  return true;
}

void LineSpacingArchive::InternalSwap(LineSpacingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LineSpacingArchive, baselinerule_)
      + sizeof(LineSpacingArchive::baselinerule_)
      - PROTOBUF_FIELD_OFFSET(LineSpacingArchive, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LineSpacingArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[17]);
}

// ===================================================================

class ParagraphStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ParagraphStylePropertiesArchive>()._has_bits_);
  static void set_has_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_decimal_tab_null(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_decimal_tab(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_default_tab_stops(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fill_null(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::Color& fill(const ParagraphStylePropertiesArchive* msg);
  static void set_has_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_first_line_indent(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_hyphenate(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_keep_lines_together(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_keep_with_next(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_left_indent(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_line_spacing_null(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSWP::LineSpacingArchive& line_spacing(const ParagraphStylePropertiesArchive* msg);
  static void set_has_line_spacing(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_page_break_before(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_borders(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_rule_offset_null(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSP::Point& rule_offset(const ParagraphStylePropertiesArchive* msg);
  static void set_has_rule_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rule_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_right_indent(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_space_after(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_space_before(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tabs_null(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSWP::TabsArchive& tabs(const ParagraphStylePropertiesArchive* msg);
  static void set_has_tabs(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_widow_control(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_outline_level(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_outline_style(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_following_style_id_null(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_following_style_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stroke_null(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::TSD::StrokeArchive& stroke(const ParagraphStylePropertiesArchive* msg);
  static void set_has_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_show_in_toc(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_toc_style_id_null(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_toc_style_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_writing_direction(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_list_style_null(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::TSP::Reference& list_style(const ParagraphStylePropertiesArchive* msg);
  static void set_has_list_style(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_following_style_null(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::TSP::Reference& following_style(const ParagraphStylePropertiesArchive* msg);
  static void set_has_following_style(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_show_in_bookmarks_list(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_show_in_toc_navigator(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
};

const ::TSP::Color&
ParagraphStylePropertiesArchive::_Internal::fill(const ParagraphStylePropertiesArchive* msg) {
  return *msg->fill_;
}
const ::TSWP::LineSpacingArchive&
ParagraphStylePropertiesArchive::_Internal::line_spacing(const ParagraphStylePropertiesArchive* msg) {
  return *msg->line_spacing_;
}
const ::TSP::Point&
ParagraphStylePropertiesArchive::_Internal::rule_offset(const ParagraphStylePropertiesArchive* msg) {
  return *msg->rule_offset_;
}
const ::TSWP::TabsArchive&
ParagraphStylePropertiesArchive::_Internal::tabs(const ParagraphStylePropertiesArchive* msg) {
  return *msg->tabs_;
}
const ::TSD::StrokeArchive&
ParagraphStylePropertiesArchive::_Internal::stroke(const ParagraphStylePropertiesArchive* msg) {
  return *msg->stroke_;
}
const ::TSP::Reference&
ParagraphStylePropertiesArchive::_Internal::list_style(const ParagraphStylePropertiesArchive* msg) {
  return *msg->list_style_;
}
const ::TSP::Reference&
ParagraphStylePropertiesArchive::_Internal::following_style(const ParagraphStylePropertiesArchive* msg) {
  return *msg->following_style_;
}
void ParagraphStylePropertiesArchive::clear_fill() {
  if (fill_ != nullptr) fill_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ParagraphStylePropertiesArchive::clear_rule_offset() {
  if (rule_offset_ != nullptr) rule_offset_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ParagraphStylePropertiesArchive::clear_stroke() {
  if (stroke_ != nullptr) stroke_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ParagraphStylePropertiesArchive::clear_list_style() {
  if (list_style_ != nullptr) list_style_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ParagraphStylePropertiesArchive::clear_following_style() {
  if (following_style_ != nullptr) following_style_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
ParagraphStylePropertiesArchive::ParagraphStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ParagraphStylePropertiesArchive)
}
ParagraphStylePropertiesArchive::ParagraphStylePropertiesArchive(const ParagraphStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  decimal_tab_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_decimal_tab()) {
    decimal_tab_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_decimal_tab(), 
      GetArenaForAllocation());
  }
  following_style_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_following_style_id()) {
    following_style_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_following_style_id(), 
      GetArenaForAllocation());
  }
  toc_style_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_toc_style_id()) {
    toc_style_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_toc_style_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_fill()) {
    fill_ = new ::TSP::Color(*from.fill_);
  } else {
    fill_ = nullptr;
  }
  if (from._internal_has_line_spacing()) {
    line_spacing_ = new ::TSWP::LineSpacingArchive(*from.line_spacing_);
  } else {
    line_spacing_ = nullptr;
  }
  if (from._internal_has_rule_offset()) {
    rule_offset_ = new ::TSP::Point(*from.rule_offset_);
  } else {
    rule_offset_ = nullptr;
  }
  if (from._internal_has_tabs()) {
    tabs_ = new ::TSWP::TabsArchive(*from.tabs_);
  } else {
    tabs_ = nullptr;
  }
  if (from._internal_has_stroke()) {
    stroke_ = new ::TSD::StrokeArchive(*from.stroke_);
  } else {
    stroke_ = nullptr;
  }
  if (from._internal_has_list_style()) {
    list_style_ = new ::TSP::Reference(*from.list_style_);
  } else {
    list_style_ = nullptr;
  }
  if (from._internal_has_following_style()) {
    following_style_ = new ::TSP::Reference(*from.following_style_);
  } else {
    following_style_ = nullptr;
  }
  ::memcpy(&alignment_, &from.alignment_,
    static_cast<size_t>(reinterpret_cast<char*>(&writing_direction_) -
    reinterpret_cast<char*>(&alignment_)) + sizeof(writing_direction_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ParagraphStylePropertiesArchive)
}

inline void ParagraphStylePropertiesArchive::SharedCtor() {
decimal_tab_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
following_style_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
toc_style_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fill_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&show_in_toc_navigator_) -
    reinterpret_cast<char*>(&fill_)) + sizeof(show_in_toc_navigator_));
writing_direction_ = -1;
}

ParagraphStylePropertiesArchive::~ParagraphStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ParagraphStylePropertiesArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParagraphStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  decimal_tab_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  following_style_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  toc_style_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fill_;
  if (this != internal_default_instance()) delete line_spacing_;
  if (this != internal_default_instance()) delete rule_offset_;
  if (this != internal_default_instance()) delete tabs_;
  if (this != internal_default_instance()) delete stroke_;
  if (this != internal_default_instance()) delete list_style_;
  if (this != internal_default_instance()) delete following_style_;
}

void ParagraphStylePropertiesArchive::ArenaDtor(void* object) {
  ParagraphStylePropertiesArchive* _this = reinterpret_cast< ParagraphStylePropertiesArchive* >(object);
  (void)_this;
}
void ParagraphStylePropertiesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParagraphStylePropertiesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParagraphStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ParagraphStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      decimal_tab_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      following_style_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      toc_style_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(fill_ != nullptr);
      fill_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(line_spacing_ != nullptr);
      line_spacing_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(rule_offset_ != nullptr);
      rule_offset_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tabs_ != nullptr);
      tabs_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(stroke_ != nullptr);
      stroke_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(list_style_ != nullptr);
      list_style_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(following_style_ != nullptr);
      following_style_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&alignment_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&keep_lines_together_) -
        reinterpret_cast<char*>(&alignment_)) + sizeof(keep_lines_together_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&first_line_indent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rule_width_) -
        reinterpret_cast<char*>(&first_line_indent_)) + sizeof(rule_width_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&right_indent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stroke_null_) -
        reinterpret_cast<char*>(&right_indent_)) + sizeof(stroke_null_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&outline_style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_in_toc_navigator_) -
        reinterpret_cast<char*>(&outline_style_)) + sizeof(show_in_toc_navigator_));
    writing_direction_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParagraphStylePropertiesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.ParagraphStylePropertiesArchive.TextAlignmentType alignment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::ParagraphStylePropertiesArchive_TextAlignmentType_IsValid(val))) {
            _internal_set_alignment(static_cast<::TSWP::ParagraphStylePropertiesArchive_TextAlignmentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool decimal_tab_null = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_decimal_tab_null(&_has_bits_);
          decimal_tab_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string decimal_tab = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_decimal_tab();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.ParagraphStylePropertiesArchive.decimal_tab");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float default_tab_stops = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_default_tab_stops(&_has_bits_);
          default_tab_stops_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool fill_null = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_fill_null(&_has_bits_);
          fill_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color fill = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float first_line_indent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_first_line_indent(&_has_bits_);
          first_line_indent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool hyphenate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_hyphenate(&_has_bits_);
          hyphenate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool keep_lines_together = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_keep_lines_together(&_has_bits_);
          keep_lines_together_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool keep_with_next = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_keep_with_next(&_has_bits_);
          keep_with_next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float left_indent = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_left_indent(&_has_bits_);
          left_indent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool line_spacing_null = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_line_spacing_null(&_has_bits_);
          line_spacing_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.LineSpacingArchive line_spacing = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_line_spacing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool page_break_before = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_page_break_before(&_has_bits_);
          page_break_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ParagraphStylePropertiesArchive.ParagraphBorderType borders = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::ParagraphStylePropertiesArchive_ParagraphBorderType_IsValid(val))) {
            _internal_set_borders(static_cast<::TSWP::ParagraphStylePropertiesArchive_ParagraphBorderType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool rule_offset_null = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_rule_offset_null(&_has_bits_);
          rule_offset_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point rule_offset = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_rule_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float rule_width = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_rule_width(&_has_bits_);
          rule_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float right_indent = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_right_indent(&_has_bits_);
          right_indent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float space_after = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_space_after(&_has_bits_);
          space_after_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float space_before = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_space_before(&_has_bits_);
          space_before_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tabs_null = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_tabs_null(&_has_bits_);
          tabs_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.TabsArchive tabs = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_tabs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool widow_control = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_widow_control(&_has_bits_);
          widow_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 outline_level = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_outline_level(&_has_bits_);
          outline_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ParagraphStylePropertiesArchive.OutlineStyleType outline_style = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::ParagraphStylePropertiesArchive_OutlineStyleType_IsValid(val))) {
            _internal_set_outline_style(static_cast<::TSWP::ParagraphStylePropertiesArchive_OutlineStyleType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(28, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool following_style_id_null = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_following_style_id_null(&_has_bits_);
          following_style_id_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string following_style_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_following_style_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.ParagraphStylePropertiesArchive.following_style_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool stroke_null = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_stroke_null(&_has_bits_);
          stroke_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive stroke = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_in_toc = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_show_in_toc(&_has_bits_);
          show_in_toc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool toc_style_id_null = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_toc_style_id_null(&_has_bits_);
          toc_style_id_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string toc_style_id = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_toc_style_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.ParagraphStylePropertiesArchive.toc_style_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.WritingDirectionType writing_direction = 38 [default = kWritingDirectionNatural];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::WritingDirectionType_IsValid(val))) {
            _internal_set_writing_direction(static_cast<::TSWP::WritingDirectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(38, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool list_style_null = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_list_style_null(&_has_bits_);
          list_style_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference list_style = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool following_style_null = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_following_style_null(&_has_bits_);
          following_style_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference following_style = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_following_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_in_bookmarks_list = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_show_in_bookmarks_list(&_has_bits_);
          show_in_bookmarks_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_in_toc_navigator = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_show_in_toc_navigator(&_has_bits_);
          show_in_toc_navigator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParagraphStylePropertiesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ParagraphStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.ParagraphStylePropertiesArchive.TextAlignmentType alignment = 1;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_alignment(), target);
  }

  // optional bool decimal_tab_null = 2;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_decimal_tab_null(), target);
  }

  // optional string decimal_tab = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_decimal_tab().data(), static_cast<int>(this->_internal_decimal_tab().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.ParagraphStylePropertiesArchive.decimal_tab");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_decimal_tab(), target);
  }

  // optional float default_tab_stops = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_default_tab_stops(), target);
  }

  // optional bool fill_null = 5;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_fill_null(), target);
  }

  // optional .TSP.Color fill = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::fill(this), target, stream);
  }

  // optional float first_line_indent = 7;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_first_line_indent(), target);
  }

  // optional bool hyphenate = 8;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_hyphenate(), target);
  }

  // optional bool keep_lines_together = 9;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_keep_lines_together(), target);
  }

  // optional bool keep_with_next = 10;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_keep_with_next(), target);
  }

  // optional float left_indent = 11;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_left_indent(), target);
  }

  // optional bool line_spacing_null = 12;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_line_spacing_null(), target);
  }

  // optional .TSWP.LineSpacingArchive line_spacing = 13;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::line_spacing(this), target, stream);
  }

  // optional bool page_break_before = 14;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_page_break_before(), target);
  }

  // optional .TSWP.ParagraphStylePropertiesArchive.ParagraphBorderType borders = 15;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_borders(), target);
  }

  // optional bool rule_offset_null = 16;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_rule_offset_null(), target);
  }

  // optional .TSP.Point rule_offset = 17;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::rule_offset(this), target, stream);
  }

  // optional float rule_width = 18;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_rule_width(), target);
  }

  // optional float right_indent = 19;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_right_indent(), target);
  }

  // optional float space_after = 20;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_space_after(), target);
  }

  // optional float space_before = 21;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_space_before(), target);
  }

  // optional bool tabs_null = 24;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_tabs_null(), target);
  }

  // optional .TSWP.TabsArchive tabs = 25;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::tabs(this), target, stream);
  }

  // optional bool widow_control = 26;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_widow_control(), target);
  }

  // optional uint32 outline_level = 27;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_outline_level(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .TSWP.ParagraphStylePropertiesArchive.OutlineStyleType outline_style = 28;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      28, this->_internal_outline_style(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool following_style_id_null = 29;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_following_style_id_null(), target);
  }

  // optional string following_style_id = 30;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_following_style_id().data(), static_cast<int>(this->_internal_following_style_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.ParagraphStylePropertiesArchive.following_style_id");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_following_style_id(), target);
  }

  // optional bool stroke_null = 31;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_stroke_null(), target);
  }

  // optional .TSD.StrokeArchive stroke = 32;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::stroke(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool show_in_toc = 33;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_show_in_toc(), target);
  }

  // optional bool toc_style_id_null = 34;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_toc_style_id_null(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string toc_style_id = 35;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_toc_style_id().data(), static_cast<int>(this->_internal_toc_style_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.ParagraphStylePropertiesArchive.toc_style_id");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_toc_style_id(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .TSWP.WritingDirectionType writing_direction = 38 [default = kWritingDirectionNatural];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      38, this->_internal_writing_direction(), target);
  }

  // optional bool list_style_null = 39;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->_internal_list_style_null(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference list_style = 40;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::list_style(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool following_style_null = 41;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->_internal_following_style_null(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference following_style = 42;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::following_style(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool show_in_bookmarks_list = 43;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_show_in_bookmarks_list(), target);
  }

  // optional bool show_in_toc_navigator = 44;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(44, this->_internal_show_in_toc_navigator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ParagraphStylePropertiesArchive)
  return target;
}

size_t ParagraphStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ParagraphStylePropertiesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string decimal_tab = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_decimal_tab());
    }

    // optional string following_style_id = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_following_style_id());
    }

    // optional string toc_style_id = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_toc_style_id());
    }

    // optional .TSP.Color fill = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fill_);
    }

    // optional .TSWP.LineSpacingArchive line_spacing = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *line_spacing_);
    }

    // optional .TSP.Point rule_offset = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rule_offset_);
    }

    // optional .TSWP.TabsArchive tabs = 25;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tabs_);
    }

    // optional .TSD.StrokeArchive stroke = 32;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stroke_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.Reference list_style = 40;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *list_style_);
    }

    // optional .TSP.Reference following_style = 42;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *following_style_);
    }

    // optional .TSWP.ParagraphStylePropertiesArchive.TextAlignmentType alignment = 1;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_alignment());
    }

    // optional float default_tab_stops = 4;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional bool decimal_tab_null = 2;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool fill_null = 5;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool hyphenate = 8;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool keep_lines_together = 9;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float first_line_indent = 7;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float left_indent = 11;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional bool keep_with_next = 10;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool line_spacing_null = 12;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool page_break_before = 14;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional bool rule_offset_null = 16;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional .TSWP.ParagraphStylePropertiesArchive.ParagraphBorderType borders = 15;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_borders());
    }

    // optional float rule_width = 18;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float right_indent = 19;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float space_after = 20;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float space_before = 21;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 outline_level = 27;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_outline_level());
    }

    // optional bool tabs_null = 24;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool widow_control = 26;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool following_style_id_null = 29;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool stroke_null = 31;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSWP.ParagraphStylePropertiesArchive.OutlineStyleType outline_style = 28;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_outline_style());
    }

    // optional bool show_in_toc = 33;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool toc_style_id_null = 34;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool list_style_null = 39;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool following_style_null = 41;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool show_in_bookmarks_list = 43;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool show_in_toc_navigator = 44;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional .TSWP.WritingDirectionType writing_direction = 38 [default = kWritingDirectionNatural];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_writing_direction());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParagraphStylePropertiesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParagraphStylePropertiesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParagraphStylePropertiesArchive::GetClassData() const { return &_class_data_; }

void ParagraphStylePropertiesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ParagraphStylePropertiesArchive *>(to)->MergeFrom(
      static_cast<const ParagraphStylePropertiesArchive &>(from));
}


void ParagraphStylePropertiesArchive::MergeFrom(const ParagraphStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ParagraphStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_decimal_tab(from._internal_decimal_tab());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_following_style_id(from._internal_following_style_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_toc_style_id(from._internal_toc_style_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_fill()->::TSP::Color::MergeFrom(from._internal_fill());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_line_spacing()->::TSWP::LineSpacingArchive::MergeFrom(from._internal_line_spacing());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_rule_offset()->::TSP::Point::MergeFrom(from._internal_rule_offset());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_tabs()->::TSWP::TabsArchive::MergeFrom(from._internal_tabs());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_stroke()->::TSD::StrokeArchive::MergeFrom(from._internal_stroke());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_list_style()->::TSP::Reference::MergeFrom(from._internal_list_style());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_following_style()->::TSP::Reference::MergeFrom(from._internal_following_style());
    }
    if (cached_has_bits & 0x00000400u) {
      alignment_ = from.alignment_;
    }
    if (cached_has_bits & 0x00000800u) {
      default_tab_stops_ = from.default_tab_stops_;
    }
    if (cached_has_bits & 0x00001000u) {
      decimal_tab_null_ = from.decimal_tab_null_;
    }
    if (cached_has_bits & 0x00002000u) {
      fill_null_ = from.fill_null_;
    }
    if (cached_has_bits & 0x00004000u) {
      hyphenate_ = from.hyphenate_;
    }
    if (cached_has_bits & 0x00008000u) {
      keep_lines_together_ = from.keep_lines_together_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      first_line_indent_ = from.first_line_indent_;
    }
    if (cached_has_bits & 0x00020000u) {
      left_indent_ = from.left_indent_;
    }
    if (cached_has_bits & 0x00040000u) {
      keep_with_next_ = from.keep_with_next_;
    }
    if (cached_has_bits & 0x00080000u) {
      line_spacing_null_ = from.line_spacing_null_;
    }
    if (cached_has_bits & 0x00100000u) {
      page_break_before_ = from.page_break_before_;
    }
    if (cached_has_bits & 0x00200000u) {
      rule_offset_null_ = from.rule_offset_null_;
    }
    if (cached_has_bits & 0x00400000u) {
      borders_ = from.borders_;
    }
    if (cached_has_bits & 0x00800000u) {
      rule_width_ = from.rule_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      right_indent_ = from.right_indent_;
    }
    if (cached_has_bits & 0x02000000u) {
      space_after_ = from.space_after_;
    }
    if (cached_has_bits & 0x04000000u) {
      space_before_ = from.space_before_;
    }
    if (cached_has_bits & 0x08000000u) {
      outline_level_ = from.outline_level_;
    }
    if (cached_has_bits & 0x10000000u) {
      tabs_null_ = from.tabs_null_;
    }
    if (cached_has_bits & 0x20000000u) {
      widow_control_ = from.widow_control_;
    }
    if (cached_has_bits & 0x40000000u) {
      following_style_id_null_ = from.following_style_id_null_;
    }
    if (cached_has_bits & 0x80000000u) {
      stroke_null_ = from.stroke_null_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      outline_style_ = from.outline_style_;
    }
    if (cached_has_bits & 0x00000002u) {
      show_in_toc_ = from.show_in_toc_;
    }
    if (cached_has_bits & 0x00000004u) {
      toc_style_id_null_ = from.toc_style_id_null_;
    }
    if (cached_has_bits & 0x00000008u) {
      list_style_null_ = from.list_style_null_;
    }
    if (cached_has_bits & 0x00000010u) {
      following_style_null_ = from.following_style_null_;
    }
    if (cached_has_bits & 0x00000020u) {
      show_in_bookmarks_list_ = from.show_in_bookmarks_list_;
    }
    if (cached_has_bits & 0x00000040u) {
      show_in_toc_navigator_ = from.show_in_toc_navigator_;
    }
    if (cached_has_bits & 0x00000080u) {
      writing_direction_ = from.writing_direction_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParagraphStylePropertiesArchive::CopyFrom(const ParagraphStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ParagraphStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParagraphStylePropertiesArchive::IsInitialized() const {
  if (_internal_has_fill()) {
    if (!fill_->IsInitialized()) return false;
  }
  if (_internal_has_rule_offset()) {
    if (!rule_offset_->IsInitialized()) return false;
  }
  if (_internal_has_stroke()) {
    if (!stroke_->IsInitialized()) return false;
  }
  if (_internal_has_list_style()) {
    if (!list_style_->IsInitialized()) return false;
  }
  if (_internal_has_following_style()) {
    if (!following_style_->IsInitialized()) return false;
  }
  return true;
}

void ParagraphStylePropertiesArchive::InternalSwap(ParagraphStylePropertiesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &decimal_tab_, GetArenaForAllocation(),
      &other->decimal_tab_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &following_style_id_, GetArenaForAllocation(),
      &other->following_style_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &toc_style_id_, GetArenaForAllocation(),
      &other->toc_style_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParagraphStylePropertiesArchive, show_in_toc_navigator_)
      + sizeof(ParagraphStylePropertiesArchive::show_in_toc_navigator_)
      - PROTOBUF_FIELD_OFFSET(ParagraphStylePropertiesArchive, fill_)>(
          reinterpret_cast<char*>(&fill_),
          reinterpret_cast<char*>(&other->fill_));
  swap(writing_direction_, other->writing_direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParagraphStylePropertiesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[18]);
}

// ===================================================================

class ParagraphStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ParagraphStyleArchive>()._has_bits_);
  static const ::TSS::StyleArchive& super(const ParagraphStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSWP::CharacterStylePropertiesArchive& char_properties(const ParagraphStyleArchive* msg);
  static void set_has_char_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSWP::ParagraphStylePropertiesArchive& para_properties(const ParagraphStyleArchive* msg);
  static void set_has_para_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
ParagraphStyleArchive::_Internal::super(const ParagraphStyleArchive* msg) {
  return *msg->super_;
}
const ::TSWP::CharacterStylePropertiesArchive&
ParagraphStyleArchive::_Internal::char_properties(const ParagraphStyleArchive* msg) {
  return *msg->char_properties_;
}
const ::TSWP::ParagraphStylePropertiesArchive&
ParagraphStyleArchive::_Internal::para_properties(const ParagraphStyleArchive* msg) {
  return *msg->para_properties_;
}
void ParagraphStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ParagraphStyleArchive::ParagraphStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ParagraphStyleArchive)
}
ParagraphStyleArchive::ParagraphStyleArchive(const ParagraphStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_char_properties()) {
    char_properties_ = new ::TSWP::CharacterStylePropertiesArchive(*from.char_properties_);
  } else {
    char_properties_ = nullptr;
  }
  if (from._internal_has_para_properties()) {
    para_properties_ = new ::TSWP::ParagraphStylePropertiesArchive(*from.para_properties_);
  } else {
    para_properties_ = nullptr;
  }
  override_count_ = from.override_count_;
  // @@protoc_insertion_point(copy_constructor:TSWP.ParagraphStyleArchive)
}

inline void ParagraphStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&override_count_) -
    reinterpret_cast<char*>(&super_)) + sizeof(override_count_));
}

ParagraphStyleArchive::~ParagraphStyleArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ParagraphStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParagraphStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete char_properties_;
  if (this != internal_default_instance()) delete para_properties_;
}

void ParagraphStyleArchive::ArenaDtor(void* object) {
  ParagraphStyleArchive* _this = reinterpret_cast< ParagraphStyleArchive* >(object);
  (void)_this;
}
void ParagraphStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParagraphStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParagraphStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ParagraphStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(char_properties_ != nullptr);
      char_properties_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(para_properties_ != nullptr);
      para_properties_->Clear();
    }
  }
  override_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParagraphStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_char_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ParagraphStylePropertiesArchive para_properties = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_para_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParagraphStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ParagraphStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::char_properties(this), target, stream);
  }

  // optional .TSWP.ParagraphStylePropertiesArchive para_properties = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::para_properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ParagraphStyleArchive)
  return target;
}

size_t ParagraphStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ParagraphStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *char_properties_);
    }

    // optional .TSWP.ParagraphStylePropertiesArchive para_properties = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *para_properties_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_override_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParagraphStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParagraphStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParagraphStyleArchive::GetClassData() const { return &_class_data_; }

void ParagraphStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ParagraphStyleArchive *>(to)->MergeFrom(
      static_cast<const ParagraphStyleArchive &>(from));
}


void ParagraphStyleArchive::MergeFrom(const ParagraphStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ParagraphStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSS::StyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_char_properties()->::TSWP::CharacterStylePropertiesArchive::MergeFrom(from._internal_char_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_para_properties()->::TSWP::ParagraphStylePropertiesArchive::MergeFrom(from._internal_para_properties());
    }
    if (cached_has_bits & 0x00000008u) {
      override_count_ = from.override_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParagraphStyleArchive::CopyFrom(const ParagraphStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ParagraphStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParagraphStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_char_properties()) {
    if (!char_properties_->IsInitialized()) return false;
  }
  if (_internal_has_para_properties()) {
    if (!para_properties_->IsInitialized()) return false;
  }
  return true;
}

void ParagraphStyleArchive::InternalSwap(ParagraphStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParagraphStyleArchive, override_count_)
      + sizeof(ParagraphStyleArchive::override_count_)
      - PROTOBUF_FIELD_OFFSET(ParagraphStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParagraphStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[19]);
}

// ===================================================================

class ListStyleArchive_LabelGeometry::_Internal {
 public:
  using HasBits = decltype(std::declval<ListStyleArchive_LabelGeometry>()._has_bits_);
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_baseline_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scale_with_text(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ListStyleArchive_LabelGeometry::ListStyleArchive_LabelGeometry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ListStyleArchive.LabelGeometry)
}
ListStyleArchive_LabelGeometry::ListStyleArchive_LabelGeometry(const ListStyleArchive_LabelGeometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&baseline_offset_, &from.baseline_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_with_text_) -
    reinterpret_cast<char*>(&baseline_offset_)) + sizeof(scale_with_text_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ListStyleArchive.LabelGeometry)
}

inline void ListStyleArchive_LabelGeometry::SharedCtor() {
baseline_offset_ = 0;
scale_ = 1;
scale_with_text_ = true;
}

ListStyleArchive_LabelGeometry::~ListStyleArchive_LabelGeometry() {
  // @@protoc_insertion_point(destructor:TSWP.ListStyleArchive.LabelGeometry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListStyleArchive_LabelGeometry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListStyleArchive_LabelGeometry::ArenaDtor(void* object) {
  ListStyleArchive_LabelGeometry* _this = reinterpret_cast< ListStyleArchive_LabelGeometry* >(object);
  (void)_this;
}
void ListStyleArchive_LabelGeometry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListStyleArchive_LabelGeometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListStyleArchive_LabelGeometry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ListStyleArchive.LabelGeometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    baseline_offset_ = 0;
    scale_ = 1;
    scale_with_text_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListStyleArchive_LabelGeometry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float scale = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float baseline_offset = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_baseline_offset(&has_bits);
          baseline_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool scale_with_text = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_scale_with_text(&has_bits);
          scale_with_text_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListStyleArchive_LabelGeometry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ListStyleArchive.LabelGeometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float scale = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_scale(), target);
  }

  // optional float baseline_offset = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_baseline_offset(), target);
  }

  // optional bool scale_with_text = 3 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_scale_with_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ListStyleArchive.LabelGeometry)
  return target;
}

size_t ListStyleArchive_LabelGeometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ListStyleArchive.LabelGeometry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float baseline_offset = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float scale = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool scale_with_text = 3 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListStyleArchive_LabelGeometry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListStyleArchive_LabelGeometry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListStyleArchive_LabelGeometry::GetClassData() const { return &_class_data_; }

void ListStyleArchive_LabelGeometry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListStyleArchive_LabelGeometry *>(to)->MergeFrom(
      static_cast<const ListStyleArchive_LabelGeometry &>(from));
}


void ListStyleArchive_LabelGeometry::MergeFrom(const ListStyleArchive_LabelGeometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ListStyleArchive.LabelGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      baseline_offset_ = from.baseline_offset_;
    }
    if (cached_has_bits & 0x00000002u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      scale_with_text_ = from.scale_with_text_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListStyleArchive_LabelGeometry::CopyFrom(const ListStyleArchive_LabelGeometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ListStyleArchive.LabelGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListStyleArchive_LabelGeometry::IsInitialized() const {
  return true;
}

void ListStyleArchive_LabelGeometry::InternalSwap(ListStyleArchive_LabelGeometry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(baseline_offset_, other->baseline_offset_);
  swap(scale_, other->scale_);
  swap(scale_with_text_, other->scale_with_text_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListStyleArchive_LabelGeometry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[20]);
}

// ===================================================================

class ListStyleArchive_LabelImage::_Internal {
 public:
  using HasBits = decltype(std::declval<ListStyleArchive_LabelImage>()._has_bits_);
  static const ::TSP::DataReference& image(const ListStyleArchive_LabelImage* msg);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_image_null(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& database_image(const ListStyleArchive_LabelImage* msg);
  static void set_has_database_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::DataReference&
ListStyleArchive_LabelImage::_Internal::image(const ListStyleArchive_LabelImage* msg) {
  return *msg->image_;
}
const ::TSP::Reference&
ListStyleArchive_LabelImage::_Internal::database_image(const ListStyleArchive_LabelImage* msg) {
  return *msg->database_image_;
}
void ListStyleArchive_LabelImage::clear_image() {
  if (image_ != nullptr) image_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ListStyleArchive_LabelImage::clear_database_image() {
  if (database_image_ != nullptr) database_image_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ListStyleArchive_LabelImage::ListStyleArchive_LabelImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ListStyleArchive.LabelImage)
}
ListStyleArchive_LabelImage::ListStyleArchive_LabelImage(const ListStyleArchive_LabelImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_database_image()) {
    database_image_ = new ::TSP::Reference(*from.database_image_);
  } else {
    database_image_ = nullptr;
  }
  if (from._internal_has_image()) {
    image_ = new ::TSP::DataReference(*from.image_);
  } else {
    image_ = nullptr;
  }
  image_null_ = from.image_null_;
  // @@protoc_insertion_point(copy_constructor:TSWP.ListStyleArchive.LabelImage)
}

inline void ListStyleArchive_LabelImage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&database_image_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&image_null_) -
    reinterpret_cast<char*>(&database_image_)) + sizeof(image_null_));
}

ListStyleArchive_LabelImage::~ListStyleArchive_LabelImage() {
  // @@protoc_insertion_point(destructor:TSWP.ListStyleArchive.LabelImage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListStyleArchive_LabelImage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete database_image_;
  if (this != internal_default_instance()) delete image_;
}

void ListStyleArchive_LabelImage::ArenaDtor(void* object) {
  ListStyleArchive_LabelImage* _this = reinterpret_cast< ListStyleArchive_LabelImage* >(object);
  (void)_this;
}
void ListStyleArchive_LabelImage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListStyleArchive_LabelImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListStyleArchive_LabelImage::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ListStyleArchive.LabelImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(database_image_ != nullptr);
      database_image_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(image_ != nullptr);
      image_->Clear();
    }
  }
  image_null_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListStyleArchive_LabelImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference database_image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool image_null = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_image_null(&has_bits);
          image_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListStyleArchive_LabelImage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ListStyleArchive.LabelImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference database_image = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::database_image(this), target, stream);
  }

  // optional bool image_null = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_image_null(), target);
  }

  // optional .TSP.DataReference image = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::image(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ListStyleArchive.LabelImage)
  return target;
}

size_t ListStyleArchive_LabelImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ListStyleArchive.LabelImage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference database_image = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_image_);
    }

    // optional .TSP.DataReference image = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_);
    }

    // optional bool image_null = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListStyleArchive_LabelImage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListStyleArchive_LabelImage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListStyleArchive_LabelImage::GetClassData() const { return &_class_data_; }

void ListStyleArchive_LabelImage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListStyleArchive_LabelImage *>(to)->MergeFrom(
      static_cast<const ListStyleArchive_LabelImage &>(from));
}


void ListStyleArchive_LabelImage::MergeFrom(const ListStyleArchive_LabelImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ListStyleArchive.LabelImage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_database_image()->::TSP::Reference::MergeFrom(from._internal_database_image());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_image()->::TSP::DataReference::MergeFrom(from._internal_image());
    }
    if (cached_has_bits & 0x00000004u) {
      image_null_ = from.image_null_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListStyleArchive_LabelImage::CopyFrom(const ListStyleArchive_LabelImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ListStyleArchive.LabelImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListStyleArchive_LabelImage::IsInitialized() const {
  if (_internal_has_database_image()) {
    if (!database_image_->IsInitialized()) return false;
  }
  if (_internal_has_image()) {
    if (!image_->IsInitialized()) return false;
  }
  return true;
}

void ListStyleArchive_LabelImage::InternalSwap(ListStyleArchive_LabelImage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListStyleArchive_LabelImage, image_null_)
      + sizeof(ListStyleArchive_LabelImage::image_null_)
      - PROTOBUF_FIELD_OFFSET(ListStyleArchive_LabelImage, database_image_)>(
          reinterpret_cast<char*>(&database_image_),
          reinterpret_cast<char*>(&other->database_image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListStyleArchive_LabelImage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[21]);
}

// ===================================================================

class ListStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ListStyleArchive>()._has_bits_);
  static const ::TSS::StyleArchive& super(const ListStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_shadow_null(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::ShadowArchive& shadow(const ListStyleArchive* msg);
  static void set_has_shadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_font_color_null(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Color& font_color(const ListStyleArchive* msg);
  static void set_has_font_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_font_name_null(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_font_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_writing_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSS::StyleArchive&
ListStyleArchive::_Internal::super(const ListStyleArchive* msg) {
  return *msg->super_;
}
const ::TSD::ShadowArchive&
ListStyleArchive::_Internal::shadow(const ListStyleArchive* msg) {
  return *msg->shadow_;
}
const ::TSP::Color&
ListStyleArchive::_Internal::font_color(const ListStyleArchive* msg) {
  return *msg->font_color_;
}
void ListStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ListStyleArchive::clear_shadow() {
  if (shadow_ != nullptr) shadow_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ListStyleArchive::clear_font_color() {
  if (font_color_ != nullptr) font_color_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ListStyleArchive::ListStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  label_types_(arena),
  text_indents_(arena),
  indents_(arena),
  geometries_(arena),
  number_types_(arena),
  strings_(arena),
  images_(arena),
  tiered_numbers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ListStyleArchive)
}
ListStyleArchive::ListStyleArchive(const ListStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      label_types_(from.label_types_),
      text_indents_(from.text_indents_),
      indents_(from.indents_),
      geometries_(from.geometries_),
      number_types_(from.number_types_),
      strings_(from.strings_),
      images_(from.images_),
      tiered_numbers_(from.tiered_numbers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  font_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_font_name()) {
    font_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_font_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_shadow()) {
    shadow_ = new ::TSD::ShadowArchive(*from.shadow_);
  } else {
    shadow_ = nullptr;
  }
  if (from._internal_has_font_color()) {
    font_color_ = new ::TSP::Color(*from.font_color_);
  } else {
    font_color_ = nullptr;
  }
  ::memcpy(&override_count_, &from.override_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&writing_direction_) -
    reinterpret_cast<char*>(&override_count_)) + sizeof(writing_direction_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ListStyleArchive)
}

inline void ListStyleArchive::SharedCtor() {
font_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&font_name_null_) -
    reinterpret_cast<char*>(&super_)) + sizeof(font_name_null_));
writing_direction_ = -1;
}

ListStyleArchive::~ListStyleArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ListStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  font_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete shadow_;
  if (this != internal_default_instance()) delete font_color_;
}

void ListStyleArchive::ArenaDtor(void* object) {
  ListStyleArchive* _this = reinterpret_cast< ListStyleArchive* >(object);
  (void)_this;
}
void ListStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ListStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_types_.Clear();
  text_indents_.Clear();
  indents_.Clear();
  geometries_.Clear();
  number_types_.Clear();
  strings_.Clear();
  images_.Clear();
  tiered_numbers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      font_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(shadow_ != nullptr);
      shadow_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(font_color_ != nullptr);
      font_color_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&override_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&font_name_null_) -
        reinterpret_cast<char*>(&override_count_)) + sizeof(font_name_null_));
  }
  writing_direction_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSWP.ListStyleArchive.LabelType label_types = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::TSWP::ListStyleArchive_LabelType_IsValid(val))) {
              _internal_add_label_types(static_cast<::TSWP::ListStyleArchive_LabelType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_label_types(), ptr, ctx, ::TSWP::ListStyleArchive_LabelType_IsValid, &_internal_metadata_, 11);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float text_indents = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_text_indents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<101>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_text_indents(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float indents = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_indents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<109>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_indents(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSWP.ListStyleArchive.LabelGeometry geometries = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_geometries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSWP.ListStyleArchive.NumberType number_types = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::TSWP::ListStyleArchive_NumberType_IsValid(val))) {
              _internal_add_number_types(static_cast<::TSWP::ListStyleArchive_NumberType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<120>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_number_types(), ptr, ctx, ::TSWP::ListStyleArchive_NumberType_IsValid, &_internal_metadata_, 15);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string strings = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_strings();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.ListStyleArchive.strings");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSWP.ListStyleArchive.LabelImage images = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_images(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool shadow_null = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_shadow_null(&has_bits);
          shadow_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive shadow = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_shadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool font_color_null = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_font_color_null(&has_bits);
          font_color_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color font_color = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_font_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool font_name_null = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_font_name_null(&has_bits);
          font_name_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string font_name = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_font_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.ListStyleArchive.font_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.WritingDirectionType writing_direction = 24 [default = kWritingDirectionNatural];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::WritingDirectionType_IsValid(val))) {
            _internal_set_writing_direction(static_cast<::TSWP::WritingDirectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated bool tiered_numbers = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_tiered_numbers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<200>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_tiered_numbers(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ListStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // repeated .TSWP.ListStyleArchive.LabelType label_types = 11;
  for (int i = 0, n = this->_internal_label_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        11, this->_internal_label_types(i), target);
  }

  // repeated float text_indents = 12;
  for (int i = 0, n = this->_internal_text_indents_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_text_indents(i), target);
  }

  // repeated float indents = 13;
  for (int i = 0, n = this->_internal_indents_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_indents(i), target);
  }

  // repeated .TSWP.ListStyleArchive.LabelGeometry geometries = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_geometries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_geometries(i), target, stream);
  }

  // repeated .TSWP.ListStyleArchive.NumberType number_types = 15;
  for (int i = 0, n = this->_internal_number_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        15, this->_internal_number_types(i), target);
  }

  // repeated string strings = 16;
  for (int i = 0, n = this->_internal_strings_size(); i < n; i++) {
    const auto& s = this->_internal_strings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.ListStyleArchive.strings");
    target = stream->WriteString(16, s, target);
  }

  // repeated .TSWP.ListStyleArchive.LabelImage images = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_images_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_images(i), target, stream);
  }

  // optional bool shadow_null = 18;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_shadow_null(), target);
  }

  // optional .TSD.ShadowArchive shadow = 19;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::shadow(this), target, stream);
  }

  // optional bool font_color_null = 20;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_font_color_null(), target);
  }

  // optional .TSP.Color font_color = 21;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::font_color(this), target, stream);
  }

  // optional bool font_name_null = 22;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_font_name_null(), target);
  }

  // optional string font_name = 23;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_font_name().data(), static_cast<int>(this->_internal_font_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.ListStyleArchive.font_name");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_font_name(), target);
  }

  // optional .TSWP.WritingDirectionType writing_direction = 24 [default = kWritingDirectionNatural];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_writing_direction(), target);
  }

  // repeated bool tiered_numbers = 25;
  for (int i = 0, n = this->_internal_tiered_numbers_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_tiered_numbers(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ListStyleArchive)
  return target;
}

size_t ListStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ListStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.ListStyleArchive.LabelType label_types = 11;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_label_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_label_types(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated float text_indents = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_text_indents_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_text_indents_size());
    total_size += data_size;
  }

  // repeated float indents = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_indents_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_indents_size());
    total_size += data_size;
  }

  // repeated .TSWP.ListStyleArchive.LabelGeometry geometries = 14;
  total_size += 1UL * this->_internal_geometries_size();
  for (const auto& msg : this->geometries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSWP.ListStyleArchive.NumberType number_types = 15;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_number_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_number_types(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated string strings = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strings_.size());
  for (int i = 0, n = strings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      strings_.Get(i));
  }

  // repeated .TSWP.ListStyleArchive.LabelImage images = 17;
  total_size += 2UL * this->_internal_images_size();
  for (const auto& msg : this->images_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bool tiered_numbers = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_tiered_numbers_size());
    size_t data_size = 1UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tiered_numbers_size());
    total_size += data_size;
  }

  // optional string font_name = 23;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_font_name());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional .TSD.ShadowArchive shadow = 19;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shadow_);
    }

    // optional .TSP.Color font_color = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *font_color_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_override_count());
    }

    // optional bool shadow_null = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool font_color_null = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool font_name_null = 22;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  // optional .TSWP.WritingDirectionType writing_direction = 24 [default = kWritingDirectionNatural];
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_writing_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListStyleArchive::GetClassData() const { return &_class_data_; }

void ListStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListStyleArchive *>(to)->MergeFrom(
      static_cast<const ListStyleArchive &>(from));
}


void ListStyleArchive::MergeFrom(const ListStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ListStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  label_types_.MergeFrom(from.label_types_);
  text_indents_.MergeFrom(from.text_indents_);
  indents_.MergeFrom(from.indents_);
  geometries_.MergeFrom(from.geometries_);
  number_types_.MergeFrom(from.number_types_);
  strings_.MergeFrom(from.strings_);
  images_.MergeFrom(from.images_);
  tiered_numbers_.MergeFrom(from.tiered_numbers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_font_name(from._internal_font_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSS::StyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_shadow()->::TSD::ShadowArchive::MergeFrom(from._internal_shadow());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_font_color()->::TSP::Color::MergeFrom(from._internal_font_color());
    }
    if (cached_has_bits & 0x00000010u) {
      override_count_ = from.override_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      shadow_null_ = from.shadow_null_;
    }
    if (cached_has_bits & 0x00000040u) {
      font_color_null_ = from.font_color_null_;
    }
    if (cached_has_bits & 0x00000080u) {
      font_name_null_ = from.font_name_null_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_writing_direction(from._internal_writing_direction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListStyleArchive::CopyFrom(const ListStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ListStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(images_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_shadow()) {
    if (!shadow_->IsInitialized()) return false;
  }
  if (_internal_has_font_color()) {
    if (!font_color_->IsInitialized()) return false;
  }
  return true;
}

void ListStyleArchive::InternalSwap(ListStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_types_.InternalSwap(&other->label_types_);
  text_indents_.InternalSwap(&other->text_indents_);
  indents_.InternalSwap(&other->indents_);
  geometries_.InternalSwap(&other->geometries_);
  number_types_.InternalSwap(&other->number_types_);
  strings_.InternalSwap(&other->strings_);
  images_.InternalSwap(&other->images_);
  tiered_numbers_.InternalSwap(&other->tiered_numbers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &font_name_, GetArenaForAllocation(),
      &other->font_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListStyleArchive, font_name_null_)
      + sizeof(ListStyleArchive::font_name_null_)
      - PROTOBUF_FIELD_OFFSET(ListStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
  swap(writing_direction_, other->writing_direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[22]);
}

// ===================================================================

class TextStylePresetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TextStylePresetArchive>()._has_bits_);
  static void set_has_preset_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& paragraph_style(const TextStylePresetArchive* msg);
  static void set_has_paragraph_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& list_style(const TextStylePresetArchive* msg);
  static void set_has_list_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Reference&
TextStylePresetArchive::_Internal::paragraph_style(const TextStylePresetArchive* msg) {
  return *msg->paragraph_style_;
}
const ::TSP::Reference&
TextStylePresetArchive::_Internal::list_style(const TextStylePresetArchive* msg) {
  return *msg->list_style_;
}
void TextStylePresetArchive::clear_paragraph_style() {
  if (paragraph_style_ != nullptr) paragraph_style_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TextStylePresetArchive::clear_list_style() {
  if (list_style_ != nullptr) list_style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TextStylePresetArchive::TextStylePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.TextStylePresetArchive)
}
TextStylePresetArchive::TextStylePresetArchive(const TextStylePresetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  preset_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_preset_identifier()) {
    preset_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_preset_identifier(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_paragraph_style()) {
    paragraph_style_ = new ::TSP::Reference(*from.paragraph_style_);
  } else {
    paragraph_style_ = nullptr;
  }
  if (from._internal_has_list_style()) {
    list_style_ = new ::TSP::Reference(*from.list_style_);
  } else {
    list_style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.TextStylePresetArchive)
}

inline void TextStylePresetArchive::SharedCtor() {
preset_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&paragraph_style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&list_style_) -
    reinterpret_cast<char*>(&paragraph_style_)) + sizeof(list_style_));
}

TextStylePresetArchive::~TextStylePresetArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TextStylePresetArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TextStylePresetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  preset_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete paragraph_style_;
  if (this != internal_default_instance()) delete list_style_;
}

void TextStylePresetArchive::ArenaDtor(void* object) {
  TextStylePresetArchive* _this = reinterpret_cast< TextStylePresetArchive* >(object);
  (void)_this;
}
void TextStylePresetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextStylePresetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextStylePresetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TextStylePresetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      preset_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(paragraph_style_ != nullptr);
      paragraph_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(list_style_ != nullptr);
      list_style_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextStylePresetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string preset_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_preset_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.TextStylePresetArchive.preset_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference paragraph_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_paragraph_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference list_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextStylePresetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TextStylePresetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string preset_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preset_identifier().data(), static_cast<int>(this->_internal_preset_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.TextStylePresetArchive.preset_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_preset_identifier(), target);
  }

  // optional .TSP.Reference paragraph_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::paragraph_style(this), target, stream);
  }

  // optional .TSP.Reference list_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::list_style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TextStylePresetArchive)
  return target;
}

size_t TextStylePresetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TextStylePresetArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string preset_identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preset_identifier());
    }

    // optional .TSP.Reference paragraph_style = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *paragraph_style_);
    }

    // optional .TSP.Reference list_style = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *list_style_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextStylePresetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TextStylePresetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextStylePresetArchive::GetClassData() const { return &_class_data_; }

void TextStylePresetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TextStylePresetArchive *>(to)->MergeFrom(
      static_cast<const TextStylePresetArchive &>(from));
}


void TextStylePresetArchive::MergeFrom(const TextStylePresetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TextStylePresetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_preset_identifier(from._internal_preset_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_paragraph_style()->::TSP::Reference::MergeFrom(from._internal_paragraph_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_list_style()->::TSP::Reference::MergeFrom(from._internal_list_style());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextStylePresetArchive::CopyFrom(const TextStylePresetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TextStylePresetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextStylePresetArchive::IsInitialized() const {
  if (_internal_has_paragraph_style()) {
    if (!paragraph_style_->IsInitialized()) return false;
  }
  if (_internal_has_list_style()) {
    if (!list_style_->IsInitialized()) return false;
  }
  return true;
}

void TextStylePresetArchive::InternalSwap(TextStylePresetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &preset_identifier_, GetArenaForAllocation(),
      &other->preset_identifier_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextStylePresetArchive, list_style_)
      + sizeof(TextStylePresetArchive::list_style_)
      - PROTOBUF_FIELD_OFFSET(TextStylePresetArchive, paragraph_style_)>(
          reinterpret_cast<char*>(&paragraph_style_),
          reinterpret_cast<char*>(&other->paragraph_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextStylePresetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[23]);
}

// ===================================================================

class ColumnsArchive_EqualColumnsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnsArchive_EqualColumnsArchive>()._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gap(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ColumnsArchive_EqualColumnsArchive::ColumnsArchive_EqualColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ColumnsArchive.EqualColumnsArchive)
}
ColumnsArchive_EqualColumnsArchive::ColumnsArchive_EqualColumnsArchive(const ColumnsArchive_EqualColumnsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&gap_) -
    reinterpret_cast<char*>(&count_)) + sizeof(gap_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ColumnsArchive.EqualColumnsArchive)
}

inline void ColumnsArchive_EqualColumnsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gap_) -
    reinterpret_cast<char*>(&count_)) + sizeof(gap_));
}

ColumnsArchive_EqualColumnsArchive::~ColumnsArchive_EqualColumnsArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ColumnsArchive.EqualColumnsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColumnsArchive_EqualColumnsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColumnsArchive_EqualColumnsArchive::ArenaDtor(void* object) {
  ColumnsArchive_EqualColumnsArchive* _this = reinterpret_cast< ColumnsArchive_EqualColumnsArchive* >(object);
  (void)_this;
}
void ColumnsArchive_EqualColumnsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColumnsArchive_EqualColumnsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColumnsArchive_EqualColumnsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ColumnsArchive.EqualColumnsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gap_) -
        reinterpret_cast<char*>(&count_)) + sizeof(gap_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnsArchive_EqualColumnsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float gap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_gap(&has_bits);
          gap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnsArchive_EqualColumnsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ColumnsArchive.EqualColumnsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  // optional float gap = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_gap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ColumnsArchive.EqualColumnsArchive)
  return target;
}

size_t ColumnsArchive_EqualColumnsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ColumnsArchive.EqualColumnsArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

    // optional float gap = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnsArchive_EqualColumnsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColumnsArchive_EqualColumnsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnsArchive_EqualColumnsArchive::GetClassData() const { return &_class_data_; }

void ColumnsArchive_EqualColumnsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ColumnsArchive_EqualColumnsArchive *>(to)->MergeFrom(
      static_cast<const ColumnsArchive_EqualColumnsArchive &>(from));
}


void ColumnsArchive_EqualColumnsArchive::MergeFrom(const ColumnsArchive_EqualColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ColumnsArchive.EqualColumnsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000002u) {
      gap_ = from.gap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnsArchive_EqualColumnsArchive::CopyFrom(const ColumnsArchive_EqualColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ColumnsArchive.EqualColumnsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnsArchive_EqualColumnsArchive::IsInitialized() const {
  return true;
}

void ColumnsArchive_EqualColumnsArchive::InternalSwap(ColumnsArchive_EqualColumnsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnsArchive_EqualColumnsArchive, gap_)
      + sizeof(ColumnsArchive_EqualColumnsArchive::gap_)
      - PROTOBUF_FIELD_OFFSET(ColumnsArchive_EqualColumnsArchive, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnsArchive_EqualColumnsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[24]);
}

// ===================================================================

class ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive>()._has_bits_);
  static void set_has_gap(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
}
ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive(const ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gap_, &from.gap_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&gap_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
}

inline void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gap_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&gap_)) + sizeof(width_));
}

ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::~ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::ArenaDtor(void* object) {
  ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* _this = reinterpret_cast< ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* >(object);
  (void)_this;
}
void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gap_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&gap_)) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float gap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_gap(&has_bits);
          gap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float gap = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_gap(), target);
  }

  // required float width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
  return target;
}

size_t ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
  size_t total_size = 0;

  if (_internal_has_gap()) {
    // required float gap = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_width()) {
    // required float width = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float gap = 1;
    total_size += 1 + 4;

    // required float width = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::GetClassData() const { return &_class_data_; }

void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive *>(to)->MergeFrom(
      static_cast<const ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive &>(from));
}


void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::MergeFrom(const ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gap_ = from.gap_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::CopyFrom(const ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::InternalSwap(ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive, width_)
      + sizeof(ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::width_)
      - PROTOBUF_FIELD_OFFSET(ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive, gap_)>(
          reinterpret_cast<char*>(&gap_),
          reinterpret_cast<char*>(&other->gap_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[25]);
}

// ===================================================================

class ColumnsArchive_NonEqualColumnsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnsArchive_NonEqualColumnsArchive>()._has_bits_);
  static void set_has_first(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ColumnsArchive_NonEqualColumnsArchive::ColumnsArchive_NonEqualColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  following_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ColumnsArchive.NonEqualColumnsArchive)
}
ColumnsArchive_NonEqualColumnsArchive::ColumnsArchive_NonEqualColumnsArchive(const ColumnsArchive_NonEqualColumnsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      following_(from.following_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  first_ = from.first_;
  // @@protoc_insertion_point(copy_constructor:TSWP.ColumnsArchive.NonEqualColumnsArchive)
}

inline void ColumnsArchive_NonEqualColumnsArchive::SharedCtor() {
first_ = 0;
}

ColumnsArchive_NonEqualColumnsArchive::~ColumnsArchive_NonEqualColumnsArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ColumnsArchive.NonEqualColumnsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColumnsArchive_NonEqualColumnsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColumnsArchive_NonEqualColumnsArchive::ArenaDtor(void* object) {
  ColumnsArchive_NonEqualColumnsArchive* _this = reinterpret_cast< ColumnsArchive_NonEqualColumnsArchive* >(object);
  (void)_this;
}
void ColumnsArchive_NonEqualColumnsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColumnsArchive_NonEqualColumnsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColumnsArchive_NonEqualColumnsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ColumnsArchive.NonEqualColumnsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  following_.Clear();
  first_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnsArchive_NonEqualColumnsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float first = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_first(&has_bits);
          first_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive following = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_following(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnsArchive_NonEqualColumnsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ColumnsArchive.NonEqualColumnsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float first = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_first(), target);
  }

  // repeated .TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive following = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_following_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_following(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ColumnsArchive.NonEqualColumnsArchive)
  return target;
}

size_t ColumnsArchive_NonEqualColumnsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ColumnsArchive.NonEqualColumnsArchive)
  size_t total_size = 0;

  // required float first = 1;
  if (_internal_has_first()) {
    total_size += 1 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive following = 2;
  total_size += 1UL * this->_internal_following_size();
  for (const auto& msg : this->following_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnsArchive_NonEqualColumnsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColumnsArchive_NonEqualColumnsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnsArchive_NonEqualColumnsArchive::GetClassData() const { return &_class_data_; }

void ColumnsArchive_NonEqualColumnsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ColumnsArchive_NonEqualColumnsArchive *>(to)->MergeFrom(
      static_cast<const ColumnsArchive_NonEqualColumnsArchive &>(from));
}


void ColumnsArchive_NonEqualColumnsArchive::MergeFrom(const ColumnsArchive_NonEqualColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ColumnsArchive.NonEqualColumnsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  following_.MergeFrom(from.following_);
  if (from._internal_has_first()) {
    _internal_set_first(from._internal_first());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnsArchive_NonEqualColumnsArchive::CopyFrom(const ColumnsArchive_NonEqualColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ColumnsArchive.NonEqualColumnsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnsArchive_NonEqualColumnsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(following_)) return false;
  return true;
}

void ColumnsArchive_NonEqualColumnsArchive::InternalSwap(ColumnsArchive_NonEqualColumnsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  following_.InternalSwap(&other->following_);
  swap(first_, other->first_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnsArchive_NonEqualColumnsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[26]);
}

// ===================================================================

class ColumnsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnsArchive>()._has_bits_);
  static const ::TSWP::ColumnsArchive_EqualColumnsArchive& equal_columns(const ColumnsArchive* msg);
  static void set_has_equal_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSWP::ColumnsArchive_NonEqualColumnsArchive& non_equal_columns(const ColumnsArchive* msg);
  static void set_has_non_equal_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSWP::ColumnsArchive_EqualColumnsArchive&
ColumnsArchive::_Internal::equal_columns(const ColumnsArchive* msg) {
  return *msg->equal_columns_;
}
const ::TSWP::ColumnsArchive_NonEqualColumnsArchive&
ColumnsArchive::_Internal::non_equal_columns(const ColumnsArchive* msg) {
  return *msg->non_equal_columns_;
}
ColumnsArchive::ColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ColumnsArchive)
}
ColumnsArchive::ColumnsArchive(const ColumnsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_equal_columns()) {
    equal_columns_ = new ::TSWP::ColumnsArchive_EqualColumnsArchive(*from.equal_columns_);
  } else {
    equal_columns_ = nullptr;
  }
  if (from._internal_has_non_equal_columns()) {
    non_equal_columns_ = new ::TSWP::ColumnsArchive_NonEqualColumnsArchive(*from.non_equal_columns_);
  } else {
    non_equal_columns_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.ColumnsArchive)
}

inline void ColumnsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&equal_columns_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&non_equal_columns_) -
    reinterpret_cast<char*>(&equal_columns_)) + sizeof(non_equal_columns_));
}

ColumnsArchive::~ColumnsArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ColumnsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColumnsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete equal_columns_;
  if (this != internal_default_instance()) delete non_equal_columns_;
}

void ColumnsArchive::ArenaDtor(void* object) {
  ColumnsArchive* _this = reinterpret_cast< ColumnsArchive* >(object);
  (void)_this;
}
void ColumnsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColumnsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColumnsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ColumnsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(equal_columns_ != nullptr);
      equal_columns_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(non_equal_columns_ != nullptr);
      non_equal_columns_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.ColumnsArchive.EqualColumnsArchive equal_columns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_equal_columns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ColumnsArchive.NonEqualColumnsArchive non_equal_columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_non_equal_columns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ColumnsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.ColumnsArchive.EqualColumnsArchive equal_columns = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::equal_columns(this), target, stream);
  }

  // optional .TSWP.ColumnsArchive.NonEqualColumnsArchive non_equal_columns = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::non_equal_columns(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ColumnsArchive)
  return target;
}

size_t ColumnsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ColumnsArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSWP.ColumnsArchive.EqualColumnsArchive equal_columns = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *equal_columns_);
    }

    // optional .TSWP.ColumnsArchive.NonEqualColumnsArchive non_equal_columns = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *non_equal_columns_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColumnsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnsArchive::GetClassData() const { return &_class_data_; }

void ColumnsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ColumnsArchive *>(to)->MergeFrom(
      static_cast<const ColumnsArchive &>(from));
}


void ColumnsArchive::MergeFrom(const ColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ColumnsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_equal_columns()->::TSWP::ColumnsArchive_EqualColumnsArchive::MergeFrom(from._internal_equal_columns());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_non_equal_columns()->::TSWP::ColumnsArchive_NonEqualColumnsArchive::MergeFrom(from._internal_non_equal_columns());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnsArchive::CopyFrom(const ColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ColumnsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnsArchive::IsInitialized() const {
  if (_internal_has_non_equal_columns()) {
    if (!non_equal_columns_->IsInitialized()) return false;
  }
  return true;
}

void ColumnsArchive::InternalSwap(ColumnsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnsArchive, non_equal_columns_)
      + sizeof(ColumnsArchive::non_equal_columns_)
      - PROTOBUF_FIELD_OFFSET(ColumnsArchive, equal_columns_)>(
          reinterpret_cast<char*>(&equal_columns_),
          reinterpret_cast<char*>(&other->equal_columns_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[27]);
}

// ===================================================================

class PaddingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PaddingArchive>()._has_bits_);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PaddingArchive::PaddingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.PaddingArchive)
}
PaddingArchive::PaddingArchive(const PaddingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  // @@protoc_insertion_point(copy_constructor:TSWP.PaddingArchive)
}

inline void PaddingArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&left_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
}

PaddingArchive::~PaddingArchive() {
  // @@protoc_insertion_point(destructor:TSWP.PaddingArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PaddingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PaddingArchive::ArenaDtor(void* object) {
  PaddingArchive* _this = reinterpret_cast< PaddingArchive* >(object);
  (void)_this;
}
void PaddingArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PaddingArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PaddingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.PaddingArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bottom_) -
        reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaddingArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_left(&has_bits);
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_top(&has_bits);
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_right(&has_bits);
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bottom = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_bottom(&has_bits);
          bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PaddingArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.PaddingArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_left(), target);
  }

  // optional float top = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_top(), target);
  }

  // optional float right = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_right(), target);
  }

  // optional float bottom = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_bottom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.PaddingArchive)
  return target;
}

size_t PaddingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.PaddingArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float left = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float top = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float right = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float bottom = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaddingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PaddingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaddingArchive::GetClassData() const { return &_class_data_; }

void PaddingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PaddingArchive *>(to)->MergeFrom(
      static_cast<const PaddingArchive &>(from));
}


void PaddingArchive::MergeFrom(const PaddingArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.PaddingArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000002u) {
      top_ = from.top_;
    }
    if (cached_has_bits & 0x00000004u) {
      right_ = from.right_;
    }
    if (cached_has_bits & 0x00000008u) {
      bottom_ = from.bottom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaddingArchive::CopyFrom(const PaddingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.PaddingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaddingArchive::IsInitialized() const {
  return true;
}

void PaddingArchive::InternalSwap(PaddingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PaddingArchive, bottom_)
      + sizeof(PaddingArchive::bottom_)
      - PROTOBUF_FIELD_OFFSET(PaddingArchive, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PaddingArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[28]);
}

// ===================================================================

class ColumnStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnStylePropertiesArchive>()._has_bits_);
  static void set_has_continuous(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shrink_to_fit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vertical_text(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_min_horizontal_inset(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_vertical_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_columns_null(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSWP::ColumnsArchive& columns(const ColumnStylePropertiesArchive* msg);
  static void set_has_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_margins_null(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSWP::PaddingArchive& margins(const ColumnStylePropertiesArchive* msg);
  static void set_has_margins(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_padding_null(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSWP::PaddingArchive& padding(const ColumnStylePropertiesArchive* msg);
  static void set_has_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_writing_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::TSWP::ColumnsArchive&
ColumnStylePropertiesArchive::_Internal::columns(const ColumnStylePropertiesArchive* msg) {
  return *msg->columns_;
}
const ::TSWP::PaddingArchive&
ColumnStylePropertiesArchive::_Internal::margins(const ColumnStylePropertiesArchive* msg) {
  return *msg->margins_;
}
const ::TSWP::PaddingArchive&
ColumnStylePropertiesArchive::_Internal::padding(const ColumnStylePropertiesArchive* msg) {
  return *msg->padding_;
}
ColumnStylePropertiesArchive::ColumnStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ColumnStylePropertiesArchive)
}
ColumnStylePropertiesArchive::ColumnStylePropertiesArchive(const ColumnStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_columns()) {
    columns_ = new ::TSWP::ColumnsArchive(*from.columns_);
  } else {
    columns_ = nullptr;
  }
  if (from._internal_has_margins()) {
    margins_ = new ::TSWP::PaddingArchive(*from.margins_);
  } else {
    margins_ = nullptr;
  }
  if (from._internal_has_padding()) {
    padding_ = new ::TSWP::PaddingArchive(*from.padding_);
  } else {
    padding_ = nullptr;
  }
  ::memcpy(&continuous_, &from.continuous_,
    static_cast<size_t>(reinterpret_cast<char*>(&writing_direction_) -
    reinterpret_cast<char*>(&continuous_)) + sizeof(writing_direction_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ColumnStylePropertiesArchive)
}

inline void ColumnStylePropertiesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&columns_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&padding_null_) -
    reinterpret_cast<char*>(&columns_)) + sizeof(padding_null_));
writing_direction_ = -1;
}

ColumnStylePropertiesArchive::~ColumnStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ColumnStylePropertiesArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColumnStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete columns_;
  if (this != internal_default_instance()) delete margins_;
  if (this != internal_default_instance()) delete padding_;
}

void ColumnStylePropertiesArchive::ArenaDtor(void* object) {
  ColumnStylePropertiesArchive* _this = reinterpret_cast< ColumnStylePropertiesArchive* >(object);
  (void)_this;
}
void ColumnStylePropertiesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColumnStylePropertiesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColumnStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ColumnStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(columns_ != nullptr);
      columns_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(margins_ != nullptr);
      margins_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(padding_ != nullptr);
      padding_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&continuous_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_horizontal_inset_) -
        reinterpret_cast<char*>(&continuous_)) + sizeof(min_horizontal_inset_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&vertical_alignment_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&padding_null_) -
        reinterpret_cast<char*>(&vertical_alignment_)) + sizeof(padding_null_));
    writing_direction_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnStylePropertiesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool continuous = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_continuous(&has_bits);
          continuous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shrink_to_fit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_shrink_to_fit(&has_bits);
          shrink_to_fit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool vertical_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_vertical_text(&has_bits);
          vertical_text_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float min_horizontal_inset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_min_horizontal_inset(&has_bits);
          min_horizontal_inset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ColumnStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::ColumnStylePropertiesArchive_VerticalAlignmentType_IsValid(val))) {
            _internal_set_vertical_alignment(static_cast<::TSWP::ColumnStylePropertiesArchive_VerticalAlignmentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool columns_null = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_columns_null(&has_bits);
          columns_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ColumnsArchive columns = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_columns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool margins_null = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_margins_null(&has_bits);
          margins_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.PaddingArchive margins = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_margins(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool padding_null = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_padding_null(&has_bits);
          padding_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.PaddingArchive padding = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_padding(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.WritingDirectionType writing_direction = 12 [default = kWritingDirectionNatural];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::WritingDirectionType_IsValid(val))) {
            _internal_set_writing_direction(static_cast<::TSWP::WritingDirectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnStylePropertiesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ColumnStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool continuous = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_continuous(), target);
  }

  // optional bool shrink_to_fit = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_shrink_to_fit(), target);
  }

  // optional bool vertical_text = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_vertical_text(), target);
  }

  // optional float min_horizontal_inset = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_min_horizontal_inset(), target);
  }

  // optional .TSWP.ColumnStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_vertical_alignment(), target);
  }

  // optional bool columns_null = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_columns_null(), target);
  }

  // optional .TSWP.ColumnsArchive columns = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::columns(this), target, stream);
  }

  // optional bool margins_null = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_margins_null(), target);
  }

  // optional .TSWP.PaddingArchive margins = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::margins(this), target, stream);
  }

  // optional bool padding_null = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_padding_null(), target);
  }

  // optional .TSWP.PaddingArchive padding = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::padding(this), target, stream);
  }

  // optional .TSWP.WritingDirectionType writing_direction = 12 [default = kWritingDirectionNatural];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_writing_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ColumnStylePropertiesArchive)
  return target;
}

size_t ColumnStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ColumnStylePropertiesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSWP.ColumnsArchive columns = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *columns_);
    }

    // optional .TSWP.PaddingArchive margins = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *margins_);
    }

    // optional .TSWP.PaddingArchive padding = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *padding_);
    }

    // optional bool continuous = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool shrink_to_fit = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool vertical_text = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool columns_null = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional float min_horizontal_inset = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .TSWP.ColumnStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vertical_alignment());
    }

    // optional bool margins_null = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool padding_null = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional .TSWP.WritingDirectionType writing_direction = 12 [default = kWritingDirectionNatural];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_writing_direction());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnStylePropertiesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColumnStylePropertiesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnStylePropertiesArchive::GetClassData() const { return &_class_data_; }

void ColumnStylePropertiesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ColumnStylePropertiesArchive *>(to)->MergeFrom(
      static_cast<const ColumnStylePropertiesArchive &>(from));
}


void ColumnStylePropertiesArchive::MergeFrom(const ColumnStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ColumnStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_columns()->::TSWP::ColumnsArchive::MergeFrom(from._internal_columns());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_margins()->::TSWP::PaddingArchive::MergeFrom(from._internal_margins());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_padding()->::TSWP::PaddingArchive::MergeFrom(from._internal_padding());
    }
    if (cached_has_bits & 0x00000008u) {
      continuous_ = from.continuous_;
    }
    if (cached_has_bits & 0x00000010u) {
      shrink_to_fit_ = from.shrink_to_fit_;
    }
    if (cached_has_bits & 0x00000020u) {
      vertical_text_ = from.vertical_text_;
    }
    if (cached_has_bits & 0x00000040u) {
      columns_null_ = from.columns_null_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_horizontal_inset_ = from.min_horizontal_inset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      vertical_alignment_ = from.vertical_alignment_;
    }
    if (cached_has_bits & 0x00000200u) {
      margins_null_ = from.margins_null_;
    }
    if (cached_has_bits & 0x00000400u) {
      padding_null_ = from.padding_null_;
    }
    if (cached_has_bits & 0x00000800u) {
      writing_direction_ = from.writing_direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnStylePropertiesArchive::CopyFrom(const ColumnStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ColumnStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnStylePropertiesArchive::IsInitialized() const {
  if (_internal_has_columns()) {
    if (!columns_->IsInitialized()) return false;
  }
  return true;
}

void ColumnStylePropertiesArchive::InternalSwap(ColumnStylePropertiesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnStylePropertiesArchive, padding_null_)
      + sizeof(ColumnStylePropertiesArchive::padding_null_)
      - PROTOBUF_FIELD_OFFSET(ColumnStylePropertiesArchive, columns_)>(
          reinterpret_cast<char*>(&columns_),
          reinterpret_cast<char*>(&other->columns_));
  swap(writing_direction_, other->writing_direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnStylePropertiesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[29]);
}

// ===================================================================

class ColumnStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnStyleArchive>()._has_bits_);
  static const ::TSS::StyleArchive& super(const ColumnStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSWP::ColumnStylePropertiesArchive& column_properties(const ColumnStyleArchive* msg);
  static void set_has_column_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
ColumnStyleArchive::_Internal::super(const ColumnStyleArchive* msg) {
  return *msg->super_;
}
const ::TSWP::ColumnStylePropertiesArchive&
ColumnStyleArchive::_Internal::column_properties(const ColumnStyleArchive* msg) {
  return *msg->column_properties_;
}
void ColumnStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ColumnStyleArchive::ColumnStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ColumnStyleArchive)
}
ColumnStyleArchive::ColumnStyleArchive(const ColumnStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_column_properties()) {
    column_properties_ = new ::TSWP::ColumnStylePropertiesArchive(*from.column_properties_);
  } else {
    column_properties_ = nullptr;
  }
  override_count_ = from.override_count_;
  // @@protoc_insertion_point(copy_constructor:TSWP.ColumnStyleArchive)
}

inline void ColumnStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&override_count_) -
    reinterpret_cast<char*>(&super_)) + sizeof(override_count_));
}

ColumnStyleArchive::~ColumnStyleArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ColumnStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColumnStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete column_properties_;
}

void ColumnStyleArchive::ArenaDtor(void* object) {
  ColumnStyleArchive* _this = reinterpret_cast< ColumnStyleArchive* >(object);
  (void)_this;
}
void ColumnStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColumnStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColumnStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ColumnStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(column_properties_ != nullptr);
      column_properties_->Clear();
    }
  }
  override_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ColumnStylePropertiesArchive column_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ColumnStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // optional .TSWP.ColumnStylePropertiesArchive column_properties = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::column_properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ColumnStyleArchive)
  return target;
}

size_t ColumnStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ColumnStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSWP.ColumnStylePropertiesArchive column_properties = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *column_properties_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_override_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColumnStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnStyleArchive::GetClassData() const { return &_class_data_; }

void ColumnStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ColumnStyleArchive *>(to)->MergeFrom(
      static_cast<const ColumnStyleArchive &>(from));
}


void ColumnStyleArchive::MergeFrom(const ColumnStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ColumnStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSS::StyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_column_properties()->::TSWP::ColumnStylePropertiesArchive::MergeFrom(from._internal_column_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      override_count_ = from.override_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnStyleArchive::CopyFrom(const ColumnStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ColumnStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_column_properties()) {
    if (!column_properties_->IsInitialized()) return false;
  }
  return true;
}

void ColumnStyleArchive::InternalSwap(ColumnStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnStyleArchive, override_count_)
      + sizeof(ColumnStyleArchive::override_count_)
      - PROTOBUF_FIELD_OFFSET(ColumnStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[30]);
}

// ===================================================================

class ShapeStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShapeStylePropertiesArchive>()._has_bits_);
  static void set_has_shrink_to_fit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vertical_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_columns_null(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSWP::ColumnsArchive& columns(const ShapeStylePropertiesArchive* msg);
  static void set_has_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_padding_null(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSWP::PaddingArchive& padding(const ShapeStylePropertiesArchive* msg);
  static void set_has_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_default_text_preset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_vertical_text(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_paragraph_style_null(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& paragraph_style(const ShapeStylePropertiesArchive* msg);
  static void set_has_paragraph_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vertical_text_40(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::TSWP::ColumnsArchive&
ShapeStylePropertiesArchive::_Internal::columns(const ShapeStylePropertiesArchive* msg) {
  return *msg->columns_;
}
const ::TSWP::PaddingArchive&
ShapeStylePropertiesArchive::_Internal::padding(const ShapeStylePropertiesArchive* msg) {
  return *msg->padding_;
}
const ::TSP::Reference&
ShapeStylePropertiesArchive::_Internal::paragraph_style(const ShapeStylePropertiesArchive* msg) {
  return *msg->paragraph_style_;
}
void ShapeStylePropertiesArchive::clear_paragraph_style() {
  if (paragraph_style_ != nullptr) paragraph_style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ShapeStylePropertiesArchive::ShapeStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ShapeStylePropertiesArchive)
}
ShapeStylePropertiesArchive::ShapeStylePropertiesArchive(const ShapeStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_columns()) {
    columns_ = new ::TSWP::ColumnsArchive(*from.columns_);
  } else {
    columns_ = nullptr;
  }
  if (from._internal_has_padding()) {
    padding_ = new ::TSWP::PaddingArchive(*from.padding_);
  } else {
    padding_ = nullptr;
  }
  if (from._internal_has_paragraph_style()) {
    paragraph_style_ = new ::TSP::Reference(*from.paragraph_style_);
  } else {
    paragraph_style_ = nullptr;
  }
  ::memcpy(&vertical_alignment_, &from.vertical_alignment_,
    static_cast<size_t>(reinterpret_cast<char*>(&vertical_text_40_) -
    reinterpret_cast<char*>(&vertical_alignment_)) + sizeof(vertical_text_40_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ShapeStylePropertiesArchive)
}

inline void ShapeStylePropertiesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&columns_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vertical_text_40_) -
    reinterpret_cast<char*>(&columns_)) + sizeof(vertical_text_40_));
}

ShapeStylePropertiesArchive::~ShapeStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ShapeStylePropertiesArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShapeStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete columns_;
  if (this != internal_default_instance()) delete padding_;
  if (this != internal_default_instance()) delete paragraph_style_;
}

void ShapeStylePropertiesArchive::ArenaDtor(void* object) {
  ShapeStylePropertiesArchive* _this = reinterpret_cast< ShapeStylePropertiesArchive* >(object);
  (void)_this;
}
void ShapeStylePropertiesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeStylePropertiesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShapeStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ShapeStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(columns_ != nullptr);
      columns_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(padding_ != nullptr);
      padding_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(paragraph_style_ != nullptr);
      paragraph_style_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&vertical_alignment_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vertical_text_) -
        reinterpret_cast<char*>(&vertical_alignment_)) + sizeof(vertical_text_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&default_text_preset_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vertical_text_40_) -
        reinterpret_cast<char*>(&default_text_preset_index_)) + sizeof(vertical_text_40_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeStylePropertiesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool shrink_to_fit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_shrink_to_fit(&has_bits);
          shrink_to_fit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ShapeStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::ShapeStylePropertiesArchive_VerticalAlignmentType_IsValid(val))) {
            _internal_set_vertical_alignment(static_cast<::TSWP::ShapeStylePropertiesArchive_VerticalAlignmentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool columns_null = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_columns_null(&has_bits);
          columns_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ColumnsArchive columns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_columns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool padding_null = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_padding_null(&has_bits);
          padding_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.PaddingArchive padding = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_padding(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 default_text_preset_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_default_text_preset_index(&has_bits);
          default_text_preset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool vertical_text = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_vertical_text(&has_bits);
          vertical_text_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool paragraph_style_null = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_paragraph_style_null(&has_bits);
          paragraph_style_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference paragraph_style = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_paragraph_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool vertical_text_40 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_vertical_text_40(&has_bits);
          vertical_text_40_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeStylePropertiesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ShapeStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool shrink_to_fit = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_shrink_to_fit(), target);
  }

  // optional .TSWP.ShapeStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_vertical_alignment(), target);
  }

  // optional bool columns_null = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_columns_null(), target);
  }

  // optional .TSWP.ColumnsArchive columns = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::columns(this), target, stream);
  }

  // optional bool padding_null = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_padding_null(), target);
  }

  // optional .TSWP.PaddingArchive padding = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::padding(this), target, stream);
  }

  // optional uint32 default_text_preset_index = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_default_text_preset_index(), target);
  }

  // optional bool vertical_text = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_vertical_text(), target);
  }

  // optional bool paragraph_style_null = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_paragraph_style_null(), target);
  }

  // optional .TSP.Reference paragraph_style = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::paragraph_style(this), target, stream);
  }

  // optional bool vertical_text_40 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_vertical_text_40(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ShapeStylePropertiesArchive)
  return target;
}

size_t ShapeStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ShapeStylePropertiesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSWP.ColumnsArchive columns = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *columns_);
    }

    // optional .TSWP.PaddingArchive padding = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *padding_);
    }

    // optional .TSP.Reference paragraph_style = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *paragraph_style_);
    }

    // optional .TSWP.ShapeStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vertical_alignment());
    }

    // optional bool shrink_to_fit = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool columns_null = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool padding_null = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool vertical_text = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 default_text_preset_index = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_default_text_preset_index());
    }

    // optional bool paragraph_style_null = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool vertical_text_40 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShapeStylePropertiesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShapeStylePropertiesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShapeStylePropertiesArchive::GetClassData() const { return &_class_data_; }

void ShapeStylePropertiesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ShapeStylePropertiesArchive *>(to)->MergeFrom(
      static_cast<const ShapeStylePropertiesArchive &>(from));
}


void ShapeStylePropertiesArchive::MergeFrom(const ShapeStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ShapeStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_columns()->::TSWP::ColumnsArchive::MergeFrom(from._internal_columns());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_padding()->::TSWP::PaddingArchive::MergeFrom(from._internal_padding());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_paragraph_style()->::TSP::Reference::MergeFrom(from._internal_paragraph_style());
    }
    if (cached_has_bits & 0x00000008u) {
      vertical_alignment_ = from.vertical_alignment_;
    }
    if (cached_has_bits & 0x00000010u) {
      shrink_to_fit_ = from.shrink_to_fit_;
    }
    if (cached_has_bits & 0x00000020u) {
      columns_null_ = from.columns_null_;
    }
    if (cached_has_bits & 0x00000040u) {
      padding_null_ = from.padding_null_;
    }
    if (cached_has_bits & 0x00000080u) {
      vertical_text_ = from.vertical_text_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      default_text_preset_index_ = from.default_text_preset_index_;
    }
    if (cached_has_bits & 0x00000200u) {
      paragraph_style_null_ = from.paragraph_style_null_;
    }
    if (cached_has_bits & 0x00000400u) {
      vertical_text_40_ = from.vertical_text_40_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShapeStylePropertiesArchive::CopyFrom(const ShapeStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ShapeStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeStylePropertiesArchive::IsInitialized() const {
  if (_internal_has_columns()) {
    if (!columns_->IsInitialized()) return false;
  }
  if (_internal_has_paragraph_style()) {
    if (!paragraph_style_->IsInitialized()) return false;
  }
  return true;
}

void ShapeStylePropertiesArchive::InternalSwap(ShapeStylePropertiesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeStylePropertiesArchive, vertical_text_40_)
      + sizeof(ShapeStylePropertiesArchive::vertical_text_40_)
      - PROTOBUF_FIELD_OFFSET(ShapeStylePropertiesArchive, columns_)>(
          reinterpret_cast<char*>(&columns_),
          reinterpret_cast<char*>(&other->columns_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeStylePropertiesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[31]);
}

// ===================================================================

class ShapeStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShapeStyleArchive>()._has_bits_);
  static const ::TSD::ShapeStyleArchive& super(const ShapeStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSWP::ShapeStylePropertiesArchive& shape_properties(const ShapeStyleArchive* msg);
  static void set_has_shape_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::ShapeStyleArchive&
ShapeStyleArchive::_Internal::super(const ShapeStyleArchive* msg) {
  return *msg->super_;
}
const ::TSWP::ShapeStylePropertiesArchive&
ShapeStyleArchive::_Internal::shape_properties(const ShapeStyleArchive* msg) {
  return *msg->shape_properties_;
}
void ShapeStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ShapeStyleArchive::ShapeStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ShapeStyleArchive)
}
ShapeStyleArchive::ShapeStyleArchive(const ShapeStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::ShapeStyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_shape_properties()) {
    shape_properties_ = new ::TSWP::ShapeStylePropertiesArchive(*from.shape_properties_);
  } else {
    shape_properties_ = nullptr;
  }
  override_count_ = from.override_count_;
  // @@protoc_insertion_point(copy_constructor:TSWP.ShapeStyleArchive)
}

inline void ShapeStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&override_count_) -
    reinterpret_cast<char*>(&super_)) + sizeof(override_count_));
}

ShapeStyleArchive::~ShapeStyleArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ShapeStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShapeStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete shape_properties_;
}

void ShapeStyleArchive::ArenaDtor(void* object) {
  ShapeStyleArchive* _this = reinterpret_cast< ShapeStyleArchive* >(object);
  (void)_this;
}
void ShapeStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShapeStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ShapeStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(shape_properties_ != nullptr);
      shape_properties_->Clear();
    }
  }
  override_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.ShapeStyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ShapeStylePropertiesArchive shape_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ShapeStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.ShapeStyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // optional .TSWP.ShapeStylePropertiesArchive shape_properties = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::shape_properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ShapeStyleArchive)
  return target;
}

size_t ShapeStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ShapeStyleArchive)
  size_t total_size = 0;

  // required .TSD.ShapeStyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSWP.ShapeStylePropertiesArchive shape_properties = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shape_properties_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_override_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShapeStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShapeStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShapeStyleArchive::GetClassData() const { return &_class_data_; }

void ShapeStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ShapeStyleArchive *>(to)->MergeFrom(
      static_cast<const ShapeStyleArchive &>(from));
}


void ShapeStyleArchive::MergeFrom(const ShapeStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ShapeStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::ShapeStyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_shape_properties()->::TSWP::ShapeStylePropertiesArchive::MergeFrom(from._internal_shape_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      override_count_ = from.override_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShapeStyleArchive::CopyFrom(const ShapeStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ShapeStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_shape_properties()) {
    if (!shape_properties_->IsInitialized()) return false;
  }
  return true;
}

void ShapeStyleArchive::InternalSwap(ShapeStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeStyleArchive, override_count_)
      + sizeof(ShapeStyleArchive::override_count_)
      - PROTOBUF_FIELD_OFFSET(ShapeStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[32]);
}

// ===================================================================

class ThemePresetsArchive::_Internal {
 public:
};

void ThemePresetsArchive::clear_list_style_presets() {
  list_style_presets_.Clear();
}
void ThemePresetsArchive::clear_text_style_presets() {
  text_style_presets_.Clear();
}
void ThemePresetsArchive::clear_imported_text_style_presets() {
  imported_text_style_presets_.Clear();
}
void ThemePresetsArchive::clear_toc_entry_style_presets() {
  toc_entry_style_presets_.Clear();
}
void ThemePresetsArchive::clear_toc_settings_presets() {
  toc_settings_presets_.Clear();
}
void ThemePresetsArchive::clear_character_style_presets() {
  character_style_presets_.Clear();
}
void ThemePresetsArchive::clear_paragraph_style_presets() {
  paragraph_style_presets_.Clear();
}
void ThemePresetsArchive::clear_dropcap_style_presets() {
  dropcap_style_presets_.Clear();
}
ThemePresetsArchive::ThemePresetsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  list_style_presets_(arena),
  text_style_presets_(arena),
  imported_text_style_presets_(arena),
  toc_entry_style_presets_(arena),
  toc_settings_presets_(arena),
  character_style_presets_(arena),
  paragraph_style_presets_(arena),
  dropcap_style_presets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ThemePresetsArchive)
}
ThemePresetsArchive::ThemePresetsArchive(const ThemePresetsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_style_presets_(from.list_style_presets_),
      text_style_presets_(from.text_style_presets_),
      imported_text_style_presets_(from.imported_text_style_presets_),
      toc_entry_style_presets_(from.toc_entry_style_presets_),
      toc_settings_presets_(from.toc_settings_presets_),
      character_style_presets_(from.character_style_presets_),
      paragraph_style_presets_(from.paragraph_style_presets_),
      dropcap_style_presets_(from.dropcap_style_presets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.ThemePresetsArchive)
}

inline void ThemePresetsArchive::SharedCtor() {
}

ThemePresetsArchive::~ThemePresetsArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ThemePresetsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ThemePresetsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ThemePresetsArchive::ArenaDtor(void* object) {
  ThemePresetsArchive* _this = reinterpret_cast< ThemePresetsArchive* >(object);
  (void)_this;
}
void ThemePresetsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThemePresetsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThemePresetsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ThemePresetsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_style_presets_.Clear();
  text_style_presets_.Clear();
  imported_text_style_presets_.Clear();
  toc_entry_style_presets_.Clear();
  toc_settings_presets_.Clear();
  character_style_presets_.Clear();
  paragraph_style_presets_.Clear();
  dropcap_style_presets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemePresetsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference list_style_presets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference text_style_presets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_text_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference imported_text_style_presets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_imported_text_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference toc_entry_style_presets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_toc_entry_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference toc_settings_presets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_toc_settings_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference character_style_presets = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_character_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference paragraph_style_presets = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paragraph_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference dropcap_style_presets = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dropcap_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThemePresetsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ThemePresetsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference list_style_presets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_style_presets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list_style_presets(i), target, stream);
  }

  // repeated .TSP.Reference text_style_presets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_text_style_presets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_text_style_presets(i), target, stream);
  }

  // repeated .TSP.Reference imported_text_style_presets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_imported_text_style_presets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_imported_text_style_presets(i), target, stream);
  }

  // repeated .TSP.Reference toc_entry_style_presets = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_toc_entry_style_presets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_toc_entry_style_presets(i), target, stream);
  }

  // repeated .TSP.Reference toc_settings_presets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_toc_settings_presets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_toc_settings_presets(i), target, stream);
  }

  // repeated .TSP.Reference character_style_presets = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_character_style_presets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_character_style_presets(i), target, stream);
  }

  // repeated .TSP.Reference paragraph_style_presets = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paragraph_style_presets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_paragraph_style_presets(i), target, stream);
  }

  // repeated .TSP.Reference dropcap_style_presets = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dropcap_style_presets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_dropcap_style_presets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ThemePresetsArchive)
  return target;
}

size_t ThemePresetsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ThemePresetsArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference list_style_presets = 1;
  total_size += 1UL * this->_internal_list_style_presets_size();
  for (const auto& msg : this->list_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference text_style_presets = 2;
  total_size += 1UL * this->_internal_text_style_presets_size();
  for (const auto& msg : this->text_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference imported_text_style_presets = 3;
  total_size += 1UL * this->_internal_imported_text_style_presets_size();
  for (const auto& msg : this->imported_text_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference toc_entry_style_presets = 4;
  total_size += 1UL * this->_internal_toc_entry_style_presets_size();
  for (const auto& msg : this->toc_entry_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference toc_settings_presets = 5;
  total_size += 1UL * this->_internal_toc_settings_presets_size();
  for (const auto& msg : this->toc_settings_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference character_style_presets = 6;
  total_size += 1UL * this->_internal_character_style_presets_size();
  for (const auto& msg : this->character_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference paragraph_style_presets = 7;
  total_size += 1UL * this->_internal_paragraph_style_presets_size();
  for (const auto& msg : this->paragraph_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference dropcap_style_presets = 8;
  total_size += 1UL * this->_internal_dropcap_style_presets_size();
  for (const auto& msg : this->dropcap_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemePresetsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ThemePresetsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemePresetsArchive::GetClassData() const { return &_class_data_; }

void ThemePresetsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ThemePresetsArchive *>(to)->MergeFrom(
      static_cast<const ThemePresetsArchive &>(from));
}


void ThemePresetsArchive::MergeFrom(const ThemePresetsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ThemePresetsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_style_presets_.MergeFrom(from.list_style_presets_);
  text_style_presets_.MergeFrom(from.text_style_presets_);
  imported_text_style_presets_.MergeFrom(from.imported_text_style_presets_);
  toc_entry_style_presets_.MergeFrom(from.toc_entry_style_presets_);
  toc_settings_presets_.MergeFrom(from.toc_settings_presets_);
  character_style_presets_.MergeFrom(from.character_style_presets_);
  paragraph_style_presets_.MergeFrom(from.paragraph_style_presets_);
  dropcap_style_presets_.MergeFrom(from.dropcap_style_presets_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemePresetsArchive::CopyFrom(const ThemePresetsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ThemePresetsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemePresetsArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(list_style_presets_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(text_style_presets_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(imported_text_style_presets_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(toc_entry_style_presets_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(toc_settings_presets_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(character_style_presets_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(paragraph_style_presets_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(dropcap_style_presets_)) return false;
  return true;
}

void ThemePresetsArchive::InternalSwap(ThemePresetsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  list_style_presets_.InternalSwap(&other->list_style_presets_);
  text_style_presets_.InternalSwap(&other->text_style_presets_);
  imported_text_style_presets_.InternalSwap(&other->imported_text_style_presets_);
  toc_entry_style_presets_.InternalSwap(&other->toc_entry_style_presets_);
  toc_settings_presets_.InternalSwap(&other->toc_settings_presets_);
  character_style_presets_.InternalSwap(&other->character_style_presets_);
  paragraph_style_presets_.InternalSwap(&other->paragraph_style_presets_);
  dropcap_style_presets_.InternalSwap(&other->dropcap_style_presets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemePresetsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[33]);
}

// ===================================================================

class TextPresetDisplayItemArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TextPresetDisplayItemArchive>()._has_bits_);
  static const ::TSP::Reference& preset(const TextPresetDisplayItemArchive* msg);
  static void set_has_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
TextPresetDisplayItemArchive::_Internal::preset(const TextPresetDisplayItemArchive* msg) {
  return *msg->preset_;
}
void TextPresetDisplayItemArchive::clear_preset() {
  if (preset_ != nullptr) preset_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TextPresetDisplayItemArchive::TextPresetDisplayItemArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.TextPresetDisplayItemArchive)
}
TextPresetDisplayItemArchive::TextPresetDisplayItemArchive(const TextPresetDisplayItemArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_display_name()) {
    display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_display_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_preset()) {
    preset_ = new ::TSP::Reference(*from.preset_);
  } else {
    preset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.TextPresetDisplayItemArchive)
}

inline void TextPresetDisplayItemArchive::SharedCtor() {
display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
preset_ = nullptr;
}

TextPresetDisplayItemArchive::~TextPresetDisplayItemArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TextPresetDisplayItemArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TextPresetDisplayItemArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete preset_;
}

void TextPresetDisplayItemArchive::ArenaDtor(void* object) {
  TextPresetDisplayItemArchive* _this = reinterpret_cast< TextPresetDisplayItemArchive* >(object);
  (void)_this;
}
void TextPresetDisplayItemArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextPresetDisplayItemArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextPresetDisplayItemArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TextPresetDisplayItemArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      display_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(preset_ != nullptr);
      preset_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextPresetDisplayItemArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference preset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string display_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.TextPresetDisplayItemArchive.display_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextPresetDisplayItemArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TextPresetDisplayItemArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference preset = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preset(this), target, stream);
  }

  // required string display_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.TextPresetDisplayItemArchive.display_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TextPresetDisplayItemArchive)
  return target;
}

size_t TextPresetDisplayItemArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.TextPresetDisplayItemArchive)
  size_t total_size = 0;

  if (_internal_has_display_name()) {
    // required string display_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  if (_internal_has_preset()) {
    // required .TSP.Reference preset = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preset_);
  }

  return total_size;
}
size_t TextPresetDisplayItemArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TextPresetDisplayItemArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string display_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());

    // required .TSP.Reference preset = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preset_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextPresetDisplayItemArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TextPresetDisplayItemArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextPresetDisplayItemArchive::GetClassData() const { return &_class_data_; }

void TextPresetDisplayItemArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TextPresetDisplayItemArchive *>(to)->MergeFrom(
      static_cast<const TextPresetDisplayItemArchive &>(from));
}


void TextPresetDisplayItemArchive::MergeFrom(const TextPresetDisplayItemArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TextPresetDisplayItemArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_preset()->::TSP::Reference::MergeFrom(from._internal_preset());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextPresetDisplayItemArchive::CopyFrom(const TextPresetDisplayItemArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TextPresetDisplayItemArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextPresetDisplayItemArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_preset()) {
    if (!preset_->IsInitialized()) return false;
  }
  return true;
}

void TextPresetDisplayItemArchive::InternalSwap(TextPresetDisplayItemArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &display_name_, GetArenaForAllocation(),
      &other->display_name_, other->GetArenaForAllocation()
  );
  swap(preset_, other->preset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextPresetDisplayItemArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[34]);
}

// ===================================================================

class TOCEntryStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TOCEntryStylePropertiesArchive>()._has_bits_);
  static void set_has_page_number_style_null(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& page_number_style(const TOCEntryStylePropertiesArchive* msg);
  static void set_has_page_number_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_show_page_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Reference&
TOCEntryStylePropertiesArchive::_Internal::page_number_style(const TOCEntryStylePropertiesArchive* msg) {
  return *msg->page_number_style_;
}
void TOCEntryStylePropertiesArchive::clear_page_number_style() {
  if (page_number_style_ != nullptr) page_number_style_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TOCEntryStylePropertiesArchive::TOCEntryStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.TOCEntryStylePropertiesArchive)
}
TOCEntryStylePropertiesArchive::TOCEntryStylePropertiesArchive(const TOCEntryStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_page_number_style()) {
    page_number_style_ = new ::TSP::Reference(*from.page_number_style_);
  } else {
    page_number_style_ = nullptr;
  }
  ::memcpy(&page_number_style_null_, &from.page_number_style_null_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_page_number_) -
    reinterpret_cast<char*>(&page_number_style_null_)) + sizeof(show_page_number_));
  // @@protoc_insertion_point(copy_constructor:TSWP.TOCEntryStylePropertiesArchive)
}

inline void TOCEntryStylePropertiesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&page_number_style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&show_page_number_) -
    reinterpret_cast<char*>(&page_number_style_)) + sizeof(show_page_number_));
}

TOCEntryStylePropertiesArchive::~TOCEntryStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TOCEntryStylePropertiesArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TOCEntryStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete page_number_style_;
}

void TOCEntryStylePropertiesArchive::ArenaDtor(void* object) {
  TOCEntryStylePropertiesArchive* _this = reinterpret_cast< TOCEntryStylePropertiesArchive* >(object);
  (void)_this;
}
void TOCEntryStylePropertiesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TOCEntryStylePropertiesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TOCEntryStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TOCEntryStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(page_number_style_ != nullptr);
    page_number_style_->Clear();
  }
  ::memset(&page_number_style_null_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_page_number_) -
      reinterpret_cast<char*>(&page_number_style_null_)) + sizeof(show_page_number_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOCEntryStylePropertiesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool page_number_style_null = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_page_number_style_null(&has_bits);
          page_number_style_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference page_number_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_page_number_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_page_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_show_page_number(&has_bits);
          show_page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TOCEntryStylePropertiesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TOCEntryStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool page_number_style_null = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_page_number_style_null(), target);
  }

  // optional .TSP.Reference page_number_style = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::page_number_style(this), target, stream);
  }

  // optional bool show_page_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_show_page_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TOCEntryStylePropertiesArchive)
  return target;
}

size_t TOCEntryStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TOCEntryStylePropertiesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference page_number_style = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *page_number_style_);
    }

    // optional bool page_number_style_null = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool show_page_number = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOCEntryStylePropertiesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TOCEntryStylePropertiesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOCEntryStylePropertiesArchive::GetClassData() const { return &_class_data_; }

void TOCEntryStylePropertiesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TOCEntryStylePropertiesArchive *>(to)->MergeFrom(
      static_cast<const TOCEntryStylePropertiesArchive &>(from));
}


void TOCEntryStylePropertiesArchive::MergeFrom(const TOCEntryStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TOCEntryStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_page_number_style()->::TSP::Reference::MergeFrom(from._internal_page_number_style());
    }
    if (cached_has_bits & 0x00000002u) {
      page_number_style_null_ = from.page_number_style_null_;
    }
    if (cached_has_bits & 0x00000004u) {
      show_page_number_ = from.show_page_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOCEntryStylePropertiesArchive::CopyFrom(const TOCEntryStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TOCEntryStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCEntryStylePropertiesArchive::IsInitialized() const {
  if (_internal_has_page_number_style()) {
    if (!page_number_style_->IsInitialized()) return false;
  }
  return true;
}

void TOCEntryStylePropertiesArchive::InternalSwap(TOCEntryStylePropertiesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TOCEntryStylePropertiesArchive, show_page_number_)
      + sizeof(TOCEntryStylePropertiesArchive::show_page_number_)
      - PROTOBUF_FIELD_OFFSET(TOCEntryStylePropertiesArchive, page_number_style_)>(
          reinterpret_cast<char*>(&page_number_style_),
          reinterpret_cast<char*>(&other->page_number_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TOCEntryStylePropertiesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[35]);
}

// ===================================================================

class TOCEntryStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TOCEntryStyleArchive>()._has_bits_);
  static const ::TSWP::ParagraphStyleArchive& super(const TOCEntryStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSWP::TOCEntryStylePropertiesArchive& toc_properties(const TOCEntryStyleArchive* msg);
  static void set_has_toc_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::ParagraphStyleArchive&
TOCEntryStyleArchive::_Internal::super(const TOCEntryStyleArchive* msg) {
  return *msg->super_;
}
const ::TSWP::TOCEntryStylePropertiesArchive&
TOCEntryStyleArchive::_Internal::toc_properties(const TOCEntryStyleArchive* msg) {
  return *msg->toc_properties_;
}
TOCEntryStyleArchive::TOCEntryStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.TOCEntryStyleArchive)
}
TOCEntryStyleArchive::TOCEntryStyleArchive(const TOCEntryStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::ParagraphStyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_toc_properties()) {
    toc_properties_ = new ::TSWP::TOCEntryStylePropertiesArchive(*from.toc_properties_);
  } else {
    toc_properties_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.TOCEntryStyleArchive)
}

inline void TOCEntryStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&toc_properties_) -
    reinterpret_cast<char*>(&super_)) + sizeof(toc_properties_));
}

TOCEntryStyleArchive::~TOCEntryStyleArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TOCEntryStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TOCEntryStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete toc_properties_;
}

void TOCEntryStyleArchive::ArenaDtor(void* object) {
  TOCEntryStyleArchive* _this = reinterpret_cast< TOCEntryStyleArchive* >(object);
  (void)_this;
}
void TOCEntryStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TOCEntryStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TOCEntryStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TOCEntryStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(toc_properties_ != nullptr);
      toc_properties_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOCEntryStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.ParagraphStyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.TOCEntryStylePropertiesArchive toc_properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_toc_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TOCEntryStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TOCEntryStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.ParagraphStyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSWP.TOCEntryStylePropertiesArchive toc_properties = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::toc_properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TOCEntryStyleArchive)
  return target;
}

size_t TOCEntryStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TOCEntryStyleArchive)
  size_t total_size = 0;

  // required .TSWP.ParagraphStyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSWP.TOCEntryStylePropertiesArchive toc_properties = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *toc_properties_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOCEntryStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TOCEntryStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOCEntryStyleArchive::GetClassData() const { return &_class_data_; }

void TOCEntryStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TOCEntryStyleArchive *>(to)->MergeFrom(
      static_cast<const TOCEntryStyleArchive &>(from));
}


void TOCEntryStyleArchive::MergeFrom(const TOCEntryStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TOCEntryStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSWP::ParagraphStyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_toc_properties()->::TSWP::TOCEntryStylePropertiesArchive::MergeFrom(from._internal_toc_properties());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOCEntryStyleArchive::CopyFrom(const TOCEntryStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TOCEntryStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCEntryStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_toc_properties()) {
    if (!toc_properties_->IsInitialized()) return false;
  }
  return true;
}

void TOCEntryStyleArchive::InternalSwap(TOCEntryStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TOCEntryStyleArchive, toc_properties_)
      + sizeof(TOCEntryStyleArchive::toc_properties_)
      - PROTOBUF_FIELD_OFFSET(TOCEntryStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TOCEntryStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[36]);
}

// ===================================================================

class TOCSettingsArchive_TOCEntryData::_Internal {
 public:
  using HasBits = decltype(std::declval<TOCSettingsArchive_TOCEntryData>()._has_bits_);
  static const ::TSP::Reference& paragraph_style(const TOCSettingsArchive_TOCEntryData* msg);
  static void set_has_paragraph_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& toc_entry_style(const TOCSettingsArchive_TOCEntryData* msg);
  static void set_has_toc_entry_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_show_in_toc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Reference&
TOCSettingsArchive_TOCEntryData::_Internal::paragraph_style(const TOCSettingsArchive_TOCEntryData* msg) {
  return *msg->paragraph_style_;
}
const ::TSP::Reference&
TOCSettingsArchive_TOCEntryData::_Internal::toc_entry_style(const TOCSettingsArchive_TOCEntryData* msg) {
  return *msg->toc_entry_style_;
}
void TOCSettingsArchive_TOCEntryData::clear_paragraph_style() {
  if (paragraph_style_ != nullptr) paragraph_style_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TOCSettingsArchive_TOCEntryData::clear_toc_entry_style() {
  if (toc_entry_style_ != nullptr) toc_entry_style_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TOCSettingsArchive_TOCEntryData::TOCSettingsArchive_TOCEntryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.TOCSettingsArchive.TOCEntryData)
}
TOCSettingsArchive_TOCEntryData::TOCSettingsArchive_TOCEntryData(const TOCSettingsArchive_TOCEntryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_paragraph_style()) {
    paragraph_style_ = new ::TSP::Reference(*from.paragraph_style_);
  } else {
    paragraph_style_ = nullptr;
  }
  if (from._internal_has_toc_entry_style()) {
    toc_entry_style_ = new ::TSP::Reference(*from.toc_entry_style_);
  } else {
    toc_entry_style_ = nullptr;
  }
  show_in_toc_ = from.show_in_toc_;
  // @@protoc_insertion_point(copy_constructor:TSWP.TOCSettingsArchive.TOCEntryData)
}

inline void TOCSettingsArchive_TOCEntryData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&paragraph_style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&show_in_toc_) -
    reinterpret_cast<char*>(&paragraph_style_)) + sizeof(show_in_toc_));
}

TOCSettingsArchive_TOCEntryData::~TOCSettingsArchive_TOCEntryData() {
  // @@protoc_insertion_point(destructor:TSWP.TOCSettingsArchive.TOCEntryData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TOCSettingsArchive_TOCEntryData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete paragraph_style_;
  if (this != internal_default_instance()) delete toc_entry_style_;
}

void TOCSettingsArchive_TOCEntryData::ArenaDtor(void* object) {
  TOCSettingsArchive_TOCEntryData* _this = reinterpret_cast< TOCSettingsArchive_TOCEntryData* >(object);
  (void)_this;
}
void TOCSettingsArchive_TOCEntryData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TOCSettingsArchive_TOCEntryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TOCSettingsArchive_TOCEntryData::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TOCSettingsArchive.TOCEntryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(paragraph_style_ != nullptr);
      paragraph_style_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(toc_entry_style_ != nullptr);
      toc_entry_style_->Clear();
    }
  }
  show_in_toc_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOCSettingsArchive_TOCEntryData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference paragraph_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_paragraph_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference toc_entry_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_toc_entry_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_in_toc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_show_in_toc(&has_bits);
          show_in_toc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TOCSettingsArchive_TOCEntryData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TOCSettingsArchive.TOCEntryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference paragraph_style = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::paragraph_style(this), target, stream);
  }

  // optional .TSP.Reference toc_entry_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::toc_entry_style(this), target, stream);
  }

  // optional bool show_in_toc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_show_in_toc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TOCSettingsArchive.TOCEntryData)
  return target;
}

size_t TOCSettingsArchive_TOCEntryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TOCSettingsArchive.TOCEntryData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference paragraph_style = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *paragraph_style_);
    }

    // optional .TSP.Reference toc_entry_style = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *toc_entry_style_);
    }

    // optional bool show_in_toc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOCSettingsArchive_TOCEntryData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TOCSettingsArchive_TOCEntryData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOCSettingsArchive_TOCEntryData::GetClassData() const { return &_class_data_; }

void TOCSettingsArchive_TOCEntryData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TOCSettingsArchive_TOCEntryData *>(to)->MergeFrom(
      static_cast<const TOCSettingsArchive_TOCEntryData &>(from));
}


void TOCSettingsArchive_TOCEntryData::MergeFrom(const TOCSettingsArchive_TOCEntryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TOCSettingsArchive.TOCEntryData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_paragraph_style()->::TSP::Reference::MergeFrom(from._internal_paragraph_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_toc_entry_style()->::TSP::Reference::MergeFrom(from._internal_toc_entry_style());
    }
    if (cached_has_bits & 0x00000004u) {
      show_in_toc_ = from.show_in_toc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOCSettingsArchive_TOCEntryData::CopyFrom(const TOCSettingsArchive_TOCEntryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TOCSettingsArchive.TOCEntryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCSettingsArchive_TOCEntryData::IsInitialized() const {
  if (_internal_has_paragraph_style()) {
    if (!paragraph_style_->IsInitialized()) return false;
  }
  if (_internal_has_toc_entry_style()) {
    if (!toc_entry_style_->IsInitialized()) return false;
  }
  return true;
}

void TOCSettingsArchive_TOCEntryData::InternalSwap(TOCSettingsArchive_TOCEntryData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TOCSettingsArchive_TOCEntryData, show_in_toc_)
      + sizeof(TOCSettingsArchive_TOCEntryData::show_in_toc_)
      - PROTOBUF_FIELD_OFFSET(TOCSettingsArchive_TOCEntryData, paragraph_style_)>(
          reinterpret_cast<char*>(&paragraph_style_),
          reinterpret_cast<char*>(&other->paragraph_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TOCSettingsArchive_TOCEntryData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[37]);
}

// ===================================================================

class TOCSettingsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TOCSettingsArchive>()._has_bits_);
  static void set_has_toc_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_toc_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TOCSettingsArchive::TOCSettingsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.TOCSettingsArchive)
}
TOCSettingsArchive::TOCSettingsArchive(const TOCSettingsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  toc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_toc_name()) {
    toc_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_toc_name(), 
      GetArenaForAllocation());
  }
  toc_scope_ = from.toc_scope_;
  // @@protoc_insertion_point(copy_constructor:TSWP.TOCSettingsArchive)
}

inline void TOCSettingsArchive::SharedCtor() {
toc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
toc_scope_ = 0u;
}

TOCSettingsArchive::~TOCSettingsArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TOCSettingsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TOCSettingsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  toc_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TOCSettingsArchive::ArenaDtor(void* object) {
  TOCSettingsArchive* _this = reinterpret_cast< TOCSettingsArchive* >(object);
  (void)_this;
}
void TOCSettingsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TOCSettingsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TOCSettingsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TOCSettingsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    toc_name_.ClearNonDefaultToEmpty();
  }
  toc_scope_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOCSettingsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string toc_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_toc_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.TOCSettingsArchive.toc_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 toc_scope = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_toc_scope(&has_bits);
          toc_scope_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSWP.TOCSettingsArchive.TOCEntryData entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TOCSettingsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TOCSettingsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string toc_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_toc_name().data(), static_cast<int>(this->_internal_toc_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.TOCSettingsArchive.toc_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_toc_name(), target);
  }

  // optional uint32 toc_scope = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_toc_scope(), target);
  }

  // repeated .TSWP.TOCSettingsArchive.TOCEntryData entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TOCSettingsArchive)
  return target;
}

size_t TOCSettingsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TOCSettingsArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.TOCSettingsArchive.TOCEntryData entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string toc_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_toc_name());
    }

    // optional uint32 toc_scope = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_toc_scope());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOCSettingsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TOCSettingsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOCSettingsArchive::GetClassData() const { return &_class_data_; }

void TOCSettingsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TOCSettingsArchive *>(to)->MergeFrom(
      static_cast<const TOCSettingsArchive &>(from));
}


void TOCSettingsArchive::MergeFrom(const TOCSettingsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TOCSettingsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_toc_name(from._internal_toc_name());
    }
    if (cached_has_bits & 0x00000002u) {
      toc_scope_ = from.toc_scope_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOCSettingsArchive::CopyFrom(const TOCSettingsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TOCSettingsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCSettingsArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  return true;
}

void TOCSettingsArchive::InternalSwap(TOCSettingsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &toc_name_, GetArenaForAllocation(),
      &other->toc_name_, other->GetArenaForAllocation()
  );
  swap(toc_scope_, other->toc_scope_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TOCSettingsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[38]);
}

// ===================================================================

class TOCEntryInstanceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TOCEntryInstanceArchive>()._has_bits_);
  static void set_has_paragraph_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_page_number(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_number_format(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& indexed_style(const TOCEntryInstanceArchive* msg);
  static void set_has_indexed_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& indexed_list_style(const TOCEntryInstanceArchive* msg);
  static void set_has_indexed_list_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_indexed_list_start(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_indexed_paragraph_level(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_number_format_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000075) ^ 0x00000075) != 0;
  }
};

const ::TSP::Reference&
TOCEntryInstanceArchive::_Internal::indexed_style(const TOCEntryInstanceArchive* msg) {
  return *msg->indexed_style_;
}
const ::TSP::Reference&
TOCEntryInstanceArchive::_Internal::indexed_list_style(const TOCEntryInstanceArchive* msg) {
  return *msg->indexed_list_style_;
}
void TOCEntryInstanceArchive::clear_indexed_style() {
  if (indexed_style_ != nullptr) indexed_style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void TOCEntryInstanceArchive::clear_indexed_list_style() {
  if (indexed_list_style_ != nullptr) indexed_list_style_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
TOCEntryInstanceArchive::TOCEntryInstanceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.TOCEntryInstanceArchive)
}
TOCEntryInstanceArchive::TOCEntryInstanceArchive(const TOCEntryInstanceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  heading_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_heading()) {
    heading_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_heading(), 
      GetArenaForAllocation());
  }
  number_format_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_number_format_name()) {
    number_format_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_number_format_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_indexed_style()) {
    indexed_style_ = new ::TSP::Reference(*from.indexed_style_);
  } else {
    indexed_style_ = nullptr;
  }
  if (from._internal_has_indexed_list_style()) {
    indexed_list_style_ = new ::TSP::Reference(*from.indexed_list_style_);
  } else {
    indexed_list_style_ = nullptr;
  }
  ::memcpy(&paragraph_index_, &from.paragraph_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&indexed_paragraph_level_) -
    reinterpret_cast<char*>(&paragraph_index_)) + sizeof(indexed_paragraph_level_));
  // @@protoc_insertion_point(copy_constructor:TSWP.TOCEntryInstanceArchive)
}

inline void TOCEntryInstanceArchive::SharedCtor() {
heading_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
number_format_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&indexed_style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&indexed_paragraph_level_) -
    reinterpret_cast<char*>(&indexed_style_)) + sizeof(indexed_paragraph_level_));
}

TOCEntryInstanceArchive::~TOCEntryInstanceArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TOCEntryInstanceArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TOCEntryInstanceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  heading_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_format_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete indexed_style_;
  if (this != internal_default_instance()) delete indexed_list_style_;
}

void TOCEntryInstanceArchive::ArenaDtor(void* object) {
  TOCEntryInstanceArchive* _this = reinterpret_cast< TOCEntryInstanceArchive* >(object);
  (void)_this;
}
void TOCEntryInstanceArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TOCEntryInstanceArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TOCEntryInstanceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TOCEntryInstanceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      heading_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      number_format_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(indexed_style_ != nullptr);
      indexed_style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(indexed_list_style_ != nullptr);
      indexed_list_style_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&paragraph_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&indexed_list_start_) -
        reinterpret_cast<char*>(&paragraph_index_)) + sizeof(indexed_list_start_));
  }
  indexed_paragraph_level_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOCEntryInstanceArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 paragraph_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_paragraph_index(&has_bits);
          paragraph_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 page_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_page_number(&has_bits);
          page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 number_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_number_format(&has_bits);
          number_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string heading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_heading();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.TOCEntryInstanceArchive.heading");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference indexed_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_indexed_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference indexed_list_style = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_indexed_list_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 indexed_list_start = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_indexed_list_start(&has_bits);
          indexed_list_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 indexed_paragraph_level = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_indexed_paragraph_level(&has_bits);
          indexed_paragraph_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string number_format_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_number_format_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.TOCEntryInstanceArchive.number_format_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TOCEntryInstanceArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TOCEntryInstanceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 paragraph_index = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_paragraph_index(), target);
  }

  // required uint32 page_number = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page_number(), target);
  }

  // required uint32 number_format = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_number_format(), target);
  }

  // required string heading = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_heading().data(), static_cast<int>(this->_internal_heading().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.TOCEntryInstanceArchive.heading");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_heading(), target);
  }

  // required .TSP.Reference indexed_style = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::indexed_style(this), target, stream);
  }

  // optional .TSP.Reference indexed_list_style = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::indexed_list_style(this), target, stream);
  }

  // optional uint32 indexed_list_start = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_indexed_list_start(), target);
  }

  // optional uint32 indexed_paragraph_level = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_indexed_paragraph_level(), target);
  }

  // optional string number_format_name = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_number_format_name().data(), static_cast<int>(this->_internal_number_format_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.TOCEntryInstanceArchive.number_format_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_number_format_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TOCEntryInstanceArchive)
  return target;
}

size_t TOCEntryInstanceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.TOCEntryInstanceArchive)
  size_t total_size = 0;

  if (_internal_has_heading()) {
    // required string heading = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_heading());
  }

  if (_internal_has_indexed_style()) {
    // required .TSP.Reference indexed_style = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *indexed_style_);
  }

  if (_internal_has_paragraph_index()) {
    // required uint32 paragraph_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_paragraph_index());
  }

  if (_internal_has_page_number()) {
    // required uint32 page_number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_number());
  }

  if (_internal_has_number_format()) {
    // required uint32 number_format = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_format());
  }

  return total_size;
}
size_t TOCEntryInstanceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TOCEntryInstanceArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000075) ^ 0x00000075) == 0) {  // All required fields are present.
    // required string heading = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_heading());

    // required .TSP.Reference indexed_style = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *indexed_style_);

    // required uint32 paragraph_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_paragraph_index());

    // required uint32 page_number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_number());

    // required uint32 number_format = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_format());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string number_format_name = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_number_format_name());
  }

  // optional .TSP.Reference indexed_list_style = 6;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *indexed_list_style_);
  }

  // optional uint32 indexed_list_start = 7;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_indexed_list_start());
  }

  // optional uint32 indexed_paragraph_level = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_indexed_paragraph_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOCEntryInstanceArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TOCEntryInstanceArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOCEntryInstanceArchive::GetClassData() const { return &_class_data_; }

void TOCEntryInstanceArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TOCEntryInstanceArchive *>(to)->MergeFrom(
      static_cast<const TOCEntryInstanceArchive &>(from));
}


void TOCEntryInstanceArchive::MergeFrom(const TOCEntryInstanceArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TOCEntryInstanceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_heading(from._internal_heading());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_number_format_name(from._internal_number_format_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_indexed_style()->::TSP::Reference::MergeFrom(from._internal_indexed_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_indexed_list_style()->::TSP::Reference::MergeFrom(from._internal_indexed_list_style());
    }
    if (cached_has_bits & 0x00000010u) {
      paragraph_index_ = from.paragraph_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      page_number_ = from.page_number_;
    }
    if (cached_has_bits & 0x00000040u) {
      number_format_ = from.number_format_;
    }
    if (cached_has_bits & 0x00000080u) {
      indexed_list_start_ = from.indexed_list_start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_indexed_paragraph_level(from._internal_indexed_paragraph_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOCEntryInstanceArchive::CopyFrom(const TOCEntryInstanceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TOCEntryInstanceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCEntryInstanceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_indexed_style()) {
    if (!indexed_style_->IsInitialized()) return false;
  }
  if (_internal_has_indexed_list_style()) {
    if (!indexed_list_style_->IsInitialized()) return false;
  }
  return true;
}

void TOCEntryInstanceArchive::InternalSwap(TOCEntryInstanceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &heading_, GetArenaForAllocation(),
      &other->heading_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &number_format_name_, GetArenaForAllocation(),
      &other->number_format_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TOCEntryInstanceArchive, indexed_paragraph_level_)
      + sizeof(TOCEntryInstanceArchive::indexed_paragraph_level_)
      - PROTOBUF_FIELD_OFFSET(TOCEntryInstanceArchive, indexed_style_)>(
          reinterpret_cast<char*>(&indexed_style_),
          reinterpret_cast<char*>(&other->indexed_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TOCEntryInstanceArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[39]);
}

// ===================================================================

class UndoTransaction_GenericTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_GenericTransaction>()._has_bits_);
  static void set_has_value1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

UndoTransaction_GenericTransaction::UndoTransaction_GenericTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.GenericTransaction)
}
UndoTransaction_GenericTransaction::UndoTransaction_GenericTransaction(const UndoTransaction_GenericTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value1_, &from.value1_,
    static_cast<size_t>(reinterpret_cast<char*>(&value3_) -
    reinterpret_cast<char*>(&value1_)) + sizeof(value3_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.GenericTransaction)
}

inline void UndoTransaction_GenericTransaction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value3_) -
    reinterpret_cast<char*>(&value1_)) + sizeof(value3_));
}

UndoTransaction_GenericTransaction::~UndoTransaction_GenericTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.GenericTransaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UndoTransaction_GenericTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UndoTransaction_GenericTransaction::ArenaDtor(void* object) {
  UndoTransaction_GenericTransaction* _this = reinterpret_cast< UndoTransaction_GenericTransaction* >(object);
  (void)_this;
}
void UndoTransaction_GenericTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndoTransaction_GenericTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UndoTransaction_GenericTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.GenericTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&value1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value3_) -
        reinterpret_cast<char*>(&value1_)) + sizeof(value3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_GenericTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 value1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value1(&has_bits);
          value1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 value2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value2(&has_bits);
          value2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 value3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_value3(&has_bits);
          value3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndoTransaction_GenericTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.GenericTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 value1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value1(), target);
  }

  // required uint32 value2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value2(), target);
  }

  // required uint32 value3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_value3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.GenericTransaction)
  return target;
}

size_t UndoTransaction_GenericTransaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.UndoTransaction.GenericTransaction)
  size_t total_size = 0;

  if (_internal_has_value1()) {
    // required uint32 value1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value1());
  }

  if (_internal_has_value2()) {
    // required uint32 value2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value2());
  }

  if (_internal_has_value3()) {
    // required uint32 value3 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value3());
  }

  return total_size;
}
size_t UndoTransaction_GenericTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.GenericTransaction)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 value1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value1());

    // required uint32 value2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value2());

    // required uint32 value3 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value3());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_GenericTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UndoTransaction_GenericTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_GenericTransaction::GetClassData() const { return &_class_data_; }

void UndoTransaction_GenericTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UndoTransaction_GenericTransaction *>(to)->MergeFrom(
      static_cast<const UndoTransaction_GenericTransaction &>(from));
}


void UndoTransaction_GenericTransaction::MergeFrom(const UndoTransaction_GenericTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.GenericTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      value1_ = from.value1_;
    }
    if (cached_has_bits & 0x00000002u) {
      value2_ = from.value2_;
    }
    if (cached_has_bits & 0x00000004u) {
      value3_ = from.value3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_GenericTransaction::CopyFrom(const UndoTransaction_GenericTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.GenericTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_GenericTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UndoTransaction_GenericTransaction::InternalSwap(UndoTransaction_GenericTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_GenericTransaction, value3_)
      + sizeof(UndoTransaction_GenericTransaction::value3_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_GenericTransaction, value1_)>(
          reinterpret_cast<char*>(&value1_),
          reinterpret_cast<char*>(&other->value1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_GenericTransaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[40]);
}

// ===================================================================

class UndoTransaction_TextTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_TextTransaction>()._has_bits_);
  static void set_has_insert_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_insert_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_string_to_delete(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

UndoTransaction_TextTransaction::UndoTransaction_TextTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.TextTransaction)
}
UndoTransaction_TextTransaction::UndoTransaction_TextTransaction(const UndoTransaction_TextTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_to_delete_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string_to_delete()) {
    string_to_delete_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string_to_delete(), 
      GetArenaForAllocation());
  }
  ::memcpy(&insert_location_, &from.insert_location_,
    static_cast<size_t>(reinterpret_cast<char*>(&insert_length_) -
    reinterpret_cast<char*>(&insert_location_)) + sizeof(insert_length_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.TextTransaction)
}

inline void UndoTransaction_TextTransaction::SharedCtor() {
string_to_delete_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&insert_location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&insert_length_) -
    reinterpret_cast<char*>(&insert_location_)) + sizeof(insert_length_));
}

UndoTransaction_TextTransaction::~UndoTransaction_TextTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.TextTransaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UndoTransaction_TextTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  string_to_delete_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UndoTransaction_TextTransaction::ArenaDtor(void* object) {
  UndoTransaction_TextTransaction* _this = reinterpret_cast< UndoTransaction_TextTransaction* >(object);
  (void)_this;
}
void UndoTransaction_TextTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndoTransaction_TextTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UndoTransaction_TextTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.TextTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    string_to_delete_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&insert_location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&insert_length_) -
        reinterpret_cast<char*>(&insert_location_)) + sizeof(insert_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_TextTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 insert_location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_insert_location(&has_bits);
          insert_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 insert_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_insert_length(&has_bits);
          insert_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string string_to_delete = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_string_to_delete();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.UndoTransaction.TextTransaction.string_to_delete");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndoTransaction_TextTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.TextTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 insert_location = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_insert_location(), target);
  }

  // required uint32 insert_length = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_insert_length(), target);
  }

  // optional string string_to_delete = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_to_delete().data(), static_cast<int>(this->_internal_string_to_delete().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.UndoTransaction.TextTransaction.string_to_delete");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_string_to_delete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.TextTransaction)
  return target;
}

size_t UndoTransaction_TextTransaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.UndoTransaction.TextTransaction)
  size_t total_size = 0;

  if (_internal_has_insert_location()) {
    // required uint32 insert_location = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_insert_location());
  }

  if (_internal_has_insert_length()) {
    // required uint32 insert_length = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_insert_length());
  }

  return total_size;
}
size_t UndoTransaction_TextTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.TextTransaction)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 insert_location = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_insert_location());

    // required uint32 insert_length = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_insert_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string string_to_delete = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string_to_delete());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_TextTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UndoTransaction_TextTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_TextTransaction::GetClassData() const { return &_class_data_; }

void UndoTransaction_TextTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UndoTransaction_TextTransaction *>(to)->MergeFrom(
      static_cast<const UndoTransaction_TextTransaction &>(from));
}


void UndoTransaction_TextTransaction::MergeFrom(const UndoTransaction_TextTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.TextTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string_to_delete(from._internal_string_to_delete());
    }
    if (cached_has_bits & 0x00000002u) {
      insert_location_ = from.insert_location_;
    }
    if (cached_has_bits & 0x00000004u) {
      insert_length_ = from.insert_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_TextTransaction::CopyFrom(const UndoTransaction_TextTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.TextTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_TextTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UndoTransaction_TextTransaction::InternalSwap(UndoTransaction_TextTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &string_to_delete_, GetArenaForAllocation(),
      &other->string_to_delete_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_TextTransaction, insert_length_)
      + sizeof(UndoTransaction_TextTransaction::insert_length_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_TextTransaction, insert_location_)>(
          reinterpret_cast<char*>(&insert_location_),
          reinterpret_cast<char*>(&other->insert_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_TextTransaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[41]);
}

// ===================================================================

class UndoTransaction_CharIndexTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_CharIndexTransaction>()._has_bits_);
  static void set_has_char_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& object(const UndoTransaction_CharIndexTransaction* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSP::Reference&
UndoTransaction_CharIndexTransaction::_Internal::object(const UndoTransaction_CharIndexTransaction* msg) {
  return *msg->object_;
}
void UndoTransaction_CharIndexTransaction::clear_object() {
  if (object_ != nullptr) object_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UndoTransaction_CharIndexTransaction::UndoTransaction_CharIndexTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.CharIndexTransaction)
}
UndoTransaction_CharIndexTransaction::UndoTransaction_CharIndexTransaction(const UndoTransaction_CharIndexTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::TSP::Reference(*from.object_);
  } else {
    object_ = nullptr;
  }
  ::memcpy(&char_index_, &from.char_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&char_index_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.CharIndexTransaction)
}

inline void UndoTransaction_CharIndexTransaction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&object_)) + sizeof(count_));
}

UndoTransaction_CharIndexTransaction::~UndoTransaction_CharIndexTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.CharIndexTransaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UndoTransaction_CharIndexTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void UndoTransaction_CharIndexTransaction::ArenaDtor(void* object) {
  UndoTransaction_CharIndexTransaction* _this = reinterpret_cast< UndoTransaction_CharIndexTransaction* >(object);
  (void)_this;
}
void UndoTransaction_CharIndexTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndoTransaction_CharIndexTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UndoTransaction_CharIndexTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.CharIndexTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(object_ != nullptr);
    object_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&char_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&char_index_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_CharIndexTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 char_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_char_index(&has_bits);
          char_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference object = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndoTransaction_CharIndexTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.CharIndexTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 char_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_char_index(), target);
  }

  // required uint32 count = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // optional .TSP.Reference object = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.CharIndexTransaction)
  return target;
}

size_t UndoTransaction_CharIndexTransaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.UndoTransaction.CharIndexTransaction)
  size_t total_size = 0;

  if (_internal_has_char_index()) {
    // required uint32 char_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_char_index());
  }

  if (_internal_has_count()) {
    // required uint32 count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  return total_size;
}
size_t UndoTransaction_CharIndexTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.CharIndexTransaction)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 char_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_char_index());

    // required uint32 count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference object = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_CharIndexTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UndoTransaction_CharIndexTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_CharIndexTransaction::GetClassData() const { return &_class_data_; }

void UndoTransaction_CharIndexTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UndoTransaction_CharIndexTransaction *>(to)->MergeFrom(
      static_cast<const UndoTransaction_CharIndexTransaction &>(from));
}


void UndoTransaction_CharIndexTransaction::MergeFrom(const UndoTransaction_CharIndexTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.CharIndexTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_object()->::TSP::Reference::MergeFrom(from._internal_object());
    }
    if (cached_has_bits & 0x00000002u) {
      char_index_ = from.char_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_CharIndexTransaction::CopyFrom(const UndoTransaction_CharIndexTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.CharIndexTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_CharIndexTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_object()) {
    if (!object_->IsInitialized()) return false;
  }
  return true;
}

void UndoTransaction_CharIndexTransaction::InternalSwap(UndoTransaction_CharIndexTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_CharIndexTransaction, count_)
      + sizeof(UndoTransaction_CharIndexTransaction::count_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_CharIndexTransaction, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_CharIndexTransaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[42]);
}

// ===================================================================

class UndoTransaction_ReplaceCharIndexTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_ReplaceCharIndexTransaction>()._has_bits_);
  static void set_has_attribute_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_char_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UndoTransaction_ReplaceCharIndexTransaction::UndoTransaction_ReplaceCharIndexTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
}
UndoTransaction_ReplaceCharIndexTransaction::UndoTransaction_ReplaceCharIndexTransaction(const UndoTransaction_ReplaceCharIndexTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&attribute_index_, &from.attribute_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&char_index_) -
    reinterpret_cast<char*>(&attribute_index_)) + sizeof(char_index_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
}

inline void UndoTransaction_ReplaceCharIndexTransaction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&attribute_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&char_index_) -
    reinterpret_cast<char*>(&attribute_index_)) + sizeof(char_index_));
}

UndoTransaction_ReplaceCharIndexTransaction::~UndoTransaction_ReplaceCharIndexTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UndoTransaction_ReplaceCharIndexTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UndoTransaction_ReplaceCharIndexTransaction::ArenaDtor(void* object) {
  UndoTransaction_ReplaceCharIndexTransaction* _this = reinterpret_cast< UndoTransaction_ReplaceCharIndexTransaction* >(object);
  (void)_this;
}
void UndoTransaction_ReplaceCharIndexTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndoTransaction_ReplaceCharIndexTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UndoTransaction_ReplaceCharIndexTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&attribute_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&char_index_) -
        reinterpret_cast<char*>(&attribute_index_)) + sizeof(char_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_ReplaceCharIndexTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 attribute_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_attribute_index(&has_bits);
          attribute_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 char_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_char_index(&has_bits);
          char_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndoTransaction_ReplaceCharIndexTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 attribute_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attribute_index(), target);
  }

  // required uint32 char_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_char_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
  return target;
}

size_t UndoTransaction_ReplaceCharIndexTransaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
  size_t total_size = 0;

  if (_internal_has_attribute_index()) {
    // required uint32 attribute_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute_index());
  }

  if (_internal_has_char_index()) {
    // required uint32 char_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_char_index());
  }

  return total_size;
}
size_t UndoTransaction_ReplaceCharIndexTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 attribute_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute_index());

    // required uint32 char_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_char_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_ReplaceCharIndexTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UndoTransaction_ReplaceCharIndexTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_ReplaceCharIndexTransaction::GetClassData() const { return &_class_data_; }

void UndoTransaction_ReplaceCharIndexTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UndoTransaction_ReplaceCharIndexTransaction *>(to)->MergeFrom(
      static_cast<const UndoTransaction_ReplaceCharIndexTransaction &>(from));
}


void UndoTransaction_ReplaceCharIndexTransaction::MergeFrom(const UndoTransaction_ReplaceCharIndexTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      attribute_index_ = from.attribute_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      char_index_ = from.char_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_ReplaceCharIndexTransaction::CopyFrom(const UndoTransaction_ReplaceCharIndexTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_ReplaceCharIndexTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UndoTransaction_ReplaceCharIndexTransaction::InternalSwap(UndoTransaction_ReplaceCharIndexTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_ReplaceCharIndexTransaction, char_index_)
      + sizeof(UndoTransaction_ReplaceCharIndexTransaction::char_index_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_ReplaceCharIndexTransaction, attribute_index_)>(
          reinterpret_cast<char*>(&attribute_index_),
          reinterpret_cast<char*>(&other->attribute_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_ReplaceCharIndexTransaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[43]);
}

// ===================================================================

class UndoTransaction_AttributeIndexTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_AttributeIndexTransaction>()._has_bits_);
  static void set_has_attribute_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_char_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& object(const UndoTransaction_AttributeIndexTransaction* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000c) ^ 0x0000000c) != 0;
  }
};

const ::TSP::Reference&
UndoTransaction_AttributeIndexTransaction::_Internal::object(const UndoTransaction_AttributeIndexTransaction* msg) {
  return *msg->object_;
}
void UndoTransaction_AttributeIndexTransaction::clear_object() {
  if (object_ != nullptr) object_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
UndoTransaction_AttributeIndexTransaction::UndoTransaction_AttributeIndexTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.AttributeIndexTransaction)
}
UndoTransaction_AttributeIndexTransaction::UndoTransaction_AttributeIndexTransaction(const UndoTransaction_AttributeIndexTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string()) {
    string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_object()) {
    object_ = new ::TSP::Reference(*from.object_);
  } else {
    object_ = nullptr;
  }
  ::memcpy(&attribute_index_, &from.attribute_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&char_index_) -
    reinterpret_cast<char*>(&attribute_index_)) + sizeof(char_index_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.AttributeIndexTransaction)
}

inline void UndoTransaction_AttributeIndexTransaction::SharedCtor() {
string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&char_index_) -
    reinterpret_cast<char*>(&object_)) + sizeof(char_index_));
}

UndoTransaction_AttributeIndexTransaction::~UndoTransaction_AttributeIndexTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.AttributeIndexTransaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UndoTransaction_AttributeIndexTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_;
}

void UndoTransaction_AttributeIndexTransaction::ArenaDtor(void* object) {
  UndoTransaction_AttributeIndexTransaction* _this = reinterpret_cast< UndoTransaction_AttributeIndexTransaction* >(object);
  (void)_this;
}
void UndoTransaction_AttributeIndexTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndoTransaction_AttributeIndexTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UndoTransaction_AttributeIndexTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.AttributeIndexTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(object_ != nullptr);
      object_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&attribute_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&char_index_) -
        reinterpret_cast<char*>(&attribute_index_)) + sizeof(char_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_AttributeIndexTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 attribute_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_attribute_index(&has_bits);
          attribute_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 char_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_char_index(&has_bits);
          char_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference object = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.UndoTransaction.AttributeIndexTransaction.string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndoTransaction_AttributeIndexTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.AttributeIndexTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 attribute_index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attribute_index(), target);
  }

  // required uint32 char_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_char_index(), target);
  }

  // optional .TSP.Reference object = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::object(this), target, stream);
  }

  // optional string string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.UndoTransaction.AttributeIndexTransaction.string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.AttributeIndexTransaction)
  return target;
}

size_t UndoTransaction_AttributeIndexTransaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.UndoTransaction.AttributeIndexTransaction)
  size_t total_size = 0;

  if (_internal_has_attribute_index()) {
    // required uint32 attribute_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute_index());
  }

  if (_internal_has_char_index()) {
    // required uint32 char_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_char_index());
  }

  return total_size;
}
size_t UndoTransaction_AttributeIndexTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.AttributeIndexTransaction)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint32 attribute_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute_index());

    // required uint32 char_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_char_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string string = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
    }

    // optional .TSP.Reference object = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_AttributeIndexTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UndoTransaction_AttributeIndexTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_AttributeIndexTransaction::GetClassData() const { return &_class_data_; }

void UndoTransaction_AttributeIndexTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UndoTransaction_AttributeIndexTransaction *>(to)->MergeFrom(
      static_cast<const UndoTransaction_AttributeIndexTransaction &>(from));
}


void UndoTransaction_AttributeIndexTransaction::MergeFrom(const UndoTransaction_AttributeIndexTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.AttributeIndexTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string(from._internal_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_object()->::TSP::Reference::MergeFrom(from._internal_object());
    }
    if (cached_has_bits & 0x00000004u) {
      attribute_index_ = from.attribute_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      char_index_ = from.char_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_AttributeIndexTransaction::CopyFrom(const UndoTransaction_AttributeIndexTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.AttributeIndexTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_AttributeIndexTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_object()) {
    if (!object_->IsInitialized()) return false;
  }
  return true;
}

void UndoTransaction_AttributeIndexTransaction::InternalSwap(UndoTransaction_AttributeIndexTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &string_, GetArenaForAllocation(),
      &other->string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_AttributeIndexTransaction, char_index_)
      + sizeof(UndoTransaction_AttributeIndexTransaction::char_index_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_AttributeIndexTransaction, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_AttributeIndexTransaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[44]);
}

// ===================================================================

class UndoTransaction_InsertAttributeTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_InsertAttributeTransaction>()._has_bits_);
  static void set_has_attribute_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attribute_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& object(const UndoTransaction_InsertAttributeTransaction* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000c) ^ 0x0000000c) != 0;
  }
};

const ::TSP::Reference&
UndoTransaction_InsertAttributeTransaction::_Internal::object(const UndoTransaction_InsertAttributeTransaction* msg) {
  return *msg->object_;
}
void UndoTransaction_InsertAttributeTransaction::clear_object() {
  if (object_ != nullptr) object_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
UndoTransaction_InsertAttributeTransaction::UndoTransaction_InsertAttributeTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.InsertAttributeTransaction)
}
UndoTransaction_InsertAttributeTransaction::UndoTransaction_InsertAttributeTransaction(const UndoTransaction_InsertAttributeTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string()) {
    string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_object()) {
    object_ = new ::TSP::Reference(*from.object_);
  } else {
    object_ = nullptr;
  }
  ::memcpy(&attribute_index_, &from.attribute_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&attribute_count_) -
    reinterpret_cast<char*>(&attribute_index_)) + sizeof(attribute_count_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.InsertAttributeTransaction)
}

inline void UndoTransaction_InsertAttributeTransaction::SharedCtor() {
string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attribute_count_) -
    reinterpret_cast<char*>(&object_)) + sizeof(attribute_count_));
}

UndoTransaction_InsertAttributeTransaction::~UndoTransaction_InsertAttributeTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.InsertAttributeTransaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UndoTransaction_InsertAttributeTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_;
}

void UndoTransaction_InsertAttributeTransaction::ArenaDtor(void* object) {
  UndoTransaction_InsertAttributeTransaction* _this = reinterpret_cast< UndoTransaction_InsertAttributeTransaction* >(object);
  (void)_this;
}
void UndoTransaction_InsertAttributeTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndoTransaction_InsertAttributeTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UndoTransaction_InsertAttributeTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.InsertAttributeTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(object_ != nullptr);
      object_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&attribute_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&attribute_count_) -
        reinterpret_cast<char*>(&attribute_index_)) + sizeof(attribute_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_InsertAttributeTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 attribute_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_attribute_index(&has_bits);
          attribute_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 attribute_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_attribute_count(&has_bits);
          attribute_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference object = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.UndoTransaction.InsertAttributeTransaction.string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndoTransaction_InsertAttributeTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.InsertAttributeTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 attribute_index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attribute_index(), target);
  }

  // required uint32 attribute_count = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_attribute_count(), target);
  }

  // optional .TSP.Reference object = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::object(this), target, stream);
  }

  // optional string string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.UndoTransaction.InsertAttributeTransaction.string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.InsertAttributeTransaction)
  return target;
}

size_t UndoTransaction_InsertAttributeTransaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.UndoTransaction.InsertAttributeTransaction)
  size_t total_size = 0;

  if (_internal_has_attribute_index()) {
    // required uint32 attribute_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute_index());
  }

  if (_internal_has_attribute_count()) {
    // required uint32 attribute_count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute_count());
  }

  return total_size;
}
size_t UndoTransaction_InsertAttributeTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.InsertAttributeTransaction)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint32 attribute_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute_index());

    // required uint32 attribute_count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string string = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
    }

    // optional .TSP.Reference object = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_InsertAttributeTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UndoTransaction_InsertAttributeTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_InsertAttributeTransaction::GetClassData() const { return &_class_data_; }

void UndoTransaction_InsertAttributeTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UndoTransaction_InsertAttributeTransaction *>(to)->MergeFrom(
      static_cast<const UndoTransaction_InsertAttributeTransaction &>(from));
}


void UndoTransaction_InsertAttributeTransaction::MergeFrom(const UndoTransaction_InsertAttributeTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.InsertAttributeTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string(from._internal_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_object()->::TSP::Reference::MergeFrom(from._internal_object());
    }
    if (cached_has_bits & 0x00000004u) {
      attribute_index_ = from.attribute_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      attribute_count_ = from.attribute_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_InsertAttributeTransaction::CopyFrom(const UndoTransaction_InsertAttributeTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.InsertAttributeTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_InsertAttributeTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_object()) {
    if (!object_->IsInitialized()) return false;
  }
  return true;
}

void UndoTransaction_InsertAttributeTransaction::InternalSwap(UndoTransaction_InsertAttributeTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &string_, GetArenaForAllocation(),
      &other->string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_InsertAttributeTransaction, attribute_count_)
      + sizeof(UndoTransaction_InsertAttributeTransaction::attribute_count_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_InsertAttributeTransaction, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_InsertAttributeTransaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[45]);
}

// ===================================================================

class UndoTransaction_InsertNilTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_InsertNilTransaction>()._has_bits_);
  static void set_has_attribute_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attribute_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UndoTransaction_InsertNilTransaction::UndoTransaction_InsertNilTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.InsertNilTransaction)
}
UndoTransaction_InsertNilTransaction::UndoTransaction_InsertNilTransaction(const UndoTransaction_InsertNilTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&attribute_index_, &from.attribute_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&attribute_count_) -
    reinterpret_cast<char*>(&attribute_index_)) + sizeof(attribute_count_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.InsertNilTransaction)
}

inline void UndoTransaction_InsertNilTransaction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&attribute_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attribute_count_) -
    reinterpret_cast<char*>(&attribute_index_)) + sizeof(attribute_count_));
}

UndoTransaction_InsertNilTransaction::~UndoTransaction_InsertNilTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.InsertNilTransaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UndoTransaction_InsertNilTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UndoTransaction_InsertNilTransaction::ArenaDtor(void* object) {
  UndoTransaction_InsertNilTransaction* _this = reinterpret_cast< UndoTransaction_InsertNilTransaction* >(object);
  (void)_this;
}
void UndoTransaction_InsertNilTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndoTransaction_InsertNilTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UndoTransaction_InsertNilTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.InsertNilTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&attribute_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&attribute_count_) -
        reinterpret_cast<char*>(&attribute_index_)) + sizeof(attribute_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_InsertNilTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 attribute_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_attribute_index(&has_bits);
          attribute_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 attribute_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_attribute_count(&has_bits);
          attribute_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndoTransaction_InsertNilTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.InsertNilTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 attribute_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attribute_index(), target);
  }

  // required uint32 attribute_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_attribute_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.InsertNilTransaction)
  return target;
}

size_t UndoTransaction_InsertNilTransaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.UndoTransaction.InsertNilTransaction)
  size_t total_size = 0;

  if (_internal_has_attribute_index()) {
    // required uint32 attribute_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute_index());
  }

  if (_internal_has_attribute_count()) {
    // required uint32 attribute_count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute_count());
  }

  return total_size;
}
size_t UndoTransaction_InsertNilTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.InsertNilTransaction)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 attribute_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute_index());

    // required uint32 attribute_count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_InsertNilTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UndoTransaction_InsertNilTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_InsertNilTransaction::GetClassData() const { return &_class_data_; }

void UndoTransaction_InsertNilTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UndoTransaction_InsertNilTransaction *>(to)->MergeFrom(
      static_cast<const UndoTransaction_InsertNilTransaction &>(from));
}


void UndoTransaction_InsertNilTransaction::MergeFrom(const UndoTransaction_InsertNilTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.InsertNilTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      attribute_index_ = from.attribute_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      attribute_count_ = from.attribute_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_InsertNilTransaction::CopyFrom(const UndoTransaction_InsertNilTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.InsertNilTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_InsertNilTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UndoTransaction_InsertNilTransaction::InternalSwap(UndoTransaction_InsertNilTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_InsertNilTransaction, attribute_count_)
      + sizeof(UndoTransaction_InsertNilTransaction::attribute_count_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_InsertNilTransaction, attribute_index_)>(
          reinterpret_cast<char*>(&attribute_index_),
          reinterpret_cast<char*>(&other->attribute_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_InsertNilTransaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[46]);
}

// ===================================================================

class UndoTransaction_CharDeltaTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_CharDeltaTransaction>()._has_bits_);
  static void set_has_char_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attribute_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_char_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

UndoTransaction_CharDeltaTransaction::UndoTransaction_CharDeltaTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.CharDeltaTransaction)
}
UndoTransaction_CharDeltaTransaction::UndoTransaction_CharDeltaTransaction(const UndoTransaction_CharDeltaTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&char_index_, &from.char_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&char_delta_) -
    reinterpret_cast<char*>(&char_index_)) + sizeof(char_delta_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.CharDeltaTransaction)
}

inline void UndoTransaction_CharDeltaTransaction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&char_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&char_delta_) -
    reinterpret_cast<char*>(&char_index_)) + sizeof(char_delta_));
}

UndoTransaction_CharDeltaTransaction::~UndoTransaction_CharDeltaTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.CharDeltaTransaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UndoTransaction_CharDeltaTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UndoTransaction_CharDeltaTransaction::ArenaDtor(void* object) {
  UndoTransaction_CharDeltaTransaction* _this = reinterpret_cast< UndoTransaction_CharDeltaTransaction* >(object);
  (void)_this;
}
void UndoTransaction_CharDeltaTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndoTransaction_CharDeltaTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UndoTransaction_CharDeltaTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.CharDeltaTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&char_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&char_delta_) -
        reinterpret_cast<char*>(&char_index_)) + sizeof(char_delta_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_CharDeltaTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 char_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_char_index(&has_bits);
          char_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 attribute_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_attribute_index(&has_bits);
          attribute_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required sint32 char_delta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_char_delta(&has_bits);
          char_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndoTransaction_CharDeltaTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.CharDeltaTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 char_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_char_index(), target);
  }

  // required uint32 attribute_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_attribute_index(), target);
  }

  // required sint32 char_delta = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_char_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.CharDeltaTransaction)
  return target;
}

size_t UndoTransaction_CharDeltaTransaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.UndoTransaction.CharDeltaTransaction)
  size_t total_size = 0;

  if (_internal_has_char_index()) {
    // required uint32 char_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_char_index());
  }

  if (_internal_has_attribute_index()) {
    // required uint32 attribute_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute_index());
  }

  if (_internal_has_char_delta()) {
    // required sint32 char_delta = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_char_delta());
  }

  return total_size;
}
size_t UndoTransaction_CharDeltaTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.CharDeltaTransaction)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 char_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_char_index());

    // required uint32 attribute_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute_index());

    // required sint32 char_delta = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_char_delta());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_CharDeltaTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UndoTransaction_CharDeltaTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_CharDeltaTransaction::GetClassData() const { return &_class_data_; }

void UndoTransaction_CharDeltaTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UndoTransaction_CharDeltaTransaction *>(to)->MergeFrom(
      static_cast<const UndoTransaction_CharDeltaTransaction &>(from));
}


void UndoTransaction_CharDeltaTransaction::MergeFrom(const UndoTransaction_CharDeltaTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.CharDeltaTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      char_index_ = from.char_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      attribute_index_ = from.attribute_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      char_delta_ = from.char_delta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_CharDeltaTransaction::CopyFrom(const UndoTransaction_CharDeltaTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.CharDeltaTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_CharDeltaTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UndoTransaction_CharDeltaTransaction::InternalSwap(UndoTransaction_CharDeltaTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_CharDeltaTransaction, char_delta_)
      + sizeof(UndoTransaction_CharDeltaTransaction::char_delta_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_CharDeltaTransaction, char_index_)>(
          reinterpret_cast<char*>(&char_index_),
          reinterpret_cast<char*>(&other->char_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_CharDeltaTransaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[47]);
}

// ===================================================================

class UndoTransaction_ParagraphDataTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_ParagraphDataTransaction>()._has_bits_);
  static void set_has_attribute_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_first(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_second(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_char_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

UndoTransaction_ParagraphDataTransaction::UndoTransaction_ParagraphDataTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.ParagraphDataTransaction)
}
UndoTransaction_ParagraphDataTransaction::UndoTransaction_ParagraphDataTransaction(const UndoTransaction_ParagraphDataTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&attribute_index_, &from.attribute_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&char_index_) -
    reinterpret_cast<char*>(&attribute_index_)) + sizeof(char_index_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.ParagraphDataTransaction)
}

inline void UndoTransaction_ParagraphDataTransaction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&attribute_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&char_index_) -
    reinterpret_cast<char*>(&attribute_index_)) + sizeof(char_index_));
}

UndoTransaction_ParagraphDataTransaction::~UndoTransaction_ParagraphDataTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.ParagraphDataTransaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UndoTransaction_ParagraphDataTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UndoTransaction_ParagraphDataTransaction::ArenaDtor(void* object) {
  UndoTransaction_ParagraphDataTransaction* _this = reinterpret_cast< UndoTransaction_ParagraphDataTransaction* >(object);
  (void)_this;
}
void UndoTransaction_ParagraphDataTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndoTransaction_ParagraphDataTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UndoTransaction_ParagraphDataTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.ParagraphDataTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&attribute_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&char_index_) -
        reinterpret_cast<char*>(&attribute_index_)) + sizeof(char_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_ParagraphDataTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 attribute_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_attribute_index(&has_bits);
          attribute_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 first = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_first(&has_bits);
          first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 second = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_second(&has_bits);
          second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 char_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_char_index(&has_bits);
          char_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndoTransaction_ParagraphDataTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.ParagraphDataTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 attribute_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attribute_index(), target);
  }

  // required uint32 first = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_first(), target);
  }

  // required uint32 second = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_second(), target);
  }

  // required uint32 char_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_char_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.ParagraphDataTransaction)
  return target;
}

size_t UndoTransaction_ParagraphDataTransaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.UndoTransaction.ParagraphDataTransaction)
  size_t total_size = 0;

  if (_internal_has_attribute_index()) {
    // required uint32 attribute_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute_index());
  }

  if (_internal_has_first()) {
    // required uint32 first = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_first());
  }

  if (_internal_has_second()) {
    // required uint32 second = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_second());
  }

  if (_internal_has_char_index()) {
    // required uint32 char_index = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_char_index());
  }

  return total_size;
}
size_t UndoTransaction_ParagraphDataTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.ParagraphDataTransaction)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 attribute_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute_index());

    // required uint32 first = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_first());

    // required uint32 second = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_second());

    // required uint32 char_index = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_char_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_ParagraphDataTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UndoTransaction_ParagraphDataTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_ParagraphDataTransaction::GetClassData() const { return &_class_data_; }

void UndoTransaction_ParagraphDataTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UndoTransaction_ParagraphDataTransaction *>(to)->MergeFrom(
      static_cast<const UndoTransaction_ParagraphDataTransaction &>(from));
}


void UndoTransaction_ParagraphDataTransaction::MergeFrom(const UndoTransaction_ParagraphDataTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.ParagraphDataTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      attribute_index_ = from.attribute_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      first_ = from.first_;
    }
    if (cached_has_bits & 0x00000004u) {
      second_ = from.second_;
    }
    if (cached_has_bits & 0x00000008u) {
      char_index_ = from.char_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_ParagraphDataTransaction::CopyFrom(const UndoTransaction_ParagraphDataTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.ParagraphDataTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_ParagraphDataTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UndoTransaction_ParagraphDataTransaction::InternalSwap(UndoTransaction_ParagraphDataTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_ParagraphDataTransaction, char_index_)
      + sizeof(UndoTransaction_ParagraphDataTransaction::char_index_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_ParagraphDataTransaction, attribute_index_)>(
          reinterpret_cast<char*>(&attribute_index_),
          reinterpret_cast<char*>(&other->attribute_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_ParagraphDataTransaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[48]);
}

// ===================================================================

class UndoTransaction_ObjectDOLCTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_ObjectDOLCTransaction>()._has_bits_);
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& object(const UndoTransaction_ObjectDOLCTransaction* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::Reference&
UndoTransaction_ObjectDOLCTransaction::_Internal::object(const UndoTransaction_ObjectDOLCTransaction* msg) {
  return *msg->object_;
}
void UndoTransaction_ObjectDOLCTransaction::clear_object() {
  if (object_ != nullptr) object_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UndoTransaction_ObjectDOLCTransaction::UndoTransaction_ObjectDOLCTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.ObjectDOLCTransaction)
}
UndoTransaction_ObjectDOLCTransaction::UndoTransaction_ObjectDOLCTransaction(const UndoTransaction_ObjectDOLCTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::TSP::Reference(*from.object_);
  } else {
    object_ = nullptr;
  }
  flags_ = from.flags_;
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.ObjectDOLCTransaction)
}

inline void UndoTransaction_ObjectDOLCTransaction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&object_)) + sizeof(flags_));
}

UndoTransaction_ObjectDOLCTransaction::~UndoTransaction_ObjectDOLCTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.ObjectDOLCTransaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UndoTransaction_ObjectDOLCTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void UndoTransaction_ObjectDOLCTransaction::ArenaDtor(void* object) {
  UndoTransaction_ObjectDOLCTransaction* _this = reinterpret_cast< UndoTransaction_ObjectDOLCTransaction* >(object);
  (void)_this;
}
void UndoTransaction_ObjectDOLCTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndoTransaction_ObjectDOLCTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UndoTransaction_ObjectDOLCTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.ObjectDOLCTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(object_ != nullptr);
    object_->Clear();
  }
  flags_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_ObjectDOLCTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndoTransaction_ObjectDOLCTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.ObjectDOLCTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 flags = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flags(), target);
  }

  // optional .TSP.Reference object = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.ObjectDOLCTransaction)
  return target;
}

size_t UndoTransaction_ObjectDOLCTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.ObjectDOLCTransaction)
  size_t total_size = 0;

  // required uint32 flags = 1;
  if (_internal_has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference object = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_ObjectDOLCTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UndoTransaction_ObjectDOLCTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_ObjectDOLCTransaction::GetClassData() const { return &_class_data_; }

void UndoTransaction_ObjectDOLCTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UndoTransaction_ObjectDOLCTransaction *>(to)->MergeFrom(
      static_cast<const UndoTransaction_ObjectDOLCTransaction &>(from));
}


void UndoTransaction_ObjectDOLCTransaction::MergeFrom(const UndoTransaction_ObjectDOLCTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.ObjectDOLCTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_object()->::TSP::Reference::MergeFrom(from._internal_object());
    }
    if (cached_has_bits & 0x00000002u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_ObjectDOLCTransaction::CopyFrom(const UndoTransaction_ObjectDOLCTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.ObjectDOLCTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_ObjectDOLCTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_object()) {
    if (!object_->IsInitialized()) return false;
  }
  return true;
}

void UndoTransaction_ObjectDOLCTransaction::InternalSwap(UndoTransaction_ObjectDOLCTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_ObjectDOLCTransaction, flags_)
      + sizeof(UndoTransaction_ObjectDOLCTransaction::flags_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_ObjectDOLCTransaction, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_ObjectDOLCTransaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[49]);
}

// ===================================================================

class UndoTransaction_CTDateTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_CTDateTransaction>()._has_bits_);
  static void set_has_attribute_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Date& date(const UndoTransaction_CTDateTransaction* msg);
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::Date&
UndoTransaction_CTDateTransaction::_Internal::date(const UndoTransaction_CTDateTransaction* msg) {
  return *msg->date_;
}
void UndoTransaction_CTDateTransaction::clear_date() {
  if (date_ != nullptr) date_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UndoTransaction_CTDateTransaction::UndoTransaction_CTDateTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.CTDateTransaction)
}
UndoTransaction_CTDateTransaction::UndoTransaction_CTDateTransaction(const UndoTransaction_CTDateTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_date()) {
    date_ = new ::TSP::Date(*from.date_);
  } else {
    date_ = nullptr;
  }
  attribute_index_ = from.attribute_index_;
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.CTDateTransaction)
}

inline void UndoTransaction_CTDateTransaction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&date_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attribute_index_) -
    reinterpret_cast<char*>(&date_)) + sizeof(attribute_index_));
}

UndoTransaction_CTDateTransaction::~UndoTransaction_CTDateTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.CTDateTransaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UndoTransaction_CTDateTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete date_;
}

void UndoTransaction_CTDateTransaction::ArenaDtor(void* object) {
  UndoTransaction_CTDateTransaction* _this = reinterpret_cast< UndoTransaction_CTDateTransaction* >(object);
  (void)_this;
}
void UndoTransaction_CTDateTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndoTransaction_CTDateTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UndoTransaction_CTDateTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.CTDateTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(date_ != nullptr);
    date_->Clear();
  }
  attribute_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_CTDateTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 attribute_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_attribute_index(&has_bits);
          attribute_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Date date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndoTransaction_CTDateTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.CTDateTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 attribute_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attribute_index(), target);
  }

  // optional .TSP.Date date = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::date(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.CTDateTransaction)
  return target;
}

size_t UndoTransaction_CTDateTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.CTDateTransaction)
  size_t total_size = 0;

  // required uint32 attribute_index = 1;
  if (_internal_has_attribute_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute_index());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Date date = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *date_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_CTDateTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UndoTransaction_CTDateTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_CTDateTransaction::GetClassData() const { return &_class_data_; }

void UndoTransaction_CTDateTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UndoTransaction_CTDateTransaction *>(to)->MergeFrom(
      static_cast<const UndoTransaction_CTDateTransaction &>(from));
}


void UndoTransaction_CTDateTransaction::MergeFrom(const UndoTransaction_CTDateTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.CTDateTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_date()->::TSP::Date::MergeFrom(from._internal_date());
    }
    if (cached_has_bits & 0x00000002u) {
      attribute_index_ = from.attribute_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_CTDateTransaction::CopyFrom(const UndoTransaction_CTDateTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.CTDateTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_CTDateTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_date()) {
    if (!date_->IsInitialized()) return false;
  }
  return true;
}

void UndoTransaction_CTDateTransaction::InternalSwap(UndoTransaction_CTDateTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_CTDateTransaction, attribute_index_)
      + sizeof(UndoTransaction_CTDateTransaction::attribute_index_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_CTDateTransaction, date_)>(
          reinterpret_cast<char*>(&date_),
          reinterpret_cast<char*>(&other->date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_CTDateTransaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[50]);
}

// ===================================================================

class UndoTransaction_UnionTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_UnionTransaction>()._has_bits_);
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_table(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSWP::UndoTransaction_GenericTransaction& generic(const UndoTransaction_UnionTransaction* msg);
  static void set_has_generic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSWP::UndoTransaction_TextTransaction& text(const UndoTransaction_UnionTransaction* msg);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSWP::UndoTransaction_CharIndexTransaction& char_index(const UndoTransaction_UnionTransaction* msg);
  static void set_has_char_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSWP::UndoTransaction_ReplaceCharIndexTransaction& replace_char_index(const UndoTransaction_UnionTransaction* msg);
  static void set_has_replace_char_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSWP::UndoTransaction_AttributeIndexTransaction& attribute_index(const UndoTransaction_UnionTransaction* msg);
  static void set_has_attribute_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSWP::UndoTransaction_InsertNilTransaction& insert_nil(const UndoTransaction_UnionTransaction* msg);
  static void set_has_insert_nil(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSWP::UndoTransaction_InsertAttributeTransaction& insert_attribute(const UndoTransaction_UnionTransaction* msg);
  static void set_has_insert_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSWP::UndoTransaction_CharDeltaTransaction& char_delta(const UndoTransaction_UnionTransaction* msg);
  static void set_has_char_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSWP::UndoTransaction_ParagraphDataTransaction& paragraph_data(const UndoTransaction_UnionTransaction* msg);
  static void set_has_paragraph_data(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSWP::UndoTransaction_ObjectDOLCTransaction& object_dolc(const UndoTransaction_UnionTransaction* msg);
  static void set_has_object_dolc(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSWP::UndoTransaction_CTDateTransaction& ct_date(const UndoTransaction_UnionTransaction* msg);
  static void set_has_ct_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00001000) ^ 0x00001000) != 0;
  }
};

const ::TSWP::UndoTransaction_GenericTransaction&
UndoTransaction_UnionTransaction::_Internal::generic(const UndoTransaction_UnionTransaction* msg) {
  return *msg->generic_;
}
const ::TSWP::UndoTransaction_TextTransaction&
UndoTransaction_UnionTransaction::_Internal::text(const UndoTransaction_UnionTransaction* msg) {
  return *msg->text_;
}
const ::TSWP::UndoTransaction_CharIndexTransaction&
UndoTransaction_UnionTransaction::_Internal::char_index(const UndoTransaction_UnionTransaction* msg) {
  return *msg->char_index_;
}
const ::TSWP::UndoTransaction_ReplaceCharIndexTransaction&
UndoTransaction_UnionTransaction::_Internal::replace_char_index(const UndoTransaction_UnionTransaction* msg) {
  return *msg->replace_char_index_;
}
const ::TSWP::UndoTransaction_AttributeIndexTransaction&
UndoTransaction_UnionTransaction::_Internal::attribute_index(const UndoTransaction_UnionTransaction* msg) {
  return *msg->attribute_index_;
}
const ::TSWP::UndoTransaction_InsertNilTransaction&
UndoTransaction_UnionTransaction::_Internal::insert_nil(const UndoTransaction_UnionTransaction* msg) {
  return *msg->insert_nil_;
}
const ::TSWP::UndoTransaction_InsertAttributeTransaction&
UndoTransaction_UnionTransaction::_Internal::insert_attribute(const UndoTransaction_UnionTransaction* msg) {
  return *msg->insert_attribute_;
}
const ::TSWP::UndoTransaction_CharDeltaTransaction&
UndoTransaction_UnionTransaction::_Internal::char_delta(const UndoTransaction_UnionTransaction* msg) {
  return *msg->char_delta_;
}
const ::TSWP::UndoTransaction_ParagraphDataTransaction&
UndoTransaction_UnionTransaction::_Internal::paragraph_data(const UndoTransaction_UnionTransaction* msg) {
  return *msg->paragraph_data_;
}
const ::TSWP::UndoTransaction_ObjectDOLCTransaction&
UndoTransaction_UnionTransaction::_Internal::object_dolc(const UndoTransaction_UnionTransaction* msg) {
  return *msg->object_dolc_;
}
const ::TSWP::UndoTransaction_CTDateTransaction&
UndoTransaction_UnionTransaction::_Internal::ct_date(const UndoTransaction_UnionTransaction* msg) {
  return *msg->ct_date_;
}
UndoTransaction_UnionTransaction::UndoTransaction_UnionTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.UnionTransaction)
}
UndoTransaction_UnionTransaction::UndoTransaction_UnionTransaction(const UndoTransaction_UnionTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_generic()) {
    generic_ = new ::TSWP::UndoTransaction_GenericTransaction(*from.generic_);
  } else {
    generic_ = nullptr;
  }
  if (from._internal_has_text()) {
    text_ = new ::TSWP::UndoTransaction_TextTransaction(*from.text_);
  } else {
    text_ = nullptr;
  }
  if (from._internal_has_char_index()) {
    char_index_ = new ::TSWP::UndoTransaction_CharIndexTransaction(*from.char_index_);
  } else {
    char_index_ = nullptr;
  }
  if (from._internal_has_replace_char_index()) {
    replace_char_index_ = new ::TSWP::UndoTransaction_ReplaceCharIndexTransaction(*from.replace_char_index_);
  } else {
    replace_char_index_ = nullptr;
  }
  if (from._internal_has_attribute_index()) {
    attribute_index_ = new ::TSWP::UndoTransaction_AttributeIndexTransaction(*from.attribute_index_);
  } else {
    attribute_index_ = nullptr;
  }
  if (from._internal_has_insert_nil()) {
    insert_nil_ = new ::TSWP::UndoTransaction_InsertNilTransaction(*from.insert_nil_);
  } else {
    insert_nil_ = nullptr;
  }
  if (from._internal_has_insert_attribute()) {
    insert_attribute_ = new ::TSWP::UndoTransaction_InsertAttributeTransaction(*from.insert_attribute_);
  } else {
    insert_attribute_ = nullptr;
  }
  if (from._internal_has_char_delta()) {
    char_delta_ = new ::TSWP::UndoTransaction_CharDeltaTransaction(*from.char_delta_);
  } else {
    char_delta_ = nullptr;
  }
  if (from._internal_has_paragraph_data()) {
    paragraph_data_ = new ::TSWP::UndoTransaction_ParagraphDataTransaction(*from.paragraph_data_);
  } else {
    paragraph_data_ = nullptr;
  }
  if (from._internal_has_object_dolc()) {
    object_dolc_ = new ::TSWP::UndoTransaction_ObjectDOLCTransaction(*from.object_dolc_);
  } else {
    object_dolc_ = nullptr;
  }
  if (from._internal_has_ct_date()) {
    ct_date_ = new ::TSWP::UndoTransaction_CTDateTransaction(*from.ct_date_);
  } else {
    ct_date_ = nullptr;
  }
  ::memcpy(&table_, &from.table_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&table_)) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.UnionTransaction)
}

inline void UndoTransaction_UnionTransaction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&generic_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_) -
    reinterpret_cast<char*>(&generic_)) + sizeof(table_));
kind_ = 1;
}

UndoTransaction_UnionTransaction::~UndoTransaction_UnionTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.UnionTransaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UndoTransaction_UnionTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete generic_;
  if (this != internal_default_instance()) delete text_;
  if (this != internal_default_instance()) delete char_index_;
  if (this != internal_default_instance()) delete replace_char_index_;
  if (this != internal_default_instance()) delete attribute_index_;
  if (this != internal_default_instance()) delete insert_nil_;
  if (this != internal_default_instance()) delete insert_attribute_;
  if (this != internal_default_instance()) delete char_delta_;
  if (this != internal_default_instance()) delete paragraph_data_;
  if (this != internal_default_instance()) delete object_dolc_;
  if (this != internal_default_instance()) delete ct_date_;
}

void UndoTransaction_UnionTransaction::ArenaDtor(void* object) {
  UndoTransaction_UnionTransaction* _this = reinterpret_cast< UndoTransaction_UnionTransaction* >(object);
  (void)_this;
}
void UndoTransaction_UnionTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndoTransaction_UnionTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UndoTransaction_UnionTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.UnionTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(generic_ != nullptr);
      generic_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(text_ != nullptr);
      text_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(char_index_ != nullptr);
      char_index_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(replace_char_index_ != nullptr);
      replace_char_index_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(attribute_index_ != nullptr);
      attribute_index_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(insert_nil_ != nullptr);
      insert_nil_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(insert_attribute_ != nullptr);
      insert_attribute_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(char_delta_ != nullptr);
      char_delta_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(paragraph_data_ != nullptr);
      paragraph_data_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(object_dolc_ != nullptr);
      object_dolc_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(ct_date_ != nullptr);
      ct_date_->Clear();
    }
  }
  if (cached_has_bits & 0x00001800u) {
    table_ = 0u;
    kind_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_UnionTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.UndoTransaction.UndoKind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::UndoTransaction_UndoKind_IsValid(val))) {
            _internal_set_kind(static_cast<::TSWP::UndoTransaction_UndoKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_table(&has_bits);
          table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.GenericTransaction generic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_generic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.TextTransaction text = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.CharIndexTransaction char_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_char_index(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.ReplaceCharIndexTransaction replace_char_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_replace_char_index(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.AttributeIndexTransaction attribute_index = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_attribute_index(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.InsertNilTransaction insert_nil = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_nil(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.InsertAttributeTransaction insert_attribute = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_attribute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.CharDeltaTransaction char_delta = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_char_delta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.ParagraphDataTransaction paragraph_data = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_paragraph_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.ObjectDOLCTransaction object_dolc = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_dolc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.CTDateTransaction ct_date = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_ct_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndoTransaction_UnionTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.UnionTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.UndoTransaction.UndoKind kind = 1;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // optional uint32 table = 2;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_table(), target);
  }

  // optional .TSWP.UndoTransaction.GenericTransaction generic = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::generic(this), target, stream);
  }

  // optional .TSWP.UndoTransaction.TextTransaction text = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::text(this), target, stream);
  }

  // optional .TSWP.UndoTransaction.CharIndexTransaction char_index = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::char_index(this), target, stream);
  }

  // optional .TSWP.UndoTransaction.ReplaceCharIndexTransaction replace_char_index = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::replace_char_index(this), target, stream);
  }

  // optional .TSWP.UndoTransaction.AttributeIndexTransaction attribute_index = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::attribute_index(this), target, stream);
  }

  // optional .TSWP.UndoTransaction.InsertNilTransaction insert_nil = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::insert_nil(this), target, stream);
  }

  // optional .TSWP.UndoTransaction.InsertAttributeTransaction insert_attribute = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::insert_attribute(this), target, stream);
  }

  // optional .TSWP.UndoTransaction.CharDeltaTransaction char_delta = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::char_delta(this), target, stream);
  }

  // optional .TSWP.UndoTransaction.ParagraphDataTransaction paragraph_data = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::paragraph_data(this), target, stream);
  }

  // optional .TSWP.UndoTransaction.ObjectDOLCTransaction object_dolc = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::object_dolc(this), target, stream);
  }

  // optional .TSWP.UndoTransaction.CTDateTransaction ct_date = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::ct_date(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.UnionTransaction)
  return target;
}

size_t UndoTransaction_UnionTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.UnionTransaction)
  size_t total_size = 0;

  // required .TSWP.UndoTransaction.UndoKind kind = 1;
  if (_internal_has_kind()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSWP.UndoTransaction.GenericTransaction generic = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *generic_);
    }

    // optional .TSWP.UndoTransaction.TextTransaction text = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_);
    }

    // optional .TSWP.UndoTransaction.CharIndexTransaction char_index = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *char_index_);
    }

    // optional .TSWP.UndoTransaction.ReplaceCharIndexTransaction replace_char_index = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *replace_char_index_);
    }

    // optional .TSWP.UndoTransaction.AttributeIndexTransaction attribute_index = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attribute_index_);
    }

    // optional .TSWP.UndoTransaction.InsertNilTransaction insert_nil = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *insert_nil_);
    }

    // optional .TSWP.UndoTransaction.InsertAttributeTransaction insert_attribute = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *insert_attribute_);
    }

    // optional .TSWP.UndoTransaction.CharDeltaTransaction char_delta = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *char_delta_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .TSWP.UndoTransaction.ParagraphDataTransaction paragraph_data = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *paragraph_data_);
    }

    // optional .TSWP.UndoTransaction.ObjectDOLCTransaction object_dolc = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_dolc_);
    }

    // optional .TSWP.UndoTransaction.CTDateTransaction ct_date = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ct_date_);
    }

    // optional uint32 table = 2;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_table());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_UnionTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UndoTransaction_UnionTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_UnionTransaction::GetClassData() const { return &_class_data_; }

void UndoTransaction_UnionTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UndoTransaction_UnionTransaction *>(to)->MergeFrom(
      static_cast<const UndoTransaction_UnionTransaction &>(from));
}


void UndoTransaction_UnionTransaction::MergeFrom(const UndoTransaction_UnionTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.UnionTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_generic()->::TSWP::UndoTransaction_GenericTransaction::MergeFrom(from._internal_generic());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_text()->::TSWP::UndoTransaction_TextTransaction::MergeFrom(from._internal_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_char_index()->::TSWP::UndoTransaction_CharIndexTransaction::MergeFrom(from._internal_char_index());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_replace_char_index()->::TSWP::UndoTransaction_ReplaceCharIndexTransaction::MergeFrom(from._internal_replace_char_index());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_attribute_index()->::TSWP::UndoTransaction_AttributeIndexTransaction::MergeFrom(from._internal_attribute_index());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_insert_nil()->::TSWP::UndoTransaction_InsertNilTransaction::MergeFrom(from._internal_insert_nil());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_insert_attribute()->::TSWP::UndoTransaction_InsertAttributeTransaction::MergeFrom(from._internal_insert_attribute());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_char_delta()->::TSWP::UndoTransaction_CharDeltaTransaction::MergeFrom(from._internal_char_delta());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_paragraph_data()->::TSWP::UndoTransaction_ParagraphDataTransaction::MergeFrom(from._internal_paragraph_data());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_object_dolc()->::TSWP::UndoTransaction_ObjectDOLCTransaction::MergeFrom(from._internal_object_dolc());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_ct_date()->::TSWP::UndoTransaction_CTDateTransaction::MergeFrom(from._internal_ct_date());
    }
    if (cached_has_bits & 0x00000800u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00001000u) {
      kind_ = from.kind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_UnionTransaction::CopyFrom(const UndoTransaction_UnionTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.UnionTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_UnionTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_generic()) {
    if (!generic_->IsInitialized()) return false;
  }
  if (_internal_has_text()) {
    if (!text_->IsInitialized()) return false;
  }
  if (_internal_has_char_index()) {
    if (!char_index_->IsInitialized()) return false;
  }
  if (_internal_has_replace_char_index()) {
    if (!replace_char_index_->IsInitialized()) return false;
  }
  if (_internal_has_attribute_index()) {
    if (!attribute_index_->IsInitialized()) return false;
  }
  if (_internal_has_insert_nil()) {
    if (!insert_nil_->IsInitialized()) return false;
  }
  if (_internal_has_insert_attribute()) {
    if (!insert_attribute_->IsInitialized()) return false;
  }
  if (_internal_has_char_delta()) {
    if (!char_delta_->IsInitialized()) return false;
  }
  if (_internal_has_paragraph_data()) {
    if (!paragraph_data_->IsInitialized()) return false;
  }
  if (_internal_has_object_dolc()) {
    if (!object_dolc_->IsInitialized()) return false;
  }
  if (_internal_has_ct_date()) {
    if (!ct_date_->IsInitialized()) return false;
  }
  return true;
}

void UndoTransaction_UnionTransaction::InternalSwap(UndoTransaction_UnionTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_UnionTransaction, table_)
      + sizeof(UndoTransaction_UnionTransaction::table_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_UnionTransaction, generic_)>(
          reinterpret_cast<char*>(&generic_),
          reinterpret_cast<char*>(&other->generic_));
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_UnionTransaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[51]);
}

// ===================================================================

class UndoTransaction_StorageAction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_StorageAction>()._has_bits_);
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_table(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Range& range(const UndoTransaction_StorageAction* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& object(const UndoTransaction_StorageAction* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Date& date(const UndoTransaction_StorageAction* msg);
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_paragraph_level(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_paragraph_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_paragraph_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_placement_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_placement_uuid_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& undo_object(const UndoTransaction_StorageAction* msg);
  static void set_has_undo_object(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000040) ^ 0x00000040) != 0;
  }
};

const ::TSP::Range&
UndoTransaction_StorageAction::_Internal::range(const UndoTransaction_StorageAction* msg) {
  return *msg->range_;
}
const ::TSP::Reference&
UndoTransaction_StorageAction::_Internal::object(const UndoTransaction_StorageAction* msg) {
  return *msg->object_;
}
const ::TSP::Date&
UndoTransaction_StorageAction::_Internal::date(const UndoTransaction_StorageAction* msg) {
  return *msg->date_;
}
const ::TSP::Reference&
UndoTransaction_StorageAction::_Internal::undo_object(const UndoTransaction_StorageAction* msg) {
  return *msg->undo_object_;
}
void UndoTransaction_StorageAction::clear_range() {
  if (range_ != nullptr) range_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void UndoTransaction_StorageAction::clear_object() {
  if (object_ != nullptr) object_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void UndoTransaction_StorageAction::clear_date() {
  if (date_ != nullptr) date_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void UndoTransaction_StorageAction::clear_undo_object() {
  if (undo_object_ != nullptr) undo_object_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
UndoTransaction_StorageAction::UndoTransaction_StorageAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.StorageAction)
}
UndoTransaction_StorageAction::UndoTransaction_StorageAction(const UndoTransaction_StorageAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string()) {
    string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string(), 
      GetArenaForAllocation());
  }
  placement_uuid_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_placement_uuid_path()) {
    placement_uuid_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_placement_uuid_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_range()) {
    range_ = new ::TSP::Range(*from.range_);
  } else {
    range_ = nullptr;
  }
  if (from._internal_has_object()) {
    object_ = new ::TSP::Reference(*from.object_);
  } else {
    object_ = nullptr;
  }
  if (from._internal_has_date()) {
    date_ = new ::TSP::Date(*from.date_);
  } else {
    date_ = nullptr;
  }
  if (from._internal_has_undo_object()) {
    undo_object_ = new ::TSP::Reference(*from.undo_object_);
  } else {
    undo_object_ = nullptr;
  }
  ::memcpy(&kind_, &from.kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&placement_index_) -
    reinterpret_cast<char*>(&kind_)) + sizeof(placement_index_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.StorageAction)
}

inline void UndoTransaction_StorageAction::SharedCtor() {
string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
placement_uuid_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&placement_index_) -
    reinterpret_cast<char*>(&range_)) + sizeof(placement_index_));
}

UndoTransaction_StorageAction::~UndoTransaction_StorageAction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.StorageAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UndoTransaction_StorageAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placement_uuid_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete range_;
  if (this != internal_default_instance()) delete object_;
  if (this != internal_default_instance()) delete date_;
  if (this != internal_default_instance()) delete undo_object_;
}

void UndoTransaction_StorageAction::ArenaDtor(void* object) {
  UndoTransaction_StorageAction* _this = reinterpret_cast< UndoTransaction_StorageAction* >(object);
  (void)_this;
}
void UndoTransaction_StorageAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndoTransaction_StorageAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UndoTransaction_StorageAction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.StorageAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      placement_uuid_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(range_ != nullptr);
      range_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(object_ != nullptr);
      object_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(date_ != nullptr);
      date_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(undo_object_ != nullptr);
      undo_object_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&kind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&kind_)) + sizeof(flags_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&table_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&placement_index_) -
        reinterpret_cast<char*>(&table_)) + sizeof(placement_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_StorageAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.UndoTransaction.ActionKind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::UndoTransaction_ActionKind_IsValid(val))) {
            _internal_set_kind(static_cast<::TSWP::UndoTransaction_ActionKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_table(&has_bits);
          table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Range range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string string = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.UndoTransaction.StorageAction.string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference object = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Date date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 paragraph_level = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_paragraph_level(&has_bits);
          paragraph_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 paragraph_flags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_paragraph_flags(&has_bits);
          paragraph_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 paragraph_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_paragraph_value(&has_bits);
          paragraph_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 placement_index = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_placement_index(&has_bits);
          placement_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string placement_uuid_path = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_placement_uuid_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.UndoTransaction.StorageAction.placement_uuid_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_object = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndoTransaction_StorageAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.StorageAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.UndoTransaction.ActionKind kind = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(), target);
  }

  // optional uint32 table = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_table(), target);
  }

  // optional .TSP.Range range = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::range(this), target, stream);
  }

  // optional string string = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.UndoTransaction.StorageAction.string");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_string(), target);
  }

  // optional .TSP.Reference object = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::object(this), target, stream);
  }

  // optional .TSP.Date date = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::date(this), target, stream);
  }

  // optional uint32 paragraph_level = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_paragraph_level(), target);
  }

  // optional uint32 paragraph_flags = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_paragraph_flags(), target);
  }

  // optional uint32 paragraph_value = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_paragraph_value(), target);
  }

  // optional int32 placement_index = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_placement_index(), target);
  }

  // optional string placement_uuid_path = 12;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_placement_uuid_path().data(), static_cast<int>(this->_internal_placement_uuid_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.UndoTransaction.StorageAction.placement_uuid_path");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_placement_uuid_path(), target);
  }

  // optional .TSP.Reference undo_object = 13;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::undo_object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.StorageAction)
  return target;
}

size_t UndoTransaction_StorageAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.StorageAction)
  size_t total_size = 0;

  // required .TSWP.UndoTransaction.ActionKind kind = 1;
  if (_internal_has_kind()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string string = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
    }

    // optional string placement_uuid_path = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_placement_uuid_path());
    }

    // optional .TSP.Range range = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *range_);
    }

    // optional .TSP.Reference object = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_);
    }

    // optional .TSP.Date date = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *date_);
    }

    // optional .TSP.Reference undo_object = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_object_);
    }

  }
  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 table = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_table());
    }

    // optional uint32 paragraph_level = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_paragraph_level());
    }

    // optional uint32 paragraph_flags = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_paragraph_flags());
    }

    // optional uint32 paragraph_value = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_paragraph_value());
    }

    // optional int32 placement_index = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_placement_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_StorageAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UndoTransaction_StorageAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_StorageAction::GetClassData() const { return &_class_data_; }

void UndoTransaction_StorageAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UndoTransaction_StorageAction *>(to)->MergeFrom(
      static_cast<const UndoTransaction_StorageAction &>(from));
}


void UndoTransaction_StorageAction::MergeFrom(const UndoTransaction_StorageAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.StorageAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string(from._internal_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_placement_uuid_path(from._internal_placement_uuid_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_range()->::TSP::Range::MergeFrom(from._internal_range());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_object()->::TSP::Reference::MergeFrom(from._internal_object());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_date()->::TSP::Date::MergeFrom(from._internal_date());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_undo_object()->::TSP::Reference::MergeFrom(from._internal_undo_object());
    }
    if (cached_has_bits & 0x00000040u) {
      kind_ = from.kind_;
    }
    if (cached_has_bits & 0x00000080u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000200u) {
      paragraph_level_ = from.paragraph_level_;
    }
    if (cached_has_bits & 0x00000400u) {
      paragraph_flags_ = from.paragraph_flags_;
    }
    if (cached_has_bits & 0x00000800u) {
      paragraph_value_ = from.paragraph_value_;
    }
    if (cached_has_bits & 0x00001000u) {
      placement_index_ = from.placement_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_StorageAction::CopyFrom(const UndoTransaction_StorageAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.StorageAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_StorageAction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_range()) {
    if (!range_->IsInitialized()) return false;
  }
  if (_internal_has_object()) {
    if (!object_->IsInitialized()) return false;
  }
  if (_internal_has_date()) {
    if (!date_->IsInitialized()) return false;
  }
  if (_internal_has_undo_object()) {
    if (!undo_object_->IsInitialized()) return false;
  }
  return true;
}

void UndoTransaction_StorageAction::InternalSwap(UndoTransaction_StorageAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &string_, GetArenaForAllocation(),
      &other->string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &placement_uuid_path_, GetArenaForAllocation(),
      &other->placement_uuid_path_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_StorageAction, placement_index_)
      + sizeof(UndoTransaction_StorageAction::placement_index_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_StorageAction, range_)>(
          reinterpret_cast<char*>(&range_),
          reinterpret_cast<char*>(&other->range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_StorageAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[52]);
}

// ===================================================================

class UndoTransaction_StorageActionGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_StorageActionGroup>()._has_bits_);
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

UndoTransaction_StorageActionGroup::UndoTransaction_StorageActionGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  forward_actions_(arena),
  inverse_forward_actions_(arena),
  inverse_detail_actions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.StorageActionGroup)
}
UndoTransaction_StorageActionGroup::UndoTransaction_StorageActionGroup(const UndoTransaction_StorageActionGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      forward_actions_(from.forward_actions_),
      inverse_forward_actions_(from.inverse_forward_actions_),
      inverse_detail_actions_(from.inverse_detail_actions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.StorageActionGroup)
}

inline void UndoTransaction_StorageActionGroup::SharedCtor() {
kind_ = 0;
}

UndoTransaction_StorageActionGroup::~UndoTransaction_StorageActionGroup() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.StorageActionGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UndoTransaction_StorageActionGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UndoTransaction_StorageActionGroup::ArenaDtor(void* object) {
  UndoTransaction_StorageActionGroup* _this = reinterpret_cast< UndoTransaction_StorageActionGroup* >(object);
  (void)_this;
}
void UndoTransaction_StorageActionGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndoTransaction_StorageActionGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UndoTransaction_StorageActionGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.StorageActionGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  forward_actions_.Clear();
  inverse_forward_actions_.Clear();
  inverse_detail_actions_.Clear();
  kind_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_StorageActionGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.UndoTransaction.ActionGroupKind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::UndoTransaction_ActionGroupKind_IsValid(val))) {
            _internal_set_kind(static_cast<::TSWP::UndoTransaction_ActionGroupKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .TSWP.UndoTransaction.StorageAction forward_actions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_forward_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSWP.UndoTransaction.StorageAction inverse_forward_actions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inverse_forward_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSWP.UndoTransaction.StorageAction inverse_detail_actions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inverse_detail_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndoTransaction_StorageActionGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.StorageActionGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.UndoTransaction.ActionGroupKind kind = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // repeated .TSWP.UndoTransaction.StorageAction forward_actions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_forward_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_forward_actions(i), target, stream);
  }

  // repeated .TSWP.UndoTransaction.StorageAction inverse_forward_actions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inverse_forward_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_inverse_forward_actions(i), target, stream);
  }

  // repeated .TSWP.UndoTransaction.StorageAction inverse_detail_actions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inverse_detail_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_inverse_detail_actions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.StorageActionGroup)
  return target;
}

size_t UndoTransaction_StorageActionGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.StorageActionGroup)
  size_t total_size = 0;

  // required .TSWP.UndoTransaction.ActionGroupKind kind = 1;
  if (_internal_has_kind()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.UndoTransaction.StorageAction forward_actions = 3;
  total_size += 1UL * this->_internal_forward_actions_size();
  for (const auto& msg : this->forward_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSWP.UndoTransaction.StorageAction inverse_forward_actions = 4;
  total_size += 1UL * this->_internal_inverse_forward_actions_size();
  for (const auto& msg : this->inverse_forward_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSWP.UndoTransaction.StorageAction inverse_detail_actions = 6;
  total_size += 1UL * this->_internal_inverse_detail_actions_size();
  for (const auto& msg : this->inverse_detail_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_StorageActionGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UndoTransaction_StorageActionGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_StorageActionGroup::GetClassData() const { return &_class_data_; }

void UndoTransaction_StorageActionGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UndoTransaction_StorageActionGroup *>(to)->MergeFrom(
      static_cast<const UndoTransaction_StorageActionGroup &>(from));
}


void UndoTransaction_StorageActionGroup::MergeFrom(const UndoTransaction_StorageActionGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.StorageActionGroup)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  forward_actions_.MergeFrom(from.forward_actions_);
  inverse_forward_actions_.MergeFrom(from.inverse_forward_actions_);
  inverse_detail_actions_.MergeFrom(from.inverse_detail_actions_);
  if (from._internal_has_kind()) {
    _internal_set_kind(from._internal_kind());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_StorageActionGroup::CopyFrom(const UndoTransaction_StorageActionGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.StorageActionGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_StorageActionGroup::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(forward_actions_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(inverse_forward_actions_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(inverse_detail_actions_)) return false;
  return true;
}

void UndoTransaction_StorageActionGroup::InternalSwap(UndoTransaction_StorageActionGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  forward_actions_.InternalSwap(&other->forward_actions_);
  inverse_forward_actions_.InternalSwap(&other->inverse_forward_actions_);
  inverse_detail_actions_.InternalSwap(&other->inverse_detail_actions_);
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_StorageActionGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[53]);
}

// ===================================================================

class UndoTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction>()._has_bits_);
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UndoTransaction::UndoTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena),
  group_entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction)
}
UndoTransaction::UndoTransaction(const UndoTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_),
      group_entries_(from.group_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction)
}

inline void UndoTransaction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(version_));
}

UndoTransaction::~UndoTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UndoTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UndoTransaction::ArenaDtor(void* object) {
  UndoTransaction* _this = reinterpret_cast< UndoTransaction* >(object);
  (void)_this;
}
void UndoTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndoTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UndoTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  group_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&flags_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSWP.UndoTransaction.UnionTransaction entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSWP.UndoTransaction.StorageActionGroup group_entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndoTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSWP.UndoTransaction.UnionTransaction entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  // repeated .TSWP.UndoTransaction.StorageActionGroup group_entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_group_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_group_entries(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  // optional uint32 version = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction)
  return target;
}

size_t UndoTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.UndoTransaction.UnionTransaction entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSWP.UndoTransaction.StorageActionGroup group_entries = 2;
  total_size += 1UL * this->_internal_group_entries_size();
  for (const auto& msg : this->group_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 flags = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 version = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UndoTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction::GetClassData() const { return &_class_data_; }

void UndoTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UndoTransaction *>(to)->MergeFrom(
      static_cast<const UndoTransaction &>(from));
}


void UndoTransaction::MergeFrom(const UndoTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  group_entries_.MergeFrom(from.group_entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction::CopyFrom(const UndoTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(group_entries_)) return false;
  return true;
}

void UndoTransaction::InternalSwap(UndoTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  group_entries_.InternalSwap(&other->group_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction, version_)
      + sizeof(UndoTransaction::version_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction, flags_)>(
          reinterpret_cast<char*>(&flags_),
          reinterpret_cast<char*>(&other->flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[54]);
}

// ===================================================================

class UndoTransactionWrapperArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransactionWrapperArchive>()._has_bits_);
  static const ::TSWP::UndoTransaction& undo_transaction(const UndoTransactionWrapperArchive* msg);
  static void set_has_undo_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::UndoTransaction&
UndoTransactionWrapperArchive::_Internal::undo_transaction(const UndoTransactionWrapperArchive* msg) {
  return *msg->undo_transaction_;
}
UndoTransactionWrapperArchive::UndoTransactionWrapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransactionWrapperArchive)
}
UndoTransactionWrapperArchive::UndoTransactionWrapperArchive(const UndoTransactionWrapperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_undo_transaction()) {
    undo_transaction_ = new ::TSWP::UndoTransaction(*from.undo_transaction_);
  } else {
    undo_transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransactionWrapperArchive)
}

inline void UndoTransactionWrapperArchive::SharedCtor() {
undo_transaction_ = nullptr;
}

UndoTransactionWrapperArchive::~UndoTransactionWrapperArchive() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransactionWrapperArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UndoTransactionWrapperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete undo_transaction_;
}

void UndoTransactionWrapperArchive::ArenaDtor(void* object) {
  UndoTransactionWrapperArchive* _this = reinterpret_cast< UndoTransactionWrapperArchive* >(object);
  (void)_this;
}
void UndoTransactionWrapperArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndoTransactionWrapperArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UndoTransactionWrapperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransactionWrapperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(undo_transaction_ != nullptr);
    undo_transaction_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransactionWrapperArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.UndoTransaction undo_transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndoTransactionWrapperArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransactionWrapperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.UndoTransaction undo_transaction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::undo_transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransactionWrapperArchive)
  return target;
}

size_t UndoTransactionWrapperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransactionWrapperArchive)
  size_t total_size = 0;

  // required .TSWP.UndoTransaction undo_transaction = 1;
  if (_internal_has_undo_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *undo_transaction_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransactionWrapperArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UndoTransactionWrapperArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransactionWrapperArchive::GetClassData() const { return &_class_data_; }

void UndoTransactionWrapperArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UndoTransactionWrapperArchive *>(to)->MergeFrom(
      static_cast<const UndoTransactionWrapperArchive &>(from));
}


void UndoTransactionWrapperArchive::MergeFrom(const UndoTransactionWrapperArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransactionWrapperArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_undo_transaction()) {
    _internal_mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from._internal_undo_transaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransactionWrapperArchive::CopyFrom(const UndoTransactionWrapperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransactionWrapperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransactionWrapperArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_undo_transaction()) {
    if (!undo_transaction_->IsInitialized()) return false;
  }
  return true;
}

void UndoTransactionWrapperArchive::InternalSwap(UndoTransactionWrapperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(undo_transaction_, other->undo_transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransactionWrapperArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[55]);
}

// ===================================================================

class ShapeInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShapeInfoArchive>()._has_bits_);
  static const ::TSD::ShapeArchive& super(const ShapeInfoArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& deprecated_storage(const ShapeInfoArchive* msg);
  static void set_has_deprecated_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& text_flow(const ShapeInfoArchive* msg);
  static void set_has_text_flow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& owned_storage(const ShapeInfoArchive* msg);
  static void set_has_owned_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_text_box(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::ShapeArchive&
ShapeInfoArchive::_Internal::super(const ShapeInfoArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
ShapeInfoArchive::_Internal::deprecated_storage(const ShapeInfoArchive* msg) {
  return *msg->deprecated_storage_;
}
const ::TSP::Reference&
ShapeInfoArchive::_Internal::text_flow(const ShapeInfoArchive* msg) {
  return *msg->text_flow_;
}
const ::TSP::Reference&
ShapeInfoArchive::_Internal::owned_storage(const ShapeInfoArchive* msg) {
  return *msg->owned_storage_;
}
void ShapeInfoArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ShapeInfoArchive::clear_deprecated_storage() {
  if (deprecated_storage_ != nullptr) deprecated_storage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ShapeInfoArchive::clear_text_flow() {
  if (text_flow_ != nullptr) text_flow_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ShapeInfoArchive::clear_owned_storage() {
  if (owned_storage_ != nullptr) owned_storage_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ShapeInfoArchive::ShapeInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ShapeInfoArchive)
}
ShapeInfoArchive::ShapeInfoArchive(const ShapeInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::ShapeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_deprecated_storage()) {
    deprecated_storage_ = new ::TSP::Reference(*from.deprecated_storage_);
  } else {
    deprecated_storage_ = nullptr;
  }
  if (from._internal_has_text_flow()) {
    text_flow_ = new ::TSP::Reference(*from.text_flow_);
  } else {
    text_flow_ = nullptr;
  }
  if (from._internal_has_owned_storage()) {
    owned_storage_ = new ::TSP::Reference(*from.owned_storage_);
  } else {
    owned_storage_ = nullptr;
  }
  is_text_box_ = from.is_text_box_;
  // @@protoc_insertion_point(copy_constructor:TSWP.ShapeInfoArchive)
}

inline void ShapeInfoArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_text_box_) -
    reinterpret_cast<char*>(&super_)) + sizeof(is_text_box_));
}

ShapeInfoArchive::~ShapeInfoArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ShapeInfoArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShapeInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete deprecated_storage_;
  if (this != internal_default_instance()) delete text_flow_;
  if (this != internal_default_instance()) delete owned_storage_;
}

void ShapeInfoArchive::ArenaDtor(void* object) {
  ShapeInfoArchive* _this = reinterpret_cast< ShapeInfoArchive* >(object);
  (void)_this;
}
void ShapeInfoArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeInfoArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShapeInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ShapeInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(deprecated_storage_ != nullptr);
      deprecated_storage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(text_flow_ != nullptr);
      text_flow_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(owned_storage_ != nullptr);
      owned_storage_->Clear();
    }
  }
  is_text_box_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeInfoArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.ShapeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference deprecated_storage = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference text_flow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_flow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference owned_storage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_owned_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_text_box = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_text_box(&has_bits);
          is_text_box_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeInfoArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ShapeInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.ShapeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference deprecated_storage = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::deprecated_storage(this), target, stream);
  }

  // optional .TSP.Reference text_flow = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::text_flow(this), target, stream);
  }

  // optional .TSP.Reference owned_storage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::owned_storage(this), target, stream);
  }

  // optional bool is_text_box = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_text_box(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ShapeInfoArchive)
  return target;
}

size_t ShapeInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ShapeInfoArchive)
  size_t total_size = 0;

  // required .TSD.ShapeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .TSP.Reference deprecated_storage = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deprecated_storage_);
    }

    // optional .TSP.Reference text_flow = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_flow_);
    }

    // optional .TSP.Reference owned_storage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *owned_storage_);
    }

    // optional bool is_text_box = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShapeInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShapeInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShapeInfoArchive::GetClassData() const { return &_class_data_; }

void ShapeInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ShapeInfoArchive *>(to)->MergeFrom(
      static_cast<const ShapeInfoArchive &>(from));
}


void ShapeInfoArchive::MergeFrom(const ShapeInfoArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ShapeInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::ShapeArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_deprecated_storage()->::TSP::Reference::MergeFrom(from._internal_deprecated_storage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_text_flow()->::TSP::Reference::MergeFrom(from._internal_text_flow());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_owned_storage()->::TSP::Reference::MergeFrom(from._internal_owned_storage());
    }
    if (cached_has_bits & 0x00000010u) {
      is_text_box_ = from.is_text_box_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShapeInfoArchive::CopyFrom(const ShapeInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ShapeInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_storage()) {
    if (!deprecated_storage_->IsInitialized()) return false;
  }
  if (_internal_has_text_flow()) {
    if (!text_flow_->IsInitialized()) return false;
  }
  if (_internal_has_owned_storage()) {
    if (!owned_storage_->IsInitialized()) return false;
  }
  return true;
}

void ShapeInfoArchive::InternalSwap(ShapeInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeInfoArchive, is_text_box_)
      + sizeof(ShapeInfoArchive::is_text_box_)
      - PROTOBUF_FIELD_OFFSET(ShapeInfoArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeInfoArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[56]);
}

// ===================================================================

class CommentInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommentInfoArchive>()._has_bits_);
  static const ::TSWP::ShapeInfoArchive& super(const CommentInfoArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& comment_storage(const CommentInfoArchive* msg);
  static void set_has_comment_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::ShapeInfoArchive&
CommentInfoArchive::_Internal::super(const CommentInfoArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommentInfoArchive::_Internal::comment_storage(const CommentInfoArchive* msg) {
  return *msg->comment_storage_;
}
void CommentInfoArchive::clear_comment_storage() {
  if (comment_storage_ != nullptr) comment_storage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommentInfoArchive::CommentInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.CommentInfoArchive)
}
CommentInfoArchive::CommentInfoArchive(const CommentInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::ShapeInfoArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_comment_storage()) {
    comment_storage_ = new ::TSP::Reference(*from.comment_storage_);
  } else {
    comment_storage_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.CommentInfoArchive)
}

inline void CommentInfoArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&comment_storage_) -
    reinterpret_cast<char*>(&super_)) + sizeof(comment_storage_));
}

CommentInfoArchive::~CommentInfoArchive() {
  // @@protoc_insertion_point(destructor:TSWP.CommentInfoArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommentInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete comment_storage_;
}

void CommentInfoArchive::ArenaDtor(void* object) {
  CommentInfoArchive* _this = reinterpret_cast< CommentInfoArchive* >(object);
  (void)_this;
}
void CommentInfoArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommentInfoArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommentInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.CommentInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(comment_storage_ != nullptr);
      comment_storage_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommentInfoArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.ShapeInfoArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference comment_storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_comment_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommentInfoArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.CommentInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.ShapeInfoArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference comment_storage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::comment_storage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.CommentInfoArchive)
  return target;
}

size_t CommentInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.CommentInfoArchive)
  size_t total_size = 0;

  // required .TSWP.ShapeInfoArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference comment_storage = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *comment_storage_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommentInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommentInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommentInfoArchive::GetClassData() const { return &_class_data_; }

void CommentInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommentInfoArchive *>(to)->MergeFrom(
      static_cast<const CommentInfoArchive &>(from));
}


void CommentInfoArchive::MergeFrom(const CommentInfoArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.CommentInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSWP::ShapeInfoArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_comment_storage()->::TSP::Reference::MergeFrom(from._internal_comment_storage());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommentInfoArchive::CopyFrom(const CommentInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.CommentInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_comment_storage()) {
    if (!comment_storage_->IsInitialized()) return false;
  }
  return true;
}

void CommentInfoArchive::InternalSwap(CommentInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommentInfoArchive, comment_storage_)
      + sizeof(CommentInfoArchive::comment_storage_)
      - PROTOBUF_FIELD_OFFSET(CommentInfoArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommentInfoArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[57]);
}

// ===================================================================

class TOCInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TOCInfoArchive>()._has_bits_);
  static const ::TSWP::ShapeInfoArchive& super(const TOCInfoArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& toc_settings(const TOCInfoArchive* msg);
  static void set_has_toc_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sync_toc_settings_with_toc_navigator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::ShapeInfoArchive&
TOCInfoArchive::_Internal::super(const TOCInfoArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
TOCInfoArchive::_Internal::toc_settings(const TOCInfoArchive* msg) {
  return *msg->toc_settings_;
}
void TOCInfoArchive::clear_toc_settings() {
  if (toc_settings_ != nullptr) toc_settings_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TOCInfoArchive::clear_toc_entry_data() {
  toc_entry_data_.Clear();
}
void TOCInfoArchive::clear_page_number_ranges() {
  page_number_ranges_.Clear();
}
TOCInfoArchive::TOCInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  toc_entry_data_(arena),
  page_number_ranges_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.TOCInfoArchive)
}
TOCInfoArchive::TOCInfoArchive(const TOCInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      toc_entry_data_(from.toc_entry_data_),
      page_number_ranges_(from.page_number_ranges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::ShapeInfoArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_toc_settings()) {
    toc_settings_ = new ::TSP::Reference(*from.toc_settings_);
  } else {
    toc_settings_ = nullptr;
  }
  sync_toc_settings_with_toc_navigator_ = from.sync_toc_settings_with_toc_navigator_;
  // @@protoc_insertion_point(copy_constructor:TSWP.TOCInfoArchive)
}

inline void TOCInfoArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sync_toc_settings_with_toc_navigator_) -
    reinterpret_cast<char*>(&super_)) + sizeof(sync_toc_settings_with_toc_navigator_));
}

TOCInfoArchive::~TOCInfoArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TOCInfoArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TOCInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete toc_settings_;
}

void TOCInfoArchive::ArenaDtor(void* object) {
  TOCInfoArchive* _this = reinterpret_cast< TOCInfoArchive* >(object);
  (void)_this;
}
void TOCInfoArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TOCInfoArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TOCInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TOCInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  toc_entry_data_.Clear();
  page_number_ranges_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(toc_settings_ != nullptr);
      toc_settings_->Clear();
    }
  }
  sync_toc_settings_with_toc_navigator_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOCInfoArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.ShapeInfoArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference toc_settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_toc_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference toc_entry_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_toc_entry_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Range page_number_ranges = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_page_number_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool sync_toc_settings_with_toc_navigator = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_sync_toc_settings_with_toc_navigator(&has_bits);
          sync_toc_settings_with_toc_navigator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TOCInfoArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TOCInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.ShapeInfoArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference toc_settings = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::toc_settings(this), target, stream);
  }

  // repeated .TSP.Reference toc_entry_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_toc_entry_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_toc_entry_data(i), target, stream);
  }

  // repeated .TSP.Range page_number_ranges = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_page_number_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_page_number_ranges(i), target, stream);
  }

  // optional bool sync_toc_settings_with_toc_navigator = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_sync_toc_settings_with_toc_navigator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TOCInfoArchive)
  return target;
}

size_t TOCInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TOCInfoArchive)
  size_t total_size = 0;

  // required .TSWP.ShapeInfoArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference toc_entry_data = 3;
  total_size += 1UL * this->_internal_toc_entry_data_size();
  for (const auto& msg : this->toc_entry_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Range page_number_ranges = 4;
  total_size += 1UL * this->_internal_page_number_ranges_size();
  for (const auto& msg : this->page_number_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference toc_settings = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *toc_settings_);
    }

    // optional bool sync_toc_settings_with_toc_navigator = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOCInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TOCInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOCInfoArchive::GetClassData() const { return &_class_data_; }

void TOCInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TOCInfoArchive *>(to)->MergeFrom(
      static_cast<const TOCInfoArchive &>(from));
}


void TOCInfoArchive::MergeFrom(const TOCInfoArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TOCInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  toc_entry_data_.MergeFrom(from.toc_entry_data_);
  page_number_ranges_.MergeFrom(from.page_number_ranges_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSWP::ShapeInfoArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_toc_settings()->::TSP::Reference::MergeFrom(from._internal_toc_settings());
    }
    if (cached_has_bits & 0x00000004u) {
      sync_toc_settings_with_toc_navigator_ = from.sync_toc_settings_with_toc_navigator_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOCInfoArchive::CopyFrom(const TOCInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TOCInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(toc_entry_data_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(page_number_ranges_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_toc_settings()) {
    if (!toc_settings_->IsInitialized()) return false;
  }
  return true;
}

void TOCInfoArchive::InternalSwap(TOCInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  toc_entry_data_.InternalSwap(&other->toc_entry_data_);
  page_number_ranges_.InternalSwap(&other->page_number_ranges_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TOCInfoArchive, sync_toc_settings_with_toc_navigator_)
      + sizeof(TOCInfoArchive::sync_toc_settings_with_toc_navigator_)
      - PROTOBUF_FIELD_OFFSET(TOCInfoArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TOCInfoArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[58]);
}

// ===================================================================

class TOCLayoutHintArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TOCLayoutHintArchive>()._has_bits_);
  static const ::TSP::Range& charrange(const TOCLayoutHintArchive* msg);
  static void set_has_charrange(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Range&
TOCLayoutHintArchive::_Internal::charrange(const TOCLayoutHintArchive* msg) {
  return *msg->charrange_;
}
void TOCLayoutHintArchive::clear_charrange() {
  if (charrange_ != nullptr) charrange_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TOCLayoutHintArchive::TOCLayoutHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.TOCLayoutHintArchive)
}
TOCLayoutHintArchive::TOCLayoutHintArchive(const TOCLayoutHintArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_charrange()) {
    charrange_ = new ::TSP::Range(*from.charrange_);
  } else {
    charrange_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.TOCLayoutHintArchive)
}

inline void TOCLayoutHintArchive::SharedCtor() {
charrange_ = nullptr;
}

TOCLayoutHintArchive::~TOCLayoutHintArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TOCLayoutHintArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TOCLayoutHintArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete charrange_;
}

void TOCLayoutHintArchive::ArenaDtor(void* object) {
  TOCLayoutHintArchive* _this = reinterpret_cast< TOCLayoutHintArchive* >(object);
  (void)_this;
}
void TOCLayoutHintArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TOCLayoutHintArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TOCLayoutHintArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TOCLayoutHintArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(charrange_ != nullptr);
    charrange_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOCLayoutHintArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Range charRange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_charrange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TOCLayoutHintArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TOCLayoutHintArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Range charRange = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::charrange(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TOCLayoutHintArchive)
  return target;
}

size_t TOCLayoutHintArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TOCLayoutHintArchive)
  size_t total_size = 0;

  // required .TSP.Range charRange = 1;
  if (_internal_has_charrange()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *charrange_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOCLayoutHintArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TOCLayoutHintArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOCLayoutHintArchive::GetClassData() const { return &_class_data_; }

void TOCLayoutHintArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TOCLayoutHintArchive *>(to)->MergeFrom(
      static_cast<const TOCLayoutHintArchive &>(from));
}


void TOCLayoutHintArchive::MergeFrom(const TOCLayoutHintArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TOCLayoutHintArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_charrange()) {
    _internal_mutable_charrange()->::TSP::Range::MergeFrom(from._internal_charrange());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOCLayoutHintArchive::CopyFrom(const TOCLayoutHintArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TOCLayoutHintArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCLayoutHintArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_charrange()) {
    if (!charrange_->IsInitialized()) return false;
  }
  return true;
}

void TOCLayoutHintArchive::InternalSwap(TOCLayoutHintArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(charrange_, other->charrange_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TOCLayoutHintArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[59]);
}

// ===================================================================

class EquationInfoArchive::_Internal {
 public:
};

EquationInfoArchive::EquationInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.EquationInfoArchive)
}
EquationInfoArchive::EquationInfoArchive(const EquationInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.EquationInfoArchive)
}

inline void EquationInfoArchive::SharedCtor() {
}

EquationInfoArchive::~EquationInfoArchive() {
  // @@protoc_insertion_point(destructor:TSWP.EquationInfoArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EquationInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EquationInfoArchive::ArenaDtor(void* object) {
  EquationInfoArchive* _this = reinterpret_cast< EquationInfoArchive* >(object);
  (void)_this;
}
void EquationInfoArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EquationInfoArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EquationInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.EquationInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EquationInfoArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EquationInfoArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.EquationInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.EquationInfoArchive)
  return target;
}

size_t EquationInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.EquationInfoArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EquationInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EquationInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EquationInfoArchive::GetClassData() const { return &_class_data_; }

void EquationInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EquationInfoArchive *>(to)->MergeFrom(
      static_cast<const EquationInfoArchive &>(from));
}


void EquationInfoArchive::MergeFrom(const EquationInfoArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.EquationInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EquationInfoArchive::CopyFrom(const EquationInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.EquationInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquationInfoArchive::IsInitialized() const {
  return true;
}

void EquationInfoArchive::InternalSwap(EquationInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EquationInfoArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[60]);
}

// ===================================================================

class TextualAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TextualAttachmentArchive>()._has_bits_);
  static void set_has_string_equivalent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TextualAttachmentArchive::TextualAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.TextualAttachmentArchive)
}
TextualAttachmentArchive::TextualAttachmentArchive(const TextualAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_equivalent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string_equivalent()) {
    string_equivalent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string_equivalent(), 
      GetArenaForAllocation());
  }
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:TSWP.TextualAttachmentArchive)
}

inline void TextualAttachmentArchive::SharedCtor() {
string_equivalent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
kind_ = 0;
}

TextualAttachmentArchive::~TextualAttachmentArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TextualAttachmentArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TextualAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  string_equivalent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextualAttachmentArchive::ArenaDtor(void* object) {
  TextualAttachmentArchive* _this = reinterpret_cast< TextualAttachmentArchive* >(object);
  (void)_this;
}
void TextualAttachmentArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextualAttachmentArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextualAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TextualAttachmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    string_equivalent_.ClearNonDefaultToEmpty();
  }
  kind_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextualAttachmentArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string string_equivalent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_string_equivalent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.TextualAttachmentArchive.string_equivalent");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.TextualAttachmentArchive.Kind kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::TextualAttachmentArchive_Kind_IsValid(val))) {
            _internal_set_kind(static_cast<::TSWP::TextualAttachmentArchive_Kind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextualAttachmentArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TextualAttachmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string string_equivalent = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_equivalent().data(), static_cast<int>(this->_internal_string_equivalent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.TextualAttachmentArchive.string_equivalent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string_equivalent(), target);
  }

  // optional .TSWP.TextualAttachmentArchive.Kind kind = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TextualAttachmentArchive)
  return target;
}

size_t TextualAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TextualAttachmentArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string string_equivalent = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_equivalent());
    }

    // optional .TSWP.TextualAttachmentArchive.Kind kind = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextualAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TextualAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextualAttachmentArchive::GetClassData() const { return &_class_data_; }

void TextualAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TextualAttachmentArchive *>(to)->MergeFrom(
      static_cast<const TextualAttachmentArchive &>(from));
}


void TextualAttachmentArchive::MergeFrom(const TextualAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TextualAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string_equivalent(from._internal_string_equivalent());
    }
    if (cached_has_bits & 0x00000002u) {
      kind_ = from.kind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextualAttachmentArchive::CopyFrom(const TextualAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TextualAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextualAttachmentArchive::IsInitialized() const {
  return true;
}

void TextualAttachmentArchive::InternalSwap(TextualAttachmentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &string_equivalent_, GetArenaForAllocation(),
      &other->string_equivalent_, other->GetArenaForAllocation()
  );
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextualAttachmentArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[61]);
}

// ===================================================================

class TSWPTOCPageNumberAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TSWPTOCPageNumberAttachmentArchive>()._has_bits_);
  static const ::TSWP::TextualAttachmentArchive& super(const TSWPTOCPageNumberAttachmentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_page_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bookmark_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSWP::TextualAttachmentArchive&
TSWPTOCPageNumberAttachmentArchive::_Internal::super(const TSWPTOCPageNumberAttachmentArchive* msg) {
  return *msg->super_;
}
TSWPTOCPageNumberAttachmentArchive::TSWPTOCPageNumberAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.TSWPTOCPageNumberAttachmentArchive)
}
TSWPTOCPageNumberAttachmentArchive::TSWPTOCPageNumberAttachmentArchive(const TSWPTOCPageNumberAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_page_number()) {
    page_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_page_number(), 
      GetArenaForAllocation());
  }
  bookmark_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bookmark_name()) {
    bookmark_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bookmark_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSWP::TextualAttachmentArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.TSWPTOCPageNumberAttachmentArchive)
}

inline void TSWPTOCPageNumberAttachmentArchive::SharedCtor() {
page_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bookmark_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
super_ = nullptr;
}

TSWPTOCPageNumberAttachmentArchive::~TSWPTOCPageNumberAttachmentArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TSWPTOCPageNumberAttachmentArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TSWPTOCPageNumberAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  page_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bookmark_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void TSWPTOCPageNumberAttachmentArchive::ArenaDtor(void* object) {
  TSWPTOCPageNumberAttachmentArchive* _this = reinterpret_cast< TSWPTOCPageNumberAttachmentArchive* >(object);
  (void)_this;
}
void TSWPTOCPageNumberAttachmentArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TSWPTOCPageNumberAttachmentArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TSWPTOCPageNumberAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TSWPTOCPageNumberAttachmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      page_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      bookmark_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TSWPTOCPageNumberAttachmentArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.TextualAttachmentArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string page_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_page_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.TSWPTOCPageNumberAttachmentArchive.page_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string bookmark_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_bookmark_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.TSWPTOCPageNumberAttachmentArchive.bookmark_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TSWPTOCPageNumberAttachmentArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TSWPTOCPageNumberAttachmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.TextualAttachmentArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional string page_number = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_page_number().data(), static_cast<int>(this->_internal_page_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.TSWPTOCPageNumberAttachmentArchive.page_number");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_page_number(), target);
  }

  // optional string bookmark_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bookmark_name().data(), static_cast<int>(this->_internal_bookmark_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.TSWPTOCPageNumberAttachmentArchive.bookmark_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bookmark_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TSWPTOCPageNumberAttachmentArchive)
  return target;
}

size_t TSWPTOCPageNumberAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TSWPTOCPageNumberAttachmentArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string page_number = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_page_number());
    }

    // optional string bookmark_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bookmark_name());
    }

    // optional .TSWP.TextualAttachmentArchive super = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TSWPTOCPageNumberAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TSWPTOCPageNumberAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TSWPTOCPageNumberAttachmentArchive::GetClassData() const { return &_class_data_; }

void TSWPTOCPageNumberAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TSWPTOCPageNumberAttachmentArchive *>(to)->MergeFrom(
      static_cast<const TSWPTOCPageNumberAttachmentArchive &>(from));
}


void TSWPTOCPageNumberAttachmentArchive::MergeFrom(const TSWPTOCPageNumberAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TSWPTOCPageNumberAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_page_number(from._internal_page_number());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_bookmark_name(from._internal_bookmark_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TSWP::TextualAttachmentArchive::MergeFrom(from._internal_super());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TSWPTOCPageNumberAttachmentArchive::CopyFrom(const TSWPTOCPageNumberAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TSWPTOCPageNumberAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSWPTOCPageNumberAttachmentArchive::IsInitialized() const {
  return true;
}

void TSWPTOCPageNumberAttachmentArchive::InternalSwap(TSWPTOCPageNumberAttachmentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &page_number_, GetArenaForAllocation(),
      &other->page_number_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bookmark_name_, GetArenaForAllocation(),
      &other->bookmark_name_, other->GetArenaForAllocation()
  );
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TSWPTOCPageNumberAttachmentArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[62]);
}

// ===================================================================

class UIGraphicalAttachment::_Internal {
 public:
};

UIGraphicalAttachment::UIGraphicalAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.UIGraphicalAttachment)
}
UIGraphicalAttachment::UIGraphicalAttachment(const UIGraphicalAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.UIGraphicalAttachment)
}

inline void UIGraphicalAttachment::SharedCtor() {
}

UIGraphicalAttachment::~UIGraphicalAttachment() {
  // @@protoc_insertion_point(destructor:TSWP.UIGraphicalAttachment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UIGraphicalAttachment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UIGraphicalAttachment::ArenaDtor(void* object) {
  UIGraphicalAttachment* _this = reinterpret_cast< UIGraphicalAttachment* >(object);
  (void)_this;
}
void UIGraphicalAttachment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UIGraphicalAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UIGraphicalAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UIGraphicalAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UIGraphicalAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UIGraphicalAttachment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UIGraphicalAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UIGraphicalAttachment)
  return target;
}

size_t UIGraphicalAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UIGraphicalAttachment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UIGraphicalAttachment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UIGraphicalAttachment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UIGraphicalAttachment::GetClassData() const { return &_class_data_; }

void UIGraphicalAttachment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UIGraphicalAttachment *>(to)->MergeFrom(
      static_cast<const UIGraphicalAttachment &>(from));
}


void UIGraphicalAttachment::MergeFrom(const UIGraphicalAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UIGraphicalAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UIGraphicalAttachment::CopyFrom(const UIGraphicalAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UIGraphicalAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIGraphicalAttachment::IsInitialized() const {
  return true;
}

void UIGraphicalAttachment::InternalSwap(UIGraphicalAttachment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UIGraphicalAttachment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[63]);
}

// ===================================================================

class DrawableAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawableAttachmentArchive>()._has_bits_);
  static const ::TSP::Reference& drawable(const DrawableAttachmentArchive* msg);
  static void set_has_drawable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_h_offset_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_h_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_v_offset_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_v_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSP::Reference&
DrawableAttachmentArchive::_Internal::drawable(const DrawableAttachmentArchive* msg) {
  return *msg->drawable_;
}
void DrawableAttachmentArchive::clear_drawable() {
  if (drawable_ != nullptr) drawable_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DrawableAttachmentArchive::DrawableAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.DrawableAttachmentArchive)
}
DrawableAttachmentArchive::DrawableAttachmentArchive(const DrawableAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_drawable()) {
    drawable_ = new ::TSP::Reference(*from.drawable_);
  } else {
    drawable_ = nullptr;
  }
  ::memcpy(&h_offset_type_, &from.h_offset_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_offset_) -
    reinterpret_cast<char*>(&h_offset_type_)) + sizeof(v_offset_));
  // @@protoc_insertion_point(copy_constructor:TSWP.DrawableAttachmentArchive)
}

inline void DrawableAttachmentArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&drawable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&v_offset_) -
    reinterpret_cast<char*>(&drawable_)) + sizeof(v_offset_));
}

DrawableAttachmentArchive::~DrawableAttachmentArchive() {
  // @@protoc_insertion_point(destructor:TSWP.DrawableAttachmentArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DrawableAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete drawable_;
}

void DrawableAttachmentArchive::ArenaDtor(void* object) {
  DrawableAttachmentArchive* _this = reinterpret_cast< DrawableAttachmentArchive* >(object);
  (void)_this;
}
void DrawableAttachmentArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableAttachmentArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DrawableAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.DrawableAttachmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(drawable_ != nullptr);
    drawable_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&h_offset_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&v_offset_) -
        reinterpret_cast<char*>(&h_offset_type_)) + sizeof(v_offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableAttachmentArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference drawable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 h_offset_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_h_offset_type(&has_bits);
          h_offset_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float h_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_h_offset(&has_bits);
          h_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 v_offset_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_v_offset_type(&has_bits);
          v_offset_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float v_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_v_offset(&has_bits);
          v_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableAttachmentArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.DrawableAttachmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference drawable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::drawable(this), target, stream);
  }

  // optional uint32 h_offset_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_h_offset_type(), target);
  }

  // optional float h_offset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_h_offset(), target);
  }

  // optional uint32 v_offset_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_v_offset_type(), target);
  }

  // optional float v_offset = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_v_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.DrawableAttachmentArchive)
  return target;
}

size_t DrawableAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.DrawableAttachmentArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSP.Reference drawable = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawable_);
    }

    // optional uint32 h_offset_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_h_offset_type());
    }

    // optional float h_offset = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 v_offset_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_v_offset_type());
    }

    // optional float v_offset = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DrawableAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DrawableAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DrawableAttachmentArchive::GetClassData() const { return &_class_data_; }

void DrawableAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DrawableAttachmentArchive *>(to)->MergeFrom(
      static_cast<const DrawableAttachmentArchive &>(from));
}


void DrawableAttachmentArchive::MergeFrom(const DrawableAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.DrawableAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_drawable()->::TSP::Reference::MergeFrom(from._internal_drawable());
    }
    if (cached_has_bits & 0x00000002u) {
      h_offset_type_ = from.h_offset_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      h_offset_ = from.h_offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      v_offset_type_ = from.v_offset_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      v_offset_ = from.v_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DrawableAttachmentArchive::CopyFrom(const DrawableAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.DrawableAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableAttachmentArchive::IsInitialized() const {
  if (_internal_has_drawable()) {
    if (!drawable_->IsInitialized()) return false;
  }
  return true;
}

void DrawableAttachmentArchive::InternalSwap(DrawableAttachmentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawableAttachmentArchive, v_offset_)
      + sizeof(DrawableAttachmentArchive::v_offset_)
      - PROTOBUF_FIELD_OFFSET(DrawableAttachmentArchive, drawable_)>(
          reinterpret_cast<char*>(&drawable_),
          reinterpret_cast<char*>(&other->drawable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableAttachmentArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[64]);
}

// ===================================================================

class TOCAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TOCAttachmentArchive>()._has_bits_);
  static const ::TSWP::DrawableAttachmentArchive& super(const TOCAttachmentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::DrawableAttachmentArchive&
TOCAttachmentArchive::_Internal::super(const TOCAttachmentArchive* msg) {
  return *msg->super_;
}
TOCAttachmentArchive::TOCAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.TOCAttachmentArchive)
}
TOCAttachmentArchive::TOCAttachmentArchive(const TOCAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::DrawableAttachmentArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.TOCAttachmentArchive)
}

inline void TOCAttachmentArchive::SharedCtor() {
super_ = nullptr;
}

TOCAttachmentArchive::~TOCAttachmentArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TOCAttachmentArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TOCAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void TOCAttachmentArchive::ArenaDtor(void* object) {
  TOCAttachmentArchive* _this = reinterpret_cast< TOCAttachmentArchive* >(object);
  (void)_this;
}
void TOCAttachmentArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TOCAttachmentArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TOCAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TOCAttachmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOCAttachmentArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.DrawableAttachmentArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TOCAttachmentArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TOCAttachmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.DrawableAttachmentArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TOCAttachmentArchive)
  return target;
}

size_t TOCAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TOCAttachmentArchive)
  size_t total_size = 0;

  // required .TSWP.DrawableAttachmentArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOCAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TOCAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOCAttachmentArchive::GetClassData() const { return &_class_data_; }

void TOCAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TOCAttachmentArchive *>(to)->MergeFrom(
      static_cast<const TOCAttachmentArchive &>(from));
}


void TOCAttachmentArchive::MergeFrom(const TOCAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TOCAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSWP::DrawableAttachmentArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOCAttachmentArchive::CopyFrom(const TOCAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TOCAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCAttachmentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void TOCAttachmentArchive::InternalSwap(TOCAttachmentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TOCAttachmentArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[65]);
}

// ===================================================================

class FootnoteReferenceAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FootnoteReferenceAttachmentArchive>()._has_bits_);
  static const ::TSWP::TextualAttachmentArchive& super(const FootnoteReferenceAttachmentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& contained_storage(const FootnoteReferenceAttachmentArchive* msg);
  static void set_has_contained_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_custom_mark_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSWP::TextualAttachmentArchive&
FootnoteReferenceAttachmentArchive::_Internal::super(const FootnoteReferenceAttachmentArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
FootnoteReferenceAttachmentArchive::_Internal::contained_storage(const FootnoteReferenceAttachmentArchive* msg) {
  return *msg->contained_storage_;
}
void FootnoteReferenceAttachmentArchive::clear_contained_storage() {
  if (contained_storage_ != nullptr) contained_storage_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
FootnoteReferenceAttachmentArchive::FootnoteReferenceAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.FootnoteReferenceAttachmentArchive)
}
FootnoteReferenceAttachmentArchive::FootnoteReferenceAttachmentArchive(const FootnoteReferenceAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  custom_mark_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_custom_mark_string()) {
    custom_mark_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_mark_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSWP::TextualAttachmentArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_contained_storage()) {
    contained_storage_ = new ::TSP::Reference(*from.contained_storage_);
  } else {
    contained_storage_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.FootnoteReferenceAttachmentArchive)
}

inline void FootnoteReferenceAttachmentArchive::SharedCtor() {
custom_mark_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&contained_storage_) -
    reinterpret_cast<char*>(&super_)) + sizeof(contained_storage_));
}

FootnoteReferenceAttachmentArchive::~FootnoteReferenceAttachmentArchive() {
  // @@protoc_insertion_point(destructor:TSWP.FootnoteReferenceAttachmentArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FootnoteReferenceAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  custom_mark_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete contained_storage_;
}

void FootnoteReferenceAttachmentArchive::ArenaDtor(void* object) {
  FootnoteReferenceAttachmentArchive* _this = reinterpret_cast< FootnoteReferenceAttachmentArchive* >(object);
  (void)_this;
}
void FootnoteReferenceAttachmentArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FootnoteReferenceAttachmentArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FootnoteReferenceAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.FootnoteReferenceAttachmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      custom_mark_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(contained_storage_ != nullptr);
      contained_storage_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FootnoteReferenceAttachmentArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.TextualAttachmentArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference contained_storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_contained_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string custom_mark_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_custom_mark_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.FootnoteReferenceAttachmentArchive.custom_mark_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FootnoteReferenceAttachmentArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.FootnoteReferenceAttachmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.TextualAttachmentArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference contained_storage = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::contained_storage(this), target, stream);
  }

  // optional string custom_mark_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_mark_string().data(), static_cast<int>(this->_internal_custom_mark_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.FootnoteReferenceAttachmentArchive.custom_mark_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_custom_mark_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.FootnoteReferenceAttachmentArchive)
  return target;
}

size_t FootnoteReferenceAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.FootnoteReferenceAttachmentArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string custom_mark_string = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_mark_string());
    }

    // optional .TSWP.TextualAttachmentArchive super = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference contained_storage = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contained_storage_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FootnoteReferenceAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FootnoteReferenceAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FootnoteReferenceAttachmentArchive::GetClassData() const { return &_class_data_; }

void FootnoteReferenceAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FootnoteReferenceAttachmentArchive *>(to)->MergeFrom(
      static_cast<const FootnoteReferenceAttachmentArchive &>(from));
}


void FootnoteReferenceAttachmentArchive::MergeFrom(const FootnoteReferenceAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.FootnoteReferenceAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_custom_mark_string(from._internal_custom_mark_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSWP::TextualAttachmentArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_contained_storage()->::TSP::Reference::MergeFrom(from._internal_contained_storage());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FootnoteReferenceAttachmentArchive::CopyFrom(const FootnoteReferenceAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.FootnoteReferenceAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FootnoteReferenceAttachmentArchive::IsInitialized() const {
  if (_internal_has_contained_storage()) {
    if (!contained_storage_->IsInitialized()) return false;
  }
  return true;
}

void FootnoteReferenceAttachmentArchive::InternalSwap(FootnoteReferenceAttachmentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &custom_mark_string_, GetArenaForAllocation(),
      &other->custom_mark_string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FootnoteReferenceAttachmentArchive, contained_storage_)
      + sizeof(FootnoteReferenceAttachmentArchive::contained_storage_)
      - PROTOBUF_FIELD_OFFSET(FootnoteReferenceAttachmentArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FootnoteReferenceAttachmentArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[66]);
}

// ===================================================================

class NumberAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NumberAttachmentArchive>()._has_bits_);
  static const ::TSWP::TextualAttachmentArchive& super(const NumberAttachmentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_number_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number_format_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSWP::TextualAttachmentArchive&
NumberAttachmentArchive::_Internal::super(const NumberAttachmentArchive* msg) {
  return *msg->super_;
}
NumberAttachmentArchive::NumberAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.NumberAttachmentArchive)
}
NumberAttachmentArchive::NumberAttachmentArchive(const NumberAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string_value()) {
    string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string_value(), 
      GetArenaForAllocation());
  }
  number_format_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_number_format_name()) {
    number_format_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_number_format_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSWP::TextualAttachmentArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  number_format_ = from.number_format_;
  // @@protoc_insertion_point(copy_constructor:TSWP.NumberAttachmentArchive)
}

inline void NumberAttachmentArchive::SharedCtor() {
string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
number_format_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&number_format_) -
    reinterpret_cast<char*>(&super_)) + sizeof(number_format_));
}

NumberAttachmentArchive::~NumberAttachmentArchive() {
  // @@protoc_insertion_point(destructor:TSWP.NumberAttachmentArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NumberAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_format_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void NumberAttachmentArchive::ArenaDtor(void* object) {
  NumberAttachmentArchive* _this = reinterpret_cast< NumberAttachmentArchive* >(object);
  (void)_this;
}
void NumberAttachmentArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NumberAttachmentArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NumberAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.NumberAttachmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      string_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      number_format_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  number_format_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumberAttachmentArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.TextualAttachmentArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_number_format(&has_bits);
          number_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string string_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.NumberAttachmentArchive.string_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string number_format_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_number_format_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.NumberAttachmentArchive.number_format_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NumberAttachmentArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.NumberAttachmentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.TextualAttachmentArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 number_format = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_number_format(), target);
  }

  // optional string string_value = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.NumberAttachmentArchive.string_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_string_value(), target);
  }

  // optional string number_format_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_number_format_name().data(), static_cast<int>(this->_internal_number_format_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.NumberAttachmentArchive.number_format_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_number_format_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.NumberAttachmentArchive)
  return target;
}

size_t NumberAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.NumberAttachmentArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string string_value = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
    }

    // optional string number_format_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_number_format_name());
    }

    // optional .TSWP.TextualAttachmentArchive super = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional uint32 number_format = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_number_format());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NumberAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NumberAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NumberAttachmentArchive::GetClassData() const { return &_class_data_; }

void NumberAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NumberAttachmentArchive *>(to)->MergeFrom(
      static_cast<const NumberAttachmentArchive &>(from));
}


void NumberAttachmentArchive::MergeFrom(const NumberAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.NumberAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_number_format_name(from._internal_number_format_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TSWP::TextualAttachmentArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      number_format_ = from.number_format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NumberAttachmentArchive::CopyFrom(const NumberAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.NumberAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberAttachmentArchive::IsInitialized() const {
  return true;
}

void NumberAttachmentArchive::InternalSwap(NumberAttachmentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &string_value_, GetArenaForAllocation(),
      &other->string_value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &number_format_name_, GetArenaForAllocation(),
      &other->number_format_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NumberAttachmentArchive, number_format_)
      + sizeof(NumberAttachmentArchive::number_format_)
      - PROTOBUF_FIELD_OFFSET(NumberAttachmentArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NumberAttachmentArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[67]);
}

// ===================================================================

class SmartFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SmartFieldArchive>()._has_bits_);
  static void set_has_text_attribute_uuid_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SmartFieldArchive::SmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.SmartFieldArchive)
}
SmartFieldArchive::SmartFieldArchive(const SmartFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_attribute_uuid_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text_attribute_uuid_string()) {
    text_attribute_uuid_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text_attribute_uuid_string(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.SmartFieldArchive)
}

inline void SmartFieldArchive::SharedCtor() {
text_attribute_uuid_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SmartFieldArchive::~SmartFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.SmartFieldArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SmartFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_attribute_uuid_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SmartFieldArchive::ArenaDtor(void* object) {
  SmartFieldArchive* _this = reinterpret_cast< SmartFieldArchive* >(object);
  (void)_this;
}
void SmartFieldArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SmartFieldArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SmartFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.SmartFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_attribute_uuid_string_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmartFieldArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string text_attribute_uuid_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text_attribute_uuid_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.SmartFieldArchive.text_attribute_uuid_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SmartFieldArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.SmartFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text_attribute_uuid_string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text_attribute_uuid_string().data(), static_cast<int>(this->_internal_text_attribute_uuid_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.SmartFieldArchive.text_attribute_uuid_string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text_attribute_uuid_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.SmartFieldArchive)
  return target;
}

size_t SmartFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.SmartFieldArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string text_attribute_uuid_string = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text_attribute_uuid_string());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmartFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SmartFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmartFieldArchive::GetClassData() const { return &_class_data_; }

void SmartFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SmartFieldArchive *>(to)->MergeFrom(
      static_cast<const SmartFieldArchive &>(from));
}


void SmartFieldArchive::MergeFrom(const SmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.SmartFieldArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text_attribute_uuid_string()) {
    _internal_set_text_attribute_uuid_string(from._internal_text_attribute_uuid_string());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmartFieldArchive::CopyFrom(const SmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.SmartFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmartFieldArchive::IsInitialized() const {
  return true;
}

void SmartFieldArchive::InternalSwap(SmartFieldArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_attribute_uuid_string_, GetArenaForAllocation(),
      &other->text_attribute_uuid_string_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SmartFieldArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[68]);
}

// ===================================================================

class HyperlinkFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HyperlinkFieldArchive>()._has_bits_);
  static const ::TSWP::SmartFieldArchive& super(const HyperlinkFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSWP::SmartFieldArchive&
HyperlinkFieldArchive::_Internal::super(const HyperlinkFieldArchive* msg) {
  return *msg->super_;
}
HyperlinkFieldArchive::HyperlinkFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.HyperlinkFieldArchive)
}
HyperlinkFieldArchive::HyperlinkFieldArchive(const HyperlinkFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url_ref()) {
    url_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url_ref(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSWP::SmartFieldArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.HyperlinkFieldArchive)
}

inline void HyperlinkFieldArchive::SharedCtor() {
url_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
super_ = nullptr;
}

HyperlinkFieldArchive::~HyperlinkFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.HyperlinkFieldArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HyperlinkFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void HyperlinkFieldArchive::ArenaDtor(void* object) {
  HyperlinkFieldArchive* _this = reinterpret_cast< HyperlinkFieldArchive* >(object);
  (void)_this;
}
void HyperlinkFieldArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HyperlinkFieldArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HyperlinkFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.HyperlinkFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_ref_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HyperlinkFieldArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.SmartFieldArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url_ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.HyperlinkFieldArchive.url_ref");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HyperlinkFieldArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.HyperlinkFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.SmartFieldArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional string url_ref = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url_ref().data(), static_cast<int>(this->_internal_url_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.HyperlinkFieldArchive.url_ref");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url_ref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.HyperlinkFieldArchive)
  return target;
}

size_t HyperlinkFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.HyperlinkFieldArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url_ref = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_ref());
    }

    // optional .TSWP.SmartFieldArchive super = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HyperlinkFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HyperlinkFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HyperlinkFieldArchive::GetClassData() const { return &_class_data_; }

void HyperlinkFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HyperlinkFieldArchive *>(to)->MergeFrom(
      static_cast<const HyperlinkFieldArchive &>(from));
}


void HyperlinkFieldArchive::MergeFrom(const HyperlinkFieldArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.HyperlinkFieldArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url_ref(from._internal_url_ref());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(from._internal_super());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HyperlinkFieldArchive::CopyFrom(const HyperlinkFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.HyperlinkFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HyperlinkFieldArchive::IsInitialized() const {
  return true;
}

void HyperlinkFieldArchive::InternalSwap(HyperlinkFieldArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_ref_, GetArenaForAllocation(),
      &other->url_ref_, other->GetArenaForAllocation()
  );
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HyperlinkFieldArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[69]);
}

// ===================================================================

class PlaceholderSmartFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PlaceholderSmartFieldArchive>()._has_bits_);
  static const ::TSWP::SmartFieldArchive& super(const PlaceholderSmartFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_localizable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_script_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSWP::SmartFieldArchive&
PlaceholderSmartFieldArchive::_Internal::super(const PlaceholderSmartFieldArchive* msg) {
  return *msg->super_;
}
PlaceholderSmartFieldArchive::PlaceholderSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.PlaceholderSmartFieldArchive)
}
PlaceholderSmartFieldArchive::PlaceholderSmartFieldArchive(const PlaceholderSmartFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  script_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_script_tag()) {
    script_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_script_tag(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSWP::SmartFieldArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  localizable_ = from.localizable_;
  // @@protoc_insertion_point(copy_constructor:TSWP.PlaceholderSmartFieldArchive)
}

inline void PlaceholderSmartFieldArchive::SharedCtor() {
script_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&localizable_) -
    reinterpret_cast<char*>(&super_)) + sizeof(localizable_));
}

PlaceholderSmartFieldArchive::~PlaceholderSmartFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.PlaceholderSmartFieldArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlaceholderSmartFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  script_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void PlaceholderSmartFieldArchive::ArenaDtor(void* object) {
  PlaceholderSmartFieldArchive* _this = reinterpret_cast< PlaceholderSmartFieldArchive* >(object);
  (void)_this;
}
void PlaceholderSmartFieldArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaceholderSmartFieldArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlaceholderSmartFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.PlaceholderSmartFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      script_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  localizable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceholderSmartFieldArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.SmartFieldArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool localizable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_localizable(&has_bits);
          localizable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string script_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_script_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.PlaceholderSmartFieldArchive.script_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceholderSmartFieldArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.PlaceholderSmartFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.SmartFieldArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional bool localizable = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_localizable(), target);
  }

  // optional string script_tag = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_script_tag().data(), static_cast<int>(this->_internal_script_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.PlaceholderSmartFieldArchive.script_tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_script_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.PlaceholderSmartFieldArchive)
  return target;
}

size_t PlaceholderSmartFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.PlaceholderSmartFieldArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string script_tag = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_script_tag());
    }

    // optional .TSWP.SmartFieldArchive super = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional bool localizable = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaceholderSmartFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlaceholderSmartFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaceholderSmartFieldArchive::GetClassData() const { return &_class_data_; }

void PlaceholderSmartFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PlaceholderSmartFieldArchive *>(to)->MergeFrom(
      static_cast<const PlaceholderSmartFieldArchive &>(from));
}


void PlaceholderSmartFieldArchive::MergeFrom(const PlaceholderSmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.PlaceholderSmartFieldArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_script_tag(from._internal_script_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      localizable_ = from.localizable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaceholderSmartFieldArchive::CopyFrom(const PlaceholderSmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.PlaceholderSmartFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceholderSmartFieldArchive::IsInitialized() const {
  return true;
}

void PlaceholderSmartFieldArchive::InternalSwap(PlaceholderSmartFieldArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &script_tag_, GetArenaForAllocation(),
      &other->script_tag_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaceholderSmartFieldArchive, localizable_)
      + sizeof(PlaceholderSmartFieldArchive::localizable_)
      - PROTOBUF_FIELD_OFFSET(PlaceholderSmartFieldArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceholderSmartFieldArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[70]);
}

// ===================================================================

class UnsupportedHyperlinkFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UnsupportedHyperlinkFieldArchive>()._has_bits_);
  static const ::TSWP::PlaceholderSmartFieldArchive& super(const UnsupportedHyperlinkFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url_original_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSWP::PlaceholderSmartFieldArchive&
UnsupportedHyperlinkFieldArchive::_Internal::super(const UnsupportedHyperlinkFieldArchive* msg) {
  return *msg->super_;
}
UnsupportedHyperlinkFieldArchive::UnsupportedHyperlinkFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.UnsupportedHyperlinkFieldArchive)
}
UnsupportedHyperlinkFieldArchive::UnsupportedHyperlinkFieldArchive(const UnsupportedHyperlinkFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url_ref()) {
    url_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url_ref(), 
      GetArenaForAllocation());
  }
  url_original_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url_original_ref()) {
    url_original_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url_original_ref(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSWP::PlaceholderSmartFieldArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.UnsupportedHyperlinkFieldArchive)
}

inline void UnsupportedHyperlinkFieldArchive::SharedCtor() {
url_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_original_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
super_ = nullptr;
}

UnsupportedHyperlinkFieldArchive::~UnsupportedHyperlinkFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.UnsupportedHyperlinkFieldArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnsupportedHyperlinkFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_original_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void UnsupportedHyperlinkFieldArchive::ArenaDtor(void* object) {
  UnsupportedHyperlinkFieldArchive* _this = reinterpret_cast< UnsupportedHyperlinkFieldArchive* >(object);
  (void)_this;
}
void UnsupportedHyperlinkFieldArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnsupportedHyperlinkFieldArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnsupportedHyperlinkFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UnsupportedHyperlinkFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      url_ref_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      url_original_ref_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsupportedHyperlinkFieldArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url_ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.UnsupportedHyperlinkFieldArchive.url_ref");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url_original_ref = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_url_original_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.UnsupportedHyperlinkFieldArchive.url_original_ref");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsupportedHyperlinkFieldArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UnsupportedHyperlinkFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional string url_ref = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url_ref().data(), static_cast<int>(this->_internal_url_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.UnsupportedHyperlinkFieldArchive.url_ref");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url_ref(), target);
  }

  // optional string url_original_ref = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url_original_ref().data(), static_cast<int>(this->_internal_url_original_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.UnsupportedHyperlinkFieldArchive.url_original_ref");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url_original_ref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UnsupportedHyperlinkFieldArchive)
  return target;
}

size_t UnsupportedHyperlinkFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UnsupportedHyperlinkFieldArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string url_ref = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_ref());
    }

    // optional string url_original_ref = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_original_ref());
    }

    // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsupportedHyperlinkFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnsupportedHyperlinkFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsupportedHyperlinkFieldArchive::GetClassData() const { return &_class_data_; }

void UnsupportedHyperlinkFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UnsupportedHyperlinkFieldArchive *>(to)->MergeFrom(
      static_cast<const UnsupportedHyperlinkFieldArchive &>(from));
}


void UnsupportedHyperlinkFieldArchive::MergeFrom(const UnsupportedHyperlinkFieldArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UnsupportedHyperlinkFieldArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url_ref(from._internal_url_ref());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_url_original_ref(from._internal_url_original_ref());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TSWP::PlaceholderSmartFieldArchive::MergeFrom(from._internal_super());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsupportedHyperlinkFieldArchive::CopyFrom(const UnsupportedHyperlinkFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UnsupportedHyperlinkFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsupportedHyperlinkFieldArchive::IsInitialized() const {
  return true;
}

void UnsupportedHyperlinkFieldArchive::InternalSwap(UnsupportedHyperlinkFieldArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_ref_, GetArenaForAllocation(),
      &other->url_ref_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_original_ref_, GetArenaForAllocation(),
      &other->url_original_ref_, other->GetArenaForAllocation()
  );
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsupportedHyperlinkFieldArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[71]);
}

// ===================================================================

class BibliographySmartFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BibliographySmartFieldArchive>()._has_bits_);
  static const ::TSWP::SmartFieldArchive& super(const BibliographySmartFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_localizable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSWP::PlaceholderSmartFieldArchive& old_super(const BibliographySmartFieldArchive* msg);
  static void set_has_old_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSWP::SmartFieldArchive&
BibliographySmartFieldArchive::_Internal::super(const BibliographySmartFieldArchive* msg) {
  return *msg->super_;
}
const ::TSWP::PlaceholderSmartFieldArchive&
BibliographySmartFieldArchive::_Internal::old_super(const BibliographySmartFieldArchive* msg) {
  return *msg->old_super_;
}
void BibliographySmartFieldArchive::clear_citation_records() {
  citation_records_.Clear();
}
BibliographySmartFieldArchive::BibliographySmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  citation_records_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.BibliographySmartFieldArchive)
}
BibliographySmartFieldArchive::BibliographySmartFieldArchive(const BibliographySmartFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      citation_records_(from.citation_records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_old_super()) {
    old_super_ = new ::TSWP::PlaceholderSmartFieldArchive(*from.old_super_);
  } else {
    old_super_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TSWP::SmartFieldArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  localizable_ = from.localizable_;
  // @@protoc_insertion_point(copy_constructor:TSWP.BibliographySmartFieldArchive)
}

inline void BibliographySmartFieldArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&old_super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&localizable_) -
    reinterpret_cast<char*>(&old_super_)) + sizeof(localizable_));
}

BibliographySmartFieldArchive::~BibliographySmartFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.BibliographySmartFieldArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BibliographySmartFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete old_super_;
  if (this != internal_default_instance()) delete super_;
}

void BibliographySmartFieldArchive::ArenaDtor(void* object) {
  BibliographySmartFieldArchive* _this = reinterpret_cast< BibliographySmartFieldArchive* >(object);
  (void)_this;
}
void BibliographySmartFieldArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BibliographySmartFieldArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BibliographySmartFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.BibliographySmartFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  citation_records_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(old_super_ != nullptr);
      old_super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  localizable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BibliographySmartFieldArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference citation_records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_citation_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSWP.SmartFieldArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool localizable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_localizable(&has_bits);
          localizable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BibliographySmartFieldArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.BibliographySmartFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::old_super(this), target, stream);
  }

  // repeated .TSP.Reference citation_records = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_citation_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_citation_records(i), target, stream);
  }

  // optional .TSWP.SmartFieldArchive super = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::super(this), target, stream);
  }

  // optional bool localizable = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_localizable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.BibliographySmartFieldArchive)
  return target;
}

size_t BibliographySmartFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.BibliographySmartFieldArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference citation_records = 2;
  total_size += 1UL * this->_internal_citation_records_size();
  for (const auto& msg : this->citation_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_super_);
    }

    // optional .TSWP.SmartFieldArchive super = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional bool localizable = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BibliographySmartFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BibliographySmartFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BibliographySmartFieldArchive::GetClassData() const { return &_class_data_; }

void BibliographySmartFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BibliographySmartFieldArchive *>(to)->MergeFrom(
      static_cast<const BibliographySmartFieldArchive &>(from));
}


void BibliographySmartFieldArchive::MergeFrom(const BibliographySmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.BibliographySmartFieldArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  citation_records_.MergeFrom(from.citation_records_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_old_super()->::TSWP::PlaceholderSmartFieldArchive::MergeFrom(from._internal_old_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      localizable_ = from.localizable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BibliographySmartFieldArchive::CopyFrom(const BibliographySmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.BibliographySmartFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BibliographySmartFieldArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(citation_records_)) return false;
  return true;
}

void BibliographySmartFieldArchive::InternalSwap(BibliographySmartFieldArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  citation_records_.InternalSwap(&other->citation_records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BibliographySmartFieldArchive, localizable_)
      + sizeof(BibliographySmartFieldArchive::localizable_)
      - PROTOBUF_FIELD_OFFSET(BibliographySmartFieldArchive, old_super_)>(
          reinterpret_cast<char*>(&old_super_),
          reinterpret_cast<char*>(&other->old_super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BibliographySmartFieldArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[72]);
}

// ===================================================================

class CitationRecordArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CitationRecordArchive>()._has_bits_);
  static void set_has_endnote_xml(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hide_author_names(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hide_year(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_page_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_suffix(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_authors_string(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CitationRecordArchive::CitationRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.CitationRecordArchive)
}
CitationRecordArchive::CitationRecordArchive(const CitationRecordArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  endnote_xml_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_endnote_xml()) {
    endnote_xml_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_endnote_xml(), 
      GetArenaForAllocation());
  }
  page_range_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_page_range()) {
    page_range_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_page_range(), 
      GetArenaForAllocation());
  }
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prefix()) {
    prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefix(), 
      GetArenaForAllocation());
  }
  suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_suffix()) {
    suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_suffix(), 
      GetArenaForAllocation());
  }
  authors_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_authors_string()) {
    authors_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_authors_string(), 
      GetArenaForAllocation());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  year_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_year()) {
    year_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_year(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  ::memcpy(&hide_author_names_, &from.hide_author_names_,
    static_cast<size_t>(reinterpret_cast<char*>(&hide_year_) -
    reinterpret_cast<char*>(&hide_author_names_)) + sizeof(hide_year_));
  // @@protoc_insertion_point(copy_constructor:TSWP.CitationRecordArchive)
}

inline void CitationRecordArchive::SharedCtor() {
endnote_xml_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
page_range_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
authors_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
year_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hide_author_names_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hide_year_) -
    reinterpret_cast<char*>(&hide_author_names_)) + sizeof(hide_year_));
}

CitationRecordArchive::~CitationRecordArchive() {
  // @@protoc_insertion_point(destructor:TSWP.CitationRecordArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CitationRecordArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  endnote_xml_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_range_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suffix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authors_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  year_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CitationRecordArchive::ArenaDtor(void* object) {
  CitationRecordArchive* _this = reinterpret_cast< CitationRecordArchive* >(object);
  (void)_this;
}
void CitationRecordArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CitationRecordArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CitationRecordArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.CitationRecordArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      endnote_xml_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      page_range_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      suffix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      authors_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      year_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      type_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&hide_author_names_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hide_year_) -
      reinterpret_cast<char*>(&hide_author_names_)) + sizeof(hide_year_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CitationRecordArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string endnote_xml = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_endnote_xml();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.CitationRecordArchive.endnote_xml");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hide_author_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hide_author_names(&has_bits);
          hide_author_names_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hide_year = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hide_year(&has_bits);
          hide_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string page_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_page_range();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.CitationRecordArchive.page_range");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string prefix = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.CitationRecordArchive.prefix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string suffix = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_suffix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.CitationRecordArchive.suffix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string authors_string = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_authors_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.CitationRecordArchive.authors_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.CitationRecordArchive.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string year = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_year();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.CitationRecordArchive.year");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.CitationRecordArchive.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CitationRecordArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.CitationRecordArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string endnote_xml = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_endnote_xml().data(), static_cast<int>(this->_internal_endnote_xml().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CitationRecordArchive.endnote_xml");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_endnote_xml(), target);
  }

  // optional bool hide_author_names = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_hide_author_names(), target);
  }

  // optional bool hide_year = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_hide_year(), target);
  }

  // optional string page_range = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_page_range().data(), static_cast<int>(this->_internal_page_range().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CitationRecordArchive.page_range");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_page_range(), target);
  }

  // optional string prefix = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CitationRecordArchive.prefix");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_prefix(), target);
  }

  // optional string suffix = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_suffix().data(), static_cast<int>(this->_internal_suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CitationRecordArchive.suffix");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_suffix(), target);
  }

  // optional string authors_string = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_authors_string().data(), static_cast<int>(this->_internal_authors_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CitationRecordArchive.authors_string");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_authors_string(), target);
  }

  // optional string title = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CitationRecordArchive.title");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_title(), target);
  }

  // optional string year = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_year().data(), static_cast<int>(this->_internal_year().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CitationRecordArchive.year");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_year(), target);
  }

  // optional string type = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CitationRecordArchive.type");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.CitationRecordArchive)
  return target;
}

size_t CitationRecordArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.CitationRecordArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string endnote_xml = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_endnote_xml());
    }

    // optional string page_range = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_page_range());
    }

    // optional string prefix = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_prefix());
    }

    // optional string suffix = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_suffix());
    }

    // optional string authors_string = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_authors_string());
    }

    // optional string title = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string year = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_year());
    }

    // optional string type = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool hide_author_names = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool hide_year = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CitationRecordArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CitationRecordArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CitationRecordArchive::GetClassData() const { return &_class_data_; }

void CitationRecordArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CitationRecordArchive *>(to)->MergeFrom(
      static_cast<const CitationRecordArchive &>(from));
}


void CitationRecordArchive::MergeFrom(const CitationRecordArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.CitationRecordArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_endnote_xml(from._internal_endnote_xml());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_page_range(from._internal_page_range());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_prefix(from._internal_prefix());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_suffix(from._internal_suffix());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_authors_string(from._internal_authors_string());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_year(from._internal_year());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_type(from._internal_type());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      hide_author_names_ = from.hide_author_names_;
    }
    if (cached_has_bits & 0x00000200u) {
      hide_year_ = from.hide_year_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CitationRecordArchive::CopyFrom(const CitationRecordArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.CitationRecordArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CitationRecordArchive::IsInitialized() const {
  return true;
}

void CitationRecordArchive::InternalSwap(CitationRecordArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &endnote_xml_, GetArenaForAllocation(),
      &other->endnote_xml_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &page_range_, GetArenaForAllocation(),
      &other->page_range_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prefix_, GetArenaForAllocation(),
      &other->prefix_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &suffix_, GetArenaForAllocation(),
      &other->suffix_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &authors_string_, GetArenaForAllocation(),
      &other->authors_string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, GetArenaForAllocation(),
      &other->title_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &year_, GetArenaForAllocation(),
      &other->year_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CitationRecordArchive, hide_year_)
      + sizeof(CitationRecordArchive::hide_year_)
      - PROTOBUF_FIELD_OFFSET(CitationRecordArchive, hide_author_names_)>(
          reinterpret_cast<char*>(&hide_author_names_),
          reinterpret_cast<char*>(&other->hide_author_names_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CitationRecordArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[73]);
}

// ===================================================================

class CitationSmartFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CitationSmartFieldArchive>()._has_bits_);
  static const ::TSWP::SmartFieldArchive& super(const CitationSmartFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_localizable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSWP::PlaceholderSmartFieldArchive& old_super(const CitationSmartFieldArchive* msg);
  static void set_has_old_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSWP::SmartFieldArchive&
CitationSmartFieldArchive::_Internal::super(const CitationSmartFieldArchive* msg) {
  return *msg->super_;
}
const ::TSWP::PlaceholderSmartFieldArchive&
CitationSmartFieldArchive::_Internal::old_super(const CitationSmartFieldArchive* msg) {
  return *msg->old_super_;
}
void CitationSmartFieldArchive::clear_citation_records() {
  citation_records_.Clear();
}
CitationSmartFieldArchive::CitationSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  citation_records_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.CitationSmartFieldArchive)
}
CitationSmartFieldArchive::CitationSmartFieldArchive(const CitationSmartFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      citation_records_(from.citation_records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_old_super()) {
    old_super_ = new ::TSWP::PlaceholderSmartFieldArchive(*from.old_super_);
  } else {
    old_super_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TSWP::SmartFieldArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  localizable_ = from.localizable_;
  // @@protoc_insertion_point(copy_constructor:TSWP.CitationSmartFieldArchive)
}

inline void CitationSmartFieldArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&old_super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&localizable_) -
    reinterpret_cast<char*>(&old_super_)) + sizeof(localizable_));
}

CitationSmartFieldArchive::~CitationSmartFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.CitationSmartFieldArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CitationSmartFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete old_super_;
  if (this != internal_default_instance()) delete super_;
}

void CitationSmartFieldArchive::ArenaDtor(void* object) {
  CitationSmartFieldArchive* _this = reinterpret_cast< CitationSmartFieldArchive* >(object);
  (void)_this;
}
void CitationSmartFieldArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CitationSmartFieldArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CitationSmartFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.CitationSmartFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  citation_records_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(old_super_ != nullptr);
      old_super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  localizable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CitationSmartFieldArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference citation_records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_citation_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSWP.SmartFieldArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool localizable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_localizable(&has_bits);
          localizable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CitationSmartFieldArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.CitationSmartFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::old_super(this), target, stream);
  }

  // repeated .TSP.Reference citation_records = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_citation_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_citation_records(i), target, stream);
  }

  // optional .TSWP.SmartFieldArchive super = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::super(this), target, stream);
  }

  // optional bool localizable = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_localizable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.CitationSmartFieldArchive)
  return target;
}

size_t CitationSmartFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.CitationSmartFieldArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference citation_records = 2;
  total_size += 1UL * this->_internal_citation_records_size();
  for (const auto& msg : this->citation_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_super_);
    }

    // optional .TSWP.SmartFieldArchive super = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional bool localizable = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CitationSmartFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CitationSmartFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CitationSmartFieldArchive::GetClassData() const { return &_class_data_; }

void CitationSmartFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CitationSmartFieldArchive *>(to)->MergeFrom(
      static_cast<const CitationSmartFieldArchive &>(from));
}


void CitationSmartFieldArchive::MergeFrom(const CitationSmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.CitationSmartFieldArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  citation_records_.MergeFrom(from.citation_records_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_old_super()->::TSWP::PlaceholderSmartFieldArchive::MergeFrom(from._internal_old_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      localizable_ = from.localizable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CitationSmartFieldArchive::CopyFrom(const CitationSmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.CitationSmartFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CitationSmartFieldArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(citation_records_)) return false;
  return true;
}

void CitationSmartFieldArchive::InternalSwap(CitationSmartFieldArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  citation_records_.InternalSwap(&other->citation_records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CitationSmartFieldArchive, localizable_)
      + sizeof(CitationSmartFieldArchive::localizable_)
      - PROTOBUF_FIELD_OFFSET(CitationSmartFieldArchive, old_super_)>(
          reinterpret_cast<char*>(&old_super_),
          reinterpret_cast<char*>(&other->old_super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CitationSmartFieldArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[74]);
}

// ===================================================================

class DateTimeSmartFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DateTimeSmartFieldArchive>()._has_bits_);
  static const ::TSWP::SmartFieldArchive& super(const DateTimeSmartFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_locale_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_date_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time_style(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_update_plan(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_needs_update(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Date& date(const DateTimeSmartFieldArchive* msg);
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSWP::SmartFieldArchive&
DateTimeSmartFieldArchive::_Internal::super(const DateTimeSmartFieldArchive* msg) {
  return *msg->super_;
}
const ::TSP::Date&
DateTimeSmartFieldArchive::_Internal::date(const DateTimeSmartFieldArchive* msg) {
  return *msg->date_;
}
void DateTimeSmartFieldArchive::clear_date() {
  if (date_ != nullptr) date_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
DateTimeSmartFieldArchive::DateTimeSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.DateTimeSmartFieldArchive)
}
DateTimeSmartFieldArchive::DateTimeSmartFieldArchive(const DateTimeSmartFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_format()) {
    format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_format(), 
      GetArenaForAllocation());
  }
  locale_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_locale_identifier()) {
    locale_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_locale_identifier(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSWP::SmartFieldArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_date()) {
    date_ = new ::TSP::Date(*from.date_);
  } else {
    date_ = nullptr;
  }
  ::memcpy(&date_style_, &from.date_style_,
    static_cast<size_t>(reinterpret_cast<char*>(&needs_update_) -
    reinterpret_cast<char*>(&date_style_)) + sizeof(needs_update_));
  // @@protoc_insertion_point(copy_constructor:TSWP.DateTimeSmartFieldArchive)
}

inline void DateTimeSmartFieldArchive::SharedCtor() {
format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
locale_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&needs_update_) -
    reinterpret_cast<char*>(&super_)) + sizeof(needs_update_));
}

DateTimeSmartFieldArchive::~DateTimeSmartFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.DateTimeSmartFieldArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DateTimeSmartFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete date_;
}

void DateTimeSmartFieldArchive::ArenaDtor(void* object) {
  DateTimeSmartFieldArchive* _this = reinterpret_cast< DateTimeSmartFieldArchive* >(object);
  (void)_this;
}
void DateTimeSmartFieldArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DateTimeSmartFieldArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DateTimeSmartFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.DateTimeSmartFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      locale_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(date_ != nullptr);
      date_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&date_style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&needs_update_) -
        reinterpret_cast<char*>(&date_style_)) + sizeof(needs_update_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DateTimeSmartFieldArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.SmartFieldArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.DateTimeSmartFieldArchive.format");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string locale_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_locale_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.DateTimeSmartFieldArchive.locale_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle_IsValid(val))) {
            _internal_set_date_style(static_cast<::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle_IsValid(val))) {
            _internal_set_time_style(static_cast<::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSWP.DateTimeSmartFieldArchive.DateTimeUpdatePlan update_plan = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::DateTimeSmartFieldArchive_DateTimeUpdatePlan_IsValid(val))) {
            _internal_set_update_plan(static_cast<::TSWP::DateTimeSmartFieldArchive_DateTimeUpdatePlan>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool needs_update = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_needs_update(&has_bits);
          needs_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Date date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DateTimeSmartFieldArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.DateTimeSmartFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.SmartFieldArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional string format = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.DateTimeSmartFieldArchive.format");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_format(), target);
  }

  // optional string locale_identifier = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_locale_identifier().data(), static_cast<int>(this->_internal_locale_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.DateTimeSmartFieldArchive.locale_identifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_locale_identifier(), target);
  }

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_date_style(), target);
  }

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_time_style(), target);
  }

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeUpdatePlan update_plan = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_update_plan(), target);
  }

  // optional bool needs_update = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_needs_update(), target);
  }

  // optional .TSP.Date date = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::date(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.DateTimeSmartFieldArchive)
  return target;
}

size_t DateTimeSmartFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.DateTimeSmartFieldArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string format = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_format());
    }

    // optional string locale_identifier = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_locale_identifier());
    }

    // optional .TSWP.SmartFieldArchive super = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Date date = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *date_);
    }

    // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_date_style());
    }

    // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_time_style());
    }

    // optional .TSWP.DateTimeSmartFieldArchive.DateTimeUpdatePlan update_plan = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_update_plan());
    }

    // optional bool needs_update = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DateTimeSmartFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DateTimeSmartFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DateTimeSmartFieldArchive::GetClassData() const { return &_class_data_; }

void DateTimeSmartFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DateTimeSmartFieldArchive *>(to)->MergeFrom(
      static_cast<const DateTimeSmartFieldArchive &>(from));
}


void DateTimeSmartFieldArchive::MergeFrom(const DateTimeSmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.DateTimeSmartFieldArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_format(from._internal_format());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_locale_identifier(from._internal_locale_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_date()->::TSP::Date::MergeFrom(from._internal_date());
    }
    if (cached_has_bits & 0x00000010u) {
      date_style_ = from.date_style_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_style_ = from.time_style_;
    }
    if (cached_has_bits & 0x00000040u) {
      update_plan_ = from.update_plan_;
    }
    if (cached_has_bits & 0x00000080u) {
      needs_update_ = from.needs_update_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DateTimeSmartFieldArchive::CopyFrom(const DateTimeSmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.DateTimeSmartFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeSmartFieldArchive::IsInitialized() const {
  if (_internal_has_date()) {
    if (!date_->IsInitialized()) return false;
  }
  return true;
}

void DateTimeSmartFieldArchive::InternalSwap(DateTimeSmartFieldArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &format_, GetArenaForAllocation(),
      &other->format_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &locale_identifier_, GetArenaForAllocation(),
      &other->locale_identifier_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DateTimeSmartFieldArchive, needs_update_)
      + sizeof(DateTimeSmartFieldArchive::needs_update_)
      - PROTOBUF_FIELD_OFFSET(DateTimeSmartFieldArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DateTimeSmartFieldArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[75]);
}

// ===================================================================

class BookmarkFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BookmarkFieldArchive>()._has_bits_);
  static const ::TSWP::SmartFieldArchive& super(const BookmarkFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ranged(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSWP::SmartFieldArchive&
BookmarkFieldArchive::_Internal::super(const BookmarkFieldArchive* msg) {
  return *msg->super_;
}
BookmarkFieldArchive::BookmarkFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.BookmarkFieldArchive)
}
BookmarkFieldArchive::BookmarkFieldArchive(const BookmarkFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSWP::SmartFieldArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&ranged_, &from.ranged_,
    static_cast<size_t>(reinterpret_cast<char*>(&hidden_) -
    reinterpret_cast<char*>(&ranged_)) + sizeof(hidden_));
  // @@protoc_insertion_point(copy_constructor:TSWP.BookmarkFieldArchive)
}

inline void BookmarkFieldArchive::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hidden_) -
    reinterpret_cast<char*>(&super_)) + sizeof(hidden_));
}

BookmarkFieldArchive::~BookmarkFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.BookmarkFieldArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BookmarkFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void BookmarkFieldArchive::ArenaDtor(void* object) {
  BookmarkFieldArchive* _this = reinterpret_cast< BookmarkFieldArchive* >(object);
  (void)_this;
}
void BookmarkFieldArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BookmarkFieldArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BookmarkFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.BookmarkFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&ranged_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hidden_) -
        reinterpret_cast<char*>(&ranged_)) + sizeof(hidden_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BookmarkFieldArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.SmartFieldArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.BookmarkFieldArchive.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ranged = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ranged(&has_bits);
          ranged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hidden = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_hidden(&has_bits);
          hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BookmarkFieldArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.BookmarkFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.SmartFieldArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.BookmarkFieldArchive.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 ranged = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ranged(), target);
  }

  // optional uint32 hidden = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hidden(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.BookmarkFieldArchive)
  return target;
}

size_t BookmarkFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.BookmarkFieldArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .TSWP.SmartFieldArchive super = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional uint32 ranged = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ranged());
    }

    // optional uint32 hidden = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hidden());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BookmarkFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BookmarkFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BookmarkFieldArchive::GetClassData() const { return &_class_data_; }

void BookmarkFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BookmarkFieldArchive *>(to)->MergeFrom(
      static_cast<const BookmarkFieldArchive &>(from));
}


void BookmarkFieldArchive::MergeFrom(const BookmarkFieldArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.BookmarkFieldArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      ranged_ = from.ranged_;
    }
    if (cached_has_bits & 0x00000008u) {
      hidden_ = from.hidden_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BookmarkFieldArchive::CopyFrom(const BookmarkFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.BookmarkFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookmarkFieldArchive::IsInitialized() const {
  return true;
}

void BookmarkFieldArchive::InternalSwap(BookmarkFieldArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BookmarkFieldArchive, hidden_)
      + sizeof(BookmarkFieldArchive::hidden_)
      - PROTOBUF_FIELD_OFFSET(BookmarkFieldArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BookmarkFieldArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[76]);
}

// ===================================================================

class FilenameSmartFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FilenameSmartFieldArchive>()._has_bits_);
  static const ::TSWP::PlaceholderSmartFieldArchive& super(const FilenameSmartFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_display_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSWP::PlaceholderSmartFieldArchive&
FilenameSmartFieldArchive::_Internal::super(const FilenameSmartFieldArchive* msg) {
  return *msg->super_;
}
FilenameSmartFieldArchive::FilenameSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.FilenameSmartFieldArchive)
}
FilenameSmartFieldArchive::FilenameSmartFieldArchive(const FilenameSmartFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::PlaceholderSmartFieldArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  display_flags_ = from.display_flags_;
  // @@protoc_insertion_point(copy_constructor:TSWP.FilenameSmartFieldArchive)
}

inline void FilenameSmartFieldArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&display_flags_) -
    reinterpret_cast<char*>(&super_)) + sizeof(display_flags_));
}

FilenameSmartFieldArchive::~FilenameSmartFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.FilenameSmartFieldArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FilenameSmartFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void FilenameSmartFieldArchive::ArenaDtor(void* object) {
  FilenameSmartFieldArchive* _this = reinterpret_cast< FilenameSmartFieldArchive* >(object);
  (void)_this;
}
void FilenameSmartFieldArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilenameSmartFieldArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FilenameSmartFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.FilenameSmartFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  display_flags_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilenameSmartFieldArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 display_flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_display_flags(&has_bits);
          display_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilenameSmartFieldArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.FilenameSmartFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 display_flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_display_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.FilenameSmartFieldArchive)
  return target;
}

size_t FilenameSmartFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.FilenameSmartFieldArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional uint32 display_flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_display_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilenameSmartFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FilenameSmartFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilenameSmartFieldArchive::GetClassData() const { return &_class_data_; }

void FilenameSmartFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FilenameSmartFieldArchive *>(to)->MergeFrom(
      static_cast<const FilenameSmartFieldArchive &>(from));
}


void FilenameSmartFieldArchive::MergeFrom(const FilenameSmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.FilenameSmartFieldArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSWP::PlaceholderSmartFieldArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      display_flags_ = from.display_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilenameSmartFieldArchive::CopyFrom(const FilenameSmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.FilenameSmartFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilenameSmartFieldArchive::IsInitialized() const {
  return true;
}

void FilenameSmartFieldArchive::InternalSwap(FilenameSmartFieldArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilenameSmartFieldArchive, display_flags_)
      + sizeof(FilenameSmartFieldArchive::display_flags_)
      - PROTOBUF_FIELD_OFFSET(FilenameSmartFieldArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilenameSmartFieldArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[77]);
}

// ===================================================================

class MergeSmartFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MergeSmartFieldArchive>()._has_bits_);
  static const ::TSWP::PlaceholderSmartFieldArchive& super(const MergeSmartFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_requires_following_whitespace(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_whitespace(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_table_field(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::TSWP::PlaceholderSmartFieldArchive&
MergeSmartFieldArchive::_Internal::super(const MergeSmartFieldArchive* msg) {
  return *msg->super_;
}
MergeSmartFieldArchive::MergeSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.MergeSmartFieldArchive)
}
MergeSmartFieldArchive::MergeSmartFieldArchive(const MergeSmartFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_property()) {
    property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_property(), 
      GetArenaForAllocation());
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArenaForAllocation());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  whitespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_whitespace()) {
    whitespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_whitespace(), 
      GetArenaForAllocation());
  }
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_guid()) {
    guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_guid(), 
      GetArenaForAllocation());
  }
  table_field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_table_field()) {
    table_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_field(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSWP::PlaceholderSmartFieldArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&category_, &from.category_,
    static_cast<size_t>(reinterpret_cast<char*>(&requires_following_whitespace_) -
    reinterpret_cast<char*>(&category_)) + sizeof(requires_following_whitespace_));
  // @@protoc_insertion_point(copy_constructor:TSWP.MergeSmartFieldArchive)
}

inline void MergeSmartFieldArchive::SharedCtor() {
property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
whitespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
table_field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&requires_following_whitespace_) -
    reinterpret_cast<char*>(&super_)) + sizeof(requires_following_whitespace_));
}

MergeSmartFieldArchive::~MergeSmartFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.MergeSmartFieldArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MergeSmartFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  property_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  whitespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_field_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void MergeSmartFieldArchive::ArenaDtor(void* object) {
  MergeSmartFieldArchive* _this = reinterpret_cast< MergeSmartFieldArchive* >(object);
  (void)_this;
}
void MergeSmartFieldArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MergeSmartFieldArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MergeSmartFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.MergeSmartFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      whitespace_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      guid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      table_field_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  category_ = 0;
  requires_following_whitespace_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeSmartFieldArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_property();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.MergeSmartFieldArchive.property");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.MergeSmartFieldArchive.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.MergeSmartFieldArchive.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.MergeSmartFieldArchive.MergeCategory category = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::MergeSmartFieldArchive_MergeCategory_IsValid(val))) {
            _internal_set_category(static_cast<::TSWP::MergeSmartFieldArchive_MergeCategory>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool requires_following_whitespace = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_requires_following_whitespace(&has_bits);
          requires_following_whitespace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string whitespace = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_whitespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.MergeSmartFieldArchive.whitespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string guid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_guid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.MergeSmartFieldArchive.guid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string table_field = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_table_field();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.MergeSmartFieldArchive.table_field");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MergeSmartFieldArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.MergeSmartFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional string property = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.MergeSmartFieldArchive.property");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_property(), target);
  }

  // optional string label = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.MergeSmartFieldArchive.label");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_label(), target);
  }

  // optional string key = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.MergeSmartFieldArchive.key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_key(), target);
  }

  // optional .TSWP.MergeSmartFieldArchive.MergeCategory category = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_category(), target);
  }

  // optional bool requires_following_whitespace = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_requires_following_whitespace(), target);
  }

  // optional string whitespace = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_whitespace().data(), static_cast<int>(this->_internal_whitespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.MergeSmartFieldArchive.whitespace");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_whitespace(), target);
  }

  // optional string guid = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_guid().data(), static_cast<int>(this->_internal_guid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.MergeSmartFieldArchive.guid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_guid(), target);
  }

  // optional string table_field = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_table_field().data(), static_cast<int>(this->_internal_table_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.MergeSmartFieldArchive.table_field");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_table_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.MergeSmartFieldArchive)
  return target;
}

size_t MergeSmartFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.MergeSmartFieldArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string property = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_property());
    }

    // optional string label = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional string key = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string whitespace = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_whitespace());
    }

    // optional string guid = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guid());
    }

    // optional string table_field = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_table_field());
    }

    // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSWP.MergeSmartFieldArchive.MergeCategory category = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_category());
    }

  }
  // optional bool requires_following_whitespace = 6;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MergeSmartFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MergeSmartFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MergeSmartFieldArchive::GetClassData() const { return &_class_data_; }

void MergeSmartFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MergeSmartFieldArchive *>(to)->MergeFrom(
      static_cast<const MergeSmartFieldArchive &>(from));
}


void MergeSmartFieldArchive::MergeFrom(const MergeSmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.MergeSmartFieldArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_whitespace(from._internal_whitespace());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_guid(from._internal_guid());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_table_field(from._internal_table_field());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_super()->::TSWP::PlaceholderSmartFieldArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000080u) {
      category_ = from.category_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_requires_following_whitespace(from._internal_requires_following_whitespace());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MergeSmartFieldArchive::CopyFrom(const MergeSmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.MergeSmartFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeSmartFieldArchive::IsInitialized() const {
  return true;
}

void MergeSmartFieldArchive::InternalSwap(MergeSmartFieldArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &property_, GetArenaForAllocation(),
      &other->property_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &label_, GetArenaForAllocation(),
      &other->label_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &whitespace_, GetArenaForAllocation(),
      &other->whitespace_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &guid_, GetArenaForAllocation(),
      &other->guid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_field_, GetArenaForAllocation(),
      &other->table_field_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MergeSmartFieldArchive, requires_following_whitespace_)
      + sizeof(MergeSmartFieldArchive::requires_following_whitespace_)
      - PROTOBUF_FIELD_OFFSET(MergeSmartFieldArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeSmartFieldArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[78]);
}

// ===================================================================

class TOCSmartFieldArchive_TOCEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<TOCSmartFieldArchive_TOCEntry>()._has_bits_);
  static void set_has_bookmark_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& target_style(const TOCSmartFieldArchive_TOCEntry* msg);
  static void set_has_target_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Range& range(const TOCSmartFieldArchive_TOCEntry* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Reference&
TOCSmartFieldArchive_TOCEntry::_Internal::target_style(const TOCSmartFieldArchive_TOCEntry* msg) {
  return *msg->target_style_;
}
const ::TSP::Range&
TOCSmartFieldArchive_TOCEntry::_Internal::range(const TOCSmartFieldArchive_TOCEntry* msg) {
  return *msg->range_;
}
void TOCSmartFieldArchive_TOCEntry::clear_target_style() {
  if (target_style_ != nullptr) target_style_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TOCSmartFieldArchive_TOCEntry::clear_range() {
  if (range_ != nullptr) range_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TOCSmartFieldArchive_TOCEntry::TOCSmartFieldArchive_TOCEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.TOCSmartFieldArchive.TOCEntry)
}
TOCSmartFieldArchive_TOCEntry::TOCSmartFieldArchive_TOCEntry(const TOCSmartFieldArchive_TOCEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bookmark_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bookmark_name()) {
    bookmark_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bookmark_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_target_style()) {
    target_style_ = new ::TSP::Reference(*from.target_style_);
  } else {
    target_style_ = nullptr;
  }
  if (from._internal_has_range()) {
    range_ = new ::TSP::Range(*from.range_);
  } else {
    range_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.TOCSmartFieldArchive.TOCEntry)
}

inline void TOCSmartFieldArchive_TOCEntry::SharedCtor() {
bookmark_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&range_) -
    reinterpret_cast<char*>(&target_style_)) + sizeof(range_));
}

TOCSmartFieldArchive_TOCEntry::~TOCSmartFieldArchive_TOCEntry() {
  // @@protoc_insertion_point(destructor:TSWP.TOCSmartFieldArchive.TOCEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TOCSmartFieldArchive_TOCEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bookmark_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete target_style_;
  if (this != internal_default_instance()) delete range_;
}

void TOCSmartFieldArchive_TOCEntry::ArenaDtor(void* object) {
  TOCSmartFieldArchive_TOCEntry* _this = reinterpret_cast< TOCSmartFieldArchive_TOCEntry* >(object);
  (void)_this;
}
void TOCSmartFieldArchive_TOCEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TOCSmartFieldArchive_TOCEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TOCSmartFieldArchive_TOCEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TOCSmartFieldArchive.TOCEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      bookmark_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_style_ != nullptr);
      target_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(range_ != nullptr);
      range_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOCSmartFieldArchive_TOCEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string bookmark_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bookmark_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.TOCSmartFieldArchive.TOCEntry.bookmark_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference target_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Range range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TOCSmartFieldArchive_TOCEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TOCSmartFieldArchive.TOCEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string bookmark_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bookmark_name().data(), static_cast<int>(this->_internal_bookmark_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.TOCSmartFieldArchive.TOCEntry.bookmark_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bookmark_name(), target);
  }

  // optional .TSP.Reference target_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_style(this), target, stream);
  }

  // optional .TSP.Range range = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TOCSmartFieldArchive.TOCEntry)
  return target;
}

size_t TOCSmartFieldArchive_TOCEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TOCSmartFieldArchive.TOCEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string bookmark_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bookmark_name());
    }

    // optional .TSP.Reference target_style = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_style_);
    }

    // optional .TSP.Range range = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *range_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOCSmartFieldArchive_TOCEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TOCSmartFieldArchive_TOCEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOCSmartFieldArchive_TOCEntry::GetClassData() const { return &_class_data_; }

void TOCSmartFieldArchive_TOCEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TOCSmartFieldArchive_TOCEntry *>(to)->MergeFrom(
      static_cast<const TOCSmartFieldArchive_TOCEntry &>(from));
}


void TOCSmartFieldArchive_TOCEntry::MergeFrom(const TOCSmartFieldArchive_TOCEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TOCSmartFieldArchive.TOCEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_bookmark_name(from._internal_bookmark_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target_style()->::TSP::Reference::MergeFrom(from._internal_target_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_range()->::TSP::Range::MergeFrom(from._internal_range());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOCSmartFieldArchive_TOCEntry::CopyFrom(const TOCSmartFieldArchive_TOCEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TOCSmartFieldArchive.TOCEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCSmartFieldArchive_TOCEntry::IsInitialized() const {
  if (_internal_has_target_style()) {
    if (!target_style_->IsInitialized()) return false;
  }
  if (_internal_has_range()) {
    if (!range_->IsInitialized()) return false;
  }
  return true;
}

void TOCSmartFieldArchive_TOCEntry::InternalSwap(TOCSmartFieldArchive_TOCEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bookmark_name_, GetArenaForAllocation(),
      &other->bookmark_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TOCSmartFieldArchive_TOCEntry, range_)
      + sizeof(TOCSmartFieldArchive_TOCEntry::range_)
      - PROTOBUF_FIELD_OFFSET(TOCSmartFieldArchive_TOCEntry, target_style_)>(
          reinterpret_cast<char*>(&target_style_),
          reinterpret_cast<char*>(&other->target_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TOCSmartFieldArchive_TOCEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[79]);
}

// ===================================================================

class TOCSmartFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TOCSmartFieldArchive>()._has_bits_);
  static const ::TSWP::PlaceholderSmartFieldArchive& super(const TOCSmartFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSWP::PlaceholderSmartFieldArchive&
TOCSmartFieldArchive::_Internal::super(const TOCSmartFieldArchive* msg) {
  return *msg->super_;
}
TOCSmartFieldArchive::TOCSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  toc_entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.TOCSmartFieldArchive)
}
TOCSmartFieldArchive::TOCSmartFieldArchive(const TOCSmartFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      toc_entries_(from.toc_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::PlaceholderSmartFieldArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.TOCSmartFieldArchive)
}

inline void TOCSmartFieldArchive::SharedCtor() {
super_ = nullptr;
}

TOCSmartFieldArchive::~TOCSmartFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TOCSmartFieldArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TOCSmartFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void TOCSmartFieldArchive::ArenaDtor(void* object) {
  TOCSmartFieldArchive* _this = reinterpret_cast< TOCSmartFieldArchive* >(object);
  (void)_this;
}
void TOCSmartFieldArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TOCSmartFieldArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TOCSmartFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TOCSmartFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  toc_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOCSmartFieldArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSWP.TOCSmartFieldArchive.TOCEntry toc_entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_toc_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TOCSmartFieldArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TOCSmartFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSWP.TOCSmartFieldArchive.TOCEntry toc_entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_toc_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_toc_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TOCSmartFieldArchive)
  return target;
}

size_t TOCSmartFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TOCSmartFieldArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.TOCSmartFieldArchive.TOCEntry toc_entries = 2;
  total_size += 1UL * this->_internal_toc_entries_size();
  for (const auto& msg : this->toc_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOCSmartFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TOCSmartFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOCSmartFieldArchive::GetClassData() const { return &_class_data_; }

void TOCSmartFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TOCSmartFieldArchive *>(to)->MergeFrom(
      static_cast<const TOCSmartFieldArchive &>(from));
}


void TOCSmartFieldArchive::MergeFrom(const TOCSmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TOCSmartFieldArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  toc_entries_.MergeFrom(from.toc_entries_);
  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSWP::PlaceholderSmartFieldArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOCSmartFieldArchive::CopyFrom(const TOCSmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TOCSmartFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCSmartFieldArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(toc_entries_)) return false;
  return true;
}

void TOCSmartFieldArchive::InternalSwap(TOCSmartFieldArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  toc_entries_.InternalSwap(&other->toc_entries_);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TOCSmartFieldArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[80]);
}

// ===================================================================

class RubyFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RubyFieldArchive>()._has_bits_);
  static const ::TSWP::SmartFieldArchive& super(const RubyFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ruby_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSWP::SmartFieldArchive&
RubyFieldArchive::_Internal::super(const RubyFieldArchive* msg) {
  return *msg->super_;
}
RubyFieldArchive::RubyFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.RubyFieldArchive)
}
RubyFieldArchive::RubyFieldArchive(const RubyFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ruby_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ruby_text()) {
    ruby_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ruby_text(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSWP::SmartFieldArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.RubyFieldArchive)
}

inline void RubyFieldArchive::SharedCtor() {
ruby_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
super_ = nullptr;
}

RubyFieldArchive::~RubyFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.RubyFieldArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RubyFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ruby_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void RubyFieldArchive::ArenaDtor(void* object) {
  RubyFieldArchive* _this = reinterpret_cast< RubyFieldArchive* >(object);
  (void)_this;
}
void RubyFieldArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RubyFieldArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RubyFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.RubyFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ruby_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RubyFieldArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.SmartFieldArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ruby_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ruby_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.RubyFieldArchive.ruby_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RubyFieldArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.RubyFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.SmartFieldArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional string ruby_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ruby_text().data(), static_cast<int>(this->_internal_ruby_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.RubyFieldArchive.ruby_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ruby_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.RubyFieldArchive)
  return target;
}

size_t RubyFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.RubyFieldArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string ruby_text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ruby_text());
    }

    // optional .TSWP.SmartFieldArchive super = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RubyFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RubyFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RubyFieldArchive::GetClassData() const { return &_class_data_; }

void RubyFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RubyFieldArchive *>(to)->MergeFrom(
      static_cast<const RubyFieldArchive &>(from));
}


void RubyFieldArchive::MergeFrom(const RubyFieldArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.RubyFieldArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ruby_text(from._internal_ruby_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(from._internal_super());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RubyFieldArchive::CopyFrom(const RubyFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.RubyFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RubyFieldArchive::IsInitialized() const {
  return true;
}

void RubyFieldArchive::InternalSwap(RubyFieldArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ruby_text_, GetArenaForAllocation(),
      &other->ruby_text_, other->GetArenaForAllocation()
  );
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RubyFieldArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[81]);
}

// ===================================================================

class TateChuYokoFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TateChuYokoFieldArchive>()._has_bits_);
  static const ::TSWP::SmartFieldArchive& super(const TateChuYokoFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSWP::SmartFieldArchive&
TateChuYokoFieldArchive::_Internal::super(const TateChuYokoFieldArchive* msg) {
  return *msg->super_;
}
TateChuYokoFieldArchive::TateChuYokoFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.TateChuYokoFieldArchive)
}
TateChuYokoFieldArchive::TateChuYokoFieldArchive(const TateChuYokoFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::SmartFieldArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.TateChuYokoFieldArchive)
}

inline void TateChuYokoFieldArchive::SharedCtor() {
super_ = nullptr;
}

TateChuYokoFieldArchive::~TateChuYokoFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TateChuYokoFieldArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TateChuYokoFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void TateChuYokoFieldArchive::ArenaDtor(void* object) {
  TateChuYokoFieldArchive* _this = reinterpret_cast< TateChuYokoFieldArchive* >(object);
  (void)_this;
}
void TateChuYokoFieldArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TateChuYokoFieldArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TateChuYokoFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TateChuYokoFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TateChuYokoFieldArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.SmartFieldArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TateChuYokoFieldArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TateChuYokoFieldArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.SmartFieldArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TateChuYokoFieldArchive)
  return target;
}

size_t TateChuYokoFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TateChuYokoFieldArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSWP.SmartFieldArchive super = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TateChuYokoFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TateChuYokoFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TateChuYokoFieldArchive::GetClassData() const { return &_class_data_; }

void TateChuYokoFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TateChuYokoFieldArchive *>(to)->MergeFrom(
      static_cast<const TateChuYokoFieldArchive &>(from));
}


void TateChuYokoFieldArchive::MergeFrom(const TateChuYokoFieldArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TateChuYokoFieldArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TateChuYokoFieldArchive::CopyFrom(const TateChuYokoFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TateChuYokoFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TateChuYokoFieldArchive::IsInitialized() const {
  return true;
}

void TateChuYokoFieldArchive::InternalSwap(TateChuYokoFieldArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TateChuYokoFieldArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[82]);
}

// ===================================================================

class ChangeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeArchive>()._has_bits_);
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& session(const ChangeArchive* msg);
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Date& date(const ChangeArchive* msg);
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_text_attribute_uuid_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
ChangeArchive::_Internal::session(const ChangeArchive* msg) {
  return *msg->session_;
}
const ::TSP::Date&
ChangeArchive::_Internal::date(const ChangeArchive* msg) {
  return *msg->date_;
}
void ChangeArchive::clear_session() {
  if (session_ != nullptr) session_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChangeArchive::clear_date() {
  if (date_ != nullptr) date_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ChangeArchive::ChangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ChangeArchive)
}
ChangeArchive::ChangeArchive(const ChangeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_attribute_uuid_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text_attribute_uuid_string()) {
    text_attribute_uuid_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text_attribute_uuid_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_session()) {
    session_ = new ::TSP::Reference(*from.session_);
  } else {
    session_ = nullptr;
  }
  if (from._internal_has_date()) {
    date_ = new ::TSP::Date(*from.date_);
  } else {
    date_ = nullptr;
  }
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:TSWP.ChangeArchive)
}

inline void ChangeArchive::SharedCtor() {
text_attribute_uuid_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&date_) -
    reinterpret_cast<char*>(&session_)) + sizeof(date_));
kind_ = 1;
}

ChangeArchive::~ChangeArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ChangeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChangeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_attribute_uuid_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete session_;
  if (this != internal_default_instance()) delete date_;
}

void ChangeArchive::ArenaDtor(void* object) {
  ChangeArchive* _this = reinterpret_cast< ChangeArchive* >(object);
  (void)_this;
}
void ChangeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ChangeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      text_attribute_uuid_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(session_ != nullptr);
      session_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(date_ != nullptr);
      date_->Clear();
    }
    kind_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.ChangeArchive.ChangeKind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::ChangeArchive_ChangeKind_IsValid(val))) {
            _internal_set_kind(static_cast<::TSWP::ChangeArchive_ChangeKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference session = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Date date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text_attribute_uuid_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_text_attribute_uuid_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.ChangeArchive.text_attribute_uuid_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ChangeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.ChangeArchive.ChangeKind kind = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // optional .TSP.Reference session = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::session(this), target, stream);
  }

  // optional .TSP.Date date = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::date(this), target, stream);
  }

  // optional string text_attribute_uuid_string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text_attribute_uuid_string().data(), static_cast<int>(this->_internal_text_attribute_uuid_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.ChangeArchive.text_attribute_uuid_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text_attribute_uuid_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ChangeArchive)
  return target;
}

size_t ChangeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ChangeArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string text_attribute_uuid_string = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text_attribute_uuid_string());
    }

    // optional .TSP.Reference session = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *session_);
    }

    // optional .TSP.Date date = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *date_);
    }

    // optional .TSWP.ChangeArchive.ChangeKind kind = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeArchive::GetClassData() const { return &_class_data_; }

void ChangeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChangeArchive *>(to)->MergeFrom(
      static_cast<const ChangeArchive &>(from));
}


void ChangeArchive::MergeFrom(const ChangeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ChangeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text_attribute_uuid_string(from._internal_text_attribute_uuid_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_session()->::TSP::Reference::MergeFrom(from._internal_session());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_date()->::TSP::Date::MergeFrom(from._internal_date());
    }
    if (cached_has_bits & 0x00000008u) {
      kind_ = from.kind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeArchive::CopyFrom(const ChangeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ChangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeArchive::IsInitialized() const {
  if (_internal_has_session()) {
    if (!session_->IsInitialized()) return false;
  }
  if (_internal_has_date()) {
    if (!date_->IsInitialized()) return false;
  }
  return true;
}

void ChangeArchive::InternalSwap(ChangeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_attribute_uuid_string_, GetArenaForAllocation(),
      &other->text_attribute_uuid_string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeArchive, date_)
      + sizeof(ChangeArchive::date_)
      - PROTOBUF_FIELD_OFFSET(ChangeArchive, session_)>(
          reinterpret_cast<char*>(&session_),
          reinterpret_cast<char*>(&other->session_));
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[83]);
}

// ===================================================================

class ChangeSessionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeSessionArchive>()._has_bits_);
  static void set_has_session_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& author(const ChangeSessionArchive* msg);
  static void set_has_author(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Date& date(const ChangeSessionArchive* msg);
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
ChangeSessionArchive::_Internal::author(const ChangeSessionArchive* msg) {
  return *msg->author_;
}
const ::TSP::Date&
ChangeSessionArchive::_Internal::date(const ChangeSessionArchive* msg) {
  return *msg->date_;
}
void ChangeSessionArchive::clear_author() {
  if (author_ != nullptr) author_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ChangeSessionArchive::clear_date() {
  if (date_ != nullptr) date_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ChangeSessionArchive::ChangeSessionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.ChangeSessionArchive)
}
ChangeSessionArchive::ChangeSessionArchive(const ChangeSessionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_author()) {
    author_ = new ::TSP::Reference(*from.author_);
  } else {
    author_ = nullptr;
  }
  if (from._internal_has_date()) {
    date_ = new ::TSP::Date(*from.date_);
  } else {
    date_ = nullptr;
  }
  session_uid_ = from.session_uid_;
  // @@protoc_insertion_point(copy_constructor:TSWP.ChangeSessionArchive)
}

inline void ChangeSessionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&author_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_uid_) -
    reinterpret_cast<char*>(&author_)) + sizeof(session_uid_));
}

ChangeSessionArchive::~ChangeSessionArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ChangeSessionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChangeSessionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete author_;
  if (this != internal_default_instance()) delete date_;
}

void ChangeSessionArchive::ArenaDtor(void* object) {
  ChangeSessionArchive* _this = reinterpret_cast< ChangeSessionArchive* >(object);
  (void)_this;
}
void ChangeSessionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeSessionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeSessionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ChangeSessionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(author_ != nullptr);
      author_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(date_ != nullptr);
      date_->Clear();
    }
  }
  session_uid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeSessionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 session_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_session_uid(&has_bits);
          session_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference author = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_author(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Date date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeSessionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ChangeSessionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 session_uid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_session_uid(), target);
  }

  // optional .TSP.Reference author = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::author(this), target, stream);
  }

  // optional .TSP.Date date = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::date(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ChangeSessionArchive)
  return target;
}

size_t ChangeSessionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ChangeSessionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference author = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *author_);
    }

    // optional .TSP.Date date = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *date_);
    }

    // optional uint32 session_uid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_session_uid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeSessionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangeSessionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeSessionArchive::GetClassData() const { return &_class_data_; }

void ChangeSessionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChangeSessionArchive *>(to)->MergeFrom(
      static_cast<const ChangeSessionArchive &>(from));
}


void ChangeSessionArchive::MergeFrom(const ChangeSessionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ChangeSessionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_author()->::TSP::Reference::MergeFrom(from._internal_author());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_date()->::TSP::Date::MergeFrom(from._internal_date());
    }
    if (cached_has_bits & 0x00000004u) {
      session_uid_ = from.session_uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeSessionArchive::CopyFrom(const ChangeSessionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ChangeSessionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSessionArchive::IsInitialized() const {
  if (_internal_has_author()) {
    if (!author_->IsInitialized()) return false;
  }
  if (_internal_has_date()) {
    if (!date_->IsInitialized()) return false;
  }
  return true;
}

void ChangeSessionArchive::InternalSwap(ChangeSessionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeSessionArchive, session_uid_)
      + sizeof(ChangeSessionArchive::session_uid_)
      - PROTOBUF_FIELD_OFFSET(ChangeSessionArchive, author_)>(
          reinterpret_cast<char*>(&author_),
          reinterpret_cast<char*>(&other->author_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeSessionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[84]);
}

// ===================================================================

class SectionPlaceholderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SectionPlaceholderArchive>()._has_bits_);
  static const ::TSP::Reference& parent_storage(const SectionPlaceholderArchive* msg);
  static void set_has_parent_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
SectionPlaceholderArchive::_Internal::parent_storage(const SectionPlaceholderArchive* msg) {
  return *msg->parent_storage_;
}
void SectionPlaceholderArchive::clear_parent_storage() {
  if (parent_storage_ != nullptr) parent_storage_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SectionPlaceholderArchive::SectionPlaceholderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.SectionPlaceholderArchive)
}
SectionPlaceholderArchive::SectionPlaceholderArchive(const SectionPlaceholderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent_storage()) {
    parent_storage_ = new ::TSP::Reference(*from.parent_storage_);
  } else {
    parent_storage_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.SectionPlaceholderArchive)
}

inline void SectionPlaceholderArchive::SharedCtor() {
parent_storage_ = nullptr;
}

SectionPlaceholderArchive::~SectionPlaceholderArchive() {
  // @@protoc_insertion_point(destructor:TSWP.SectionPlaceholderArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SectionPlaceholderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_storage_;
}

void SectionPlaceholderArchive::ArenaDtor(void* object) {
  SectionPlaceholderArchive* _this = reinterpret_cast< SectionPlaceholderArchive* >(object);
  (void)_this;
}
void SectionPlaceholderArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SectionPlaceholderArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SectionPlaceholderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.SectionPlaceholderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(parent_storage_ != nullptr);
    parent_storage_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SectionPlaceholderArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference parent_storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SectionPlaceholderArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.SectionPlaceholderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference parent_storage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::parent_storage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.SectionPlaceholderArchive)
  return target;
}

size_t SectionPlaceholderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.SectionPlaceholderArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference parent_storage = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parent_storage_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SectionPlaceholderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SectionPlaceholderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SectionPlaceholderArchive::GetClassData() const { return &_class_data_; }

void SectionPlaceholderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SectionPlaceholderArchive *>(to)->MergeFrom(
      static_cast<const SectionPlaceholderArchive &>(from));
}


void SectionPlaceholderArchive::MergeFrom(const SectionPlaceholderArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.SectionPlaceholderArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_parent_storage()) {
    _internal_mutable_parent_storage()->::TSP::Reference::MergeFrom(from._internal_parent_storage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SectionPlaceholderArchive::CopyFrom(const SectionPlaceholderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.SectionPlaceholderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionPlaceholderArchive::IsInitialized() const {
  if (_internal_has_parent_storage()) {
    if (!parent_storage_->IsInitialized()) return false;
  }
  return true;
}

void SectionPlaceholderArchive::InternalSwap(SectionPlaceholderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(parent_storage_, other->parent_storage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SectionPlaceholderArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[85]);
}

// ===================================================================

class HyperlinkSelectionArchive::_Internal {
 public:
};

HyperlinkSelectionArchive::HyperlinkSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.HyperlinkSelectionArchive)
}
HyperlinkSelectionArchive::HyperlinkSelectionArchive(const HyperlinkSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.HyperlinkSelectionArchive)
}

inline void HyperlinkSelectionArchive::SharedCtor() {
}

HyperlinkSelectionArchive::~HyperlinkSelectionArchive() {
  // @@protoc_insertion_point(destructor:TSWP.HyperlinkSelectionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HyperlinkSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HyperlinkSelectionArchive::ArenaDtor(void* object) {
  HyperlinkSelectionArchive* _this = reinterpret_cast< HyperlinkSelectionArchive* >(object);
  (void)_this;
}
void HyperlinkSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HyperlinkSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HyperlinkSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.HyperlinkSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HyperlinkSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HyperlinkSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.HyperlinkSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.HyperlinkSelectionArchive)
  return target;
}

size_t HyperlinkSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.HyperlinkSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HyperlinkSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HyperlinkSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HyperlinkSelectionArchive::GetClassData() const { return &_class_data_; }

void HyperlinkSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HyperlinkSelectionArchive *>(to)->MergeFrom(
      static_cast<const HyperlinkSelectionArchive &>(from));
}


void HyperlinkSelectionArchive::MergeFrom(const HyperlinkSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.HyperlinkSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HyperlinkSelectionArchive::CopyFrom(const HyperlinkSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.HyperlinkSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HyperlinkSelectionArchive::IsInitialized() const {
  return true;
}

void HyperlinkSelectionArchive::InternalSwap(HyperlinkSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HyperlinkSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[86]);
}

// ===================================================================

class FlowInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FlowInfoArchive>()._has_bits_);
  static const ::TSP::Reference& text_storage(const FlowInfoArchive* msg);
  static void set_has_text_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_interface_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
FlowInfoArchive::_Internal::text_storage(const FlowInfoArchive* msg) {
  return *msg->text_storage_;
}
void FlowInfoArchive::clear_text_storage() {
  if (text_storage_ != nullptr) text_storage_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void FlowInfoArchive::clear_textboxes() {
  textboxes_.Clear();
}
FlowInfoArchive::FlowInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  textboxes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.FlowInfoArchive)
}
FlowInfoArchive::FlowInfoArchive(const FlowInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      textboxes_(from.textboxes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_text_storage()) {
    text_storage_ = new ::TSP::Reference(*from.text_storage_);
  } else {
    text_storage_ = nullptr;
  }
  user_interface_identifier_ = from.user_interface_identifier_;
  // @@protoc_insertion_point(copy_constructor:TSWP.FlowInfoArchive)
}

inline void FlowInfoArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&text_storage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_interface_identifier_) -
    reinterpret_cast<char*>(&text_storage_)) + sizeof(user_interface_identifier_));
}

FlowInfoArchive::~FlowInfoArchive() {
  // @@protoc_insertion_point(destructor:TSWP.FlowInfoArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FlowInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete text_storage_;
}

void FlowInfoArchive::ArenaDtor(void* object) {
  FlowInfoArchive* _this = reinterpret_cast< FlowInfoArchive* >(object);
  (void)_this;
}
void FlowInfoArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowInfoArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlowInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.FlowInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  textboxes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(text_storage_ != nullptr);
    text_storage_->Clear();
  }
  user_interface_identifier_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowInfoArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference text_storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference textboxes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_textboxes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 user_interface_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_user_interface_identifier(&has_bits);
          user_interface_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowInfoArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.FlowInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference text_storage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::text_storage(this), target, stream);
  }

  // repeated .TSP.Reference textboxes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_textboxes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_textboxes(i), target, stream);
  }

  // optional uint32 user_interface_identifier = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_interface_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.FlowInfoArchive)
  return target;
}

size_t FlowInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.FlowInfoArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference textboxes = 2;
  total_size += 1UL * this->_internal_textboxes_size();
  for (const auto& msg : this->textboxes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference text_storage = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_storage_);
    }

    // optional uint32 user_interface_identifier = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_user_interface_identifier());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlowInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowInfoArchive::GetClassData() const { return &_class_data_; }

void FlowInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FlowInfoArchive *>(to)->MergeFrom(
      static_cast<const FlowInfoArchive &>(from));
}


void FlowInfoArchive::MergeFrom(const FlowInfoArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.FlowInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  textboxes_.MergeFrom(from.textboxes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_text_storage()->::TSP::Reference::MergeFrom(from._internal_text_storage());
    }
    if (cached_has_bits & 0x00000002u) {
      user_interface_identifier_ = from.user_interface_identifier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlowInfoArchive::CopyFrom(const FlowInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.FlowInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowInfoArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(textboxes_)) return false;
  if (_internal_has_text_storage()) {
    if (!text_storage_->IsInitialized()) return false;
  }
  return true;
}

void FlowInfoArchive::InternalSwap(FlowInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  textboxes_.InternalSwap(&other->textboxes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlowInfoArchive, user_interface_identifier_)
      + sizeof(FlowInfoArchive::user_interface_identifier_)
      - PROTOBUF_FIELD_OFFSET(FlowInfoArchive, text_storage_)>(
          reinterpret_cast<char*>(&text_storage_),
          reinterpret_cast<char*>(&other->text_storage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowInfoArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[87]);
}

// ===================================================================

class FlowInfoContainerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FlowInfoContainerArchive>()._has_bits_);
  static void set_has_next_user_interface_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void FlowInfoContainerArchive::clear_flow_infos() {
  flow_infos_.Clear();
}
FlowInfoContainerArchive::FlowInfoContainerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  flow_infos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.FlowInfoContainerArchive)
}
FlowInfoContainerArchive::FlowInfoContainerArchive(const FlowInfoContainerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      flow_infos_(from.flow_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_user_interface_identifier_ = from.next_user_interface_identifier_;
  // @@protoc_insertion_point(copy_constructor:TSWP.FlowInfoContainerArchive)
}

inline void FlowInfoContainerArchive::SharedCtor() {
next_user_interface_identifier_ = 0u;
}

FlowInfoContainerArchive::~FlowInfoContainerArchive() {
  // @@protoc_insertion_point(destructor:TSWP.FlowInfoContainerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FlowInfoContainerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FlowInfoContainerArchive::ArenaDtor(void* object) {
  FlowInfoContainerArchive* _this = reinterpret_cast< FlowInfoContainerArchive* >(object);
  (void)_this;
}
void FlowInfoContainerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowInfoContainerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlowInfoContainerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.FlowInfoContainerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flow_infos_.Clear();
  next_user_interface_identifier_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowInfoContainerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference flow_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_flow_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 next_user_interface_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_next_user_interface_identifier(&has_bits);
          next_user_interface_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowInfoContainerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.FlowInfoContainerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference flow_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flow_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_flow_infos(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 next_user_interface_identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_next_user_interface_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.FlowInfoContainerArchive)
  return target;
}

size_t FlowInfoContainerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.FlowInfoContainerArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference flow_infos = 1;
  total_size += 1UL * this->_internal_flow_infos_size();
  for (const auto& msg : this->flow_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 next_user_interface_identifier = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_next_user_interface_identifier());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowInfoContainerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlowInfoContainerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowInfoContainerArchive::GetClassData() const { return &_class_data_; }

void FlowInfoContainerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FlowInfoContainerArchive *>(to)->MergeFrom(
      static_cast<const FlowInfoContainerArchive &>(from));
}


void FlowInfoContainerArchive::MergeFrom(const FlowInfoContainerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.FlowInfoContainerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  flow_infos_.MergeFrom(from.flow_infos_);
  if (from._internal_has_next_user_interface_identifier()) {
    _internal_set_next_user_interface_identifier(from._internal_next_user_interface_identifier());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlowInfoContainerArchive::CopyFrom(const FlowInfoContainerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.FlowInfoContainerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowInfoContainerArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(flow_infos_)) return false;
  return true;
}

void FlowInfoContainerArchive::InternalSwap(FlowInfoContainerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  flow_infos_.InternalSwap(&other->flow_infos_);
  swap(next_user_interface_identifier_, other->next_user_interface_identifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowInfoContainerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[88]);
}

// ===================================================================

class DropCapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DropCapArchive>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number_of_lines(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_number_of_raised_lines(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deprecated_outdent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_outdent(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_deprecated_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_wrap_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_shape_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_deprecated_corner_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_corner_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_deprecated_character_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_character_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_number_of_characters(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

DropCapArchive::DropCapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.DropCapArchive)
}
DropCapArchive::DropCapArchive(const DropCapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&character_scale_) -
    reinterpret_cast<char*>(&type_)) + sizeof(character_scale_));
  // @@protoc_insertion_point(copy_constructor:TSWP.DropCapArchive)
}

inline void DropCapArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&corner_radius_) -
    reinterpret_cast<char*>(&type_)) + sizeof(corner_radius_));
number_of_lines_ = 3u;
number_of_characters_ = 1u;
character_scale_ = 1;
}

DropCapArchive::~DropCapArchive() {
  // @@protoc_insertion_point(destructor:TSWP.DropCapArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DropCapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DropCapArchive::ArenaDtor(void* object) {
  DropCapArchive* _this = reinterpret_cast< DropCapArchive* >(object);
  (void)_this;
}
void DropCapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropCapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DropCapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.DropCapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deprecated_character_scale_) -
        reinterpret_cast<char*>(&type_)) + sizeof(deprecated_character_scale_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&outdent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&corner_radius_) -
        reinterpret_cast<char*>(&outdent_)) + sizeof(corner_radius_));
    number_of_lines_ = 3u;
    number_of_characters_ = 1u;
    character_scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropCapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.DropCapArchive.DropCapType type = 1 [default = TSWPDropCapTypeText];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::DropCapArchive_DropCapType_IsValid(val))) {
            _internal_set_type(static_cast<::TSWP::DropCapArchive_DropCapType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_lines = 2 [default = 3];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_number_of_lines(&has_bits);
          number_of_lines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_raised_lines = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_number_of_raised_lines(&has_bits);
          number_of_raised_lines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float deprecated_outdent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_deprecated_outdent(&has_bits);
          deprecated_outdent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float deprecated_padding = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_deprecated_padding(&has_bits);
          deprecated_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.DropCapArchive.DropCapWrapType wrap_type = 6 [default = TSWPDropCapWrapTypeRectangular];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::DropCapArchive_DropCapWrapType_IsValid(val))) {
            _internal_set_wrap_type(static_cast<::TSWP::DropCapArchive_DropCapWrapType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool shape_enabled = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_shape_enabled(&has_bits);
          shape_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float deprecated_corner_radius = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_deprecated_corner_radius(&has_bits);
          deprecated_corner_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float deprecated_character_scale = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_deprecated_character_scale(&has_bits);
          deprecated_character_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_characters = 10 [default = 1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_number_of_characters(&has_bits);
          number_of_characters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double outdent = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_outdent(&has_bits);
          outdent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double padding = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_padding(&has_bits);
          padding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double corner_radius = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_corner_radius(&has_bits);
          corner_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double character_scale = 14 [default = 1];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_character_scale(&has_bits);
          character_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropCapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.DropCapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.DropCapArchive.DropCapType type = 1 [default = TSWPDropCapTypeText];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional uint32 number_of_lines = 2 [default = 3];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_number_of_lines(), target);
  }

  // optional uint32 number_of_raised_lines = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_number_of_raised_lines(), target);
  }

  // optional float deprecated_outdent = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_deprecated_outdent(), target);
  }

  // optional float deprecated_padding = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_deprecated_padding(), target);
  }

  // optional .TSWP.DropCapArchive.DropCapWrapType wrap_type = 6 [default = TSWPDropCapWrapTypeRectangular];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_wrap_type(), target);
  }

  // optional bool shape_enabled = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_shape_enabled(), target);
  }

  // optional float deprecated_corner_radius = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_deprecated_corner_radius(), target);
  }

  // optional float deprecated_character_scale = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_deprecated_character_scale(), target);
  }

  // optional uint32 number_of_characters = 10 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_number_of_characters(), target);
  }

  // optional double outdent = 11 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_outdent(), target);
  }

  // optional double padding = 12 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_padding(), target);
  }

  // optional double corner_radius = 13 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_corner_radius(), target);
  }

  // optional double character_scale = 14 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_character_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.DropCapArchive)
  return target;
}

size_t DropCapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.DropCapArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSWP.DropCapArchive.DropCapType type = 1 [default = TSWPDropCapTypeText];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 number_of_raised_lines = 3 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_number_of_raised_lines());
    }

    // optional float deprecated_outdent = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float deprecated_padding = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional .TSWP.DropCapArchive.DropCapWrapType wrap_type = 6 [default = TSWPDropCapWrapTypeRectangular];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wrap_type());
    }

    // optional bool shape_enabled = 7 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional float deprecated_corner_radius = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float deprecated_character_scale = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional double outdent = 11 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double padding = 12 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double corner_radius = 13 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional uint32 number_of_lines = 2 [default = 3];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_number_of_lines());
    }

    // optional uint32 number_of_characters = 10 [default = 1];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_number_of_characters());
    }

    // optional double character_scale = 14 [default = 1];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropCapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DropCapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropCapArchive::GetClassData() const { return &_class_data_; }

void DropCapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DropCapArchive *>(to)->MergeFrom(
      static_cast<const DropCapArchive &>(from));
}


void DropCapArchive::MergeFrom(const DropCapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.DropCapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      number_of_raised_lines_ = from.number_of_raised_lines_;
    }
    if (cached_has_bits & 0x00000004u) {
      deprecated_outdent_ = from.deprecated_outdent_;
    }
    if (cached_has_bits & 0x00000008u) {
      deprecated_padding_ = from.deprecated_padding_;
    }
    if (cached_has_bits & 0x00000010u) {
      wrap_type_ = from.wrap_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      shape_enabled_ = from.shape_enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      deprecated_corner_radius_ = from.deprecated_corner_radius_;
    }
    if (cached_has_bits & 0x00000080u) {
      deprecated_character_scale_ = from.deprecated_character_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      outdent_ = from.outdent_;
    }
    if (cached_has_bits & 0x00000200u) {
      padding_ = from.padding_;
    }
    if (cached_has_bits & 0x00000400u) {
      corner_radius_ = from.corner_radius_;
    }
    if (cached_has_bits & 0x00000800u) {
      number_of_lines_ = from.number_of_lines_;
    }
    if (cached_has_bits & 0x00001000u) {
      number_of_characters_ = from.number_of_characters_;
    }
    if (cached_has_bits & 0x00002000u) {
      character_scale_ = from.character_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropCapArchive::CopyFrom(const DropCapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.DropCapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropCapArchive::IsInitialized() const {
  return true;
}

void DropCapArchive::InternalSwap(DropCapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DropCapArchive, corner_radius_)
      + sizeof(DropCapArchive::corner_radius_)
      - PROTOBUF_FIELD_OFFSET(DropCapArchive, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
  swap(number_of_lines_, other->number_of_lines_);
  swap(number_of_characters_, other->number_of_characters_);
  swap(character_scale_, other->character_scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropCapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[89]);
}

// ===================================================================

class DropCapStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DropCapStylePropertiesArchive>()._has_bits_);
  static const ::TSWP::DropCapArchive& drop_cap(const DropCapStylePropertiesArchive* msg);
  static void set_has_drop_cap(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::StrokeArchive& drop_cap_shape_stroke(const DropCapStylePropertiesArchive* msg);
  static void set_has_drop_cap_shape_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_drop_cap_shape_fill_null(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::FillArchive& drop_cap_shape_fill(const DropCapStylePropertiesArchive* msg);
  static void set_has_drop_cap_shape_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSWP::DropCapArchive&
DropCapStylePropertiesArchive::_Internal::drop_cap(const DropCapStylePropertiesArchive* msg) {
  return *msg->drop_cap_;
}
const ::TSD::StrokeArchive&
DropCapStylePropertiesArchive::_Internal::drop_cap_shape_stroke(const DropCapStylePropertiesArchive* msg) {
  return *msg->drop_cap_shape_stroke_;
}
const ::TSD::FillArchive&
DropCapStylePropertiesArchive::_Internal::drop_cap_shape_fill(const DropCapStylePropertiesArchive* msg) {
  return *msg->drop_cap_shape_fill_;
}
void DropCapStylePropertiesArchive::clear_drop_cap_shape_stroke() {
  if (drop_cap_shape_stroke_ != nullptr) drop_cap_shape_stroke_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void DropCapStylePropertiesArchive::clear_drop_cap_shape_fill() {
  if (drop_cap_shape_fill_ != nullptr) drop_cap_shape_fill_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
DropCapStylePropertiesArchive::DropCapStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.DropCapStylePropertiesArchive)
}
DropCapStylePropertiesArchive::DropCapStylePropertiesArchive(const DropCapStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_drop_cap()) {
    drop_cap_ = new ::TSWP::DropCapArchive(*from.drop_cap_);
  } else {
    drop_cap_ = nullptr;
  }
  if (from._internal_has_drop_cap_shape_stroke()) {
    drop_cap_shape_stroke_ = new ::TSD::StrokeArchive(*from.drop_cap_shape_stroke_);
  } else {
    drop_cap_shape_stroke_ = nullptr;
  }
  if (from._internal_has_drop_cap_shape_fill()) {
    drop_cap_shape_fill_ = new ::TSD::FillArchive(*from.drop_cap_shape_fill_);
  } else {
    drop_cap_shape_fill_ = nullptr;
  }
  drop_cap_shape_fill_null_ = from.drop_cap_shape_fill_null_;
  // @@protoc_insertion_point(copy_constructor:TSWP.DropCapStylePropertiesArchive)
}

inline void DropCapStylePropertiesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&drop_cap_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&drop_cap_shape_fill_null_) -
    reinterpret_cast<char*>(&drop_cap_)) + sizeof(drop_cap_shape_fill_null_));
}

DropCapStylePropertiesArchive::~DropCapStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:TSWP.DropCapStylePropertiesArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DropCapStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete drop_cap_;
  if (this != internal_default_instance()) delete drop_cap_shape_stroke_;
  if (this != internal_default_instance()) delete drop_cap_shape_fill_;
}

void DropCapStylePropertiesArchive::ArenaDtor(void* object) {
  DropCapStylePropertiesArchive* _this = reinterpret_cast< DropCapStylePropertiesArchive* >(object);
  (void)_this;
}
void DropCapStylePropertiesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropCapStylePropertiesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DropCapStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.DropCapStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(drop_cap_ != nullptr);
      drop_cap_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(drop_cap_shape_stroke_ != nullptr);
      drop_cap_shape_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(drop_cap_shape_fill_ != nullptr);
      drop_cap_shape_fill_->Clear();
    }
  }
  drop_cap_shape_fill_null_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropCapStylePropertiesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.DropCapArchive drop_cap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_cap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive drop_cap_shape_stroke = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_cap_shape_stroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool drop_cap_shape_fill_null = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_drop_cap_shape_fill_null(&has_bits);
          drop_cap_shape_fill_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive drop_cap_shape_fill = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_cap_shape_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropCapStylePropertiesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.DropCapStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.DropCapArchive drop_cap = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::drop_cap(this), target, stream);
  }

  // optional .TSD.StrokeArchive drop_cap_shape_stroke = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::drop_cap_shape_stroke(this), target, stream);
  }

  // optional bool drop_cap_shape_fill_null = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_drop_cap_shape_fill_null(), target);
  }

  // optional .TSD.FillArchive drop_cap_shape_fill = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::drop_cap_shape_fill(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.DropCapStylePropertiesArchive)
  return target;
}

size_t DropCapStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.DropCapStylePropertiesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSWP.DropCapArchive drop_cap = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drop_cap_);
    }

    // optional .TSD.StrokeArchive drop_cap_shape_stroke = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drop_cap_shape_stroke_);
    }

    // optional .TSD.FillArchive drop_cap_shape_fill = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drop_cap_shape_fill_);
    }

    // optional bool drop_cap_shape_fill_null = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropCapStylePropertiesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DropCapStylePropertiesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropCapStylePropertiesArchive::GetClassData() const { return &_class_data_; }

void DropCapStylePropertiesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DropCapStylePropertiesArchive *>(to)->MergeFrom(
      static_cast<const DropCapStylePropertiesArchive &>(from));
}


void DropCapStylePropertiesArchive::MergeFrom(const DropCapStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.DropCapStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_drop_cap()->::TSWP::DropCapArchive::MergeFrom(from._internal_drop_cap());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_drop_cap_shape_stroke()->::TSD::StrokeArchive::MergeFrom(from._internal_drop_cap_shape_stroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_drop_cap_shape_fill()->::TSD::FillArchive::MergeFrom(from._internal_drop_cap_shape_fill());
    }
    if (cached_has_bits & 0x00000008u) {
      drop_cap_shape_fill_null_ = from.drop_cap_shape_fill_null_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropCapStylePropertiesArchive::CopyFrom(const DropCapStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.DropCapStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropCapStylePropertiesArchive::IsInitialized() const {
  if (_internal_has_drop_cap_shape_stroke()) {
    if (!drop_cap_shape_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_drop_cap_shape_fill()) {
    if (!drop_cap_shape_fill_->IsInitialized()) return false;
  }
  return true;
}

void DropCapStylePropertiesArchive::InternalSwap(DropCapStylePropertiesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DropCapStylePropertiesArchive, drop_cap_shape_fill_null_)
      + sizeof(DropCapStylePropertiesArchive::drop_cap_shape_fill_null_)
      - PROTOBUF_FIELD_OFFSET(DropCapStylePropertiesArchive, drop_cap_)>(
          reinterpret_cast<char*>(&drop_cap_),
          reinterpret_cast<char*>(&other->drop_cap_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DropCapStylePropertiesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[90]);
}

// ===================================================================

class DropCapStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DropCapStyleArchive>()._has_bits_);
  static const ::TSS::StyleArchive& super(const DropCapStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSWP::CharacterStylePropertiesArchive& char_properties(const DropCapStyleArchive* msg);
  static void set_has_char_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSWP::DropCapStylePropertiesArchive& drop_cap_properties(const DropCapStyleArchive* msg);
  static void set_has_drop_cap_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
DropCapStyleArchive::_Internal::super(const DropCapStyleArchive* msg) {
  return *msg->super_;
}
const ::TSWP::CharacterStylePropertiesArchive&
DropCapStyleArchive::_Internal::char_properties(const DropCapStyleArchive* msg) {
  return *msg->char_properties_;
}
const ::TSWP::DropCapStylePropertiesArchive&
DropCapStyleArchive::_Internal::drop_cap_properties(const DropCapStyleArchive* msg) {
  return *msg->drop_cap_properties_;
}
void DropCapStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DropCapStyleArchive::DropCapStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSWP.DropCapStyleArchive)
}
DropCapStyleArchive::DropCapStyleArchive(const DropCapStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_char_properties()) {
    char_properties_ = new ::TSWP::CharacterStylePropertiesArchive(*from.char_properties_);
  } else {
    char_properties_ = nullptr;
  }
  if (from._internal_has_drop_cap_properties()) {
    drop_cap_properties_ = new ::TSWP::DropCapStylePropertiesArchive(*from.drop_cap_properties_);
  } else {
    drop_cap_properties_ = nullptr;
  }
  override_count_ = from.override_count_;
  // @@protoc_insertion_point(copy_constructor:TSWP.DropCapStyleArchive)
}

inline void DropCapStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&override_count_) -
    reinterpret_cast<char*>(&super_)) + sizeof(override_count_));
}

DropCapStyleArchive::~DropCapStyleArchive() {
  // @@protoc_insertion_point(destructor:TSWP.DropCapStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DropCapStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete char_properties_;
  if (this != internal_default_instance()) delete drop_cap_properties_;
}

void DropCapStyleArchive::ArenaDtor(void* object) {
  DropCapStyleArchive* _this = reinterpret_cast< DropCapStyleArchive* >(object);
  (void)_this;
}
void DropCapStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropCapStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DropCapStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.DropCapStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(char_properties_ != nullptr);
      char_properties_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(drop_cap_properties_ != nullptr);
      drop_cap_properties_->Clear();
    }
  }
  override_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropCapStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_char_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.DropCapStylePropertiesArchive drop_cap_properties = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_cap_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropCapStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.DropCapStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::char_properties(this), target, stream);
  }

  // optional .TSWP.DropCapStylePropertiesArchive drop_cap_properties = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::drop_cap_properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.DropCapStyleArchive)
  return target;
}

size_t DropCapStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.DropCapStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *char_properties_);
    }

    // optional .TSWP.DropCapStylePropertiesArchive drop_cap_properties = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drop_cap_properties_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_override_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropCapStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DropCapStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropCapStyleArchive::GetClassData() const { return &_class_data_; }

void DropCapStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DropCapStyleArchive *>(to)->MergeFrom(
      static_cast<const DropCapStyleArchive &>(from));
}


void DropCapStyleArchive::MergeFrom(const DropCapStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.DropCapStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSS::StyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_char_properties()->::TSWP::CharacterStylePropertiesArchive::MergeFrom(from._internal_char_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_drop_cap_properties()->::TSWP::DropCapStylePropertiesArchive::MergeFrom(from._internal_drop_cap_properties());
    }
    if (cached_has_bits & 0x00000008u) {
      override_count_ = from.override_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropCapStyleArchive::CopyFrom(const DropCapStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.DropCapStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropCapStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_char_properties()) {
    if (!char_properties_->IsInitialized()) return false;
  }
  if (_internal_has_drop_cap_properties()) {
    if (!drop_cap_properties_->IsInitialized()) return false;
  }
  return true;
}

void DropCapStyleArchive::InternalSwap(DropCapStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DropCapStyleArchive, override_count_)
      + sizeof(DropCapStyleArchive::override_count_)
      - PROTOBUF_FIELD_OFFSET(DropCapStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DropCapStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[91]);
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThemePresetsArchive::kExtensionFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::ThemeArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSWP::ThemePresetsArchive >, 11, false >
  ThemePresetsArchive::extension(kExtensionFieldNumber, ::TSWP::ThemePresetsArchive::default_instance());
const std::string EquationInfoArchive_equation_source_old_default("");
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EquationInfoArchive::kEquationSourceOldFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSD::ImageArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  EquationInfoArchive::equation_source_old(kEquationSourceOldFieldNumber, EquationInfoArchive_equation_source_old_default);
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EquationInfoArchive::kEquationTextPropertiesFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSD::ImageArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSWP::CharacterStylePropertiesArchive >, 11, false >
  EquationInfoArchive::equation_text_properties(kEquationTextPropertiesFieldNumber, ::TSWP::CharacterStylePropertiesArchive::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EquationInfoArchive::kEquationDepthFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSD::ImageArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< float >, 2, false >
  EquationInfoArchive::equation_depth(kEquationDepthFieldNumber, 0);
const std::string EquationInfoArchive_equation_source_text_default("");
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EquationInfoArchive::kEquationSourceTextFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSD::ImageArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  EquationInfoArchive::equation_source_text(kEquationSourceTextFieldNumber, EquationInfoArchive_equation_source_text_default);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSWP::PaddingArchive >, 11, false >
  padding(kPaddingFieldNumber, ::TSWP::PaddingArchive::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSWP
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSWP::SelectionArchive* Arena::CreateMaybeMessage< ::TSWP::SelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::SelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ObjectAttributeTable_ObjectAttribute* Arena::CreateMaybeMessage< ::TSWP::ObjectAttributeTable_ObjectAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ObjectAttributeTable_ObjectAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ObjectAttributeTable* Arena::CreateMaybeMessage< ::TSWP::ObjectAttributeTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ObjectAttributeTable >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::StringAttributeTable_StringAttribute* Arena::CreateMaybeMessage< ::TSWP::StringAttributeTable_StringAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::StringAttributeTable_StringAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::StringAttributeTable* Arena::CreateMaybeMessage< ::TSWP::StringAttributeTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::StringAttributeTable >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ParaDataAttributeTable_ParaDataAttribute* Arena::CreateMaybeMessage< ::TSWP::ParaDataAttributeTable_ParaDataAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ParaDataAttributeTable_ParaDataAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ParaDataAttributeTable* Arena::CreateMaybeMessage< ::TSWP::ParaDataAttributeTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ParaDataAttributeTable >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute* Arena::CreateMaybeMessage< ::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::OverlappingFieldAttributeTable_OverlappingFieldAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::OverlappingFieldAttributeTable* Arena::CreateMaybeMessage< ::TSWP::OverlappingFieldAttributeTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::OverlappingFieldAttributeTable >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::StorageArchive* Arena::CreateMaybeMessage< ::TSWP::StorageArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::StorageArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::HighlightArchive* Arena::CreateMaybeMessage< ::TSWP::HighlightArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::HighlightArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::PencilAnnotationArchive* Arena::CreateMaybeMessage< ::TSWP::PencilAnnotationArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::PencilAnnotationArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::FontFeatureArchive* Arena::CreateMaybeMessage< ::TSWP::FontFeatureArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::FontFeatureArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::CharacterStylePropertiesArchive* Arena::CreateMaybeMessage< ::TSWP::CharacterStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::CharacterStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::CharacterStyleArchive* Arena::CreateMaybeMessage< ::TSWP::CharacterStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::CharacterStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TabArchive* Arena::CreateMaybeMessage< ::TSWP::TabArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TabArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TabsArchive* Arena::CreateMaybeMessage< ::TSWP::TabsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TabsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::LineSpacingArchive* Arena::CreateMaybeMessage< ::TSWP::LineSpacingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::LineSpacingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ParagraphStylePropertiesArchive* Arena::CreateMaybeMessage< ::TSWP::ParagraphStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ParagraphStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ParagraphStyleArchive* Arena::CreateMaybeMessage< ::TSWP::ParagraphStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ParagraphStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ListStyleArchive_LabelGeometry* Arena::CreateMaybeMessage< ::TSWP::ListStyleArchive_LabelGeometry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ListStyleArchive_LabelGeometry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ListStyleArchive_LabelImage* Arena::CreateMaybeMessage< ::TSWP::ListStyleArchive_LabelImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ListStyleArchive_LabelImage >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ListStyleArchive* Arena::CreateMaybeMessage< ::TSWP::ListStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ListStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TextStylePresetArchive* Arena::CreateMaybeMessage< ::TSWP::TextStylePresetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TextStylePresetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ColumnsArchive_EqualColumnsArchive* Arena::CreateMaybeMessage< ::TSWP::ColumnsArchive_EqualColumnsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ColumnsArchive_EqualColumnsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* Arena::CreateMaybeMessage< ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ColumnsArchive_NonEqualColumnsArchive* Arena::CreateMaybeMessage< ::TSWP::ColumnsArchive_NonEqualColumnsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ColumnsArchive_NonEqualColumnsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ColumnsArchive* Arena::CreateMaybeMessage< ::TSWP::ColumnsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ColumnsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::PaddingArchive* Arena::CreateMaybeMessage< ::TSWP::PaddingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::PaddingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ColumnStylePropertiesArchive* Arena::CreateMaybeMessage< ::TSWP::ColumnStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ColumnStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ColumnStyleArchive* Arena::CreateMaybeMessage< ::TSWP::ColumnStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ColumnStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ShapeStylePropertiesArchive* Arena::CreateMaybeMessage< ::TSWP::ShapeStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ShapeStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ShapeStyleArchive* Arena::CreateMaybeMessage< ::TSWP::ShapeStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ShapeStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ThemePresetsArchive* Arena::CreateMaybeMessage< ::TSWP::ThemePresetsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ThemePresetsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TextPresetDisplayItemArchive* Arena::CreateMaybeMessage< ::TSWP::TextPresetDisplayItemArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TextPresetDisplayItemArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TOCEntryStylePropertiesArchive* Arena::CreateMaybeMessage< ::TSWP::TOCEntryStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TOCEntryStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TOCEntryStyleArchive* Arena::CreateMaybeMessage< ::TSWP::TOCEntryStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TOCEntryStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TOCSettingsArchive_TOCEntryData* Arena::CreateMaybeMessage< ::TSWP::TOCSettingsArchive_TOCEntryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TOCSettingsArchive_TOCEntryData >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TOCSettingsArchive* Arena::CreateMaybeMessage< ::TSWP::TOCSettingsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TOCSettingsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TOCEntryInstanceArchive* Arena::CreateMaybeMessage< ::TSWP::TOCEntryInstanceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TOCEntryInstanceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_GenericTransaction* Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_GenericTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_GenericTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_TextTransaction* Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_TextTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_TextTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_CharIndexTransaction* Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_CharIndexTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_CharIndexTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_ReplaceCharIndexTransaction* Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_ReplaceCharIndexTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_ReplaceCharIndexTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_AttributeIndexTransaction* Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_AttributeIndexTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_AttributeIndexTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_InsertAttributeTransaction* Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_InsertAttributeTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_InsertAttributeTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_InsertNilTransaction* Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_InsertNilTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_InsertNilTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_CharDeltaTransaction* Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_CharDeltaTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_CharDeltaTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_ParagraphDataTransaction* Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_ParagraphDataTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_ParagraphDataTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_ObjectDOLCTransaction* Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_ObjectDOLCTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_ObjectDOLCTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_CTDateTransaction* Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_CTDateTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_CTDateTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_UnionTransaction* Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_UnionTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_UnionTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_StorageAction* Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_StorageAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_StorageAction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_StorageActionGroup* Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_StorageActionGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_StorageActionGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction* Arena::CreateMaybeMessage< ::TSWP::UndoTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransactionWrapperArchive* Arena::CreateMaybeMessage< ::TSWP::UndoTransactionWrapperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransactionWrapperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ShapeInfoArchive* Arena::CreateMaybeMessage< ::TSWP::ShapeInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ShapeInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::CommentInfoArchive* Arena::CreateMaybeMessage< ::TSWP::CommentInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::CommentInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TOCInfoArchive* Arena::CreateMaybeMessage< ::TSWP::TOCInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TOCInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TOCLayoutHintArchive* Arena::CreateMaybeMessage< ::TSWP::TOCLayoutHintArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TOCLayoutHintArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::EquationInfoArchive* Arena::CreateMaybeMessage< ::TSWP::EquationInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::EquationInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TextualAttachmentArchive* Arena::CreateMaybeMessage< ::TSWP::TextualAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TextualAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TSWPTOCPageNumberAttachmentArchive* Arena::CreateMaybeMessage< ::TSWP::TSWPTOCPageNumberAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TSWPTOCPageNumberAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UIGraphicalAttachment* Arena::CreateMaybeMessage< ::TSWP::UIGraphicalAttachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UIGraphicalAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::DrawableAttachmentArchive* Arena::CreateMaybeMessage< ::TSWP::DrawableAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::DrawableAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TOCAttachmentArchive* Arena::CreateMaybeMessage< ::TSWP::TOCAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TOCAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::FootnoteReferenceAttachmentArchive* Arena::CreateMaybeMessage< ::TSWP::FootnoteReferenceAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::FootnoteReferenceAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::NumberAttachmentArchive* Arena::CreateMaybeMessage< ::TSWP::NumberAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::NumberAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::SmartFieldArchive* Arena::CreateMaybeMessage< ::TSWP::SmartFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::SmartFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::HyperlinkFieldArchive* Arena::CreateMaybeMessage< ::TSWP::HyperlinkFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::HyperlinkFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::PlaceholderSmartFieldArchive* Arena::CreateMaybeMessage< ::TSWP::PlaceholderSmartFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::PlaceholderSmartFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UnsupportedHyperlinkFieldArchive* Arena::CreateMaybeMessage< ::TSWP::UnsupportedHyperlinkFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UnsupportedHyperlinkFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::BibliographySmartFieldArchive* Arena::CreateMaybeMessage< ::TSWP::BibliographySmartFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::BibliographySmartFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::CitationRecordArchive* Arena::CreateMaybeMessage< ::TSWP::CitationRecordArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::CitationRecordArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::CitationSmartFieldArchive* Arena::CreateMaybeMessage< ::TSWP::CitationSmartFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::CitationSmartFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::DateTimeSmartFieldArchive* Arena::CreateMaybeMessage< ::TSWP::DateTimeSmartFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::DateTimeSmartFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::BookmarkFieldArchive* Arena::CreateMaybeMessage< ::TSWP::BookmarkFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::BookmarkFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::FilenameSmartFieldArchive* Arena::CreateMaybeMessage< ::TSWP::FilenameSmartFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::FilenameSmartFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::MergeSmartFieldArchive* Arena::CreateMaybeMessage< ::TSWP::MergeSmartFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::MergeSmartFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TOCSmartFieldArchive_TOCEntry* Arena::CreateMaybeMessage< ::TSWP::TOCSmartFieldArchive_TOCEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TOCSmartFieldArchive_TOCEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TOCSmartFieldArchive* Arena::CreateMaybeMessage< ::TSWP::TOCSmartFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TOCSmartFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::RubyFieldArchive* Arena::CreateMaybeMessage< ::TSWP::RubyFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::RubyFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TateChuYokoFieldArchive* Arena::CreateMaybeMessage< ::TSWP::TateChuYokoFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TateChuYokoFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ChangeArchive* Arena::CreateMaybeMessage< ::TSWP::ChangeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ChangeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ChangeSessionArchive* Arena::CreateMaybeMessage< ::TSWP::ChangeSessionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ChangeSessionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::SectionPlaceholderArchive* Arena::CreateMaybeMessage< ::TSWP::SectionPlaceholderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::SectionPlaceholderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::HyperlinkSelectionArchive* Arena::CreateMaybeMessage< ::TSWP::HyperlinkSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::HyperlinkSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::FlowInfoArchive* Arena::CreateMaybeMessage< ::TSWP::FlowInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::FlowInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::FlowInfoContainerArchive* Arena::CreateMaybeMessage< ::TSWP::FlowInfoContainerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::FlowInfoContainerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::DropCapArchive* Arena::CreateMaybeMessage< ::TSWP::DropCapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::DropCapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::DropCapStylePropertiesArchive* Arena::CreateMaybeMessage< ::TSWP::DropCapStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::DropCapStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::DropCapStyleArchive* Arena::CreateMaybeMessage< ::TSWP::DropCapStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::DropCapStyleArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
