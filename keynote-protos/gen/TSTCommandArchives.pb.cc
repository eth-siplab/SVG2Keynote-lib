// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSTCommandArchives.proto

#include "TSTCommandArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TST {
constexpr TableCommandArchive::TableCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commandname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , table_info_id_path_(nullptr)
  , default_cell_styles_container_(nullptr)
  , timestamp_(0)
  , random_seed_lo_(0u)
  , random_seed_hi_(0u)
  , old_timestamp_(0)
  , old_random_seed_(uint64_t{0u})
  , is_inverse_(false){}
struct TableCommandArchiveDefaultTypeInternal {
  constexpr TableCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableCommandArchiveDefaultTypeInternal() {}
  union {
    TableCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableCommandArchiveDefaultTypeInternal _TableCommandArchive_default_instance_;
constexpr CommandApplyCellContentsArchive::CommandApplyCellContentsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_format_keys_()
  , action_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , cell_diff_map_(nullptr)
  , rollback_cell_diff_map_(nullptr){}
struct CommandApplyCellContentsArchiveDefaultTypeInternal {
  constexpr CommandApplyCellContentsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandApplyCellContentsArchiveDefaultTypeInternal() {}
  union {
    CommandApplyCellContentsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandApplyCellContentsArchiveDefaultTypeInternal _CommandApplyCellContentsArchive_default_instance_;
constexpr CommandApplyCellDiffMapArchive::CommandApplyCellDiffMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_format_keys_()
  , super_(nullptr)
  , cell_diff_map_(nullptr)
  , inverse_cell_diff_map_(nullptr)
  , should_allow_merge_fragments_(false){}
struct CommandApplyCellDiffMapArchiveDefaultTypeInternal {
  constexpr CommandApplyCellDiffMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandApplyCellDiffMapArchiveDefaultTypeInternal() {}
  union {
    CommandApplyCellDiffMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandApplyCellDiffMapArchiveDefaultTypeInternal _CommandApplyCellDiffMapArchive_default_instance_;
constexpr CommandApplyCellMapArchive::CommandApplyCellMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_format_keys_()
  , formula_rewrite_commands_()
  , super_(nullptr)
  , redo_cell_map_(nullptr)
  , undo_cell_map_(nullptr)
  , undo_formula_rewrite_command_(nullptr)
  , merge_owner_rollback_index_(0u)
  , is_from_paste_(false){}
struct CommandApplyCellMapArchiveDefaultTypeInternal {
  constexpr CommandApplyCellMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandApplyCellMapArchiveDefaultTypeInternal() {}
  union {
    CommandApplyCellMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandApplyCellMapArchiveDefaultTypeInternal _CommandApplyCellMapArchive_default_instance_;
constexpr CommandApplyConcurrentCellMapArchive::CommandApplyConcurrentCellMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_format_keys_()
  , formula_rewrite_commands_()
  , super_(nullptr)
  , redo_concurrent_cell_map_(nullptr)
  , undo_concurrent_cell_map_(nullptr)
  , undo_formula_rewrite_command_(nullptr)
  , merge_owner_rollback_index_(0u)
  , is_from_paste_(false){}
struct CommandApplyConcurrentCellMapArchiveDefaultTypeInternal {
  constexpr CommandApplyConcurrentCellMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandApplyConcurrentCellMapArchiveDefaultTypeInternal() {}
  union {
    CommandApplyConcurrentCellMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandApplyConcurrentCellMapArchiveDefaultTypeInternal _CommandApplyConcurrentCellMapArchive_default_instance_;
constexpr CommandChangeFreezeHeaderStateArchive::CommandChangeFreezeHeaderStateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , direction_(0)

  , new_freeze_state_(false)
  , prev_freeze_state_(false){}
struct CommandChangeFreezeHeaderStateArchiveDefaultTypeInternal {
  constexpr CommandChangeFreezeHeaderStateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandChangeFreezeHeaderStateArchiveDefaultTypeInternal() {}
  union {
    CommandChangeFreezeHeaderStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandChangeFreezeHeaderStateArchiveDefaultTypeInternal _CommandChangeFreezeHeaderStateArchive_default_instance_;
constexpr CommandDeleteCellsArchive::CommandDeleteCellsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , cell_uid_region_(nullptr)
  , summary_cell_uid_list_(nullptr)
  , inverse_concurrent_cell_map_(nullptr)
  , update_border_visibility_(false)
  , invalidate_comments_(false)
  , invalidate_comments_valid_(false){}
struct CommandDeleteCellsArchiveDefaultTypeInternal {
  constexpr CommandDeleteCellsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandDeleteCellsArchiveDefaultTypeInternal() {}
  union {
    CommandDeleteCellsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandDeleteCellsArchiveDefaultTypeInternal _CommandDeleteCellsArchive_default_instance_;
constexpr CommandDeleteCellContentsArchive::CommandDeleteCellContentsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , cell_uid_list_(nullptr)
  , inverse_cell_diff_map_(nullptr){}
struct CommandDeleteCellContentsArchiveDefaultTypeInternal {
  constexpr CommandDeleteCellContentsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandDeleteCellContentsArchiveDefaultTypeInternal() {}
  union {
    CommandDeleteCellContentsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandDeleteCellContentsArchiveDefaultTypeInternal _CommandDeleteCellContentsArchive_default_instance_;
constexpr CommandMutateCellFormatArchive::CommandMutateCellFormatArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , cell_uid_list_(nullptr)
  , inverse_cell_diff_map_(nullptr)
  , whole_format_diff_map_(nullptr)
  , intended_format_type_(0u){}
struct CommandMutateCellFormatArchiveDefaultTypeInternal {
  constexpr CommandMutateCellFormatArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandMutateCellFormatArchiveDefaultTypeInternal() {}
  union {
    CommandMutateCellFormatArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandMutateCellFormatArchiveDefaultTypeInternal _CommandMutateCellFormatArchive_default_instance_;
constexpr CommandSetAutomaticDurationUnitsArchive::CommandSetAutomaticDurationUnitsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , automatic_units_(false){}
struct CommandSetAutomaticDurationUnitsArchiveDefaultTypeInternal {
  constexpr CommandSetAutomaticDurationUnitsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetAutomaticDurationUnitsArchiveDefaultTypeInternal() {}
  union {
    CommandSetAutomaticDurationUnitsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetAutomaticDurationUnitsArchiveDefaultTypeInternal _CommandSetAutomaticDurationUnitsArchive_default_instance_;
constexpr CommandSetDurationStyleArchive::CommandSetDurationStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , duration_style_(0u){}
struct CommandSetDurationStyleArchiveDefaultTypeInternal {
  constexpr CommandSetDurationStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetDurationStyleArchiveDefaultTypeInternal() {}
  union {
    CommandSetDurationStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetDurationStyleArchiveDefaultTypeInternal _CommandSetDurationStyleArchive_default_instance_;
constexpr CommandSetDurationUnitSmallestLargestArchive::CommandSetDurationUnitSmallestLargestArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , smallest_unit_(0u)
  , largest_unit_(0u){}
struct CommandSetDurationUnitSmallestLargestArchiveDefaultTypeInternal {
  constexpr CommandSetDurationUnitSmallestLargestArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetDurationUnitSmallestLargestArchiveDefaultTypeInternal() {}
  union {
    CommandSetDurationUnitSmallestLargestArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetDurationUnitSmallestLargestArchiveDefaultTypeInternal _CommandSetDurationUnitSmallestLargestArchive_default_instance_;
constexpr CommandReplaceCustomFormatArchive::CommandReplaceCustomFormatArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : undo_diff_map_(nullptr)
  , commit_diff_map_(nullptr)
  , super_(nullptr){}
struct CommandReplaceCustomFormatArchiveDefaultTypeInternal {
  constexpr CommandReplaceCustomFormatArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandReplaceCustomFormatArchiveDefaultTypeInternal() {}
  union {
    CommandReplaceCustomFormatArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandReplaceCustomFormatArchiveDefaultTypeInternal _CommandReplaceCustomFormatArchive_default_instance_;
constexpr CommandMoveCellsArchive::CommandMoveCellsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : formula_rewrite_commands_()
  , comment_storages_to_restore_()
  , super_(nullptr)
  , dst_table_info_id_path_(nullptr)
  , src_uid_range_(nullptr)
  , dst_uid_range_(nullptr)
  , src_cell_map_(nullptr)
  , dst_cell_map_(nullptr)
  , dst_cell_styles_container_(nullptr)
  , src_undo_cell_map_(nullptr)
  , dst_undo_cell_map_(nullptr)
  , merge_action_to_restore_(nullptr)
  , comment_cell_uids_to_restore_(nullptr)
  , table_dimension_(0)

  , dst_merge_owner_rollback_index_(0u){}
struct CommandMoveCellsArchiveDefaultTypeInternal {
  constexpr CommandMoveCellsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandMoveCellsArchiveDefaultTypeInternal() {}
  union {
    CommandMoveCellsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandMoveCellsArchiveDefaultTypeInternal _CommandMoveCellsArchive_default_instance_;
constexpr ColumnRowMetadataArchive::ColumnRowMetadataArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_style_(nullptr)
  , text_style_(nullptr)
  , uuid_(nullptr)
  , size_(0)
  , hiding_action_(0u){}
struct ColumnRowMetadataArchiveDefaultTypeInternal {
  constexpr ColumnRowMetadataArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColumnRowMetadataArchiveDefaultTypeInternal() {}
  union {
    ColumnRowMetadataArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColumnRowMetadataArchiveDefaultTypeInternal _ColumnRowMetadataArchive_default_instance_;
constexpr CommandInsertColumnsOrRowsArchive::CommandInsertColumnsOrRowsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : undo_order_()
  , super_(nullptr)
  , bundle_(nullptr)
  , cell_map_(nullptr)
  , undo_commands_(nullptr)
  , undo_cell_map_(nullptr)
  , sort_order_(nullptr)
  , filter_set_(nullptr)
  , src_row_column_uid_(nullptr)
  , opp_row_column_uid_(nullptr)
  , should_edge_expand_formula_ranges_(false)
  , was_categorized_(false){}
struct CommandInsertColumnsOrRowsArchiveDefaultTypeInternal {
  constexpr CommandInsertColumnsOrRowsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandInsertColumnsOrRowsArchiveDefaultTypeInternal() {}
  union {
    CommandInsertColumnsOrRowsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandInsertColumnsOrRowsArchiveDefaultTypeInternal _CommandInsertColumnsOrRowsArchive_default_instance_;
constexpr ColumnRowBundleArchive::ColumnRowBundleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : view_uid_list_()
  , view_type_list_()
  , base_uid_list_()
  , base_type_list_()
  , category_order_uid_list_()
  , category_order_type_list_()
  , metadata_list_()
  , is_row_(false){}
struct ColumnRowBundleArchiveDefaultTypeInternal {
  constexpr ColumnRowBundleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColumnRowBundleArchiveDefaultTypeInternal() {}
  union {
    ColumnRowBundleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColumnRowBundleArchiveDefaultTypeInternal _ColumnRowBundleArchive_default_instance_;
constexpr CommandRemoveColumnsOrRowsArchive::CommandRemoveColumnsOrRowsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : undo_order_()
  , super_(nullptr)
  , bundle_(nullptr)
  , cell_map_(nullptr)
  , undo_cell_map_(nullptr)
  , undo_filter_set_(nullptr)
  , undo_sort_order_(nullptr)
  , formula_rewrite_command_for_undo_(nullptr)
  , inverse_should_edge_expand_formula_ranges_(false){}
struct CommandRemoveColumnsOrRowsArchiveDefaultTypeInternal {
  constexpr CommandRemoveColumnsOrRowsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandRemoveColumnsOrRowsArchiveDefaultTypeInternal() {}
  union {
    CommandRemoveColumnsOrRowsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandRemoveColumnsOrRowsArchiveDefaultTypeInternal _CommandRemoveColumnsOrRowsArchive_default_instance_;
constexpr CommandRowColumnRangeArchive::CommandRowColumnRangeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uids_()
  , super_(nullptr)
  , is_row_(false){}
struct CommandRowColumnRangeArchiveDefaultTypeInternal {
  constexpr CommandRowColumnRangeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandRowColumnRangeArchiveDefaultTypeInternal() {}
  union {
    CommandRowColumnRangeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandRowColumnRangeArchiveDefaultTypeInternal _CommandRowColumnRangeArchive_default_instance_;
constexpr CommandResizeColumnOrRowArchive::CommandResizeColumnOrRowArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sizes_()
  , sizes_for_undo_()
  , super_(nullptr){}
struct CommandResizeColumnOrRowArchiveDefaultTypeInternal {
  constexpr CommandResizeColumnOrRowArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandResizeColumnOrRowArchiveDefaultTypeInternal() {}
  union {
    CommandResizeColumnOrRowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandResizeColumnOrRowArchiveDefaultTypeInternal _CommandResizeColumnOrRowArchive_default_instance_;
constexpr CommandCategoryResizeColumnOrRowArchive::CommandCategoryResizeColumnOrRowArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : category_row_sizes_()
  , category_row_sizes_for_undo_()
  , category_label_row_sizes_()
  , category_label_row_sizes_for_undo_()
  , super_(nullptr)
  , category_column_size_(0)
  , category_column_size_for_undo_(0){}
struct CommandCategoryResizeColumnOrRowArchiveDefaultTypeInternal {
  constexpr CommandCategoryResizeColumnOrRowArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandCategoryResizeColumnOrRowArchiveDefaultTypeInternal() {}
  union {
    CommandCategoryResizeColumnOrRowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandCategoryResizeColumnOrRowArchiveDefaultTypeInternal _CommandCategoryResizeColumnOrRowArchive_default_instance_;
constexpr CommandHideShowArchive::CommandHideShowArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hide_show_action_for_undo_()
  , super_(nullptr)
  , hide_show_action_(0)

  , hiding_action_(0u){}
struct CommandHideShowArchiveDefaultTypeInternal {
  constexpr CommandHideShowArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandHideShowArchiveDefaultTypeInternal() {}
  union {
    CommandHideShowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandHideShowArchiveDefaultTypeInternal _CommandHideShowArchive_default_instance_;
constexpr CommandTextPreflightInsertCellArchive::CommandTextPreflightInsertCellArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , coalesced_textcommand_(nullptr)
  , postflightcommand_(nullptr)
  , editing_cell_(nullptr)
  , editing_storage_(nullptr)
  , cell_uid_(nullptr)
  , archived_initial_selection_path_(nullptr)
  , grouped_with_postflight_(false)
  , last_column_hit_by_tap_(0u){}
struct CommandTextPreflightInsertCellArchiveDefaultTypeInternal {
  constexpr CommandTextPreflightInsertCellArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandTextPreflightInsertCellArchiveDefaultTypeInternal() {}
  union {
    CommandTextPreflightInsertCellArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandTextPreflightInsertCellArchiveDefaultTypeInternal _CommandTextPreflightInsertCellArchive_default_instance_;
constexpr CommandPostflightSetCellArchive::CommandPostflightSetCellArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , childcommandundo_(nullptr)
  , editing_cell_(nullptr)
  , new_cell_(nullptr)
  , editing_storage_(nullptr)
  , cell_uid_(nullptr)
  , last_column_hit_by_tap_(0u){}
struct CommandPostflightSetCellArchiveDefaultTypeInternal {
  constexpr CommandPostflightSetCellArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandPostflightSetCellArchiveDefaultTypeInternal() {}
  union {
    CommandPostflightSetCellArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandPostflightSetCellArchiveDefaultTypeInternal _CommandPostflightSetCellArchive_default_instance_;
constexpr CommandChangeTableAreaForColumnOrRowArchive::CommandChangeTableAreaForColumnOrRowArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , cell_diff_map_(nullptr)
  , undo_cell_diff_map_(nullptr)
  , undo_commands_(nullptr)
  , table_area_transition_(1)
{}
struct CommandChangeTableAreaForColumnOrRowArchiveDefaultTypeInternal {
  constexpr CommandChangeTableAreaForColumnOrRowArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandChangeTableAreaForColumnOrRowArchiveDefaultTypeInternal() {}
  union {
    CommandChangeTableAreaForColumnOrRowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandChangeTableAreaForColumnOrRowArchiveDefaultTypeInternal _CommandChangeTableAreaForColumnOrRowArchive_default_instance_;
constexpr CommandSetPencilAnnotationsArchive::CommandSetPencilAnnotationsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotations_()
  , formulas_()
  , formula_indexes_()
  , inverse_formulas_()
  , inverse_formula_indexes_()
  , super_(nullptr)
  , rollback_index_(uint64_t{0u}){}
struct CommandSetPencilAnnotationsArchiveDefaultTypeInternal {
  constexpr CommandSetPencilAnnotationsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetPencilAnnotationsArchiveDefaultTypeInternal() {}
  union {
    CommandSetPencilAnnotationsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetPencilAnnotationsArchiveDefaultTypeInternal _CommandSetPencilAnnotationsArchive_default_instance_;
constexpr CommandSetTableNameArchive::CommandSetTableNameArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : newtablename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , oldtablename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , newstyle_(nullptr)
  , oldstyle_(nullptr)
  , super_(nullptr)
  , old_shape_style_(nullptr)
  , new_shape_style_(nullptr)
  , old_table_name_border_enabled_(false)
  , new_table_name_border_enabled_(false){}
struct CommandSetTableNameArchiveDefaultTypeInternal {
  constexpr CommandSetTableNameArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetTableNameArchiveDefaultTypeInternal() {}
  union {
    CommandSetTableNameArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetTableNameArchiveDefaultTypeInternal _CommandSetTableNameArchive_default_instance_;
constexpr CommandSetTableNameEnabledArchive::CommandSetTableNameEnabledArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , table_name_enabled_(false)
  , prev_table_name_enabled_(false){}
struct CommandSetTableNameEnabledArchiveDefaultTypeInternal {
  constexpr CommandSetTableNameEnabledArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetTableNameEnabledArchiveDefaultTypeInternal() {}
  union {
    CommandSetTableNameEnabledArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetTableNameEnabledArchiveDefaultTypeInternal _CommandSetTableNameEnabledArchive_default_instance_;
constexpr CommandSetTableFontSizeArchive::CommandSetTableFontSizeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : font_size_list_()
  , inverse_font_size_list_()
  , super_(nullptr)
  , cell_diff_map_(nullptr)
  , inverse_cell_diff_map_(nullptr)
  , font_size_diff_(0)
  , is_increase_(false)
  , styles_container_refresh_done_(false){}
struct CommandSetTableFontSizeArchiveDefaultTypeInternal {
  constexpr CommandSetTableFontSizeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetTableFontSizeArchiveDefaultTypeInternal() {}
  union {
    CommandSetTableFontSizeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetTableFontSizeArchiveDefaultTypeInternal _CommandSetTableFontSizeArchive_default_instance_;
constexpr CommandSetTableFontNameArchive::CommandSetTableFontNameArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : previous_text_styles_()
  , font_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , previous_font_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , previous_table_style_(nullptr)
  , cell_diff_map_(nullptr)
  , inverse_cell_diff_map_(nullptr)
  , preserve_face_(false){}
struct CommandSetTableFontNameArchiveDefaultTypeInternal {
  constexpr CommandSetTableFontNameArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetTableFontNameArchiveDefaultTypeInternal() {}
  union {
    CommandSetTableFontNameArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetTableFontNameArchiveDefaultTypeInternal _CommandSetTableFontNameArchive_default_instance_;
constexpr CommandSetTableNameHeightArchive::CommandSetTableNameHeightArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , old_table_name_height_(0)
  , new_table_name_height_(0){}
struct CommandSetTableNameHeightArchiveDefaultTypeInternal {
  constexpr CommandSetTableNameHeightArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetTableNameHeightArchiveDefaultTypeInternal() {}
  union {
    CommandSetTableNameHeightArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetTableNameHeightArchiveDefaultTypeInternal _CommandSetTableNameHeightArchive_default_instance_;
constexpr CommandSetNowArchive::CommandSetNowArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct CommandSetNowArchiveDefaultTypeInternal {
  constexpr CommandSetNowArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetNowArchiveDefaultTypeInternal() {}
  union {
    CommandSetNowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetNowArchiveDefaultTypeInternal _CommandSetNowArchive_default_instance_;
constexpr CommandSetWasCutArchive::CommandSetWasCutArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , from_table_uid_(nullptr)
  , prev_from_table_uid_(nullptr)
  , from_group_by_uid_(nullptr)
  , prev_from_group_by_uid_(nullptr)
  , was_cut_(false)
  , prev_was_cut_(false){}
struct CommandSetWasCutArchiveDefaultTypeInternal {
  constexpr CommandSetWasCutArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetWasCutArchiveDefaultTypeInternal() {}
  union {
    CommandSetWasCutArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetWasCutArchiveDefaultTypeInternal _CommandSetWasCutArchive_default_instance_;
constexpr CommandStyleCellsArchive::CommandStyleCellsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , format_properties_(nullptr)
  , selection_(nullptr)
  , undo_cell_map_(nullptr)
  , redo_cell_map_(nullptr)
  , text_undo_(nullptr){}
struct CommandStyleCellsArchiveDefaultTypeInternal {
  constexpr CommandStyleCellsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandStyleCellsArchiveDefaultTypeInternal() {}
  union {
    CommandStyleCellsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandStyleCellsArchiveDefaultTypeInternal _CommandStyleCellsArchive_default_instance_;
constexpr CommandStyleTableArchive::CommandStyleTableArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , format_properties_(nullptr)
  , old_style_(nullptr)
  , new_style_(nullptr){}
struct CommandStyleTableArchiveDefaultTypeInternal {
  constexpr CommandStyleTableArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandStyleTableArchiveDefaultTypeInternal() {}
  union {
    CommandStyleTableArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandStyleTableArchiveDefaultTypeInternal _CommandStyleTableArchive_default_instance_;
constexpr CommandSetRepeatingHeaderEnabledArchive::CommandSetRepeatingHeaderEnabledArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , direction_(0)

  , repeating_header_enabled_(false)
  , prev_repeating_header_enabled_(false){}
struct CommandSetRepeatingHeaderEnabledArchiveDefaultTypeInternal {
  constexpr CommandSetRepeatingHeaderEnabledArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetRepeatingHeaderEnabledArchiveDefaultTypeInternal() {}
  union {
    CommandSetRepeatingHeaderEnabledArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetRepeatingHeaderEnabledArchiveDefaultTypeInternal _CommandSetRepeatingHeaderEnabledArchive_default_instance_;
constexpr CommandSetFiltersEnabledArchive::CommandSetFiltersEnabledArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rollback_uid_list_()
  , super_(nullptr)
  , new_filters_enabled_(false)
  , old_filters_enabled_(false){}
struct CommandSetFiltersEnabledArchiveDefaultTypeInternal {
  constexpr CommandSetFiltersEnabledArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetFiltersEnabledArchiveDefaultTypeInternal() {}
  union {
    CommandSetFiltersEnabledArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetFiltersEnabledArchiveDefaultTypeInternal _CommandSetFiltersEnabledArchive_default_instance_;
constexpr CommandAddTableStylePresetArchive::CommandAddTableStylePresetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , table_styles_(nullptr)
  , preset_index_(0)
  , send_notification_(false){}
struct CommandAddTableStylePresetArchiveDefaultTypeInternal {
  constexpr CommandAddTableStylePresetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandAddTableStylePresetArchiveDefaultTypeInternal() {}
  union {
    CommandAddTableStylePresetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandAddTableStylePresetArchiveDefaultTypeInternal _CommandAddTableStylePresetArchive_default_instance_;
constexpr CommandRemoveTableStylePresetArchive::CommandRemoveTableStylePresetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , theme_(nullptr)
  , removed_table_styles_(nullptr)
  , preset_id_(0)
  , preset_index_in_theme_(0){}
struct CommandRemoveTableStylePresetArchiveDefaultTypeInternal {
  constexpr CommandRemoveTableStylePresetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandRemoveTableStylePresetArchiveDefaultTypeInternal() {}
  union {
    CommandRemoveTableStylePresetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandRemoveTableStylePresetArchiveDefaultTypeInternal _CommandRemoveTableStylePresetArchive_default_instance_;
constexpr CommandReplaceTableStylePresetArchive::CommandReplaceTableStylePresetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , theme_(nullptr)
  , old_table_styles_(nullptr)
  , new_table_styles_(nullptr){}
struct CommandReplaceTableStylePresetArchiveDefaultTypeInternal {
  constexpr CommandReplaceTableStylePresetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandReplaceTableStylePresetArchiveDefaultTypeInternal() {}
  union {
    CommandReplaceTableStylePresetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandReplaceTableStylePresetArchiveDefaultTypeInternal _CommandReplaceTableStylePresetArchive_default_instance_;
constexpr CommandApplyTableStylePresetArchive::CommandApplyTableStylePresetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_col_styles_()
  , undo_row_col_styles_()
  , super_(nullptr)
  , preset_(nullptr)
  , styles_(nullptr)
  , undo_preset_(nullptr)
  , undo_styles_(nullptr)
  , cell_diff_map_(nullptr)
  , undo_cell_diff_map_(nullptr)
  , change_prop_map_wrapper_(nullptr)
  , apply_preset_option_(0)
  , table_clears_all_flag_(false)
  , undo_table_clears_all_flag_(false){}
struct CommandApplyTableStylePresetArchiveDefaultTypeInternal {
  constexpr CommandApplyTableStylePresetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandApplyTableStylePresetArchiveDefaultTypeInternal() {}
  union {
    CommandApplyTableStylePresetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandApplyTableStylePresetArchiveDefaultTypeInternal _CommandApplyTableStylePresetArchive_default_instance_;
constexpr CommandSetBaseArchive::CommandSetBaseArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , base_(0u){}
struct CommandSetBaseArchiveDefaultTypeInternal {
  constexpr CommandSetBaseArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetBaseArchiveDefaultTypeInternal() {}
  union {
    CommandSetBaseArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetBaseArchiveDefaultTypeInternal _CommandSetBaseArchive_default_instance_;
constexpr CommandSetBasePlacesArchive::CommandSetBasePlacesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , base_places_(0u){}
struct CommandSetBasePlacesArchiveDefaultTypeInternal {
  constexpr CommandSetBasePlacesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetBasePlacesArchiveDefaultTypeInternal() {}
  union {
    CommandSetBasePlacesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetBasePlacesArchiveDefaultTypeInternal _CommandSetBasePlacesArchive_default_instance_;
constexpr CommandSetBaseUseMinusSignArchive::CommandSetBaseUseMinusSignArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , base_use_minus_sign_(false){}
struct CommandSetBaseUseMinusSignArchiveDefaultTypeInternal {
  constexpr CommandSetBaseUseMinusSignArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetBaseUseMinusSignArchiveDefaultTypeInternal() {}
  union {
    CommandSetBaseUseMinusSignArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetBaseUseMinusSignArchiveDefaultTypeInternal _CommandSetBaseUseMinusSignArchive_default_instance_;
constexpr CommandSetCurrencyCodeArchive::CommandSetCurrencyCodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : currency_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr){}
struct CommandSetCurrencyCodeArchiveDefaultTypeInternal {
  constexpr CommandSetCurrencyCodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetCurrencyCodeArchiveDefaultTypeInternal() {}
  union {
    CommandSetCurrencyCodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetCurrencyCodeArchiveDefaultTypeInternal _CommandSetCurrencyCodeArchive_default_instance_;
constexpr CommandSetFractionAccuracyArchive::CommandSetFractionAccuracyArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , fraction_accuracy_(0u){}
struct CommandSetFractionAccuracyArchiveDefaultTypeInternal {
  constexpr CommandSetFractionAccuracyArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetFractionAccuracyArchiveDefaultTypeInternal() {}
  union {
    CommandSetFractionAccuracyArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetFractionAccuracyArchiveDefaultTypeInternal _CommandSetFractionAccuracyArchive_default_instance_;
constexpr CommandSetNegativeNumberStyleArchive::CommandSetNegativeNumberStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , negative_number_style_(0u){}
struct CommandSetNegativeNumberStyleArchiveDefaultTypeInternal {
  constexpr CommandSetNegativeNumberStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetNegativeNumberStyleArchiveDefaultTypeInternal() {}
  union {
    CommandSetNegativeNumberStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetNegativeNumberStyleArchiveDefaultTypeInternal _CommandSetNegativeNumberStyleArchive_default_instance_;
constexpr CommandSetNumberOfDecimalPlacesArchive::CommandSetNumberOfDecimalPlacesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , decimal_places_(0u){}
struct CommandSetNumberOfDecimalPlacesArchiveDefaultTypeInternal {
  constexpr CommandSetNumberOfDecimalPlacesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetNumberOfDecimalPlacesArchiveDefaultTypeInternal() {}
  union {
    CommandSetNumberOfDecimalPlacesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetNumberOfDecimalPlacesArchiveDefaultTypeInternal _CommandSetNumberOfDecimalPlacesArchive_default_instance_;
constexpr CommandSetDateTimeFormatArchive::CommandSetDateTimeFormatArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : date_format_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_format_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr){}
struct CommandSetDateTimeFormatArchiveDefaultTypeInternal {
  constexpr CommandSetDateTimeFormatArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetDateTimeFormatArchiveDefaultTypeInternal() {}
  union {
    CommandSetDateTimeFormatArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetDateTimeFormatArchiveDefaultTypeInternal _CommandSetDateTimeFormatArchive_default_instance_;
constexpr CommandSetShowThousandsSeparatorArchive::CommandSetShowThousandsSeparatorArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , show_thousands_separator_(false){}
struct CommandSetShowThousandsSeparatorArchiveDefaultTypeInternal {
  constexpr CommandSetShowThousandsSeparatorArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetShowThousandsSeparatorArchiveDefaultTypeInternal() {}
  union {
    CommandSetShowThousandsSeparatorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetShowThousandsSeparatorArchiveDefaultTypeInternal _CommandSetShowThousandsSeparatorArchive_default_instance_;
constexpr CommandSetUseAccountingStyleArchive::CommandSetUseAccountingStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , use_accounting_style_(false){}
struct CommandSetUseAccountingStyleArchiveDefaultTypeInternal {
  constexpr CommandSetUseAccountingStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetUseAccountingStyleArchiveDefaultTypeInternal() {}
  union {
    CommandSetUseAccountingStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetUseAccountingStyleArchiveDefaultTypeInternal _CommandSetUseAccountingStyleArchive_default_instance_;
constexpr CommandSetRangeControlMinMaxIncArchive::CommandSetRangeControlMinMaxIncArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , cell_diff_map_(nullptr)
  , cell_uid_list_(nullptr)
  , inverse_cell_diff_map_(nullptr)
  , minimum_(0)
  , maximum_(0)
  , increment_(0)
  , is_first_commit_(false){}
struct CommandSetRangeControlMinMaxIncArchiveDefaultTypeInternal {
  constexpr CommandSetRangeControlMinMaxIncArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetRangeControlMinMaxIncArchiveDefaultTypeInternal() {}
  union {
    CommandSetRangeControlMinMaxIncArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetRangeControlMinMaxIncArchiveDefaultTypeInternal _CommandSetRangeControlMinMaxIncArchive_default_instance_;
constexpr CommandMoveColumnsOrRowsArchive::CommandMoveColumnsOrRowsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uids_()
  , super_(nullptr)
  , dest_uid_(nullptr)
  , undo_dest_uid_(nullptr)
  , formula_rewrite_command_(nullptr)
  , before_(false)
  , undo_before_(false)
  , direction_(0)
{}
struct CommandMoveColumnsOrRowsArchiveDefaultTypeInternal {
  constexpr CommandMoveColumnsOrRowsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandMoveColumnsOrRowsArchiveDefaultTypeInternal() {}
  union {
    CommandMoveColumnsOrRowsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandMoveColumnsOrRowsArchiveDefaultTypeInternal _CommandMoveColumnsOrRowsArchive_default_instance_;
constexpr CommandSortArchive::CommandSortArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_row_uids_()
  , to_row_uids_()
  , super_(nullptr)
  , formula_rewrite_command_(nullptr){}
struct CommandSortArchiveDefaultTypeInternal {
  constexpr CommandSortArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSortArchiveDefaultTypeInternal() {}
  union {
    CommandSortArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSortArchiveDefaultTypeInternal _CommandSortArchive_default_instance_;
constexpr CommandRewriteFormulasForTransposeArchive::CommandRewriteFormulasForTransposeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , rewrite_spec_(nullptr)
  , formulas_to_rewrite_(nullptr)
  , warningset_map_(nullptr){}
struct CommandRewriteFormulasForTransposeArchiveDefaultTypeInternal {
  constexpr CommandRewriteFormulasForTransposeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandRewriteFormulasForTransposeArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteFormulasForTransposeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandRewriteFormulasForTransposeArchiveDefaultTypeInternal _CommandRewriteFormulasForTransposeArchive_default_instance_;
constexpr CommandRewriteTableFormulasForRewriteSpecArchive::CommandRewriteTableFormulasForRewriteSpecArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , rewrite_spec_(nullptr)
  , formulas_to_rewrite_(nullptr){}
struct CommandRewriteTableFormulasForRewriteSpecArchiveDefaultTypeInternal {
  constexpr CommandRewriteTableFormulasForRewriteSpecArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandRewriteTableFormulasForRewriteSpecArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteTableFormulasForRewriteSpecArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandRewriteTableFormulasForRewriteSpecArchiveDefaultTypeInternal _CommandRewriteTableFormulasForRewriteSpecArchive_default_instance_;
constexpr CommandRewriteMergeFormulasArchive::CommandRewriteMergeFormulasArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , rewrite_spec_(nullptr)
  , formulas_to_rewrite_(nullptr){}
struct CommandRewriteMergeFormulasArchiveDefaultTypeInternal {
  constexpr CommandRewriteMergeFormulasArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandRewriteMergeFormulasArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteMergeFormulasArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandRewriteMergeFormulasArchiveDefaultTypeInternal _CommandRewriteMergeFormulasArchive_default_instance_;
constexpr CommandRewriteCategoryFormulasArchive::CommandRewriteCategoryFormulasArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , rewrite_spec_(nullptr)
  , formulas_to_rewrite_(nullptr){}
struct CommandRewriteCategoryFormulasArchiveDefaultTypeInternal {
  constexpr CommandRewriteCategoryFormulasArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandRewriteCategoryFormulasArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteCategoryFormulasArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandRewriteCategoryFormulasArchiveDefaultTypeInternal _CommandRewriteCategoryFormulasArchive_default_instance_;
constexpr CommandRewriteFilterFormulasForTableResizeArchive::CommandRewriteFilterFormulasForTableResizeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct CommandRewriteFilterFormulasForTableResizeArchiveDefaultTypeInternal {
  constexpr CommandRewriteFilterFormulasForTableResizeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandRewriteFilterFormulasForTableResizeArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteFilterFormulasForTableResizeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandRewriteFilterFormulasForTableResizeArchiveDefaultTypeInternal _CommandRewriteFilterFormulasForTableResizeArchive_default_instance_;
constexpr CommandRewriteFilterFormulasForRewriteSpecArchive::CommandRewriteFilterFormulasForRewriteSpecArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , filter_set_(nullptr)
  , rewrite_spec_(nullptr){}
struct CommandRewriteFilterFormulasForRewriteSpecArchiveDefaultTypeInternal {
  constexpr CommandRewriteFilterFormulasForRewriteSpecArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandRewriteFilterFormulasForRewriteSpecArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteFilterFormulasForRewriteSpecArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandRewriteFilterFormulasForRewriteSpecArchiveDefaultTypeInternal _CommandRewriteFilterFormulasForRewriteSpecArchive_default_instance_;
constexpr CommandRewriteConditionalStylesForRewriteSpecArchive::CommandRewriteConditionalStylesForRewriteSpecArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , rewrite_spec_(nullptr)
  , formulas_to_rewrite_(nullptr)
  , conditional_style_sets_(nullptr){}
struct CommandRewriteConditionalStylesForRewriteSpecArchiveDefaultTypeInternal {
  constexpr CommandRewriteConditionalStylesForRewriteSpecArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandRewriteConditionalStylesForRewriteSpecArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteConditionalStylesForRewriteSpecArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandRewriteConditionalStylesForRewriteSpecArchiveDefaultTypeInternal _CommandRewriteConditionalStylesForRewriteSpecArchive_default_instance_;
constexpr CommandMergeArchive::CommandMergeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , cell_uid_list_(nullptr)
  , undo_cell_map_(nullptr)
  , undo_formula_rewrite_command_(nullptr)
  , commit_cell_map_(nullptr)
  , merge_owner_rollback_(0u){}
struct CommandMergeArchiveDefaultTypeInternal {
  constexpr CommandMergeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandMergeArchiveDefaultTypeInternal() {}
  union {
    CommandMergeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandMergeArchiveDefaultTypeInternal _CommandMergeArchive_default_instance_;
constexpr CommandInverseMergeArchive::CommandInverseMergeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , merge_source_cell_uid_(nullptr){}
struct CommandInverseMergeArchiveDefaultTypeInternal {
  constexpr CommandInverseMergeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandInverseMergeArchiveDefaultTypeInternal() {}
  union {
    CommandInverseMergeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandInverseMergeArchiveDefaultTypeInternal _CommandInverseMergeArchive_default_instance_;
constexpr CommandUnmergeArchive::CommandUnmergeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unmerge_uid_ranges_()
  , super_(nullptr)
  , undo_cell_map_(nullptr)
  , undo_formula_rewrite_command_(nullptr){}
struct CommandUnmergeArchiveDefaultTypeInternal {
  constexpr CommandUnmergeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandUnmergeArchiveDefaultTypeInternal() {}
  union {
    CommandUnmergeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandUnmergeArchiveDefaultTypeInternal _CommandUnmergeArchive_default_instance_;
constexpr CommandChooseTableIdRemapperArchive::CommandChooseTableIdRemapperArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , table_id_mapper_(nullptr)
  , formula_rewrite_command_for_undo_(nullptr)
  , apply_and_clear_(false){}
struct CommandChooseTableIdRemapperArchiveDefaultTypeInternal {
  constexpr CommandChooseTableIdRemapperArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandChooseTableIdRemapperArchiveDefaultTypeInternal() {}
  union {
    CommandChooseTableIdRemapperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandChooseTableIdRemapperArchiveDefaultTypeInternal _CommandChooseTableIdRemapperArchive_default_instance_;
constexpr CommandCategorySetGroupingColumnsArchive::CommandCategorySetGroupingColumnsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : base_row_order_()
  , undo_base_row_order_()
  , view_row_order_()
  , undo_view_row_order_()
  , collapse_state_()
  , undo_collapse_state_()
  , super_(nullptr)
  , new_grouping_columns_(nullptr)
  , old_grouping_columns_(nullptr)
  , summary_change_state_(nullptr)
  , undo_summary_change_state_(nullptr)
  , new_column_aggregates_(nullptr)
  , old_column_aggregates_(nullptr)
  , undo_set_enabled_rewrite_command_(nullptr)
  , undo_set_columns_rewrite_command_(nullptr)
  , cell_diff_map_(nullptr)
  , undo_cell_diff_map_(nullptr)
  , new_enabled_changing_(0)
  , old_enabled_changing_(0)
  , restore_base_order_(false)
  , undo_restore_base_order_(false)
  , restore_view_order_(false)
  , undo_restore_view_order_(false)
  , force_restore_all_states_(false){}
struct CommandCategorySetGroupingColumnsArchiveDefaultTypeInternal {
  constexpr CommandCategorySetGroupingColumnsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandCategorySetGroupingColumnsArchiveDefaultTypeInternal() {}
  union {
    CommandCategorySetGroupingColumnsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandCategorySetGroupingColumnsArchiveDefaultTypeInternal _CommandCategorySetGroupingColumnsArchive_default_instance_;
constexpr FormulaEditingCommandGroupArchive::FormulaEditingCommandGroupArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , undoselectionstart_(0u)
  , undoselectionlength_(0u)
  , undoselectionvalid_(false)
  , redoselectionvalid_(false)
  , undoactivetoken_(0u)
  , redoselectionstart_(0u)
  , redoselectionlength_(0u)
  , redoactivetoken_(0u){}
struct FormulaEditingCommandGroupArchiveDefaultTypeInternal {
  constexpr FormulaEditingCommandGroupArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormulaEditingCommandGroupArchiveDefaultTypeInternal() {}
  union {
    FormulaEditingCommandGroupArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormulaEditingCommandGroupArchiveDefaultTypeInternal _FormulaEditingCommandGroupArchive_default_instance_;
constexpr FormulaEditingCommandSelectionBehaviorArchive::FormulaEditingCommandSelectionBehaviorArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , undoactivetoken_(0u)
  , redoactivetoken_(0u){}
struct FormulaEditingCommandSelectionBehaviorArchiveDefaultTypeInternal {
  constexpr FormulaEditingCommandSelectionBehaviorArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormulaEditingCommandSelectionBehaviorArchiveDefaultTypeInternal() {}
  union {
    FormulaEditingCommandSelectionBehaviorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormulaEditingCommandSelectionBehaviorArchiveDefaultTypeInternal _FormulaEditingCommandSelectionBehaviorArchive_default_instance_;
constexpr TableCommandSelectionBehaviorArchive::TableCommandSelectionBehaviorArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , table_info_(nullptr)
  , last_column_uid_hit_by_tap_(nullptr)
  , invalidate_comments_(0u){}
struct TableCommandSelectionBehaviorArchiveDefaultTypeInternal {
  constexpr TableCommandSelectionBehaviorArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableCommandSelectionBehaviorArchiveDefaultTypeInternal() {}
  union {
    TableCommandSelectionBehaviorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableCommandSelectionBehaviorArchiveDefaultTypeInternal _TableCommandSelectionBehaviorArchive_default_instance_;
constexpr CommandApplyCellCommentArchive::CommandApplyCellCommentArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , cell_uid_(nullptr)
  , old_comment_storage_(nullptr)
  , new_comment_storage_(nullptr)
  , forward_variant_(0)

  , inverse_variant_(0)
{}
struct CommandApplyCellCommentArchiveDefaultTypeInternal {
  constexpr CommandApplyCellCommentArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandApplyCellCommentArchiveDefaultTypeInternal() {}
  union {
    CommandApplyCellCommentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandApplyCellCommentArchiveDefaultTypeInternal _CommandApplyCellCommentArchive_default_instance_;
constexpr CommandSetFormulaTokenizationArchive::CommandSetFormulaTokenizationArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , tokenization_(false){}
struct CommandSetFormulaTokenizationArchiveDefaultTypeInternal {
  constexpr CommandSetFormulaTokenizationArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetFormulaTokenizationArchiveDefaultTypeInternal() {}
  union {
    CommandSetFormulaTokenizationArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetFormulaTokenizationArchiveDefaultTypeInternal _CommandSetFormulaTokenizationArchive_default_instance_;
constexpr CommandSetFilterSetTypeArchive::CommandSetFilterSetTypeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rollback_uid_list_()
  , super_(nullptr)
  , old_filter_set_type_(0)

  , new_filter_set_type_(0)
{}
struct CommandSetFilterSetTypeArchiveDefaultTypeInternal {
  constexpr CommandSetFilterSetTypeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetFilterSetTypeArchiveDefaultTypeInternal() {}
  union {
    CommandSetFilterSetTypeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetFilterSetTypeArchiveDefaultTypeInternal _CommandSetFilterSetTypeArchive_default_instance_;
constexpr CommandSetTextStyleArchive::CommandSetTextStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , cell_diff_map_(nullptr)
  , inverse_cell_diff_map_(nullptr){}
struct CommandSetTextStyleArchiveDefaultTypeInternal {
  constexpr CommandSetTextStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetTextStyleArchiveDefaultTypeInternal() {}
  union {
    CommandSetTextStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetTextStyleArchiveDefaultTypeInternal _CommandSetTextStyleArchive_default_instance_;
constexpr CommandSetTextStylePropertiesArchive::CommandSetTextStylePropertiesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_was_rich_text_()
  , super_(nullptr)
  , cell_diff_map_(nullptr)
  , inverse_cell_diff_map_(nullptr){}
struct CommandSetTextStylePropertiesArchiveDefaultTypeInternal {
  constexpr CommandSetTextStylePropertiesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetTextStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    CommandSetTextStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetTextStylePropertiesArchiveDefaultTypeInternal _CommandSetTextStylePropertiesArchive_default_instance_;
constexpr CommandJustForNotifyingArchive::CommandJustForNotifyingArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , change_descriptor_type_(0u){}
struct CommandJustForNotifyingArchiveDefaultTypeInternal {
  constexpr CommandJustForNotifyingArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandJustForNotifyingArchiveDefaultTypeInternal() {}
  union {
    CommandJustForNotifyingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandJustForNotifyingArchiveDefaultTypeInternal _CommandJustForNotifyingArchive_default_instance_;
constexpr CommandSetStorageLanguageArchive::CommandSetStorageLanguageArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , storage_(nullptr)
  , undo_transaction_(nullptr)
  , range_location_(0u)
  , range_length_(0u){}
struct CommandSetStorageLanguageArchiveDefaultTypeInternal {
  constexpr CommandSetStorageLanguageArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetStorageLanguageArchiveDefaultTypeInternal() {}
  union {
    CommandSetStorageLanguageArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetStorageLanguageArchiveDefaultTypeInternal _CommandSetStorageLanguageArchive_default_instance_;
constexpr CommandSetSortOrderArchive::CommandSetSortOrderArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , old_sort_order_(nullptr)
  , new_sort_order_(nullptr){}
struct CommandSetSortOrderArchiveDefaultTypeInternal {
  constexpr CommandSetSortOrderArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetSortOrderArchiveDefaultTypeInternal() {}
  union {
    CommandSetSortOrderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetSortOrderArchiveDefaultTypeInternal _CommandSetSortOrderArchive_default_instance_;
constexpr CommandRewriteSortOrderForTableResizeArchive::CommandRewriteSortOrderForTableResizeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , old_sort_order_(nullptr)
  , new_sort_order_(nullptr){}
struct CommandRewriteSortOrderForTableResizeArchiveDefaultTypeInternal {
  constexpr CommandRewriteSortOrderForTableResizeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandRewriteSortOrderForTableResizeArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteSortOrderForTableResizeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandRewriteSortOrderForTableResizeArchiveDefaultTypeInternal _CommandRewriteSortOrderForTableResizeArchive_default_instance_;
constexpr CommandRewriteSortOrderForRewriteSpecArchive::CommandRewriteSortOrderForRewriteSpecArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , rewrite_spec_(nullptr)
  , old_sort_order_(nullptr)
  , new_sort_order_(nullptr){}
struct CommandRewriteSortOrderForRewriteSpecArchiveDefaultTypeInternal {
  constexpr CommandRewriteSortOrderForRewriteSpecArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandRewriteSortOrderForRewriteSpecArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteSortOrderForRewriteSpecArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandRewriteSortOrderForRewriteSpecArchiveDefaultTypeInternal _CommandRewriteSortOrderForRewriteSpecArchive_default_instance_;
constexpr CommandSetFilterSetArchive::CommandSetFilterSetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rollback_uid_list_()
  , super_(nullptr)
  , new_filter_set_(nullptr)
  , old_filter_set_(nullptr){}
struct CommandSetFilterSetArchiveDefaultTypeInternal {
  constexpr CommandSetFilterSetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetFilterSetArchiveDefaultTypeInternal() {}
  union {
    CommandSetFilterSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetFilterSetArchiveDefaultTypeInternal _CommandSetFilterSetArchive_default_instance_;
constexpr ColumnRowRestoreDataArchive::ColumnRowRestoreDataArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uid_list_()
  , metadatas_(){}
struct ColumnRowRestoreDataArchiveDefaultTypeInternal {
  constexpr ColumnRowRestoreDataArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColumnRowRestoreDataArchiveDefaultTypeInternal() {}
  union {
    ColumnRowRestoreDataArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColumnRowRestoreDataArchiveDefaultTypeInternal _ColumnRowRestoreDataArchive_default_instance_;
constexpr CommandTransposeTableArchive::CommandTransposeTableArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : original_column_widths_()
  , original_row_heights_()
  , ineligible_merge_list_()
  , super_(nullptr)
  , original_table_range_(nullptr)
  , original_cell_map_(nullptr)
  , transposed_cell_map_(nullptr)
  , undo_formula_rewrite_command_(nullptr)
  , rich_text_subcommands_(nullptr)
  , column_restore_data_(nullptr)
  , row_restore_data_(nullptr)
  , original_footer_row_count_(0u){}
struct CommandTransposeTableArchiveDefaultTypeInternal {
  constexpr CommandTransposeTableArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandTransposeTableArchiveDefaultTypeInternal() {}
  union {
    CommandTransposeTableArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandTransposeTableArchiveDefaultTypeInternal _CommandTransposeTableArchive_default_instance_;
constexpr CommandSetStructuredTextImportRecordArchive::CommandSetStructuredTextImportRecordArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , new_import_record_(nullptr)
  , old_import_record_(nullptr){}
struct CommandSetStructuredTextImportRecordArchiveDefaultTypeInternal {
  constexpr CommandSetStructuredTextImportRecordArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSetStructuredTextImportRecordArchiveDefaultTypeInternal() {}
  union {
    CommandSetStructuredTextImportRecordArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSetStructuredTextImportRecordArchiveDefaultTypeInternal _CommandSetStructuredTextImportRecordArchive_default_instance_;
constexpr CommandCategoryCollapseExpandGroupArchive::CommandCategoryCollapseExpandGroupArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , grouping_columns_(nullptr)
  , collapse_state_(nullptr)
  , undo_collapse_state_(nullptr)
  , is_collapsing_(false){}
struct CommandCategoryCollapseExpandGroupArchiveDefaultTypeInternal {
  constexpr CommandCategoryCollapseExpandGroupArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandCategoryCollapseExpandGroupArchiveDefaultTypeInternal() {}
  union {
    CommandCategoryCollapseExpandGroupArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandCategoryCollapseExpandGroupArchiveDefaultTypeInternal _CommandCategoryCollapseExpandGroupArchive_default_instance_;
constexpr CommandCategoryChangeSummaryAggregateType::CommandCategoryChangeSummaryAggregateType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , column_uid_(nullptr)
  , aggregate_type_(0u)
  , undo_aggregate_type_(0u)
  , group_level_(0){}
struct CommandCategoryChangeSummaryAggregateTypeDefaultTypeInternal {
  constexpr CommandCategoryChangeSummaryAggregateTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandCategoryChangeSummaryAggregateTypeDefaultTypeInternal() {}
  union {
    CommandCategoryChangeSummaryAggregateType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandCategoryChangeSummaryAggregateTypeDefaultTypeInternal _CommandCategoryChangeSummaryAggregateType_default_instance_;
constexpr CommandCategorySetLabelRowVisibility::CommandCategorySetLabelRowVisibility(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , group_level_(0u)
  , label_row_visibility_(0u)
  , undo_label_row_visibility_(0u){}
struct CommandCategorySetLabelRowVisibilityDefaultTypeInternal {
  constexpr CommandCategorySetLabelRowVisibilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandCategorySetLabelRowVisibilityDefaultTypeInternal() {}
  union {
    CommandCategorySetLabelRowVisibility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandCategorySetLabelRowVisibilityDefaultTypeInternal _CommandCategorySetLabelRowVisibility_default_instance_;
constexpr CommandCategoryWillChangeGroupValue::CommandCategoryWillChangeGroupValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , group_node_uid_(nullptr)
  , undo_group_node_uid_(nullptr)
  , group_value_(nullptr)
  , undo_group_value_(nullptr)
  , rewrite_command_for_undo_(nullptr){}
struct CommandCategoryWillChangeGroupValueDefaultTypeInternal {
  constexpr CommandCategoryWillChangeGroupValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandCategoryWillChangeGroupValueDefaultTypeInternal() {}
  union {
    CommandCategoryWillChangeGroupValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandCategoryWillChangeGroupValueDefaultTypeInternal _CommandCategoryWillChangeGroupValue_default_instance_;
constexpr IdempotentSelectionTransformerArchive::IdempotentSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : archived_selection_(nullptr){}
struct IdempotentSelectionTransformerArchiveDefaultTypeInternal {
  constexpr IdempotentSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IdempotentSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    IdempotentSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IdempotentSelectionTransformerArchiveDefaultTypeInternal _IdempotentSelectionTransformerArchive_default_instance_;
constexpr WPSelectionTransformerArchive::WPSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , archived_selection_(nullptr)
  , origin_cell_uid_(nullptr){}
struct WPSelectionTransformerArchiveDefaultTypeInternal {
  constexpr WPSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WPSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    WPSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WPSelectionTransformerArchiveDefaultTypeInternal _WPSelectionTransformerArchive_default_instance_;
constexpr TableSubSelectionTransformerBaseArchive::TableSubSelectionTransformerBaseArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_info_id_path_(nullptr){}
struct TableSubSelectionTransformerBaseArchiveDefaultTypeInternal {
  constexpr TableSubSelectionTransformerBaseArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableSubSelectionTransformerBaseArchiveDefaultTypeInternal() {}
  union {
    TableSubSelectionTransformerBaseArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableSubSelectionTransformerBaseArchiveDefaultTypeInternal _TableSubSelectionTransformerBaseArchive_default_instance_;
constexpr TableNameSelectionTransformerArchive::TableNameSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct TableNameSelectionTransformerArchiveDefaultTypeInternal {
  constexpr TableNameSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableNameSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    TableNameSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableNameSelectionTransformerArchiveDefaultTypeInternal _TableNameSelectionTransformerArchive_default_instance_;
constexpr ControlCellSelectionTransformerArchive::ControlCellSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , cell_uids_(nullptr)
  , origin_cell_uid_(nullptr)
  , origin_cell_id_(nullptr){}
struct ControlCellSelectionTransformerArchiveDefaultTypeInternal {
  constexpr ControlCellSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlCellSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    ControlCellSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlCellSelectionTransformerArchiveDefaultTypeInternal _ControlCellSelectionTransformerArchive_default_instance_;
constexpr StockCellSelectionTransformerArchive::StockCellSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , cell_uids_(nullptr)
  , origin_cell_uid_(nullptr)
  , origin_cell_id_(nullptr){}
struct StockCellSelectionTransformerArchiveDefaultTypeInternal {
  constexpr StockCellSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StockCellSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    StockCellSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StockCellSelectionTransformerArchiveDefaultTypeInternal _StockCellSelectionTransformerArchive_default_instance_;
constexpr RegionSelectionTransformerArchive::RegionSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , cell_uids_(nullptr)
  , origin_cell_uid_(nullptr)
  , anchor_cell_uid_(nullptr)
  , cursor_cell_uid_(nullptr){}
struct RegionSelectionTransformerArchiveDefaultTypeInternal {
  constexpr RegionSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegionSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    RegionSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegionSelectionTransformerArchiveDefaultTypeInternal _RegionSelectionTransformerArchive_default_instance_;
constexpr StrokeSelectionTransformerArchive::StrokeSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , archived_selection_(nullptr){}
struct StrokeSelectionTransformerArchiveDefaultTypeInternal {
  constexpr StrokeSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StrokeSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    StrokeSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StrokeSelectionTransformerArchiveDefaultTypeInternal _StrokeSelectionTransformerArchive_default_instance_;
constexpr RowColumnSelectionTransformerArchive::RowColumnSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_col_uids_()
  , super_(nullptr)
  , selection_type_(0)
{}
struct RowColumnSelectionTransformerArchiveDefaultTypeInternal {
  constexpr RowColumnSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RowColumnSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    RowColumnSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RowColumnSelectionTransformerArchiveDefaultTypeInternal _RowColumnSelectionTransformerArchive_default_instance_;
constexpr CommandCategoryMoveRowsArchive::CommandCategoryMoveRowsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : category_row_order_()
  , undo_category_row_order_()
  , super_(nullptr)
  , cell_diff_map_(nullptr)
  , undo_cell_diff_map_(nullptr)
  , grouping_columns_(nullptr)
  , action_type_(0u){}
struct CommandCategoryMoveRowsArchiveDefaultTypeInternal {
  constexpr CommandCategoryMoveRowsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandCategoryMoveRowsArchiveDefaultTypeInternal() {}
  union {
    CommandCategoryMoveRowsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandCategoryMoveRowsArchiveDefaultTypeInternal _CommandCategoryMoveRowsArchive_default_instance_;
constexpr CommandRewriteHiddenStatesForGroupByChangeArchive::CommandRewriteHiddenStatesForGroupByChangeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , group_by_change_(nullptr)
  , collapsed_state_(nullptr){}
struct CommandRewriteHiddenStatesForGroupByChangeArchiveDefaultTypeInternal {
  constexpr CommandRewriteHiddenStatesForGroupByChangeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandRewriteHiddenStatesForGroupByChangeArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteHiddenStatesForGroupByChangeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandRewriteHiddenStatesForGroupByChangeArchiveDefaultTypeInternal _CommandRewriteHiddenStatesForGroupByChangeArchive_default_instance_;
constexpr CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotation_(nullptr)
  , index_(uint64_t{0u}){}
struct CommandRewritePencilAnnotationFormulasArchive_AnnotationPairDefaultTypeInternal {
  constexpr CommandRewritePencilAnnotationFormulasArchive_AnnotationPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandRewritePencilAnnotationFormulasArchive_AnnotationPairDefaultTypeInternal() {}
  union {
    CommandRewritePencilAnnotationFormulasArchive_AnnotationPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandRewritePencilAnnotationFormulasArchive_AnnotationPairDefaultTypeInternal _CommandRewritePencilAnnotationFormulasArchive_AnnotationPair_default_instance_;
constexpr CommandRewritePencilAnnotationFormulasArchive::CommandRewritePencilAnnotationFormulasArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotations_for_undo_()
  , super_(nullptr)
  , rewrite_spec_(nullptr)
  , formulas_to_rewrite_(nullptr){}
struct CommandRewritePencilAnnotationFormulasArchiveDefaultTypeInternal {
  constexpr CommandRewritePencilAnnotationFormulasArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandRewritePencilAnnotationFormulasArchiveDefaultTypeInternal() {}
  union {
    CommandRewritePencilAnnotationFormulasArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandRewritePencilAnnotationFormulasArchiveDefaultTypeInternal _CommandRewritePencilAnnotationFormulasArchive_default_instance_;
}  // namespace TST
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TSTCommandArchives_2eproto[100];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TSTCommandArchives_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TSTCommandArchives_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TSTCommandArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, table_info_id_path_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, commandname_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, default_cell_styles_container_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, timestamp_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, random_seed_lo_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, random_seed_hi_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, is_inverse_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, old_timestamp_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, old_random_seed_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  9,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellContentsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellContentsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellContentsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellContentsArchive, cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellContentsArchive, rollback_cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellContentsArchive, custom_format_keys_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellContentsArchive, action_string_),
  1,
  2,
  3,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellDiffMapArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellDiffMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellDiffMapArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellDiffMapArchive, cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellDiffMapArchive, should_allow_merge_fragments_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellDiffMapArchive, inverse_cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellDiffMapArchive, custom_format_keys_),
  0,
  1,
  3,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellMapArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellMapArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellMapArchive, redo_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellMapArchive, undo_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellMapArchive, undo_formula_rewrite_command_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellMapArchive, custom_format_keys_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellMapArchive, merge_owner_rollback_index_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellMapArchive, is_from_paste_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellMapArchive, formula_rewrite_commands_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyConcurrentCellMapArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyConcurrentCellMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyConcurrentCellMapArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyConcurrentCellMapArchive, redo_concurrent_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyConcurrentCellMapArchive, undo_concurrent_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyConcurrentCellMapArchive, undo_formula_rewrite_command_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyConcurrentCellMapArchive, custom_format_keys_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyConcurrentCellMapArchive, merge_owner_rollback_index_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyConcurrentCellMapArchive, is_from_paste_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyConcurrentCellMapArchive, formula_rewrite_commands_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeFreezeHeaderStateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeFreezeHeaderStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeFreezeHeaderStateArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeFreezeHeaderStateArchive, direction_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeFreezeHeaderStateArchive, new_freeze_state_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeFreezeHeaderStateArchive, prev_freeze_state_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellsArchive, update_border_visibility_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellsArchive, invalidate_comments_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellsArchive, invalidate_comments_valid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellsArchive, cell_uid_region_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellsArchive, summary_cell_uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellsArchive, inverse_concurrent_cell_map_),
  0,
  4,
  5,
  6,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellContentsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellContentsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellContentsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellContentsArchive, cell_uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellContentsArchive, inverse_cell_diff_map_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandMutateCellFormatArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMutateCellFormatArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandMutateCellFormatArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMutateCellFormatArchive, cell_uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMutateCellFormatArchive, inverse_cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMutateCellFormatArchive, whole_format_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMutateCellFormatArchive, intended_format_type_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetAutomaticDurationUnitsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetAutomaticDurationUnitsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetAutomaticDurationUnitsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetAutomaticDurationUnitsArchive, automatic_units_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDurationStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDurationStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDurationStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDurationStyleArchive, duration_style_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDurationUnitSmallestLargestArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDurationUnitSmallestLargestArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDurationUnitSmallestLargestArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDurationUnitSmallestLargestArchive, smallest_unit_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDurationUnitSmallestLargestArchive, largest_unit_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceCustomFormatArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceCustomFormatArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceCustomFormatArchive, undo_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceCustomFormatArchive, commit_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceCustomFormatArchive, super_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, dst_table_info_id_path_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, src_uid_range_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, dst_uid_range_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, table_dimension_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, src_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, dst_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, dst_cell_styles_container_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, src_undo_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, dst_undo_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, dst_merge_owner_rollback_index_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, formula_rewrite_commands_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, merge_action_to_restore_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, comment_cell_uids_to_restore_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, comment_storages_to_restore_),
  0,
  1,
  2,
  3,
  11,
  4,
  5,
  6,
  7,
  8,
  12,
  ~0u,
  9,
  10,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowMetadataArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowMetadataArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowMetadataArchive, size_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowMetadataArchive, hiding_action_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowMetadataArchive, cell_style_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowMetadataArchive, text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowMetadataArchive, uuid_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, bundle_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, undo_commands_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, undo_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, sort_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, filter_set_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, should_edge_expand_formula_ranges_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, was_categorized_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, undo_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, src_row_column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, opp_row_column_uid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  9,
  10,
  ~0u,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowBundleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowBundleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowBundleArchive, is_row_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowBundleArchive, view_uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowBundleArchive, view_type_list_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowBundleArchive, base_uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowBundleArchive, base_type_list_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowBundleArchive, category_order_uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowBundleArchive, category_order_type_list_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowBundleArchive, metadata_list_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, bundle_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, undo_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, undo_filter_set_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, undo_sort_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, formula_rewrite_command_for_undo_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, inverse_should_edge_expand_formula_ranges_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, undo_order_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRowColumnRangeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRowColumnRangeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRowColumnRangeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRowColumnRangeArchive, uids_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRowColumnRangeArchive, is_row_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandResizeColumnOrRowArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandResizeColumnOrRowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandResizeColumnOrRowArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandResizeColumnOrRowArchive, sizes_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandResizeColumnOrRowArchive, sizes_for_undo_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryResizeColumnOrRowArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryResizeColumnOrRowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryResizeColumnOrRowArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryResizeColumnOrRowArchive, category_row_sizes_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryResizeColumnOrRowArchive, category_row_sizes_for_undo_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryResizeColumnOrRowArchive, category_label_row_sizes_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryResizeColumnOrRowArchive, category_label_row_sizes_for_undo_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryResizeColumnOrRowArchive, category_column_size_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryResizeColumnOrRowArchive, category_column_size_for_undo_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandHideShowArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandHideShowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandHideShowArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandHideShowArchive, hide_show_action_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandHideShowArchive, hiding_action_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandHideShowArchive, hide_show_action_for_undo_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, coalesced_textcommand_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, postflightcommand_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, grouped_with_postflight_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, editing_cell_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, editing_storage_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, last_column_hit_by_tap_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, cell_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, archived_initial_selection_path_),
  0,
  1,
  2,
  7,
  3,
  4,
  8,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::TST::CommandPostflightSetCellArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPostflightSetCellArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandPostflightSetCellArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPostflightSetCellArchive, childcommandundo_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPostflightSetCellArchive, editing_cell_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPostflightSetCellArchive, new_cell_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPostflightSetCellArchive, editing_storage_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPostflightSetCellArchive, last_column_hit_by_tap_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPostflightSetCellArchive, cell_uid_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeTableAreaForColumnOrRowArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeTableAreaForColumnOrRowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeTableAreaForColumnOrRowArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeTableAreaForColumnOrRowArchive, table_area_transition_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeTableAreaForColumnOrRowArchive, cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeTableAreaForColumnOrRowArchive, undo_cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeTableAreaForColumnOrRowArchive, undo_commands_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeTableAreaForColumnOrRowArchive, action_string_),
  1,
  5,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetPencilAnnotationsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetPencilAnnotationsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetPencilAnnotationsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetPencilAnnotationsArchive, annotations_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetPencilAnnotationsArchive, formulas_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetPencilAnnotationsArchive, formula_indexes_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetPencilAnnotationsArchive, inverse_formulas_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetPencilAnnotationsArchive, inverse_formula_indexes_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetPencilAnnotationsArchive, rollback_index_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, newtablename_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, oldtablename_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, newstyle_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, oldstyle_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, old_shape_style_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, new_shape_style_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, old_table_name_border_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, new_table_name_border_enabled_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameEnabledArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameEnabledArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameEnabledArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameEnabledArchive, table_name_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameEnabledArchive, prev_table_name_enabled_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontSizeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontSizeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontSizeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontSizeArchive, is_increase_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontSizeArchive, font_size_diff_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontSizeArchive, font_size_list_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontSizeArchive, inverse_font_size_list_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontSizeArchive, cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontSizeArchive, inverse_cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontSizeArchive, styles_container_refresh_done_),
  0,
  4,
  3,
  ~0u,
  ~0u,
  1,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontNameArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontNameArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontNameArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontNameArchive, font_name_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontNameArchive, preserve_face_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontNameArchive, previous_font_name_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontNameArchive, previous_table_style_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontNameArchive, previous_text_styles_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontNameArchive, cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontNameArchive, inverse_cell_diff_map_),
  2,
  0,
  6,
  1,
  3,
  ~0u,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameHeightArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameHeightArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameHeightArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameHeightArchive, old_table_name_height_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameHeightArchive, new_table_name_height_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNowArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNowArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetWasCutArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetWasCutArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetWasCutArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetWasCutArchive, from_table_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetWasCutArchive, prev_from_table_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetWasCutArchive, was_cut_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetWasCutArchive, prev_was_cut_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetWasCutArchive, from_group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetWasCutArchive, prev_from_group_by_uid_),
  0,
  1,
  2,
  5,
  6,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleCellsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleCellsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleCellsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleCellsArchive, format_properties_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleCellsArchive, selection_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleCellsArchive, undo_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleCellsArchive, redo_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleCellsArchive, text_undo_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleTableArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleTableArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleTableArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleTableArchive, format_properties_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleTableArchive, old_style_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleTableArchive, new_style_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRepeatingHeaderEnabledArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRepeatingHeaderEnabledArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRepeatingHeaderEnabledArchive, repeating_header_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRepeatingHeaderEnabledArchive, direction_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRepeatingHeaderEnabledArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRepeatingHeaderEnabledArchive, prev_repeating_header_enabled_),
  2,
  1,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFiltersEnabledArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFiltersEnabledArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFiltersEnabledArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFiltersEnabledArchive, new_filters_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFiltersEnabledArchive, old_filters_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFiltersEnabledArchive, rollback_uid_list_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandAddTableStylePresetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandAddTableStylePresetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandAddTableStylePresetArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandAddTableStylePresetArchive, preset_index_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandAddTableStylePresetArchive, table_styles_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandAddTableStylePresetArchive, send_notification_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveTableStylePresetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveTableStylePresetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveTableStylePresetArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveTableStylePresetArchive, theme_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveTableStylePresetArchive, removed_table_styles_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveTableStylePresetArchive, preset_id_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveTableStylePresetArchive, preset_index_in_theme_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceTableStylePresetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceTableStylePresetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceTableStylePresetArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceTableStylePresetArchive, theme_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceTableStylePresetArchive, old_table_styles_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceTableStylePresetArchive, new_table_styles_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, preset_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, styles_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, undo_preset_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, undo_styles_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, undo_cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, apply_preset_option_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, table_clears_all_flag_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, undo_table_clears_all_flag_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, row_col_styles_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, undo_row_col_styles_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, change_prop_map_wrapper_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  9,
  10,
  ~0u,
  ~0u,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBaseArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBaseArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBaseArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBaseArchive, base_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBasePlacesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBasePlacesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBasePlacesArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBasePlacesArchive, base_places_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBaseUseMinusSignArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBaseUseMinusSignArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBaseUseMinusSignArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBaseUseMinusSignArchive, base_use_minus_sign_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetCurrencyCodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetCurrencyCodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetCurrencyCodeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetCurrencyCodeArchive, currency_code_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFractionAccuracyArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFractionAccuracyArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFractionAccuracyArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFractionAccuracyArchive, fraction_accuracy_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNegativeNumberStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNegativeNumberStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNegativeNumberStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNegativeNumberStyleArchive, negative_number_style_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNumberOfDecimalPlacesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNumberOfDecimalPlacesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNumberOfDecimalPlacesArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNumberOfDecimalPlacesArchive, decimal_places_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDateTimeFormatArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDateTimeFormatArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDateTimeFormatArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDateTimeFormatArchive, date_format_string_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDateTimeFormatArchive, time_format_string_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetShowThousandsSeparatorArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetShowThousandsSeparatorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetShowThousandsSeparatorArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetShowThousandsSeparatorArchive, show_thousands_separator_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetUseAccountingStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetUseAccountingStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetUseAccountingStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetUseAccountingStyleArchive, use_accounting_style_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRangeControlMinMaxIncArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRangeControlMinMaxIncArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRangeControlMinMaxIncArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRangeControlMinMaxIncArchive, minimum_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRangeControlMinMaxIncArchive, maximum_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRangeControlMinMaxIncArchive, increment_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRangeControlMinMaxIncArchive, cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRangeControlMinMaxIncArchive, cell_uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRangeControlMinMaxIncArchive, inverse_cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRangeControlMinMaxIncArchive, is_first_commit_),
  0,
  4,
  5,
  6,
  1,
  2,
  3,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveColumnsOrRowsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveColumnsOrRowsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveColumnsOrRowsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveColumnsOrRowsArchive, dest_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveColumnsOrRowsArchive, before_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveColumnsOrRowsArchive, undo_dest_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveColumnsOrRowsArchive, undo_before_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveColumnsOrRowsArchive, uids_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveColumnsOrRowsArchive, direction_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveColumnsOrRowsArchive, formula_rewrite_command_),
  0,
  1,
  4,
  2,
  5,
  ~0u,
  6,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSortArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSortArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSortArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSortArchive, from_row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSortArchive, to_row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSortArchive, formula_rewrite_command_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFormulasForTransposeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFormulasForTransposeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFormulasForTransposeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFormulasForTransposeArchive, rewrite_spec_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFormulasForTransposeArchive, formulas_to_rewrite_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFormulasForTransposeArchive, warningset_map_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteTableFormulasForRewriteSpecArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteTableFormulasForRewriteSpecArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteTableFormulasForRewriteSpecArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteTableFormulasForRewriteSpecArchive, rewrite_spec_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteTableFormulasForRewriteSpecArchive, formulas_to_rewrite_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteMergeFormulasArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteMergeFormulasArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteMergeFormulasArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteMergeFormulasArchive, rewrite_spec_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteMergeFormulasArchive, formulas_to_rewrite_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteCategoryFormulasArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteCategoryFormulasArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteCategoryFormulasArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteCategoryFormulasArchive, rewrite_spec_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteCategoryFormulasArchive, formulas_to_rewrite_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFilterFormulasForTableResizeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFilterFormulasForTableResizeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFilterFormulasForTableResizeArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFilterFormulasForRewriteSpecArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFilterFormulasForRewriteSpecArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFilterFormulasForRewriteSpecArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFilterFormulasForRewriteSpecArchive, filter_set_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFilterFormulasForRewriteSpecArchive, rewrite_spec_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteConditionalStylesForRewriteSpecArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteConditionalStylesForRewriteSpecArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteConditionalStylesForRewriteSpecArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteConditionalStylesForRewriteSpecArchive, rewrite_spec_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteConditionalStylesForRewriteSpecArchive, formulas_to_rewrite_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteConditionalStylesForRewriteSpecArchive, conditional_style_sets_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandMergeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMergeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandMergeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMergeArchive, cell_uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMergeArchive, undo_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMergeArchive, undo_formula_rewrite_command_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMergeArchive, merge_owner_rollback_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMergeArchive, commit_cell_map_),
  0,
  1,
  2,
  3,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::TST::CommandInverseMergeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInverseMergeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandInverseMergeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInverseMergeArchive, merge_source_cell_uid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandUnmergeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandUnmergeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandUnmergeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandUnmergeArchive, unmerge_uid_ranges_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandUnmergeArchive, undo_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandUnmergeArchive, undo_formula_rewrite_command_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandChooseTableIdRemapperArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChooseTableIdRemapperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandChooseTableIdRemapperArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChooseTableIdRemapperArchive, table_id_mapper_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChooseTableIdRemapperArchive, formula_rewrite_command_for_undo_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChooseTableIdRemapperArchive, apply_and_clear_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, new_enabled_changing_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, old_enabled_changing_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, new_grouping_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, old_grouping_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, restore_base_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, base_row_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, undo_restore_base_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, undo_base_row_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, restore_view_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, view_row_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, undo_restore_view_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, undo_view_row_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, collapse_state_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, undo_collapse_state_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, summary_change_state_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, undo_summary_change_state_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, new_column_aggregates_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, old_column_aggregates_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, undo_set_enabled_rewrite_command_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, undo_set_columns_rewrite_command_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, force_restore_all_states_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, undo_cell_diff_map_),
  0,
  11,
  12,
  1,
  2,
  13,
  ~0u,
  14,
  ~0u,
  15,
  ~0u,
  16,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  17,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, undoselectionvalid_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, undoselectionstart_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, undoselectionlength_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, undoactivetoken_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, redoselectionvalid_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, redoselectionstart_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, redoselectionlength_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, redoactivetoken_),
  0,
  3,
  1,
  2,
  5,
  4,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandSelectionBehaviorArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandSelectionBehaviorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandSelectionBehaviorArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandSelectionBehaviorArchive, undoactivetoken_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandSelectionBehaviorArchive, redoactivetoken_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandSelectionBehaviorArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandSelectionBehaviorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandSelectionBehaviorArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandSelectionBehaviorArchive, table_info_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandSelectionBehaviorArchive, last_column_uid_hit_by_tap_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandSelectionBehaviorArchive, invalidate_comments_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellCommentArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellCommentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellCommentArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellCommentArchive, cell_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellCommentArchive, old_comment_storage_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellCommentArchive, new_comment_storage_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellCommentArchive, forward_variant_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellCommentArchive, inverse_variant_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFormulaTokenizationArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFormulaTokenizationArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFormulaTokenizationArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFormulaTokenizationArchive, tokenization_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetTypeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetTypeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetTypeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetTypeArchive, old_filter_set_type_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetTypeArchive, new_filter_set_type_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetTypeArchive, rollback_uid_list_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStyleArchive, cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStyleArchive, inverse_cell_diff_map_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStylePropertiesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStylePropertiesArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStylePropertiesArchive, cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStylePropertiesArchive, cell_was_rich_text_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStylePropertiesArchive, inverse_cell_diff_map_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandJustForNotifyingArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandJustForNotifyingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandJustForNotifyingArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandJustForNotifyingArchive, change_descriptor_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStorageLanguageArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStorageLanguageArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStorageLanguageArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStorageLanguageArchive, storage_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStorageLanguageArchive, language_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStorageLanguageArchive, range_location_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStorageLanguageArchive, range_length_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStorageLanguageArchive, undo_transaction_),
  1,
  2,
  0,
  4,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetSortOrderArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetSortOrderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetSortOrderArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetSortOrderArchive, old_sort_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetSortOrderArchive, new_sort_order_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForTableResizeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForTableResizeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForTableResizeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForTableResizeArchive, old_sort_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForTableResizeArchive, new_sort_order_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForRewriteSpecArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForRewriteSpecArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForRewriteSpecArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForRewriteSpecArchive, rewrite_spec_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForRewriteSpecArchive, old_sort_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForRewriteSpecArchive, new_sort_order_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetArchive, new_filter_set_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetArchive, old_filter_set_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetArchive, rollback_uid_list_),
  0,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowRestoreDataArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowRestoreDataArchive, uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowRestoreDataArchive, metadatas_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, original_table_range_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, original_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, original_footer_row_count_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, original_column_widths_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, original_row_heights_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, ineligible_merge_list_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, transposed_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, undo_formula_rewrite_command_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, rich_text_subcommands_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, column_restore_data_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, row_restore_data_),
  0,
  1,
  2,
  8,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStructuredTextImportRecordArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStructuredTextImportRecordArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStructuredTextImportRecordArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStructuredTextImportRecordArchive, new_import_record_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStructuredTextImportRecordArchive, old_import_record_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryCollapseExpandGroupArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryCollapseExpandGroupArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryCollapseExpandGroupArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryCollapseExpandGroupArchive, is_collapsing_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryCollapseExpandGroupArchive, grouping_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryCollapseExpandGroupArchive, collapse_state_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryCollapseExpandGroupArchive, undo_collapse_state_),
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryChangeSummaryAggregateType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryChangeSummaryAggregateType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryChangeSummaryAggregateType, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryChangeSummaryAggregateType, aggregate_type_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryChangeSummaryAggregateType, undo_aggregate_type_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryChangeSummaryAggregateType, column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryChangeSummaryAggregateType, group_level_),
  0,
  2,
  3,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetLabelRowVisibility, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetLabelRowVisibility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetLabelRowVisibility, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetLabelRowVisibility, group_level_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetLabelRowVisibility, label_row_visibility_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetLabelRowVisibility, undo_label_row_visibility_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryWillChangeGroupValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryWillChangeGroupValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryWillChangeGroupValue, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryWillChangeGroupValue, group_node_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryWillChangeGroupValue, undo_group_node_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryWillChangeGroupValue, group_value_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryWillChangeGroupValue, undo_group_value_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryWillChangeGroupValue, rewrite_command_for_undo_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TST::IdempotentSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::IdempotentSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::IdempotentSelectionTransformerArchive, archived_selection_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::WPSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::WPSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::WPSelectionTransformerArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::WPSelectionTransformerArchive, archived_selection_),
  PROTOBUF_FIELD_OFFSET(::TST::WPSelectionTransformerArchive, origin_cell_uid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::TableSubSelectionTransformerBaseArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSubSelectionTransformerBaseArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TableSubSelectionTransformerBaseArchive, table_info_id_path_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::TableNameSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableNameSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::TableNameSelectionTransformerArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::ControlCellSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ControlCellSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::ControlCellSelectionTransformerArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::ControlCellSelectionTransformerArchive, cell_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::ControlCellSelectionTransformerArchive, origin_cell_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::ControlCellSelectionTransformerArchive, origin_cell_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::StockCellSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StockCellSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::StockCellSelectionTransformerArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::StockCellSelectionTransformerArchive, cell_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::StockCellSelectionTransformerArchive, origin_cell_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::StockCellSelectionTransformerArchive, origin_cell_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::RegionSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::RegionSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::RegionSelectionTransformerArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::RegionSelectionTransformerArchive, cell_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::RegionSelectionTransformerArchive, origin_cell_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::RegionSelectionTransformerArchive, anchor_cell_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::RegionSelectionTransformerArchive, cursor_cell_uid_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSelectionTransformerArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSelectionTransformerArchive, archived_selection_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::RowColumnSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::RowColumnSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::RowColumnSelectionTransformerArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::RowColumnSelectionTransformerArchive, selection_type_),
  PROTOBUF_FIELD_OFFSET(::TST::RowColumnSelectionTransformerArchive, row_col_uids_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryMoveRowsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryMoveRowsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryMoveRowsArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryMoveRowsArchive, action_type_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryMoveRowsArchive, category_row_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryMoveRowsArchive, undo_category_row_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryMoveRowsArchive, cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryMoveRowsArchive, undo_cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryMoveRowsArchive, grouping_columns_),
  0,
  4,
  ~0u,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteHiddenStatesForGroupByChangeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteHiddenStatesForGroupByChangeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteHiddenStatesForGroupByChangeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteHiddenStatesForGroupByChangeArchive, group_by_change_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteHiddenStatesForGroupByChangeArchive, collapsed_state_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair, index_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair, annotation_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePencilAnnotationFormulasArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePencilAnnotationFormulasArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePencilAnnotationFormulasArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePencilAnnotationFormulasArchive, rewrite_spec_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePencilAnnotationFormulasArchive, formulas_to_rewrite_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePencilAnnotationFormulasArchive, annotations_for_undo_),
  0,
  1,
  2,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::TST::TableCommandArchive)},
  { 25, 35, sizeof(::TST::CommandApplyCellContentsArchive)},
  { 40, 50, sizeof(::TST::CommandApplyCellDiffMapArchive)},
  { 55, 68, sizeof(::TST::CommandApplyCellMapArchive)},
  { 76, 89, sizeof(::TST::CommandApplyConcurrentCellMapArchive)},
  { 97, 106, sizeof(::TST::CommandChangeFreezeHeaderStateArchive)},
  { 110, 122, sizeof(::TST::CommandDeleteCellsArchive)},
  { 129, 137, sizeof(::TST::CommandDeleteCellContentsArchive)},
  { 140, 150, sizeof(::TST::CommandMutateCellFormatArchive)},
  { 155, 162, sizeof(::TST::CommandSetAutomaticDurationUnitsArchive)},
  { 164, 171, sizeof(::TST::CommandSetDurationStyleArchive)},
  { 173, 181, sizeof(::TST::CommandSetDurationUnitSmallestLargestArchive)},
  { 184, 192, sizeof(::TST::CommandReplaceCustomFormatArchive)},
  { 195, 215, sizeof(::TST::CommandMoveCellsArchive)},
  { 230, 240, sizeof(::TST::ColumnRowMetadataArchive)},
  { 245, 262, sizeof(::TST::CommandInsertColumnsOrRowsArchive)},
  { 274, 287, sizeof(::TST::ColumnRowBundleArchive)},
  { 295, 309, sizeof(::TST::CommandRemoveColumnsOrRowsArchive)},
  { 318, 326, sizeof(::TST::CommandRowColumnRangeArchive)},
  { 329, 337, sizeof(::TST::CommandResizeColumnOrRowArchive)},
  { 340, 352, sizeof(::TST::CommandCategoryResizeColumnOrRowArchive)},
  { 359, 368, sizeof(::TST::CommandHideShowArchive)},
  { 372, 386, sizeof(::TST::CommandTextPreflightInsertCellArchive)},
  { 395, 407, sizeof(::TST::CommandPostflightSetCellArchive)},
  { 414, 425, sizeof(::TST::CommandChangeTableAreaForColumnOrRowArchive)},
  { 431, 443, sizeof(::TST::CommandSetPencilAnnotationsArchive)},
  { 450, 464, sizeof(::TST::CommandSetTableNameArchive)},
  { 473, 481, sizeof(::TST::CommandSetTableNameEnabledArchive)},
  { 484, 497, sizeof(::TST::CommandSetTableFontSizeArchive)},
  { 505, 518, sizeof(::TST::CommandSetTableFontNameArchive)},
  { 526, 534, sizeof(::TST::CommandSetTableNameHeightArchive)},
  { 537, 543, sizeof(::TST::CommandSetNowArchive)},
  { 544, 556, sizeof(::TST::CommandSetWasCutArchive)},
  { 563, 574, sizeof(::TST::CommandStyleCellsArchive)},
  { 580, 589, sizeof(::TST::CommandStyleTableArchive)},
  { 593, 602, sizeof(::TST::CommandSetRepeatingHeaderEnabledArchive)},
  { 606, 615, sizeof(::TST::CommandSetFiltersEnabledArchive)},
  { 619, 628, sizeof(::TST::CommandAddTableStylePresetArchive)},
  { 632, 642, sizeof(::TST::CommandRemoveTableStylePresetArchive)},
  { 647, 656, sizeof(::TST::CommandReplaceTableStylePresetArchive)},
  { 660, 678, sizeof(::TST::CommandApplyTableStylePresetArchive)},
  { 691, 698, sizeof(::TST::CommandSetBaseArchive)},
  { 700, 707, sizeof(::TST::CommandSetBasePlacesArchive)},
  { 709, 716, sizeof(::TST::CommandSetBaseUseMinusSignArchive)},
  { 718, 725, sizeof(::TST::CommandSetCurrencyCodeArchive)},
  { 727, 734, sizeof(::TST::CommandSetFractionAccuracyArchive)},
  { 736, 743, sizeof(::TST::CommandSetNegativeNumberStyleArchive)},
  { 745, 752, sizeof(::TST::CommandSetNumberOfDecimalPlacesArchive)},
  { 754, 762, sizeof(::TST::CommandSetDateTimeFormatArchive)},
  { 765, 772, sizeof(::TST::CommandSetShowThousandsSeparatorArchive)},
  { 774, 781, sizeof(::TST::CommandSetUseAccountingStyleArchive)},
  { 783, 796, sizeof(::TST::CommandSetRangeControlMinMaxIncArchive)},
  { 804, 817, sizeof(::TST::CommandMoveColumnsOrRowsArchive)},
  { 825, 834, sizeof(::TST::CommandSortArchive)},
  { 838, 847, sizeof(::TST::CommandRewriteFormulasForTransposeArchive)},
  { 851, 859, sizeof(::TST::CommandRewriteTableFormulasForRewriteSpecArchive)},
  { 862, 870, sizeof(::TST::CommandRewriteMergeFormulasArchive)},
  { 873, 881, sizeof(::TST::CommandRewriteCategoryFormulasArchive)},
  { 884, 890, sizeof(::TST::CommandRewriteFilterFormulasForTableResizeArchive)},
  { 891, 899, sizeof(::TST::CommandRewriteFilterFormulasForRewriteSpecArchive)},
  { 902, 911, sizeof(::TST::CommandRewriteConditionalStylesForRewriteSpecArchive)},
  { 915, 926, sizeof(::TST::CommandMergeArchive)},
  { 932, 939, sizeof(::TST::CommandInverseMergeArchive)},
  { 941, 950, sizeof(::TST::CommandUnmergeArchive)},
  { 954, 963, sizeof(::TST::CommandChooseTableIdRemapperArchive)},
  { 967, 996, sizeof(::TST::CommandCategorySetGroupingColumnsArchive)},
  { 1020, 1034, sizeof(::TST::FormulaEditingCommandGroupArchive)},
  { 1043, 1051, sizeof(::TST::FormulaEditingCommandSelectionBehaviorArchive)},
  { 1054, 1063, sizeof(::TST::TableCommandSelectionBehaviorArchive)},
  { 1067, 1078, sizeof(::TST::CommandApplyCellCommentArchive)},
  { 1084, 1091, sizeof(::TST::CommandSetFormulaTokenizationArchive)},
  { 1093, 1102, sizeof(::TST::CommandSetFilterSetTypeArchive)},
  { 1106, 1114, sizeof(::TST::CommandSetTextStyleArchive)},
  { 1117, 1126, sizeof(::TST::CommandSetTextStylePropertiesArchive)},
  { 1130, 1137, sizeof(::TST::CommandJustForNotifyingArchive)},
  { 1139, 1150, sizeof(::TST::CommandSetStorageLanguageArchive)},
  { 1156, 1164, sizeof(::TST::CommandSetSortOrderArchive)},
  { 1167, 1175, sizeof(::TST::CommandRewriteSortOrderForTableResizeArchive)},
  { 1178, 1187, sizeof(::TST::CommandRewriteSortOrderForRewriteSpecArchive)},
  { 1191, 1200, sizeof(::TST::CommandSetFilterSetArchive)},
  { 1204, -1, sizeof(::TST::ColumnRowRestoreDataArchive)},
  { 1211, 1228, sizeof(::TST::CommandTransposeTableArchive)},
  { 1240, 1248, sizeof(::TST::CommandSetStructuredTextImportRecordArchive)},
  { 1251, 1261, sizeof(::TST::CommandCategoryCollapseExpandGroupArchive)},
  { 1266, 1276, sizeof(::TST::CommandCategoryChangeSummaryAggregateType)},
  { 1281, 1290, sizeof(::TST::CommandCategorySetLabelRowVisibility)},
  { 1294, 1305, sizeof(::TST::CommandCategoryWillChangeGroupValue)},
  { 1311, 1317, sizeof(::TST::IdempotentSelectionTransformerArchive)},
  { 1318, 1326, sizeof(::TST::WPSelectionTransformerArchive)},
  { 1329, 1335, sizeof(::TST::TableSubSelectionTransformerBaseArchive)},
  { 1336, 1342, sizeof(::TST::TableNameSelectionTransformerArchive)},
  { 1343, 1352, sizeof(::TST::ControlCellSelectionTransformerArchive)},
  { 1356, 1365, sizeof(::TST::StockCellSelectionTransformerArchive)},
  { 1369, 1379, sizeof(::TST::RegionSelectionTransformerArchive)},
  { 1384, 1391, sizeof(::TST::StrokeSelectionTransformerArchive)},
  { 1393, 1401, sizeof(::TST::RowColumnSelectionTransformerArchive)},
  { 1404, 1416, sizeof(::TST::CommandCategoryMoveRowsArchive)},
  { 1423, 1431, sizeof(::TST::CommandRewriteHiddenStatesForGroupByChangeArchive)},
  { 1434, 1441, sizeof(::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair)},
  { 1443, 1452, sizeof(::TST::CommandRewritePencilAnnotationFormulasArchive)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TableCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandApplyCellContentsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandApplyCellDiffMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandApplyCellMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandApplyConcurrentCellMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandChangeFreezeHeaderStateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandDeleteCellsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandDeleteCellContentsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandMutateCellFormatArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetAutomaticDurationUnitsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetDurationStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetDurationUnitSmallestLargestArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandReplaceCustomFormatArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandMoveCellsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ColumnRowMetadataArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandInsertColumnsOrRowsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ColumnRowBundleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandRemoveColumnsOrRowsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandRowColumnRangeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandResizeColumnOrRowArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandCategoryResizeColumnOrRowArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandHideShowArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandTextPreflightInsertCellArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandPostflightSetCellArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandChangeTableAreaForColumnOrRowArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetPencilAnnotationsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetTableNameArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetTableNameEnabledArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetTableFontSizeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetTableFontNameArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetTableNameHeightArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetNowArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetWasCutArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandStyleCellsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandStyleTableArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetRepeatingHeaderEnabledArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetFiltersEnabledArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandAddTableStylePresetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandRemoveTableStylePresetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandReplaceTableStylePresetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandApplyTableStylePresetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetBaseArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetBasePlacesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetBaseUseMinusSignArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetCurrencyCodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetFractionAccuracyArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetNegativeNumberStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetNumberOfDecimalPlacesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetDateTimeFormatArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetShowThousandsSeparatorArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetUseAccountingStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetRangeControlMinMaxIncArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandMoveColumnsOrRowsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSortArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandRewriteFormulasForTransposeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandRewriteTableFormulasForRewriteSpecArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandRewriteMergeFormulasArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandRewriteCategoryFormulasArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandRewriteFilterFormulasForTableResizeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandRewriteFilterFormulasForRewriteSpecArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandRewriteConditionalStylesForRewriteSpecArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandMergeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandInverseMergeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandUnmergeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandChooseTableIdRemapperArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandCategorySetGroupingColumnsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_FormulaEditingCommandGroupArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_FormulaEditingCommandSelectionBehaviorArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TableCommandSelectionBehaviorArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandApplyCellCommentArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetFormulaTokenizationArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetFilterSetTypeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetTextStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetTextStylePropertiesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandJustForNotifyingArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetStorageLanguageArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetSortOrderArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandRewriteSortOrderForTableResizeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandRewriteSortOrderForRewriteSpecArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetFilterSetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ColumnRowRestoreDataArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandTransposeTableArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandSetStructuredTextImportRecordArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandCategoryCollapseExpandGroupArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandCategoryChangeSummaryAggregateType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandCategorySetLabelRowVisibility_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandCategoryWillChangeGroupValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_IdempotentSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_WPSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TableSubSelectionTransformerBaseArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_TableNameSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_ControlCellSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_StockCellSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_RegionSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_StrokeSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_RowColumnSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandCategoryMoveRowsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandRewriteHiddenStatesForGroupByChangeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandRewritePencilAnnotationFormulasArchive_AnnotationPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TST::_CommandRewritePencilAnnotationFormulasArchive_default_instance_),
};

const char descriptor_table_protodef_TSTCommandArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030TSTCommandArchives.proto\022\003TST\032\021TSPMess"
  "ages.proto\032\021TSDArchives.proto\032\030TSDComman"
  "dArchives.proto\032\021TSKArchives.proto\032\021TSSA"
  "rchives.proto\032\022TSCEArchives.proto\032\022TSWPA"
  "rchives.proto\032\021TSTArchives.proto\032\025TSTArc"
  "hives.sos.proto\"\267\002\n\023TableCommandArchive\022"
  "\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022)\n\022t"
  "able_info_id_path\030\002 \002(\0132\r.TSP.UUIDPath\022\023"
  "\n\013commandname\030\003 \001(\t\0225\n\035default_cell_styl"
  "es_container\030\004 \001(\0132\016.TSP.Reference\022\021\n\tti"
  "mestamp\030\005 \001(\001\022\026\n\016random_seed_lo\030\006 \001(\r\022\026\n"
  "\016random_seed_hi\030\007 \001(\r\022\022\n\nis_inverse\030\010 \001("
  "\010\022\025\n\rold_timestamp\030\t \001(\001\022\027\n\017old_random_s"
  "eed\030\n \001(\004\"\337\001\n\037CommandApplyCellContentsAr"
  "chive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandA"
  "rchive\022%\n\rcell_diff_map\030\002 \002(\0132\016.TSP.Refe"
  "rence\022.\n\026rollback_cell_diff_map\030\003 \001(\0132\016."
  "TSP.Reference\022%\n\022custom_format_keys\030\004 \003("
  "\0132\t.TSP.UUID\022\025\n\raction_string\030\005 \001(\t\"\354\001\n\036"
  "CommandApplyCellDiffMapArchive\022\'\n\005super\030"
  "\001 \002(\0132\030.TST.TableCommandArchive\022%\n\rcell_"
  "diff_map\030\002 \002(\0132\016.TSP.Reference\022$\n\034should"
  "_allow_merge_fragments\030\003 \002(\010\022-\n\025inverse_"
  "cell_diff_map\030\004 \001(\0132\016.TSP.Reference\022%\n\022c"
  "ustom_format_keys\030\005 \003(\0132\t.TSP.UUID\"\335\002\n\032C"
  "ommandApplyCellMapArchive\022\'\n\005super\030\001 \002(\013"
  "2\030.TST.TableCommandArchive\022%\n\rredo_cell_"
  "map\030\002 \002(\0132\016.TSP.Reference\022%\n\rundo_cell_m"
  "ap\030\003 \001(\0132\016.TSP.Reference\0224\n\034undo_formula"
  "_rewrite_command\030\004 \001(\0132\016.TSP.Reference\022%"
  "\n\022custom_format_keys\030\005 \003(\0132\t.TSP.UUID\022\"\n"
  "\032merge_owner_rollback_index\030\006 \001(\r\022\025\n\ris_"
  "from_paste\030\007 \002(\010\0220\n\030formula_rewrite_comm"
  "ands\030\010 \003(\0132\016.TSP.Reference\"\375\002\n$CommandAp"
  "plyConcurrentCellMapArchive\022\'\n\005super\030\001 \002"
  "(\0132\030.TST.TableCommandArchive\0220\n\030redo_con"
  "current_cell_map\030\002 \002(\0132\016.TSP.Reference\0220"
  "\n\030undo_concurrent_cell_map\030\003 \001(\0132\016.TSP.R"
  "eference\0224\n\034undo_formula_rewrite_command"
  "\030\004 \001(\0132\016.TSP.Reference\022%\n\022custom_format_"
  "keys\030\005 \003(\0132\t.TSP.UUID\022\"\n\032merge_owner_rol"
  "lback_index\030\006 \001(\r\022\025\n\ris_from_paste\030\007 \002(\010"
  "\0220\n\030formula_rewrite_commands\030\010 \003(\0132\016.TSP"
  ".Reference\"\264\001\n%CommandChangeFreezeHeader"
  "StateArchive\022\'\n\005super\030\001 \002(\0132\030.TST.TableC"
  "ommandArchive\022-\n\tdirection\030\002 \002(\0162\032.TST.T"
  "ableDimensionArchive\022\030\n\020new_freeze_state"
  "\030\003 \002(\010\022\031\n\021prev_freeze_state\030\004 \002(\010\"\307\002\n\031Co"
  "mmandDeleteCellsArchive\022\'\n\005super\030\001 \002(\0132\030"
  ".TST.TableCommandArchive\022 \n\030update_borde"
  "r_visibility\030\004 \001(\010\022\033\n\023invalidate_comment"
  "s\030\005 \001(\010\022!\n\031invalidate_comments_valid\030\006 \001"
  "(\010\0222\n\017cell_uid_region\030\007 \001(\0132\031.TST.CellUI"
  "DRegionArchive\0226\n\025summary_cell_uid_list\030"
  "\010 \001(\0132\027.TST.CellUIDListArchive\0223\n\033invers"
  "e_concurrent_cell_map\030\t \001(\0132\016.TSP.Refere"
  "nce\"\252\001\n CommandDeleteCellContentsArchive"
  "\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArchiv"
  "e\022.\n\rcell_uid_list\030\002 \002(\0132\027.TST.CellUIDLi"
  "stArchive\022-\n\025inverse_cell_diff_map\030\003 \001(\013"
  "2\016.TSP.Reference\"\365\001\n\036CommandMutateCellFo"
  "rmatArchive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCo"
  "mmandArchive\022.\n\rcell_uid_list\030\002 \001(\0132\027.TS"
  "T.CellUIDListArchive\022-\n\025inverse_cell_dif"
  "f_map\030\003 \001(\0132\016.TSP.Reference\022-\n\025whole_for"
  "mat_diff_map\030\004 \001(\0132\016.TSP.Reference\022\034\n\024in"
  "tended_format_type\030\005 \002(\r\"v\n\'CommandSetAu"
  "tomaticDurationUnitsArchive\0222\n\005super\030\001 \002"
  "(\0132#.TST.CommandMutateCellFormatArchive\022"
  "\027\n\017automatic_units\030\004 \001(\010\"l\n\036CommandSetDu"
  "rationStyleArchive\0222\n\005super\030\001 \002(\0132#.TST."
  "CommandMutateCellFormatArchive\022\026\n\016durati"
  "on_style\030\002 \001(\r\"\217\001\n,CommandSetDurationUni"
  "tSmallestLargestArchive\0222\n\005super\030\001 \002(\0132#"
  ".TST.CommandMutateCellFormatArchive\022\025\n\rs"
  "mallest_unit\030\002 \001(\r\022\024\n\014largest_unit\030\003 \001(\r"
  "\"\234\001\n!CommandReplaceCustomFormatArchive\022%"
  "\n\rundo_diff_map\030\001 \001(\0132\016.TSP.Reference\022\'\n"
  "\017commit_diff_map\030\002 \001(\0132\016.TSP.Reference\022\'"
  "\n\005super\030\006 \002(\0132\030.TST.TableCommandArchive\""
  "\340\005\n\027CommandMoveCellsArchive\022\'\n\005super\030\001 \002"
  "(\0132\030.TST.TableCommandArchive\022-\n\026dst_tabl"
  "e_info_id_path\030\002 \002(\0132\r.TSP.UUIDPath\022+\n\rs"
  "rc_uid_range\030\003 \002(\0132\024.TSP.UUIDRectArchive"
  "\022+\n\rdst_uid_range\030\004 \002(\0132\024.TSP.UUIDRectAr"
  "chive\0223\n\017table_dimension\030\005 \001(\0162\032.TST.Tab"
  "leDimensionArchive\022$\n\014src_cell_map\030\006 \002(\013"
  "2\016.TSP.Reference\022$\n\014dst_cell_map\030\007 \001(\0132\016"
  ".TSP.Reference\0221\n\031dst_cell_styles_contai"
  "ner\030\010 \001(\0132\016.TSP.Reference\022)\n\021src_undo_ce"
  "ll_map\030\t \001(\0132\016.TSP.Reference\022)\n\021dst_undo"
  "_cell_map\030\n \001(\0132\016.TSP.Reference\022&\n\036dst_m"
  "erge_owner_rollback_index\030\013 \002(\r\0220\n\030formu"
  "la_rewrite_commands\030\014 \003(\0132\016.TSP.Referenc"
  "e\022;\n\027merge_action_to_restore\030\r \001(\0132\032.TST"
  ".MergeOperationArchive\022=\n\034comment_cell_u"
  "ids_to_restore\030\016 \001(\0132\027.TST.CellUIDListAr"
  "chive\0223\n\033comment_storages_to_restore\030\017 \003"
  "(\0132\016.TSP.Reference\"\240\001\n\030ColumnRowMetadata"
  "Archive\022\014\n\004size\030\001 \002(\001\022\025\n\rhiding_action\030\002"
  " \002(\r\022\"\n\ncell_style\030\003 \001(\0132\016.TSP.Reference"
  "\022\"\n\ntext_style\030\004 \001(\0132\016.TSP.Reference\022\027\n\004"
  "uuid\030\005 \001(\0132\t.TSP.UUID\"\361\003\n!CommandInsertC"
  "olumnsOrRowsArchive\022\'\n\005super\030\001 \002(\0132\030.TST"
  ".TableCommandArchive\022+\n\006bundle\030\002 \002(\0132\033.T"
  "ST.ColumnRowBundleArchive\022 \n\010cell_map\030\003 "
  "\001(\0132\016.TSP.Reference\022%\n\rundo_commands\030\004 \001"
  "(\0132\016.TSP.Reference\022%\n\rundo_cell_map\030\005 \001("
  "\0132\016.TSP.Reference\0221\n\nsort_order\030\006 \001(\0132\035."
  "TST.TableSortOrderUIDArchive\022\"\n\nfilter_s"
  "et\030\007 \001(\0132\016.TSP.Reference\022)\n!should_edge_"
  "expand_formula_ranges\030\010 \001(\010\022\027\n\017was_categ"
  "orized\030\t \001(\010\022\035\n\nundo_order\030\n \003(\0132\t.TSP.U"
  "UID\022%\n\022src_row_column_uid\030\013 \002(\0132\t.TSP.UU"
  "ID\022%\n\022opp_row_column_uid\030\014 \002(\0132\t.TSP.UUI"
  "D\"\350\002\n\026ColumnRowBundleArchive\022\016\n\006is_row\030\001"
  " \002(\010\022 \n\rview_uid_list\030\002 \003(\0132\t.TSP.UUID\022."
  "\n\016view_type_list\030\003 \003(\0162\026.TST.ColumnRowTy"
  "peEnum\022 \n\rbase_uid_list\030\004 \003(\0132\t.TSP.UUID"
  "\022.\n\016base_type_list\030\005 \003(\0162\026.TST.ColumnRow"
  "TypeEnum\022*\n\027category_order_uid_list\030\006 \003("
  "\0132\t.TSP.UUID\0228\n\030category_order_type_list"
  "\030\007 \003(\0162\026.TST.ColumnRowTypeEnum\0224\n\rmetada"
  "ta_list\030\010 \003(\0132\035.TST.ColumnRowMetadataArc"
  "hive\"\257\003\n!CommandRemoveColumnsOrRowsArchi"
  "ve\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArch"
  "ive\022+\n\006bundle\030\002 \002(\0132\033.TST.ColumnRowBundl"
  "eArchive\022 \n\010cell_map\030\003 \001(\0132\016.TSP.Referen"
  "ce\022%\n\rundo_cell_map\030\004 \001(\0132\016.TSP.Referenc"
  "e\022\'\n\017undo_filter_set\030\005 \001(\0132\016.TSP.Referen"
  "ce\0226\n\017undo_sort_order\030\006 \001(\0132\035.TST.TableS"
  "ortOrderUIDArchive\0228\n formula_rewrite_co"
  "mmand_for_undo\030\007 \001(\0132\016.TSP.Reference\0221\n)"
  "inverse_should_edge_expand_formula_range"
  "s\030\010 \001(\010\022\035\n\nundo_order\030\t \003(\0132\t.TSP.UUID\"p"
  "\n\034CommandRowColumnRangeArchive\022\'\n\005super\030"
  "\001 \002(\0132\030.TST.TableCommandArchive\022\027\n\004uids\030"
  "\002 \003(\0132\t.TSP.UUID\022\016\n\006is_row\030\003 \002(\010\"z\n\037Comm"
  "andResizeColumnOrRowArchive\0220\n\005super\030\001 \002"
  "(\0132!.TST.CommandRowColumnRangeArchive\022\r\n"
  "\005sizes\030\002 \003(\002\022\026\n\016sizes_for_undo\030\003 \003(\002\"\245\002\n"
  "\'CommandCategoryResizeColumnOrRowArchive"
  "\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArchiv"
  "e\022\032\n\022category_row_sizes\030\002 \003(\002\022#\n\033categor"
  "y_row_sizes_for_undo\030\003 \003(\002\022 \n\030category_l"
  "abel_row_sizes\030\004 \003(\002\022)\n!category_label_r"
  "ow_sizes_for_undo\030\005 \003(\002\022\034\n\024category_colu"
  "mn_size\030\006 \001(\001\022%\n\035category_column_size_fo"
  "r_undo\030\007 \001(\001\"\326\001\n\026CommandHideShowArchive\022"
  "0\n\005super\030\001 \002(\0132!.TST.CommandRowColumnRan"
  "geArchive\0224\n\020hide_show_action\030\002 \002(\0162\032.TS"
  "T.HideShowActionArchive\022\025\n\rhiding_action"
  "\030\003 \002(\r\022=\n\031hide_show_action_for_undo\030\004 \003("
  "\0162\032.TST.HideShowActionArchive\"\242\003\n%Comman"
  "dTextPreflightInsertCellArchive\022\'\n\005super"
  "\030\003 \002(\0132\030.TST.TableCommandArchive\022-\n\025coal"
  "esced_textcommand\030\006 \001(\0132\016.TSP.Reference\022"
  ")\n\021postflightcommand\030\010 \001(\0132\016.TSP.Referen"
  "ce\022\037\n\027grouped_with_postflight\030\t \001(\010\022\037\n\014e"
  "diting_cell\030\n \002(\0132\t.TST.Cell\022\'\n\017editing_"
  "storage\030\013 \002(\0132\016.TSP.Reference\022\036\n\026last_co"
  "lumn_hit_by_tap\030\014 \001(\r\022\'\n\010cell_uid\030\r \002(\0132"
  "\025.TSP.UUIDCoordArchive\022B\n\037archived_initi"
  "al_selection_path\030\016 \001(\0132\031.TSK.SelectionP"
  "athArchive\"\244\002\n\037CommandPostflightSetCellA"
  "rchive\022\'\n\005super\030\003 \002(\0132\030.TST.TableCommand"
  "Archive\022(\n\020childcommandundo\030\004 \001(\0132\016.TSP."
  "Reference\022\037\n\014editing_cell\030\006 \002(\0132\t.TST.Ce"
  "ll\022\033\n\010new_cell\030\007 \002(\0132\t.TST.Cell\022\'\n\017editi"
  "ng_storage\030\010 \002(\0132\016.TSP.Reference\022\036\n\026last"
  "_column_hit_by_tap\030\t \001(\r\022\'\n\010cell_uid\030\n \002"
  "(\0132\025.TSP.UUIDCoordArchive\"\251\002\n+CommandCha"
  "ngeTableAreaForColumnOrRowArchive\0220\n\005sup"
  "er\030\001 \002(\0132!.TST.CommandRowColumnRangeArch"
  "ive\0227\n\025table_area_transition\030\002 \002(\0162\030.TST"
  ".TableAreaTransition\022%\n\rcell_diff_map\030\003 "
  "\001(\0132\016.TSP.Reference\022*\n\022undo_cell_diff_ma"
  "p\030\004 \001(\0132\016.TSP.Reference\022%\n\rundo_commands"
  "\030\005 \001(\0132\016.TSP.Reference\022\025\n\raction_string\030"
  "\006 \001(\t\"\234\002\n\"CommandSetPencilAnnotationsArc"
  "hive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandAr"
  "chive\022#\n\013annotations\030\002 \003(\0132\016.TSP.Referen"
  "ce\022&\n\010formulas\030\003 \003(\0132\024.TSCE.FormulaArchi"
  "ve\022\027\n\017formula_indexes\030\004 \003(\004\022.\n\020inverse_f"
  "ormulas\030\005 \003(\0132\024.TSCE.FormulaArchive\022\037\n\027i"
  "nverse_formula_indexes\030\006 \003(\004\022\026\n\016rollback"
  "_index\030\007 \001(\004\"\325\002\n\032CommandSetTableNameArch"
  "ive\022\024\n\014newtablename\030\001 \002(\t\022\024\n\014oldtablenam"
  "e\030\002 \001(\t\022 \n\010newstyle\030\003 \001(\0132\016.TSP.Referenc"
  "e\022 \n\010oldstyle\030\004 \001(\0132\016.TSP.Reference\022\'\n\005s"
  "uper\030\005 \002(\0132\030.TST.TableCommandArchive\022\'\n\017"
  "old_shape_style\030\006 \001(\0132\016.TSP.Reference\022\'\n"
  "\017new_shape_style\030\007 \001(\0132\016.TSP.Reference\022%"
  "\n\035old_table_name_border_enabled\030\010 \001(\010\022%\n"
  "\035new_table_name_border_enabled\030\t \001(\010\"\211\001\n"
  "!CommandSetTableNameEnabledArchive\022\'\n\005su"
  "per\030\001 \002(\0132\030.TST.TableCommandArchive\022\032\n\022t"
  "able_name_enabled\030\002 \002(\010\022\037\n\027prev_table_na"
  "me_enabled\030\003 \001(\010\"\253\002\n\036CommandSetTableFont"
  "SizeArchive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCo"
  "mmandArchive\022\023\n\013is_increase\030\002 \002(\010\022\026\n\016fon"
  "t_size_diff\030\003 \002(\005\022\026\n\016font_size_list\030\004 \003("
  "\001\022\036\n\026inverse_font_size_list\030\005 \003(\001\022%\n\rcel"
  "l_diff_map\030\006 \001(\0132\016.TSP.Reference\022-\n\025inve"
  "rse_cell_diff_map\030\007 \001(\0132\016.TSP.Reference\022"
  "%\n\035styles_container_refresh_done\030\010 \002(\010\"\301"
  "\002\n\036CommandSetTableFontNameArchive\022\'\n\005sup"
  "er\030\001 \002(\0132\030.TST.TableCommandArchive\022\021\n\tfo"
  "nt_name\030\002 \002(\t\022\025\n\rpreserve_face\030\003 \002(\010\022\032\n\022"
  "previous_font_name\030\004 \001(\t\022,\n\024previous_tab"
  "le_style\030\005 \001(\0132\016.TSP.Reference\022,\n\024previo"
  "us_text_styles\030\006 \003(\0132\016.TSP.Reference\022%\n\r"
  "cell_diff_map\030\007 \002(\0132\016.TSP.Reference\022-\n\025i"
  "nverse_cell_diff_map\030\010 \001(\0132\016.TSP.Referen"
  "ce\"\211\001\n CommandSetTableNameHeightArchive\022"
  "\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArchive"
  "\022\035\n\025old_table_name_height\030\002 \002(\001\022\035\n\025new_t"
  "able_name_height\030\003 \002(\001\"\?\n\024CommandSetNowA"
  "rchive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommand"
  "Archive\"\205\002\n\027CommandSetWasCutArchive\022\'\n\005s"
  "uper\030\001 \002(\0132\030.TST.TableCommandArchive\022!\n\016"
  "from_table_uid\030\002 \002(\0132\t.TSP.UUID\022&\n\023prev_"
  "from_table_uid\030\003 \002(\0132\t.TSP.UUID\022\017\n\007was_c"
  "ut\030\004 \002(\010\022\024\n\014prev_was_cut\030\005 \002(\010\022$\n\021from_g"
  "roup_by_uid\030\006 \002(\0132\t.TSP.UUID\022)\n\026prev_fro"
  "m_group_by_uid\030\007 \002(\0132\t.TSP.UUID\"\223\002\n\030Comm"
  "andStyleCellsArchive\022\'\n\005super\030\001 \002(\0132\030.TS"
  "T.TableCommandArchive\0223\n\021format_properti"
  "es\030\002 \001(\0132\030.TSP.ReferenceDictionary\022(\n\tse"
  "lection\030\003 \002(\0132\025.TST.SelectionArchive\022%\n\r"
  "undo_cell_map\030\004 \002(\0132\016.TSP.Reference\022%\n\rr"
  "edo_cell_map\030\005 \002(\0132\016.TSP.Reference\022!\n\tte"
  "xt_undo\030\006 \001(\0132\016.TSP.Reference\"\366\001\n\030Comman"
  "dStyleTableArchive\022\'\n\005super\030\001 \002(\0132\030.TST."
  "TableCommandArchive\0223\n\021format_properties"
  "\030\002 \001(\0132\030.TSP.ReferenceDictionary\022=\n\told_"
  "style\030\003 \001(\0132*.TSTSOS.TableStylePropertyC"
  "hangeSetArchive\022=\n\tnew_style\030\004 \001(\0132*.TST"
  "SOS.TableStylePropertyChangeSetArchive\"\312"
  "\001\n\'CommandSetRepeatingHeaderEnabledArchi"
  "ve\022 \n\030repeating_header_enabled\030\001 \002(\010\022-\n\t"
  "direction\030\002 \002(\0162\032.TST.TableDimensionArch"
  "ive\022\'\n\005super\030\003 \002(\0132\030.TST.TableCommandArc"
  "hive\022%\n\035prev_repeating_header_enabled\030\004 "
  "\001(\010\"\252\001\n\037CommandSetFiltersEnabledArchive\022"
  "\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArchive"
  "\022\033\n\023new_filters_enabled\030\002 \002(\010\022\033\n\023old_fil"
  "ters_enabled\030\003 \001(\010\022$\n\021rollback_uid_list\030"
  "\004 \003(\0132\t.TSP.UUID\"\243\001\n!CommandAddTableStyl"
  "ePresetArchive\022\'\n\005super\030\001 \002(\0132\030.TST.Tabl"
  "eCommandArchive\022\024\n\014preset_index\030\002 \002(\005\022$\n"
  "\014table_styles\030\003 \002(\0132\016.TSP.Reference\022\031\n\021s"
  "end_notification\030\004 \002(\010\"\311\001\n$CommandRemove"
  "TableStylePresetArchive\022\"\n\005super\030\001 \002(\0132\023"
  ".TSK.CommandArchive\022\035\n\005theme\030\002 \002(\0132\016.TSP"
  ".Reference\022,\n\024removed_table_styles\030\003 \002(\013"
  "2\016.TSP.Reference\022\021\n\tpreset_id\030\004 \002(\005\022\035\n\025p"
  "reset_index_in_theme\030\005 \002(\005\"\276\001\n%CommandRe"
  "placeTableStylePresetArchive\022\"\n\005super\030\001 "
  "\002(\0132\023.TSK.CommandArchive\022\035\n\005theme\030\002 \002(\0132"
  "\016.TSP.Reference\022(\n\020old_table_styles\030\003 \002("
  "\0132\016.TSP.Reference\022(\n\020new_table_styles\030\004 "
  "\002(\0132\016.TSP.Reference\"\257\004\n#CommandApplyTabl"
  "eStylePresetArchive\022\'\n\005super\030\001 \002(\0132\030.TST"
  ".TableCommandArchive\022\036\n\006preset\030\002 \001(\0132\016.T"
  "SP.Reference\022\036\n\006styles\030\003 \001(\0132\016.TSP.Refer"
  "ence\022#\n\013undo_preset\030\004 \001(\0132\016.TSP.Referenc"
  "e\022#\n\013undo_styles\030\005 \001(\0132\016.TSP.Reference\022%"
  "\n\rcell_diff_map\030\006 \001(\0132\016.TSP.Reference\022*\n"
  "\022undo_cell_diff_map\030\007 \001(\0132\016.TSP.Referenc"
  "e\022\033\n\023apply_preset_option\030\010 \002(\005\022\035\n\025table_"
  "clears_all_flag\030\013 \002(\010\022\"\n\032undo_table_clea"
  "rs_all_flag\030\014 \002(\010\0225\n\016row_col_styles\030\r \003("
  "\0132\035.TST.ColumnRowMetadataArchive\022:\n\023undo"
  "_row_col_styles\030\016 \003(\0132\035.TST.ColumnRowMet"
  "adataArchive\022/\n\027change_prop_map_wrapper\030"
  "\017 \001(\0132\016.TSP.Reference\"Y\n\025CommandSetBaseA"
  "rchive\0222\n\005super\030\001 \002(\0132#.TST.CommandMutat"
  "eCellFormatArchive\022\014\n\004base\030\002 \002(\r\"f\n\033Comm"
  "andSetBasePlacesArchive\0222\n\005super\030\001 \002(\0132#"
  ".TST.CommandMutateCellFormatArchive\022\023\n\013b"
  "ase_places\030\002 \002(\r\"t\n!CommandSetBaseUseMin"
  "usSignArchive\0222\n\005super\030\001 \002(\0132#.TST.Comma"
  "ndMutateCellFormatArchive\022\033\n\023base_use_mi"
  "nus_sign\030\002 \002(\010\"j\n\035CommandSetCurrencyCode"
  "Archive\0222\n\005super\030\001 \002(\0132#.TST.CommandMuta"
  "teCellFormatArchive\022\025\n\rcurrency_code\030\002 \002"
  "(\t\"r\n!CommandSetFractionAccuracyArchive\022"
  "2\n\005super\030\001 \002(\0132#.TST.CommandMutateCellFo"
  "rmatArchive\022\031\n\021fraction_accuracy\030\002 \002(\r\"y"
  "\n$CommandSetNegativeNumberStyleArchive\0222"
  "\n\005super\030\001 \002(\0132#.TST.CommandMutateCellFor"
  "matArchive\022\035\n\025negative_number_style\030\002 \002("
  "\r\"t\n&CommandSetNumberOfDecimalPlacesArch"
  "ive\0222\n\005super\030\001 \002(\0132#.TST.CommandMutateCe"
  "llFormatArchive\022\026\n\016decimal_places\030\002 \002(\r\""
  "\215\001\n\037CommandSetDateTimeFormatArchive\0222\n\005s"
  "uper\030\001 \002(\0132#.TST.CommandMutateCellFormat"
  "Archive\022\032\n\022date_format_string\030\002 \001(\t\022\032\n\022t"
  "ime_format_string\030\003 \001(\t\"\177\n\'CommandSetSho"
  "wThousandsSeparatorArchive\0222\n\005super\030\001 \002("
  "\0132#.TST.CommandMutateCellFormatArchive\022 "
  "\n\030show_thousands_separator\030\002 \002(\010\"w\n#Comm"
  "andSetUseAccountingStyleArchive\0222\n\005super"
  "\030\001 \002(\0132#.TST.CommandMutateCellFormatArch"
  "ive\022\034\n\024use_accounting_style\030\002 \002(\010\"\245\002\n&Co"
  "mmandSetRangeControlMinMaxIncArchive\022\'\n\005"
  "super\030\001 \002(\0132\030.TST.TableCommandArchive\022\017\n"
  "\007minimum\030\002 \001(\001\022\017\n\007maximum\030\003 \001(\001\022\021\n\tincre"
  "ment\030\004 \001(\001\022%\n\rcell_diff_map\030\005 \001(\0132\016.TSP."
  "Reference\022.\n\rcell_uid_list\030\006 \001(\0132\027.TST.C"
  "ellUIDListArchive\022-\n\025inverse_cell_diff_m"
  "ap\030\007 \001(\0132\016.TSP.Reference\022\027\n\017is_first_com"
  "mit\030\010 \002(\010\"\247\002\n\037CommandMoveColumnsOrRowsAr"
  "chive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandA"
  "rchive\022\033\n\010dest_uid\030\002 \002(\0132\t.TSP.UUID\022\016\n\006b"
  "efore\030\003 \002(\010\022 \n\rundo_dest_uid\030\004 \002(\0132\t.TSP"
  ".UUID\022\023\n\013undo_before\030\005 \002(\010\022\027\n\004uids\030\006 \003(\013"
  "2\t.TSP.UUID\022-\n\tdirection\030\007 \002(\0162\032.TST.Tab"
  "leDimensionArchive\022/\n\027formula_rewrite_co"
  "mmand\030\010 \001(\0132\016.TSP.Reference\"\260\001\n\022CommandS"
  "ortArchive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCom"
  "mandArchive\022 \n\rfrom_row_uids\030\002 \003(\0132\t.TSP"
  ".UUID\022\036\n\013to_row_uids\030\003 \003(\0132\t.TSP.UUID\022/\n"
  "\027formula_rewrite_command\030\004 \001(\0132\016.TSP.Ref"
  "erence\"\205\002\n)CommandRewriteFormulasForTran"
  "sposeArchive\022\'\n\005super\030\001 \002(\0132\030.TST.TableC"
  "ommandArchive\0225\n\014rewrite_spec\030\002 \002(\0132\037.TS"
  "CE.FormulaRewriteSpecArchive\0229\n\023formulas"
  "_to_rewrite\030\003 \002(\0132\034.TSCE.FormulasForUndo"
  "Archive\022=\n\016warningset_map\030\004 \001(\0132%.TST.Im"
  "portWarningSetByCellRefArchive\"\315\001\n0Comma"
  "ndRewriteTableFormulasForRewriteSpecArch"
  "ive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArc"
  "hive\0225\n\014rewrite_spec\030\002 \002(\0132\037.TSCE.Formul"
  "aRewriteSpecArchive\0229\n\023formulas_to_rewri"
  "te\030\003 \002(\0132\034.TSCE.FormulasForUndoArchive\"\277"
  "\001\n\"CommandRewriteMergeFormulasArchive\022\'\n"
  "\005super\030\001 \002(\0132\030.TST.TableCommandArchive\0225"
  "\n\014rewrite_spec\030\002 \002(\0132\037.TSCE.FormulaRewri"
  "teSpecArchive\0229\n\023formulas_to_rewrite\030\003 \002"
  "(\0132\034.TSCE.FormulasForUndoArchive\"\302\001\n%Com"
  "mandRewriteCategoryFormulasArchive\022\'\n\005su"
  "per\030\001 \002(\0132\030.TST.TableCommandArchive\0225\n\014r"
  "ewrite_spec\030\002 \002(\0132\037.TSCE.FormulaRewriteS"
  "pecArchive\0229\n\023formulas_to_rewrite\030\003 \002(\0132"
  "\034.TSCE.FormulasForUndoArchive\"\\\n1Command"
  "RewriteFilterFormulasForTableResizeArchi"
  "ve\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArch"
  "ive\"\267\001\n1CommandRewriteFilterFormulasForR"
  "ewriteSpecArchive\022\'\n\005super\030\001 \002(\0132\030.TST.T"
  "ableCommandArchive\022\"\n\nfilter_set\030\002 \002(\0132\016"
  ".TSP.Reference\0225\n\014rewrite_spec\030\003 \002(\0132\037.T"
  "SCE.FormulaRewriteSpecArchive\"\230\002\n4Comman"
  "dRewriteConditionalStylesForRewriteSpecA"
  "rchive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommand"
  "Archive\0225\n\014rewrite_spec\030\002 \002(\0132\037.TSCE.For"
  "mulaRewriteSpecArchive\0229\n\023formulas_to_re"
  "write\030\003 \001(\0132\034.TSCE.FormulasForUndoArchiv"
  "e\022E\n\026conditional_style_sets\030\004 \001(\0132%.TSCE"
  ".ExpandedCellRefObjectMapArchive\"\222\002\n\023Com"
  "mandMergeArchive\022\'\n\005super\030\001 \002(\0132\030.TST.Ta"
  "bleCommandArchive\022.\n\rcell_uid_list\030\002 \002(\013"
  "2\027.TST.CellUIDListArchive\022%\n\rundo_cell_m"
  "ap\030\003 \001(\0132\016.TSP.Reference\0224\n\034undo_formula"
  "_rewrite_command\030\004 \001(\0132\016.TSP.Reference\022\034"
  "\n\024merge_owner_rollback\030\005 \001(\r\022\'\n\017commit_c"
  "ell_map\030\006 \001(\0132\016.TSP.Reference\"\202\001\n\032Comman"
  "dInverseMergeArchive\022.\n\005super\030\001 \002(\0132\037.TS"
  "T.CommandApplyCellMapArchive\0224\n\025merge_so"
  "urce_cell_uid\030\002 \002(\0132\025.TSP.UUIDCoordArchi"
  "ve\"\317\001\n\025CommandUnmergeArchive\022\'\n\005super\030\001 "
  "\002(\0132\030.TST.TableCommandArchive\0220\n\022unmerge"
  "_uid_ranges\030\002 \003(\0132\024.TSP.UUIDRectArchive\022"
  "%\n\rundo_cell_map\030\003 \001(\0132\016.TSP.Reference\0224"
  "\n\034undo_formula_rewrite_command\030\004 \001(\0132\016.T"
  "SP.Reference\"\325\001\n#CommandChooseTableIdRem"
  "apperArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comman"
  "dArchive\0227\n\017table_id_mapper\030\002 \002(\0132\036.TST."
  "MultiTableRemapperArchive\0228\n formula_rew"
  "rite_command_for_undo\030\003 \001(\0132\016.TSP.Refere"
  "nce\022\027\n\017apply_and_clear\030\004 \002(\010\"\342\010\n(Command"
  "CategorySetGroupingColumnsArchive\022\'\n\005sup"
  "er\030\001 \002(\0132\030.TST.TableCommandArchive\022\034\n\024ne"
  "w_enabled_changing\030\002 \002(\005\022\034\n\024old_enabled_"
  "changing\030\003 \002(\005\0229\n\024new_grouping_columns\030\004"
  " \002(\0132\033.TST.GroupColumnListArchive\0229\n\024old"
  "_grouping_columns\030\005 \001(\0132\033.TST.GroupColum"
  "nListArchive\022\032\n\022restore_base_order\030\006 \002(\010"
  "\022!\n\016base_row_order\030\007 \003(\0132\t.TSP.UUID\022\037\n\027u"
  "ndo_restore_base_order\030\010 \002(\010\022&\n\023undo_bas"
  "e_row_order\030\t \003(\0132\t.TSP.UUID\022\032\n\022restore_"
  "view_order\030\n \002(\010\022!\n\016view_row_order\030\013 \003(\013"
  "2\t.TSP.UUID\022\037\n\027undo_restore_view_order\030\014"
  " \002(\010\022&\n\023undo_view_row_order\030\r \003(\0132\t.TSP."
  "UUID\022!\n\016collapse_state\030\016 \003(\0132\t.TSP.UUID\022"
  "&\n\023undo_collapse_state\030\017 \003(\0132\t.TSP.UUID\022"
  "H\n\024summary_change_state\030\020 \001(\0132*.TST.Summ"
  "aryModelGroupByChangeStateArchive\022M\n\031und"
  "o_summary_change_state\030\021 \001(\0132*.TST.Summa"
  "ryModelGroupByChangeStateArchive\022>\n\025new_"
  "column_aggregates\030\022 \001(\0132\037.TST.ColumnAggr"
  "egateListArchive\022>\n\025old_column_aggregate"
  "s\030\023 \001(\0132\037.TST.ColumnAggregateListArchive"
  "\0228\n undo_set_enabled_rewrite_command\030\024 \001"
  "(\0132\016.TSP.Reference\0228\n undo_set_columns_r"
  "ewrite_command\030\025 \001(\0132\016.TSP.Reference\022 \n\030"
  "force_restore_all_states\030\026 \002(\010\022%\n\rcell_d"
  "iff_map\030\027 \001(\0132\016.TSP.Reference\022*\n\022undo_ce"
  "ll_diff_map\030\030 \001(\0132\016.TSP.Reference\"\263\002\n!Fo"
  "rmulaEditingCommandGroupArchive\0222\n\005super"
  "\030\001 \002(\0132#.TSK.ProgressiveCommandGroupArch"
  "ive\022\032\n\022undoSelectionValid\030\002 \002(\010\022\032\n\022undoS"
  "electionStart\030\003 \002(\r\022\033\n\023undoSelectionLeng"
  "th\030\004 \002(\r\022\027\n\017undoActiveToken\030\005 \002(\r\022\032\n\022red"
  "oSelectionValid\030\006 \002(\010\022\032\n\022redoSelectionSt"
  "art\030\007 \002(\r\022\033\n\023redoSelectionLength\030\010 \002(\r\022\027"
  "\n\017redoActiveToken\030\t \002(\r\"\226\001\n-FormulaEditi"
  "ngCommandSelectionBehaviorArchive\0223\n\005sup"
  "er\030\001 \002(\0132$.TSK.CommandSelectionBehaviorA"
  "rchive\022\027\n\017undoActiveToken\030\002 \001(\r\022\027\n\017redoA"
  "ctiveToken\030\003 \001(\r\"\313\001\n$TableCommandSelecti"
  "onBehaviorArchive\0223\n\005super\030\001 \002(\0132$.TSK.C"
  "ommandSelectionBehaviorArchive\022\"\n\ntable_"
  "info\030\002 \001(\0132\016.TSP.Reference\022-\n\032last_colum"
  "n_uid_hit_by_tap\030\003 \001(\0132\t.TSP.UUID\022\033\n\023inv"
  "alidate_comments\030\004 \001(\r\"\266\002\n\036CommandApplyC"
  "ellCommentArchive\022\'\n\005super\030\001 \002(\0132\030.TST.T"
  "ableCommandArchive\022\'\n\010cell_uid\030\002 \002(\0132\025.T"
  "SP.UUIDCoordArchive\022+\n\023old_comment_stora"
  "ge\030\003 \001(\0132\016.TSP.Reference\022+\n\023new_comment_"
  "storage\030\004 \001(\0132\016.TSP.Reference\0223\n\017forward"
  "_variant\030\005 \001(\0162\032.TSD.CommentCommandVaria"
  "nt\0223\n\017inverse_variant\030\006 \001(\0162\032.TSD.Commen"
  "tCommandVariant\"`\n$CommandSetFormulaToke"
  "nizationArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Com"
  "mandArchive\022\024\n\014tokenization\030\002 \002(\010\"\363\001\n\036Co"
  "mmandSetFilterSetTypeArchive\022\'\n\005super\030\001 "
  "\002(\0132\030.TST.TableCommandArchive\022@\n\023old_fil"
  "ter_set_type\030\002 \001(\0162#.TST.FilterSetArchiv"
  "e.FilterSetType\022@\n\023new_filter_set_type\030\003"
  " \002(\0162#.TST.FilterSetArchive.FilterSetTyp"
  "e\022$\n\021rollback_uid_list\030\004 \003(\0132\t.TSP.UUID\""
  "\233\001\n\032CommandSetTextStyleArchive\022\'\n\005super\030"
  "\001 \002(\0132\030.TST.TableCommandArchive\022%\n\rcell_"
  "diff_map\030\002 \002(\0132\016.TSP.Reference\022-\n\025invers"
  "e_cell_diff_map\030\003 \001(\0132\016.TSP.Reference\"\301\001"
  "\n$CommandSetTextStylePropertiesArchive\022\'"
  "\n\005super\030\001 \002(\0132\030.TST.TableCommandArchive\022"
  "%\n\rcell_diff_map\030\002 \002(\0132\016.TSP.Reference\022\032"
  "\n\022cell_was_rich_text\030\003 \003(\010\022-\n\025inverse_ce"
  "ll_diff_map\030\004 \001(\0132\016.TSP.Reference\"i\n\036Com"
  "mandJustForNotifyingArchive\022\'\n\005super\030\001 \002"
  "(\0132\030.TST.TableCommandArchive\022\036\n\026change_d"
  "escriptor_type\030\002 \002(\r\"\330\001\n CommandSetStora"
  "geLanguageArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.C"
  "ommandArchive\022\037\n\007storage\030\002 \002(\0132\016.TSP.Ref"
  "erence\022\020\n\010language\030\003 \002(\t\022\026\n\016range_locati"
  "on\030\004 \002(\r\022\024\n\014range_length\030\005 \002(\r\022/\n\020undo_t"
  "ransaction\030\006 \001(\0132\025.TSWP.UndoTransaction\""
  "\255\001\n\032CommandSetSortOrderArchive\022\'\n\005super\030"
  "\001 \002(\0132\030.TST.TableCommandArchive\0222\n\016old_s"
  "ort_order\030\002 \001(\0132\032.TST.TableSortOrderArch"
  "ive\0222\n\016new_sort_order\030\003 \001(\0132\032.TST.TableS"
  "ortOrderArchive\"\277\001\n,CommandRewriteSortOr"
  "derForTableResizeArchive\022\'\n\005super\030\001 \002(\0132"
  "\030.TST.TableCommandArchive\0222\n\016old_sort_or"
  "der\030\002 \001(\0132\032.TST.TableSortOrderArchive\0222\n"
  "\016new_sort_order\030\003 \001(\0132\032.TST.TableSortOrd"
  "erArchive\"\366\001\n,CommandRewriteSortOrderFor"
  "RewriteSpecArchive\022\'\n\005super\030\001 \002(\0132\030.TST."
  "TableCommandArchive\0225\n\014rewrite_spec\030\002 \002("
  "\0132\037.TSCE.FormulaRewriteSpecArchive\0222\n\016ol"
  "d_sort_order\030\003 \001(\0132\032.TST.TableSortOrderA"
  "rchive\0222\n\016new_sort_order\030\004 \001(\0132\032.TST.Tab"
  "leSortOrderArchive\"\273\001\n\032CommandSetFilterS"
  "etArchive\022\'\n\005super\030\001 \002(\0132\030.TST.TableComm"
  "andArchive\022&\n\016new_filter_set\030\002 \002(\0132\016.TSP"
  ".Reference\022&\n\016old_filter_set\030\003 \001(\0132\016.TSP"
  ".Reference\022$\n\021rollback_uid_list\030\004 \003(\0132\t."
  "TSP.UUID\"l\n\033ColumnRowRestoreDataArchive\022"
  "\033\n\010uid_list\030\001 \003(\0132\t.TSP.UUID\0220\n\tmetadata"
  "s\030\002 \003(\0132\035.TST.ColumnRowMetadataArchive\"\305"
  "\004\n\034CommandTransposeTableArchive\022\'\n\005super"
  "\030\001 \002(\0132\030.TST.TableCommandArchive\0224\n\024orig"
  "inal_table_range\030\002 \002(\0132\026.TST.ExpandedCel"
  "lRange\022)\n\021original_cell_map\030\003 \002(\0132\016.TSP."
  "Reference\022!\n\031original_footer_row_count\030\004"
  " \002(\r\022\036\n\026original_column_widths\030\005 \003(\002\022\034\n\024"
  "original_row_heights\030\006 \003(\002\022-\n\025ineligible"
  "_merge_list\030\007 \003(\0132\016.TST.CellRange\022+\n\023tra"
  "nsposed_cell_map\030\010 \002(\0132\016.TSP.Reference\0224"
  "\n\034undo_formula_rewrite_command\030\t \001(\0132\016.T"
  "SP.Reference\022-\n\025rich_text_subcommands\030\n "
  "\001(\0132\016.TSP.Reference\022=\n\023column_restore_da"
  "ta\030\013 \001(\0132 .TST.ColumnRowRestoreDataArchi"
  "ve\022:\n\020row_restore_data\030\014 \001(\0132 .TST.Colum"
  "nRowRestoreDataArchive\"\316\001\n+CommandSetStr"
  "ucturedTextImportRecordArchive\022\'\n\005super\030"
  "\001 \002(\0132\030.TST.TableCommandArchive\022:\n\021new_i"
  "mport_record\030\002 \001(\0132\037.TST.StructuredTextI"
  "mportRecord\022:\n\021old_import_record\030\003 \001(\0132\037"
  ".TST.StructuredTextImportRecord\"\231\002\n)Comm"
  "andCategoryCollapseExpandGroupArchive\022\'\n"
  "\005super\030\001 \002(\0132\030.TST.TableCommandArchive\022\025"
  "\n\ris_collapsing\030\002 \002(\010\0225\n\020grouping_column"
  "s\030\003 \002(\0132\033.TST.GroupColumnListArchive\0227\n\016"
  "collapse_state\030\004 \002(\0132\037.TST.ExpandCollaps"
  "eStateArchive\022<\n\023undo_collapse_state\030\005 \001"
  "(\0132\037.TST.ExpandCollapseStateArchive\"\275\001\n)"
  "CommandCategoryChangeSummaryAggregateTyp"
  "e\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArchi"
  "ve\022\026\n\016aggregate_type\030\002 \002(\r\022\033\n\023undo_aggre"
  "gate_type\030\003 \002(\r\022\035\n\ncolumn_uid\030\004 \002(\0132\t.TS"
  "P.UUID\022\023\n\013group_level\030\005 \002(\021\"\245\001\n$CommandC"
  "ategorySetLabelRowVisibility\022\'\n\005super\030\001 "
  "\002(\0132\030.TST.TableCommandArchive\022\023\n\013group_l"
  "evel\030\002 \002(\r\022\034\n\024label_row_visibility\030\003 \002(\r"
  "\022!\n\031undo_label_row_visibility\030\004 \002(\r\"\252\002\n#"
  "CommandCategoryWillChangeGroupValue\022\'\n\005s"
  "uper\030\001 \002(\0132\030.TST.TableCommandArchive\022!\n\016"
  "group_node_uid\030\002 \002(\0132\t.TSP.UUID\022&\n\023undo_"
  "group_node_uid\030\003 \001(\0132\t.TSP.UUID\022+\n\013group"
  "_value\030\004 \001(\0132\026.TSCE.CellValueArchive\0220\n\020"
  "undo_group_value\030\005 \001(\0132\026.TSCE.CellValueA"
  "rchive\0220\n\030rewrite_command_for_undo\030\006 \001(\013"
  "2\016.TSP.Reference\"S\n%IdempotentSelectionT"
  "ransformerArchive\022*\n\022archived_selection\030"
  "\001 \002(\0132\016.TSP.Reference\"\270\001\n\035WPSelectionTra"
  "nsformerArchive\022;\n\005super\030\001 \002(\0132,.TST.Tab"
  "leSubSelectionTransformerBaseArchive\022*\n\022"
  "archived_selection\030\002 \002(\0132\016.TSP.Reference"
  "\022.\n\017origin_cell_uid\030\003 \001(\0132\025.TSP.UUIDCoor"
  "dArchive\"T\n\'TableSubSelectionTransformer"
  "BaseArchive\022)\n\022table_info_id_path\030\001 \002(\0132"
  "\r.TSP.UUIDPath\"c\n$TableNameSelectionTran"
  "sformerArchive\022;\n\005super\030\001 \002(\0132,.TST.Tabl"
  "eSubSelectionTransformerBaseArchive\"\366\001\n&"
  "ControlCellSelectionTransformerArchive\022;"
  "\n\005super\030\001 \002(\0132,.TST.TableSubSelectionTra"
  "nsformerBaseArchive\022*\n\tcell_uids\030\002 \001(\0132\027"
  ".TST.CellUIDListArchive\022.\n\017origin_cell_u"
  "id\030\003 \001(\0132\025.TSP.UUIDCoordArchive\0223\n\016origi"
  "n_cell_id\030\004 \002(\0132\033.TSCE.CellCoordinateArc"
  "hive\"\364\001\n$StockCellSelectionTransformerAr"
  "chive\022;\n\005super\030\001 \002(\0132,.TST.TableSubSelec"
  "tionTransformerBaseArchive\022*\n\tcell_uids\030"
  "\002 \001(\0132\027.TST.CellUIDListArchive\022.\n\017origin"
  "_cell_uid\030\003 \001(\0132\025.TSP.UUIDCoordArchive\0223"
  "\n\016origin_cell_id\030\004 \002(\0132\033.TSCE.CellCoordi"
  "nateArchive\"\234\002\n!RegionSelectionTransform"
  "erArchive\022;\n\005super\030\001 \002(\0132,.TST.TableSubS"
  "electionTransformerBaseArchive\022*\n\tcell_u"
  "ids\030\002 \001(\0132\027.TST.CellUIDListArchive\022.\n\017or"
  "igin_cell_uid\030\003 \001(\0132\025.TSP.UUIDCoordArchi"
  "ve\022.\n\017anchor_cell_uid\030\004 \002(\0132\025.TSP.UUIDCo"
  "ordArchive\022.\n\017cursor_cell_uid\030\005 \002(\0132\025.TS"
  "P.UUIDCoordArchive\"\214\001\n!StrokeSelectionTr"
  "ansformerArchive\022;\n\005super\030\001 \002(\0132,.TST.Ta"
  "bleSubSelectionTransformerBaseArchive\022*\n"
  "\022archived_selection\030\002 \002(\0132\016.TSP.Referenc"
  "e\"\267\001\n$RowColumnSelectionTransformerArchi"
  "ve\022;\n\005super\030\001 \002(\0132,.TST.TableSubSelectio"
  "nTransformerBaseArchive\0221\n\016selection_typ"
  "e\030\002 \002(\0162\031.TST.SelectionTypeArchive\022\037\n\014ro"
  "w_col_uids\030\003 \003(\0132\t.TSP.UUID\"\273\002\n\036CommandC"
  "ategoryMoveRowsArchive\022\'\n\005super\030\001 \002(\0132\030."
  "TST.TableCommandArchive\022\023\n\013action_type\030\002"
  " \002(\r\022%\n\022category_row_order\030\003 \003(\0132\t.TSP.U"
  "UID\022*\n\027undo_category_row_order\030\004 \003(\0132\t.T"
  "SP.UUID\022%\n\rcell_diff_map\030\005 \002(\0132\016.TSP.Ref"
  "erence\022*\n\022undo_cell_diff_map\030\006 \001(\0132\016.TSP"
  ".Reference\0225\n\020grouping_columns\030\007 \001(\0132\033.T"
  "ST.GroupColumnListArchive\"\313\001\n1CommandRew"
  "riteHiddenStatesForGroupByChangeArchive\022"
  "\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArchive"
  "\0223\n\017group_by_change\030\002 \002(\0132\032.TSCE.GroupBy"
  "ChangeArchive\0228\n\017collapsed_state\030\003 \001(\0132\037"
  ".TST.ExpandCollapseStateArchive\"\360\002\n-Comm"
  "andRewritePencilAnnotationFormulasArchiv"
  "e\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArchi"
  "ve\0225\n\014rewrite_spec\030\002 \002(\0132\037.TSCE.FormulaR"
  "ewriteSpecArchive\0229\n\023formulas_to_rewrite"
  "\030\003 \002(\0132\034.TSCE.FormulasForUndoArchive\022_\n\024"
  "annotations_for_undo\030\004 \003(\0132A.TST.Command"
  "RewritePencilAnnotationFormulasArchive.A"
  "nnotationPair\032C\n\016AnnotationPair\022\r\n\005index"
  "\030\001 \002(\004\022\"\n\nannotation\030\002 \002(\0132\016.TSP.Referen"
  "ce*i\n\tTableArea\022\021\n\rTableAreaBody\020\001\022\026\n\022Ta"
  "bleAreaHeaderRow\020\002\022\031\n\025TableAreaHeaderCol"
  "umn\020\003\022\026\n\022TableAreaFooterRow\020\004*\213\002\n\023TableA"
  "reaTransition\022&\n\"TableAreaTransitionHead"
  "erRowToBody\020\001\022&\n\"TableAreaTransitionBody"
  "ToHeaderRow\020\002\022&\n\"TableAreaTransitionFoot"
  "erRowToBody\020\003\022&\n\"TableAreaTransitionBody"
  "ToFooterRow\020\004\022)\n%TableAreaTransitionHead"
  "erColumnToBody\020\005\022)\n%TableAreaTransitionB"
  "odyToHeaderColumn\020\006*\272\001\n\021ColumnRowTypeEnu"
  "m\022\027\n\023ColumnRowTypeAnchor\020\000\022\032\n\026ColumnRowT"
  "ypeHeaderRow\020\001\022\030\n\024ColumnRowTypeBodyRow\020\002"
  "\022\032\n\026ColumnRowTypeFooterRow\020\003\022\035\n\031ColumnRo"
  "wTypeHeaderColumn\020\004\022\033\n\027ColumnRowTypeBody"
  "Column\020\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TSTCommandArchives_2eproto_deps[9] = {
  &::descriptor_table_TSCEArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSDCommandArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSTArchives_2eproto,
  &::descriptor_table_TSTArchives_2esos_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TSTCommandArchives_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSTCommandArchives_2eproto = {
  false, false, 24088, descriptor_table_protodef_TSTCommandArchives_2eproto, "TSTCommandArchives.proto", 
  &descriptor_table_TSTCommandArchives_2eproto_once, descriptor_table_TSTCommandArchives_2eproto_deps, 9, 100,
  schemas, file_default_instances, TableStruct_TSTCommandArchives_2eproto::offsets,
  file_level_metadata_TSTCommandArchives_2eproto, file_level_enum_descriptors_TSTCommandArchives_2eproto, file_level_service_descriptors_TSTCommandArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TSTCommandArchives_2eproto_getter() {
  return &descriptor_table_TSTCommandArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TSTCommandArchives_2eproto(&descriptor_table_TSTCommandArchives_2eproto);
namespace TST {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableArea_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTCommandArchives_2eproto);
  return file_level_enum_descriptors_TSTCommandArchives_2eproto[0];
}
bool TableArea_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableAreaTransition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTCommandArchives_2eproto);
  return file_level_enum_descriptors_TSTCommandArchives_2eproto[1];
}
bool TableAreaTransition_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ColumnRowTypeEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTCommandArchives_2eproto);
  return file_level_enum_descriptors_TSTCommandArchives_2eproto[2];
}
bool ColumnRowTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TableCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const TableCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDPath& table_info_id_path(const TableCommandArchive* msg);
  static void set_has_table_info_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_commandname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& default_cell_styles_container(const TableCommandArchive* msg);
  static void set_has_default_cell_styles_container(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_random_seed_lo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_random_seed_hi(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_inverse(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_old_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_old_random_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSK::CommandArchive&
TableCommandArchive::_Internal::super(const TableCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
TableCommandArchive::_Internal::table_info_id_path(const TableCommandArchive* msg) {
  return *msg->table_info_id_path_;
}
const ::TSP::Reference&
TableCommandArchive::_Internal::default_cell_styles_container(const TableCommandArchive* msg) {
  return *msg->default_cell_styles_container_;
}
void TableCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TableCommandArchive::clear_table_info_id_path() {
  if (table_info_id_path_ != nullptr) table_info_id_path_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void TableCommandArchive::clear_default_cell_styles_container() {
  if (default_cell_styles_container_ != nullptr) default_cell_styles_container_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
TableCommandArchive::TableCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TableCommandArchive)
}
TableCommandArchive::TableCommandArchive(const TableCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  commandname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_commandname()) {
    commandname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_commandname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_table_info_id_path()) {
    table_info_id_path_ = new ::TSP::UUIDPath(*from.table_info_id_path_);
  } else {
    table_info_id_path_ = nullptr;
  }
  if (from._internal_has_default_cell_styles_container()) {
    default_cell_styles_container_ = new ::TSP::Reference(*from.default_cell_styles_container_);
  } else {
    default_cell_styles_container_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_inverse_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(is_inverse_));
  // @@protoc_insertion_point(copy_constructor:TST.TableCommandArchive)
}

inline void TableCommandArchive::SharedCtor() {
commandname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_inverse_) -
    reinterpret_cast<char*>(&super_)) + sizeof(is_inverse_));
}

TableCommandArchive::~TableCommandArchive() {
  // @@protoc_insertion_point(destructor:TST.TableCommandArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  commandname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete table_info_id_path_;
  if (this != internal_default_instance()) delete default_cell_styles_container_;
}

void TableCommandArchive::ArenaDtor(void* object) {
  TableCommandArchive* _this = reinterpret_cast< TableCommandArchive* >(object);
  (void)_this;
}
void TableCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      commandname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(table_info_id_path_ != nullptr);
      table_info_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(default_cell_styles_container_ != nullptr);
      default_cell_styles_container_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&old_timestamp_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(old_timestamp_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&old_random_seed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_inverse_) -
        reinterpret_cast<char*>(&old_random_seed_)) + sizeof(is_inverse_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDPath table_info_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string commandname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_commandname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.TableCommandArchive.commandname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference default_cell_styles_container = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_cell_styles_container(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 random_seed_lo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_random_seed_lo(&has_bits);
          random_seed_lo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 random_seed_hi = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_random_seed_hi(&has_bits);
          random_seed_hi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_inverse = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_inverse(&has_bits);
          is_inverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double old_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_old_timestamp(&has_bits);
          old_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 old_random_seed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_old_random_seed(&has_bits);
          old_random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUIDPath table_info_id_path = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::table_info_id_path(this), target, stream);
  }

  // optional string commandname = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_commandname().data(), static_cast<int>(this->_internal_commandname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.TableCommandArchive.commandname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_commandname(), target);
  }

  // optional .TSP.Reference default_cell_styles_container = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::default_cell_styles_container(this), target, stream);
  }

  // optional double timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_timestamp(), target);
  }

  // optional uint32 random_seed_lo = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_random_seed_lo(), target);
  }

  // optional uint32 random_seed_hi = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_random_seed_hi(), target);
  }

  // optional bool is_inverse = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_inverse(), target);
  }

  // optional double old_timestamp = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_old_timestamp(), target);
  }

  // optional uint64 old_random_seed = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_old_random_seed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableCommandArchive)
  return target;
}

size_t TableCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_table_info_id_path()) {
    // required .TSP.UUIDPath table_info_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_info_id_path_);
  }

  return total_size;
}
size_t TableCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableCommandArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUIDPath table_info_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_info_id_path_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string commandname = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_commandname());
  }

  if (cached_has_bits & 0x000000f8u) {
    // optional .TSP.Reference default_cell_styles_container = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_cell_styles_container_);
    }

    // optional double timestamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 random_seed_lo = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_random_seed_lo());
    }

    // optional uint32 random_seed_hi = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_random_seed_hi());
    }

    // optional double old_timestamp = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 old_random_seed = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_old_random_seed());
    }

    // optional bool is_inverse = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableCommandArchive::GetClassData() const { return &_class_data_; }

void TableCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableCommandArchive *>(to)->MergeFrom(
      static_cast<const TableCommandArchive &>(from));
}


void TableCommandArchive::MergeFrom(const TableCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TableCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_commandname(from._internal_commandname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_table_info_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_table_info_id_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_default_cell_styles_container()->::TSP::Reference::MergeFrom(from._internal_default_cell_styles_container());
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      random_seed_lo_ = from.random_seed_lo_;
    }
    if (cached_has_bits & 0x00000040u) {
      random_seed_hi_ = from.random_seed_hi_;
    }
    if (cached_has_bits & 0x00000080u) {
      old_timestamp_ = from.old_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      old_random_seed_ = from.old_random_seed_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_inverse_ = from.is_inverse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableCommandArchive::CopyFrom(const TableCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_table_info_id_path()) {
    if (!table_info_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_default_cell_styles_container()) {
    if (!default_cell_styles_container_->IsInitialized()) return false;
  }
  return true;
}

void TableCommandArchive::InternalSwap(TableCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &commandname_, GetArenaForAllocation(),
      &other->commandname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableCommandArchive, is_inverse_)
      + sizeof(TableCommandArchive::is_inverse_)
      - PROTOBUF_FIELD_OFFSET(TableCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[0]);
}

// ===================================================================

class CommandApplyCellContentsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandApplyCellContentsArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandApplyCellContentsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandApplyCellContentsArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& rollback_cell_diff_map(const CommandApplyCellContentsArchive* msg);
  static void set_has_rollback_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_action_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandApplyCellContentsArchive::_Internal::super(const CommandApplyCellContentsArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandApplyCellContentsArchive::_Internal::cell_diff_map(const CommandApplyCellContentsArchive* msg) {
  return *msg->cell_diff_map_;
}
const ::TSP::Reference&
CommandApplyCellContentsArchive::_Internal::rollback_cell_diff_map(const CommandApplyCellContentsArchive* msg) {
  return *msg->rollback_cell_diff_map_;
}
void CommandApplyCellContentsArchive::clear_cell_diff_map() {
  if (cell_diff_map_ != nullptr) cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandApplyCellContentsArchive::clear_rollback_cell_diff_map() {
  if (rollback_cell_diff_map_ != nullptr) rollback_cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandApplyCellContentsArchive::clear_custom_format_keys() {
  custom_format_keys_.Clear();
}
CommandApplyCellContentsArchive::CommandApplyCellContentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  custom_format_keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandApplyCellContentsArchive)
}
CommandApplyCellContentsArchive::CommandApplyCellContentsArchive(const CommandApplyCellContentsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      custom_format_keys_(from.custom_format_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_action_string()) {
    action_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_cell_diff_map()) {
    cell_diff_map_ = new ::TSP::Reference(*from.cell_diff_map_);
  } else {
    cell_diff_map_ = nullptr;
  }
  if (from._internal_has_rollback_cell_diff_map()) {
    rollback_cell_diff_map_ = new ::TSP::Reference(*from.rollback_cell_diff_map_);
  } else {
    rollback_cell_diff_map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandApplyCellContentsArchive)
}

inline void CommandApplyCellContentsArchive::SharedCtor() {
action_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rollback_cell_diff_map_) -
    reinterpret_cast<char*>(&super_)) + sizeof(rollback_cell_diff_map_));
}

CommandApplyCellContentsArchive::~CommandApplyCellContentsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandApplyCellContentsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandApplyCellContentsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete cell_diff_map_;
  if (this != internal_default_instance()) delete rollback_cell_diff_map_;
}

void CommandApplyCellContentsArchive::ArenaDtor(void* object) {
  CommandApplyCellContentsArchive* _this = reinterpret_cast< CommandApplyCellContentsArchive* >(object);
  (void)_this;
}
void CommandApplyCellContentsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandApplyCellContentsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandApplyCellContentsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandApplyCellContentsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_format_keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      action_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cell_diff_map_ != nullptr);
      cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rollback_cell_diff_map_ != nullptr);
      rollback_cell_diff_map_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandApplyCellContentsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference cell_diff_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference rollback_cell_diff_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string action_string = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_action_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.CommandApplyCellContentsArchive.action_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandApplyCellContentsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandApplyCellContentsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference cell_diff_map = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cell_diff_map(this), target, stream);
  }

  // optional .TSP.Reference rollback_cell_diff_map = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rollback_cell_diff_map(this), target, stream);
  }

  // repeated .TSP.UUID custom_format_keys = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_format_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_custom_format_keys(i), target, stream);
  }

  // optional string action_string = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action_string().data(), static_cast<int>(this->_internal_action_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CommandApplyCellContentsArchive.action_string");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_action_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandApplyCellContentsArchive)
  return target;
}

size_t CommandApplyCellContentsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandApplyCellContentsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_cell_diff_map()) {
    // required .TSP.Reference cell_diff_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_diff_map_);
  }

  return total_size;
}
size_t CommandApplyCellContentsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandApplyCellContentsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference cell_diff_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_diff_map_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID custom_format_keys = 4;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string action_string = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_string());
  }

  // optional .TSP.Reference rollback_cell_diff_map = 3;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rollback_cell_diff_map_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandApplyCellContentsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandApplyCellContentsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandApplyCellContentsArchive::GetClassData() const { return &_class_data_; }

void CommandApplyCellContentsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandApplyCellContentsArchive *>(to)->MergeFrom(
      static_cast<const CommandApplyCellContentsArchive &>(from));
}


void CommandApplyCellContentsArchive::MergeFrom(const CommandApplyCellContentsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandApplyCellContentsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_format_keys_.MergeFrom(from.custom_format_keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_action_string(from._internal_action_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rollback_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_rollback_cell_diff_map());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandApplyCellContentsArchive::CopyFrom(const CommandApplyCellContentsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandApplyCellContentsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyCellContentsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(custom_format_keys_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_rollback_cell_diff_map()) {
    if (!rollback_cell_diff_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandApplyCellContentsArchive::InternalSwap(CommandApplyCellContentsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  custom_format_keys_.InternalSwap(&other->custom_format_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_string_, GetArenaForAllocation(),
      &other->action_string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandApplyCellContentsArchive, rollback_cell_diff_map_)
      + sizeof(CommandApplyCellContentsArchive::rollback_cell_diff_map_)
      - PROTOBUF_FIELD_OFFSET(CommandApplyCellContentsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandApplyCellContentsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[1]);
}

// ===================================================================

class CommandApplyCellDiffMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandApplyCellDiffMapArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandApplyCellDiffMapArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandApplyCellDiffMapArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_should_allow_merge_fragments(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& inverse_cell_diff_map(const CommandApplyCellDiffMapArchive* msg);
  static void set_has_inverse_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandApplyCellDiffMapArchive::_Internal::super(const CommandApplyCellDiffMapArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandApplyCellDiffMapArchive::_Internal::cell_diff_map(const CommandApplyCellDiffMapArchive* msg) {
  return *msg->cell_diff_map_;
}
const ::TSP::Reference&
CommandApplyCellDiffMapArchive::_Internal::inverse_cell_diff_map(const CommandApplyCellDiffMapArchive* msg) {
  return *msg->inverse_cell_diff_map_;
}
void CommandApplyCellDiffMapArchive::clear_cell_diff_map() {
  if (cell_diff_map_ != nullptr) cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandApplyCellDiffMapArchive::clear_inverse_cell_diff_map() {
  if (inverse_cell_diff_map_ != nullptr) inverse_cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandApplyCellDiffMapArchive::clear_custom_format_keys() {
  custom_format_keys_.Clear();
}
CommandApplyCellDiffMapArchive::CommandApplyCellDiffMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  custom_format_keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandApplyCellDiffMapArchive)
}
CommandApplyCellDiffMapArchive::CommandApplyCellDiffMapArchive(const CommandApplyCellDiffMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      custom_format_keys_(from.custom_format_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_cell_diff_map()) {
    cell_diff_map_ = new ::TSP::Reference(*from.cell_diff_map_);
  } else {
    cell_diff_map_ = nullptr;
  }
  if (from._internal_has_inverse_cell_diff_map()) {
    inverse_cell_diff_map_ = new ::TSP::Reference(*from.inverse_cell_diff_map_);
  } else {
    inverse_cell_diff_map_ = nullptr;
  }
  should_allow_merge_fragments_ = from.should_allow_merge_fragments_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandApplyCellDiffMapArchive)
}

inline void CommandApplyCellDiffMapArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&should_allow_merge_fragments_) -
    reinterpret_cast<char*>(&super_)) + sizeof(should_allow_merge_fragments_));
}

CommandApplyCellDiffMapArchive::~CommandApplyCellDiffMapArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandApplyCellDiffMapArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandApplyCellDiffMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete cell_diff_map_;
  if (this != internal_default_instance()) delete inverse_cell_diff_map_;
}

void CommandApplyCellDiffMapArchive::ArenaDtor(void* object) {
  CommandApplyCellDiffMapArchive* _this = reinterpret_cast< CommandApplyCellDiffMapArchive* >(object);
  (void)_this;
}
void CommandApplyCellDiffMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandApplyCellDiffMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandApplyCellDiffMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandApplyCellDiffMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_format_keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_diff_map_ != nullptr);
      cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(inverse_cell_diff_map_ != nullptr);
      inverse_cell_diff_map_->Clear();
    }
  }
  should_allow_merge_fragments_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandApplyCellDiffMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference cell_diff_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool should_allow_merge_fragments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_should_allow_merge_fragments(&has_bits);
          should_allow_merge_fragments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference inverse_cell_diff_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandApplyCellDiffMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandApplyCellDiffMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference cell_diff_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cell_diff_map(this), target, stream);
  }

  // required bool should_allow_merge_fragments = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_should_allow_merge_fragments(), target);
  }

  // optional .TSP.Reference inverse_cell_diff_map = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::inverse_cell_diff_map(this), target, stream);
  }

  // repeated .TSP.UUID custom_format_keys = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_format_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_custom_format_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandApplyCellDiffMapArchive)
  return target;
}

size_t CommandApplyCellDiffMapArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandApplyCellDiffMapArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_cell_diff_map()) {
    // required .TSP.Reference cell_diff_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_diff_map_);
  }

  if (_internal_has_should_allow_merge_fragments()) {
    // required bool should_allow_merge_fragments = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandApplyCellDiffMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandApplyCellDiffMapArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference cell_diff_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_diff_map_);

    // required bool should_allow_merge_fragments = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID custom_format_keys = 5;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference inverse_cell_diff_map = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inverse_cell_diff_map_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandApplyCellDiffMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandApplyCellDiffMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandApplyCellDiffMapArchive::GetClassData() const { return &_class_data_; }

void CommandApplyCellDiffMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandApplyCellDiffMapArchive *>(to)->MergeFrom(
      static_cast<const CommandApplyCellDiffMapArchive &>(from));
}


void CommandApplyCellDiffMapArchive::MergeFrom(const CommandApplyCellDiffMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandApplyCellDiffMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_format_keys_.MergeFrom(from.custom_format_keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_inverse_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_inverse_cell_diff_map());
    }
    if (cached_has_bits & 0x00000008u) {
      should_allow_merge_fragments_ = from.should_allow_merge_fragments_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandApplyCellDiffMapArchive::CopyFrom(const CommandApplyCellDiffMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandApplyCellDiffMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyCellDiffMapArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(custom_format_keys_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_cell_diff_map()) {
    if (!inverse_cell_diff_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandApplyCellDiffMapArchive::InternalSwap(CommandApplyCellDiffMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  custom_format_keys_.InternalSwap(&other->custom_format_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandApplyCellDiffMapArchive, should_allow_merge_fragments_)
      + sizeof(CommandApplyCellDiffMapArchive::should_allow_merge_fragments_)
      - PROTOBUF_FIELD_OFFSET(CommandApplyCellDiffMapArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandApplyCellDiffMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[2]);
}

// ===================================================================

class CommandApplyCellMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandApplyCellMapArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandApplyCellMapArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& redo_cell_map(const CommandApplyCellMapArchive* msg);
  static void set_has_redo_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& undo_cell_map(const CommandApplyCellMapArchive* msg);
  static void set_has_undo_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_formula_rewrite_command(const CommandApplyCellMapArchive* msg);
  static void set_has_undo_formula_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_merge_owner_rollback_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_from_paste(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000023) ^ 0x00000023) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandApplyCellMapArchive::_Internal::super(const CommandApplyCellMapArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandApplyCellMapArchive::_Internal::redo_cell_map(const CommandApplyCellMapArchive* msg) {
  return *msg->redo_cell_map_;
}
const ::TSP::Reference&
CommandApplyCellMapArchive::_Internal::undo_cell_map(const CommandApplyCellMapArchive* msg) {
  return *msg->undo_cell_map_;
}
const ::TSP::Reference&
CommandApplyCellMapArchive::_Internal::undo_formula_rewrite_command(const CommandApplyCellMapArchive* msg) {
  return *msg->undo_formula_rewrite_command_;
}
void CommandApplyCellMapArchive::clear_redo_cell_map() {
  if (redo_cell_map_ != nullptr) redo_cell_map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandApplyCellMapArchive::clear_undo_cell_map() {
  if (undo_cell_map_ != nullptr) undo_cell_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandApplyCellMapArchive::clear_undo_formula_rewrite_command() {
  if (undo_formula_rewrite_command_ != nullptr) undo_formula_rewrite_command_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandApplyCellMapArchive::clear_custom_format_keys() {
  custom_format_keys_.Clear();
}
void CommandApplyCellMapArchive::clear_formula_rewrite_commands() {
  formula_rewrite_commands_.Clear();
}
CommandApplyCellMapArchive::CommandApplyCellMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  custom_format_keys_(arena),
  formula_rewrite_commands_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandApplyCellMapArchive)
}
CommandApplyCellMapArchive::CommandApplyCellMapArchive(const CommandApplyCellMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      custom_format_keys_(from.custom_format_keys_),
      formula_rewrite_commands_(from.formula_rewrite_commands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_redo_cell_map()) {
    redo_cell_map_ = new ::TSP::Reference(*from.redo_cell_map_);
  } else {
    redo_cell_map_ = nullptr;
  }
  if (from._internal_has_undo_cell_map()) {
    undo_cell_map_ = new ::TSP::Reference(*from.undo_cell_map_);
  } else {
    undo_cell_map_ = nullptr;
  }
  if (from._internal_has_undo_formula_rewrite_command()) {
    undo_formula_rewrite_command_ = new ::TSP::Reference(*from.undo_formula_rewrite_command_);
  } else {
    undo_formula_rewrite_command_ = nullptr;
  }
  ::memcpy(&merge_owner_rollback_index_, &from.merge_owner_rollback_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_from_paste_) -
    reinterpret_cast<char*>(&merge_owner_rollback_index_)) + sizeof(is_from_paste_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandApplyCellMapArchive)
}

inline void CommandApplyCellMapArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_from_paste_) -
    reinterpret_cast<char*>(&super_)) + sizeof(is_from_paste_));
}

CommandApplyCellMapArchive::~CommandApplyCellMapArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandApplyCellMapArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandApplyCellMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete redo_cell_map_;
  if (this != internal_default_instance()) delete undo_cell_map_;
  if (this != internal_default_instance()) delete undo_formula_rewrite_command_;
}

void CommandApplyCellMapArchive::ArenaDtor(void* object) {
  CommandApplyCellMapArchive* _this = reinterpret_cast< CommandApplyCellMapArchive* >(object);
  (void)_this;
}
void CommandApplyCellMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandApplyCellMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandApplyCellMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandApplyCellMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_format_keys_.Clear();
  formula_rewrite_commands_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(redo_cell_map_ != nullptr);
      redo_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_cell_map_ != nullptr);
      undo_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undo_formula_rewrite_command_ != nullptr);
      undo_formula_rewrite_command_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&merge_owner_rollback_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_from_paste_) -
        reinterpret_cast<char*>(&merge_owner_rollback_index_)) + sizeof(is_from_paste_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandApplyCellMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference redo_cell_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_redo_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_cell_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_formula_rewrite_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_formula_rewrite_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 merge_owner_rollback_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_merge_owner_rollback_index(&has_bits);
          merge_owner_rollback_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_from_paste = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_from_paste(&has_bits);
          is_from_paste_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference formula_rewrite_commands = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formula_rewrite_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandApplyCellMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandApplyCellMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference redo_cell_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::redo_cell_map(this), target, stream);
  }

  // optional .TSP.Reference undo_cell_map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::undo_cell_map(this), target, stream);
  }

  // optional .TSP.Reference undo_formula_rewrite_command = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::undo_formula_rewrite_command(this), target, stream);
  }

  // repeated .TSP.UUID custom_format_keys = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_format_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_custom_format_keys(i), target, stream);
  }

  // optional uint32 merge_owner_rollback_index = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_merge_owner_rollback_index(), target);
  }

  // required bool is_from_paste = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_from_paste(), target);
  }

  // repeated .TSP.Reference formula_rewrite_commands = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_formula_rewrite_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_formula_rewrite_commands(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandApplyCellMapArchive)
  return target;
}

size_t CommandApplyCellMapArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandApplyCellMapArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_redo_cell_map()) {
    // required .TSP.Reference redo_cell_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *redo_cell_map_);
  }

  if (_internal_has_is_from_paste()) {
    // required bool is_from_paste = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandApplyCellMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandApplyCellMapArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000023) ^ 0x00000023) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference redo_cell_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *redo_cell_map_);

    // required bool is_from_paste = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID custom_format_keys = 5;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference formula_rewrite_commands = 8;
  total_size += 1UL * this->_internal_formula_rewrite_commands_size();
  for (const auto& msg : this->formula_rewrite_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional .TSP.Reference undo_cell_map = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_cell_map_);
    }

    // optional .TSP.Reference undo_formula_rewrite_command = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_formula_rewrite_command_);
    }

    // optional uint32 merge_owner_rollback_index = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_merge_owner_rollback_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandApplyCellMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandApplyCellMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandApplyCellMapArchive::GetClassData() const { return &_class_data_; }

void CommandApplyCellMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandApplyCellMapArchive *>(to)->MergeFrom(
      static_cast<const CommandApplyCellMapArchive &>(from));
}


void CommandApplyCellMapArchive::MergeFrom(const CommandApplyCellMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandApplyCellMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_format_keys_.MergeFrom(from.custom_format_keys_);
  formula_rewrite_commands_.MergeFrom(from.formula_rewrite_commands_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_redo_cell_map()->::TSP::Reference::MergeFrom(from._internal_redo_cell_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_cell_map()->::TSP::Reference::MergeFrom(from._internal_undo_cell_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_undo_formula_rewrite_command()->::TSP::Reference::MergeFrom(from._internal_undo_formula_rewrite_command());
    }
    if (cached_has_bits & 0x00000010u) {
      merge_owner_rollback_index_ = from.merge_owner_rollback_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_from_paste_ = from.is_from_paste_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandApplyCellMapArchive::CopyFrom(const CommandApplyCellMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandApplyCellMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyCellMapArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(custom_format_keys_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(formula_rewrite_commands_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_redo_cell_map()) {
    if (!redo_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_cell_map()) {
    if (!undo_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_formula_rewrite_command()) {
    if (!undo_formula_rewrite_command_->IsInitialized()) return false;
  }
  return true;
}

void CommandApplyCellMapArchive::InternalSwap(CommandApplyCellMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  custom_format_keys_.InternalSwap(&other->custom_format_keys_);
  formula_rewrite_commands_.InternalSwap(&other->formula_rewrite_commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandApplyCellMapArchive, is_from_paste_)
      + sizeof(CommandApplyCellMapArchive::is_from_paste_)
      - PROTOBUF_FIELD_OFFSET(CommandApplyCellMapArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandApplyCellMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[3]);
}

// ===================================================================

class CommandApplyConcurrentCellMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandApplyConcurrentCellMapArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandApplyConcurrentCellMapArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& redo_concurrent_cell_map(const CommandApplyConcurrentCellMapArchive* msg);
  static void set_has_redo_concurrent_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& undo_concurrent_cell_map(const CommandApplyConcurrentCellMapArchive* msg);
  static void set_has_undo_concurrent_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_formula_rewrite_command(const CommandApplyConcurrentCellMapArchive* msg);
  static void set_has_undo_formula_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_merge_owner_rollback_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_from_paste(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000023) ^ 0x00000023) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandApplyConcurrentCellMapArchive::_Internal::super(const CommandApplyConcurrentCellMapArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandApplyConcurrentCellMapArchive::_Internal::redo_concurrent_cell_map(const CommandApplyConcurrentCellMapArchive* msg) {
  return *msg->redo_concurrent_cell_map_;
}
const ::TSP::Reference&
CommandApplyConcurrentCellMapArchive::_Internal::undo_concurrent_cell_map(const CommandApplyConcurrentCellMapArchive* msg) {
  return *msg->undo_concurrent_cell_map_;
}
const ::TSP::Reference&
CommandApplyConcurrentCellMapArchive::_Internal::undo_formula_rewrite_command(const CommandApplyConcurrentCellMapArchive* msg) {
  return *msg->undo_formula_rewrite_command_;
}
void CommandApplyConcurrentCellMapArchive::clear_redo_concurrent_cell_map() {
  if (redo_concurrent_cell_map_ != nullptr) redo_concurrent_cell_map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandApplyConcurrentCellMapArchive::clear_undo_concurrent_cell_map() {
  if (undo_concurrent_cell_map_ != nullptr) undo_concurrent_cell_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandApplyConcurrentCellMapArchive::clear_undo_formula_rewrite_command() {
  if (undo_formula_rewrite_command_ != nullptr) undo_formula_rewrite_command_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandApplyConcurrentCellMapArchive::clear_custom_format_keys() {
  custom_format_keys_.Clear();
}
void CommandApplyConcurrentCellMapArchive::clear_formula_rewrite_commands() {
  formula_rewrite_commands_.Clear();
}
CommandApplyConcurrentCellMapArchive::CommandApplyConcurrentCellMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  custom_format_keys_(arena),
  formula_rewrite_commands_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandApplyConcurrentCellMapArchive)
}
CommandApplyConcurrentCellMapArchive::CommandApplyConcurrentCellMapArchive(const CommandApplyConcurrentCellMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      custom_format_keys_(from.custom_format_keys_),
      formula_rewrite_commands_(from.formula_rewrite_commands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_redo_concurrent_cell_map()) {
    redo_concurrent_cell_map_ = new ::TSP::Reference(*from.redo_concurrent_cell_map_);
  } else {
    redo_concurrent_cell_map_ = nullptr;
  }
  if (from._internal_has_undo_concurrent_cell_map()) {
    undo_concurrent_cell_map_ = new ::TSP::Reference(*from.undo_concurrent_cell_map_);
  } else {
    undo_concurrent_cell_map_ = nullptr;
  }
  if (from._internal_has_undo_formula_rewrite_command()) {
    undo_formula_rewrite_command_ = new ::TSP::Reference(*from.undo_formula_rewrite_command_);
  } else {
    undo_formula_rewrite_command_ = nullptr;
  }
  ::memcpy(&merge_owner_rollback_index_, &from.merge_owner_rollback_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_from_paste_) -
    reinterpret_cast<char*>(&merge_owner_rollback_index_)) + sizeof(is_from_paste_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandApplyConcurrentCellMapArchive)
}

inline void CommandApplyConcurrentCellMapArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_from_paste_) -
    reinterpret_cast<char*>(&super_)) + sizeof(is_from_paste_));
}

CommandApplyConcurrentCellMapArchive::~CommandApplyConcurrentCellMapArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandApplyConcurrentCellMapArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandApplyConcurrentCellMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete redo_concurrent_cell_map_;
  if (this != internal_default_instance()) delete undo_concurrent_cell_map_;
  if (this != internal_default_instance()) delete undo_formula_rewrite_command_;
}

void CommandApplyConcurrentCellMapArchive::ArenaDtor(void* object) {
  CommandApplyConcurrentCellMapArchive* _this = reinterpret_cast< CommandApplyConcurrentCellMapArchive* >(object);
  (void)_this;
}
void CommandApplyConcurrentCellMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandApplyConcurrentCellMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandApplyConcurrentCellMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandApplyConcurrentCellMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_format_keys_.Clear();
  formula_rewrite_commands_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(redo_concurrent_cell_map_ != nullptr);
      redo_concurrent_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_concurrent_cell_map_ != nullptr);
      undo_concurrent_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undo_formula_rewrite_command_ != nullptr);
      undo_formula_rewrite_command_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&merge_owner_rollback_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_from_paste_) -
        reinterpret_cast<char*>(&merge_owner_rollback_index_)) + sizeof(is_from_paste_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandApplyConcurrentCellMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference redo_concurrent_cell_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_redo_concurrent_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_concurrent_cell_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_concurrent_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_formula_rewrite_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_formula_rewrite_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 merge_owner_rollback_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_merge_owner_rollback_index(&has_bits);
          merge_owner_rollback_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_from_paste = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_from_paste(&has_bits);
          is_from_paste_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference formula_rewrite_commands = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formula_rewrite_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandApplyConcurrentCellMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandApplyConcurrentCellMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference redo_concurrent_cell_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::redo_concurrent_cell_map(this), target, stream);
  }

  // optional .TSP.Reference undo_concurrent_cell_map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::undo_concurrent_cell_map(this), target, stream);
  }

  // optional .TSP.Reference undo_formula_rewrite_command = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::undo_formula_rewrite_command(this), target, stream);
  }

  // repeated .TSP.UUID custom_format_keys = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_format_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_custom_format_keys(i), target, stream);
  }

  // optional uint32 merge_owner_rollback_index = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_merge_owner_rollback_index(), target);
  }

  // required bool is_from_paste = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_from_paste(), target);
  }

  // repeated .TSP.Reference formula_rewrite_commands = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_formula_rewrite_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_formula_rewrite_commands(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandApplyConcurrentCellMapArchive)
  return target;
}

size_t CommandApplyConcurrentCellMapArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandApplyConcurrentCellMapArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_redo_concurrent_cell_map()) {
    // required .TSP.Reference redo_concurrent_cell_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *redo_concurrent_cell_map_);
  }

  if (_internal_has_is_from_paste()) {
    // required bool is_from_paste = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandApplyConcurrentCellMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandApplyConcurrentCellMapArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000023) ^ 0x00000023) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference redo_concurrent_cell_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *redo_concurrent_cell_map_);

    // required bool is_from_paste = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID custom_format_keys = 5;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference formula_rewrite_commands = 8;
  total_size += 1UL * this->_internal_formula_rewrite_commands_size();
  for (const auto& msg : this->formula_rewrite_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional .TSP.Reference undo_concurrent_cell_map = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_concurrent_cell_map_);
    }

    // optional .TSP.Reference undo_formula_rewrite_command = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_formula_rewrite_command_);
    }

    // optional uint32 merge_owner_rollback_index = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_merge_owner_rollback_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandApplyConcurrentCellMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandApplyConcurrentCellMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandApplyConcurrentCellMapArchive::GetClassData() const { return &_class_data_; }

void CommandApplyConcurrentCellMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandApplyConcurrentCellMapArchive *>(to)->MergeFrom(
      static_cast<const CommandApplyConcurrentCellMapArchive &>(from));
}


void CommandApplyConcurrentCellMapArchive::MergeFrom(const CommandApplyConcurrentCellMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandApplyConcurrentCellMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_format_keys_.MergeFrom(from.custom_format_keys_);
  formula_rewrite_commands_.MergeFrom(from.formula_rewrite_commands_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_redo_concurrent_cell_map()->::TSP::Reference::MergeFrom(from._internal_redo_concurrent_cell_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_concurrent_cell_map()->::TSP::Reference::MergeFrom(from._internal_undo_concurrent_cell_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_undo_formula_rewrite_command()->::TSP::Reference::MergeFrom(from._internal_undo_formula_rewrite_command());
    }
    if (cached_has_bits & 0x00000010u) {
      merge_owner_rollback_index_ = from.merge_owner_rollback_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_from_paste_ = from.is_from_paste_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandApplyConcurrentCellMapArchive::CopyFrom(const CommandApplyConcurrentCellMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandApplyConcurrentCellMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyConcurrentCellMapArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(custom_format_keys_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(formula_rewrite_commands_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_redo_concurrent_cell_map()) {
    if (!redo_concurrent_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_concurrent_cell_map()) {
    if (!undo_concurrent_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_formula_rewrite_command()) {
    if (!undo_formula_rewrite_command_->IsInitialized()) return false;
  }
  return true;
}

void CommandApplyConcurrentCellMapArchive::InternalSwap(CommandApplyConcurrentCellMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  custom_format_keys_.InternalSwap(&other->custom_format_keys_);
  formula_rewrite_commands_.InternalSwap(&other->formula_rewrite_commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandApplyConcurrentCellMapArchive, is_from_paste_)
      + sizeof(CommandApplyConcurrentCellMapArchive::is_from_paste_)
      - PROTOBUF_FIELD_OFFSET(CommandApplyConcurrentCellMapArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandApplyConcurrentCellMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[4]);
}

// ===================================================================

class CommandChangeFreezeHeaderStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandChangeFreezeHeaderStateArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandChangeFreezeHeaderStateArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_new_freeze_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prev_freeze_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandChangeFreezeHeaderStateArchive::_Internal::super(const CommandChangeFreezeHeaderStateArchive* msg) {
  return *msg->super_;
}
CommandChangeFreezeHeaderStateArchive::CommandChangeFreezeHeaderStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandChangeFreezeHeaderStateArchive)
}
CommandChangeFreezeHeaderStateArchive::CommandChangeFreezeHeaderStateArchive(const CommandChangeFreezeHeaderStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&prev_freeze_state_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(prev_freeze_state_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandChangeFreezeHeaderStateArchive)
}

inline void CommandChangeFreezeHeaderStateArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prev_freeze_state_) -
    reinterpret_cast<char*>(&super_)) + sizeof(prev_freeze_state_));
}

CommandChangeFreezeHeaderStateArchive::~CommandChangeFreezeHeaderStateArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandChangeFreezeHeaderStateArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandChangeFreezeHeaderStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandChangeFreezeHeaderStateArchive::ArenaDtor(void* object) {
  CommandChangeFreezeHeaderStateArchive* _this = reinterpret_cast< CommandChangeFreezeHeaderStateArchive* >(object);
  (void)_this;
}
void CommandChangeFreezeHeaderStateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandChangeFreezeHeaderStateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandChangeFreezeHeaderStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandChangeFreezeHeaderStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prev_freeze_state_) -
        reinterpret_cast<char*>(&direction_)) + sizeof(prev_freeze_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandChangeFreezeHeaderStateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.TableDimensionArchive direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableDimensionArchive_IsValid(val))) {
            _internal_set_direction(static_cast<::TST::TableDimensionArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bool new_freeze_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_new_freeze_state(&has_bits);
          new_freeze_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool prev_freeze_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_prev_freeze_state(&has_bits);
          prev_freeze_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandChangeFreezeHeaderStateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandChangeFreezeHeaderStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TST.TableDimensionArchive direction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  // required bool new_freeze_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_new_freeze_state(), target);
  }

  // required bool prev_freeze_state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_prev_freeze_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandChangeFreezeHeaderStateArchive)
  return target;
}

size_t CommandChangeFreezeHeaderStateArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandChangeFreezeHeaderStateArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_direction()) {
    // required .TST.TableDimensionArchive direction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  if (_internal_has_new_freeze_state()) {
    // required bool new_freeze_state = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_prev_freeze_state()) {
    // required bool prev_freeze_state = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandChangeFreezeHeaderStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandChangeFreezeHeaderStateArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TST.TableDimensionArchive direction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());

    // required bool new_freeze_state = 3;
    total_size += 1 + 1;

    // required bool prev_freeze_state = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandChangeFreezeHeaderStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandChangeFreezeHeaderStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandChangeFreezeHeaderStateArchive::GetClassData() const { return &_class_data_; }

void CommandChangeFreezeHeaderStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandChangeFreezeHeaderStateArchive *>(to)->MergeFrom(
      static_cast<const CommandChangeFreezeHeaderStateArchive &>(from));
}


void CommandChangeFreezeHeaderStateArchive::MergeFrom(const CommandChangeFreezeHeaderStateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandChangeFreezeHeaderStateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000004u) {
      new_freeze_state_ = from.new_freeze_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      prev_freeze_state_ = from.prev_freeze_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandChangeFreezeHeaderStateArchive::CopyFrom(const CommandChangeFreezeHeaderStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandChangeFreezeHeaderStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChangeFreezeHeaderStateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandChangeFreezeHeaderStateArchive::InternalSwap(CommandChangeFreezeHeaderStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandChangeFreezeHeaderStateArchive, prev_freeze_state_)
      + sizeof(CommandChangeFreezeHeaderStateArchive::prev_freeze_state_)
      - PROTOBUF_FIELD_OFFSET(CommandChangeFreezeHeaderStateArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandChangeFreezeHeaderStateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[5]);
}

// ===================================================================

class CommandDeleteCellsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandDeleteCellsArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandDeleteCellsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_update_border_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_invalidate_comments(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_invalidate_comments_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TST::CellUIDRegionArchive& cell_uid_region(const CommandDeleteCellsArchive* msg);
  static void set_has_cell_uid_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::CellUIDListArchive& summary_cell_uid_list(const CommandDeleteCellsArchive* msg);
  static void set_has_summary_cell_uid_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& inverse_concurrent_cell_map(const CommandDeleteCellsArchive* msg);
  static void set_has_inverse_concurrent_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandDeleteCellsArchive::_Internal::super(const CommandDeleteCellsArchive* msg) {
  return *msg->super_;
}
const ::TST::CellUIDRegionArchive&
CommandDeleteCellsArchive::_Internal::cell_uid_region(const CommandDeleteCellsArchive* msg) {
  return *msg->cell_uid_region_;
}
const ::TST::CellUIDListArchive&
CommandDeleteCellsArchive::_Internal::summary_cell_uid_list(const CommandDeleteCellsArchive* msg) {
  return *msg->summary_cell_uid_list_;
}
const ::TSP::Reference&
CommandDeleteCellsArchive::_Internal::inverse_concurrent_cell_map(const CommandDeleteCellsArchive* msg) {
  return *msg->inverse_concurrent_cell_map_;
}
void CommandDeleteCellsArchive::clear_cell_uid_region() {
  if (cell_uid_region_ != nullptr) cell_uid_region_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandDeleteCellsArchive::clear_summary_cell_uid_list() {
  if (summary_cell_uid_list_ != nullptr) summary_cell_uid_list_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandDeleteCellsArchive::clear_inverse_concurrent_cell_map() {
  if (inverse_concurrent_cell_map_ != nullptr) inverse_concurrent_cell_map_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandDeleteCellsArchive::CommandDeleteCellsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandDeleteCellsArchive)
}
CommandDeleteCellsArchive::CommandDeleteCellsArchive(const CommandDeleteCellsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_cell_uid_region()) {
    cell_uid_region_ = new ::TST::CellUIDRegionArchive(*from.cell_uid_region_);
  } else {
    cell_uid_region_ = nullptr;
  }
  if (from._internal_has_summary_cell_uid_list()) {
    summary_cell_uid_list_ = new ::TST::CellUIDListArchive(*from.summary_cell_uid_list_);
  } else {
    summary_cell_uid_list_ = nullptr;
  }
  if (from._internal_has_inverse_concurrent_cell_map()) {
    inverse_concurrent_cell_map_ = new ::TSP::Reference(*from.inverse_concurrent_cell_map_);
  } else {
    inverse_concurrent_cell_map_ = nullptr;
  }
  ::memcpy(&update_border_visibility_, &from.update_border_visibility_,
    static_cast<size_t>(reinterpret_cast<char*>(&invalidate_comments_valid_) -
    reinterpret_cast<char*>(&update_border_visibility_)) + sizeof(invalidate_comments_valid_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandDeleteCellsArchive)
}

inline void CommandDeleteCellsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&invalidate_comments_valid_) -
    reinterpret_cast<char*>(&super_)) + sizeof(invalidate_comments_valid_));
}

CommandDeleteCellsArchive::~CommandDeleteCellsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandDeleteCellsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandDeleteCellsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete cell_uid_region_;
  if (this != internal_default_instance()) delete summary_cell_uid_list_;
  if (this != internal_default_instance()) delete inverse_concurrent_cell_map_;
}

void CommandDeleteCellsArchive::ArenaDtor(void* object) {
  CommandDeleteCellsArchive* _this = reinterpret_cast< CommandDeleteCellsArchive* >(object);
  (void)_this;
}
void CommandDeleteCellsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandDeleteCellsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandDeleteCellsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandDeleteCellsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_uid_region_ != nullptr);
      cell_uid_region_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(summary_cell_uid_list_ != nullptr);
      summary_cell_uid_list_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(inverse_concurrent_cell_map_ != nullptr);
      inverse_concurrent_cell_map_->Clear();
    }
  }
  ::memset(&update_border_visibility_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invalidate_comments_valid_) -
      reinterpret_cast<char*>(&update_border_visibility_)) + sizeof(invalidate_comments_valid_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDeleteCellsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool update_border_visibility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_update_border_visibility(&has_bits);
          update_border_visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool invalidate_comments = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_invalidate_comments(&has_bits);
          invalidate_comments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool invalidate_comments_valid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_invalidate_comments_valid(&has_bits);
          invalidate_comments_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellUIDRegionArchive cell_uid_region = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellUIDListArchive summary_cell_uid_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary_cell_uid_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference inverse_concurrent_cell_map = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_concurrent_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandDeleteCellsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandDeleteCellsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional bool update_border_visibility = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_update_border_visibility(), target);
  }

  // optional bool invalidate_comments = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_invalidate_comments(), target);
  }

  // optional bool invalidate_comments_valid = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_invalidate_comments_valid(), target);
  }

  // optional .TST.CellUIDRegionArchive cell_uid_region = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::cell_uid_region(this), target, stream);
  }

  // optional .TST.CellUIDListArchive summary_cell_uid_list = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::summary_cell_uid_list(this), target, stream);
  }

  // optional .TSP.Reference inverse_concurrent_cell_map = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::inverse_concurrent_cell_map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandDeleteCellsArchive)
  return target;
}

size_t CommandDeleteCellsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandDeleteCellsArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007eu) {
    // optional .TST.CellUIDRegionArchive cell_uid_region = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_uid_region_);
    }

    // optional .TST.CellUIDListArchive summary_cell_uid_list = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *summary_cell_uid_list_);
    }

    // optional .TSP.Reference inverse_concurrent_cell_map = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inverse_concurrent_cell_map_);
    }

    // optional bool update_border_visibility = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool invalidate_comments = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool invalidate_comments_valid = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandDeleteCellsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandDeleteCellsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandDeleteCellsArchive::GetClassData() const { return &_class_data_; }

void CommandDeleteCellsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandDeleteCellsArchive *>(to)->MergeFrom(
      static_cast<const CommandDeleteCellsArchive &>(from));
}


void CommandDeleteCellsArchive::MergeFrom(const CommandDeleteCellsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandDeleteCellsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_uid_region()->::TST::CellUIDRegionArchive::MergeFrom(from._internal_cell_uid_region());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_summary_cell_uid_list()->::TST::CellUIDListArchive::MergeFrom(from._internal_summary_cell_uid_list());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_inverse_concurrent_cell_map()->::TSP::Reference::MergeFrom(from._internal_inverse_concurrent_cell_map());
    }
    if (cached_has_bits & 0x00000010u) {
      update_border_visibility_ = from.update_border_visibility_;
    }
    if (cached_has_bits & 0x00000020u) {
      invalidate_comments_ = from.invalidate_comments_;
    }
    if (cached_has_bits & 0x00000040u) {
      invalidate_comments_valid_ = from.invalidate_comments_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandDeleteCellsArchive::CopyFrom(const CommandDeleteCellsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandDeleteCellsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDeleteCellsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uid_region()) {
    if (!cell_uid_region_->IsInitialized()) return false;
  }
  if (_internal_has_summary_cell_uid_list()) {
    if (!summary_cell_uid_list_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_concurrent_cell_map()) {
    if (!inverse_concurrent_cell_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandDeleteCellsArchive::InternalSwap(CommandDeleteCellsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandDeleteCellsArchive, invalidate_comments_valid_)
      + sizeof(CommandDeleteCellsArchive::invalidate_comments_valid_)
      - PROTOBUF_FIELD_OFFSET(CommandDeleteCellsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDeleteCellsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[6]);
}

// ===================================================================

class CommandDeleteCellContentsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandDeleteCellContentsArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandDeleteCellContentsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CellUIDListArchive& cell_uid_list(const CommandDeleteCellContentsArchive* msg);
  static void set_has_cell_uid_list(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& inverse_cell_diff_map(const CommandDeleteCellContentsArchive* msg);
  static void set_has_inverse_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandDeleteCellContentsArchive::_Internal::super(const CommandDeleteCellContentsArchive* msg) {
  return *msg->super_;
}
const ::TST::CellUIDListArchive&
CommandDeleteCellContentsArchive::_Internal::cell_uid_list(const CommandDeleteCellContentsArchive* msg) {
  return *msg->cell_uid_list_;
}
const ::TSP::Reference&
CommandDeleteCellContentsArchive::_Internal::inverse_cell_diff_map(const CommandDeleteCellContentsArchive* msg) {
  return *msg->inverse_cell_diff_map_;
}
void CommandDeleteCellContentsArchive::clear_cell_uid_list() {
  if (cell_uid_list_ != nullptr) cell_uid_list_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandDeleteCellContentsArchive::clear_inverse_cell_diff_map() {
  if (inverse_cell_diff_map_ != nullptr) inverse_cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandDeleteCellContentsArchive::CommandDeleteCellContentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandDeleteCellContentsArchive)
}
CommandDeleteCellContentsArchive::CommandDeleteCellContentsArchive(const CommandDeleteCellContentsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_cell_uid_list()) {
    cell_uid_list_ = new ::TST::CellUIDListArchive(*from.cell_uid_list_);
  } else {
    cell_uid_list_ = nullptr;
  }
  if (from._internal_has_inverse_cell_diff_map()) {
    inverse_cell_diff_map_ = new ::TSP::Reference(*from.inverse_cell_diff_map_);
  } else {
    inverse_cell_diff_map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandDeleteCellContentsArchive)
}

inline void CommandDeleteCellContentsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inverse_cell_diff_map_) -
    reinterpret_cast<char*>(&super_)) + sizeof(inverse_cell_diff_map_));
}

CommandDeleteCellContentsArchive::~CommandDeleteCellContentsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandDeleteCellContentsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandDeleteCellContentsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete cell_uid_list_;
  if (this != internal_default_instance()) delete inverse_cell_diff_map_;
}

void CommandDeleteCellContentsArchive::ArenaDtor(void* object) {
  CommandDeleteCellContentsArchive* _this = reinterpret_cast< CommandDeleteCellContentsArchive* >(object);
  (void)_this;
}
void CommandDeleteCellContentsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandDeleteCellContentsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandDeleteCellContentsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandDeleteCellContentsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_uid_list_ != nullptr);
      cell_uid_list_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(inverse_cell_diff_map_ != nullptr);
      inverse_cell_diff_map_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDeleteCellContentsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.CellUIDListArchive cell_uid_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference inverse_cell_diff_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandDeleteCellContentsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandDeleteCellContentsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TST.CellUIDListArchive cell_uid_list = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cell_uid_list(this), target, stream);
  }

  // optional .TSP.Reference inverse_cell_diff_map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::inverse_cell_diff_map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandDeleteCellContentsArchive)
  return target;
}

size_t CommandDeleteCellContentsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandDeleteCellContentsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_cell_uid_list()) {
    // required .TST.CellUIDListArchive cell_uid_list = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_uid_list_);
  }

  return total_size;
}
size_t CommandDeleteCellContentsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandDeleteCellContentsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TST.CellUIDListArchive cell_uid_list = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_uid_list_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference inverse_cell_diff_map = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inverse_cell_diff_map_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandDeleteCellContentsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandDeleteCellContentsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandDeleteCellContentsArchive::GetClassData() const { return &_class_data_; }

void CommandDeleteCellContentsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandDeleteCellContentsArchive *>(to)->MergeFrom(
      static_cast<const CommandDeleteCellContentsArchive &>(from));
}


void CommandDeleteCellContentsArchive::MergeFrom(const CommandDeleteCellContentsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandDeleteCellContentsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_uid_list()->::TST::CellUIDListArchive::MergeFrom(from._internal_cell_uid_list());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_inverse_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_inverse_cell_diff_map());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandDeleteCellContentsArchive::CopyFrom(const CommandDeleteCellContentsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandDeleteCellContentsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDeleteCellContentsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uid_list()) {
    if (!cell_uid_list_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_cell_diff_map()) {
    if (!inverse_cell_diff_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandDeleteCellContentsArchive::InternalSwap(CommandDeleteCellContentsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandDeleteCellContentsArchive, inverse_cell_diff_map_)
      + sizeof(CommandDeleteCellContentsArchive::inverse_cell_diff_map_)
      - PROTOBUF_FIELD_OFFSET(CommandDeleteCellContentsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDeleteCellContentsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[7]);
}

// ===================================================================

class CommandMutateCellFormatArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMutateCellFormatArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandMutateCellFormatArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CellUIDListArchive& cell_uid_list(const CommandMutateCellFormatArchive* msg);
  static void set_has_cell_uid_list(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& inverse_cell_diff_map(const CommandMutateCellFormatArchive* msg);
  static void set_has_inverse_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& whole_format_diff_map(const CommandMutateCellFormatArchive* msg);
  static void set_has_whole_format_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_intended_format_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000011) ^ 0x00000011) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandMutateCellFormatArchive::_Internal::super(const CommandMutateCellFormatArchive* msg) {
  return *msg->super_;
}
const ::TST::CellUIDListArchive&
CommandMutateCellFormatArchive::_Internal::cell_uid_list(const CommandMutateCellFormatArchive* msg) {
  return *msg->cell_uid_list_;
}
const ::TSP::Reference&
CommandMutateCellFormatArchive::_Internal::inverse_cell_diff_map(const CommandMutateCellFormatArchive* msg) {
  return *msg->inverse_cell_diff_map_;
}
const ::TSP::Reference&
CommandMutateCellFormatArchive::_Internal::whole_format_diff_map(const CommandMutateCellFormatArchive* msg) {
  return *msg->whole_format_diff_map_;
}
void CommandMutateCellFormatArchive::clear_cell_uid_list() {
  if (cell_uid_list_ != nullptr) cell_uid_list_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandMutateCellFormatArchive::clear_inverse_cell_diff_map() {
  if (inverse_cell_diff_map_ != nullptr) inverse_cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandMutateCellFormatArchive::clear_whole_format_diff_map() {
  if (whole_format_diff_map_ != nullptr) whole_format_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandMutateCellFormatArchive::CommandMutateCellFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandMutateCellFormatArchive)
}
CommandMutateCellFormatArchive::CommandMutateCellFormatArchive(const CommandMutateCellFormatArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_cell_uid_list()) {
    cell_uid_list_ = new ::TST::CellUIDListArchive(*from.cell_uid_list_);
  } else {
    cell_uid_list_ = nullptr;
  }
  if (from._internal_has_inverse_cell_diff_map()) {
    inverse_cell_diff_map_ = new ::TSP::Reference(*from.inverse_cell_diff_map_);
  } else {
    inverse_cell_diff_map_ = nullptr;
  }
  if (from._internal_has_whole_format_diff_map()) {
    whole_format_diff_map_ = new ::TSP::Reference(*from.whole_format_diff_map_);
  } else {
    whole_format_diff_map_ = nullptr;
  }
  intended_format_type_ = from.intended_format_type_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandMutateCellFormatArchive)
}

inline void CommandMutateCellFormatArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&intended_format_type_) -
    reinterpret_cast<char*>(&super_)) + sizeof(intended_format_type_));
}

CommandMutateCellFormatArchive::~CommandMutateCellFormatArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandMutateCellFormatArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandMutateCellFormatArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete cell_uid_list_;
  if (this != internal_default_instance()) delete inverse_cell_diff_map_;
  if (this != internal_default_instance()) delete whole_format_diff_map_;
}

void CommandMutateCellFormatArchive::ArenaDtor(void* object) {
  CommandMutateCellFormatArchive* _this = reinterpret_cast< CommandMutateCellFormatArchive* >(object);
  (void)_this;
}
void CommandMutateCellFormatArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandMutateCellFormatArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandMutateCellFormatArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandMutateCellFormatArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_uid_list_ != nullptr);
      cell_uid_list_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(inverse_cell_diff_map_ != nullptr);
      inverse_cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(whole_format_diff_map_ != nullptr);
      whole_format_diff_map_->Clear();
    }
  }
  intended_format_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMutateCellFormatArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellUIDListArchive cell_uid_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference inverse_cell_diff_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference whole_format_diff_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_whole_format_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 intended_format_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_intended_format_type(&has_bits);
          intended_format_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandMutateCellFormatArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandMutateCellFormatArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TST.CellUIDListArchive cell_uid_list = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cell_uid_list(this), target, stream);
  }

  // optional .TSP.Reference inverse_cell_diff_map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::inverse_cell_diff_map(this), target, stream);
  }

  // optional .TSP.Reference whole_format_diff_map = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::whole_format_diff_map(this), target, stream);
  }

  // required uint32 intended_format_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_intended_format_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandMutateCellFormatArchive)
  return target;
}

size_t CommandMutateCellFormatArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandMutateCellFormatArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_intended_format_type()) {
    // required uint32 intended_format_type = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_intended_format_type());
  }

  return total_size;
}
size_t CommandMutateCellFormatArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandMutateCellFormatArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000011) ^ 0x00000011) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 intended_format_type = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_intended_format_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TST.CellUIDListArchive cell_uid_list = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_uid_list_);
    }

    // optional .TSP.Reference inverse_cell_diff_map = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inverse_cell_diff_map_);
    }

    // optional .TSP.Reference whole_format_diff_map = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *whole_format_diff_map_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandMutateCellFormatArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandMutateCellFormatArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandMutateCellFormatArchive::GetClassData() const { return &_class_data_; }

void CommandMutateCellFormatArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandMutateCellFormatArchive *>(to)->MergeFrom(
      static_cast<const CommandMutateCellFormatArchive &>(from));
}


void CommandMutateCellFormatArchive::MergeFrom(const CommandMutateCellFormatArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandMutateCellFormatArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_uid_list()->::TST::CellUIDListArchive::MergeFrom(from._internal_cell_uid_list());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_inverse_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_inverse_cell_diff_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_whole_format_diff_map()->::TSP::Reference::MergeFrom(from._internal_whole_format_diff_map());
    }
    if (cached_has_bits & 0x00000010u) {
      intended_format_type_ = from.intended_format_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandMutateCellFormatArchive::CopyFrom(const CommandMutateCellFormatArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandMutateCellFormatArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMutateCellFormatArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uid_list()) {
    if (!cell_uid_list_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_cell_diff_map()) {
    if (!inverse_cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_whole_format_diff_map()) {
    if (!whole_format_diff_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandMutateCellFormatArchive::InternalSwap(CommandMutateCellFormatArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMutateCellFormatArchive, intended_format_type_)
      + sizeof(CommandMutateCellFormatArchive::intended_format_type_)
      - PROTOBUF_FIELD_OFFSET(CommandMutateCellFormatArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMutateCellFormatArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[8]);
}

// ===================================================================

class CommandSetAutomaticDurationUnitsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetAutomaticDurationUnitsArchive>()._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetAutomaticDurationUnitsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_automatic_units(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetAutomaticDurationUnitsArchive::_Internal::super(const CommandSetAutomaticDurationUnitsArchive* msg) {
  return *msg->super_;
}
CommandSetAutomaticDurationUnitsArchive::CommandSetAutomaticDurationUnitsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetAutomaticDurationUnitsArchive)
}
CommandSetAutomaticDurationUnitsArchive::CommandSetAutomaticDurationUnitsArchive(const CommandSetAutomaticDurationUnitsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::CommandMutateCellFormatArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  automatic_units_ = from.automatic_units_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetAutomaticDurationUnitsArchive)
}

inline void CommandSetAutomaticDurationUnitsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&automatic_units_) -
    reinterpret_cast<char*>(&super_)) + sizeof(automatic_units_));
}

CommandSetAutomaticDurationUnitsArchive::~CommandSetAutomaticDurationUnitsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetAutomaticDurationUnitsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetAutomaticDurationUnitsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetAutomaticDurationUnitsArchive::ArenaDtor(void* object) {
  CommandSetAutomaticDurationUnitsArchive* _this = reinterpret_cast< CommandSetAutomaticDurationUnitsArchive* >(object);
  (void)_this;
}
void CommandSetAutomaticDurationUnitsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetAutomaticDurationUnitsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetAutomaticDurationUnitsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetAutomaticDurationUnitsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  automatic_units_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetAutomaticDurationUnitsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool automatic_units = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_automatic_units(&has_bits);
          automatic_units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetAutomaticDurationUnitsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetAutomaticDurationUnitsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional bool automatic_units = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_automatic_units(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetAutomaticDurationUnitsArchive)
  return target;
}

size_t CommandSetAutomaticDurationUnitsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetAutomaticDurationUnitsArchive)
  size_t total_size = 0;

  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool automatic_units = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetAutomaticDurationUnitsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetAutomaticDurationUnitsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetAutomaticDurationUnitsArchive::GetClassData() const { return &_class_data_; }

void CommandSetAutomaticDurationUnitsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetAutomaticDurationUnitsArchive *>(to)->MergeFrom(
      static_cast<const CommandSetAutomaticDurationUnitsArchive &>(from));
}


void CommandSetAutomaticDurationUnitsArchive::MergeFrom(const CommandSetAutomaticDurationUnitsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetAutomaticDurationUnitsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      automatic_units_ = from.automatic_units_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetAutomaticDurationUnitsArchive::CopyFrom(const CommandSetAutomaticDurationUnitsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetAutomaticDurationUnitsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetAutomaticDurationUnitsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetAutomaticDurationUnitsArchive::InternalSwap(CommandSetAutomaticDurationUnitsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetAutomaticDurationUnitsArchive, automatic_units_)
      + sizeof(CommandSetAutomaticDurationUnitsArchive::automatic_units_)
      - PROTOBUF_FIELD_OFFSET(CommandSetAutomaticDurationUnitsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetAutomaticDurationUnitsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[9]);
}

// ===================================================================

class CommandSetDurationStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetDurationStyleArchive>()._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetDurationStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetDurationStyleArchive::_Internal::super(const CommandSetDurationStyleArchive* msg) {
  return *msg->super_;
}
CommandSetDurationStyleArchive::CommandSetDurationStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetDurationStyleArchive)
}
CommandSetDurationStyleArchive::CommandSetDurationStyleArchive(const CommandSetDurationStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::CommandMutateCellFormatArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  duration_style_ = from.duration_style_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetDurationStyleArchive)
}

inline void CommandSetDurationStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_style_) -
    reinterpret_cast<char*>(&super_)) + sizeof(duration_style_));
}

CommandSetDurationStyleArchive::~CommandSetDurationStyleArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetDurationStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetDurationStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetDurationStyleArchive::ArenaDtor(void* object) {
  CommandSetDurationStyleArchive* _this = reinterpret_cast< CommandSetDurationStyleArchive* >(object);
  (void)_this;
}
void CommandSetDurationStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetDurationStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetDurationStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetDurationStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  duration_style_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetDurationStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration_style(&has_bits);
          duration_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetDurationStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetDurationStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 duration_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration_style(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetDurationStyleArchive)
  return target;
}

size_t CommandSetDurationStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetDurationStyleArchive)
  size_t total_size = 0;

  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 duration_style = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration_style());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetDurationStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetDurationStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetDurationStyleArchive::GetClassData() const { return &_class_data_; }

void CommandSetDurationStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetDurationStyleArchive *>(to)->MergeFrom(
      static_cast<const CommandSetDurationStyleArchive &>(from));
}


void CommandSetDurationStyleArchive::MergeFrom(const CommandSetDurationStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetDurationStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      duration_style_ = from.duration_style_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetDurationStyleArchive::CopyFrom(const CommandSetDurationStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetDurationStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetDurationStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetDurationStyleArchive::InternalSwap(CommandSetDurationStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetDurationStyleArchive, duration_style_)
      + sizeof(CommandSetDurationStyleArchive::duration_style_)
      - PROTOBUF_FIELD_OFFSET(CommandSetDurationStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetDurationStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[10]);
}

// ===================================================================

class CommandSetDurationUnitSmallestLargestArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetDurationUnitSmallestLargestArchive>()._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetDurationUnitSmallestLargestArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_smallest_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_largest_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetDurationUnitSmallestLargestArchive::_Internal::super(const CommandSetDurationUnitSmallestLargestArchive* msg) {
  return *msg->super_;
}
CommandSetDurationUnitSmallestLargestArchive::CommandSetDurationUnitSmallestLargestArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetDurationUnitSmallestLargestArchive)
}
CommandSetDurationUnitSmallestLargestArchive::CommandSetDurationUnitSmallestLargestArchive(const CommandSetDurationUnitSmallestLargestArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::CommandMutateCellFormatArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&smallest_unit_, &from.smallest_unit_,
    static_cast<size_t>(reinterpret_cast<char*>(&largest_unit_) -
    reinterpret_cast<char*>(&smallest_unit_)) + sizeof(largest_unit_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetDurationUnitSmallestLargestArchive)
}

inline void CommandSetDurationUnitSmallestLargestArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&largest_unit_) -
    reinterpret_cast<char*>(&super_)) + sizeof(largest_unit_));
}

CommandSetDurationUnitSmallestLargestArchive::~CommandSetDurationUnitSmallestLargestArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetDurationUnitSmallestLargestArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetDurationUnitSmallestLargestArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetDurationUnitSmallestLargestArchive::ArenaDtor(void* object) {
  CommandSetDurationUnitSmallestLargestArchive* _this = reinterpret_cast< CommandSetDurationUnitSmallestLargestArchive* >(object);
  (void)_this;
}
void CommandSetDurationUnitSmallestLargestArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetDurationUnitSmallestLargestArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetDurationUnitSmallestLargestArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetDurationUnitSmallestLargestArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&smallest_unit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&largest_unit_) -
        reinterpret_cast<char*>(&smallest_unit_)) + sizeof(largest_unit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetDurationUnitSmallestLargestArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 smallest_unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_smallest_unit(&has_bits);
          smallest_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 largest_unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_largest_unit(&has_bits);
          largest_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetDurationUnitSmallestLargestArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetDurationUnitSmallestLargestArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 smallest_unit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_smallest_unit(), target);
  }

  // optional uint32 largest_unit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_largest_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetDurationUnitSmallestLargestArchive)
  return target;
}

size_t CommandSetDurationUnitSmallestLargestArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetDurationUnitSmallestLargestArchive)
  size_t total_size = 0;

  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 smallest_unit = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_smallest_unit());
    }

    // optional uint32 largest_unit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_largest_unit());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetDurationUnitSmallestLargestArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetDurationUnitSmallestLargestArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetDurationUnitSmallestLargestArchive::GetClassData() const { return &_class_data_; }

void CommandSetDurationUnitSmallestLargestArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetDurationUnitSmallestLargestArchive *>(to)->MergeFrom(
      static_cast<const CommandSetDurationUnitSmallestLargestArchive &>(from));
}


void CommandSetDurationUnitSmallestLargestArchive::MergeFrom(const CommandSetDurationUnitSmallestLargestArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetDurationUnitSmallestLargestArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      smallest_unit_ = from.smallest_unit_;
    }
    if (cached_has_bits & 0x00000004u) {
      largest_unit_ = from.largest_unit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetDurationUnitSmallestLargestArchive::CopyFrom(const CommandSetDurationUnitSmallestLargestArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetDurationUnitSmallestLargestArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetDurationUnitSmallestLargestArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetDurationUnitSmallestLargestArchive::InternalSwap(CommandSetDurationUnitSmallestLargestArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetDurationUnitSmallestLargestArchive, largest_unit_)
      + sizeof(CommandSetDurationUnitSmallestLargestArchive::largest_unit_)
      - PROTOBUF_FIELD_OFFSET(CommandSetDurationUnitSmallestLargestArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetDurationUnitSmallestLargestArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[11]);
}

// ===================================================================

class CommandReplaceCustomFormatArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandReplaceCustomFormatArchive>()._has_bits_);
  static const ::TSP::Reference& undo_diff_map(const CommandReplaceCustomFormatArchive* msg);
  static void set_has_undo_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& commit_diff_map(const CommandReplaceCustomFormatArchive* msg);
  static void set_has_commit_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::TableCommandArchive& super(const CommandReplaceCustomFormatArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TSP::Reference&
CommandReplaceCustomFormatArchive::_Internal::undo_diff_map(const CommandReplaceCustomFormatArchive* msg) {
  return *msg->undo_diff_map_;
}
const ::TSP::Reference&
CommandReplaceCustomFormatArchive::_Internal::commit_diff_map(const CommandReplaceCustomFormatArchive* msg) {
  return *msg->commit_diff_map_;
}
const ::TST::TableCommandArchive&
CommandReplaceCustomFormatArchive::_Internal::super(const CommandReplaceCustomFormatArchive* msg) {
  return *msg->super_;
}
void CommandReplaceCustomFormatArchive::clear_undo_diff_map() {
  if (undo_diff_map_ != nullptr) undo_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandReplaceCustomFormatArchive::clear_commit_diff_map() {
  if (commit_diff_map_ != nullptr) commit_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandReplaceCustomFormatArchive::CommandReplaceCustomFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandReplaceCustomFormatArchive)
}
CommandReplaceCustomFormatArchive::CommandReplaceCustomFormatArchive(const CommandReplaceCustomFormatArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_undo_diff_map()) {
    undo_diff_map_ = new ::TSP::Reference(*from.undo_diff_map_);
  } else {
    undo_diff_map_ = nullptr;
  }
  if (from._internal_has_commit_diff_map()) {
    commit_diff_map_ = new ::TSP::Reference(*from.commit_diff_map_);
  } else {
    commit_diff_map_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandReplaceCustomFormatArchive)
}

inline void CommandReplaceCustomFormatArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&undo_diff_map_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&super_) -
    reinterpret_cast<char*>(&undo_diff_map_)) + sizeof(super_));
}

CommandReplaceCustomFormatArchive::~CommandReplaceCustomFormatArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandReplaceCustomFormatArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandReplaceCustomFormatArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete undo_diff_map_;
  if (this != internal_default_instance()) delete commit_diff_map_;
  if (this != internal_default_instance()) delete super_;
}

void CommandReplaceCustomFormatArchive::ArenaDtor(void* object) {
  CommandReplaceCustomFormatArchive* _this = reinterpret_cast< CommandReplaceCustomFormatArchive* >(object);
  (void)_this;
}
void CommandReplaceCustomFormatArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandReplaceCustomFormatArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandReplaceCustomFormatArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandReplaceCustomFormatArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(undo_diff_map_ != nullptr);
      undo_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(commit_diff_map_ != nullptr);
      commit_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandReplaceCustomFormatArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference undo_diff_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference commit_diff_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.TableCommandArchive super = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandReplaceCustomFormatArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandReplaceCustomFormatArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference undo_diff_map = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::undo_diff_map(this), target, stream);
  }

  // optional .TSP.Reference commit_diff_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::commit_diff_map(this), target, stream);
  }

  // required .TST.TableCommandArchive super = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandReplaceCustomFormatArchive)
  return target;
}

size_t CommandReplaceCustomFormatArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandReplaceCustomFormatArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 6;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference undo_diff_map = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_diff_map_);
    }

    // optional .TSP.Reference commit_diff_map = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commit_diff_map_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandReplaceCustomFormatArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandReplaceCustomFormatArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandReplaceCustomFormatArchive::GetClassData() const { return &_class_data_; }

void CommandReplaceCustomFormatArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandReplaceCustomFormatArchive *>(to)->MergeFrom(
      static_cast<const CommandReplaceCustomFormatArchive &>(from));
}


void CommandReplaceCustomFormatArchive::MergeFrom(const CommandReplaceCustomFormatArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandReplaceCustomFormatArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_undo_diff_map()->::TSP::Reference::MergeFrom(from._internal_undo_diff_map());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_commit_diff_map()->::TSP::Reference::MergeFrom(from._internal_commit_diff_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandReplaceCustomFormatArchive::CopyFrom(const CommandReplaceCustomFormatArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandReplaceCustomFormatArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceCustomFormatArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_undo_diff_map()) {
    if (!undo_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_commit_diff_map()) {
    if (!commit_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceCustomFormatArchive::InternalSwap(CommandReplaceCustomFormatArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandReplaceCustomFormatArchive, super_)
      + sizeof(CommandReplaceCustomFormatArchive::super_)
      - PROTOBUF_FIELD_OFFSET(CommandReplaceCustomFormatArchive, undo_diff_map_)>(
          reinterpret_cast<char*>(&undo_diff_map_),
          reinterpret_cast<char*>(&other->undo_diff_map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReplaceCustomFormatArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[12]);
}

// ===================================================================

class CommandMoveCellsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMoveCellsArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandMoveCellsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& dst_table_info_id_path(const CommandMoveCellsArchive* msg);
  static void set_has_dst_table_info_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDRectArchive& src_uid_range(const CommandMoveCellsArchive* msg);
  static void set_has_src_uid_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUIDRectArchive& dst_uid_range(const CommandMoveCellsArchive* msg);
  static void set_has_dst_uid_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_table_dimension(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::Reference& src_cell_map(const CommandMoveCellsArchive* msg);
  static void set_has_src_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& dst_cell_map(const CommandMoveCellsArchive* msg);
  static void set_has_dst_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& dst_cell_styles_container(const CommandMoveCellsArchive* msg);
  static void set_has_dst_cell_styles_container(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& src_undo_cell_map(const CommandMoveCellsArchive* msg);
  static void set_has_src_undo_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& dst_undo_cell_map(const CommandMoveCellsArchive* msg);
  static void set_has_dst_undo_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_dst_merge_owner_rollback_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TST::MergeOperationArchive& merge_action_to_restore(const CommandMoveCellsArchive* msg);
  static void set_has_merge_action_to_restore(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TST::CellUIDListArchive& comment_cell_uids_to_restore(const CommandMoveCellsArchive* msg);
  static void set_has_comment_cell_uids_to_restore(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000101f) ^ 0x0000101f) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandMoveCellsArchive::_Internal::super(const CommandMoveCellsArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
CommandMoveCellsArchive::_Internal::dst_table_info_id_path(const CommandMoveCellsArchive* msg) {
  return *msg->dst_table_info_id_path_;
}
const ::TSP::UUIDRectArchive&
CommandMoveCellsArchive::_Internal::src_uid_range(const CommandMoveCellsArchive* msg) {
  return *msg->src_uid_range_;
}
const ::TSP::UUIDRectArchive&
CommandMoveCellsArchive::_Internal::dst_uid_range(const CommandMoveCellsArchive* msg) {
  return *msg->dst_uid_range_;
}
const ::TSP::Reference&
CommandMoveCellsArchive::_Internal::src_cell_map(const CommandMoveCellsArchive* msg) {
  return *msg->src_cell_map_;
}
const ::TSP::Reference&
CommandMoveCellsArchive::_Internal::dst_cell_map(const CommandMoveCellsArchive* msg) {
  return *msg->dst_cell_map_;
}
const ::TSP::Reference&
CommandMoveCellsArchive::_Internal::dst_cell_styles_container(const CommandMoveCellsArchive* msg) {
  return *msg->dst_cell_styles_container_;
}
const ::TSP::Reference&
CommandMoveCellsArchive::_Internal::src_undo_cell_map(const CommandMoveCellsArchive* msg) {
  return *msg->src_undo_cell_map_;
}
const ::TSP::Reference&
CommandMoveCellsArchive::_Internal::dst_undo_cell_map(const CommandMoveCellsArchive* msg) {
  return *msg->dst_undo_cell_map_;
}
const ::TST::MergeOperationArchive&
CommandMoveCellsArchive::_Internal::merge_action_to_restore(const CommandMoveCellsArchive* msg) {
  return *msg->merge_action_to_restore_;
}
const ::TST::CellUIDListArchive&
CommandMoveCellsArchive::_Internal::comment_cell_uids_to_restore(const CommandMoveCellsArchive* msg) {
  return *msg->comment_cell_uids_to_restore_;
}
void CommandMoveCellsArchive::clear_dst_table_info_id_path() {
  if (dst_table_info_id_path_ != nullptr) dst_table_info_id_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandMoveCellsArchive::clear_src_uid_range() {
  if (src_uid_range_ != nullptr) src_uid_range_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandMoveCellsArchive::clear_dst_uid_range() {
  if (dst_uid_range_ != nullptr) dst_uid_range_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandMoveCellsArchive::clear_src_cell_map() {
  if (src_cell_map_ != nullptr) src_cell_map_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CommandMoveCellsArchive::clear_dst_cell_map() {
  if (dst_cell_map_ != nullptr) dst_cell_map_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void CommandMoveCellsArchive::clear_dst_cell_styles_container() {
  if (dst_cell_styles_container_ != nullptr) dst_cell_styles_container_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void CommandMoveCellsArchive::clear_src_undo_cell_map() {
  if (src_undo_cell_map_ != nullptr) src_undo_cell_map_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void CommandMoveCellsArchive::clear_dst_undo_cell_map() {
  if (dst_undo_cell_map_ != nullptr) dst_undo_cell_map_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void CommandMoveCellsArchive::clear_formula_rewrite_commands() {
  formula_rewrite_commands_.Clear();
}
void CommandMoveCellsArchive::clear_merge_action_to_restore() {
  if (merge_action_to_restore_ != nullptr) merge_action_to_restore_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void CommandMoveCellsArchive::clear_comment_cell_uids_to_restore() {
  if (comment_cell_uids_to_restore_ != nullptr) comment_cell_uids_to_restore_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void CommandMoveCellsArchive::clear_comment_storages_to_restore() {
  comment_storages_to_restore_.Clear();
}
CommandMoveCellsArchive::CommandMoveCellsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  formula_rewrite_commands_(arena),
  comment_storages_to_restore_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandMoveCellsArchive)
}
CommandMoveCellsArchive::CommandMoveCellsArchive(const CommandMoveCellsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      formula_rewrite_commands_(from.formula_rewrite_commands_),
      comment_storages_to_restore_(from.comment_storages_to_restore_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_dst_table_info_id_path()) {
    dst_table_info_id_path_ = new ::TSP::UUIDPath(*from.dst_table_info_id_path_);
  } else {
    dst_table_info_id_path_ = nullptr;
  }
  if (from._internal_has_src_uid_range()) {
    src_uid_range_ = new ::TSP::UUIDRectArchive(*from.src_uid_range_);
  } else {
    src_uid_range_ = nullptr;
  }
  if (from._internal_has_dst_uid_range()) {
    dst_uid_range_ = new ::TSP::UUIDRectArchive(*from.dst_uid_range_);
  } else {
    dst_uid_range_ = nullptr;
  }
  if (from._internal_has_src_cell_map()) {
    src_cell_map_ = new ::TSP::Reference(*from.src_cell_map_);
  } else {
    src_cell_map_ = nullptr;
  }
  if (from._internal_has_dst_cell_map()) {
    dst_cell_map_ = new ::TSP::Reference(*from.dst_cell_map_);
  } else {
    dst_cell_map_ = nullptr;
  }
  if (from._internal_has_dst_cell_styles_container()) {
    dst_cell_styles_container_ = new ::TSP::Reference(*from.dst_cell_styles_container_);
  } else {
    dst_cell_styles_container_ = nullptr;
  }
  if (from._internal_has_src_undo_cell_map()) {
    src_undo_cell_map_ = new ::TSP::Reference(*from.src_undo_cell_map_);
  } else {
    src_undo_cell_map_ = nullptr;
  }
  if (from._internal_has_dst_undo_cell_map()) {
    dst_undo_cell_map_ = new ::TSP::Reference(*from.dst_undo_cell_map_);
  } else {
    dst_undo_cell_map_ = nullptr;
  }
  if (from._internal_has_merge_action_to_restore()) {
    merge_action_to_restore_ = new ::TST::MergeOperationArchive(*from.merge_action_to_restore_);
  } else {
    merge_action_to_restore_ = nullptr;
  }
  if (from._internal_has_comment_cell_uids_to_restore()) {
    comment_cell_uids_to_restore_ = new ::TST::CellUIDListArchive(*from.comment_cell_uids_to_restore_);
  } else {
    comment_cell_uids_to_restore_ = nullptr;
  }
  ::memcpy(&table_dimension_, &from.table_dimension_,
    static_cast<size_t>(reinterpret_cast<char*>(&dst_merge_owner_rollback_index_) -
    reinterpret_cast<char*>(&table_dimension_)) + sizeof(dst_merge_owner_rollback_index_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandMoveCellsArchive)
}

inline void CommandMoveCellsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dst_merge_owner_rollback_index_) -
    reinterpret_cast<char*>(&super_)) + sizeof(dst_merge_owner_rollback_index_));
}

CommandMoveCellsArchive::~CommandMoveCellsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandMoveCellsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandMoveCellsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete dst_table_info_id_path_;
  if (this != internal_default_instance()) delete src_uid_range_;
  if (this != internal_default_instance()) delete dst_uid_range_;
  if (this != internal_default_instance()) delete src_cell_map_;
  if (this != internal_default_instance()) delete dst_cell_map_;
  if (this != internal_default_instance()) delete dst_cell_styles_container_;
  if (this != internal_default_instance()) delete src_undo_cell_map_;
  if (this != internal_default_instance()) delete dst_undo_cell_map_;
  if (this != internal_default_instance()) delete merge_action_to_restore_;
  if (this != internal_default_instance()) delete comment_cell_uids_to_restore_;
}

void CommandMoveCellsArchive::ArenaDtor(void* object) {
  CommandMoveCellsArchive* _this = reinterpret_cast< CommandMoveCellsArchive* >(object);
  (void)_this;
}
void CommandMoveCellsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandMoveCellsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandMoveCellsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandMoveCellsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  formula_rewrite_commands_.Clear();
  comment_storages_to_restore_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dst_table_info_id_path_ != nullptr);
      dst_table_info_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(src_uid_range_ != nullptr);
      src_uid_range_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(dst_uid_range_ != nullptr);
      dst_uid_range_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(src_cell_map_ != nullptr);
      src_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(dst_cell_map_ != nullptr);
      dst_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(dst_cell_styles_container_ != nullptr);
      dst_cell_styles_container_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(src_undo_cell_map_ != nullptr);
      src_undo_cell_map_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(dst_undo_cell_map_ != nullptr);
      dst_undo_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(merge_action_to_restore_ != nullptr);
      merge_action_to_restore_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(comment_cell_uids_to_restore_ != nullptr);
      comment_cell_uids_to_restore_->Clear();
    }
  }
  if (cached_has_bits & 0x00001800u) {
    ::memset(&table_dimension_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dst_merge_owner_rollback_index_) -
        reinterpret_cast<char*>(&table_dimension_)) + sizeof(dst_merge_owner_rollback_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMoveCellsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDPath dst_table_info_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_table_info_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDRectArchive src_uid_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_uid_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDRectArchive dst_uid_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_uid_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.TableDimensionArchive table_dimension = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableDimensionArchive_IsValid(val))) {
            _internal_set_table_dimension(static_cast<::TST::TableDimensionArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference src_cell_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference dst_cell_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference dst_cell_styles_container = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_cell_styles_container(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference src_undo_cell_map = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_undo_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference dst_undo_cell_map = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_undo_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 dst_merge_owner_rollback_index = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_dst_merge_owner_rollback_index(&has_bits);
          dst_merge_owner_rollback_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference formula_rewrite_commands = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formula_rewrite_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TST.MergeOperationArchive merge_action_to_restore = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_merge_action_to_restore(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellUIDListArchive comment_cell_uids_to_restore = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_comment_cell_uids_to_restore(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference comment_storages_to_restore = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_comment_storages_to_restore(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandMoveCellsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandMoveCellsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUIDPath dst_table_info_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dst_table_info_id_path(this), target, stream);
  }

  // required .TSP.UUIDRectArchive src_uid_range = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::src_uid_range(this), target, stream);
  }

  // required .TSP.UUIDRectArchive dst_uid_range = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::dst_uid_range(this), target, stream);
  }

  // optional .TST.TableDimensionArchive table_dimension = 5;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_table_dimension(), target);
  }

  // required .TSP.Reference src_cell_map = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::src_cell_map(this), target, stream);
  }

  // optional .TSP.Reference dst_cell_map = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::dst_cell_map(this), target, stream);
  }

  // optional .TSP.Reference dst_cell_styles_container = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::dst_cell_styles_container(this), target, stream);
  }

  // optional .TSP.Reference src_undo_cell_map = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::src_undo_cell_map(this), target, stream);
  }

  // optional .TSP.Reference dst_undo_cell_map = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::dst_undo_cell_map(this), target, stream);
  }

  // required uint32 dst_merge_owner_rollback_index = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_dst_merge_owner_rollback_index(), target);
  }

  // repeated .TSP.Reference formula_rewrite_commands = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_formula_rewrite_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_formula_rewrite_commands(i), target, stream);
  }

  // optional .TST.MergeOperationArchive merge_action_to_restore = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::merge_action_to_restore(this), target, stream);
  }

  // optional .TST.CellUIDListArchive comment_cell_uids_to_restore = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::comment_cell_uids_to_restore(this), target, stream);
  }

  // repeated .TSP.Reference comment_storages_to_restore = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_comment_storages_to_restore_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_comment_storages_to_restore(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandMoveCellsArchive)
  return target;
}

size_t CommandMoveCellsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandMoveCellsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_dst_table_info_id_path()) {
    // required .TSP.UUIDPath dst_table_info_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_table_info_id_path_);
  }

  if (_internal_has_src_uid_range()) {
    // required .TSP.UUIDRectArchive src_uid_range = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_uid_range_);
  }

  if (_internal_has_dst_uid_range()) {
    // required .TSP.UUIDRectArchive dst_uid_range = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_uid_range_);
  }

  if (_internal_has_src_cell_map()) {
    // required .TSP.Reference src_cell_map = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_cell_map_);
  }

  if (_internal_has_dst_merge_owner_rollback_index()) {
    // required uint32 dst_merge_owner_rollback_index = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dst_merge_owner_rollback_index());
  }

  return total_size;
}
size_t CommandMoveCellsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandMoveCellsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000101f) ^ 0x0000101f) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUIDPath dst_table_info_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_table_info_id_path_);

    // required .TSP.UUIDRectArchive src_uid_range = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_uid_range_);

    // required .TSP.UUIDRectArchive dst_uid_range = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_uid_range_);

    // required .TSP.Reference src_cell_map = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_cell_map_);

    // required uint32 dst_merge_owner_rollback_index = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dst_merge_owner_rollback_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference formula_rewrite_commands = 12;
  total_size += 1UL * this->_internal_formula_rewrite_commands_size();
  for (const auto& msg : this->formula_rewrite_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference comment_storages_to_restore = 15;
  total_size += 1UL * this->_internal_comment_storages_to_restore_size();
  for (const auto& msg : this->comment_storages_to_restore_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000e0u) {
    // optional .TSP.Reference dst_cell_map = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dst_cell_map_);
    }

    // optional .TSP.Reference dst_cell_styles_container = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dst_cell_styles_container_);
    }

    // optional .TSP.Reference src_undo_cell_map = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *src_undo_cell_map_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .TSP.Reference dst_undo_cell_map = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dst_undo_cell_map_);
    }

    // optional .TST.MergeOperationArchive merge_action_to_restore = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *merge_action_to_restore_);
    }

    // optional .TST.CellUIDListArchive comment_cell_uids_to_restore = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *comment_cell_uids_to_restore_);
    }

    // optional .TST.TableDimensionArchive table_dimension = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table_dimension());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandMoveCellsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandMoveCellsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandMoveCellsArchive::GetClassData() const { return &_class_data_; }

void CommandMoveCellsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandMoveCellsArchive *>(to)->MergeFrom(
      static_cast<const CommandMoveCellsArchive &>(from));
}


void CommandMoveCellsArchive::MergeFrom(const CommandMoveCellsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandMoveCellsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  formula_rewrite_commands_.MergeFrom(from.formula_rewrite_commands_);
  comment_storages_to_restore_.MergeFrom(from.comment_storages_to_restore_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dst_table_info_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_dst_table_info_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_src_uid_range()->::TSP::UUIDRectArchive::MergeFrom(from._internal_src_uid_range());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_dst_uid_range()->::TSP::UUIDRectArchive::MergeFrom(from._internal_dst_uid_range());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_src_cell_map()->::TSP::Reference::MergeFrom(from._internal_src_cell_map());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_dst_cell_map()->::TSP::Reference::MergeFrom(from._internal_dst_cell_map());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_dst_cell_styles_container()->::TSP::Reference::MergeFrom(from._internal_dst_cell_styles_container());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_src_undo_cell_map()->::TSP::Reference::MergeFrom(from._internal_src_undo_cell_map());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_dst_undo_cell_map()->::TSP::Reference::MergeFrom(from._internal_dst_undo_cell_map());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_merge_action_to_restore()->::TST::MergeOperationArchive::MergeFrom(from._internal_merge_action_to_restore());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_comment_cell_uids_to_restore()->::TST::CellUIDListArchive::MergeFrom(from._internal_comment_cell_uids_to_restore());
    }
    if (cached_has_bits & 0x00000800u) {
      table_dimension_ = from.table_dimension_;
    }
    if (cached_has_bits & 0x00001000u) {
      dst_merge_owner_rollback_index_ = from.dst_merge_owner_rollback_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandMoveCellsArchive::CopyFrom(const CommandMoveCellsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandMoveCellsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMoveCellsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(formula_rewrite_commands_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(comment_storages_to_restore_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_dst_table_info_id_path()) {
    if (!dst_table_info_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_src_uid_range()) {
    if (!src_uid_range_->IsInitialized()) return false;
  }
  if (_internal_has_dst_uid_range()) {
    if (!dst_uid_range_->IsInitialized()) return false;
  }
  if (_internal_has_src_cell_map()) {
    if (!src_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_dst_cell_map()) {
    if (!dst_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_dst_cell_styles_container()) {
    if (!dst_cell_styles_container_->IsInitialized()) return false;
  }
  if (_internal_has_src_undo_cell_map()) {
    if (!src_undo_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_dst_undo_cell_map()) {
    if (!dst_undo_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_merge_action_to_restore()) {
    if (!merge_action_to_restore_->IsInitialized()) return false;
  }
  if (_internal_has_comment_cell_uids_to_restore()) {
    if (!comment_cell_uids_to_restore_->IsInitialized()) return false;
  }
  return true;
}

void CommandMoveCellsArchive::InternalSwap(CommandMoveCellsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  formula_rewrite_commands_.InternalSwap(&other->formula_rewrite_commands_);
  comment_storages_to_restore_.InternalSwap(&other->comment_storages_to_restore_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMoveCellsArchive, dst_merge_owner_rollback_index_)
      + sizeof(CommandMoveCellsArchive::dst_merge_owner_rollback_index_)
      - PROTOBUF_FIELD_OFFSET(CommandMoveCellsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMoveCellsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[13]);
}

// ===================================================================

class ColumnRowMetadataArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnRowMetadataArchive>()._has_bits_);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hiding_action(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& cell_style(const ColumnRowMetadataArchive* msg);
  static void set_has_cell_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& text_style(const ColumnRowMetadataArchive* msg);
  static void set_has_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& uuid(const ColumnRowMetadataArchive* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000018) ^ 0x00000018) != 0;
  }
};

const ::TSP::Reference&
ColumnRowMetadataArchive::_Internal::cell_style(const ColumnRowMetadataArchive* msg) {
  return *msg->cell_style_;
}
const ::TSP::Reference&
ColumnRowMetadataArchive::_Internal::text_style(const ColumnRowMetadataArchive* msg) {
  return *msg->text_style_;
}
const ::TSP::UUID&
ColumnRowMetadataArchive::_Internal::uuid(const ColumnRowMetadataArchive* msg) {
  return *msg->uuid_;
}
void ColumnRowMetadataArchive::clear_cell_style() {
  if (cell_style_ != nullptr) cell_style_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ColumnRowMetadataArchive::clear_text_style() {
  if (text_style_ != nullptr) text_style_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ColumnRowMetadataArchive::clear_uuid() {
  if (uuid_ != nullptr) uuid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ColumnRowMetadataArchive::ColumnRowMetadataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ColumnRowMetadataArchive)
}
ColumnRowMetadataArchive::ColumnRowMetadataArchive(const ColumnRowMetadataArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_style()) {
    cell_style_ = new ::TSP::Reference(*from.cell_style_);
  } else {
    cell_style_ = nullptr;
  }
  if (from._internal_has_text_style()) {
    text_style_ = new ::TSP::Reference(*from.text_style_);
  } else {
    text_style_ = nullptr;
  }
  if (from._internal_has_uuid()) {
    uuid_ = new ::TSP::UUID(*from.uuid_);
  } else {
    uuid_ = nullptr;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&hiding_action_) -
    reinterpret_cast<char*>(&size_)) + sizeof(hiding_action_));
  // @@protoc_insertion_point(copy_constructor:TST.ColumnRowMetadataArchive)
}

inline void ColumnRowMetadataArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hiding_action_) -
    reinterpret_cast<char*>(&cell_style_)) + sizeof(hiding_action_));
}

ColumnRowMetadataArchive::~ColumnRowMetadataArchive() {
  // @@protoc_insertion_point(destructor:TST.ColumnRowMetadataArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColumnRowMetadataArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cell_style_;
  if (this != internal_default_instance()) delete text_style_;
  if (this != internal_default_instance()) delete uuid_;
}

void ColumnRowMetadataArchive::ArenaDtor(void* object) {
  ColumnRowMetadataArchive* _this = reinterpret_cast< ColumnRowMetadataArchive* >(object);
  (void)_this;
}
void ColumnRowMetadataArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColumnRowMetadataArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColumnRowMetadataArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ColumnRowMetadataArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cell_style_ != nullptr);
      cell_style_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(text_style_ != nullptr);
      text_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(uuid_ != nullptr);
      uuid_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hiding_action_) -
        reinterpret_cast<char*>(&size_)) + sizeof(hiding_action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnRowMetadataArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint32 hiding_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hiding_action(&has_bits);
          hiding_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference cell_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference text_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID uuid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnRowMetadataArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ColumnRowMetadataArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double size = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_size(), target);
  }

  // required uint32 hiding_action = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hiding_action(), target);
  }

  // optional .TSP.Reference cell_style = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cell_style(this), target, stream);
  }

  // optional .TSP.Reference text_style = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::text_style(this), target, stream);
  }

  // optional .TSP.UUID uuid = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::uuid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ColumnRowMetadataArchive)
  return target;
}

size_t ColumnRowMetadataArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.ColumnRowMetadataArchive)
  size_t total_size = 0;

  if (_internal_has_size()) {
    // required double size = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_hiding_action()) {
    // required uint32 hiding_action = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hiding_action());
  }

  return total_size;
}
size_t ColumnRowMetadataArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ColumnRowMetadataArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000018) ^ 0x00000018) == 0) {  // All required fields are present.
    // required double size = 1;
    total_size += 1 + 8;

    // required uint32 hiding_action = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hiding_action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference cell_style = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_style_);
    }

    // optional .TSP.Reference text_style = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_style_);
    }

    // optional .TSP.UUID uuid = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uuid_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnRowMetadataArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColumnRowMetadataArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnRowMetadataArchive::GetClassData() const { return &_class_data_; }

void ColumnRowMetadataArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ColumnRowMetadataArchive *>(to)->MergeFrom(
      static_cast<const ColumnRowMetadataArchive &>(from));
}


void ColumnRowMetadataArchive::MergeFrom(const ColumnRowMetadataArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ColumnRowMetadataArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cell_style()->::TSP::Reference::MergeFrom(from._internal_cell_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_text_style()->::TSP::Reference::MergeFrom(from._internal_text_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_uuid()->::TSP::UUID::MergeFrom(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000008u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000010u) {
      hiding_action_ = from.hiding_action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnRowMetadataArchive::CopyFrom(const ColumnRowMetadataArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ColumnRowMetadataArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnRowMetadataArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_cell_style()) {
    if (!cell_style_->IsInitialized()) return false;
  }
  if (_internal_has_text_style()) {
    if (!text_style_->IsInitialized()) return false;
  }
  if (_internal_has_uuid()) {
    if (!uuid_->IsInitialized()) return false;
  }
  return true;
}

void ColumnRowMetadataArchive::InternalSwap(ColumnRowMetadataArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnRowMetadataArchive, hiding_action_)
      + sizeof(ColumnRowMetadataArchive::hiding_action_)
      - PROTOBUF_FIELD_OFFSET(ColumnRowMetadataArchive, cell_style_)>(
          reinterpret_cast<char*>(&cell_style_),
          reinterpret_cast<char*>(&other->cell_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnRowMetadataArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[14]);
}

// ===================================================================

class CommandInsertColumnsOrRowsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandInsertColumnsOrRowsArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::ColumnRowBundleArchive& bundle(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_bundle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& cell_map(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_commands(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_undo_commands(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& undo_cell_map(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_undo_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TST::TableSortOrderUIDArchive& sort_order(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& filter_set(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_filter_set(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_should_edge_expand_formula_ranges(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_was_categorized(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::UUID& src_row_column_uid(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_src_row_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::UUID& opp_row_column_uid(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_opp_row_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000183) ^ 0x00000183) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandInsertColumnsOrRowsArchive::_Internal::super(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->super_;
}
const ::TST::ColumnRowBundleArchive&
CommandInsertColumnsOrRowsArchive::_Internal::bundle(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->bundle_;
}
const ::TSP::Reference&
CommandInsertColumnsOrRowsArchive::_Internal::cell_map(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->cell_map_;
}
const ::TSP::Reference&
CommandInsertColumnsOrRowsArchive::_Internal::undo_commands(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->undo_commands_;
}
const ::TSP::Reference&
CommandInsertColumnsOrRowsArchive::_Internal::undo_cell_map(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->undo_cell_map_;
}
const ::TST::TableSortOrderUIDArchive&
CommandInsertColumnsOrRowsArchive::_Internal::sort_order(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->sort_order_;
}
const ::TSP::Reference&
CommandInsertColumnsOrRowsArchive::_Internal::filter_set(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->filter_set_;
}
const ::TSP::UUID&
CommandInsertColumnsOrRowsArchive::_Internal::src_row_column_uid(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->src_row_column_uid_;
}
const ::TSP::UUID&
CommandInsertColumnsOrRowsArchive::_Internal::opp_row_column_uid(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->opp_row_column_uid_;
}
void CommandInsertColumnsOrRowsArchive::clear_cell_map() {
  if (cell_map_ != nullptr) cell_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandInsertColumnsOrRowsArchive::clear_undo_commands() {
  if (undo_commands_ != nullptr) undo_commands_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandInsertColumnsOrRowsArchive::clear_undo_cell_map() {
  if (undo_cell_map_ != nullptr) undo_cell_map_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CommandInsertColumnsOrRowsArchive::clear_sort_order() {
  if (sort_order_ != nullptr) sort_order_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void CommandInsertColumnsOrRowsArchive::clear_filter_set() {
  if (filter_set_ != nullptr) filter_set_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void CommandInsertColumnsOrRowsArchive::clear_undo_order() {
  undo_order_.Clear();
}
void CommandInsertColumnsOrRowsArchive::clear_src_row_column_uid() {
  if (src_row_column_uid_ != nullptr) src_row_column_uid_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void CommandInsertColumnsOrRowsArchive::clear_opp_row_column_uid() {
  if (opp_row_column_uid_ != nullptr) opp_row_column_uid_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
CommandInsertColumnsOrRowsArchive::CommandInsertColumnsOrRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  undo_order_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandInsertColumnsOrRowsArchive)
}
CommandInsertColumnsOrRowsArchive::CommandInsertColumnsOrRowsArchive(const CommandInsertColumnsOrRowsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      undo_order_(from.undo_order_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_bundle()) {
    bundle_ = new ::TST::ColumnRowBundleArchive(*from.bundle_);
  } else {
    bundle_ = nullptr;
  }
  if (from._internal_has_cell_map()) {
    cell_map_ = new ::TSP::Reference(*from.cell_map_);
  } else {
    cell_map_ = nullptr;
  }
  if (from._internal_has_undo_commands()) {
    undo_commands_ = new ::TSP::Reference(*from.undo_commands_);
  } else {
    undo_commands_ = nullptr;
  }
  if (from._internal_has_undo_cell_map()) {
    undo_cell_map_ = new ::TSP::Reference(*from.undo_cell_map_);
  } else {
    undo_cell_map_ = nullptr;
  }
  if (from._internal_has_sort_order()) {
    sort_order_ = new ::TST::TableSortOrderUIDArchive(*from.sort_order_);
  } else {
    sort_order_ = nullptr;
  }
  if (from._internal_has_filter_set()) {
    filter_set_ = new ::TSP::Reference(*from.filter_set_);
  } else {
    filter_set_ = nullptr;
  }
  if (from._internal_has_src_row_column_uid()) {
    src_row_column_uid_ = new ::TSP::UUID(*from.src_row_column_uid_);
  } else {
    src_row_column_uid_ = nullptr;
  }
  if (from._internal_has_opp_row_column_uid()) {
    opp_row_column_uid_ = new ::TSP::UUID(*from.opp_row_column_uid_);
  } else {
    opp_row_column_uid_ = nullptr;
  }
  ::memcpy(&should_edge_expand_formula_ranges_, &from.should_edge_expand_formula_ranges_,
    static_cast<size_t>(reinterpret_cast<char*>(&was_categorized_) -
    reinterpret_cast<char*>(&should_edge_expand_formula_ranges_)) + sizeof(was_categorized_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandInsertColumnsOrRowsArchive)
}

inline void CommandInsertColumnsOrRowsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&was_categorized_) -
    reinterpret_cast<char*>(&super_)) + sizeof(was_categorized_));
}

CommandInsertColumnsOrRowsArchive::~CommandInsertColumnsOrRowsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandInsertColumnsOrRowsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandInsertColumnsOrRowsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete bundle_;
  if (this != internal_default_instance()) delete cell_map_;
  if (this != internal_default_instance()) delete undo_commands_;
  if (this != internal_default_instance()) delete undo_cell_map_;
  if (this != internal_default_instance()) delete sort_order_;
  if (this != internal_default_instance()) delete filter_set_;
  if (this != internal_default_instance()) delete src_row_column_uid_;
  if (this != internal_default_instance()) delete opp_row_column_uid_;
}

void CommandInsertColumnsOrRowsArchive::ArenaDtor(void* object) {
  CommandInsertColumnsOrRowsArchive* _this = reinterpret_cast< CommandInsertColumnsOrRowsArchive* >(object);
  (void)_this;
}
void CommandInsertColumnsOrRowsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandInsertColumnsOrRowsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandInsertColumnsOrRowsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandInsertColumnsOrRowsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  undo_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bundle_ != nullptr);
      bundle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cell_map_ != nullptr);
      cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undo_commands_ != nullptr);
      undo_commands_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(undo_cell_map_ != nullptr);
      undo_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(sort_order_ != nullptr);
      sort_order_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(filter_set_ != nullptr);
      filter_set_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(src_row_column_uid_ != nullptr);
      src_row_column_uid_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(opp_row_column_uid_ != nullptr);
    opp_row_column_uid_->Clear();
  }
  ::memset(&should_edge_expand_formula_ranges_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&was_categorized_) -
      reinterpret_cast<char*>(&should_edge_expand_formula_ranges_)) + sizeof(was_categorized_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandInsertColumnsOrRowsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.ColumnRowBundleArchive bundle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bundle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference cell_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_commands = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_commands(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_cell_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.TableSortOrderUIDArchive sort_order = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sort_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference filter_set = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_edge_expand_formula_ranges = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_should_edge_expand_formula_ranges(&has_bits);
          should_edge_expand_formula_ranges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool was_categorized = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_was_categorized(&has_bits);
          was_categorized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID undo_order = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID src_row_column_uid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_row_column_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID opp_row_column_uid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_opp_row_column_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandInsertColumnsOrRowsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandInsertColumnsOrRowsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TST.ColumnRowBundleArchive bundle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bundle(this), target, stream);
  }

  // optional .TSP.Reference cell_map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cell_map(this), target, stream);
  }

  // optional .TSP.Reference undo_commands = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::undo_commands(this), target, stream);
  }

  // optional .TSP.Reference undo_cell_map = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::undo_cell_map(this), target, stream);
  }

  // optional .TST.TableSortOrderUIDArchive sort_order = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::sort_order(this), target, stream);
  }

  // optional .TSP.Reference filter_set = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::filter_set(this), target, stream);
  }

  // optional bool should_edge_expand_formula_ranges = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_should_edge_expand_formula_ranges(), target);
  }

  // optional bool was_categorized = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_was_categorized(), target);
  }

  // repeated .TSP.UUID undo_order = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_undo_order_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_undo_order(i), target, stream);
  }

  // required .TSP.UUID src_row_column_uid = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::src_row_column_uid(this), target, stream);
  }

  // required .TSP.UUID opp_row_column_uid = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::opp_row_column_uid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandInsertColumnsOrRowsArchive)
  return target;
}

size_t CommandInsertColumnsOrRowsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandInsertColumnsOrRowsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_bundle()) {
    // required .TST.ColumnRowBundleArchive bundle = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bundle_);
  }

  if (_internal_has_src_row_column_uid()) {
    // required .TSP.UUID src_row_column_uid = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_row_column_uid_);
  }

  if (_internal_has_opp_row_column_uid()) {
    // required .TSP.UUID opp_row_column_uid = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opp_row_column_uid_);
  }

  return total_size;
}
size_t CommandInsertColumnsOrRowsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandInsertColumnsOrRowsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000183) ^ 0x00000183) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TST.ColumnRowBundleArchive bundle = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bundle_);

    // required .TSP.UUID src_row_column_uid = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_row_column_uid_);

    // required .TSP.UUID opp_row_column_uid = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opp_row_column_uid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID undo_order = 10;
  total_size += 1UL * this->_internal_undo_order_size();
  for (const auto& msg : this->undo_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007cu) {
    // optional .TSP.Reference cell_map = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_map_);
    }

    // optional .TSP.Reference undo_commands = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_commands_);
    }

    // optional .TSP.Reference undo_cell_map = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_cell_map_);
    }

    // optional .TST.TableSortOrderUIDArchive sort_order = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sort_order_);
    }

    // optional .TSP.Reference filter_set = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_set_);
    }

  }
  if (cached_has_bits & 0x00000600u) {
    // optional bool should_edge_expand_formula_ranges = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool was_categorized = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandInsertColumnsOrRowsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandInsertColumnsOrRowsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandInsertColumnsOrRowsArchive::GetClassData() const { return &_class_data_; }

void CommandInsertColumnsOrRowsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandInsertColumnsOrRowsArchive *>(to)->MergeFrom(
      static_cast<const CommandInsertColumnsOrRowsArchive &>(from));
}


void CommandInsertColumnsOrRowsArchive::MergeFrom(const CommandInsertColumnsOrRowsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandInsertColumnsOrRowsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  undo_order_.MergeFrom(from.undo_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bundle()->::TST::ColumnRowBundleArchive::MergeFrom(from._internal_bundle());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cell_map()->::TSP::Reference::MergeFrom(from._internal_cell_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_undo_commands()->::TSP::Reference::MergeFrom(from._internal_undo_commands());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_undo_cell_map()->::TSP::Reference::MergeFrom(from._internal_undo_cell_map());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_sort_order()->::TST::TableSortOrderUIDArchive::MergeFrom(from._internal_sort_order());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_filter_set()->::TSP::Reference::MergeFrom(from._internal_filter_set());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_src_row_column_uid()->::TSP::UUID::MergeFrom(from._internal_src_row_column_uid());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_opp_row_column_uid()->::TSP::UUID::MergeFrom(from._internal_opp_row_column_uid());
    }
    if (cached_has_bits & 0x00000200u) {
      should_edge_expand_formula_ranges_ = from.should_edge_expand_formula_ranges_;
    }
    if (cached_has_bits & 0x00000400u) {
      was_categorized_ = from.was_categorized_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandInsertColumnsOrRowsArchive::CopyFrom(const CommandInsertColumnsOrRowsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandInsertColumnsOrRowsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandInsertColumnsOrRowsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(undo_order_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_bundle()) {
    if (!bundle_->IsInitialized()) return false;
  }
  if (_internal_has_cell_map()) {
    if (!cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_commands()) {
    if (!undo_commands_->IsInitialized()) return false;
  }
  if (_internal_has_undo_cell_map()) {
    if (!undo_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_sort_order()) {
    if (!sort_order_->IsInitialized()) return false;
  }
  if (_internal_has_filter_set()) {
    if (!filter_set_->IsInitialized()) return false;
  }
  if (_internal_has_src_row_column_uid()) {
    if (!src_row_column_uid_->IsInitialized()) return false;
  }
  if (_internal_has_opp_row_column_uid()) {
    if (!opp_row_column_uid_->IsInitialized()) return false;
  }
  return true;
}

void CommandInsertColumnsOrRowsArchive::InternalSwap(CommandInsertColumnsOrRowsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  undo_order_.InternalSwap(&other->undo_order_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, was_categorized_)
      + sizeof(CommandInsertColumnsOrRowsArchive::was_categorized_)
      - PROTOBUF_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandInsertColumnsOrRowsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[15]);
}

// ===================================================================

class ColumnRowBundleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnRowBundleArchive>()._has_bits_);
  static void set_has_is_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

void ColumnRowBundleArchive::clear_view_uid_list() {
  view_uid_list_.Clear();
}
void ColumnRowBundleArchive::clear_base_uid_list() {
  base_uid_list_.Clear();
}
void ColumnRowBundleArchive::clear_category_order_uid_list() {
  category_order_uid_list_.Clear();
}
ColumnRowBundleArchive::ColumnRowBundleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  view_uid_list_(arena),
  view_type_list_(arena),
  base_uid_list_(arena),
  base_type_list_(arena),
  category_order_uid_list_(arena),
  category_order_type_list_(arena),
  metadata_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ColumnRowBundleArchive)
}
ColumnRowBundleArchive::ColumnRowBundleArchive(const ColumnRowBundleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      view_uid_list_(from.view_uid_list_),
      view_type_list_(from.view_type_list_),
      base_uid_list_(from.base_uid_list_),
      base_type_list_(from.base_type_list_),
      category_order_uid_list_(from.category_order_uid_list_),
      category_order_type_list_(from.category_order_type_list_),
      metadata_list_(from.metadata_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_row_ = from.is_row_;
  // @@protoc_insertion_point(copy_constructor:TST.ColumnRowBundleArchive)
}

inline void ColumnRowBundleArchive::SharedCtor() {
is_row_ = false;
}

ColumnRowBundleArchive::~ColumnRowBundleArchive() {
  // @@protoc_insertion_point(destructor:TST.ColumnRowBundleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColumnRowBundleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColumnRowBundleArchive::ArenaDtor(void* object) {
  ColumnRowBundleArchive* _this = reinterpret_cast< ColumnRowBundleArchive* >(object);
  (void)_this;
}
void ColumnRowBundleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColumnRowBundleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColumnRowBundleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ColumnRowBundleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  view_uid_list_.Clear();
  view_type_list_.Clear();
  base_uid_list_.Clear();
  base_type_list_.Clear();
  category_order_uid_list_.Clear();
  category_order_type_list_.Clear();
  metadata_list_.Clear();
  is_row_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnRowBundleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool is_row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_row(&has_bits);
          is_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID view_uid_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_view_uid_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TST.ColumnRowTypeEnum view_type_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::TST::ColumnRowTypeEnum_IsValid(val))) {
              _internal_add_view_type_list(static_cast<::TST::ColumnRowTypeEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_view_type_list(), ptr, ctx, ::TST::ColumnRowTypeEnum_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID base_uid_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_base_uid_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TST.ColumnRowTypeEnum base_type_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::TST::ColumnRowTypeEnum_IsValid(val))) {
              _internal_add_base_type_list(static_cast<::TST::ColumnRowTypeEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_base_type_list(), ptr, ctx, ::TST::ColumnRowTypeEnum_IsValid, &_internal_metadata_, 5);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID category_order_uid_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category_order_uid_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TST.ColumnRowTypeEnum category_order_type_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::TST::ColumnRowTypeEnum_IsValid(val))) {
              _internal_add_category_order_type_list(static_cast<::TST::ColumnRowTypeEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_category_order_type_list(), ptr, ctx, ::TST::ColumnRowTypeEnum_IsValid, &_internal_metadata_, 7);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.ColumnRowMetadataArchive metadata_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnRowBundleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ColumnRowBundleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool is_row = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_row(), target);
  }

  // repeated .TSP.UUID view_uid_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_view_uid_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_view_uid_list(i), target, stream);
  }

  // repeated .TST.ColumnRowTypeEnum view_type_list = 3;
  for (int i = 0, n = this->_internal_view_type_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        3, this->_internal_view_type_list(i), target);
  }

  // repeated .TSP.UUID base_uid_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_base_uid_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_base_uid_list(i), target, stream);
  }

  // repeated .TST.ColumnRowTypeEnum base_type_list = 5;
  for (int i = 0, n = this->_internal_base_type_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        5, this->_internal_base_type_list(i), target);
  }

  // repeated .TSP.UUID category_order_uid_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_category_order_uid_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_category_order_uid_list(i), target, stream);
  }

  // repeated .TST.ColumnRowTypeEnum category_order_type_list = 7;
  for (int i = 0, n = this->_internal_category_order_type_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        7, this->_internal_category_order_type_list(i), target);
  }

  // repeated .TST.ColumnRowMetadataArchive metadata_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metadata_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_metadata_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ColumnRowBundleArchive)
  return target;
}

size_t ColumnRowBundleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ColumnRowBundleArchive)
  size_t total_size = 0;

  // required bool is_row = 1;
  if (_internal_has_is_row()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID view_uid_list = 2;
  total_size += 1UL * this->_internal_view_uid_list_size();
  for (const auto& msg : this->view_uid_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.ColumnRowTypeEnum view_type_list = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_view_type_list_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_view_type_list(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .TSP.UUID base_uid_list = 4;
  total_size += 1UL * this->_internal_base_uid_list_size();
  for (const auto& msg : this->base_uid_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.ColumnRowTypeEnum base_type_list = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_base_type_list_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_base_type_list(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .TSP.UUID category_order_uid_list = 6;
  total_size += 1UL * this->_internal_category_order_uid_list_size();
  for (const auto& msg : this->category_order_uid_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.ColumnRowTypeEnum category_order_type_list = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_category_order_type_list_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_category_order_type_list(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .TST.ColumnRowMetadataArchive metadata_list = 8;
  total_size += 1UL * this->_internal_metadata_list_size();
  for (const auto& msg : this->metadata_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnRowBundleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColumnRowBundleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnRowBundleArchive::GetClassData() const { return &_class_data_; }

void ColumnRowBundleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ColumnRowBundleArchive *>(to)->MergeFrom(
      static_cast<const ColumnRowBundleArchive &>(from));
}


void ColumnRowBundleArchive::MergeFrom(const ColumnRowBundleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ColumnRowBundleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  view_uid_list_.MergeFrom(from.view_uid_list_);
  view_type_list_.MergeFrom(from.view_type_list_);
  base_uid_list_.MergeFrom(from.base_uid_list_);
  base_type_list_.MergeFrom(from.base_type_list_);
  category_order_uid_list_.MergeFrom(from.category_order_uid_list_);
  category_order_type_list_.MergeFrom(from.category_order_type_list_);
  metadata_list_.MergeFrom(from.metadata_list_);
  if (from._internal_has_is_row()) {
    _internal_set_is_row(from._internal_is_row());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnRowBundleArchive::CopyFrom(const ColumnRowBundleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ColumnRowBundleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnRowBundleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(view_uid_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(base_uid_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(category_order_uid_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(metadata_list_)) return false;
  return true;
}

void ColumnRowBundleArchive::InternalSwap(ColumnRowBundleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  view_uid_list_.InternalSwap(&other->view_uid_list_);
  view_type_list_.InternalSwap(&other->view_type_list_);
  base_uid_list_.InternalSwap(&other->base_uid_list_);
  base_type_list_.InternalSwap(&other->base_type_list_);
  category_order_uid_list_.InternalSwap(&other->category_order_uid_list_);
  category_order_type_list_.InternalSwap(&other->category_order_type_list_);
  metadata_list_.InternalSwap(&other->metadata_list_);
  swap(is_row_, other->is_row_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnRowBundleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[16]);
}

// ===================================================================

class CommandRemoveColumnsOrRowsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRemoveColumnsOrRowsArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRemoveColumnsOrRowsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::ColumnRowBundleArchive& bundle(const CommandRemoveColumnsOrRowsArchive* msg);
  static void set_has_bundle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& cell_map(const CommandRemoveColumnsOrRowsArchive* msg);
  static void set_has_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_cell_map(const CommandRemoveColumnsOrRowsArchive* msg);
  static void set_has_undo_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& undo_filter_set(const CommandRemoveColumnsOrRowsArchive* msg);
  static void set_has_undo_filter_set(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TST::TableSortOrderUIDArchive& undo_sort_order(const CommandRemoveColumnsOrRowsArchive* msg);
  static void set_has_undo_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& formula_rewrite_command_for_undo(const CommandRemoveColumnsOrRowsArchive* msg);
  static void set_has_formula_rewrite_command_for_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_inverse_should_edge_expand_formula_ranges(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRemoveColumnsOrRowsArchive::_Internal::super(const CommandRemoveColumnsOrRowsArchive* msg) {
  return *msg->super_;
}
const ::TST::ColumnRowBundleArchive&
CommandRemoveColumnsOrRowsArchive::_Internal::bundle(const CommandRemoveColumnsOrRowsArchive* msg) {
  return *msg->bundle_;
}
const ::TSP::Reference&
CommandRemoveColumnsOrRowsArchive::_Internal::cell_map(const CommandRemoveColumnsOrRowsArchive* msg) {
  return *msg->cell_map_;
}
const ::TSP::Reference&
CommandRemoveColumnsOrRowsArchive::_Internal::undo_cell_map(const CommandRemoveColumnsOrRowsArchive* msg) {
  return *msg->undo_cell_map_;
}
const ::TSP::Reference&
CommandRemoveColumnsOrRowsArchive::_Internal::undo_filter_set(const CommandRemoveColumnsOrRowsArchive* msg) {
  return *msg->undo_filter_set_;
}
const ::TST::TableSortOrderUIDArchive&
CommandRemoveColumnsOrRowsArchive::_Internal::undo_sort_order(const CommandRemoveColumnsOrRowsArchive* msg) {
  return *msg->undo_sort_order_;
}
const ::TSP::Reference&
CommandRemoveColumnsOrRowsArchive::_Internal::formula_rewrite_command_for_undo(const CommandRemoveColumnsOrRowsArchive* msg) {
  return *msg->formula_rewrite_command_for_undo_;
}
void CommandRemoveColumnsOrRowsArchive::clear_cell_map() {
  if (cell_map_ != nullptr) cell_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandRemoveColumnsOrRowsArchive::clear_undo_cell_map() {
  if (undo_cell_map_ != nullptr) undo_cell_map_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandRemoveColumnsOrRowsArchive::clear_undo_filter_set() {
  if (undo_filter_set_ != nullptr) undo_filter_set_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CommandRemoveColumnsOrRowsArchive::clear_undo_sort_order() {
  if (undo_sort_order_ != nullptr) undo_sort_order_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void CommandRemoveColumnsOrRowsArchive::clear_formula_rewrite_command_for_undo() {
  if (formula_rewrite_command_for_undo_ != nullptr) formula_rewrite_command_for_undo_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void CommandRemoveColumnsOrRowsArchive::clear_undo_order() {
  undo_order_.Clear();
}
CommandRemoveColumnsOrRowsArchive::CommandRemoveColumnsOrRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  undo_order_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandRemoveColumnsOrRowsArchive)
}
CommandRemoveColumnsOrRowsArchive::CommandRemoveColumnsOrRowsArchive(const CommandRemoveColumnsOrRowsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      undo_order_(from.undo_order_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_bundle()) {
    bundle_ = new ::TST::ColumnRowBundleArchive(*from.bundle_);
  } else {
    bundle_ = nullptr;
  }
  if (from._internal_has_cell_map()) {
    cell_map_ = new ::TSP::Reference(*from.cell_map_);
  } else {
    cell_map_ = nullptr;
  }
  if (from._internal_has_undo_cell_map()) {
    undo_cell_map_ = new ::TSP::Reference(*from.undo_cell_map_);
  } else {
    undo_cell_map_ = nullptr;
  }
  if (from._internal_has_undo_filter_set()) {
    undo_filter_set_ = new ::TSP::Reference(*from.undo_filter_set_);
  } else {
    undo_filter_set_ = nullptr;
  }
  if (from._internal_has_undo_sort_order()) {
    undo_sort_order_ = new ::TST::TableSortOrderUIDArchive(*from.undo_sort_order_);
  } else {
    undo_sort_order_ = nullptr;
  }
  if (from._internal_has_formula_rewrite_command_for_undo()) {
    formula_rewrite_command_for_undo_ = new ::TSP::Reference(*from.formula_rewrite_command_for_undo_);
  } else {
    formula_rewrite_command_for_undo_ = nullptr;
  }
  inverse_should_edge_expand_formula_ranges_ = from.inverse_should_edge_expand_formula_ranges_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandRemoveColumnsOrRowsArchive)
}

inline void CommandRemoveColumnsOrRowsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inverse_should_edge_expand_formula_ranges_) -
    reinterpret_cast<char*>(&super_)) + sizeof(inverse_should_edge_expand_formula_ranges_));
}

CommandRemoveColumnsOrRowsArchive::~CommandRemoveColumnsOrRowsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRemoveColumnsOrRowsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandRemoveColumnsOrRowsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete bundle_;
  if (this != internal_default_instance()) delete cell_map_;
  if (this != internal_default_instance()) delete undo_cell_map_;
  if (this != internal_default_instance()) delete undo_filter_set_;
  if (this != internal_default_instance()) delete undo_sort_order_;
  if (this != internal_default_instance()) delete formula_rewrite_command_for_undo_;
}

void CommandRemoveColumnsOrRowsArchive::ArenaDtor(void* object) {
  CommandRemoveColumnsOrRowsArchive* _this = reinterpret_cast< CommandRemoveColumnsOrRowsArchive* >(object);
  (void)_this;
}
void CommandRemoveColumnsOrRowsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandRemoveColumnsOrRowsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandRemoveColumnsOrRowsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRemoveColumnsOrRowsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  undo_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bundle_ != nullptr);
      bundle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cell_map_ != nullptr);
      cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undo_cell_map_ != nullptr);
      undo_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(undo_filter_set_ != nullptr);
      undo_filter_set_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(undo_sort_order_ != nullptr);
      undo_sort_order_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(formula_rewrite_command_for_undo_ != nullptr);
      formula_rewrite_command_for_undo_->Clear();
    }
  }
  inverse_should_edge_expand_formula_ranges_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRemoveColumnsOrRowsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.ColumnRowBundleArchive bundle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bundle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference cell_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_cell_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_filter_set = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_filter_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.TableSortOrderUIDArchive undo_sort_order = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_sort_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference formula_rewrite_command_for_undo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_rewrite_command_for_undo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool inverse_should_edge_expand_formula_ranges = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_inverse_should_edge_expand_formula_ranges(&has_bits);
          inverse_should_edge_expand_formula_ranges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID undo_order = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRemoveColumnsOrRowsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRemoveColumnsOrRowsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TST.ColumnRowBundleArchive bundle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bundle(this), target, stream);
  }

  // optional .TSP.Reference cell_map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cell_map(this), target, stream);
  }

  // optional .TSP.Reference undo_cell_map = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::undo_cell_map(this), target, stream);
  }

  // optional .TSP.Reference undo_filter_set = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::undo_filter_set(this), target, stream);
  }

  // optional .TST.TableSortOrderUIDArchive undo_sort_order = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::undo_sort_order(this), target, stream);
  }

  // optional .TSP.Reference formula_rewrite_command_for_undo = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::formula_rewrite_command_for_undo(this), target, stream);
  }

  // optional bool inverse_should_edge_expand_formula_ranges = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_inverse_should_edge_expand_formula_ranges(), target);
  }

  // repeated .TSP.UUID undo_order = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_undo_order_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_undo_order(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRemoveColumnsOrRowsArchive)
  return target;
}

size_t CommandRemoveColumnsOrRowsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRemoveColumnsOrRowsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_bundle()) {
    // required .TST.ColumnRowBundleArchive bundle = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bundle_);
  }

  return total_size;
}
size_t CommandRemoveColumnsOrRowsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRemoveColumnsOrRowsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TST.ColumnRowBundleArchive bundle = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bundle_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID undo_order = 9;
  total_size += 1UL * this->_internal_undo_order_size();
  for (const auto& msg : this->undo_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    // optional .TSP.Reference cell_map = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_map_);
    }

    // optional .TSP.Reference undo_cell_map = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_cell_map_);
    }

    // optional .TSP.Reference undo_filter_set = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_filter_set_);
    }

    // optional .TST.TableSortOrderUIDArchive undo_sort_order = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_sort_order_);
    }

    // optional .TSP.Reference formula_rewrite_command_for_undo = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *formula_rewrite_command_for_undo_);
    }

    // optional bool inverse_should_edge_expand_formula_ranges = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRemoveColumnsOrRowsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandRemoveColumnsOrRowsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRemoveColumnsOrRowsArchive::GetClassData() const { return &_class_data_; }

void CommandRemoveColumnsOrRowsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandRemoveColumnsOrRowsArchive *>(to)->MergeFrom(
      static_cast<const CommandRemoveColumnsOrRowsArchive &>(from));
}


void CommandRemoveColumnsOrRowsArchive::MergeFrom(const CommandRemoveColumnsOrRowsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRemoveColumnsOrRowsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  undo_order_.MergeFrom(from.undo_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bundle()->::TST::ColumnRowBundleArchive::MergeFrom(from._internal_bundle());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cell_map()->::TSP::Reference::MergeFrom(from._internal_cell_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_undo_cell_map()->::TSP::Reference::MergeFrom(from._internal_undo_cell_map());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_undo_filter_set()->::TSP::Reference::MergeFrom(from._internal_undo_filter_set());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_undo_sort_order()->::TST::TableSortOrderUIDArchive::MergeFrom(from._internal_undo_sort_order());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_formula_rewrite_command_for_undo()->::TSP::Reference::MergeFrom(from._internal_formula_rewrite_command_for_undo());
    }
    if (cached_has_bits & 0x00000080u) {
      inverse_should_edge_expand_formula_ranges_ = from.inverse_should_edge_expand_formula_ranges_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRemoveColumnsOrRowsArchive::CopyFrom(const CommandRemoveColumnsOrRowsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRemoveColumnsOrRowsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRemoveColumnsOrRowsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(undo_order_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_bundle()) {
    if (!bundle_->IsInitialized()) return false;
  }
  if (_internal_has_cell_map()) {
    if (!cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_cell_map()) {
    if (!undo_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_filter_set()) {
    if (!undo_filter_set_->IsInitialized()) return false;
  }
  if (_internal_has_undo_sort_order()) {
    if (!undo_sort_order_->IsInitialized()) return false;
  }
  if (_internal_has_formula_rewrite_command_for_undo()) {
    if (!formula_rewrite_command_for_undo_->IsInitialized()) return false;
  }
  return true;
}

void CommandRemoveColumnsOrRowsArchive::InternalSwap(CommandRemoveColumnsOrRowsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  undo_order_.InternalSwap(&other->undo_order_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, inverse_should_edge_expand_formula_ranges_)
      + sizeof(CommandRemoveColumnsOrRowsArchive::inverse_should_edge_expand_formula_ranges_)
      - PROTOBUF_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRemoveColumnsOrRowsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[17]);
}

// ===================================================================

class CommandRowColumnRangeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRowColumnRangeArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRowColumnRangeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_row(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRowColumnRangeArchive::_Internal::super(const CommandRowColumnRangeArchive* msg) {
  return *msg->super_;
}
void CommandRowColumnRangeArchive::clear_uids() {
  uids_.Clear();
}
CommandRowColumnRangeArchive::CommandRowColumnRangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  uids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandRowColumnRangeArchive)
}
CommandRowColumnRangeArchive::CommandRowColumnRangeArchive(const CommandRowColumnRangeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      uids_(from.uids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  is_row_ = from.is_row_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandRowColumnRangeArchive)
}

inline void CommandRowColumnRangeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_row_) -
    reinterpret_cast<char*>(&super_)) + sizeof(is_row_));
}

CommandRowColumnRangeArchive::~CommandRowColumnRangeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRowColumnRangeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandRowColumnRangeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandRowColumnRangeArchive::ArenaDtor(void* object) {
  CommandRowColumnRangeArchive* _this = reinterpret_cast< CommandRowColumnRangeArchive* >(object);
  (void)_this;
}
void CommandRowColumnRangeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandRowColumnRangeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandRowColumnRangeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRowColumnRangeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  is_row_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRowColumnRangeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool is_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_row(&has_bits);
          is_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRowColumnRangeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRowColumnRangeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.UUID uids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_uids(i), target, stream);
  }

  // required bool is_row = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRowColumnRangeArchive)
  return target;
}

size_t CommandRowColumnRangeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRowColumnRangeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_is_row()) {
    // required bool is_row = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandRowColumnRangeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRowColumnRangeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required bool is_row = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uids = 2;
  total_size += 1UL * this->_internal_uids_size();
  for (const auto& msg : this->uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRowColumnRangeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandRowColumnRangeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRowColumnRangeArchive::GetClassData() const { return &_class_data_; }

void CommandRowColumnRangeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandRowColumnRangeArchive *>(to)->MergeFrom(
      static_cast<const CommandRowColumnRangeArchive &>(from));
}


void CommandRowColumnRangeArchive::MergeFrom(const CommandRowColumnRangeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRowColumnRangeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uids_.MergeFrom(from.uids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      is_row_ = from.is_row_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRowColumnRangeArchive::CopyFrom(const CommandRowColumnRangeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRowColumnRangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRowColumnRangeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(uids_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandRowColumnRangeArchive::InternalSwap(CommandRowColumnRangeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uids_.InternalSwap(&other->uids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRowColumnRangeArchive, is_row_)
      + sizeof(CommandRowColumnRangeArchive::is_row_)
      - PROTOBUF_FIELD_OFFSET(CommandRowColumnRangeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRowColumnRangeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[18]);
}

// ===================================================================

class CommandResizeColumnOrRowArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandResizeColumnOrRowArchive>()._has_bits_);
  static const ::TST::CommandRowColumnRangeArchive& super(const CommandResizeColumnOrRowArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::CommandRowColumnRangeArchive&
CommandResizeColumnOrRowArchive::_Internal::super(const CommandResizeColumnOrRowArchive* msg) {
  return *msg->super_;
}
CommandResizeColumnOrRowArchive::CommandResizeColumnOrRowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sizes_(arena),
  sizes_for_undo_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandResizeColumnOrRowArchive)
}
CommandResizeColumnOrRowArchive::CommandResizeColumnOrRowArchive(const CommandResizeColumnOrRowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sizes_(from.sizes_),
      sizes_for_undo_(from.sizes_for_undo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::CommandRowColumnRangeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandResizeColumnOrRowArchive)
}

inline void CommandResizeColumnOrRowArchive::SharedCtor() {
super_ = nullptr;
}

CommandResizeColumnOrRowArchive::~CommandResizeColumnOrRowArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandResizeColumnOrRowArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandResizeColumnOrRowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandResizeColumnOrRowArchive::ArenaDtor(void* object) {
  CommandResizeColumnOrRowArchive* _this = reinterpret_cast< CommandResizeColumnOrRowArchive* >(object);
  (void)_this;
}
void CommandResizeColumnOrRowArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandResizeColumnOrRowArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandResizeColumnOrRowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandResizeColumnOrRowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sizes_.Clear();
  sizes_for_undo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandResizeColumnOrRowArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandRowColumnRangeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float sizes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sizes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_sizes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float sizes_for_undo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sizes_for_undo(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_sizes_for_undo(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandResizeColumnOrRowArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandResizeColumnOrRowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CommandRowColumnRangeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated float sizes = 2;
  for (int i = 0, n = this->_internal_sizes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_sizes(i), target);
  }

  // repeated float sizes_for_undo = 3;
  for (int i = 0, n = this->_internal_sizes_for_undo_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_sizes_for_undo(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandResizeColumnOrRowArchive)
  return target;
}

size_t CommandResizeColumnOrRowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandResizeColumnOrRowArchive)
  size_t total_size = 0;

  // required .TST.CommandRowColumnRangeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float sizes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sizes_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sizes_size());
    total_size += data_size;
  }

  // repeated float sizes_for_undo = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sizes_for_undo_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sizes_for_undo_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandResizeColumnOrRowArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandResizeColumnOrRowArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandResizeColumnOrRowArchive::GetClassData() const { return &_class_data_; }

void CommandResizeColumnOrRowArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandResizeColumnOrRowArchive *>(to)->MergeFrom(
      static_cast<const CommandResizeColumnOrRowArchive &>(from));
}


void CommandResizeColumnOrRowArchive::MergeFrom(const CommandResizeColumnOrRowArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandResizeColumnOrRowArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sizes_.MergeFrom(from.sizes_);
  sizes_for_undo_.MergeFrom(from.sizes_for_undo_);
  if (from._internal_has_super()) {
    _internal_mutable_super()->::TST::CommandRowColumnRangeArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandResizeColumnOrRowArchive::CopyFrom(const CommandResizeColumnOrRowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandResizeColumnOrRowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandResizeColumnOrRowArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandResizeColumnOrRowArchive::InternalSwap(CommandResizeColumnOrRowArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sizes_.InternalSwap(&other->sizes_);
  sizes_for_undo_.InternalSwap(&other->sizes_for_undo_);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandResizeColumnOrRowArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[19]);
}

// ===================================================================

class CommandCategoryResizeColumnOrRowArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandCategoryResizeColumnOrRowArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandCategoryResizeColumnOrRowArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_category_column_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_category_column_size_for_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandCategoryResizeColumnOrRowArchive::_Internal::super(const CommandCategoryResizeColumnOrRowArchive* msg) {
  return *msg->super_;
}
CommandCategoryResizeColumnOrRowArchive::CommandCategoryResizeColumnOrRowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  category_row_sizes_(arena),
  category_row_sizes_for_undo_(arena),
  category_label_row_sizes_(arena),
  category_label_row_sizes_for_undo_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandCategoryResizeColumnOrRowArchive)
}
CommandCategoryResizeColumnOrRowArchive::CommandCategoryResizeColumnOrRowArchive(const CommandCategoryResizeColumnOrRowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      category_row_sizes_(from.category_row_sizes_),
      category_row_sizes_for_undo_(from.category_row_sizes_for_undo_),
      category_label_row_sizes_(from.category_label_row_sizes_),
      category_label_row_sizes_for_undo_(from.category_label_row_sizes_for_undo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&category_column_size_, &from.category_column_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&category_column_size_for_undo_) -
    reinterpret_cast<char*>(&category_column_size_)) + sizeof(category_column_size_for_undo_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandCategoryResizeColumnOrRowArchive)
}

inline void CommandCategoryResizeColumnOrRowArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&category_column_size_for_undo_) -
    reinterpret_cast<char*>(&super_)) + sizeof(category_column_size_for_undo_));
}

CommandCategoryResizeColumnOrRowArchive::~CommandCategoryResizeColumnOrRowArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandCategoryResizeColumnOrRowArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandCategoryResizeColumnOrRowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandCategoryResizeColumnOrRowArchive::ArenaDtor(void* object) {
  CommandCategoryResizeColumnOrRowArchive* _this = reinterpret_cast< CommandCategoryResizeColumnOrRowArchive* >(object);
  (void)_this;
}
void CommandCategoryResizeColumnOrRowArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandCategoryResizeColumnOrRowArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandCategoryResizeColumnOrRowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandCategoryResizeColumnOrRowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_row_sizes_.Clear();
  category_row_sizes_for_undo_.Clear();
  category_label_row_sizes_.Clear();
  category_label_row_sizes_for_undo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&category_column_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&category_column_size_for_undo_) -
        reinterpret_cast<char*>(&category_column_size_)) + sizeof(category_column_size_for_undo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandCategoryResizeColumnOrRowArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float category_row_sizes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_category_row_sizes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_category_row_sizes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float category_row_sizes_for_undo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_category_row_sizes_for_undo(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_category_row_sizes_for_undo(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float category_label_row_sizes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_category_label_row_sizes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_category_label_row_sizes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float category_label_row_sizes_for_undo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_category_label_row_sizes_for_undo(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_category_label_row_sizes_for_undo(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double category_column_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_category_column_size(&has_bits);
          category_column_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double category_column_size_for_undo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_category_column_size_for_undo(&has_bits);
          category_column_size_for_undo_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandCategoryResizeColumnOrRowArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandCategoryResizeColumnOrRowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated float category_row_sizes = 2;
  for (int i = 0, n = this->_internal_category_row_sizes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_category_row_sizes(i), target);
  }

  // repeated float category_row_sizes_for_undo = 3;
  for (int i = 0, n = this->_internal_category_row_sizes_for_undo_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_category_row_sizes_for_undo(i), target);
  }

  // repeated float category_label_row_sizes = 4;
  for (int i = 0, n = this->_internal_category_label_row_sizes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_category_label_row_sizes(i), target);
  }

  // repeated float category_label_row_sizes_for_undo = 5;
  for (int i = 0, n = this->_internal_category_label_row_sizes_for_undo_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_category_label_row_sizes_for_undo(i), target);
  }

  // optional double category_column_size = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_category_column_size(), target);
  }

  // optional double category_column_size_for_undo = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_category_column_size_for_undo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandCategoryResizeColumnOrRowArchive)
  return target;
}

size_t CommandCategoryResizeColumnOrRowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandCategoryResizeColumnOrRowArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float category_row_sizes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_category_row_sizes_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_category_row_sizes_size());
    total_size += data_size;
  }

  // repeated float category_row_sizes_for_undo = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_category_row_sizes_for_undo_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_category_row_sizes_for_undo_size());
    total_size += data_size;
  }

  // repeated float category_label_row_sizes = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_category_label_row_sizes_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_category_label_row_sizes_size());
    total_size += data_size;
  }

  // repeated float category_label_row_sizes_for_undo = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_category_label_row_sizes_for_undo_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_category_label_row_sizes_for_undo_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional double category_column_size = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double category_column_size_for_undo = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandCategoryResizeColumnOrRowArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandCategoryResizeColumnOrRowArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandCategoryResizeColumnOrRowArchive::GetClassData() const { return &_class_data_; }

void CommandCategoryResizeColumnOrRowArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandCategoryResizeColumnOrRowArchive *>(to)->MergeFrom(
      static_cast<const CommandCategoryResizeColumnOrRowArchive &>(from));
}


void CommandCategoryResizeColumnOrRowArchive::MergeFrom(const CommandCategoryResizeColumnOrRowArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandCategoryResizeColumnOrRowArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  category_row_sizes_.MergeFrom(from.category_row_sizes_);
  category_row_sizes_for_undo_.MergeFrom(from.category_row_sizes_for_undo_);
  category_label_row_sizes_.MergeFrom(from.category_label_row_sizes_);
  category_label_row_sizes_for_undo_.MergeFrom(from.category_label_row_sizes_for_undo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      category_column_size_ = from.category_column_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      category_column_size_for_undo_ = from.category_column_size_for_undo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandCategoryResizeColumnOrRowArchive::CopyFrom(const CommandCategoryResizeColumnOrRowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandCategoryResizeColumnOrRowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandCategoryResizeColumnOrRowArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandCategoryResizeColumnOrRowArchive::InternalSwap(CommandCategoryResizeColumnOrRowArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  category_row_sizes_.InternalSwap(&other->category_row_sizes_);
  category_row_sizes_for_undo_.InternalSwap(&other->category_row_sizes_for_undo_);
  category_label_row_sizes_.InternalSwap(&other->category_label_row_sizes_);
  category_label_row_sizes_for_undo_.InternalSwap(&other->category_label_row_sizes_for_undo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandCategoryResizeColumnOrRowArchive, category_column_size_for_undo_)
      + sizeof(CommandCategoryResizeColumnOrRowArchive::category_column_size_for_undo_)
      - PROTOBUF_FIELD_OFFSET(CommandCategoryResizeColumnOrRowArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandCategoryResizeColumnOrRowArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[20]);
}

// ===================================================================

class CommandHideShowArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandHideShowArchive>()._has_bits_);
  static const ::TST::CommandRowColumnRangeArchive& super(const CommandHideShowArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hide_show_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hiding_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::CommandRowColumnRangeArchive&
CommandHideShowArchive::_Internal::super(const CommandHideShowArchive* msg) {
  return *msg->super_;
}
CommandHideShowArchive::CommandHideShowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  hide_show_action_for_undo_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandHideShowArchive)
}
CommandHideShowArchive::CommandHideShowArchive(const CommandHideShowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      hide_show_action_for_undo_(from.hide_show_action_for_undo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::CommandRowColumnRangeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&hide_show_action_, &from.hide_show_action_,
    static_cast<size_t>(reinterpret_cast<char*>(&hiding_action_) -
    reinterpret_cast<char*>(&hide_show_action_)) + sizeof(hiding_action_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandHideShowArchive)
}

inline void CommandHideShowArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hiding_action_) -
    reinterpret_cast<char*>(&super_)) + sizeof(hiding_action_));
}

CommandHideShowArchive::~CommandHideShowArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandHideShowArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandHideShowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandHideShowArchive::ArenaDtor(void* object) {
  CommandHideShowArchive* _this = reinterpret_cast< CommandHideShowArchive* >(object);
  (void)_this;
}
void CommandHideShowArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandHideShowArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandHideShowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandHideShowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hide_show_action_for_undo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&hide_show_action_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hiding_action_) -
        reinterpret_cast<char*>(&hide_show_action_)) + sizeof(hiding_action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandHideShowArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandRowColumnRangeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.HideShowActionArchive hide_show_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::HideShowActionArchive_IsValid(val))) {
            _internal_set_hide_show_action(static_cast<::TST::HideShowActionArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 hiding_action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hiding_action(&has_bits);
          hiding_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.HideShowActionArchive hide_show_action_for_undo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::TST::HideShowActionArchive_IsValid(val))) {
              _internal_add_hide_show_action_for_undo(static_cast<::TST::HideShowActionArchive>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_hide_show_action_for_undo(), ptr, ctx, ::TST::HideShowActionArchive_IsValid, &_internal_metadata_, 4);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandHideShowArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandHideShowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CommandRowColumnRangeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TST.HideShowActionArchive hide_show_action = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_hide_show_action(), target);
  }

  // required uint32 hiding_action = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hiding_action(), target);
  }

  // repeated .TST.HideShowActionArchive hide_show_action_for_undo = 4;
  for (int i = 0, n = this->_internal_hide_show_action_for_undo_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        4, this->_internal_hide_show_action_for_undo(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandHideShowArchive)
  return target;
}

size_t CommandHideShowArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandHideShowArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandRowColumnRangeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_hide_show_action()) {
    // required .TST.HideShowActionArchive hide_show_action = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hide_show_action());
  }

  if (_internal_has_hiding_action()) {
    // required uint32 hiding_action = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hiding_action());
  }

  return total_size;
}
size_t CommandHideShowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandHideShowArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.CommandRowColumnRangeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TST.HideShowActionArchive hide_show_action = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hide_show_action());

    // required uint32 hiding_action = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hiding_action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.HideShowActionArchive hide_show_action_for_undo = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_hide_show_action_for_undo_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_hide_show_action_for_undo(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandHideShowArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandHideShowArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandHideShowArchive::GetClassData() const { return &_class_data_; }

void CommandHideShowArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandHideShowArchive *>(to)->MergeFrom(
      static_cast<const CommandHideShowArchive &>(from));
}


void CommandHideShowArchive::MergeFrom(const CommandHideShowArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandHideShowArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hide_show_action_for_undo_.MergeFrom(from.hide_show_action_for_undo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::CommandRowColumnRangeArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      hide_show_action_ = from.hide_show_action_;
    }
    if (cached_has_bits & 0x00000004u) {
      hiding_action_ = from.hiding_action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandHideShowArchive::CopyFrom(const CommandHideShowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandHideShowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandHideShowArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandHideShowArchive::InternalSwap(CommandHideShowArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hide_show_action_for_undo_.InternalSwap(&other->hide_show_action_for_undo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandHideShowArchive, hiding_action_)
      + sizeof(CommandHideShowArchive::hiding_action_)
      - PROTOBUF_FIELD_OFFSET(CommandHideShowArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandHideShowArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[21]);
}

// ===================================================================

class CommandTextPreflightInsertCellArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandTextPreflightInsertCellArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandTextPreflightInsertCellArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& coalesced_textcommand(const CommandTextPreflightInsertCellArchive* msg);
  static void set_has_coalesced_textcommand(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& postflightcommand(const CommandTextPreflightInsertCellArchive* msg);
  static void set_has_postflightcommand(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_grouped_with_postflight(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TST::Cell& editing_cell(const CommandTextPreflightInsertCellArchive* msg);
  static void set_has_editing_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& editing_storage(const CommandTextPreflightInsertCellArchive* msg);
  static void set_has_editing_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_column_hit_by_tap(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::UUIDCoordArchive& cell_uid(const CommandTextPreflightInsertCellArchive* msg);
  static void set_has_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSK::SelectionPathArchive& archived_initial_selection_path(const CommandTextPreflightInsertCellArchive* msg);
  static void set_has_archived_initial_selection_path(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000039) ^ 0x00000039) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandTextPreflightInsertCellArchive::_Internal::super(const CommandTextPreflightInsertCellArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandTextPreflightInsertCellArchive::_Internal::coalesced_textcommand(const CommandTextPreflightInsertCellArchive* msg) {
  return *msg->coalesced_textcommand_;
}
const ::TSP::Reference&
CommandTextPreflightInsertCellArchive::_Internal::postflightcommand(const CommandTextPreflightInsertCellArchive* msg) {
  return *msg->postflightcommand_;
}
const ::TST::Cell&
CommandTextPreflightInsertCellArchive::_Internal::editing_cell(const CommandTextPreflightInsertCellArchive* msg) {
  return *msg->editing_cell_;
}
const ::TSP::Reference&
CommandTextPreflightInsertCellArchive::_Internal::editing_storage(const CommandTextPreflightInsertCellArchive* msg) {
  return *msg->editing_storage_;
}
const ::TSP::UUIDCoordArchive&
CommandTextPreflightInsertCellArchive::_Internal::cell_uid(const CommandTextPreflightInsertCellArchive* msg) {
  return *msg->cell_uid_;
}
const ::TSK::SelectionPathArchive&
CommandTextPreflightInsertCellArchive::_Internal::archived_initial_selection_path(const CommandTextPreflightInsertCellArchive* msg) {
  return *msg->archived_initial_selection_path_;
}
void CommandTextPreflightInsertCellArchive::clear_coalesced_textcommand() {
  if (coalesced_textcommand_ != nullptr) coalesced_textcommand_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandTextPreflightInsertCellArchive::clear_postflightcommand() {
  if (postflightcommand_ != nullptr) postflightcommand_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandTextPreflightInsertCellArchive::clear_editing_cell() {
  if (editing_cell_ != nullptr) editing_cell_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandTextPreflightInsertCellArchive::clear_editing_storage() {
  if (editing_storage_ != nullptr) editing_storage_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CommandTextPreflightInsertCellArchive::clear_cell_uid() {
  if (cell_uid_ != nullptr) cell_uid_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void CommandTextPreflightInsertCellArchive::clear_archived_initial_selection_path() {
  if (archived_initial_selection_path_ != nullptr) archived_initial_selection_path_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
CommandTextPreflightInsertCellArchive::CommandTextPreflightInsertCellArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandTextPreflightInsertCellArchive)
}
CommandTextPreflightInsertCellArchive::CommandTextPreflightInsertCellArchive(const CommandTextPreflightInsertCellArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_coalesced_textcommand()) {
    coalesced_textcommand_ = new ::TSP::Reference(*from.coalesced_textcommand_);
  } else {
    coalesced_textcommand_ = nullptr;
  }
  if (from._internal_has_postflightcommand()) {
    postflightcommand_ = new ::TSP::Reference(*from.postflightcommand_);
  } else {
    postflightcommand_ = nullptr;
  }
  if (from._internal_has_editing_cell()) {
    editing_cell_ = new ::TST::Cell(*from.editing_cell_);
  } else {
    editing_cell_ = nullptr;
  }
  if (from._internal_has_editing_storage()) {
    editing_storage_ = new ::TSP::Reference(*from.editing_storage_);
  } else {
    editing_storage_ = nullptr;
  }
  if (from._internal_has_cell_uid()) {
    cell_uid_ = new ::TSP::UUIDCoordArchive(*from.cell_uid_);
  } else {
    cell_uid_ = nullptr;
  }
  if (from._internal_has_archived_initial_selection_path()) {
    archived_initial_selection_path_ = new ::TSK::SelectionPathArchive(*from.archived_initial_selection_path_);
  } else {
    archived_initial_selection_path_ = nullptr;
  }
  ::memcpy(&grouped_with_postflight_, &from.grouped_with_postflight_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_column_hit_by_tap_) -
    reinterpret_cast<char*>(&grouped_with_postflight_)) + sizeof(last_column_hit_by_tap_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandTextPreflightInsertCellArchive)
}

inline void CommandTextPreflightInsertCellArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_column_hit_by_tap_) -
    reinterpret_cast<char*>(&super_)) + sizeof(last_column_hit_by_tap_));
}

CommandTextPreflightInsertCellArchive::~CommandTextPreflightInsertCellArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandTextPreflightInsertCellArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandTextPreflightInsertCellArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete coalesced_textcommand_;
  if (this != internal_default_instance()) delete postflightcommand_;
  if (this != internal_default_instance()) delete editing_cell_;
  if (this != internal_default_instance()) delete editing_storage_;
  if (this != internal_default_instance()) delete cell_uid_;
  if (this != internal_default_instance()) delete archived_initial_selection_path_;
}

void CommandTextPreflightInsertCellArchive::ArenaDtor(void* object) {
  CommandTextPreflightInsertCellArchive* _this = reinterpret_cast< CommandTextPreflightInsertCellArchive* >(object);
  (void)_this;
}
void CommandTextPreflightInsertCellArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandTextPreflightInsertCellArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandTextPreflightInsertCellArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandTextPreflightInsertCellArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(coalesced_textcommand_ != nullptr);
      coalesced_textcommand_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(postflightcommand_ != nullptr);
      postflightcommand_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(editing_cell_ != nullptr);
      editing_cell_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(editing_storage_ != nullptr);
      editing_storage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(cell_uid_ != nullptr);
      cell_uid_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(archived_initial_selection_path_ != nullptr);
      archived_initial_selection_path_->Clear();
    }
  }
  grouped_with_postflight_ = false;
  last_column_hit_by_tap_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandTextPreflightInsertCellArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference coalesced_textcommand = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_coalesced_textcommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference postflightcommand = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_postflightcommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool grouped_with_postflight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_grouped_with_postflight(&has_bits);
          grouped_with_postflight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.Cell editing_cell = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_editing_cell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference editing_storage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_editing_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_column_hit_by_tap = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_last_column_hit_by_tap(&has_bits);
          last_column_hit_by_tap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDCoordArchive cell_uid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.SelectionPathArchive archived_initial_selection_path = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_archived_initial_selection_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandTextPreflightInsertCellArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandTextPreflightInsertCellArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference coalesced_textcommand = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::coalesced_textcommand(this), target, stream);
  }

  // optional .TSP.Reference postflightcommand = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::postflightcommand(this), target, stream);
  }

  // optional bool grouped_with_postflight = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_grouped_with_postflight(), target);
  }

  // required .TST.Cell editing_cell = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::editing_cell(this), target, stream);
  }

  // required .TSP.Reference editing_storage = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::editing_storage(this), target, stream);
  }

  // optional uint32 last_column_hit_by_tap = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_last_column_hit_by_tap(), target);
  }

  // required .TSP.UUIDCoordArchive cell_uid = 13;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::cell_uid(this), target, stream);
  }

  // optional .TSK.SelectionPathArchive archived_initial_selection_path = 14;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::archived_initial_selection_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandTextPreflightInsertCellArchive)
  return target;
}

size_t CommandTextPreflightInsertCellArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandTextPreflightInsertCellArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_editing_cell()) {
    // required .TST.Cell editing_cell = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *editing_cell_);
  }

  if (_internal_has_editing_storage()) {
    // required .TSP.Reference editing_storage = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *editing_storage_);
  }

  if (_internal_has_cell_uid()) {
    // required .TSP.UUIDCoordArchive cell_uid = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_uid_);
  }

  return total_size;
}
size_t CommandTextPreflightInsertCellArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandTextPreflightInsertCellArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000039) ^ 0x00000039) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TST.Cell editing_cell = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *editing_cell_);

    // required .TSP.Reference editing_storage = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *editing_storage_);

    // required .TSP.UUIDCoordArchive cell_uid = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_uid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference coalesced_textcommand = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *coalesced_textcommand_);
    }

    // optional .TSP.Reference postflightcommand = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *postflightcommand_);
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional .TSK.SelectionPathArchive archived_initial_selection_path = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *archived_initial_selection_path_);
    }

    // optional bool grouped_with_postflight = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 last_column_hit_by_tap = 12;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_column_hit_by_tap());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandTextPreflightInsertCellArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandTextPreflightInsertCellArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandTextPreflightInsertCellArchive::GetClassData() const { return &_class_data_; }

void CommandTextPreflightInsertCellArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandTextPreflightInsertCellArchive *>(to)->MergeFrom(
      static_cast<const CommandTextPreflightInsertCellArchive &>(from));
}


void CommandTextPreflightInsertCellArchive::MergeFrom(const CommandTextPreflightInsertCellArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandTextPreflightInsertCellArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_coalesced_textcommand()->::TSP::Reference::MergeFrom(from._internal_coalesced_textcommand());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_postflightcommand()->::TSP::Reference::MergeFrom(from._internal_postflightcommand());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_editing_cell()->::TST::Cell::MergeFrom(from._internal_editing_cell());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_editing_storage()->::TSP::Reference::MergeFrom(from._internal_editing_storage());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(from._internal_cell_uid());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_archived_initial_selection_path()->::TSK::SelectionPathArchive::MergeFrom(from._internal_archived_initial_selection_path());
    }
    if (cached_has_bits & 0x00000080u) {
      grouped_with_postflight_ = from.grouped_with_postflight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_last_column_hit_by_tap(from._internal_last_column_hit_by_tap());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandTextPreflightInsertCellArchive::CopyFrom(const CommandTextPreflightInsertCellArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandTextPreflightInsertCellArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandTextPreflightInsertCellArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_coalesced_textcommand()) {
    if (!coalesced_textcommand_->IsInitialized()) return false;
  }
  if (_internal_has_postflightcommand()) {
    if (!postflightcommand_->IsInitialized()) return false;
  }
  if (_internal_has_editing_cell()) {
    if (!editing_cell_->IsInitialized()) return false;
  }
  if (_internal_has_editing_storage()) {
    if (!editing_storage_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uid()) {
    if (!cell_uid_->IsInitialized()) return false;
  }
  if (_internal_has_archived_initial_selection_path()) {
    if (!archived_initial_selection_path_->IsInitialized()) return false;
  }
  return true;
}

void CommandTextPreflightInsertCellArchive::InternalSwap(CommandTextPreflightInsertCellArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandTextPreflightInsertCellArchive, last_column_hit_by_tap_)
      + sizeof(CommandTextPreflightInsertCellArchive::last_column_hit_by_tap_)
      - PROTOBUF_FIELD_OFFSET(CommandTextPreflightInsertCellArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandTextPreflightInsertCellArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[22]);
}

// ===================================================================

class CommandPostflightSetCellArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandPostflightSetCellArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandPostflightSetCellArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& childcommandundo(const CommandPostflightSetCellArchive* msg);
  static void set_has_childcommandundo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::Cell& editing_cell(const CommandPostflightSetCellArchive* msg);
  static void set_has_editing_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::Cell& new_cell(const CommandPostflightSetCellArchive* msg);
  static void set_has_new_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& editing_storage(const CommandPostflightSetCellArchive* msg);
  static void set_has_editing_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_column_hit_by_tap(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::UUIDCoordArchive& cell_uid(const CommandPostflightSetCellArchive* msg);
  static void set_has_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003d) ^ 0x0000003d) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandPostflightSetCellArchive::_Internal::super(const CommandPostflightSetCellArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandPostflightSetCellArchive::_Internal::childcommandundo(const CommandPostflightSetCellArchive* msg) {
  return *msg->childcommandundo_;
}
const ::TST::Cell&
CommandPostflightSetCellArchive::_Internal::editing_cell(const CommandPostflightSetCellArchive* msg) {
  return *msg->editing_cell_;
}
const ::TST::Cell&
CommandPostflightSetCellArchive::_Internal::new_cell(const CommandPostflightSetCellArchive* msg) {
  return *msg->new_cell_;
}
const ::TSP::Reference&
CommandPostflightSetCellArchive::_Internal::editing_storage(const CommandPostflightSetCellArchive* msg) {
  return *msg->editing_storage_;
}
const ::TSP::UUIDCoordArchive&
CommandPostflightSetCellArchive::_Internal::cell_uid(const CommandPostflightSetCellArchive* msg) {
  return *msg->cell_uid_;
}
void CommandPostflightSetCellArchive::clear_childcommandundo() {
  if (childcommandundo_ != nullptr) childcommandundo_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandPostflightSetCellArchive::clear_editing_cell() {
  if (editing_cell_ != nullptr) editing_cell_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandPostflightSetCellArchive::clear_new_cell() {
  if (new_cell_ != nullptr) new_cell_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandPostflightSetCellArchive::clear_editing_storage() {
  if (editing_storage_ != nullptr) editing_storage_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CommandPostflightSetCellArchive::clear_cell_uid() {
  if (cell_uid_ != nullptr) cell_uid_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
CommandPostflightSetCellArchive::CommandPostflightSetCellArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandPostflightSetCellArchive)
}
CommandPostflightSetCellArchive::CommandPostflightSetCellArchive(const CommandPostflightSetCellArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_childcommandundo()) {
    childcommandundo_ = new ::TSP::Reference(*from.childcommandundo_);
  } else {
    childcommandundo_ = nullptr;
  }
  if (from._internal_has_editing_cell()) {
    editing_cell_ = new ::TST::Cell(*from.editing_cell_);
  } else {
    editing_cell_ = nullptr;
  }
  if (from._internal_has_new_cell()) {
    new_cell_ = new ::TST::Cell(*from.new_cell_);
  } else {
    new_cell_ = nullptr;
  }
  if (from._internal_has_editing_storage()) {
    editing_storage_ = new ::TSP::Reference(*from.editing_storage_);
  } else {
    editing_storage_ = nullptr;
  }
  if (from._internal_has_cell_uid()) {
    cell_uid_ = new ::TSP::UUIDCoordArchive(*from.cell_uid_);
  } else {
    cell_uid_ = nullptr;
  }
  last_column_hit_by_tap_ = from.last_column_hit_by_tap_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandPostflightSetCellArchive)
}

inline void CommandPostflightSetCellArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_column_hit_by_tap_) -
    reinterpret_cast<char*>(&super_)) + sizeof(last_column_hit_by_tap_));
}

CommandPostflightSetCellArchive::~CommandPostflightSetCellArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandPostflightSetCellArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandPostflightSetCellArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete childcommandundo_;
  if (this != internal_default_instance()) delete editing_cell_;
  if (this != internal_default_instance()) delete new_cell_;
  if (this != internal_default_instance()) delete editing_storage_;
  if (this != internal_default_instance()) delete cell_uid_;
}

void CommandPostflightSetCellArchive::ArenaDtor(void* object) {
  CommandPostflightSetCellArchive* _this = reinterpret_cast< CommandPostflightSetCellArchive* >(object);
  (void)_this;
}
void CommandPostflightSetCellArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandPostflightSetCellArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandPostflightSetCellArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandPostflightSetCellArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(childcommandundo_ != nullptr);
      childcommandundo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(editing_cell_ != nullptr);
      editing_cell_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(new_cell_ != nullptr);
      new_cell_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(editing_storage_ != nullptr);
      editing_storage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(cell_uid_ != nullptr);
      cell_uid_->Clear();
    }
  }
  last_column_hit_by_tap_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandPostflightSetCellArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference childcommandundo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_childcommandundo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.Cell editing_cell = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_editing_cell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.Cell new_cell = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_cell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference editing_storage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_editing_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_column_hit_by_tap = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_last_column_hit_by_tap(&has_bits);
          last_column_hit_by_tap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDCoordArchive cell_uid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandPostflightSetCellArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandPostflightSetCellArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference childcommandundo = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::childcommandundo(this), target, stream);
  }

  // required .TST.Cell editing_cell = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::editing_cell(this), target, stream);
  }

  // required .TST.Cell new_cell = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::new_cell(this), target, stream);
  }

  // required .TSP.Reference editing_storage = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::editing_storage(this), target, stream);
  }

  // optional uint32 last_column_hit_by_tap = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_last_column_hit_by_tap(), target);
  }

  // required .TSP.UUIDCoordArchive cell_uid = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::cell_uid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandPostflightSetCellArchive)
  return target;
}

size_t CommandPostflightSetCellArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandPostflightSetCellArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_editing_cell()) {
    // required .TST.Cell editing_cell = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *editing_cell_);
  }

  if (_internal_has_new_cell()) {
    // required .TST.Cell new_cell = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_cell_);
  }

  if (_internal_has_editing_storage()) {
    // required .TSP.Reference editing_storage = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *editing_storage_);
  }

  if (_internal_has_cell_uid()) {
    // required .TSP.UUIDCoordArchive cell_uid = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_uid_);
  }

  return total_size;
}
size_t CommandPostflightSetCellArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandPostflightSetCellArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003d) ^ 0x0000003d) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TST.Cell editing_cell = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *editing_cell_);

    // required .TST.Cell new_cell = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_cell_);

    // required .TSP.Reference editing_storage = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *editing_storage_);

    // required .TSP.UUIDCoordArchive cell_uid = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_uid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference childcommandundo = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *childcommandundo_);
  }

  // optional uint32 last_column_hit_by_tap = 9;
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_column_hit_by_tap());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandPostflightSetCellArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandPostflightSetCellArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandPostflightSetCellArchive::GetClassData() const { return &_class_data_; }

void CommandPostflightSetCellArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandPostflightSetCellArchive *>(to)->MergeFrom(
      static_cast<const CommandPostflightSetCellArchive &>(from));
}


void CommandPostflightSetCellArchive::MergeFrom(const CommandPostflightSetCellArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandPostflightSetCellArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_childcommandundo()->::TSP::Reference::MergeFrom(from._internal_childcommandundo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_editing_cell()->::TST::Cell::MergeFrom(from._internal_editing_cell());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_new_cell()->::TST::Cell::MergeFrom(from._internal_new_cell());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_editing_storage()->::TSP::Reference::MergeFrom(from._internal_editing_storage());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(from._internal_cell_uid());
    }
    if (cached_has_bits & 0x00000040u) {
      last_column_hit_by_tap_ = from.last_column_hit_by_tap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandPostflightSetCellArchive::CopyFrom(const CommandPostflightSetCellArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandPostflightSetCellArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPostflightSetCellArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_childcommandundo()) {
    if (!childcommandundo_->IsInitialized()) return false;
  }
  if (_internal_has_editing_cell()) {
    if (!editing_cell_->IsInitialized()) return false;
  }
  if (_internal_has_new_cell()) {
    if (!new_cell_->IsInitialized()) return false;
  }
  if (_internal_has_editing_storage()) {
    if (!editing_storage_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uid()) {
    if (!cell_uid_->IsInitialized()) return false;
  }
  return true;
}

void CommandPostflightSetCellArchive::InternalSwap(CommandPostflightSetCellArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandPostflightSetCellArchive, last_column_hit_by_tap_)
      + sizeof(CommandPostflightSetCellArchive::last_column_hit_by_tap_)
      - PROTOBUF_FIELD_OFFSET(CommandPostflightSetCellArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandPostflightSetCellArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[23]);
}

// ===================================================================

class CommandChangeTableAreaForColumnOrRowArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandChangeTableAreaForColumnOrRowArchive>()._has_bits_);
  static const ::TST::CommandRowColumnRangeArchive& super(const CommandChangeTableAreaForColumnOrRowArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_table_area_transition(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandChangeTableAreaForColumnOrRowArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_cell_diff_map(const CommandChangeTableAreaForColumnOrRowArchive* msg);
  static void set_has_undo_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& undo_commands(const CommandChangeTableAreaForColumnOrRowArchive* msg);
  static void set_has_undo_commands(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_action_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000022) ^ 0x00000022) != 0;
  }
};

const ::TST::CommandRowColumnRangeArchive&
CommandChangeTableAreaForColumnOrRowArchive::_Internal::super(const CommandChangeTableAreaForColumnOrRowArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandChangeTableAreaForColumnOrRowArchive::_Internal::cell_diff_map(const CommandChangeTableAreaForColumnOrRowArchive* msg) {
  return *msg->cell_diff_map_;
}
const ::TSP::Reference&
CommandChangeTableAreaForColumnOrRowArchive::_Internal::undo_cell_diff_map(const CommandChangeTableAreaForColumnOrRowArchive* msg) {
  return *msg->undo_cell_diff_map_;
}
const ::TSP::Reference&
CommandChangeTableAreaForColumnOrRowArchive::_Internal::undo_commands(const CommandChangeTableAreaForColumnOrRowArchive* msg) {
  return *msg->undo_commands_;
}
void CommandChangeTableAreaForColumnOrRowArchive::clear_cell_diff_map() {
  if (cell_diff_map_ != nullptr) cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandChangeTableAreaForColumnOrRowArchive::clear_undo_cell_diff_map() {
  if (undo_cell_diff_map_ != nullptr) undo_cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandChangeTableAreaForColumnOrRowArchive::clear_undo_commands() {
  if (undo_commands_ != nullptr) undo_commands_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
CommandChangeTableAreaForColumnOrRowArchive::CommandChangeTableAreaForColumnOrRowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandChangeTableAreaForColumnOrRowArchive)
}
CommandChangeTableAreaForColumnOrRowArchive::CommandChangeTableAreaForColumnOrRowArchive(const CommandChangeTableAreaForColumnOrRowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_action_string()) {
    action_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TST::CommandRowColumnRangeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_cell_diff_map()) {
    cell_diff_map_ = new ::TSP::Reference(*from.cell_diff_map_);
  } else {
    cell_diff_map_ = nullptr;
  }
  if (from._internal_has_undo_cell_diff_map()) {
    undo_cell_diff_map_ = new ::TSP::Reference(*from.undo_cell_diff_map_);
  } else {
    undo_cell_diff_map_ = nullptr;
  }
  if (from._internal_has_undo_commands()) {
    undo_commands_ = new ::TSP::Reference(*from.undo_commands_);
  } else {
    undo_commands_ = nullptr;
  }
  table_area_transition_ = from.table_area_transition_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandChangeTableAreaForColumnOrRowArchive)
}

inline void CommandChangeTableAreaForColumnOrRowArchive::SharedCtor() {
action_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_commands_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_commands_));
table_area_transition_ = 1;
}

CommandChangeTableAreaForColumnOrRowArchive::~CommandChangeTableAreaForColumnOrRowArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandChangeTableAreaForColumnOrRowArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandChangeTableAreaForColumnOrRowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete cell_diff_map_;
  if (this != internal_default_instance()) delete undo_cell_diff_map_;
  if (this != internal_default_instance()) delete undo_commands_;
}

void CommandChangeTableAreaForColumnOrRowArchive::ArenaDtor(void* object) {
  CommandChangeTableAreaForColumnOrRowArchive* _this = reinterpret_cast< CommandChangeTableAreaForColumnOrRowArchive* >(object);
  (void)_this;
}
void CommandChangeTableAreaForColumnOrRowArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandChangeTableAreaForColumnOrRowArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandChangeTableAreaForColumnOrRowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandChangeTableAreaForColumnOrRowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      action_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cell_diff_map_ != nullptr);
      cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undo_cell_diff_map_ != nullptr);
      undo_cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(undo_commands_ != nullptr);
      undo_commands_->Clear();
    }
    table_area_transition_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandChangeTableAreaForColumnOrRowArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandRowColumnRangeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.TableAreaTransition table_area_transition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableAreaTransition_IsValid(val))) {
            _internal_set_table_area_transition(static_cast<::TST::TableAreaTransition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference cell_diff_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_cell_diff_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_commands = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_commands(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string action_string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_action_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.CommandChangeTableAreaForColumnOrRowArchive.action_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandChangeTableAreaForColumnOrRowArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandChangeTableAreaForColumnOrRowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CommandRowColumnRangeArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TST.TableAreaTransition table_area_transition = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_table_area_transition(), target);
  }

  // optional .TSP.Reference cell_diff_map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cell_diff_map(this), target, stream);
  }

  // optional .TSP.Reference undo_cell_diff_map = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::undo_cell_diff_map(this), target, stream);
  }

  // optional .TSP.Reference undo_commands = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::undo_commands(this), target, stream);
  }

  // optional string action_string = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action_string().data(), static_cast<int>(this->_internal_action_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CommandChangeTableAreaForColumnOrRowArchive.action_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_action_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandChangeTableAreaForColumnOrRowArchive)
  return target;
}

size_t CommandChangeTableAreaForColumnOrRowArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandChangeTableAreaForColumnOrRowArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandRowColumnRangeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_table_area_transition()) {
    // required .TST.TableAreaTransition table_area_transition = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table_area_transition());
  }

  return total_size;
}
size_t CommandChangeTableAreaForColumnOrRowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandChangeTableAreaForColumnOrRowArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000022) ^ 0x00000022) == 0) {  // All required fields are present.
    // required .TST.CommandRowColumnRangeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TST.TableAreaTransition table_area_transition = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table_area_transition());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string action_string = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_string());
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional .TSP.Reference cell_diff_map = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_diff_map_);
    }

    // optional .TSP.Reference undo_cell_diff_map = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_cell_diff_map_);
    }

    // optional .TSP.Reference undo_commands = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_commands_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandChangeTableAreaForColumnOrRowArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandChangeTableAreaForColumnOrRowArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandChangeTableAreaForColumnOrRowArchive::GetClassData() const { return &_class_data_; }

void CommandChangeTableAreaForColumnOrRowArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandChangeTableAreaForColumnOrRowArchive *>(to)->MergeFrom(
      static_cast<const CommandChangeTableAreaForColumnOrRowArchive &>(from));
}


void CommandChangeTableAreaForColumnOrRowArchive::MergeFrom(const CommandChangeTableAreaForColumnOrRowArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandChangeTableAreaForColumnOrRowArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_action_string(from._internal_action_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TST::CommandRowColumnRangeArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_undo_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_undo_cell_diff_map());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_undo_commands()->::TSP::Reference::MergeFrom(from._internal_undo_commands());
    }
    if (cached_has_bits & 0x00000020u) {
      table_area_transition_ = from.table_area_transition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandChangeTableAreaForColumnOrRowArchive::CopyFrom(const CommandChangeTableAreaForColumnOrRowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandChangeTableAreaForColumnOrRowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChangeTableAreaForColumnOrRowArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_cell_diff_map()) {
    if (!undo_cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_commands()) {
    if (!undo_commands_->IsInitialized()) return false;
  }
  return true;
}

void CommandChangeTableAreaForColumnOrRowArchive::InternalSwap(CommandChangeTableAreaForColumnOrRowArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_string_, GetArenaForAllocation(),
      &other->action_string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandChangeTableAreaForColumnOrRowArchive, undo_commands_)
      + sizeof(CommandChangeTableAreaForColumnOrRowArchive::undo_commands_)
      - PROTOBUF_FIELD_OFFSET(CommandChangeTableAreaForColumnOrRowArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
  swap(table_area_transition_, other->table_area_transition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandChangeTableAreaForColumnOrRowArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[24]);
}

// ===================================================================

class CommandSetPencilAnnotationsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetPencilAnnotationsArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetPencilAnnotationsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rollback_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetPencilAnnotationsArchive::_Internal::super(const CommandSetPencilAnnotationsArchive* msg) {
  return *msg->super_;
}
void CommandSetPencilAnnotationsArchive::clear_annotations() {
  annotations_.Clear();
}
void CommandSetPencilAnnotationsArchive::clear_formulas() {
  formulas_.Clear();
}
void CommandSetPencilAnnotationsArchive::clear_inverse_formulas() {
  inverse_formulas_.Clear();
}
CommandSetPencilAnnotationsArchive::CommandSetPencilAnnotationsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotations_(arena),
  formulas_(arena),
  formula_indexes_(arena),
  inverse_formulas_(arena),
  inverse_formula_indexes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetPencilAnnotationsArchive)
}
CommandSetPencilAnnotationsArchive::CommandSetPencilAnnotationsArchive(const CommandSetPencilAnnotationsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      annotations_(from.annotations_),
      formulas_(from.formulas_),
      formula_indexes_(from.formula_indexes_),
      inverse_formulas_(from.inverse_formulas_),
      inverse_formula_indexes_(from.inverse_formula_indexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  rollback_index_ = from.rollback_index_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetPencilAnnotationsArchive)
}

inline void CommandSetPencilAnnotationsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rollback_index_) -
    reinterpret_cast<char*>(&super_)) + sizeof(rollback_index_));
}

CommandSetPencilAnnotationsArchive::~CommandSetPencilAnnotationsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetPencilAnnotationsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetPencilAnnotationsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetPencilAnnotationsArchive::ArenaDtor(void* object) {
  CommandSetPencilAnnotationsArchive* _this = reinterpret_cast< CommandSetPencilAnnotationsArchive* >(object);
  (void)_this;
}
void CommandSetPencilAnnotationsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetPencilAnnotationsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetPencilAnnotationsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetPencilAnnotationsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  formulas_.Clear();
  formula_indexes_.Clear();
  inverse_formulas_.Clear();
  inverse_formula_indexes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  rollback_index_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetPencilAnnotationsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaArchive formulas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formulas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint64 formula_indexes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_formula_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_formula_indexes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaArchive inverse_formulas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inverse_formulas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint64 inverse_formula_indexes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_inverse_formula_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_inverse_formula_indexes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 rollback_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_rollback_index(&has_bits);
          rollback_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetPencilAnnotationsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetPencilAnnotationsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.Reference annotations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_annotations(i), target, stream);
  }

  // repeated .TSCE.FormulaArchive formulas = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_formulas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_formulas(i), target, stream);
  }

  // repeated uint64 formula_indexes = 4;
  for (int i = 0, n = this->_internal_formula_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_formula_indexes(i), target);
  }

  // repeated .TSCE.FormulaArchive inverse_formulas = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inverse_formulas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_inverse_formulas(i), target, stream);
  }

  // repeated uint64 inverse_formula_indexes = 6;
  for (int i = 0, n = this->_internal_inverse_formula_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_inverse_formula_indexes(i), target);
  }

  // optional uint64 rollback_index = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_rollback_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetPencilAnnotationsArchive)
  return target;
}

size_t CommandSetPencilAnnotationsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetPencilAnnotationsArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference annotations = 2;
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.FormulaArchive formulas = 3;
  total_size += 1UL * this->_internal_formulas_size();
  for (const auto& msg : this->formulas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 formula_indexes = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->formula_indexes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_formula_indexes_size());
    total_size += data_size;
  }

  // repeated .TSCE.FormulaArchive inverse_formulas = 5;
  total_size += 1UL * this->_internal_inverse_formulas_size();
  for (const auto& msg : this->inverse_formulas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 inverse_formula_indexes = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->inverse_formula_indexes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_inverse_formula_indexes_size());
    total_size += data_size;
  }

  // optional uint64 rollback_index = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rollback_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetPencilAnnotationsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetPencilAnnotationsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetPencilAnnotationsArchive::GetClassData() const { return &_class_data_; }

void CommandSetPencilAnnotationsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetPencilAnnotationsArchive *>(to)->MergeFrom(
      static_cast<const CommandSetPencilAnnotationsArchive &>(from));
}


void CommandSetPencilAnnotationsArchive::MergeFrom(const CommandSetPencilAnnotationsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetPencilAnnotationsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  formulas_.MergeFrom(from.formulas_);
  formula_indexes_.MergeFrom(from.formula_indexes_);
  inverse_formulas_.MergeFrom(from.inverse_formulas_);
  inverse_formula_indexes_.MergeFrom(from.inverse_formula_indexes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      rollback_index_ = from.rollback_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetPencilAnnotationsArchive::CopyFrom(const CommandSetPencilAnnotationsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetPencilAnnotationsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetPencilAnnotationsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(annotations_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(formulas_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(inverse_formulas_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetPencilAnnotationsArchive::InternalSwap(CommandSetPencilAnnotationsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  annotations_.InternalSwap(&other->annotations_);
  formulas_.InternalSwap(&other->formulas_);
  formula_indexes_.InternalSwap(&other->formula_indexes_);
  inverse_formulas_.InternalSwap(&other->inverse_formulas_);
  inverse_formula_indexes_.InternalSwap(&other->inverse_formula_indexes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetPencilAnnotationsArchive, rollback_index_)
      + sizeof(CommandSetPencilAnnotationsArchive::rollback_index_)
      - PROTOBUF_FIELD_OFFSET(CommandSetPencilAnnotationsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetPencilAnnotationsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[25]);
}

// ===================================================================

class CommandSetTableNameArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetTableNameArchive>()._has_bits_);
  static void set_has_newtablename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_oldtablename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& newstyle(const CommandSetTableNameArchive* msg);
  static void set_has_newstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& oldstyle(const CommandSetTableNameArchive* msg);
  static void set_has_oldstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TST::TableCommandArchive& super(const CommandSetTableNameArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& old_shape_style(const CommandSetTableNameArchive* msg);
  static void set_has_old_shape_style(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& new_shape_style(const CommandSetTableNameArchive* msg);
  static void set_has_new_shape_style(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_old_table_name_border_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_new_table_name_border_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000011) ^ 0x00000011) != 0;
  }
};

const ::TSP::Reference&
CommandSetTableNameArchive::_Internal::newstyle(const CommandSetTableNameArchive* msg) {
  return *msg->newstyle_;
}
const ::TSP::Reference&
CommandSetTableNameArchive::_Internal::oldstyle(const CommandSetTableNameArchive* msg) {
  return *msg->oldstyle_;
}
const ::TST::TableCommandArchive&
CommandSetTableNameArchive::_Internal::super(const CommandSetTableNameArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandSetTableNameArchive::_Internal::old_shape_style(const CommandSetTableNameArchive* msg) {
  return *msg->old_shape_style_;
}
const ::TSP::Reference&
CommandSetTableNameArchive::_Internal::new_shape_style(const CommandSetTableNameArchive* msg) {
  return *msg->new_shape_style_;
}
void CommandSetTableNameArchive::clear_newstyle() {
  if (newstyle_ != nullptr) newstyle_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSetTableNameArchive::clear_oldstyle() {
  if (oldstyle_ != nullptr) oldstyle_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandSetTableNameArchive::clear_old_shape_style() {
  if (old_shape_style_ != nullptr) old_shape_style_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void CommandSetTableNameArchive::clear_new_shape_style() {
  if (new_shape_style_ != nullptr) new_shape_style_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
CommandSetTableNameArchive::CommandSetTableNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetTableNameArchive)
}
CommandSetTableNameArchive::CommandSetTableNameArchive(const CommandSetTableNameArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  newtablename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_newtablename()) {
    newtablename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_newtablename(), 
      GetArenaForAllocation());
  }
  oldtablename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_oldtablename()) {
    oldtablename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_oldtablename(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_newstyle()) {
    newstyle_ = new ::TSP::Reference(*from.newstyle_);
  } else {
    newstyle_ = nullptr;
  }
  if (from._internal_has_oldstyle()) {
    oldstyle_ = new ::TSP::Reference(*from.oldstyle_);
  } else {
    oldstyle_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_old_shape_style()) {
    old_shape_style_ = new ::TSP::Reference(*from.old_shape_style_);
  } else {
    old_shape_style_ = nullptr;
  }
  if (from._internal_has_new_shape_style()) {
    new_shape_style_ = new ::TSP::Reference(*from.new_shape_style_);
  } else {
    new_shape_style_ = nullptr;
  }
  ::memcpy(&old_table_name_border_enabled_, &from.old_table_name_border_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_table_name_border_enabled_) -
    reinterpret_cast<char*>(&old_table_name_border_enabled_)) + sizeof(new_table_name_border_enabled_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetTableNameArchive)
}

inline void CommandSetTableNameArchive::SharedCtor() {
newtablename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
oldtablename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&newstyle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_table_name_border_enabled_) -
    reinterpret_cast<char*>(&newstyle_)) + sizeof(new_table_name_border_enabled_));
}

CommandSetTableNameArchive::~CommandSetTableNameArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetTableNameArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetTableNameArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  newtablename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oldtablename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete newstyle_;
  if (this != internal_default_instance()) delete oldstyle_;
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete old_shape_style_;
  if (this != internal_default_instance()) delete new_shape_style_;
}

void CommandSetTableNameArchive::ArenaDtor(void* object) {
  CommandSetTableNameArchive* _this = reinterpret_cast< CommandSetTableNameArchive* >(object);
  (void)_this;
}
void CommandSetTableNameArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetTableNameArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetTableNameArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetTableNameArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      newtablename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      oldtablename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(newstyle_ != nullptr);
      newstyle_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(oldstyle_ != nullptr);
      oldstyle_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(old_shape_style_ != nullptr);
      old_shape_style_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(new_shape_style_ != nullptr);
      new_shape_style_->Clear();
    }
  }
  old_table_name_border_enabled_ = false;
  new_table_name_border_enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetTableNameArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string newtablename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_newtablename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.CommandSetTableNameArchive.newtablename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string oldtablename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_oldtablename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.CommandSetTableNameArchive.oldtablename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference newstyle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_newstyle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference oldstyle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldstyle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.TableCommandArchive super = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_shape_style = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_shape_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference new_shape_style = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_shape_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool old_table_name_border_enabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_old_table_name_border_enabled(&has_bits);
          old_table_name_border_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool new_table_name_border_enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_new_table_name_border_enabled(&has_bits);
          new_table_name_border_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetTableNameArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetTableNameArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string newtablename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_newtablename().data(), static_cast<int>(this->_internal_newtablename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CommandSetTableNameArchive.newtablename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_newtablename(), target);
  }

  // optional string oldtablename = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_oldtablename().data(), static_cast<int>(this->_internal_oldtablename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CommandSetTableNameArchive.oldtablename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_oldtablename(), target);
  }

  // optional .TSP.Reference newstyle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::newstyle(this), target, stream);
  }

  // optional .TSP.Reference oldstyle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::oldstyle(this), target, stream);
  }

  // required .TST.TableCommandArchive super = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference old_shape_style = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::old_shape_style(this), target, stream);
  }

  // optional .TSP.Reference new_shape_style = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::new_shape_style(this), target, stream);
  }

  // optional bool old_table_name_border_enabled = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_old_table_name_border_enabled(), target);
  }

  // optional bool new_table_name_border_enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_new_table_name_border_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetTableNameArchive)
  return target;
}

size_t CommandSetTableNameArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetTableNameArchive)
  size_t total_size = 0;

  if (_internal_has_newtablename()) {
    // required string newtablename = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newtablename());
  }

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  return total_size;
}
size_t CommandSetTableNameArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetTableNameArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000011) ^ 0x00000011) == 0) {  // All required fields are present.
    // required string newtablename = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newtablename());

    // required .TST.TableCommandArchive super = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional string oldtablename = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oldtablename());
    }

    // optional .TSP.Reference newstyle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *newstyle_);
    }

    // optional .TSP.Reference oldstyle = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oldstyle_);
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional .TSP.Reference old_shape_style = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_shape_style_);
    }

    // optional .TSP.Reference new_shape_style = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_shape_style_);
    }

    // optional bool old_table_name_border_enabled = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool new_table_name_border_enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetTableNameArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetTableNameArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetTableNameArchive::GetClassData() const { return &_class_data_; }

void CommandSetTableNameArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetTableNameArchive *>(to)->MergeFrom(
      static_cast<const CommandSetTableNameArchive &>(from));
}


void CommandSetTableNameArchive::MergeFrom(const CommandSetTableNameArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetTableNameArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_newtablename(from._internal_newtablename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_oldtablename(from._internal_oldtablename());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_newstyle()->::TSP::Reference::MergeFrom(from._internal_newstyle());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_oldstyle()->::TSP::Reference::MergeFrom(from._internal_oldstyle());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_old_shape_style()->::TSP::Reference::MergeFrom(from._internal_old_shape_style());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_new_shape_style()->::TSP::Reference::MergeFrom(from._internal_new_shape_style());
    }
    if (cached_has_bits & 0x00000080u) {
      old_table_name_border_enabled_ = from.old_table_name_border_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_new_table_name_border_enabled(from._internal_new_table_name_border_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetTableNameArchive::CopyFrom(const CommandSetTableNameArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetTableNameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetTableNameArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_newstyle()) {
    if (!newstyle_->IsInitialized()) return false;
  }
  if (_internal_has_oldstyle()) {
    if (!oldstyle_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_old_shape_style()) {
    if (!old_shape_style_->IsInitialized()) return false;
  }
  if (_internal_has_new_shape_style()) {
    if (!new_shape_style_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetTableNameArchive::InternalSwap(CommandSetTableNameArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &newtablename_, GetArenaForAllocation(),
      &other->newtablename_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &oldtablename_, GetArenaForAllocation(),
      &other->oldtablename_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetTableNameArchive, new_table_name_border_enabled_)
      + sizeof(CommandSetTableNameArchive::new_table_name_border_enabled_)
      - PROTOBUF_FIELD_OFFSET(CommandSetTableNameArchive, newstyle_)>(
          reinterpret_cast<char*>(&newstyle_),
          reinterpret_cast<char*>(&other->newstyle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetTableNameArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[26]);
}

// ===================================================================

class CommandSetTableNameEnabledArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetTableNameEnabledArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetTableNameEnabledArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_table_name_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prev_table_name_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetTableNameEnabledArchive::_Internal::super(const CommandSetTableNameEnabledArchive* msg) {
  return *msg->super_;
}
CommandSetTableNameEnabledArchive::CommandSetTableNameEnabledArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetTableNameEnabledArchive)
}
CommandSetTableNameEnabledArchive::CommandSetTableNameEnabledArchive(const CommandSetTableNameEnabledArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&table_name_enabled_, &from.table_name_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&prev_table_name_enabled_) -
    reinterpret_cast<char*>(&table_name_enabled_)) + sizeof(prev_table_name_enabled_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetTableNameEnabledArchive)
}

inline void CommandSetTableNameEnabledArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prev_table_name_enabled_) -
    reinterpret_cast<char*>(&super_)) + sizeof(prev_table_name_enabled_));
}

CommandSetTableNameEnabledArchive::~CommandSetTableNameEnabledArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetTableNameEnabledArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetTableNameEnabledArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetTableNameEnabledArchive::ArenaDtor(void* object) {
  CommandSetTableNameEnabledArchive* _this = reinterpret_cast< CommandSetTableNameEnabledArchive* >(object);
  (void)_this;
}
void CommandSetTableNameEnabledArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetTableNameEnabledArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetTableNameEnabledArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetTableNameEnabledArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  ::memset(&table_name_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prev_table_name_enabled_) -
      reinterpret_cast<char*>(&table_name_enabled_)) + sizeof(prev_table_name_enabled_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetTableNameEnabledArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool table_name_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_table_name_enabled(&has_bits);
          table_name_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool prev_table_name_enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_prev_table_name_enabled(&has_bits);
          prev_table_name_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetTableNameEnabledArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetTableNameEnabledArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required bool table_name_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_table_name_enabled(), target);
  }

  // optional bool prev_table_name_enabled = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_prev_table_name_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetTableNameEnabledArchive)
  return target;
}

size_t CommandSetTableNameEnabledArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetTableNameEnabledArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_table_name_enabled()) {
    // required bool table_name_enabled = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetTableNameEnabledArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetTableNameEnabledArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required bool table_name_enabled = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool prev_table_name_enabled = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetTableNameEnabledArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetTableNameEnabledArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetTableNameEnabledArchive::GetClassData() const { return &_class_data_; }

void CommandSetTableNameEnabledArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetTableNameEnabledArchive *>(to)->MergeFrom(
      static_cast<const CommandSetTableNameEnabledArchive &>(from));
}


void CommandSetTableNameEnabledArchive::MergeFrom(const CommandSetTableNameEnabledArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetTableNameEnabledArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      table_name_enabled_ = from.table_name_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      prev_table_name_enabled_ = from.prev_table_name_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetTableNameEnabledArchive::CopyFrom(const CommandSetTableNameEnabledArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetTableNameEnabledArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetTableNameEnabledArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetTableNameEnabledArchive::InternalSwap(CommandSetTableNameEnabledArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetTableNameEnabledArchive, prev_table_name_enabled_)
      + sizeof(CommandSetTableNameEnabledArchive::prev_table_name_enabled_)
      - PROTOBUF_FIELD_OFFSET(CommandSetTableNameEnabledArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetTableNameEnabledArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[27]);
}

// ===================================================================

class CommandSetTableFontSizeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetTableFontSizeArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetTableFontSizeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_increase(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_font_size_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandSetTableFontSizeArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& inverse_cell_diff_map(const CommandSetTableFontSizeArchive* msg);
  static void set_has_inverse_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_styles_container_refresh_done(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000039) ^ 0x00000039) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetTableFontSizeArchive::_Internal::super(const CommandSetTableFontSizeArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandSetTableFontSizeArchive::_Internal::cell_diff_map(const CommandSetTableFontSizeArchive* msg) {
  return *msg->cell_diff_map_;
}
const ::TSP::Reference&
CommandSetTableFontSizeArchive::_Internal::inverse_cell_diff_map(const CommandSetTableFontSizeArchive* msg) {
  return *msg->inverse_cell_diff_map_;
}
void CommandSetTableFontSizeArchive::clear_cell_diff_map() {
  if (cell_diff_map_ != nullptr) cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSetTableFontSizeArchive::clear_inverse_cell_diff_map() {
  if (inverse_cell_diff_map_ != nullptr) inverse_cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandSetTableFontSizeArchive::CommandSetTableFontSizeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  font_size_list_(arena),
  inverse_font_size_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetTableFontSizeArchive)
}
CommandSetTableFontSizeArchive::CommandSetTableFontSizeArchive(const CommandSetTableFontSizeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      font_size_list_(from.font_size_list_),
      inverse_font_size_list_(from.inverse_font_size_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_cell_diff_map()) {
    cell_diff_map_ = new ::TSP::Reference(*from.cell_diff_map_);
  } else {
    cell_diff_map_ = nullptr;
  }
  if (from._internal_has_inverse_cell_diff_map()) {
    inverse_cell_diff_map_ = new ::TSP::Reference(*from.inverse_cell_diff_map_);
  } else {
    inverse_cell_diff_map_ = nullptr;
  }
  ::memcpy(&font_size_diff_, &from.font_size_diff_,
    static_cast<size_t>(reinterpret_cast<char*>(&styles_container_refresh_done_) -
    reinterpret_cast<char*>(&font_size_diff_)) + sizeof(styles_container_refresh_done_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetTableFontSizeArchive)
}

inline void CommandSetTableFontSizeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&styles_container_refresh_done_) -
    reinterpret_cast<char*>(&super_)) + sizeof(styles_container_refresh_done_));
}

CommandSetTableFontSizeArchive::~CommandSetTableFontSizeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetTableFontSizeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetTableFontSizeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete cell_diff_map_;
  if (this != internal_default_instance()) delete inverse_cell_diff_map_;
}

void CommandSetTableFontSizeArchive::ArenaDtor(void* object) {
  CommandSetTableFontSizeArchive* _this = reinterpret_cast< CommandSetTableFontSizeArchive* >(object);
  (void)_this;
}
void CommandSetTableFontSizeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetTableFontSizeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetTableFontSizeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetTableFontSizeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  font_size_list_.Clear();
  inverse_font_size_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_diff_map_ != nullptr);
      cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(inverse_cell_diff_map_ != nullptr);
      inverse_cell_diff_map_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&font_size_diff_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&styles_container_refresh_done_) -
        reinterpret_cast<char*>(&font_size_diff_)) + sizeof(styles_container_refresh_done_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetTableFontSizeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_increase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_increase(&has_bits);
          is_increase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 font_size_diff = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_font_size_diff(&has_bits);
          font_size_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double font_size_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_font_size_list(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<33>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_font_size_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double inverse_font_size_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_inverse_font_size_list(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_inverse_font_size_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference cell_diff_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference inverse_cell_diff_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool styles_container_refresh_done = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_styles_container_refresh_done(&has_bits);
          styles_container_refresh_done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetTableFontSizeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetTableFontSizeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required bool is_increase = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_increase(), target);
  }

  // required int32 font_size_diff = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_font_size_diff(), target);
  }

  // repeated double font_size_list = 4;
  for (int i = 0, n = this->_internal_font_size_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_font_size_list(i), target);
  }

  // repeated double inverse_font_size_list = 5;
  for (int i = 0, n = this->_internal_inverse_font_size_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_inverse_font_size_list(i), target);
  }

  // optional .TSP.Reference cell_diff_map = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cell_diff_map(this), target, stream);
  }

  // optional .TSP.Reference inverse_cell_diff_map = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::inverse_cell_diff_map(this), target, stream);
  }

  // required bool styles_container_refresh_done = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_styles_container_refresh_done(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetTableFontSizeArchive)
  return target;
}

size_t CommandSetTableFontSizeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetTableFontSizeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_font_size_diff()) {
    // required int32 font_size_diff = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_font_size_diff());
  }

  if (_internal_has_is_increase()) {
    // required bool is_increase = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_styles_container_refresh_done()) {
    // required bool styles_container_refresh_done = 8;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetTableFontSizeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetTableFontSizeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000039) ^ 0x00000039) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required int32 font_size_diff = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_font_size_diff());

    // required bool is_increase = 2;
    total_size += 1 + 1;

    // required bool styles_container_refresh_done = 8;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double font_size_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_font_size_list_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_font_size_list_size());
    total_size += data_size;
  }

  // repeated double inverse_font_size_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_inverse_font_size_list_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_inverse_font_size_list_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference cell_diff_map = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_diff_map_);
    }

    // optional .TSP.Reference inverse_cell_diff_map = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inverse_cell_diff_map_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetTableFontSizeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetTableFontSizeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetTableFontSizeArchive::GetClassData() const { return &_class_data_; }

void CommandSetTableFontSizeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetTableFontSizeArchive *>(to)->MergeFrom(
      static_cast<const CommandSetTableFontSizeArchive &>(from));
}


void CommandSetTableFontSizeArchive::MergeFrom(const CommandSetTableFontSizeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetTableFontSizeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  font_size_list_.MergeFrom(from.font_size_list_);
  inverse_font_size_list_.MergeFrom(from.inverse_font_size_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_inverse_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_inverse_cell_diff_map());
    }
    if (cached_has_bits & 0x00000008u) {
      font_size_diff_ = from.font_size_diff_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_increase_ = from.is_increase_;
    }
    if (cached_has_bits & 0x00000020u) {
      styles_container_refresh_done_ = from.styles_container_refresh_done_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetTableFontSizeArchive::CopyFrom(const CommandSetTableFontSizeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetTableFontSizeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetTableFontSizeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_cell_diff_map()) {
    if (!inverse_cell_diff_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetTableFontSizeArchive::InternalSwap(CommandSetTableFontSizeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  font_size_list_.InternalSwap(&other->font_size_list_);
  inverse_font_size_list_.InternalSwap(&other->inverse_font_size_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetTableFontSizeArchive, styles_container_refresh_done_)
      + sizeof(CommandSetTableFontSizeArchive::styles_container_refresh_done_)
      - PROTOBUF_FIELD_OFFSET(CommandSetTableFontSizeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetTableFontSizeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[28]);
}

// ===================================================================

class CommandSetTableFontNameArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetTableFontNameArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetTableFontNameArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_font_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preserve_face(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_previous_font_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& previous_table_style(const CommandSetTableFontNameArchive* msg);
  static void set_has_previous_table_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandSetTableFontNameArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& inverse_cell_diff_map(const CommandSetTableFontNameArchive* msg);
  static void set_has_inverse_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000055) ^ 0x00000055) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetTableFontNameArchive::_Internal::super(const CommandSetTableFontNameArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandSetTableFontNameArchive::_Internal::previous_table_style(const CommandSetTableFontNameArchive* msg) {
  return *msg->previous_table_style_;
}
const ::TSP::Reference&
CommandSetTableFontNameArchive::_Internal::cell_diff_map(const CommandSetTableFontNameArchive* msg) {
  return *msg->cell_diff_map_;
}
const ::TSP::Reference&
CommandSetTableFontNameArchive::_Internal::inverse_cell_diff_map(const CommandSetTableFontNameArchive* msg) {
  return *msg->inverse_cell_diff_map_;
}
void CommandSetTableFontNameArchive::clear_previous_table_style() {
  if (previous_table_style_ != nullptr) previous_table_style_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandSetTableFontNameArchive::clear_previous_text_styles() {
  previous_text_styles_.Clear();
}
void CommandSetTableFontNameArchive::clear_cell_diff_map() {
  if (cell_diff_map_ != nullptr) cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CommandSetTableFontNameArchive::clear_inverse_cell_diff_map() {
  if (inverse_cell_diff_map_ != nullptr) inverse_cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
CommandSetTableFontNameArchive::CommandSetTableFontNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  previous_text_styles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetTableFontNameArchive)
}
CommandSetTableFontNameArchive::CommandSetTableFontNameArchive(const CommandSetTableFontNameArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      previous_text_styles_(from.previous_text_styles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  font_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_font_name()) {
    font_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_font_name(), 
      GetArenaForAllocation());
  }
  previous_font_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_previous_font_name()) {
    previous_font_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previous_font_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_previous_table_style()) {
    previous_table_style_ = new ::TSP::Reference(*from.previous_table_style_);
  } else {
    previous_table_style_ = nullptr;
  }
  if (from._internal_has_cell_diff_map()) {
    cell_diff_map_ = new ::TSP::Reference(*from.cell_diff_map_);
  } else {
    cell_diff_map_ = nullptr;
  }
  if (from._internal_has_inverse_cell_diff_map()) {
    inverse_cell_diff_map_ = new ::TSP::Reference(*from.inverse_cell_diff_map_);
  } else {
    inverse_cell_diff_map_ = nullptr;
  }
  preserve_face_ = from.preserve_face_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetTableFontNameArchive)
}

inline void CommandSetTableFontNameArchive::SharedCtor() {
font_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
previous_font_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&preserve_face_) -
    reinterpret_cast<char*>(&super_)) + sizeof(preserve_face_));
}

CommandSetTableFontNameArchive::~CommandSetTableFontNameArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetTableFontNameArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetTableFontNameArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  font_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_font_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete previous_table_style_;
  if (this != internal_default_instance()) delete cell_diff_map_;
  if (this != internal_default_instance()) delete inverse_cell_diff_map_;
}

void CommandSetTableFontNameArchive::ArenaDtor(void* object) {
  CommandSetTableFontNameArchive* _this = reinterpret_cast< CommandSetTableFontNameArchive* >(object);
  (void)_this;
}
void CommandSetTableFontNameArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetTableFontNameArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetTableFontNameArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetTableFontNameArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  previous_text_styles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      font_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      previous_font_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(previous_table_style_ != nullptr);
      previous_table_style_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(cell_diff_map_ != nullptr);
      cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(inverse_cell_diff_map_ != nullptr);
      inverse_cell_diff_map_->Clear();
    }
  }
  preserve_face_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetTableFontNameArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string font_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_font_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.CommandSetTableFontNameArchive.font_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool preserve_face = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_preserve_face(&has_bits);
          preserve_face_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string previous_font_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_previous_font_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.CommandSetTableFontNameArchive.previous_font_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference previous_table_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous_table_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference previous_text_styles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_previous_text_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference cell_diff_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference inverse_cell_diff_map = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetTableFontNameArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetTableFontNameArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required string font_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_font_name().data(), static_cast<int>(this->_internal_font_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CommandSetTableFontNameArchive.font_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_font_name(), target);
  }

  // required bool preserve_face = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_preserve_face(), target);
  }

  // optional string previous_font_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_previous_font_name().data(), static_cast<int>(this->_internal_previous_font_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CommandSetTableFontNameArchive.previous_font_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_previous_font_name(), target);
  }

  // optional .TSP.Reference previous_table_style = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::previous_table_style(this), target, stream);
  }

  // repeated .TSP.Reference previous_text_styles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_previous_text_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_previous_text_styles(i), target, stream);
  }

  // required .TSP.Reference cell_diff_map = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::cell_diff_map(this), target, stream);
  }

  // optional .TSP.Reference inverse_cell_diff_map = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::inverse_cell_diff_map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetTableFontNameArchive)
  return target;
}

size_t CommandSetTableFontNameArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetTableFontNameArchive)
  size_t total_size = 0;

  if (_internal_has_font_name()) {
    // required string font_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_font_name());
  }

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_cell_diff_map()) {
    // required .TSP.Reference cell_diff_map = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_diff_map_);
  }

  if (_internal_has_preserve_face()) {
    // required bool preserve_face = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetTableFontNameArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetTableFontNameArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000055) ^ 0x00000055) == 0) {  // All required fields are present.
    // required string font_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_font_name());

    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference cell_diff_map = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_diff_map_);

    // required bool preserve_face = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference previous_text_styles = 6;
  total_size += 1UL * this->_internal_previous_text_styles_size();
  for (const auto& msg : this->previous_text_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string previous_font_name = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_previous_font_name());
  }

  // optional .TSP.Reference previous_table_style = 5;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_table_style_);
  }

  // optional .TSP.Reference inverse_cell_diff_map = 8;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inverse_cell_diff_map_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetTableFontNameArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetTableFontNameArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetTableFontNameArchive::GetClassData() const { return &_class_data_; }

void CommandSetTableFontNameArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetTableFontNameArchive *>(to)->MergeFrom(
      static_cast<const CommandSetTableFontNameArchive &>(from));
}


void CommandSetTableFontNameArchive::MergeFrom(const CommandSetTableFontNameArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetTableFontNameArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  previous_text_styles_.MergeFrom(from.previous_text_styles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_font_name(from._internal_font_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_previous_font_name(from._internal_previous_font_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_previous_table_style()->::TSP::Reference::MergeFrom(from._internal_previous_table_style());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_inverse_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_inverse_cell_diff_map());
    }
    if (cached_has_bits & 0x00000040u) {
      preserve_face_ = from.preserve_face_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetTableFontNameArchive::CopyFrom(const CommandSetTableFontNameArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetTableFontNameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetTableFontNameArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(previous_text_styles_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_previous_table_style()) {
    if (!previous_table_style_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_cell_diff_map()) {
    if (!inverse_cell_diff_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetTableFontNameArchive::InternalSwap(CommandSetTableFontNameArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  previous_text_styles_.InternalSwap(&other->previous_text_styles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &font_name_, GetArenaForAllocation(),
      &other->font_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &previous_font_name_, GetArenaForAllocation(),
      &other->previous_font_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetTableFontNameArchive, preserve_face_)
      + sizeof(CommandSetTableFontNameArchive::preserve_face_)
      - PROTOBUF_FIELD_OFFSET(CommandSetTableFontNameArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetTableFontNameArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[29]);
}

// ===================================================================

class CommandSetTableNameHeightArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetTableNameHeightArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetTableNameHeightArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_table_name_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_new_table_name_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetTableNameHeightArchive::_Internal::super(const CommandSetTableNameHeightArchive* msg) {
  return *msg->super_;
}
CommandSetTableNameHeightArchive::CommandSetTableNameHeightArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetTableNameHeightArchive)
}
CommandSetTableNameHeightArchive::CommandSetTableNameHeightArchive(const CommandSetTableNameHeightArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&old_table_name_height_, &from.old_table_name_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_table_name_height_) -
    reinterpret_cast<char*>(&old_table_name_height_)) + sizeof(new_table_name_height_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetTableNameHeightArchive)
}

inline void CommandSetTableNameHeightArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_table_name_height_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_table_name_height_));
}

CommandSetTableNameHeightArchive::~CommandSetTableNameHeightArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetTableNameHeightArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetTableNameHeightArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetTableNameHeightArchive::ArenaDtor(void* object) {
  CommandSetTableNameHeightArchive* _this = reinterpret_cast< CommandSetTableNameHeightArchive* >(object);
  (void)_this;
}
void CommandSetTableNameHeightArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetTableNameHeightArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetTableNameHeightArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetTableNameHeightArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&old_table_name_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_table_name_height_) -
        reinterpret_cast<char*>(&old_table_name_height_)) + sizeof(new_table_name_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetTableNameHeightArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double old_table_name_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_old_table_name_height(&has_bits);
          old_table_name_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double new_table_name_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_new_table_name_height(&has_bits);
          new_table_name_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetTableNameHeightArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetTableNameHeightArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required double old_table_name_height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_old_table_name_height(), target);
  }

  // required double new_table_name_height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_new_table_name_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetTableNameHeightArchive)
  return target;
}

size_t CommandSetTableNameHeightArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetTableNameHeightArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_old_table_name_height()) {
    // required double old_table_name_height = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_new_table_name_height()) {
    // required double new_table_name_height = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t CommandSetTableNameHeightArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetTableNameHeightArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required double old_table_name_height = 2;
    total_size += 1 + 8;

    // required double new_table_name_height = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetTableNameHeightArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetTableNameHeightArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetTableNameHeightArchive::GetClassData() const { return &_class_data_; }

void CommandSetTableNameHeightArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetTableNameHeightArchive *>(to)->MergeFrom(
      static_cast<const CommandSetTableNameHeightArchive &>(from));
}


void CommandSetTableNameHeightArchive::MergeFrom(const CommandSetTableNameHeightArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetTableNameHeightArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      old_table_name_height_ = from.old_table_name_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      new_table_name_height_ = from.new_table_name_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetTableNameHeightArchive::CopyFrom(const CommandSetTableNameHeightArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetTableNameHeightArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetTableNameHeightArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetTableNameHeightArchive::InternalSwap(CommandSetTableNameHeightArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetTableNameHeightArchive, new_table_name_height_)
      + sizeof(CommandSetTableNameHeightArchive::new_table_name_height_)
      - PROTOBUF_FIELD_OFFSET(CommandSetTableNameHeightArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetTableNameHeightArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[30]);
}

// ===================================================================

class CommandSetNowArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetNowArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetNowArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetNowArchive::_Internal::super(const CommandSetNowArchive* msg) {
  return *msg->super_;
}
CommandSetNowArchive::CommandSetNowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetNowArchive)
}
CommandSetNowArchive::CommandSetNowArchive(const CommandSetNowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetNowArchive)
}

inline void CommandSetNowArchive::SharedCtor() {
super_ = nullptr;
}

CommandSetNowArchive::~CommandSetNowArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetNowArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetNowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetNowArchive::ArenaDtor(void* object) {
  CommandSetNowArchive* _this = reinterpret_cast< CommandSetNowArchive* >(object);
  (void)_this;
}
void CommandSetNowArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetNowArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetNowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetNowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetNowArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetNowArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetNowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetNowArchive)
  return target;
}

size_t CommandSetNowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetNowArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetNowArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetNowArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetNowArchive::GetClassData() const { return &_class_data_; }

void CommandSetNowArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetNowArchive *>(to)->MergeFrom(
      static_cast<const CommandSetNowArchive &>(from));
}


void CommandSetNowArchive::MergeFrom(const CommandSetNowArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetNowArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetNowArchive::CopyFrom(const CommandSetNowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetNowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetNowArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetNowArchive::InternalSwap(CommandSetNowArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetNowArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[31]);
}

// ===================================================================

class CommandSetWasCutArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetWasCutArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetWasCutArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& from_table_uid(const CommandSetWasCutArchive* msg);
  static void set_has_from_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& prev_from_table_uid(const CommandSetWasCutArchive* msg);
  static void set_has_prev_from_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_was_cut(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_prev_was_cut(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::UUID& from_group_by_uid(const CommandSetWasCutArchive* msg);
  static void set_has_from_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& prev_from_group_by_uid(const CommandSetWasCutArchive* msg);
  static void set_has_prev_from_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetWasCutArchive::_Internal::super(const CommandSetWasCutArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandSetWasCutArchive::_Internal::from_table_uid(const CommandSetWasCutArchive* msg) {
  return *msg->from_table_uid_;
}
const ::TSP::UUID&
CommandSetWasCutArchive::_Internal::prev_from_table_uid(const CommandSetWasCutArchive* msg) {
  return *msg->prev_from_table_uid_;
}
const ::TSP::UUID&
CommandSetWasCutArchive::_Internal::from_group_by_uid(const CommandSetWasCutArchive* msg) {
  return *msg->from_group_by_uid_;
}
const ::TSP::UUID&
CommandSetWasCutArchive::_Internal::prev_from_group_by_uid(const CommandSetWasCutArchive* msg) {
  return *msg->prev_from_group_by_uid_;
}
void CommandSetWasCutArchive::clear_from_table_uid() {
  if (from_table_uid_ != nullptr) from_table_uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSetWasCutArchive::clear_prev_from_table_uid() {
  if (prev_from_table_uid_ != nullptr) prev_from_table_uid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSetWasCutArchive::clear_from_group_by_uid() {
  if (from_group_by_uid_ != nullptr) from_group_by_uid_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandSetWasCutArchive::clear_prev_from_group_by_uid() {
  if (prev_from_group_by_uid_ != nullptr) prev_from_group_by_uid_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
CommandSetWasCutArchive::CommandSetWasCutArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetWasCutArchive)
}
CommandSetWasCutArchive::CommandSetWasCutArchive(const CommandSetWasCutArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_from_table_uid()) {
    from_table_uid_ = new ::TSP::UUID(*from.from_table_uid_);
  } else {
    from_table_uid_ = nullptr;
  }
  if (from._internal_has_prev_from_table_uid()) {
    prev_from_table_uid_ = new ::TSP::UUID(*from.prev_from_table_uid_);
  } else {
    prev_from_table_uid_ = nullptr;
  }
  if (from._internal_has_from_group_by_uid()) {
    from_group_by_uid_ = new ::TSP::UUID(*from.from_group_by_uid_);
  } else {
    from_group_by_uid_ = nullptr;
  }
  if (from._internal_has_prev_from_group_by_uid()) {
    prev_from_group_by_uid_ = new ::TSP::UUID(*from.prev_from_group_by_uid_);
  } else {
    prev_from_group_by_uid_ = nullptr;
  }
  ::memcpy(&was_cut_, &from.was_cut_,
    static_cast<size_t>(reinterpret_cast<char*>(&prev_was_cut_) -
    reinterpret_cast<char*>(&was_cut_)) + sizeof(prev_was_cut_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetWasCutArchive)
}

inline void CommandSetWasCutArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prev_was_cut_) -
    reinterpret_cast<char*>(&super_)) + sizeof(prev_was_cut_));
}

CommandSetWasCutArchive::~CommandSetWasCutArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetWasCutArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetWasCutArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete from_table_uid_;
  if (this != internal_default_instance()) delete prev_from_table_uid_;
  if (this != internal_default_instance()) delete from_group_by_uid_;
  if (this != internal_default_instance()) delete prev_from_group_by_uid_;
}

void CommandSetWasCutArchive::ArenaDtor(void* object) {
  CommandSetWasCutArchive* _this = reinterpret_cast< CommandSetWasCutArchive* >(object);
  (void)_this;
}
void CommandSetWasCutArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetWasCutArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetWasCutArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetWasCutArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(from_table_uid_ != nullptr);
      from_table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(prev_from_table_uid_ != nullptr);
      prev_from_table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(from_group_by_uid_ != nullptr);
      from_group_by_uid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(prev_from_group_by_uid_ != nullptr);
      prev_from_group_by_uid_->Clear();
    }
  }
  ::memset(&was_cut_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prev_was_cut_) -
      reinterpret_cast<char*>(&was_cut_)) + sizeof(prev_was_cut_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetWasCutArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID from_table_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_table_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID prev_from_table_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_prev_from_table_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool was_cut = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_was_cut(&has_bits);
          was_cut_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool prev_was_cut = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_prev_was_cut(&has_bits);
          prev_was_cut_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID from_group_by_uid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_group_by_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID prev_from_group_by_uid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_prev_from_group_by_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetWasCutArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetWasCutArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID from_table_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::from_table_uid(this), target, stream);
  }

  // required .TSP.UUID prev_from_table_uid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::prev_from_table_uid(this), target, stream);
  }

  // required bool was_cut = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_was_cut(), target);
  }

  // required bool prev_was_cut = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_prev_was_cut(), target);
  }

  // required .TSP.UUID from_group_by_uid = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::from_group_by_uid(this), target, stream);
  }

  // required .TSP.UUID prev_from_group_by_uid = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::prev_from_group_by_uid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetWasCutArchive)
  return target;
}

size_t CommandSetWasCutArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetWasCutArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_from_table_uid()) {
    // required .TSP.UUID from_table_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_table_uid_);
  }

  if (_internal_has_prev_from_table_uid()) {
    // required .TSP.UUID prev_from_table_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prev_from_table_uid_);
  }

  if (_internal_has_from_group_by_uid()) {
    // required .TSP.UUID from_group_by_uid = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_group_by_uid_);
  }

  if (_internal_has_prev_from_group_by_uid()) {
    // required .TSP.UUID prev_from_group_by_uid = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prev_from_group_by_uid_);
  }

  if (_internal_has_was_cut()) {
    // required bool was_cut = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_prev_was_cut()) {
    // required bool prev_was_cut = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetWasCutArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetWasCutArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID from_table_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_table_uid_);

    // required .TSP.UUID prev_from_table_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prev_from_table_uid_);

    // required .TSP.UUID from_group_by_uid = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_group_by_uid_);

    // required .TSP.UUID prev_from_group_by_uid = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prev_from_group_by_uid_);

    // required bool was_cut = 4;
    total_size += 1 + 1;

    // required bool prev_was_cut = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetWasCutArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetWasCutArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetWasCutArchive::GetClassData() const { return &_class_data_; }

void CommandSetWasCutArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetWasCutArchive *>(to)->MergeFrom(
      static_cast<const CommandSetWasCutArchive &>(from));
}


void CommandSetWasCutArchive::MergeFrom(const CommandSetWasCutArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetWasCutArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_from_table_uid()->::TSP::UUID::MergeFrom(from._internal_from_table_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_prev_from_table_uid()->::TSP::UUID::MergeFrom(from._internal_prev_from_table_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_from_group_by_uid()->::TSP::UUID::MergeFrom(from._internal_from_group_by_uid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_prev_from_group_by_uid()->::TSP::UUID::MergeFrom(from._internal_prev_from_group_by_uid());
    }
    if (cached_has_bits & 0x00000020u) {
      was_cut_ = from.was_cut_;
    }
    if (cached_has_bits & 0x00000040u) {
      prev_was_cut_ = from.prev_was_cut_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetWasCutArchive::CopyFrom(const CommandSetWasCutArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetWasCutArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetWasCutArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_from_table_uid()) {
    if (!from_table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_prev_from_table_uid()) {
    if (!prev_from_table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_from_group_by_uid()) {
    if (!from_group_by_uid_->IsInitialized()) return false;
  }
  if (_internal_has_prev_from_group_by_uid()) {
    if (!prev_from_group_by_uid_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetWasCutArchive::InternalSwap(CommandSetWasCutArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetWasCutArchive, prev_was_cut_)
      + sizeof(CommandSetWasCutArchive::prev_was_cut_)
      - PROTOBUF_FIELD_OFFSET(CommandSetWasCutArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetWasCutArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[32]);
}

// ===================================================================

class CommandStyleCellsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandStyleCellsArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandStyleCellsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::ReferenceDictionary& format_properties(const CommandStyleCellsArchive* msg);
  static void set_has_format_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::SelectionArchive& selection(const CommandStyleCellsArchive* msg);
  static void set_has_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_cell_map(const CommandStyleCellsArchive* msg);
  static void set_has_undo_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& redo_cell_map(const CommandStyleCellsArchive* msg);
  static void set_has_redo_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& text_undo(const CommandStyleCellsArchive* msg);
  static void set_has_text_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001d) ^ 0x0000001d) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandStyleCellsArchive::_Internal::super(const CommandStyleCellsArchive* msg) {
  return *msg->super_;
}
const ::TSP::ReferenceDictionary&
CommandStyleCellsArchive::_Internal::format_properties(const CommandStyleCellsArchive* msg) {
  return *msg->format_properties_;
}
const ::TST::SelectionArchive&
CommandStyleCellsArchive::_Internal::selection(const CommandStyleCellsArchive* msg) {
  return *msg->selection_;
}
const ::TSP::Reference&
CommandStyleCellsArchive::_Internal::undo_cell_map(const CommandStyleCellsArchive* msg) {
  return *msg->undo_cell_map_;
}
const ::TSP::Reference&
CommandStyleCellsArchive::_Internal::redo_cell_map(const CommandStyleCellsArchive* msg) {
  return *msg->redo_cell_map_;
}
const ::TSP::Reference&
CommandStyleCellsArchive::_Internal::text_undo(const CommandStyleCellsArchive* msg) {
  return *msg->text_undo_;
}
void CommandStyleCellsArchive::clear_format_properties() {
  if (format_properties_ != nullptr) format_properties_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandStyleCellsArchive::clear_selection() {
  if (selection_ != nullptr) selection_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandStyleCellsArchive::clear_undo_cell_map() {
  if (undo_cell_map_ != nullptr) undo_cell_map_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandStyleCellsArchive::clear_redo_cell_map() {
  if (redo_cell_map_ != nullptr) redo_cell_map_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CommandStyleCellsArchive::clear_text_undo() {
  if (text_undo_ != nullptr) text_undo_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
CommandStyleCellsArchive::CommandStyleCellsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandStyleCellsArchive)
}
CommandStyleCellsArchive::CommandStyleCellsArchive(const CommandStyleCellsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_format_properties()) {
    format_properties_ = new ::TSP::ReferenceDictionary(*from.format_properties_);
  } else {
    format_properties_ = nullptr;
  }
  if (from._internal_has_selection()) {
    selection_ = new ::TST::SelectionArchive(*from.selection_);
  } else {
    selection_ = nullptr;
  }
  if (from._internal_has_undo_cell_map()) {
    undo_cell_map_ = new ::TSP::Reference(*from.undo_cell_map_);
  } else {
    undo_cell_map_ = nullptr;
  }
  if (from._internal_has_redo_cell_map()) {
    redo_cell_map_ = new ::TSP::Reference(*from.redo_cell_map_);
  } else {
    redo_cell_map_ = nullptr;
  }
  if (from._internal_has_text_undo()) {
    text_undo_ = new ::TSP::Reference(*from.text_undo_);
  } else {
    text_undo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandStyleCellsArchive)
}

inline void CommandStyleCellsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&text_undo_) -
    reinterpret_cast<char*>(&super_)) + sizeof(text_undo_));
}

CommandStyleCellsArchive::~CommandStyleCellsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandStyleCellsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandStyleCellsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete format_properties_;
  if (this != internal_default_instance()) delete selection_;
  if (this != internal_default_instance()) delete undo_cell_map_;
  if (this != internal_default_instance()) delete redo_cell_map_;
  if (this != internal_default_instance()) delete text_undo_;
}

void CommandStyleCellsArchive::ArenaDtor(void* object) {
  CommandStyleCellsArchive* _this = reinterpret_cast< CommandStyleCellsArchive* >(object);
  (void)_this;
}
void CommandStyleCellsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandStyleCellsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandStyleCellsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandStyleCellsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(format_properties_ != nullptr);
      format_properties_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(selection_ != nullptr);
      selection_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undo_cell_map_ != nullptr);
      undo_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(redo_cell_map_ != nullptr);
      redo_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(text_undo_ != nullptr);
      text_undo_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandStyleCellsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.ReferenceDictionary format_properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_format_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.SelectionArchive selection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference undo_cell_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference redo_cell_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_redo_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference text_undo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_undo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandStyleCellsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandStyleCellsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.ReferenceDictionary format_properties = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::format_properties(this), target, stream);
  }

  // required .TST.SelectionArchive selection = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::selection(this), target, stream);
  }

  // required .TSP.Reference undo_cell_map = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::undo_cell_map(this), target, stream);
  }

  // required .TSP.Reference redo_cell_map = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::redo_cell_map(this), target, stream);
  }

  // optional .TSP.Reference text_undo = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::text_undo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandStyleCellsArchive)
  return target;
}

size_t CommandStyleCellsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandStyleCellsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_selection()) {
    // required .TST.SelectionArchive selection = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selection_);
  }

  if (_internal_has_undo_cell_map()) {
    // required .TSP.Reference undo_cell_map = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *undo_cell_map_);
  }

  if (_internal_has_redo_cell_map()) {
    // required .TSP.Reference redo_cell_map = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *redo_cell_map_);
  }

  return total_size;
}
size_t CommandStyleCellsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandStyleCellsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TST.SelectionArchive selection = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selection_);

    // required .TSP.Reference undo_cell_map = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *undo_cell_map_);

    // required .TSP.Reference redo_cell_map = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *redo_cell_map_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.ReferenceDictionary format_properties = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *format_properties_);
  }

  // optional .TSP.Reference text_undo = 6;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_undo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandStyleCellsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandStyleCellsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandStyleCellsArchive::GetClassData() const { return &_class_data_; }

void CommandStyleCellsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandStyleCellsArchive *>(to)->MergeFrom(
      static_cast<const CommandStyleCellsArchive &>(from));
}


void CommandStyleCellsArchive::MergeFrom(const CommandStyleCellsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandStyleCellsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_format_properties()->::TSP::ReferenceDictionary::MergeFrom(from._internal_format_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_selection()->::TST::SelectionArchive::MergeFrom(from._internal_selection());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_undo_cell_map()->::TSP::Reference::MergeFrom(from._internal_undo_cell_map());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_redo_cell_map()->::TSP::Reference::MergeFrom(from._internal_redo_cell_map());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_text_undo()->::TSP::Reference::MergeFrom(from._internal_text_undo());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandStyleCellsArchive::CopyFrom(const CommandStyleCellsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandStyleCellsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStyleCellsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_format_properties()) {
    if (!format_properties_->IsInitialized()) return false;
  }
  if (_internal_has_selection()) {
    if (!selection_->IsInitialized()) return false;
  }
  if (_internal_has_undo_cell_map()) {
    if (!undo_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_redo_cell_map()) {
    if (!redo_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_text_undo()) {
    if (!text_undo_->IsInitialized()) return false;
  }
  return true;
}

void CommandStyleCellsArchive::InternalSwap(CommandStyleCellsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandStyleCellsArchive, text_undo_)
      + sizeof(CommandStyleCellsArchive::text_undo_)
      - PROTOBUF_FIELD_OFFSET(CommandStyleCellsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandStyleCellsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[33]);
}

// ===================================================================

class CommandStyleTableArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandStyleTableArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandStyleTableArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::ReferenceDictionary& format_properties(const CommandStyleTableArchive* msg);
  static void set_has_format_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSTSOS::TableStylePropertyChangeSetArchive& old_style(const CommandStyleTableArchive* msg);
  static void set_has_old_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSTSOS::TableStylePropertyChangeSetArchive& new_style(const CommandStyleTableArchive* msg);
  static void set_has_new_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandStyleTableArchive::_Internal::super(const CommandStyleTableArchive* msg) {
  return *msg->super_;
}
const ::TSP::ReferenceDictionary&
CommandStyleTableArchive::_Internal::format_properties(const CommandStyleTableArchive* msg) {
  return *msg->format_properties_;
}
const ::TSTSOS::TableStylePropertyChangeSetArchive&
CommandStyleTableArchive::_Internal::old_style(const CommandStyleTableArchive* msg) {
  return *msg->old_style_;
}
const ::TSTSOS::TableStylePropertyChangeSetArchive&
CommandStyleTableArchive::_Internal::new_style(const CommandStyleTableArchive* msg) {
  return *msg->new_style_;
}
void CommandStyleTableArchive::clear_format_properties() {
  if (format_properties_ != nullptr) format_properties_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandStyleTableArchive::clear_old_style() {
  if (old_style_ != nullptr) old_style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandStyleTableArchive::clear_new_style() {
  if (new_style_ != nullptr) new_style_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandStyleTableArchive::CommandStyleTableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandStyleTableArchive)
}
CommandStyleTableArchive::CommandStyleTableArchive(const CommandStyleTableArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_format_properties()) {
    format_properties_ = new ::TSP::ReferenceDictionary(*from.format_properties_);
  } else {
    format_properties_ = nullptr;
  }
  if (from._internal_has_old_style()) {
    old_style_ = new ::TSTSOS::TableStylePropertyChangeSetArchive(*from.old_style_);
  } else {
    old_style_ = nullptr;
  }
  if (from._internal_has_new_style()) {
    new_style_ = new ::TSTSOS::TableStylePropertyChangeSetArchive(*from.new_style_);
  } else {
    new_style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandStyleTableArchive)
}

inline void CommandStyleTableArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_style_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_style_));
}

CommandStyleTableArchive::~CommandStyleTableArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandStyleTableArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandStyleTableArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete format_properties_;
  if (this != internal_default_instance()) delete old_style_;
  if (this != internal_default_instance()) delete new_style_;
}

void CommandStyleTableArchive::ArenaDtor(void* object) {
  CommandStyleTableArchive* _this = reinterpret_cast< CommandStyleTableArchive* >(object);
  (void)_this;
}
void CommandStyleTableArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandStyleTableArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandStyleTableArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandStyleTableArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(format_properties_ != nullptr);
      format_properties_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(old_style_ != nullptr);
      old_style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(new_style_ != nullptr);
      new_style_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandStyleTableArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.ReferenceDictionary format_properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_format_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSTSOS.TableStylePropertyChangeSetArchive old_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSTSOS.TableStylePropertyChangeSetArchive new_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandStyleTableArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandStyleTableArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.ReferenceDictionary format_properties = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::format_properties(this), target, stream);
  }

  // optional .TSTSOS.TableStylePropertyChangeSetArchive old_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::old_style(this), target, stream);
  }

  // optional .TSTSOS.TableStylePropertyChangeSetArchive new_style = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::new_style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandStyleTableArchive)
  return target;
}

size_t CommandStyleTableArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandStyleTableArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.ReferenceDictionary format_properties = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *format_properties_);
    }

    // optional .TSTSOS.TableStylePropertyChangeSetArchive old_style = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_style_);
    }

    // optional .TSTSOS.TableStylePropertyChangeSetArchive new_style = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_style_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandStyleTableArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandStyleTableArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandStyleTableArchive::GetClassData() const { return &_class_data_; }

void CommandStyleTableArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandStyleTableArchive *>(to)->MergeFrom(
      static_cast<const CommandStyleTableArchive &>(from));
}


void CommandStyleTableArchive::MergeFrom(const CommandStyleTableArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandStyleTableArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_format_properties()->::TSP::ReferenceDictionary::MergeFrom(from._internal_format_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_old_style()->::TSTSOS::TableStylePropertyChangeSetArchive::MergeFrom(from._internal_old_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_new_style()->::TSTSOS::TableStylePropertyChangeSetArchive::MergeFrom(from._internal_new_style());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandStyleTableArchive::CopyFrom(const CommandStyleTableArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandStyleTableArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStyleTableArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_format_properties()) {
    if (!format_properties_->IsInitialized()) return false;
  }
  if (_internal_has_old_style()) {
    if (!old_style_->IsInitialized()) return false;
  }
  if (_internal_has_new_style()) {
    if (!new_style_->IsInitialized()) return false;
  }
  return true;
}

void CommandStyleTableArchive::InternalSwap(CommandStyleTableArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandStyleTableArchive, new_style_)
      + sizeof(CommandStyleTableArchive::new_style_)
      - PROTOBUF_FIELD_OFFSET(CommandStyleTableArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandStyleTableArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[34]);
}

// ===================================================================

class CommandSetRepeatingHeaderEnabledArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetRepeatingHeaderEnabledArchive>()._has_bits_);
  static void set_has_repeating_header_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::TableCommandArchive& super(const CommandSetRepeatingHeaderEnabledArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prev_repeating_header_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetRepeatingHeaderEnabledArchive::_Internal::super(const CommandSetRepeatingHeaderEnabledArchive* msg) {
  return *msg->super_;
}
CommandSetRepeatingHeaderEnabledArchive::CommandSetRepeatingHeaderEnabledArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetRepeatingHeaderEnabledArchive)
}
CommandSetRepeatingHeaderEnabledArchive::CommandSetRepeatingHeaderEnabledArchive(const CommandSetRepeatingHeaderEnabledArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&prev_repeating_header_enabled_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(prev_repeating_header_enabled_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetRepeatingHeaderEnabledArchive)
}

inline void CommandSetRepeatingHeaderEnabledArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prev_repeating_header_enabled_) -
    reinterpret_cast<char*>(&super_)) + sizeof(prev_repeating_header_enabled_));
}

CommandSetRepeatingHeaderEnabledArchive::~CommandSetRepeatingHeaderEnabledArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetRepeatingHeaderEnabledArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetRepeatingHeaderEnabledArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetRepeatingHeaderEnabledArchive::ArenaDtor(void* object) {
  CommandSetRepeatingHeaderEnabledArchive* _this = reinterpret_cast< CommandSetRepeatingHeaderEnabledArchive* >(object);
  (void)_this;
}
void CommandSetRepeatingHeaderEnabledArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetRepeatingHeaderEnabledArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetRepeatingHeaderEnabledArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetRepeatingHeaderEnabledArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prev_repeating_header_enabled_) -
        reinterpret_cast<char*>(&direction_)) + sizeof(prev_repeating_header_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetRepeatingHeaderEnabledArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool repeating_header_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_repeating_header_enabled(&has_bits);
          repeating_header_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.TableDimensionArchive direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableDimensionArchive_IsValid(val))) {
            _internal_set_direction(static_cast<::TST::TableDimensionArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .TST.TableCommandArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool prev_repeating_header_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_prev_repeating_header_enabled(&has_bits);
          prev_repeating_header_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetRepeatingHeaderEnabledArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetRepeatingHeaderEnabledArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool repeating_header_enabled = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_repeating_header_enabled(), target);
  }

  // required .TST.TableDimensionArchive direction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  // required .TST.TableCommandArchive super = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::super(this), target, stream);
  }

  // optional bool prev_repeating_header_enabled = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_prev_repeating_header_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetRepeatingHeaderEnabledArchive)
  return target;
}

size_t CommandSetRepeatingHeaderEnabledArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetRepeatingHeaderEnabledArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_direction()) {
    // required .TST.TableDimensionArchive direction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  if (_internal_has_repeating_header_enabled()) {
    // required bool repeating_header_enabled = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetRepeatingHeaderEnabledArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetRepeatingHeaderEnabledArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TST.TableDimensionArchive direction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());

    // required bool repeating_header_enabled = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool prev_repeating_header_enabled = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetRepeatingHeaderEnabledArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetRepeatingHeaderEnabledArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetRepeatingHeaderEnabledArchive::GetClassData() const { return &_class_data_; }

void CommandSetRepeatingHeaderEnabledArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetRepeatingHeaderEnabledArchive *>(to)->MergeFrom(
      static_cast<const CommandSetRepeatingHeaderEnabledArchive &>(from));
}


void CommandSetRepeatingHeaderEnabledArchive::MergeFrom(const CommandSetRepeatingHeaderEnabledArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetRepeatingHeaderEnabledArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000004u) {
      repeating_header_enabled_ = from.repeating_header_enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      prev_repeating_header_enabled_ = from.prev_repeating_header_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetRepeatingHeaderEnabledArchive::CopyFrom(const CommandSetRepeatingHeaderEnabledArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetRepeatingHeaderEnabledArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetRepeatingHeaderEnabledArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetRepeatingHeaderEnabledArchive::InternalSwap(CommandSetRepeatingHeaderEnabledArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetRepeatingHeaderEnabledArchive, prev_repeating_header_enabled_)
      + sizeof(CommandSetRepeatingHeaderEnabledArchive::prev_repeating_header_enabled_)
      - PROTOBUF_FIELD_OFFSET(CommandSetRepeatingHeaderEnabledArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetRepeatingHeaderEnabledArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[35]);
}

// ===================================================================

class CommandSetFiltersEnabledArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetFiltersEnabledArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetFiltersEnabledArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_filters_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_old_filters_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetFiltersEnabledArchive::_Internal::super(const CommandSetFiltersEnabledArchive* msg) {
  return *msg->super_;
}
void CommandSetFiltersEnabledArchive::clear_rollback_uid_list() {
  rollback_uid_list_.Clear();
}
CommandSetFiltersEnabledArchive::CommandSetFiltersEnabledArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rollback_uid_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetFiltersEnabledArchive)
}
CommandSetFiltersEnabledArchive::CommandSetFiltersEnabledArchive(const CommandSetFiltersEnabledArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rollback_uid_list_(from.rollback_uid_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&new_filters_enabled_, &from.new_filters_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&old_filters_enabled_) -
    reinterpret_cast<char*>(&new_filters_enabled_)) + sizeof(old_filters_enabled_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetFiltersEnabledArchive)
}

inline void CommandSetFiltersEnabledArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_filters_enabled_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_filters_enabled_));
}

CommandSetFiltersEnabledArchive::~CommandSetFiltersEnabledArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetFiltersEnabledArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetFiltersEnabledArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetFiltersEnabledArchive::ArenaDtor(void* object) {
  CommandSetFiltersEnabledArchive* _this = reinterpret_cast< CommandSetFiltersEnabledArchive* >(object);
  (void)_this;
}
void CommandSetFiltersEnabledArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetFiltersEnabledArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetFiltersEnabledArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetFiltersEnabledArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rollback_uid_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  ::memset(&new_filters_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&old_filters_enabled_) -
      reinterpret_cast<char*>(&new_filters_enabled_)) + sizeof(old_filters_enabled_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetFiltersEnabledArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool new_filters_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_new_filters_enabled(&has_bits);
          new_filters_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool old_filters_enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_old_filters_enabled(&has_bits);
          old_filters_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID rollback_uid_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rollback_uid_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetFiltersEnabledArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetFiltersEnabledArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required bool new_filters_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_new_filters_enabled(), target);
  }

  // optional bool old_filters_enabled = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_old_filters_enabled(), target);
  }

  // repeated .TSP.UUID rollback_uid_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rollback_uid_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_rollback_uid_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetFiltersEnabledArchive)
  return target;
}

size_t CommandSetFiltersEnabledArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetFiltersEnabledArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_new_filters_enabled()) {
    // required bool new_filters_enabled = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetFiltersEnabledArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetFiltersEnabledArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required bool new_filters_enabled = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID rollback_uid_list = 4;
  total_size += 1UL * this->_internal_rollback_uid_list_size();
  for (const auto& msg : this->rollback_uid_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool old_filters_enabled = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetFiltersEnabledArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetFiltersEnabledArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetFiltersEnabledArchive::GetClassData() const { return &_class_data_; }

void CommandSetFiltersEnabledArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetFiltersEnabledArchive *>(to)->MergeFrom(
      static_cast<const CommandSetFiltersEnabledArchive &>(from));
}


void CommandSetFiltersEnabledArchive::MergeFrom(const CommandSetFiltersEnabledArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetFiltersEnabledArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rollback_uid_list_.MergeFrom(from.rollback_uid_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      new_filters_enabled_ = from.new_filters_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      old_filters_enabled_ = from.old_filters_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetFiltersEnabledArchive::CopyFrom(const CommandSetFiltersEnabledArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetFiltersEnabledArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFiltersEnabledArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rollback_uid_list_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetFiltersEnabledArchive::InternalSwap(CommandSetFiltersEnabledArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rollback_uid_list_.InternalSwap(&other->rollback_uid_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetFiltersEnabledArchive, old_filters_enabled_)
      + sizeof(CommandSetFiltersEnabledArchive::old_filters_enabled_)
      - PROTOBUF_FIELD_OFFSET(CommandSetFiltersEnabledArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetFiltersEnabledArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[36]);
}

// ===================================================================

class CommandAddTableStylePresetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandAddTableStylePresetArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandAddTableStylePresetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& table_styles(const CommandAddTableStylePresetArchive* msg);
  static void set_has_table_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_send_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandAddTableStylePresetArchive::_Internal::super(const CommandAddTableStylePresetArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandAddTableStylePresetArchive::_Internal::table_styles(const CommandAddTableStylePresetArchive* msg) {
  return *msg->table_styles_;
}
void CommandAddTableStylePresetArchive::clear_table_styles() {
  if (table_styles_ != nullptr) table_styles_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandAddTableStylePresetArchive::CommandAddTableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandAddTableStylePresetArchive)
}
CommandAddTableStylePresetArchive::CommandAddTableStylePresetArchive(const CommandAddTableStylePresetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_table_styles()) {
    table_styles_ = new ::TSP::Reference(*from.table_styles_);
  } else {
    table_styles_ = nullptr;
  }
  ::memcpy(&preset_index_, &from.preset_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_notification_) -
    reinterpret_cast<char*>(&preset_index_)) + sizeof(send_notification_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandAddTableStylePresetArchive)
}

inline void CommandAddTableStylePresetArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&send_notification_) -
    reinterpret_cast<char*>(&super_)) + sizeof(send_notification_));
}

CommandAddTableStylePresetArchive::~CommandAddTableStylePresetArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandAddTableStylePresetArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandAddTableStylePresetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete table_styles_;
}

void CommandAddTableStylePresetArchive::ArenaDtor(void* object) {
  CommandAddTableStylePresetArchive* _this = reinterpret_cast< CommandAddTableStylePresetArchive* >(object);
  (void)_this;
}
void CommandAddTableStylePresetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandAddTableStylePresetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandAddTableStylePresetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandAddTableStylePresetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(table_styles_ != nullptr);
      table_styles_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&preset_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&send_notification_) -
        reinterpret_cast<char*>(&preset_index_)) + sizeof(send_notification_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandAddTableStylePresetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 preset_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_preset_index(&has_bits);
          preset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference table_styles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_styles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool send_notification = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_send_notification(&has_bits);
          send_notification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandAddTableStylePresetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandAddTableStylePresetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required int32 preset_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_preset_index(), target);
  }

  // required .TSP.Reference table_styles = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::table_styles(this), target, stream);
  }

  // required bool send_notification = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_send_notification(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandAddTableStylePresetArchive)
  return target;
}

size_t CommandAddTableStylePresetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandAddTableStylePresetArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_table_styles()) {
    // required .TSP.Reference table_styles = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_styles_);
  }

  if (_internal_has_preset_index()) {
    // required int32 preset_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_preset_index());
  }

  if (_internal_has_send_notification()) {
    // required bool send_notification = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandAddTableStylePresetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandAddTableStylePresetArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference table_styles = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_styles_);

    // required int32 preset_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_preset_index());

    // required bool send_notification = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandAddTableStylePresetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandAddTableStylePresetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandAddTableStylePresetArchive::GetClassData() const { return &_class_data_; }

void CommandAddTableStylePresetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandAddTableStylePresetArchive *>(to)->MergeFrom(
      static_cast<const CommandAddTableStylePresetArchive &>(from));
}


void CommandAddTableStylePresetArchive::MergeFrom(const CommandAddTableStylePresetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandAddTableStylePresetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_table_styles()->::TSP::Reference::MergeFrom(from._internal_table_styles());
    }
    if (cached_has_bits & 0x00000004u) {
      preset_index_ = from.preset_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      send_notification_ = from.send_notification_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandAddTableStylePresetArchive::CopyFrom(const CommandAddTableStylePresetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandAddTableStylePresetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandAddTableStylePresetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_table_styles()) {
    if (!table_styles_->IsInitialized()) return false;
  }
  return true;
}

void CommandAddTableStylePresetArchive::InternalSwap(CommandAddTableStylePresetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandAddTableStylePresetArchive, send_notification_)
      + sizeof(CommandAddTableStylePresetArchive::send_notification_)
      - PROTOBUF_FIELD_OFFSET(CommandAddTableStylePresetArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandAddTableStylePresetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[37]);
}

// ===================================================================

class CommandRemoveTableStylePresetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRemoveTableStylePresetArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandRemoveTableStylePresetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& theme(const CommandRemoveTableStylePresetArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& removed_table_styles(const CommandRemoveTableStylePresetArchive* msg);
  static void set_has_removed_table_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preset_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_preset_index_in_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandRemoveTableStylePresetArchive::_Internal::super(const CommandRemoveTableStylePresetArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandRemoveTableStylePresetArchive::_Internal::theme(const CommandRemoveTableStylePresetArchive* msg) {
  return *msg->theme_;
}
const ::TSP::Reference&
CommandRemoveTableStylePresetArchive::_Internal::removed_table_styles(const CommandRemoveTableStylePresetArchive* msg) {
  return *msg->removed_table_styles_;
}
void CommandRemoveTableStylePresetArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandRemoveTableStylePresetArchive::clear_theme() {
  if (theme_ != nullptr) theme_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandRemoveTableStylePresetArchive::clear_removed_table_styles() {
  if (removed_table_styles_ != nullptr) removed_table_styles_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandRemoveTableStylePresetArchive::CommandRemoveTableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandRemoveTableStylePresetArchive)
}
CommandRemoveTableStylePresetArchive::CommandRemoveTableStylePresetArchive(const CommandRemoveTableStylePresetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_theme()) {
    theme_ = new ::TSP::Reference(*from.theme_);
  } else {
    theme_ = nullptr;
  }
  if (from._internal_has_removed_table_styles()) {
    removed_table_styles_ = new ::TSP::Reference(*from.removed_table_styles_);
  } else {
    removed_table_styles_ = nullptr;
  }
  ::memcpy(&preset_id_, &from.preset_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&preset_index_in_theme_) -
    reinterpret_cast<char*>(&preset_id_)) + sizeof(preset_index_in_theme_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandRemoveTableStylePresetArchive)
}

inline void CommandRemoveTableStylePresetArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&preset_index_in_theme_) -
    reinterpret_cast<char*>(&super_)) + sizeof(preset_index_in_theme_));
}

CommandRemoveTableStylePresetArchive::~CommandRemoveTableStylePresetArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRemoveTableStylePresetArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandRemoveTableStylePresetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete theme_;
  if (this != internal_default_instance()) delete removed_table_styles_;
}

void CommandRemoveTableStylePresetArchive::ArenaDtor(void* object) {
  CommandRemoveTableStylePresetArchive* _this = reinterpret_cast< CommandRemoveTableStylePresetArchive* >(object);
  (void)_this;
}
void CommandRemoveTableStylePresetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandRemoveTableStylePresetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandRemoveTableStylePresetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRemoveTableStylePresetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(theme_ != nullptr);
      theme_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(removed_table_styles_ != nullptr);
      removed_table_styles_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&preset_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preset_index_in_theme_) -
        reinterpret_cast<char*>(&preset_id_)) + sizeof(preset_index_in_theme_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRemoveTableStylePresetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference removed_table_styles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_removed_table_styles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 preset_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_preset_id(&has_bits);
          preset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 preset_index_in_theme = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_preset_index_in_theme(&has_bits);
          preset_index_in_theme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRemoveTableStylePresetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRemoveTableStylePresetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference theme = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::theme(this), target, stream);
  }

  // required .TSP.Reference removed_table_styles = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::removed_table_styles(this), target, stream);
  }

  // required int32 preset_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_preset_id(), target);
  }

  // required int32 preset_index_in_theme = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_preset_index_in_theme(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRemoveTableStylePresetArchive)
  return target;
}

size_t CommandRemoveTableStylePresetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRemoveTableStylePresetArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *theme_);
  }

  if (_internal_has_removed_table_styles()) {
    // required .TSP.Reference removed_table_styles = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *removed_table_styles_);
  }

  if (_internal_has_preset_id()) {
    // required int32 preset_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_preset_id());
  }

  if (_internal_has_preset_index_in_theme()) {
    // required int32 preset_index_in_theme = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_preset_index_in_theme());
  }

  return total_size;
}
size_t CommandRemoveTableStylePresetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRemoveTableStylePresetArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *theme_);

    // required .TSP.Reference removed_table_styles = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *removed_table_styles_);

    // required int32 preset_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_preset_id());

    // required int32 preset_index_in_theme = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_preset_index_in_theme());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRemoveTableStylePresetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandRemoveTableStylePresetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRemoveTableStylePresetArchive::GetClassData() const { return &_class_data_; }

void CommandRemoveTableStylePresetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandRemoveTableStylePresetArchive *>(to)->MergeFrom(
      static_cast<const CommandRemoveTableStylePresetArchive &>(from));
}


void CommandRemoveTableStylePresetArchive::MergeFrom(const CommandRemoveTableStylePresetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRemoveTableStylePresetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_theme()->::TSP::Reference::MergeFrom(from._internal_theme());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_removed_table_styles()->::TSP::Reference::MergeFrom(from._internal_removed_table_styles());
    }
    if (cached_has_bits & 0x00000008u) {
      preset_id_ = from.preset_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      preset_index_in_theme_ = from.preset_index_in_theme_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRemoveTableStylePresetArchive::CopyFrom(const CommandRemoveTableStylePresetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRemoveTableStylePresetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRemoveTableStylePresetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!theme_->IsInitialized()) return false;
  }
  if (_internal_has_removed_table_styles()) {
    if (!removed_table_styles_->IsInitialized()) return false;
  }
  return true;
}

void CommandRemoveTableStylePresetArchive::InternalSwap(CommandRemoveTableStylePresetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRemoveTableStylePresetArchive, preset_index_in_theme_)
      + sizeof(CommandRemoveTableStylePresetArchive::preset_index_in_theme_)
      - PROTOBUF_FIELD_OFFSET(CommandRemoveTableStylePresetArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRemoveTableStylePresetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[38]);
}

// ===================================================================

class CommandReplaceTableStylePresetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandReplaceTableStylePresetArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandReplaceTableStylePresetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& theme(const CommandReplaceTableStylePresetArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& old_table_styles(const CommandReplaceTableStylePresetArchive* msg);
  static void set_has_old_table_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& new_table_styles(const CommandReplaceTableStylePresetArchive* msg);
  static void set_has_new_table_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandReplaceTableStylePresetArchive::_Internal::super(const CommandReplaceTableStylePresetArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandReplaceTableStylePresetArchive::_Internal::theme(const CommandReplaceTableStylePresetArchive* msg) {
  return *msg->theme_;
}
const ::TSP::Reference&
CommandReplaceTableStylePresetArchive::_Internal::old_table_styles(const CommandReplaceTableStylePresetArchive* msg) {
  return *msg->old_table_styles_;
}
const ::TSP::Reference&
CommandReplaceTableStylePresetArchive::_Internal::new_table_styles(const CommandReplaceTableStylePresetArchive* msg) {
  return *msg->new_table_styles_;
}
void CommandReplaceTableStylePresetArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandReplaceTableStylePresetArchive::clear_theme() {
  if (theme_ != nullptr) theme_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandReplaceTableStylePresetArchive::clear_old_table_styles() {
  if (old_table_styles_ != nullptr) old_table_styles_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandReplaceTableStylePresetArchive::clear_new_table_styles() {
  if (new_table_styles_ != nullptr) new_table_styles_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandReplaceTableStylePresetArchive::CommandReplaceTableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandReplaceTableStylePresetArchive)
}
CommandReplaceTableStylePresetArchive::CommandReplaceTableStylePresetArchive(const CommandReplaceTableStylePresetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_theme()) {
    theme_ = new ::TSP::Reference(*from.theme_);
  } else {
    theme_ = nullptr;
  }
  if (from._internal_has_old_table_styles()) {
    old_table_styles_ = new ::TSP::Reference(*from.old_table_styles_);
  } else {
    old_table_styles_ = nullptr;
  }
  if (from._internal_has_new_table_styles()) {
    new_table_styles_ = new ::TSP::Reference(*from.new_table_styles_);
  } else {
    new_table_styles_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandReplaceTableStylePresetArchive)
}

inline void CommandReplaceTableStylePresetArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_table_styles_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_table_styles_));
}

CommandReplaceTableStylePresetArchive::~CommandReplaceTableStylePresetArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandReplaceTableStylePresetArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandReplaceTableStylePresetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete theme_;
  if (this != internal_default_instance()) delete old_table_styles_;
  if (this != internal_default_instance()) delete new_table_styles_;
}

void CommandReplaceTableStylePresetArchive::ArenaDtor(void* object) {
  CommandReplaceTableStylePresetArchive* _this = reinterpret_cast< CommandReplaceTableStylePresetArchive* >(object);
  (void)_this;
}
void CommandReplaceTableStylePresetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandReplaceTableStylePresetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandReplaceTableStylePresetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandReplaceTableStylePresetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(theme_ != nullptr);
      theme_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(old_table_styles_ != nullptr);
      old_table_styles_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(new_table_styles_ != nullptr);
      new_table_styles_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandReplaceTableStylePresetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference old_table_styles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_table_styles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference new_table_styles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_table_styles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandReplaceTableStylePresetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandReplaceTableStylePresetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference theme = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::theme(this), target, stream);
  }

  // required .TSP.Reference old_table_styles = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::old_table_styles(this), target, stream);
  }

  // required .TSP.Reference new_table_styles = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::new_table_styles(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandReplaceTableStylePresetArchive)
  return target;
}

size_t CommandReplaceTableStylePresetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandReplaceTableStylePresetArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *theme_);
  }

  if (_internal_has_old_table_styles()) {
    // required .TSP.Reference old_table_styles = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_table_styles_);
  }

  if (_internal_has_new_table_styles()) {
    // required .TSP.Reference new_table_styles = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_table_styles_);
  }

  return total_size;
}
size_t CommandReplaceTableStylePresetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandReplaceTableStylePresetArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *theme_);

    // required .TSP.Reference old_table_styles = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_table_styles_);

    // required .TSP.Reference new_table_styles = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_table_styles_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandReplaceTableStylePresetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandReplaceTableStylePresetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandReplaceTableStylePresetArchive::GetClassData() const { return &_class_data_; }

void CommandReplaceTableStylePresetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandReplaceTableStylePresetArchive *>(to)->MergeFrom(
      static_cast<const CommandReplaceTableStylePresetArchive &>(from));
}


void CommandReplaceTableStylePresetArchive::MergeFrom(const CommandReplaceTableStylePresetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandReplaceTableStylePresetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_theme()->::TSP::Reference::MergeFrom(from._internal_theme());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_old_table_styles()->::TSP::Reference::MergeFrom(from._internal_old_table_styles());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_new_table_styles()->::TSP::Reference::MergeFrom(from._internal_new_table_styles());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandReplaceTableStylePresetArchive::CopyFrom(const CommandReplaceTableStylePresetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandReplaceTableStylePresetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceTableStylePresetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!theme_->IsInitialized()) return false;
  }
  if (_internal_has_old_table_styles()) {
    if (!old_table_styles_->IsInitialized()) return false;
  }
  if (_internal_has_new_table_styles()) {
    if (!new_table_styles_->IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceTableStylePresetArchive::InternalSwap(CommandReplaceTableStylePresetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandReplaceTableStylePresetArchive, new_table_styles_)
      + sizeof(CommandReplaceTableStylePresetArchive::new_table_styles_)
      - PROTOBUF_FIELD_OFFSET(CommandReplaceTableStylePresetArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReplaceTableStylePresetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[39]);
}

// ===================================================================

class CommandApplyTableStylePresetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandApplyTableStylePresetArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandApplyTableStylePresetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& preset(const CommandApplyTableStylePresetArchive* msg);
  static void set_has_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& styles(const CommandApplyTableStylePresetArchive* msg);
  static void set_has_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_preset(const CommandApplyTableStylePresetArchive* msg);
  static void set_has_undo_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& undo_styles(const CommandApplyTableStylePresetArchive* msg);
  static void set_has_undo_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandApplyTableStylePresetArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& undo_cell_diff_map(const CommandApplyTableStylePresetArchive* msg);
  static void set_has_undo_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_apply_preset_option(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_table_clears_all_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_undo_table_clears_all_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::Reference& change_prop_map_wrapper(const CommandApplyTableStylePresetArchive* msg);
  static void set_has_change_prop_map_wrapper(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000701) ^ 0x00000701) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandApplyTableStylePresetArchive::_Internal::super(const CommandApplyTableStylePresetArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandApplyTableStylePresetArchive::_Internal::preset(const CommandApplyTableStylePresetArchive* msg) {
  return *msg->preset_;
}
const ::TSP::Reference&
CommandApplyTableStylePresetArchive::_Internal::styles(const CommandApplyTableStylePresetArchive* msg) {
  return *msg->styles_;
}
const ::TSP::Reference&
CommandApplyTableStylePresetArchive::_Internal::undo_preset(const CommandApplyTableStylePresetArchive* msg) {
  return *msg->undo_preset_;
}
const ::TSP::Reference&
CommandApplyTableStylePresetArchive::_Internal::undo_styles(const CommandApplyTableStylePresetArchive* msg) {
  return *msg->undo_styles_;
}
const ::TSP::Reference&
CommandApplyTableStylePresetArchive::_Internal::cell_diff_map(const CommandApplyTableStylePresetArchive* msg) {
  return *msg->cell_diff_map_;
}
const ::TSP::Reference&
CommandApplyTableStylePresetArchive::_Internal::undo_cell_diff_map(const CommandApplyTableStylePresetArchive* msg) {
  return *msg->undo_cell_diff_map_;
}
const ::TSP::Reference&
CommandApplyTableStylePresetArchive::_Internal::change_prop_map_wrapper(const CommandApplyTableStylePresetArchive* msg) {
  return *msg->change_prop_map_wrapper_;
}
void CommandApplyTableStylePresetArchive::clear_preset() {
  if (preset_ != nullptr) preset_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandApplyTableStylePresetArchive::clear_styles() {
  if (styles_ != nullptr) styles_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandApplyTableStylePresetArchive::clear_undo_preset() {
  if (undo_preset_ != nullptr) undo_preset_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandApplyTableStylePresetArchive::clear_undo_styles() {
  if (undo_styles_ != nullptr) undo_styles_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CommandApplyTableStylePresetArchive::clear_cell_diff_map() {
  if (cell_diff_map_ != nullptr) cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void CommandApplyTableStylePresetArchive::clear_undo_cell_diff_map() {
  if (undo_cell_diff_map_ != nullptr) undo_cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void CommandApplyTableStylePresetArchive::clear_change_prop_map_wrapper() {
  if (change_prop_map_wrapper_ != nullptr) change_prop_map_wrapper_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
CommandApplyTableStylePresetArchive::CommandApplyTableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  row_col_styles_(arena),
  undo_row_col_styles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandApplyTableStylePresetArchive)
}
CommandApplyTableStylePresetArchive::CommandApplyTableStylePresetArchive(const CommandApplyTableStylePresetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      row_col_styles_(from.row_col_styles_),
      undo_row_col_styles_(from.undo_row_col_styles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_preset()) {
    preset_ = new ::TSP::Reference(*from.preset_);
  } else {
    preset_ = nullptr;
  }
  if (from._internal_has_styles()) {
    styles_ = new ::TSP::Reference(*from.styles_);
  } else {
    styles_ = nullptr;
  }
  if (from._internal_has_undo_preset()) {
    undo_preset_ = new ::TSP::Reference(*from.undo_preset_);
  } else {
    undo_preset_ = nullptr;
  }
  if (from._internal_has_undo_styles()) {
    undo_styles_ = new ::TSP::Reference(*from.undo_styles_);
  } else {
    undo_styles_ = nullptr;
  }
  if (from._internal_has_cell_diff_map()) {
    cell_diff_map_ = new ::TSP::Reference(*from.cell_diff_map_);
  } else {
    cell_diff_map_ = nullptr;
  }
  if (from._internal_has_undo_cell_diff_map()) {
    undo_cell_diff_map_ = new ::TSP::Reference(*from.undo_cell_diff_map_);
  } else {
    undo_cell_diff_map_ = nullptr;
  }
  if (from._internal_has_change_prop_map_wrapper()) {
    change_prop_map_wrapper_ = new ::TSP::Reference(*from.change_prop_map_wrapper_);
  } else {
    change_prop_map_wrapper_ = nullptr;
  }
  ::memcpy(&apply_preset_option_, &from.apply_preset_option_,
    static_cast<size_t>(reinterpret_cast<char*>(&undo_table_clears_all_flag_) -
    reinterpret_cast<char*>(&apply_preset_option_)) + sizeof(undo_table_clears_all_flag_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandApplyTableStylePresetArchive)
}

inline void CommandApplyTableStylePresetArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_table_clears_all_flag_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_table_clears_all_flag_));
}

CommandApplyTableStylePresetArchive::~CommandApplyTableStylePresetArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandApplyTableStylePresetArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandApplyTableStylePresetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete preset_;
  if (this != internal_default_instance()) delete styles_;
  if (this != internal_default_instance()) delete undo_preset_;
  if (this != internal_default_instance()) delete undo_styles_;
  if (this != internal_default_instance()) delete cell_diff_map_;
  if (this != internal_default_instance()) delete undo_cell_diff_map_;
  if (this != internal_default_instance()) delete change_prop_map_wrapper_;
}

void CommandApplyTableStylePresetArchive::ArenaDtor(void* object) {
  CommandApplyTableStylePresetArchive* _this = reinterpret_cast< CommandApplyTableStylePresetArchive* >(object);
  (void)_this;
}
void CommandApplyTableStylePresetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandApplyTableStylePresetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandApplyTableStylePresetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandApplyTableStylePresetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_col_styles_.Clear();
  undo_row_col_styles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(preset_ != nullptr);
      preset_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(styles_ != nullptr);
      styles_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undo_preset_ != nullptr);
      undo_preset_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(undo_styles_ != nullptr);
      undo_styles_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(cell_diff_map_ != nullptr);
      cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(undo_cell_diff_map_ != nullptr);
      undo_cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(change_prop_map_wrapper_ != nullptr);
      change_prop_map_wrapper_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&apply_preset_option_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&undo_table_clears_all_flag_) -
        reinterpret_cast<char*>(&apply_preset_option_)) + sizeof(undo_table_clears_all_flag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandApplyTableStylePresetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference preset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference styles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_styles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_preset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_preset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_styles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_styles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference cell_diff_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_cell_diff_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 apply_preset_option = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_apply_preset_option(&has_bits);
          apply_preset_option_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool table_clears_all_flag = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_table_clears_all_flag(&has_bits);
          table_clears_all_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool undo_table_clears_all_flag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_undo_table_clears_all_flag(&has_bits);
          undo_table_clears_all_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.ColumnRowMetadataArchive row_col_styles = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_col_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TST.ColumnRowMetadataArchive undo_row_col_styles = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_row_col_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference change_prop_map_wrapper = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_prop_map_wrapper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandApplyTableStylePresetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandApplyTableStylePresetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference preset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::preset(this), target, stream);
  }

  // optional .TSP.Reference styles = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::styles(this), target, stream);
  }

  // optional .TSP.Reference undo_preset = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::undo_preset(this), target, stream);
  }

  // optional .TSP.Reference undo_styles = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::undo_styles(this), target, stream);
  }

  // optional .TSP.Reference cell_diff_map = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cell_diff_map(this), target, stream);
  }

  // optional .TSP.Reference undo_cell_diff_map = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::undo_cell_diff_map(this), target, stream);
  }

  // required int32 apply_preset_option = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_apply_preset_option(), target);
  }

  // required bool table_clears_all_flag = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_table_clears_all_flag(), target);
  }

  // required bool undo_table_clears_all_flag = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_undo_table_clears_all_flag(), target);
  }

  // repeated .TST.ColumnRowMetadataArchive row_col_styles = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_col_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_row_col_styles(i), target, stream);
  }

  // repeated .TST.ColumnRowMetadataArchive undo_row_col_styles = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_undo_row_col_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_undo_row_col_styles(i), target, stream);
  }

  // optional .TSP.Reference change_prop_map_wrapper = 15;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::change_prop_map_wrapper(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandApplyTableStylePresetArchive)
  return target;
}

size_t CommandApplyTableStylePresetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandApplyTableStylePresetArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_apply_preset_option()) {
    // required int32 apply_preset_option = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_apply_preset_option());
  }

  if (_internal_has_table_clears_all_flag()) {
    // required bool table_clears_all_flag = 11;
    total_size += 1 + 1;
  }

  if (_internal_has_undo_table_clears_all_flag()) {
    // required bool undo_table_clears_all_flag = 12;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandApplyTableStylePresetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandApplyTableStylePresetArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000701) ^ 0x00000701) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required int32 apply_preset_option = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_apply_preset_option());

    // required bool table_clears_all_flag = 11;
    total_size += 1 + 1;

    // required bool undo_table_clears_all_flag = 12;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.ColumnRowMetadataArchive row_col_styles = 13;
  total_size += 1UL * this->_internal_row_col_styles_size();
  for (const auto& msg : this->row_col_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.ColumnRowMetadataArchive undo_row_col_styles = 14;
  total_size += 1UL * this->_internal_undo_row_col_styles_size();
  for (const auto& msg : this->undo_row_col_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSP.Reference preset = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preset_);
    }

    // optional .TSP.Reference styles = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *styles_);
    }

    // optional .TSP.Reference undo_preset = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_preset_);
    }

    // optional .TSP.Reference undo_styles = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_styles_);
    }

    // optional .TSP.Reference cell_diff_map = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_diff_map_);
    }

    // optional .TSP.Reference undo_cell_diff_map = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_cell_diff_map_);
    }

    // optional .TSP.Reference change_prop_map_wrapper = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_prop_map_wrapper_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandApplyTableStylePresetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandApplyTableStylePresetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandApplyTableStylePresetArchive::GetClassData() const { return &_class_data_; }

void CommandApplyTableStylePresetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandApplyTableStylePresetArchive *>(to)->MergeFrom(
      static_cast<const CommandApplyTableStylePresetArchive &>(from));
}


void CommandApplyTableStylePresetArchive::MergeFrom(const CommandApplyTableStylePresetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandApplyTableStylePresetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_col_styles_.MergeFrom(from.row_col_styles_);
  undo_row_col_styles_.MergeFrom(from.undo_row_col_styles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_preset()->::TSP::Reference::MergeFrom(from._internal_preset());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_styles()->::TSP::Reference::MergeFrom(from._internal_styles());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_undo_preset()->::TSP::Reference::MergeFrom(from._internal_undo_preset());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_undo_styles()->::TSP::Reference::MergeFrom(from._internal_undo_styles());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_undo_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_undo_cell_diff_map());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_change_prop_map_wrapper()->::TSP::Reference::MergeFrom(from._internal_change_prop_map_wrapper());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      apply_preset_option_ = from.apply_preset_option_;
    }
    if (cached_has_bits & 0x00000200u) {
      table_clears_all_flag_ = from.table_clears_all_flag_;
    }
    if (cached_has_bits & 0x00000400u) {
      undo_table_clears_all_flag_ = from.undo_table_clears_all_flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandApplyTableStylePresetArchive::CopyFrom(const CommandApplyTableStylePresetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandApplyTableStylePresetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyTableStylePresetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(row_col_styles_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(undo_row_col_styles_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_preset()) {
    if (!preset_->IsInitialized()) return false;
  }
  if (_internal_has_styles()) {
    if (!styles_->IsInitialized()) return false;
  }
  if (_internal_has_undo_preset()) {
    if (!undo_preset_->IsInitialized()) return false;
  }
  if (_internal_has_undo_styles()) {
    if (!undo_styles_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_cell_diff_map()) {
    if (!undo_cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_change_prop_map_wrapper()) {
    if (!change_prop_map_wrapper_->IsInitialized()) return false;
  }
  return true;
}

void CommandApplyTableStylePresetArchive::InternalSwap(CommandApplyTableStylePresetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  row_col_styles_.InternalSwap(&other->row_col_styles_);
  undo_row_col_styles_.InternalSwap(&other->undo_row_col_styles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandApplyTableStylePresetArchive, undo_table_clears_all_flag_)
      + sizeof(CommandApplyTableStylePresetArchive::undo_table_clears_all_flag_)
      - PROTOBUF_FIELD_OFFSET(CommandApplyTableStylePresetArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandApplyTableStylePresetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[40]);
}

// ===================================================================

class CommandSetBaseArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetBaseArchive>()._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetBaseArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetBaseArchive::_Internal::super(const CommandSetBaseArchive* msg) {
  return *msg->super_;
}
CommandSetBaseArchive::CommandSetBaseArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetBaseArchive)
}
CommandSetBaseArchive::CommandSetBaseArchive(const CommandSetBaseArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::CommandMutateCellFormatArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  base_ = from.base_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetBaseArchive)
}

inline void CommandSetBaseArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&base_) -
    reinterpret_cast<char*>(&super_)) + sizeof(base_));
}

CommandSetBaseArchive::~CommandSetBaseArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetBaseArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetBaseArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetBaseArchive::ArenaDtor(void* object) {
  CommandSetBaseArchive* _this = reinterpret_cast< CommandSetBaseArchive* >(object);
  (void)_this;
}
void CommandSetBaseArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetBaseArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetBaseArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetBaseArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  base_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetBaseArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_base(&has_bits);
          base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetBaseArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetBaseArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required uint32 base = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_base(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetBaseArchive)
  return target;
}

size_t CommandSetBaseArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetBaseArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_base()) {
    // required uint32 base = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_base());
  }

  return total_size;
}
size_t CommandSetBaseArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetBaseArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 base = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_base());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetBaseArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetBaseArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetBaseArchive::GetClassData() const { return &_class_data_; }

void CommandSetBaseArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetBaseArchive *>(to)->MergeFrom(
      static_cast<const CommandSetBaseArchive &>(from));
}


void CommandSetBaseArchive::MergeFrom(const CommandSetBaseArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetBaseArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      base_ = from.base_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetBaseArchive::CopyFrom(const CommandSetBaseArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetBaseArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetBaseArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetBaseArchive::InternalSwap(CommandSetBaseArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetBaseArchive, base_)
      + sizeof(CommandSetBaseArchive::base_)
      - PROTOBUF_FIELD_OFFSET(CommandSetBaseArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetBaseArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[41]);
}

// ===================================================================

class CommandSetBasePlacesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetBasePlacesArchive>()._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetBasePlacesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_base_places(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetBasePlacesArchive::_Internal::super(const CommandSetBasePlacesArchive* msg) {
  return *msg->super_;
}
CommandSetBasePlacesArchive::CommandSetBasePlacesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetBasePlacesArchive)
}
CommandSetBasePlacesArchive::CommandSetBasePlacesArchive(const CommandSetBasePlacesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::CommandMutateCellFormatArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  base_places_ = from.base_places_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetBasePlacesArchive)
}

inline void CommandSetBasePlacesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&base_places_) -
    reinterpret_cast<char*>(&super_)) + sizeof(base_places_));
}

CommandSetBasePlacesArchive::~CommandSetBasePlacesArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetBasePlacesArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetBasePlacesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetBasePlacesArchive::ArenaDtor(void* object) {
  CommandSetBasePlacesArchive* _this = reinterpret_cast< CommandSetBasePlacesArchive* >(object);
  (void)_this;
}
void CommandSetBasePlacesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetBasePlacesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetBasePlacesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetBasePlacesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  base_places_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetBasePlacesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 base_places = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_base_places(&has_bits);
          base_places_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetBasePlacesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetBasePlacesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required uint32 base_places = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_base_places(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetBasePlacesArchive)
  return target;
}

size_t CommandSetBasePlacesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetBasePlacesArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_base_places()) {
    // required uint32 base_places = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_base_places());
  }

  return total_size;
}
size_t CommandSetBasePlacesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetBasePlacesArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 base_places = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_base_places());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetBasePlacesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetBasePlacesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetBasePlacesArchive::GetClassData() const { return &_class_data_; }

void CommandSetBasePlacesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetBasePlacesArchive *>(to)->MergeFrom(
      static_cast<const CommandSetBasePlacesArchive &>(from));
}


void CommandSetBasePlacesArchive::MergeFrom(const CommandSetBasePlacesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetBasePlacesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      base_places_ = from.base_places_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetBasePlacesArchive::CopyFrom(const CommandSetBasePlacesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetBasePlacesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetBasePlacesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetBasePlacesArchive::InternalSwap(CommandSetBasePlacesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetBasePlacesArchive, base_places_)
      + sizeof(CommandSetBasePlacesArchive::base_places_)
      - PROTOBUF_FIELD_OFFSET(CommandSetBasePlacesArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetBasePlacesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[42]);
}

// ===================================================================

class CommandSetBaseUseMinusSignArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetBaseUseMinusSignArchive>()._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetBaseUseMinusSignArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_base_use_minus_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetBaseUseMinusSignArchive::_Internal::super(const CommandSetBaseUseMinusSignArchive* msg) {
  return *msg->super_;
}
CommandSetBaseUseMinusSignArchive::CommandSetBaseUseMinusSignArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetBaseUseMinusSignArchive)
}
CommandSetBaseUseMinusSignArchive::CommandSetBaseUseMinusSignArchive(const CommandSetBaseUseMinusSignArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::CommandMutateCellFormatArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  base_use_minus_sign_ = from.base_use_minus_sign_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetBaseUseMinusSignArchive)
}

inline void CommandSetBaseUseMinusSignArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&base_use_minus_sign_) -
    reinterpret_cast<char*>(&super_)) + sizeof(base_use_minus_sign_));
}

CommandSetBaseUseMinusSignArchive::~CommandSetBaseUseMinusSignArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetBaseUseMinusSignArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetBaseUseMinusSignArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetBaseUseMinusSignArchive::ArenaDtor(void* object) {
  CommandSetBaseUseMinusSignArchive* _this = reinterpret_cast< CommandSetBaseUseMinusSignArchive* >(object);
  (void)_this;
}
void CommandSetBaseUseMinusSignArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetBaseUseMinusSignArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetBaseUseMinusSignArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetBaseUseMinusSignArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  base_use_minus_sign_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetBaseUseMinusSignArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool base_use_minus_sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_base_use_minus_sign(&has_bits);
          base_use_minus_sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetBaseUseMinusSignArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetBaseUseMinusSignArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required bool base_use_minus_sign = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_base_use_minus_sign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetBaseUseMinusSignArchive)
  return target;
}

size_t CommandSetBaseUseMinusSignArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetBaseUseMinusSignArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_base_use_minus_sign()) {
    // required bool base_use_minus_sign = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetBaseUseMinusSignArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetBaseUseMinusSignArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required bool base_use_minus_sign = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetBaseUseMinusSignArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetBaseUseMinusSignArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetBaseUseMinusSignArchive::GetClassData() const { return &_class_data_; }

void CommandSetBaseUseMinusSignArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetBaseUseMinusSignArchive *>(to)->MergeFrom(
      static_cast<const CommandSetBaseUseMinusSignArchive &>(from));
}


void CommandSetBaseUseMinusSignArchive::MergeFrom(const CommandSetBaseUseMinusSignArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetBaseUseMinusSignArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      base_use_minus_sign_ = from.base_use_minus_sign_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetBaseUseMinusSignArchive::CopyFrom(const CommandSetBaseUseMinusSignArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetBaseUseMinusSignArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetBaseUseMinusSignArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetBaseUseMinusSignArchive::InternalSwap(CommandSetBaseUseMinusSignArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetBaseUseMinusSignArchive, base_use_minus_sign_)
      + sizeof(CommandSetBaseUseMinusSignArchive::base_use_minus_sign_)
      - PROTOBUF_FIELD_OFFSET(CommandSetBaseUseMinusSignArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetBaseUseMinusSignArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[43]);
}

// ===================================================================

class CommandSetCurrencyCodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetCurrencyCodeArchive>()._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetCurrencyCodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetCurrencyCodeArchive::_Internal::super(const CommandSetCurrencyCodeArchive* msg) {
  return *msg->super_;
}
CommandSetCurrencyCodeArchive::CommandSetCurrencyCodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetCurrencyCodeArchive)
}
CommandSetCurrencyCodeArchive::CommandSetCurrencyCodeArchive(const CommandSetCurrencyCodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_currency_code()) {
    currency_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currency_code(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TST::CommandMutateCellFormatArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetCurrencyCodeArchive)
}

inline void CommandSetCurrencyCodeArchive::SharedCtor() {
currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
super_ = nullptr;
}

CommandSetCurrencyCodeArchive::~CommandSetCurrencyCodeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetCurrencyCodeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetCurrencyCodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  currency_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void CommandSetCurrencyCodeArchive::ArenaDtor(void* object) {
  CommandSetCurrencyCodeArchive* _this = reinterpret_cast< CommandSetCurrencyCodeArchive* >(object);
  (void)_this;
}
void CommandSetCurrencyCodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetCurrencyCodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetCurrencyCodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetCurrencyCodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      currency_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetCurrencyCodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string currency_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_currency_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.CommandSetCurrencyCodeArchive.currency_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetCurrencyCodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetCurrencyCodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required string currency_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_code().data(), static_cast<int>(this->_internal_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CommandSetCurrencyCodeArchive.currency_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_currency_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetCurrencyCodeArchive)
  return target;
}

size_t CommandSetCurrencyCodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetCurrencyCodeArchive)
  size_t total_size = 0;

  if (_internal_has_currency_code()) {
    // required string currency_code = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency_code());
  }

  if (_internal_has_super()) {
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  return total_size;
}
size_t CommandSetCurrencyCodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetCurrencyCodeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string currency_code = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency_code());

    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetCurrencyCodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetCurrencyCodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetCurrencyCodeArchive::GetClassData() const { return &_class_data_; }

void CommandSetCurrencyCodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetCurrencyCodeArchive *>(to)->MergeFrom(
      static_cast<const CommandSetCurrencyCodeArchive &>(from));
}


void CommandSetCurrencyCodeArchive::MergeFrom(const CommandSetCurrencyCodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetCurrencyCodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_currency_code(from._internal_currency_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(from._internal_super());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetCurrencyCodeArchive::CopyFrom(const CommandSetCurrencyCodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetCurrencyCodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetCurrencyCodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetCurrencyCodeArchive::InternalSwap(CommandSetCurrencyCodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &currency_code_, GetArenaForAllocation(),
      &other->currency_code_, other->GetArenaForAllocation()
  );
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetCurrencyCodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[44]);
}

// ===================================================================

class CommandSetFractionAccuracyArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetFractionAccuracyArchive>()._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetFractionAccuracyArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fraction_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetFractionAccuracyArchive::_Internal::super(const CommandSetFractionAccuracyArchive* msg) {
  return *msg->super_;
}
CommandSetFractionAccuracyArchive::CommandSetFractionAccuracyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetFractionAccuracyArchive)
}
CommandSetFractionAccuracyArchive::CommandSetFractionAccuracyArchive(const CommandSetFractionAccuracyArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::CommandMutateCellFormatArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  fraction_accuracy_ = from.fraction_accuracy_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetFractionAccuracyArchive)
}

inline void CommandSetFractionAccuracyArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fraction_accuracy_) -
    reinterpret_cast<char*>(&super_)) + sizeof(fraction_accuracy_));
}

CommandSetFractionAccuracyArchive::~CommandSetFractionAccuracyArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetFractionAccuracyArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetFractionAccuracyArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetFractionAccuracyArchive::ArenaDtor(void* object) {
  CommandSetFractionAccuracyArchive* _this = reinterpret_cast< CommandSetFractionAccuracyArchive* >(object);
  (void)_this;
}
void CommandSetFractionAccuracyArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetFractionAccuracyArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetFractionAccuracyArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetFractionAccuracyArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  fraction_accuracy_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetFractionAccuracyArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 fraction_accuracy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fraction_accuracy(&has_bits);
          fraction_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetFractionAccuracyArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetFractionAccuracyArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required uint32 fraction_accuracy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fraction_accuracy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetFractionAccuracyArchive)
  return target;
}

size_t CommandSetFractionAccuracyArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetFractionAccuracyArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_fraction_accuracy()) {
    // required uint32 fraction_accuracy = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fraction_accuracy());
  }

  return total_size;
}
size_t CommandSetFractionAccuracyArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetFractionAccuracyArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 fraction_accuracy = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fraction_accuracy());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetFractionAccuracyArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetFractionAccuracyArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetFractionAccuracyArchive::GetClassData() const { return &_class_data_; }

void CommandSetFractionAccuracyArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetFractionAccuracyArchive *>(to)->MergeFrom(
      static_cast<const CommandSetFractionAccuracyArchive &>(from));
}


void CommandSetFractionAccuracyArchive::MergeFrom(const CommandSetFractionAccuracyArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetFractionAccuracyArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      fraction_accuracy_ = from.fraction_accuracy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetFractionAccuracyArchive::CopyFrom(const CommandSetFractionAccuracyArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetFractionAccuracyArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFractionAccuracyArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetFractionAccuracyArchive::InternalSwap(CommandSetFractionAccuracyArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetFractionAccuracyArchive, fraction_accuracy_)
      + sizeof(CommandSetFractionAccuracyArchive::fraction_accuracy_)
      - PROTOBUF_FIELD_OFFSET(CommandSetFractionAccuracyArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetFractionAccuracyArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[45]);
}

// ===================================================================

class CommandSetNegativeNumberStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetNegativeNumberStyleArchive>()._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetNegativeNumberStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_negative_number_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetNegativeNumberStyleArchive::_Internal::super(const CommandSetNegativeNumberStyleArchive* msg) {
  return *msg->super_;
}
CommandSetNegativeNumberStyleArchive::CommandSetNegativeNumberStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetNegativeNumberStyleArchive)
}
CommandSetNegativeNumberStyleArchive::CommandSetNegativeNumberStyleArchive(const CommandSetNegativeNumberStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::CommandMutateCellFormatArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  negative_number_style_ = from.negative_number_style_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetNegativeNumberStyleArchive)
}

inline void CommandSetNegativeNumberStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&negative_number_style_) -
    reinterpret_cast<char*>(&super_)) + sizeof(negative_number_style_));
}

CommandSetNegativeNumberStyleArchive::~CommandSetNegativeNumberStyleArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetNegativeNumberStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetNegativeNumberStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetNegativeNumberStyleArchive::ArenaDtor(void* object) {
  CommandSetNegativeNumberStyleArchive* _this = reinterpret_cast< CommandSetNegativeNumberStyleArchive* >(object);
  (void)_this;
}
void CommandSetNegativeNumberStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetNegativeNumberStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetNegativeNumberStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetNegativeNumberStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  negative_number_style_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetNegativeNumberStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 negative_number_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_negative_number_style(&has_bits);
          negative_number_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetNegativeNumberStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetNegativeNumberStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required uint32 negative_number_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_negative_number_style(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetNegativeNumberStyleArchive)
  return target;
}

size_t CommandSetNegativeNumberStyleArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetNegativeNumberStyleArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_negative_number_style()) {
    // required uint32 negative_number_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_negative_number_style());
  }

  return total_size;
}
size_t CommandSetNegativeNumberStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetNegativeNumberStyleArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 negative_number_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_negative_number_style());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetNegativeNumberStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetNegativeNumberStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetNegativeNumberStyleArchive::GetClassData() const { return &_class_data_; }

void CommandSetNegativeNumberStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetNegativeNumberStyleArchive *>(to)->MergeFrom(
      static_cast<const CommandSetNegativeNumberStyleArchive &>(from));
}


void CommandSetNegativeNumberStyleArchive::MergeFrom(const CommandSetNegativeNumberStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetNegativeNumberStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      negative_number_style_ = from.negative_number_style_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetNegativeNumberStyleArchive::CopyFrom(const CommandSetNegativeNumberStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetNegativeNumberStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetNegativeNumberStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetNegativeNumberStyleArchive::InternalSwap(CommandSetNegativeNumberStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetNegativeNumberStyleArchive, negative_number_style_)
      + sizeof(CommandSetNegativeNumberStyleArchive::negative_number_style_)
      - PROTOBUF_FIELD_OFFSET(CommandSetNegativeNumberStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetNegativeNumberStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[46]);
}

// ===================================================================

class CommandSetNumberOfDecimalPlacesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetNumberOfDecimalPlacesArchive>()._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetNumberOfDecimalPlacesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_decimal_places(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetNumberOfDecimalPlacesArchive::_Internal::super(const CommandSetNumberOfDecimalPlacesArchive* msg) {
  return *msg->super_;
}
CommandSetNumberOfDecimalPlacesArchive::CommandSetNumberOfDecimalPlacesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetNumberOfDecimalPlacesArchive)
}
CommandSetNumberOfDecimalPlacesArchive::CommandSetNumberOfDecimalPlacesArchive(const CommandSetNumberOfDecimalPlacesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::CommandMutateCellFormatArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  decimal_places_ = from.decimal_places_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetNumberOfDecimalPlacesArchive)
}

inline void CommandSetNumberOfDecimalPlacesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&decimal_places_) -
    reinterpret_cast<char*>(&super_)) + sizeof(decimal_places_));
}

CommandSetNumberOfDecimalPlacesArchive::~CommandSetNumberOfDecimalPlacesArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetNumberOfDecimalPlacesArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetNumberOfDecimalPlacesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetNumberOfDecimalPlacesArchive::ArenaDtor(void* object) {
  CommandSetNumberOfDecimalPlacesArchive* _this = reinterpret_cast< CommandSetNumberOfDecimalPlacesArchive* >(object);
  (void)_this;
}
void CommandSetNumberOfDecimalPlacesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetNumberOfDecimalPlacesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetNumberOfDecimalPlacesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetNumberOfDecimalPlacesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  decimal_places_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetNumberOfDecimalPlacesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 decimal_places = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_decimal_places(&has_bits);
          decimal_places_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetNumberOfDecimalPlacesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetNumberOfDecimalPlacesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required uint32 decimal_places = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_decimal_places(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetNumberOfDecimalPlacesArchive)
  return target;
}

size_t CommandSetNumberOfDecimalPlacesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetNumberOfDecimalPlacesArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_decimal_places()) {
    // required uint32 decimal_places = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_decimal_places());
  }

  return total_size;
}
size_t CommandSetNumberOfDecimalPlacesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetNumberOfDecimalPlacesArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 decimal_places = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_decimal_places());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetNumberOfDecimalPlacesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetNumberOfDecimalPlacesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetNumberOfDecimalPlacesArchive::GetClassData() const { return &_class_data_; }

void CommandSetNumberOfDecimalPlacesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetNumberOfDecimalPlacesArchive *>(to)->MergeFrom(
      static_cast<const CommandSetNumberOfDecimalPlacesArchive &>(from));
}


void CommandSetNumberOfDecimalPlacesArchive::MergeFrom(const CommandSetNumberOfDecimalPlacesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetNumberOfDecimalPlacesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      decimal_places_ = from.decimal_places_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetNumberOfDecimalPlacesArchive::CopyFrom(const CommandSetNumberOfDecimalPlacesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetNumberOfDecimalPlacesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetNumberOfDecimalPlacesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetNumberOfDecimalPlacesArchive::InternalSwap(CommandSetNumberOfDecimalPlacesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetNumberOfDecimalPlacesArchive, decimal_places_)
      + sizeof(CommandSetNumberOfDecimalPlacesArchive::decimal_places_)
      - PROTOBUF_FIELD_OFFSET(CommandSetNumberOfDecimalPlacesArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetNumberOfDecimalPlacesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[47]);
}

// ===================================================================

class CommandSetDateTimeFormatArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetDateTimeFormatArchive>()._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetDateTimeFormatArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_date_format_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_format_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetDateTimeFormatArchive::_Internal::super(const CommandSetDateTimeFormatArchive* msg) {
  return *msg->super_;
}
CommandSetDateTimeFormatArchive::CommandSetDateTimeFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetDateTimeFormatArchive)
}
CommandSetDateTimeFormatArchive::CommandSetDateTimeFormatArchive(const CommandSetDateTimeFormatArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  date_format_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_date_format_string()) {
    date_format_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_date_format_string(), 
      GetArenaForAllocation());
  }
  time_format_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_time_format_string()) {
    time_format_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time_format_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TST::CommandMutateCellFormatArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetDateTimeFormatArchive)
}

inline void CommandSetDateTimeFormatArchive::SharedCtor() {
date_format_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
time_format_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
super_ = nullptr;
}

CommandSetDateTimeFormatArchive::~CommandSetDateTimeFormatArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetDateTimeFormatArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetDateTimeFormatArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  date_format_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_format_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void CommandSetDateTimeFormatArchive::ArenaDtor(void* object) {
  CommandSetDateTimeFormatArchive* _this = reinterpret_cast< CommandSetDateTimeFormatArchive* >(object);
  (void)_this;
}
void CommandSetDateTimeFormatArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetDateTimeFormatArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetDateTimeFormatArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetDateTimeFormatArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      date_format_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      time_format_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetDateTimeFormatArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string date_format_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_date_format_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.CommandSetDateTimeFormatArchive.date_format_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string time_format_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_time_format_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.CommandSetDateTimeFormatArchive.time_format_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetDateTimeFormatArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetDateTimeFormatArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional string date_format_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_date_format_string().data(), static_cast<int>(this->_internal_date_format_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CommandSetDateTimeFormatArchive.date_format_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_date_format_string(), target);
  }

  // optional string time_format_string = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_time_format_string().data(), static_cast<int>(this->_internal_time_format_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CommandSetDateTimeFormatArchive.time_format_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_time_format_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetDateTimeFormatArchive)
  return target;
}

size_t CommandSetDateTimeFormatArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetDateTimeFormatArchive)
  size_t total_size = 0;

  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string date_format_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_date_format_string());
    }

    // optional string time_format_string = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_time_format_string());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetDateTimeFormatArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetDateTimeFormatArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetDateTimeFormatArchive::GetClassData() const { return &_class_data_; }

void CommandSetDateTimeFormatArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetDateTimeFormatArchive *>(to)->MergeFrom(
      static_cast<const CommandSetDateTimeFormatArchive &>(from));
}


void CommandSetDateTimeFormatArchive::MergeFrom(const CommandSetDateTimeFormatArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetDateTimeFormatArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_date_format_string(from._internal_date_format_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_time_format_string(from._internal_time_format_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(from._internal_super());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetDateTimeFormatArchive::CopyFrom(const CommandSetDateTimeFormatArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetDateTimeFormatArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetDateTimeFormatArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetDateTimeFormatArchive::InternalSwap(CommandSetDateTimeFormatArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &date_format_string_, GetArenaForAllocation(),
      &other->date_format_string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &time_format_string_, GetArenaForAllocation(),
      &other->time_format_string_, other->GetArenaForAllocation()
  );
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetDateTimeFormatArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[48]);
}

// ===================================================================

class CommandSetShowThousandsSeparatorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetShowThousandsSeparatorArchive>()._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetShowThousandsSeparatorArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_show_thousands_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetShowThousandsSeparatorArchive::_Internal::super(const CommandSetShowThousandsSeparatorArchive* msg) {
  return *msg->super_;
}
CommandSetShowThousandsSeparatorArchive::CommandSetShowThousandsSeparatorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetShowThousandsSeparatorArchive)
}
CommandSetShowThousandsSeparatorArchive::CommandSetShowThousandsSeparatorArchive(const CommandSetShowThousandsSeparatorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::CommandMutateCellFormatArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  show_thousands_separator_ = from.show_thousands_separator_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetShowThousandsSeparatorArchive)
}

inline void CommandSetShowThousandsSeparatorArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&show_thousands_separator_) -
    reinterpret_cast<char*>(&super_)) + sizeof(show_thousands_separator_));
}

CommandSetShowThousandsSeparatorArchive::~CommandSetShowThousandsSeparatorArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetShowThousandsSeparatorArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetShowThousandsSeparatorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetShowThousandsSeparatorArchive::ArenaDtor(void* object) {
  CommandSetShowThousandsSeparatorArchive* _this = reinterpret_cast< CommandSetShowThousandsSeparatorArchive* >(object);
  (void)_this;
}
void CommandSetShowThousandsSeparatorArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetShowThousandsSeparatorArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetShowThousandsSeparatorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetShowThousandsSeparatorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  show_thousands_separator_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetShowThousandsSeparatorArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool show_thousands_separator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_show_thousands_separator(&has_bits);
          show_thousands_separator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetShowThousandsSeparatorArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetShowThousandsSeparatorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required bool show_thousands_separator = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_show_thousands_separator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetShowThousandsSeparatorArchive)
  return target;
}

size_t CommandSetShowThousandsSeparatorArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetShowThousandsSeparatorArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_show_thousands_separator()) {
    // required bool show_thousands_separator = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetShowThousandsSeparatorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetShowThousandsSeparatorArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required bool show_thousands_separator = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetShowThousandsSeparatorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetShowThousandsSeparatorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetShowThousandsSeparatorArchive::GetClassData() const { return &_class_data_; }

void CommandSetShowThousandsSeparatorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetShowThousandsSeparatorArchive *>(to)->MergeFrom(
      static_cast<const CommandSetShowThousandsSeparatorArchive &>(from));
}


void CommandSetShowThousandsSeparatorArchive::MergeFrom(const CommandSetShowThousandsSeparatorArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetShowThousandsSeparatorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      show_thousands_separator_ = from.show_thousands_separator_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetShowThousandsSeparatorArchive::CopyFrom(const CommandSetShowThousandsSeparatorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetShowThousandsSeparatorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetShowThousandsSeparatorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetShowThousandsSeparatorArchive::InternalSwap(CommandSetShowThousandsSeparatorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetShowThousandsSeparatorArchive, show_thousands_separator_)
      + sizeof(CommandSetShowThousandsSeparatorArchive::show_thousands_separator_)
      - PROTOBUF_FIELD_OFFSET(CommandSetShowThousandsSeparatorArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetShowThousandsSeparatorArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[49]);
}

// ===================================================================

class CommandSetUseAccountingStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetUseAccountingStyleArchive>()._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetUseAccountingStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_accounting_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetUseAccountingStyleArchive::_Internal::super(const CommandSetUseAccountingStyleArchive* msg) {
  return *msg->super_;
}
CommandSetUseAccountingStyleArchive::CommandSetUseAccountingStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetUseAccountingStyleArchive)
}
CommandSetUseAccountingStyleArchive::CommandSetUseAccountingStyleArchive(const CommandSetUseAccountingStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::CommandMutateCellFormatArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  use_accounting_style_ = from.use_accounting_style_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetUseAccountingStyleArchive)
}

inline void CommandSetUseAccountingStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_accounting_style_) -
    reinterpret_cast<char*>(&super_)) + sizeof(use_accounting_style_));
}

CommandSetUseAccountingStyleArchive::~CommandSetUseAccountingStyleArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetUseAccountingStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetUseAccountingStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetUseAccountingStyleArchive::ArenaDtor(void* object) {
  CommandSetUseAccountingStyleArchive* _this = reinterpret_cast< CommandSetUseAccountingStyleArchive* >(object);
  (void)_this;
}
void CommandSetUseAccountingStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetUseAccountingStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetUseAccountingStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetUseAccountingStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  use_accounting_style_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetUseAccountingStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool use_accounting_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_use_accounting_style(&has_bits);
          use_accounting_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetUseAccountingStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetUseAccountingStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required bool use_accounting_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_use_accounting_style(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetUseAccountingStyleArchive)
  return target;
}

size_t CommandSetUseAccountingStyleArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetUseAccountingStyleArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_use_accounting_style()) {
    // required bool use_accounting_style = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetUseAccountingStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetUseAccountingStyleArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required bool use_accounting_style = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetUseAccountingStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetUseAccountingStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetUseAccountingStyleArchive::GetClassData() const { return &_class_data_; }

void CommandSetUseAccountingStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetUseAccountingStyleArchive *>(to)->MergeFrom(
      static_cast<const CommandSetUseAccountingStyleArchive &>(from));
}


void CommandSetUseAccountingStyleArchive::MergeFrom(const CommandSetUseAccountingStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetUseAccountingStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      use_accounting_style_ = from.use_accounting_style_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetUseAccountingStyleArchive::CopyFrom(const CommandSetUseAccountingStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetUseAccountingStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetUseAccountingStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetUseAccountingStyleArchive::InternalSwap(CommandSetUseAccountingStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetUseAccountingStyleArchive, use_accounting_style_)
      + sizeof(CommandSetUseAccountingStyleArchive::use_accounting_style_)
      - PROTOBUF_FIELD_OFFSET(CommandSetUseAccountingStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetUseAccountingStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[50]);
}

// ===================================================================

class CommandSetRangeControlMinMaxIncArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetRangeControlMinMaxIncArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetRangeControlMinMaxIncArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minimum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_increment(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandSetRangeControlMinMaxIncArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::CellUIDListArchive& cell_uid_list(const CommandSetRangeControlMinMaxIncArchive* msg);
  static void set_has_cell_uid_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& inverse_cell_diff_map(const CommandSetRangeControlMinMaxIncArchive* msg);
  static void set_has_inverse_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_first_commit(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000081) ^ 0x00000081) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetRangeControlMinMaxIncArchive::_Internal::super(const CommandSetRangeControlMinMaxIncArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandSetRangeControlMinMaxIncArchive::_Internal::cell_diff_map(const CommandSetRangeControlMinMaxIncArchive* msg) {
  return *msg->cell_diff_map_;
}
const ::TST::CellUIDListArchive&
CommandSetRangeControlMinMaxIncArchive::_Internal::cell_uid_list(const CommandSetRangeControlMinMaxIncArchive* msg) {
  return *msg->cell_uid_list_;
}
const ::TSP::Reference&
CommandSetRangeControlMinMaxIncArchive::_Internal::inverse_cell_diff_map(const CommandSetRangeControlMinMaxIncArchive* msg) {
  return *msg->inverse_cell_diff_map_;
}
void CommandSetRangeControlMinMaxIncArchive::clear_cell_diff_map() {
  if (cell_diff_map_ != nullptr) cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSetRangeControlMinMaxIncArchive::clear_cell_uid_list() {
  if (cell_uid_list_ != nullptr) cell_uid_list_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSetRangeControlMinMaxIncArchive::clear_inverse_cell_diff_map() {
  if (inverse_cell_diff_map_ != nullptr) inverse_cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandSetRangeControlMinMaxIncArchive::CommandSetRangeControlMinMaxIncArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetRangeControlMinMaxIncArchive)
}
CommandSetRangeControlMinMaxIncArchive::CommandSetRangeControlMinMaxIncArchive(const CommandSetRangeControlMinMaxIncArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_cell_diff_map()) {
    cell_diff_map_ = new ::TSP::Reference(*from.cell_diff_map_);
  } else {
    cell_diff_map_ = nullptr;
  }
  if (from._internal_has_cell_uid_list()) {
    cell_uid_list_ = new ::TST::CellUIDListArchive(*from.cell_uid_list_);
  } else {
    cell_uid_list_ = nullptr;
  }
  if (from._internal_has_inverse_cell_diff_map()) {
    inverse_cell_diff_map_ = new ::TSP::Reference(*from.inverse_cell_diff_map_);
  } else {
    inverse_cell_diff_map_ = nullptr;
  }
  ::memcpy(&minimum_, &from.minimum_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_first_commit_) -
    reinterpret_cast<char*>(&minimum_)) + sizeof(is_first_commit_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetRangeControlMinMaxIncArchive)
}

inline void CommandSetRangeControlMinMaxIncArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_first_commit_) -
    reinterpret_cast<char*>(&super_)) + sizeof(is_first_commit_));
}

CommandSetRangeControlMinMaxIncArchive::~CommandSetRangeControlMinMaxIncArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetRangeControlMinMaxIncArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetRangeControlMinMaxIncArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete cell_diff_map_;
  if (this != internal_default_instance()) delete cell_uid_list_;
  if (this != internal_default_instance()) delete inverse_cell_diff_map_;
}

void CommandSetRangeControlMinMaxIncArchive::ArenaDtor(void* object) {
  CommandSetRangeControlMinMaxIncArchive* _this = reinterpret_cast< CommandSetRangeControlMinMaxIncArchive* >(object);
  (void)_this;
}
void CommandSetRangeControlMinMaxIncArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetRangeControlMinMaxIncArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetRangeControlMinMaxIncArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetRangeControlMinMaxIncArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_diff_map_ != nullptr);
      cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cell_uid_list_ != nullptr);
      cell_uid_list_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(inverse_cell_diff_map_ != nullptr);
      inverse_cell_diff_map_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&minimum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_first_commit_) -
        reinterpret_cast<char*>(&minimum_)) + sizeof(is_first_commit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetRangeControlMinMaxIncArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double minimum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_minimum(&has_bits);
          minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double maximum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_maximum(&has_bits);
          maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double increment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_increment(&has_bits);
          increment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference cell_diff_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellUIDListArchive cell_uid_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference inverse_cell_diff_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_first_commit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_first_commit(&has_bits);
          is_first_commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetRangeControlMinMaxIncArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetRangeControlMinMaxIncArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional double minimum = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_minimum(), target);
  }

  // optional double maximum = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_maximum(), target);
  }

  // optional double increment = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_increment(), target);
  }

  // optional .TSP.Reference cell_diff_map = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cell_diff_map(this), target, stream);
  }

  // optional .TST.CellUIDListArchive cell_uid_list = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cell_uid_list(this), target, stream);
  }

  // optional .TSP.Reference inverse_cell_diff_map = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::inverse_cell_diff_map(this), target, stream);
  }

  // required bool is_first_commit = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_first_commit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetRangeControlMinMaxIncArchive)
  return target;
}

size_t CommandSetRangeControlMinMaxIncArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetRangeControlMinMaxIncArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_is_first_commit()) {
    // required bool is_first_commit = 8;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetRangeControlMinMaxIncArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetRangeControlMinMaxIncArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000081) ^ 0x00000081) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required bool is_first_commit = 8;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007eu) {
    // optional .TSP.Reference cell_diff_map = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_diff_map_);
    }

    // optional .TST.CellUIDListArchive cell_uid_list = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_uid_list_);
    }

    // optional .TSP.Reference inverse_cell_diff_map = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inverse_cell_diff_map_);
    }

    // optional double minimum = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double maximum = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double increment = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetRangeControlMinMaxIncArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetRangeControlMinMaxIncArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetRangeControlMinMaxIncArchive::GetClassData() const { return &_class_data_; }

void CommandSetRangeControlMinMaxIncArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetRangeControlMinMaxIncArchive *>(to)->MergeFrom(
      static_cast<const CommandSetRangeControlMinMaxIncArchive &>(from));
}


void CommandSetRangeControlMinMaxIncArchive::MergeFrom(const CommandSetRangeControlMinMaxIncArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetRangeControlMinMaxIncArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cell_uid_list()->::TST::CellUIDListArchive::MergeFrom(from._internal_cell_uid_list());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_inverse_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_inverse_cell_diff_map());
    }
    if (cached_has_bits & 0x00000010u) {
      minimum_ = from.minimum_;
    }
    if (cached_has_bits & 0x00000020u) {
      maximum_ = from.maximum_;
    }
    if (cached_has_bits & 0x00000040u) {
      increment_ = from.increment_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_first_commit_ = from.is_first_commit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetRangeControlMinMaxIncArchive::CopyFrom(const CommandSetRangeControlMinMaxIncArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetRangeControlMinMaxIncArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetRangeControlMinMaxIncArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uid_list()) {
    if (!cell_uid_list_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_cell_diff_map()) {
    if (!inverse_cell_diff_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetRangeControlMinMaxIncArchive::InternalSwap(CommandSetRangeControlMinMaxIncArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetRangeControlMinMaxIncArchive, is_first_commit_)
      + sizeof(CommandSetRangeControlMinMaxIncArchive::is_first_commit_)
      - PROTOBUF_FIELD_OFFSET(CommandSetRangeControlMinMaxIncArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetRangeControlMinMaxIncArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[51]);
}

// ===================================================================

class CommandMoveColumnsOrRowsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMoveColumnsOrRowsArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandMoveColumnsOrRowsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& dest_uid(const CommandMoveColumnsOrRowsArchive* msg);
  static void set_has_dest_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_before(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::UUID& undo_dest_uid(const CommandMoveColumnsOrRowsArchive* msg);
  static void set_has_undo_dest_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_undo_before(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& formula_rewrite_command(const CommandMoveColumnsOrRowsArchive* msg);
  static void set_has_formula_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000077) ^ 0x00000077) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandMoveColumnsOrRowsArchive::_Internal::super(const CommandMoveColumnsOrRowsArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandMoveColumnsOrRowsArchive::_Internal::dest_uid(const CommandMoveColumnsOrRowsArchive* msg) {
  return *msg->dest_uid_;
}
const ::TSP::UUID&
CommandMoveColumnsOrRowsArchive::_Internal::undo_dest_uid(const CommandMoveColumnsOrRowsArchive* msg) {
  return *msg->undo_dest_uid_;
}
const ::TSP::Reference&
CommandMoveColumnsOrRowsArchive::_Internal::formula_rewrite_command(const CommandMoveColumnsOrRowsArchive* msg) {
  return *msg->formula_rewrite_command_;
}
void CommandMoveColumnsOrRowsArchive::clear_dest_uid() {
  if (dest_uid_ != nullptr) dest_uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandMoveColumnsOrRowsArchive::clear_undo_dest_uid() {
  if (undo_dest_uid_ != nullptr) undo_dest_uid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandMoveColumnsOrRowsArchive::clear_uids() {
  uids_.Clear();
}
void CommandMoveColumnsOrRowsArchive::clear_formula_rewrite_command() {
  if (formula_rewrite_command_ != nullptr) formula_rewrite_command_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandMoveColumnsOrRowsArchive::CommandMoveColumnsOrRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  uids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandMoveColumnsOrRowsArchive)
}
CommandMoveColumnsOrRowsArchive::CommandMoveColumnsOrRowsArchive(const CommandMoveColumnsOrRowsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      uids_(from.uids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_dest_uid()) {
    dest_uid_ = new ::TSP::UUID(*from.dest_uid_);
  } else {
    dest_uid_ = nullptr;
  }
  if (from._internal_has_undo_dest_uid()) {
    undo_dest_uid_ = new ::TSP::UUID(*from.undo_dest_uid_);
  } else {
    undo_dest_uid_ = nullptr;
  }
  if (from._internal_has_formula_rewrite_command()) {
    formula_rewrite_command_ = new ::TSP::Reference(*from.formula_rewrite_command_);
  } else {
    formula_rewrite_command_ = nullptr;
  }
  ::memcpy(&before_, &from.before_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&before_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandMoveColumnsOrRowsArchive)
}

inline void CommandMoveColumnsOrRowsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&super_)) + sizeof(direction_));
}

CommandMoveColumnsOrRowsArchive::~CommandMoveColumnsOrRowsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandMoveColumnsOrRowsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandMoveColumnsOrRowsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete dest_uid_;
  if (this != internal_default_instance()) delete undo_dest_uid_;
  if (this != internal_default_instance()) delete formula_rewrite_command_;
}

void CommandMoveColumnsOrRowsArchive::ArenaDtor(void* object) {
  CommandMoveColumnsOrRowsArchive* _this = reinterpret_cast< CommandMoveColumnsOrRowsArchive* >(object);
  (void)_this;
}
void CommandMoveColumnsOrRowsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandMoveColumnsOrRowsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandMoveColumnsOrRowsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandMoveColumnsOrRowsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dest_uid_ != nullptr);
      dest_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_dest_uid_ != nullptr);
      undo_dest_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(formula_rewrite_command_ != nullptr);
      formula_rewrite_command_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&before_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&direction_) -
        reinterpret_cast<char*>(&before_)) + sizeof(direction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMoveColumnsOrRowsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID dest_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool before = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_before(&has_bits);
          before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID undo_dest_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_dest_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool undo_before = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_undo_before(&has_bits);
          undo_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID uids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // required .TST.TableDimensionArchive direction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableDimensionArchive_IsValid(val))) {
            _internal_set_direction(static_cast<::TST::TableDimensionArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference formula_rewrite_command = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_rewrite_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandMoveColumnsOrRowsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandMoveColumnsOrRowsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID dest_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dest_uid(this), target, stream);
  }

  // required bool before = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_before(), target);
  }

  // required .TSP.UUID undo_dest_uid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::undo_dest_uid(this), target, stream);
  }

  // required bool undo_before = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_undo_before(), target);
  }

  // repeated .TSP.UUID uids = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_uids(i), target, stream);
  }

  // required .TST.TableDimensionArchive direction = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_direction(), target);
  }

  // optional .TSP.Reference formula_rewrite_command = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::formula_rewrite_command(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandMoveColumnsOrRowsArchive)
  return target;
}

size_t CommandMoveColumnsOrRowsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandMoveColumnsOrRowsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_dest_uid()) {
    // required .TSP.UUID dest_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dest_uid_);
  }

  if (_internal_has_undo_dest_uid()) {
    // required .TSP.UUID undo_dest_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *undo_dest_uid_);
  }

  if (_internal_has_before()) {
    // required bool before = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_undo_before()) {
    // required bool undo_before = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_direction()) {
    // required .TST.TableDimensionArchive direction = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return total_size;
}
size_t CommandMoveColumnsOrRowsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandMoveColumnsOrRowsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000077) ^ 0x00000077) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID dest_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dest_uid_);

    // required .TSP.UUID undo_dest_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *undo_dest_uid_);

    // required bool before = 3;
    total_size += 1 + 1;

    // required bool undo_before = 5;
    total_size += 1 + 1;

    // required .TST.TableDimensionArchive direction = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uids = 6;
  total_size += 1UL * this->_internal_uids_size();
  for (const auto& msg : this->uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference formula_rewrite_command = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formula_rewrite_command_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandMoveColumnsOrRowsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandMoveColumnsOrRowsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandMoveColumnsOrRowsArchive::GetClassData() const { return &_class_data_; }

void CommandMoveColumnsOrRowsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandMoveColumnsOrRowsArchive *>(to)->MergeFrom(
      static_cast<const CommandMoveColumnsOrRowsArchive &>(from));
}


void CommandMoveColumnsOrRowsArchive::MergeFrom(const CommandMoveColumnsOrRowsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandMoveColumnsOrRowsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uids_.MergeFrom(from.uids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dest_uid()->::TSP::UUID::MergeFrom(from._internal_dest_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_dest_uid()->::TSP::UUID::MergeFrom(from._internal_undo_dest_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_formula_rewrite_command()->::TSP::Reference::MergeFrom(from._internal_formula_rewrite_command());
    }
    if (cached_has_bits & 0x00000010u) {
      before_ = from.before_;
    }
    if (cached_has_bits & 0x00000020u) {
      undo_before_ = from.undo_before_;
    }
    if (cached_has_bits & 0x00000040u) {
      direction_ = from.direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandMoveColumnsOrRowsArchive::CopyFrom(const CommandMoveColumnsOrRowsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandMoveColumnsOrRowsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMoveColumnsOrRowsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(uids_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_dest_uid()) {
    if (!dest_uid_->IsInitialized()) return false;
  }
  if (_internal_has_undo_dest_uid()) {
    if (!undo_dest_uid_->IsInitialized()) return false;
  }
  if (_internal_has_formula_rewrite_command()) {
    if (!formula_rewrite_command_->IsInitialized()) return false;
  }
  return true;
}

void CommandMoveColumnsOrRowsArchive::InternalSwap(CommandMoveColumnsOrRowsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uids_.InternalSwap(&other->uids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMoveColumnsOrRowsArchive, direction_)
      + sizeof(CommandMoveColumnsOrRowsArchive::direction_)
      - PROTOBUF_FIELD_OFFSET(CommandMoveColumnsOrRowsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMoveColumnsOrRowsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[52]);
}

// ===================================================================

class CommandSortArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSortArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSortArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& formula_rewrite_command(const CommandSortArchive* msg);
  static void set_has_formula_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSortArchive::_Internal::super(const CommandSortArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandSortArchive::_Internal::formula_rewrite_command(const CommandSortArchive* msg) {
  return *msg->formula_rewrite_command_;
}
void CommandSortArchive::clear_from_row_uids() {
  from_row_uids_.Clear();
}
void CommandSortArchive::clear_to_row_uids() {
  to_row_uids_.Clear();
}
void CommandSortArchive::clear_formula_rewrite_command() {
  if (formula_rewrite_command_ != nullptr) formula_rewrite_command_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandSortArchive::CommandSortArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  from_row_uids_(arena),
  to_row_uids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSortArchive)
}
CommandSortArchive::CommandSortArchive(const CommandSortArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      from_row_uids_(from.from_row_uids_),
      to_row_uids_(from.to_row_uids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_formula_rewrite_command()) {
    formula_rewrite_command_ = new ::TSP::Reference(*from.formula_rewrite_command_);
  } else {
    formula_rewrite_command_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandSortArchive)
}

inline void CommandSortArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&formula_rewrite_command_) -
    reinterpret_cast<char*>(&super_)) + sizeof(formula_rewrite_command_));
}

CommandSortArchive::~CommandSortArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSortArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSortArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete formula_rewrite_command_;
}

void CommandSortArchive::ArenaDtor(void* object) {
  CommandSortArchive* _this = reinterpret_cast< CommandSortArchive* >(object);
  (void)_this;
}
void CommandSortArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSortArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSortArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSortArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_row_uids_.Clear();
  to_row_uids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(formula_rewrite_command_ != nullptr);
      formula_rewrite_command_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSortArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID from_row_uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_from_row_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID to_row_uids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_to_row_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference formula_rewrite_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_rewrite_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSortArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSortArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.UUID from_row_uids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_from_row_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_from_row_uids(i), target, stream);
  }

  // repeated .TSP.UUID to_row_uids = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_to_row_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_to_row_uids(i), target, stream);
  }

  // optional .TSP.Reference formula_rewrite_command = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::formula_rewrite_command(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSortArchive)
  return target;
}

size_t CommandSortArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSortArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID from_row_uids = 2;
  total_size += 1UL * this->_internal_from_row_uids_size();
  for (const auto& msg : this->from_row_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID to_row_uids = 3;
  total_size += 1UL * this->_internal_to_row_uids_size();
  for (const auto& msg : this->to_row_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference formula_rewrite_command = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formula_rewrite_command_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSortArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSortArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSortArchive::GetClassData() const { return &_class_data_; }

void CommandSortArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSortArchive *>(to)->MergeFrom(
      static_cast<const CommandSortArchive &>(from));
}


void CommandSortArchive::MergeFrom(const CommandSortArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSortArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  from_row_uids_.MergeFrom(from.from_row_uids_);
  to_row_uids_.MergeFrom(from.to_row_uids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_formula_rewrite_command()->::TSP::Reference::MergeFrom(from._internal_formula_rewrite_command());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSortArchive::CopyFrom(const CommandSortArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSortArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSortArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(from_row_uids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(to_row_uids_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_formula_rewrite_command()) {
    if (!formula_rewrite_command_->IsInitialized()) return false;
  }
  return true;
}

void CommandSortArchive::InternalSwap(CommandSortArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_row_uids_.InternalSwap(&other->from_row_uids_);
  to_row_uids_.InternalSwap(&other->to_row_uids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSortArchive, formula_rewrite_command_)
      + sizeof(CommandSortArchive::formula_rewrite_command_)
      - PROTOBUF_FIELD_OFFSET(CommandSortArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSortArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[53]);
}

// ===================================================================

class CommandRewriteFormulasForTransposeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteFormulasForTransposeArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewriteFormulasForTransposeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::FormulaRewriteSpecArchive& rewrite_spec(const CommandRewriteFormulasForTransposeArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::FormulasForUndoArchive& formulas_to_rewrite(const CommandRewriteFormulasForTransposeArchive* msg);
  static void set_has_formulas_to_rewrite(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::ImportWarningSetByCellRefArchive& warningset_map(const CommandRewriteFormulasForTransposeArchive* msg);
  static void set_has_warningset_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewriteFormulasForTransposeArchive::_Internal::super(const CommandRewriteFormulasForTransposeArchive* msg) {
  return *msg->super_;
}
const ::TSCE::FormulaRewriteSpecArchive&
CommandRewriteFormulasForTransposeArchive::_Internal::rewrite_spec(const CommandRewriteFormulasForTransposeArchive* msg) {
  return *msg->rewrite_spec_;
}
const ::TSCE::FormulasForUndoArchive&
CommandRewriteFormulasForTransposeArchive::_Internal::formulas_to_rewrite(const CommandRewriteFormulasForTransposeArchive* msg) {
  return *msg->formulas_to_rewrite_;
}
const ::TST::ImportWarningSetByCellRefArchive&
CommandRewriteFormulasForTransposeArchive::_Internal::warningset_map(const CommandRewriteFormulasForTransposeArchive* msg) {
  return *msg->warningset_map_;
}
void CommandRewriteFormulasForTransposeArchive::clear_rewrite_spec() {
  if (rewrite_spec_ != nullptr) rewrite_spec_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandRewriteFormulasForTransposeArchive::clear_formulas_to_rewrite() {
  if (formulas_to_rewrite_ != nullptr) formulas_to_rewrite_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandRewriteFormulasForTransposeArchive::clear_warningset_map() {
  if (warningset_map_ != nullptr) warningset_map_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandRewriteFormulasForTransposeArchive::CommandRewriteFormulasForTransposeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteFormulasForTransposeArchive)
}
CommandRewriteFormulasForTransposeArchive::CommandRewriteFormulasForTransposeArchive(const CommandRewriteFormulasForTransposeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_rewrite_spec()) {
    rewrite_spec_ = new ::TSCE::FormulaRewriteSpecArchive(*from.rewrite_spec_);
  } else {
    rewrite_spec_ = nullptr;
  }
  if (from._internal_has_formulas_to_rewrite()) {
    formulas_to_rewrite_ = new ::TSCE::FormulasForUndoArchive(*from.formulas_to_rewrite_);
  } else {
    formulas_to_rewrite_ = nullptr;
  }
  if (from._internal_has_warningset_map()) {
    warningset_map_ = new ::TST::ImportWarningSetByCellRefArchive(*from.warningset_map_);
  } else {
    warningset_map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteFormulasForTransposeArchive)
}

inline void CommandRewriteFormulasForTransposeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&warningset_map_) -
    reinterpret_cast<char*>(&super_)) + sizeof(warningset_map_));
}

CommandRewriteFormulasForTransposeArchive::~CommandRewriteFormulasForTransposeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteFormulasForTransposeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandRewriteFormulasForTransposeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete rewrite_spec_;
  if (this != internal_default_instance()) delete formulas_to_rewrite_;
  if (this != internal_default_instance()) delete warningset_map_;
}

void CommandRewriteFormulasForTransposeArchive::ArenaDtor(void* object) {
  CommandRewriteFormulasForTransposeArchive* _this = reinterpret_cast< CommandRewriteFormulasForTransposeArchive* >(object);
  (void)_this;
}
void CommandRewriteFormulasForTransposeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandRewriteFormulasForTransposeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandRewriteFormulasForTransposeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteFormulasForTransposeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rewrite_spec_ != nullptr);
      rewrite_spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(formulas_to_rewrite_ != nullptr);
      formulas_to_rewrite_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(warningset_map_ != nullptr);
      warningset_map_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteFormulasForTransposeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_formulas_to_rewrite(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.ImportWarningSetByCellRefArchive warningset_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_warningset_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRewriteFormulasForTransposeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteFormulasForTransposeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rewrite_spec(this), target, stream);
  }

  // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::formulas_to_rewrite(this), target, stream);
  }

  // optional .TST.ImportWarningSetByCellRefArchive warningset_map = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::warningset_map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteFormulasForTransposeArchive)
  return target;
}

size_t CommandRewriteFormulasForTransposeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewriteFormulasForTransposeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_rewrite_spec()) {
    // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewrite_spec_);
  }

  if (_internal_has_formulas_to_rewrite()) {
    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formulas_to_rewrite_);
  }

  return total_size;
}
size_t CommandRewriteFormulasForTransposeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteFormulasForTransposeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewrite_spec_);

    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formulas_to_rewrite_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TST.ImportWarningSetByCellRefArchive warningset_map = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *warningset_map_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteFormulasForTransposeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandRewriteFormulasForTransposeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteFormulasForTransposeArchive::GetClassData() const { return &_class_data_; }

void CommandRewriteFormulasForTransposeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandRewriteFormulasForTransposeArchive *>(to)->MergeFrom(
      static_cast<const CommandRewriteFormulasForTransposeArchive &>(from));
}


void CommandRewriteFormulasForTransposeArchive::MergeFrom(const CommandRewriteFormulasForTransposeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteFormulasForTransposeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rewrite_spec()->::TSCE::FormulaRewriteSpecArchive::MergeFrom(from._internal_rewrite_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_formulas_to_rewrite()->::TSCE::FormulasForUndoArchive::MergeFrom(from._internal_formulas_to_rewrite());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_warningset_map()->::TST::ImportWarningSetByCellRefArchive::MergeFrom(from._internal_warningset_map());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteFormulasForTransposeArchive::CopyFrom(const CommandRewriteFormulasForTransposeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteFormulasForTransposeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteFormulasForTransposeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!rewrite_spec_->IsInitialized()) return false;
  }
  if (_internal_has_formulas_to_rewrite()) {
    if (!formulas_to_rewrite_->IsInitialized()) return false;
  }
  if (_internal_has_warningset_map()) {
    if (!warningset_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteFormulasForTransposeArchive::InternalSwap(CommandRewriteFormulasForTransposeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewriteFormulasForTransposeArchive, warningset_map_)
      + sizeof(CommandRewriteFormulasForTransposeArchive::warningset_map_)
      - PROTOBUF_FIELD_OFFSET(CommandRewriteFormulasForTransposeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteFormulasForTransposeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[54]);
}

// ===================================================================

class CommandRewriteTableFormulasForRewriteSpecArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteTableFormulasForRewriteSpecArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewriteTableFormulasForRewriteSpecArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::FormulaRewriteSpecArchive& rewrite_spec(const CommandRewriteTableFormulasForRewriteSpecArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::FormulasForUndoArchive& formulas_to_rewrite(const CommandRewriteTableFormulasForRewriteSpecArchive* msg);
  static void set_has_formulas_to_rewrite(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewriteTableFormulasForRewriteSpecArchive::_Internal::super(const CommandRewriteTableFormulasForRewriteSpecArchive* msg) {
  return *msg->super_;
}
const ::TSCE::FormulaRewriteSpecArchive&
CommandRewriteTableFormulasForRewriteSpecArchive::_Internal::rewrite_spec(const CommandRewriteTableFormulasForRewriteSpecArchive* msg) {
  return *msg->rewrite_spec_;
}
const ::TSCE::FormulasForUndoArchive&
CommandRewriteTableFormulasForRewriteSpecArchive::_Internal::formulas_to_rewrite(const CommandRewriteTableFormulasForRewriteSpecArchive* msg) {
  return *msg->formulas_to_rewrite_;
}
void CommandRewriteTableFormulasForRewriteSpecArchive::clear_rewrite_spec() {
  if (rewrite_spec_ != nullptr) rewrite_spec_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandRewriteTableFormulasForRewriteSpecArchive::clear_formulas_to_rewrite() {
  if (formulas_to_rewrite_ != nullptr) formulas_to_rewrite_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandRewriteTableFormulasForRewriteSpecArchive::CommandRewriteTableFormulasForRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
}
CommandRewriteTableFormulasForRewriteSpecArchive::CommandRewriteTableFormulasForRewriteSpecArchive(const CommandRewriteTableFormulasForRewriteSpecArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_rewrite_spec()) {
    rewrite_spec_ = new ::TSCE::FormulaRewriteSpecArchive(*from.rewrite_spec_);
  } else {
    rewrite_spec_ = nullptr;
  }
  if (from._internal_has_formulas_to_rewrite()) {
    formulas_to_rewrite_ = new ::TSCE::FormulasForUndoArchive(*from.formulas_to_rewrite_);
  } else {
    formulas_to_rewrite_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
}

inline void CommandRewriteTableFormulasForRewriteSpecArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&formulas_to_rewrite_) -
    reinterpret_cast<char*>(&super_)) + sizeof(formulas_to_rewrite_));
}

CommandRewriteTableFormulasForRewriteSpecArchive::~CommandRewriteTableFormulasForRewriteSpecArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandRewriteTableFormulasForRewriteSpecArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete rewrite_spec_;
  if (this != internal_default_instance()) delete formulas_to_rewrite_;
}

void CommandRewriteTableFormulasForRewriteSpecArchive::ArenaDtor(void* object) {
  CommandRewriteTableFormulasForRewriteSpecArchive* _this = reinterpret_cast< CommandRewriteTableFormulasForRewriteSpecArchive* >(object);
  (void)_this;
}
void CommandRewriteTableFormulasForRewriteSpecArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandRewriteTableFormulasForRewriteSpecArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandRewriteTableFormulasForRewriteSpecArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rewrite_spec_ != nullptr);
      rewrite_spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(formulas_to_rewrite_ != nullptr);
      formulas_to_rewrite_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteTableFormulasForRewriteSpecArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_formulas_to_rewrite(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRewriteTableFormulasForRewriteSpecArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rewrite_spec(this), target, stream);
  }

  // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::formulas_to_rewrite(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
  return target;
}

size_t CommandRewriteTableFormulasForRewriteSpecArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_rewrite_spec()) {
    // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewrite_spec_);
  }

  if (_internal_has_formulas_to_rewrite()) {
    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formulas_to_rewrite_);
  }

  return total_size;
}
size_t CommandRewriteTableFormulasForRewriteSpecArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewrite_spec_);

    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formulas_to_rewrite_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteTableFormulasForRewriteSpecArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandRewriteTableFormulasForRewriteSpecArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteTableFormulasForRewriteSpecArchive::GetClassData() const { return &_class_data_; }

void CommandRewriteTableFormulasForRewriteSpecArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandRewriteTableFormulasForRewriteSpecArchive *>(to)->MergeFrom(
      static_cast<const CommandRewriteTableFormulasForRewriteSpecArchive &>(from));
}


void CommandRewriteTableFormulasForRewriteSpecArchive::MergeFrom(const CommandRewriteTableFormulasForRewriteSpecArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rewrite_spec()->::TSCE::FormulaRewriteSpecArchive::MergeFrom(from._internal_rewrite_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_formulas_to_rewrite()->::TSCE::FormulasForUndoArchive::MergeFrom(from._internal_formulas_to_rewrite());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteTableFormulasForRewriteSpecArchive::CopyFrom(const CommandRewriteTableFormulasForRewriteSpecArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteTableFormulasForRewriteSpecArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!rewrite_spec_->IsInitialized()) return false;
  }
  if (_internal_has_formulas_to_rewrite()) {
    if (!formulas_to_rewrite_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteTableFormulasForRewriteSpecArchive::InternalSwap(CommandRewriteTableFormulasForRewriteSpecArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewriteTableFormulasForRewriteSpecArchive, formulas_to_rewrite_)
      + sizeof(CommandRewriteTableFormulasForRewriteSpecArchive::formulas_to_rewrite_)
      - PROTOBUF_FIELD_OFFSET(CommandRewriteTableFormulasForRewriteSpecArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteTableFormulasForRewriteSpecArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[55]);
}

// ===================================================================

class CommandRewriteMergeFormulasArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteMergeFormulasArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewriteMergeFormulasArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::FormulaRewriteSpecArchive& rewrite_spec(const CommandRewriteMergeFormulasArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::FormulasForUndoArchive& formulas_to_rewrite(const CommandRewriteMergeFormulasArchive* msg);
  static void set_has_formulas_to_rewrite(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewriteMergeFormulasArchive::_Internal::super(const CommandRewriteMergeFormulasArchive* msg) {
  return *msg->super_;
}
const ::TSCE::FormulaRewriteSpecArchive&
CommandRewriteMergeFormulasArchive::_Internal::rewrite_spec(const CommandRewriteMergeFormulasArchive* msg) {
  return *msg->rewrite_spec_;
}
const ::TSCE::FormulasForUndoArchive&
CommandRewriteMergeFormulasArchive::_Internal::formulas_to_rewrite(const CommandRewriteMergeFormulasArchive* msg) {
  return *msg->formulas_to_rewrite_;
}
void CommandRewriteMergeFormulasArchive::clear_rewrite_spec() {
  if (rewrite_spec_ != nullptr) rewrite_spec_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandRewriteMergeFormulasArchive::clear_formulas_to_rewrite() {
  if (formulas_to_rewrite_ != nullptr) formulas_to_rewrite_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandRewriteMergeFormulasArchive::CommandRewriteMergeFormulasArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteMergeFormulasArchive)
}
CommandRewriteMergeFormulasArchive::CommandRewriteMergeFormulasArchive(const CommandRewriteMergeFormulasArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_rewrite_spec()) {
    rewrite_spec_ = new ::TSCE::FormulaRewriteSpecArchive(*from.rewrite_spec_);
  } else {
    rewrite_spec_ = nullptr;
  }
  if (from._internal_has_formulas_to_rewrite()) {
    formulas_to_rewrite_ = new ::TSCE::FormulasForUndoArchive(*from.formulas_to_rewrite_);
  } else {
    formulas_to_rewrite_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteMergeFormulasArchive)
}

inline void CommandRewriteMergeFormulasArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&formulas_to_rewrite_) -
    reinterpret_cast<char*>(&super_)) + sizeof(formulas_to_rewrite_));
}

CommandRewriteMergeFormulasArchive::~CommandRewriteMergeFormulasArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteMergeFormulasArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandRewriteMergeFormulasArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete rewrite_spec_;
  if (this != internal_default_instance()) delete formulas_to_rewrite_;
}

void CommandRewriteMergeFormulasArchive::ArenaDtor(void* object) {
  CommandRewriteMergeFormulasArchive* _this = reinterpret_cast< CommandRewriteMergeFormulasArchive* >(object);
  (void)_this;
}
void CommandRewriteMergeFormulasArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandRewriteMergeFormulasArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandRewriteMergeFormulasArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteMergeFormulasArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rewrite_spec_ != nullptr);
      rewrite_spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(formulas_to_rewrite_ != nullptr);
      formulas_to_rewrite_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteMergeFormulasArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_formulas_to_rewrite(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRewriteMergeFormulasArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteMergeFormulasArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rewrite_spec(this), target, stream);
  }

  // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::formulas_to_rewrite(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteMergeFormulasArchive)
  return target;
}

size_t CommandRewriteMergeFormulasArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewriteMergeFormulasArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_rewrite_spec()) {
    // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewrite_spec_);
  }

  if (_internal_has_formulas_to_rewrite()) {
    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formulas_to_rewrite_);
  }

  return total_size;
}
size_t CommandRewriteMergeFormulasArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteMergeFormulasArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewrite_spec_);

    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formulas_to_rewrite_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteMergeFormulasArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandRewriteMergeFormulasArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteMergeFormulasArchive::GetClassData() const { return &_class_data_; }

void CommandRewriteMergeFormulasArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandRewriteMergeFormulasArchive *>(to)->MergeFrom(
      static_cast<const CommandRewriteMergeFormulasArchive &>(from));
}


void CommandRewriteMergeFormulasArchive::MergeFrom(const CommandRewriteMergeFormulasArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteMergeFormulasArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rewrite_spec()->::TSCE::FormulaRewriteSpecArchive::MergeFrom(from._internal_rewrite_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_formulas_to_rewrite()->::TSCE::FormulasForUndoArchive::MergeFrom(from._internal_formulas_to_rewrite());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteMergeFormulasArchive::CopyFrom(const CommandRewriteMergeFormulasArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteMergeFormulasArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteMergeFormulasArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!rewrite_spec_->IsInitialized()) return false;
  }
  if (_internal_has_formulas_to_rewrite()) {
    if (!formulas_to_rewrite_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteMergeFormulasArchive::InternalSwap(CommandRewriteMergeFormulasArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewriteMergeFormulasArchive, formulas_to_rewrite_)
      + sizeof(CommandRewriteMergeFormulasArchive::formulas_to_rewrite_)
      - PROTOBUF_FIELD_OFFSET(CommandRewriteMergeFormulasArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteMergeFormulasArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[56]);
}

// ===================================================================

class CommandRewriteCategoryFormulasArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteCategoryFormulasArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewriteCategoryFormulasArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::FormulaRewriteSpecArchive& rewrite_spec(const CommandRewriteCategoryFormulasArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::FormulasForUndoArchive& formulas_to_rewrite(const CommandRewriteCategoryFormulasArchive* msg);
  static void set_has_formulas_to_rewrite(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewriteCategoryFormulasArchive::_Internal::super(const CommandRewriteCategoryFormulasArchive* msg) {
  return *msg->super_;
}
const ::TSCE::FormulaRewriteSpecArchive&
CommandRewriteCategoryFormulasArchive::_Internal::rewrite_spec(const CommandRewriteCategoryFormulasArchive* msg) {
  return *msg->rewrite_spec_;
}
const ::TSCE::FormulasForUndoArchive&
CommandRewriteCategoryFormulasArchive::_Internal::formulas_to_rewrite(const CommandRewriteCategoryFormulasArchive* msg) {
  return *msg->formulas_to_rewrite_;
}
void CommandRewriteCategoryFormulasArchive::clear_rewrite_spec() {
  if (rewrite_spec_ != nullptr) rewrite_spec_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandRewriteCategoryFormulasArchive::clear_formulas_to_rewrite() {
  if (formulas_to_rewrite_ != nullptr) formulas_to_rewrite_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandRewriteCategoryFormulasArchive::CommandRewriteCategoryFormulasArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteCategoryFormulasArchive)
}
CommandRewriteCategoryFormulasArchive::CommandRewriteCategoryFormulasArchive(const CommandRewriteCategoryFormulasArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_rewrite_spec()) {
    rewrite_spec_ = new ::TSCE::FormulaRewriteSpecArchive(*from.rewrite_spec_);
  } else {
    rewrite_spec_ = nullptr;
  }
  if (from._internal_has_formulas_to_rewrite()) {
    formulas_to_rewrite_ = new ::TSCE::FormulasForUndoArchive(*from.formulas_to_rewrite_);
  } else {
    formulas_to_rewrite_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteCategoryFormulasArchive)
}

inline void CommandRewriteCategoryFormulasArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&formulas_to_rewrite_) -
    reinterpret_cast<char*>(&super_)) + sizeof(formulas_to_rewrite_));
}

CommandRewriteCategoryFormulasArchive::~CommandRewriteCategoryFormulasArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteCategoryFormulasArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandRewriteCategoryFormulasArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete rewrite_spec_;
  if (this != internal_default_instance()) delete formulas_to_rewrite_;
}

void CommandRewriteCategoryFormulasArchive::ArenaDtor(void* object) {
  CommandRewriteCategoryFormulasArchive* _this = reinterpret_cast< CommandRewriteCategoryFormulasArchive* >(object);
  (void)_this;
}
void CommandRewriteCategoryFormulasArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandRewriteCategoryFormulasArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandRewriteCategoryFormulasArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteCategoryFormulasArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rewrite_spec_ != nullptr);
      rewrite_spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(formulas_to_rewrite_ != nullptr);
      formulas_to_rewrite_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteCategoryFormulasArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_formulas_to_rewrite(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRewriteCategoryFormulasArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteCategoryFormulasArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rewrite_spec(this), target, stream);
  }

  // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::formulas_to_rewrite(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteCategoryFormulasArchive)
  return target;
}

size_t CommandRewriteCategoryFormulasArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewriteCategoryFormulasArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_rewrite_spec()) {
    // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewrite_spec_);
  }

  if (_internal_has_formulas_to_rewrite()) {
    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formulas_to_rewrite_);
  }

  return total_size;
}
size_t CommandRewriteCategoryFormulasArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteCategoryFormulasArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewrite_spec_);

    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formulas_to_rewrite_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteCategoryFormulasArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandRewriteCategoryFormulasArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteCategoryFormulasArchive::GetClassData() const { return &_class_data_; }

void CommandRewriteCategoryFormulasArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandRewriteCategoryFormulasArchive *>(to)->MergeFrom(
      static_cast<const CommandRewriteCategoryFormulasArchive &>(from));
}


void CommandRewriteCategoryFormulasArchive::MergeFrom(const CommandRewriteCategoryFormulasArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteCategoryFormulasArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rewrite_spec()->::TSCE::FormulaRewriteSpecArchive::MergeFrom(from._internal_rewrite_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_formulas_to_rewrite()->::TSCE::FormulasForUndoArchive::MergeFrom(from._internal_formulas_to_rewrite());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteCategoryFormulasArchive::CopyFrom(const CommandRewriteCategoryFormulasArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteCategoryFormulasArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteCategoryFormulasArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!rewrite_spec_->IsInitialized()) return false;
  }
  if (_internal_has_formulas_to_rewrite()) {
    if (!formulas_to_rewrite_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteCategoryFormulasArchive::InternalSwap(CommandRewriteCategoryFormulasArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewriteCategoryFormulasArchive, formulas_to_rewrite_)
      + sizeof(CommandRewriteCategoryFormulasArchive::formulas_to_rewrite_)
      - PROTOBUF_FIELD_OFFSET(CommandRewriteCategoryFormulasArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteCategoryFormulasArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[57]);
}

// ===================================================================

class CommandRewriteFilterFormulasForTableResizeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteFilterFormulasForTableResizeArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewriteFilterFormulasForTableResizeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewriteFilterFormulasForTableResizeArchive::_Internal::super(const CommandRewriteFilterFormulasForTableResizeArchive* msg) {
  return *msg->super_;
}
CommandRewriteFilterFormulasForTableResizeArchive::CommandRewriteFilterFormulasForTableResizeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteFilterFormulasForTableResizeArchive)
}
CommandRewriteFilterFormulasForTableResizeArchive::CommandRewriteFilterFormulasForTableResizeArchive(const CommandRewriteFilterFormulasForTableResizeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteFilterFormulasForTableResizeArchive)
}

inline void CommandRewriteFilterFormulasForTableResizeArchive::SharedCtor() {
super_ = nullptr;
}

CommandRewriteFilterFormulasForTableResizeArchive::~CommandRewriteFilterFormulasForTableResizeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteFilterFormulasForTableResizeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandRewriteFilterFormulasForTableResizeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandRewriteFilterFormulasForTableResizeArchive::ArenaDtor(void* object) {
  CommandRewriteFilterFormulasForTableResizeArchive* _this = reinterpret_cast< CommandRewriteFilterFormulasForTableResizeArchive* >(object);
  (void)_this;
}
void CommandRewriteFilterFormulasForTableResizeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandRewriteFilterFormulasForTableResizeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandRewriteFilterFormulasForTableResizeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteFilterFormulasForTableResizeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteFilterFormulasForTableResizeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRewriteFilterFormulasForTableResizeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteFilterFormulasForTableResizeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteFilterFormulasForTableResizeArchive)
  return target;
}

size_t CommandRewriteFilterFormulasForTableResizeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteFilterFormulasForTableResizeArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteFilterFormulasForTableResizeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandRewriteFilterFormulasForTableResizeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteFilterFormulasForTableResizeArchive::GetClassData() const { return &_class_data_; }

void CommandRewriteFilterFormulasForTableResizeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandRewriteFilterFormulasForTableResizeArchive *>(to)->MergeFrom(
      static_cast<const CommandRewriteFilterFormulasForTableResizeArchive &>(from));
}


void CommandRewriteFilterFormulasForTableResizeArchive::MergeFrom(const CommandRewriteFilterFormulasForTableResizeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteFilterFormulasForTableResizeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteFilterFormulasForTableResizeArchive::CopyFrom(const CommandRewriteFilterFormulasForTableResizeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteFilterFormulasForTableResizeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteFilterFormulasForTableResizeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteFilterFormulasForTableResizeArchive::InternalSwap(CommandRewriteFilterFormulasForTableResizeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteFilterFormulasForTableResizeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[58]);
}

// ===================================================================

class CommandRewriteFilterFormulasForRewriteSpecArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteFilterFormulasForRewriteSpecArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewriteFilterFormulasForRewriteSpecArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& filter_set(const CommandRewriteFilterFormulasForRewriteSpecArchive* msg);
  static void set_has_filter_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::FormulaRewriteSpecArchive& rewrite_spec(const CommandRewriteFilterFormulasForRewriteSpecArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewriteFilterFormulasForRewriteSpecArchive::_Internal::super(const CommandRewriteFilterFormulasForRewriteSpecArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandRewriteFilterFormulasForRewriteSpecArchive::_Internal::filter_set(const CommandRewriteFilterFormulasForRewriteSpecArchive* msg) {
  return *msg->filter_set_;
}
const ::TSCE::FormulaRewriteSpecArchive&
CommandRewriteFilterFormulasForRewriteSpecArchive::_Internal::rewrite_spec(const CommandRewriteFilterFormulasForRewriteSpecArchive* msg) {
  return *msg->rewrite_spec_;
}
void CommandRewriteFilterFormulasForRewriteSpecArchive::clear_filter_set() {
  if (filter_set_ != nullptr) filter_set_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandRewriteFilterFormulasForRewriteSpecArchive::clear_rewrite_spec() {
  if (rewrite_spec_ != nullptr) rewrite_spec_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandRewriteFilterFormulasForRewriteSpecArchive::CommandRewriteFilterFormulasForRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
}
CommandRewriteFilterFormulasForRewriteSpecArchive::CommandRewriteFilterFormulasForRewriteSpecArchive(const CommandRewriteFilterFormulasForRewriteSpecArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_filter_set()) {
    filter_set_ = new ::TSP::Reference(*from.filter_set_);
  } else {
    filter_set_ = nullptr;
  }
  if (from._internal_has_rewrite_spec()) {
    rewrite_spec_ = new ::TSCE::FormulaRewriteSpecArchive(*from.rewrite_spec_);
  } else {
    rewrite_spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
}

inline void CommandRewriteFilterFormulasForRewriteSpecArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rewrite_spec_) -
    reinterpret_cast<char*>(&super_)) + sizeof(rewrite_spec_));
}

CommandRewriteFilterFormulasForRewriteSpecArchive::~CommandRewriteFilterFormulasForRewriteSpecArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandRewriteFilterFormulasForRewriteSpecArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete filter_set_;
  if (this != internal_default_instance()) delete rewrite_spec_;
}

void CommandRewriteFilterFormulasForRewriteSpecArchive::ArenaDtor(void* object) {
  CommandRewriteFilterFormulasForRewriteSpecArchive* _this = reinterpret_cast< CommandRewriteFilterFormulasForRewriteSpecArchive* >(object);
  (void)_this;
}
void CommandRewriteFilterFormulasForRewriteSpecArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandRewriteFilterFormulasForRewriteSpecArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandRewriteFilterFormulasForRewriteSpecArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(filter_set_ != nullptr);
      filter_set_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rewrite_spec_ != nullptr);
      rewrite_spec_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteFilterFormulasForRewriteSpecArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference filter_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRewriteFilterFormulasForRewriteSpecArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference filter_set = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::filter_set(this), target, stream);
  }

  // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rewrite_spec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
  return target;
}

size_t CommandRewriteFilterFormulasForRewriteSpecArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_filter_set()) {
    // required .TSP.Reference filter_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_set_);
  }

  if (_internal_has_rewrite_spec()) {
    // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewrite_spec_);
  }

  return total_size;
}
size_t CommandRewriteFilterFormulasForRewriteSpecArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference filter_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_set_);

    // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewrite_spec_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteFilterFormulasForRewriteSpecArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandRewriteFilterFormulasForRewriteSpecArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteFilterFormulasForRewriteSpecArchive::GetClassData() const { return &_class_data_; }

void CommandRewriteFilterFormulasForRewriteSpecArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandRewriteFilterFormulasForRewriteSpecArchive *>(to)->MergeFrom(
      static_cast<const CommandRewriteFilterFormulasForRewriteSpecArchive &>(from));
}


void CommandRewriteFilterFormulasForRewriteSpecArchive::MergeFrom(const CommandRewriteFilterFormulasForRewriteSpecArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_filter_set()->::TSP::Reference::MergeFrom(from._internal_filter_set());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rewrite_spec()->::TSCE::FormulaRewriteSpecArchive::MergeFrom(from._internal_rewrite_spec());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteFilterFormulasForRewriteSpecArchive::CopyFrom(const CommandRewriteFilterFormulasForRewriteSpecArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteFilterFormulasForRewriteSpecArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_filter_set()) {
    if (!filter_set_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!rewrite_spec_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteFilterFormulasForRewriteSpecArchive::InternalSwap(CommandRewriteFilterFormulasForRewriteSpecArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewriteFilterFormulasForRewriteSpecArchive, rewrite_spec_)
      + sizeof(CommandRewriteFilterFormulasForRewriteSpecArchive::rewrite_spec_)
      - PROTOBUF_FIELD_OFFSET(CommandRewriteFilterFormulasForRewriteSpecArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteFilterFormulasForRewriteSpecArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[59]);
}

// ===================================================================

class CommandRewriteConditionalStylesForRewriteSpecArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteConditionalStylesForRewriteSpecArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewriteConditionalStylesForRewriteSpecArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::FormulaRewriteSpecArchive& rewrite_spec(const CommandRewriteConditionalStylesForRewriteSpecArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::FormulasForUndoArchive& formulas_to_rewrite(const CommandRewriteConditionalStylesForRewriteSpecArchive* msg);
  static void set_has_formulas_to_rewrite(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::ExpandedCellRefObjectMapArchive& conditional_style_sets(const CommandRewriteConditionalStylesForRewriteSpecArchive* msg);
  static void set_has_conditional_style_sets(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewriteConditionalStylesForRewriteSpecArchive::_Internal::super(const CommandRewriteConditionalStylesForRewriteSpecArchive* msg) {
  return *msg->super_;
}
const ::TSCE::FormulaRewriteSpecArchive&
CommandRewriteConditionalStylesForRewriteSpecArchive::_Internal::rewrite_spec(const CommandRewriteConditionalStylesForRewriteSpecArchive* msg) {
  return *msg->rewrite_spec_;
}
const ::TSCE::FormulasForUndoArchive&
CommandRewriteConditionalStylesForRewriteSpecArchive::_Internal::formulas_to_rewrite(const CommandRewriteConditionalStylesForRewriteSpecArchive* msg) {
  return *msg->formulas_to_rewrite_;
}
const ::TSCE::ExpandedCellRefObjectMapArchive&
CommandRewriteConditionalStylesForRewriteSpecArchive::_Internal::conditional_style_sets(const CommandRewriteConditionalStylesForRewriteSpecArchive* msg) {
  return *msg->conditional_style_sets_;
}
void CommandRewriteConditionalStylesForRewriteSpecArchive::clear_rewrite_spec() {
  if (rewrite_spec_ != nullptr) rewrite_spec_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandRewriteConditionalStylesForRewriteSpecArchive::clear_formulas_to_rewrite() {
  if (formulas_to_rewrite_ != nullptr) formulas_to_rewrite_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandRewriteConditionalStylesForRewriteSpecArchive::clear_conditional_style_sets() {
  if (conditional_style_sets_ != nullptr) conditional_style_sets_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandRewriteConditionalStylesForRewriteSpecArchive::CommandRewriteConditionalStylesForRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
}
CommandRewriteConditionalStylesForRewriteSpecArchive::CommandRewriteConditionalStylesForRewriteSpecArchive(const CommandRewriteConditionalStylesForRewriteSpecArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_rewrite_spec()) {
    rewrite_spec_ = new ::TSCE::FormulaRewriteSpecArchive(*from.rewrite_spec_);
  } else {
    rewrite_spec_ = nullptr;
  }
  if (from._internal_has_formulas_to_rewrite()) {
    formulas_to_rewrite_ = new ::TSCE::FormulasForUndoArchive(*from.formulas_to_rewrite_);
  } else {
    formulas_to_rewrite_ = nullptr;
  }
  if (from._internal_has_conditional_style_sets()) {
    conditional_style_sets_ = new ::TSCE::ExpandedCellRefObjectMapArchive(*from.conditional_style_sets_);
  } else {
    conditional_style_sets_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
}

inline void CommandRewriteConditionalStylesForRewriteSpecArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&conditional_style_sets_) -
    reinterpret_cast<char*>(&super_)) + sizeof(conditional_style_sets_));
}

CommandRewriteConditionalStylesForRewriteSpecArchive::~CommandRewriteConditionalStylesForRewriteSpecArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandRewriteConditionalStylesForRewriteSpecArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete rewrite_spec_;
  if (this != internal_default_instance()) delete formulas_to_rewrite_;
  if (this != internal_default_instance()) delete conditional_style_sets_;
}

void CommandRewriteConditionalStylesForRewriteSpecArchive::ArenaDtor(void* object) {
  CommandRewriteConditionalStylesForRewriteSpecArchive* _this = reinterpret_cast< CommandRewriteConditionalStylesForRewriteSpecArchive* >(object);
  (void)_this;
}
void CommandRewriteConditionalStylesForRewriteSpecArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandRewriteConditionalStylesForRewriteSpecArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandRewriteConditionalStylesForRewriteSpecArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rewrite_spec_ != nullptr);
      rewrite_spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(formulas_to_rewrite_ != nullptr);
      formulas_to_rewrite_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(conditional_style_sets_ != nullptr);
      conditional_style_sets_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteConditionalStylesForRewriteSpecArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_formulas_to_rewrite(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.ExpandedCellRefObjectMapArchive conditional_style_sets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_conditional_style_sets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRewriteConditionalStylesForRewriteSpecArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rewrite_spec(this), target, stream);
  }

  // optional .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::formulas_to_rewrite(this), target, stream);
  }

  // optional .TSCE.ExpandedCellRefObjectMapArchive conditional_style_sets = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::conditional_style_sets(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
  return target;
}

size_t CommandRewriteConditionalStylesForRewriteSpecArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_rewrite_spec()) {
    // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewrite_spec_);
  }

  return total_size;
}
size_t CommandRewriteConditionalStylesForRewriteSpecArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewrite_spec_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *formulas_to_rewrite_);
    }

    // optional .TSCE.ExpandedCellRefObjectMapArchive conditional_style_sets = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *conditional_style_sets_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteConditionalStylesForRewriteSpecArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandRewriteConditionalStylesForRewriteSpecArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteConditionalStylesForRewriteSpecArchive::GetClassData() const { return &_class_data_; }

void CommandRewriteConditionalStylesForRewriteSpecArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandRewriteConditionalStylesForRewriteSpecArchive *>(to)->MergeFrom(
      static_cast<const CommandRewriteConditionalStylesForRewriteSpecArchive &>(from));
}


void CommandRewriteConditionalStylesForRewriteSpecArchive::MergeFrom(const CommandRewriteConditionalStylesForRewriteSpecArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rewrite_spec()->::TSCE::FormulaRewriteSpecArchive::MergeFrom(from._internal_rewrite_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_formulas_to_rewrite()->::TSCE::FormulasForUndoArchive::MergeFrom(from._internal_formulas_to_rewrite());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_conditional_style_sets()->::TSCE::ExpandedCellRefObjectMapArchive::MergeFrom(from._internal_conditional_style_sets());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteConditionalStylesForRewriteSpecArchive::CopyFrom(const CommandRewriteConditionalStylesForRewriteSpecArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteConditionalStylesForRewriteSpecArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!rewrite_spec_->IsInitialized()) return false;
  }
  if (_internal_has_formulas_to_rewrite()) {
    if (!formulas_to_rewrite_->IsInitialized()) return false;
  }
  if (_internal_has_conditional_style_sets()) {
    if (!conditional_style_sets_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteConditionalStylesForRewriteSpecArchive::InternalSwap(CommandRewriteConditionalStylesForRewriteSpecArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewriteConditionalStylesForRewriteSpecArchive, conditional_style_sets_)
      + sizeof(CommandRewriteConditionalStylesForRewriteSpecArchive::conditional_style_sets_)
      - PROTOBUF_FIELD_OFFSET(CommandRewriteConditionalStylesForRewriteSpecArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteConditionalStylesForRewriteSpecArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[60]);
}

// ===================================================================

class CommandMergeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMergeArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandMergeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CellUIDListArchive& cell_uid_list(const CommandMergeArchive* msg);
  static void set_has_cell_uid_list(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& undo_cell_map(const CommandMergeArchive* msg);
  static void set_has_undo_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_formula_rewrite_command(const CommandMergeArchive* msg);
  static void set_has_undo_formula_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_merge_owner_rollback(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& commit_cell_map(const CommandMergeArchive* msg);
  static void set_has_commit_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandMergeArchive::_Internal::super(const CommandMergeArchive* msg) {
  return *msg->super_;
}
const ::TST::CellUIDListArchive&
CommandMergeArchive::_Internal::cell_uid_list(const CommandMergeArchive* msg) {
  return *msg->cell_uid_list_;
}
const ::TSP::Reference&
CommandMergeArchive::_Internal::undo_cell_map(const CommandMergeArchive* msg) {
  return *msg->undo_cell_map_;
}
const ::TSP::Reference&
CommandMergeArchive::_Internal::undo_formula_rewrite_command(const CommandMergeArchive* msg) {
  return *msg->undo_formula_rewrite_command_;
}
const ::TSP::Reference&
CommandMergeArchive::_Internal::commit_cell_map(const CommandMergeArchive* msg) {
  return *msg->commit_cell_map_;
}
void CommandMergeArchive::clear_cell_uid_list() {
  if (cell_uid_list_ != nullptr) cell_uid_list_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandMergeArchive::clear_undo_cell_map() {
  if (undo_cell_map_ != nullptr) undo_cell_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandMergeArchive::clear_undo_formula_rewrite_command() {
  if (undo_formula_rewrite_command_ != nullptr) undo_formula_rewrite_command_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandMergeArchive::clear_commit_cell_map() {
  if (commit_cell_map_ != nullptr) commit_cell_map_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
CommandMergeArchive::CommandMergeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandMergeArchive)
}
CommandMergeArchive::CommandMergeArchive(const CommandMergeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_cell_uid_list()) {
    cell_uid_list_ = new ::TST::CellUIDListArchive(*from.cell_uid_list_);
  } else {
    cell_uid_list_ = nullptr;
  }
  if (from._internal_has_undo_cell_map()) {
    undo_cell_map_ = new ::TSP::Reference(*from.undo_cell_map_);
  } else {
    undo_cell_map_ = nullptr;
  }
  if (from._internal_has_undo_formula_rewrite_command()) {
    undo_formula_rewrite_command_ = new ::TSP::Reference(*from.undo_formula_rewrite_command_);
  } else {
    undo_formula_rewrite_command_ = nullptr;
  }
  if (from._internal_has_commit_cell_map()) {
    commit_cell_map_ = new ::TSP::Reference(*from.commit_cell_map_);
  } else {
    commit_cell_map_ = nullptr;
  }
  merge_owner_rollback_ = from.merge_owner_rollback_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandMergeArchive)
}

inline void CommandMergeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&merge_owner_rollback_) -
    reinterpret_cast<char*>(&super_)) + sizeof(merge_owner_rollback_));
}

CommandMergeArchive::~CommandMergeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandMergeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandMergeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete cell_uid_list_;
  if (this != internal_default_instance()) delete undo_cell_map_;
  if (this != internal_default_instance()) delete undo_formula_rewrite_command_;
  if (this != internal_default_instance()) delete commit_cell_map_;
}

void CommandMergeArchive::ArenaDtor(void* object) {
  CommandMergeArchive* _this = reinterpret_cast< CommandMergeArchive* >(object);
  (void)_this;
}
void CommandMergeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandMergeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandMergeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandMergeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_uid_list_ != nullptr);
      cell_uid_list_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_cell_map_ != nullptr);
      undo_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undo_formula_rewrite_command_ != nullptr);
      undo_formula_rewrite_command_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(commit_cell_map_ != nullptr);
      commit_cell_map_->Clear();
    }
  }
  merge_owner_rollback_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMergeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.CellUIDListArchive cell_uid_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_cell_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_formula_rewrite_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_formula_rewrite_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 merge_owner_rollback = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_merge_owner_rollback(&has_bits);
          merge_owner_rollback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference commit_cell_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandMergeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandMergeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TST.CellUIDListArchive cell_uid_list = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cell_uid_list(this), target, stream);
  }

  // optional .TSP.Reference undo_cell_map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::undo_cell_map(this), target, stream);
  }

  // optional .TSP.Reference undo_formula_rewrite_command = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::undo_formula_rewrite_command(this), target, stream);
  }

  // optional uint32 merge_owner_rollback = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_merge_owner_rollback(), target);
  }

  // optional .TSP.Reference commit_cell_map = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::commit_cell_map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandMergeArchive)
  return target;
}

size_t CommandMergeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandMergeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_cell_uid_list()) {
    // required .TST.CellUIDListArchive cell_uid_list = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_uid_list_);
  }

  return total_size;
}
size_t CommandMergeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandMergeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TST.CellUIDListArchive cell_uid_list = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_uid_list_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional .TSP.Reference undo_cell_map = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_cell_map_);
    }

    // optional .TSP.Reference undo_formula_rewrite_command = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_formula_rewrite_command_);
    }

    // optional .TSP.Reference commit_cell_map = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commit_cell_map_);
    }

    // optional uint32 merge_owner_rollback = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_merge_owner_rollback());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandMergeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandMergeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandMergeArchive::GetClassData() const { return &_class_data_; }

void CommandMergeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandMergeArchive *>(to)->MergeFrom(
      static_cast<const CommandMergeArchive &>(from));
}


void CommandMergeArchive::MergeFrom(const CommandMergeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandMergeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_uid_list()->::TST::CellUIDListArchive::MergeFrom(from._internal_cell_uid_list());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_cell_map()->::TSP::Reference::MergeFrom(from._internal_undo_cell_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_undo_formula_rewrite_command()->::TSP::Reference::MergeFrom(from._internal_undo_formula_rewrite_command());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_commit_cell_map()->::TSP::Reference::MergeFrom(from._internal_commit_cell_map());
    }
    if (cached_has_bits & 0x00000020u) {
      merge_owner_rollback_ = from.merge_owner_rollback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandMergeArchive::CopyFrom(const CommandMergeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandMergeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMergeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uid_list()) {
    if (!cell_uid_list_->IsInitialized()) return false;
  }
  if (_internal_has_undo_cell_map()) {
    if (!undo_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_formula_rewrite_command()) {
    if (!undo_formula_rewrite_command_->IsInitialized()) return false;
  }
  if (_internal_has_commit_cell_map()) {
    if (!commit_cell_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandMergeArchive::InternalSwap(CommandMergeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMergeArchive, merge_owner_rollback_)
      + sizeof(CommandMergeArchive::merge_owner_rollback_)
      - PROTOBUF_FIELD_OFFSET(CommandMergeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMergeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[61]);
}

// ===================================================================

class CommandInverseMergeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandInverseMergeArchive>()._has_bits_);
  static const ::TST::CommandApplyCellMapArchive& super(const CommandInverseMergeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDCoordArchive& merge_source_cell_uid(const CommandInverseMergeArchive* msg);
  static void set_has_merge_source_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CommandApplyCellMapArchive&
CommandInverseMergeArchive::_Internal::super(const CommandInverseMergeArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDCoordArchive&
CommandInverseMergeArchive::_Internal::merge_source_cell_uid(const CommandInverseMergeArchive* msg) {
  return *msg->merge_source_cell_uid_;
}
void CommandInverseMergeArchive::clear_merge_source_cell_uid() {
  if (merge_source_cell_uid_ != nullptr) merge_source_cell_uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandInverseMergeArchive::CommandInverseMergeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandInverseMergeArchive)
}
CommandInverseMergeArchive::CommandInverseMergeArchive(const CommandInverseMergeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::CommandApplyCellMapArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_merge_source_cell_uid()) {
    merge_source_cell_uid_ = new ::TSP::UUIDCoordArchive(*from.merge_source_cell_uid_);
  } else {
    merge_source_cell_uid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandInverseMergeArchive)
}

inline void CommandInverseMergeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&merge_source_cell_uid_) -
    reinterpret_cast<char*>(&super_)) + sizeof(merge_source_cell_uid_));
}

CommandInverseMergeArchive::~CommandInverseMergeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandInverseMergeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandInverseMergeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete merge_source_cell_uid_;
}

void CommandInverseMergeArchive::ArenaDtor(void* object) {
  CommandInverseMergeArchive* _this = reinterpret_cast< CommandInverseMergeArchive* >(object);
  (void)_this;
}
void CommandInverseMergeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandInverseMergeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandInverseMergeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandInverseMergeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(merge_source_cell_uid_ != nullptr);
      merge_source_cell_uid_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandInverseMergeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandApplyCellMapArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDCoordArchive merge_source_cell_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_merge_source_cell_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandInverseMergeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandInverseMergeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.CommandApplyCellMapArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUIDCoordArchive merge_source_cell_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::merge_source_cell_uid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandInverseMergeArchive)
  return target;
}

size_t CommandInverseMergeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandInverseMergeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandApplyCellMapArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_merge_source_cell_uid()) {
    // required .TSP.UUIDCoordArchive merge_source_cell_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *merge_source_cell_uid_);
  }

  return total_size;
}
size_t CommandInverseMergeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandInverseMergeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.CommandApplyCellMapArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUIDCoordArchive merge_source_cell_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *merge_source_cell_uid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandInverseMergeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandInverseMergeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandInverseMergeArchive::GetClassData() const { return &_class_data_; }

void CommandInverseMergeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandInverseMergeArchive *>(to)->MergeFrom(
      static_cast<const CommandInverseMergeArchive &>(from));
}


void CommandInverseMergeArchive::MergeFrom(const CommandInverseMergeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandInverseMergeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::CommandApplyCellMapArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_merge_source_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(from._internal_merge_source_cell_uid());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandInverseMergeArchive::CopyFrom(const CommandInverseMergeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandInverseMergeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandInverseMergeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_merge_source_cell_uid()) {
    if (!merge_source_cell_uid_->IsInitialized()) return false;
  }
  return true;
}

void CommandInverseMergeArchive::InternalSwap(CommandInverseMergeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandInverseMergeArchive, merge_source_cell_uid_)
      + sizeof(CommandInverseMergeArchive::merge_source_cell_uid_)
      - PROTOBUF_FIELD_OFFSET(CommandInverseMergeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandInverseMergeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[62]);
}

// ===================================================================

class CommandUnmergeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandUnmergeArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandUnmergeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& undo_cell_map(const CommandUnmergeArchive* msg);
  static void set_has_undo_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& undo_formula_rewrite_command(const CommandUnmergeArchive* msg);
  static void set_has_undo_formula_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandUnmergeArchive::_Internal::super(const CommandUnmergeArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandUnmergeArchive::_Internal::undo_cell_map(const CommandUnmergeArchive* msg) {
  return *msg->undo_cell_map_;
}
const ::TSP::Reference&
CommandUnmergeArchive::_Internal::undo_formula_rewrite_command(const CommandUnmergeArchive* msg) {
  return *msg->undo_formula_rewrite_command_;
}
void CommandUnmergeArchive::clear_unmerge_uid_ranges() {
  unmerge_uid_ranges_.Clear();
}
void CommandUnmergeArchive::clear_undo_cell_map() {
  if (undo_cell_map_ != nullptr) undo_cell_map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandUnmergeArchive::clear_undo_formula_rewrite_command() {
  if (undo_formula_rewrite_command_ != nullptr) undo_formula_rewrite_command_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandUnmergeArchive::CommandUnmergeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  unmerge_uid_ranges_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandUnmergeArchive)
}
CommandUnmergeArchive::CommandUnmergeArchive(const CommandUnmergeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      unmerge_uid_ranges_(from.unmerge_uid_ranges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_undo_cell_map()) {
    undo_cell_map_ = new ::TSP::Reference(*from.undo_cell_map_);
  } else {
    undo_cell_map_ = nullptr;
  }
  if (from._internal_has_undo_formula_rewrite_command()) {
    undo_formula_rewrite_command_ = new ::TSP::Reference(*from.undo_formula_rewrite_command_);
  } else {
    undo_formula_rewrite_command_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandUnmergeArchive)
}

inline void CommandUnmergeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_formula_rewrite_command_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_formula_rewrite_command_));
}

CommandUnmergeArchive::~CommandUnmergeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandUnmergeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandUnmergeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete undo_cell_map_;
  if (this != internal_default_instance()) delete undo_formula_rewrite_command_;
}

void CommandUnmergeArchive::ArenaDtor(void* object) {
  CommandUnmergeArchive* _this = reinterpret_cast< CommandUnmergeArchive* >(object);
  (void)_this;
}
void CommandUnmergeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandUnmergeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandUnmergeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandUnmergeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unmerge_uid_ranges_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(undo_cell_map_ != nullptr);
      undo_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_formula_rewrite_command_ != nullptr);
      undo_formula_rewrite_command_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandUnmergeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUIDRectArchive unmerge_uid_ranges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unmerge_uid_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_cell_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_formula_rewrite_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_formula_rewrite_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandUnmergeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandUnmergeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.UUIDRectArchive unmerge_uid_ranges = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unmerge_uid_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_unmerge_uid_ranges(i), target, stream);
  }

  // optional .TSP.Reference undo_cell_map = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::undo_cell_map(this), target, stream);
  }

  // optional .TSP.Reference undo_formula_rewrite_command = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::undo_formula_rewrite_command(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandUnmergeArchive)
  return target;
}

size_t CommandUnmergeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandUnmergeArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUIDRectArchive unmerge_uid_ranges = 2;
  total_size += 1UL * this->_internal_unmerge_uid_ranges_size();
  for (const auto& msg : this->unmerge_uid_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference undo_cell_map = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_cell_map_);
    }

    // optional .TSP.Reference undo_formula_rewrite_command = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_formula_rewrite_command_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandUnmergeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandUnmergeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandUnmergeArchive::GetClassData() const { return &_class_data_; }

void CommandUnmergeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandUnmergeArchive *>(to)->MergeFrom(
      static_cast<const CommandUnmergeArchive &>(from));
}


void CommandUnmergeArchive::MergeFrom(const CommandUnmergeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandUnmergeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unmerge_uid_ranges_.MergeFrom(from.unmerge_uid_ranges_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_undo_cell_map()->::TSP::Reference::MergeFrom(from._internal_undo_cell_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_formula_rewrite_command()->::TSP::Reference::MergeFrom(from._internal_undo_formula_rewrite_command());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandUnmergeArchive::CopyFrom(const CommandUnmergeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandUnmergeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandUnmergeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(unmerge_uid_ranges_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_undo_cell_map()) {
    if (!undo_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_formula_rewrite_command()) {
    if (!undo_formula_rewrite_command_->IsInitialized()) return false;
  }
  return true;
}

void CommandUnmergeArchive::InternalSwap(CommandUnmergeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unmerge_uid_ranges_.InternalSwap(&other->unmerge_uid_ranges_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandUnmergeArchive, undo_formula_rewrite_command_)
      + sizeof(CommandUnmergeArchive::undo_formula_rewrite_command_)
      - PROTOBUF_FIELD_OFFSET(CommandUnmergeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandUnmergeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[63]);
}

// ===================================================================

class CommandChooseTableIdRemapperArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandChooseTableIdRemapperArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandChooseTableIdRemapperArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::MultiTableRemapperArchive& table_id_mapper(const CommandChooseTableIdRemapperArchive* msg);
  static void set_has_table_id_mapper(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& formula_rewrite_command_for_undo(const CommandChooseTableIdRemapperArchive* msg);
  static void set_has_formula_rewrite_command_for_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_apply_and_clear(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

const ::TSK::CommandArchive&
CommandChooseTableIdRemapperArchive::_Internal::super(const CommandChooseTableIdRemapperArchive* msg) {
  return *msg->super_;
}
const ::TST::MultiTableRemapperArchive&
CommandChooseTableIdRemapperArchive::_Internal::table_id_mapper(const CommandChooseTableIdRemapperArchive* msg) {
  return *msg->table_id_mapper_;
}
const ::TSP::Reference&
CommandChooseTableIdRemapperArchive::_Internal::formula_rewrite_command_for_undo(const CommandChooseTableIdRemapperArchive* msg) {
  return *msg->formula_rewrite_command_for_undo_;
}
void CommandChooseTableIdRemapperArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandChooseTableIdRemapperArchive::clear_table_id_mapper() {
  if (table_id_mapper_ != nullptr) table_id_mapper_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandChooseTableIdRemapperArchive::clear_formula_rewrite_command_for_undo() {
  if (formula_rewrite_command_for_undo_ != nullptr) formula_rewrite_command_for_undo_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandChooseTableIdRemapperArchive::CommandChooseTableIdRemapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandChooseTableIdRemapperArchive)
}
CommandChooseTableIdRemapperArchive::CommandChooseTableIdRemapperArchive(const CommandChooseTableIdRemapperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_table_id_mapper()) {
    table_id_mapper_ = new ::TST::MultiTableRemapperArchive(*from.table_id_mapper_);
  } else {
    table_id_mapper_ = nullptr;
  }
  if (from._internal_has_formula_rewrite_command_for_undo()) {
    formula_rewrite_command_for_undo_ = new ::TSP::Reference(*from.formula_rewrite_command_for_undo_);
  } else {
    formula_rewrite_command_for_undo_ = nullptr;
  }
  apply_and_clear_ = from.apply_and_clear_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandChooseTableIdRemapperArchive)
}

inline void CommandChooseTableIdRemapperArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&apply_and_clear_) -
    reinterpret_cast<char*>(&super_)) + sizeof(apply_and_clear_));
}

CommandChooseTableIdRemapperArchive::~CommandChooseTableIdRemapperArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandChooseTableIdRemapperArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandChooseTableIdRemapperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete table_id_mapper_;
  if (this != internal_default_instance()) delete formula_rewrite_command_for_undo_;
}

void CommandChooseTableIdRemapperArchive::ArenaDtor(void* object) {
  CommandChooseTableIdRemapperArchive* _this = reinterpret_cast< CommandChooseTableIdRemapperArchive* >(object);
  (void)_this;
}
void CommandChooseTableIdRemapperArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandChooseTableIdRemapperArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandChooseTableIdRemapperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandChooseTableIdRemapperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(table_id_mapper_ != nullptr);
      table_id_mapper_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(formula_rewrite_command_for_undo_ != nullptr);
      formula_rewrite_command_for_undo_->Clear();
    }
  }
  apply_and_clear_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandChooseTableIdRemapperArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.MultiTableRemapperArchive table_id_mapper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id_mapper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference formula_rewrite_command_for_undo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_rewrite_command_for_undo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool apply_and_clear = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_apply_and_clear(&has_bits);
          apply_and_clear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandChooseTableIdRemapperArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandChooseTableIdRemapperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TST.MultiTableRemapperArchive table_id_mapper = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::table_id_mapper(this), target, stream);
  }

  // optional .TSP.Reference formula_rewrite_command_for_undo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::formula_rewrite_command_for_undo(this), target, stream);
  }

  // required bool apply_and_clear = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_apply_and_clear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandChooseTableIdRemapperArchive)
  return target;
}

size_t CommandChooseTableIdRemapperArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandChooseTableIdRemapperArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_table_id_mapper()) {
    // required .TST.MultiTableRemapperArchive table_id_mapper = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_id_mapper_);
  }

  if (_internal_has_apply_and_clear()) {
    // required bool apply_and_clear = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandChooseTableIdRemapperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandChooseTableIdRemapperArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TST.MultiTableRemapperArchive table_id_mapper = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_id_mapper_);

    // required bool apply_and_clear = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference formula_rewrite_command_for_undo = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formula_rewrite_command_for_undo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandChooseTableIdRemapperArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandChooseTableIdRemapperArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandChooseTableIdRemapperArchive::GetClassData() const { return &_class_data_; }

void CommandChooseTableIdRemapperArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandChooseTableIdRemapperArchive *>(to)->MergeFrom(
      static_cast<const CommandChooseTableIdRemapperArchive &>(from));
}


void CommandChooseTableIdRemapperArchive::MergeFrom(const CommandChooseTableIdRemapperArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandChooseTableIdRemapperArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_table_id_mapper()->::TST::MultiTableRemapperArchive::MergeFrom(from._internal_table_id_mapper());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_formula_rewrite_command_for_undo()->::TSP::Reference::MergeFrom(from._internal_formula_rewrite_command_for_undo());
    }
    if (cached_has_bits & 0x00000008u) {
      apply_and_clear_ = from.apply_and_clear_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandChooseTableIdRemapperArchive::CopyFrom(const CommandChooseTableIdRemapperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandChooseTableIdRemapperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChooseTableIdRemapperArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_table_id_mapper()) {
    if (!table_id_mapper_->IsInitialized()) return false;
  }
  if (_internal_has_formula_rewrite_command_for_undo()) {
    if (!formula_rewrite_command_for_undo_->IsInitialized()) return false;
  }
  return true;
}

void CommandChooseTableIdRemapperArchive::InternalSwap(CommandChooseTableIdRemapperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandChooseTableIdRemapperArchive, apply_and_clear_)
      + sizeof(CommandChooseTableIdRemapperArchive::apply_and_clear_)
      - PROTOBUF_FIELD_OFFSET(CommandChooseTableIdRemapperArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandChooseTableIdRemapperArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[64]);
}

// ===================================================================

class CommandCategorySetGroupingColumnsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandCategorySetGroupingColumnsArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_enabled_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_old_enabled_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TST::GroupColumnListArchive& new_grouping_columns(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_new_grouping_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::GroupColumnListArchive& old_grouping_columns(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_old_grouping_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_restore_base_order(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_undo_restore_base_order(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_restore_view_order(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_undo_restore_view_order(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TST::SummaryModelGroupByChangeStateArchive& summary_change_state(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_summary_change_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TST::SummaryModelGroupByChangeStateArchive& undo_summary_change_state(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_undo_summary_change_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TST::ColumnAggregateListArchive& new_column_aggregates(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_new_column_aggregates(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TST::ColumnAggregateListArchive& old_column_aggregates(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_old_column_aggregates(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& undo_set_enabled_rewrite_command(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_undo_set_enabled_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& undo_set_columns_rewrite_command(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_undo_set_columns_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_force_restore_all_states(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& undo_cell_diff_map(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_undo_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0003f803) ^ 0x0003f803) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandCategorySetGroupingColumnsArchive::_Internal::super(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->super_;
}
const ::TST::GroupColumnListArchive&
CommandCategorySetGroupingColumnsArchive::_Internal::new_grouping_columns(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->new_grouping_columns_;
}
const ::TST::GroupColumnListArchive&
CommandCategorySetGroupingColumnsArchive::_Internal::old_grouping_columns(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->old_grouping_columns_;
}
const ::TST::SummaryModelGroupByChangeStateArchive&
CommandCategorySetGroupingColumnsArchive::_Internal::summary_change_state(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->summary_change_state_;
}
const ::TST::SummaryModelGroupByChangeStateArchive&
CommandCategorySetGroupingColumnsArchive::_Internal::undo_summary_change_state(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->undo_summary_change_state_;
}
const ::TST::ColumnAggregateListArchive&
CommandCategorySetGroupingColumnsArchive::_Internal::new_column_aggregates(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->new_column_aggregates_;
}
const ::TST::ColumnAggregateListArchive&
CommandCategorySetGroupingColumnsArchive::_Internal::old_column_aggregates(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->old_column_aggregates_;
}
const ::TSP::Reference&
CommandCategorySetGroupingColumnsArchive::_Internal::undo_set_enabled_rewrite_command(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->undo_set_enabled_rewrite_command_;
}
const ::TSP::Reference&
CommandCategorySetGroupingColumnsArchive::_Internal::undo_set_columns_rewrite_command(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->undo_set_columns_rewrite_command_;
}
const ::TSP::Reference&
CommandCategorySetGroupingColumnsArchive::_Internal::cell_diff_map(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->cell_diff_map_;
}
const ::TSP::Reference&
CommandCategorySetGroupingColumnsArchive::_Internal::undo_cell_diff_map(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->undo_cell_diff_map_;
}
void CommandCategorySetGroupingColumnsArchive::clear_new_grouping_columns() {
  if (new_grouping_columns_ != nullptr) new_grouping_columns_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandCategorySetGroupingColumnsArchive::clear_old_grouping_columns() {
  if (old_grouping_columns_ != nullptr) old_grouping_columns_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandCategorySetGroupingColumnsArchive::clear_base_row_order() {
  base_row_order_.Clear();
}
void CommandCategorySetGroupingColumnsArchive::clear_undo_base_row_order() {
  undo_base_row_order_.Clear();
}
void CommandCategorySetGroupingColumnsArchive::clear_view_row_order() {
  view_row_order_.Clear();
}
void CommandCategorySetGroupingColumnsArchive::clear_undo_view_row_order() {
  undo_view_row_order_.Clear();
}
void CommandCategorySetGroupingColumnsArchive::clear_collapse_state() {
  collapse_state_.Clear();
}
void CommandCategorySetGroupingColumnsArchive::clear_undo_collapse_state() {
  undo_collapse_state_.Clear();
}
void CommandCategorySetGroupingColumnsArchive::clear_summary_change_state() {
  if (summary_change_state_ != nullptr) summary_change_state_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandCategorySetGroupingColumnsArchive::clear_undo_summary_change_state() {
  if (undo_summary_change_state_ != nullptr) undo_summary_change_state_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CommandCategorySetGroupingColumnsArchive::clear_new_column_aggregates() {
  if (new_column_aggregates_ != nullptr) new_column_aggregates_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void CommandCategorySetGroupingColumnsArchive::clear_old_column_aggregates() {
  if (old_column_aggregates_ != nullptr) old_column_aggregates_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void CommandCategorySetGroupingColumnsArchive::clear_undo_set_enabled_rewrite_command() {
  if (undo_set_enabled_rewrite_command_ != nullptr) undo_set_enabled_rewrite_command_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void CommandCategorySetGroupingColumnsArchive::clear_undo_set_columns_rewrite_command() {
  if (undo_set_columns_rewrite_command_ != nullptr) undo_set_columns_rewrite_command_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void CommandCategorySetGroupingColumnsArchive::clear_cell_diff_map() {
  if (cell_diff_map_ != nullptr) cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void CommandCategorySetGroupingColumnsArchive::clear_undo_cell_diff_map() {
  if (undo_cell_diff_map_ != nullptr) undo_cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
CommandCategorySetGroupingColumnsArchive::CommandCategorySetGroupingColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  base_row_order_(arena),
  undo_base_row_order_(arena),
  view_row_order_(arena),
  undo_view_row_order_(arena),
  collapse_state_(arena),
  undo_collapse_state_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandCategorySetGroupingColumnsArchive)
}
CommandCategorySetGroupingColumnsArchive::CommandCategorySetGroupingColumnsArchive(const CommandCategorySetGroupingColumnsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      base_row_order_(from.base_row_order_),
      undo_base_row_order_(from.undo_base_row_order_),
      view_row_order_(from.view_row_order_),
      undo_view_row_order_(from.undo_view_row_order_),
      collapse_state_(from.collapse_state_),
      undo_collapse_state_(from.undo_collapse_state_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_new_grouping_columns()) {
    new_grouping_columns_ = new ::TST::GroupColumnListArchive(*from.new_grouping_columns_);
  } else {
    new_grouping_columns_ = nullptr;
  }
  if (from._internal_has_old_grouping_columns()) {
    old_grouping_columns_ = new ::TST::GroupColumnListArchive(*from.old_grouping_columns_);
  } else {
    old_grouping_columns_ = nullptr;
  }
  if (from._internal_has_summary_change_state()) {
    summary_change_state_ = new ::TST::SummaryModelGroupByChangeStateArchive(*from.summary_change_state_);
  } else {
    summary_change_state_ = nullptr;
  }
  if (from._internal_has_undo_summary_change_state()) {
    undo_summary_change_state_ = new ::TST::SummaryModelGroupByChangeStateArchive(*from.undo_summary_change_state_);
  } else {
    undo_summary_change_state_ = nullptr;
  }
  if (from._internal_has_new_column_aggregates()) {
    new_column_aggregates_ = new ::TST::ColumnAggregateListArchive(*from.new_column_aggregates_);
  } else {
    new_column_aggregates_ = nullptr;
  }
  if (from._internal_has_old_column_aggregates()) {
    old_column_aggregates_ = new ::TST::ColumnAggregateListArchive(*from.old_column_aggregates_);
  } else {
    old_column_aggregates_ = nullptr;
  }
  if (from._internal_has_undo_set_enabled_rewrite_command()) {
    undo_set_enabled_rewrite_command_ = new ::TSP::Reference(*from.undo_set_enabled_rewrite_command_);
  } else {
    undo_set_enabled_rewrite_command_ = nullptr;
  }
  if (from._internal_has_undo_set_columns_rewrite_command()) {
    undo_set_columns_rewrite_command_ = new ::TSP::Reference(*from.undo_set_columns_rewrite_command_);
  } else {
    undo_set_columns_rewrite_command_ = nullptr;
  }
  if (from._internal_has_cell_diff_map()) {
    cell_diff_map_ = new ::TSP::Reference(*from.cell_diff_map_);
  } else {
    cell_diff_map_ = nullptr;
  }
  if (from._internal_has_undo_cell_diff_map()) {
    undo_cell_diff_map_ = new ::TSP::Reference(*from.undo_cell_diff_map_);
  } else {
    undo_cell_diff_map_ = nullptr;
  }
  ::memcpy(&new_enabled_changing_, &from.new_enabled_changing_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_restore_all_states_) -
    reinterpret_cast<char*>(&new_enabled_changing_)) + sizeof(force_restore_all_states_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandCategorySetGroupingColumnsArchive)
}

inline void CommandCategorySetGroupingColumnsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&force_restore_all_states_) -
    reinterpret_cast<char*>(&super_)) + sizeof(force_restore_all_states_));
}

CommandCategorySetGroupingColumnsArchive::~CommandCategorySetGroupingColumnsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandCategorySetGroupingColumnsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandCategorySetGroupingColumnsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete new_grouping_columns_;
  if (this != internal_default_instance()) delete old_grouping_columns_;
  if (this != internal_default_instance()) delete summary_change_state_;
  if (this != internal_default_instance()) delete undo_summary_change_state_;
  if (this != internal_default_instance()) delete new_column_aggregates_;
  if (this != internal_default_instance()) delete old_column_aggregates_;
  if (this != internal_default_instance()) delete undo_set_enabled_rewrite_command_;
  if (this != internal_default_instance()) delete undo_set_columns_rewrite_command_;
  if (this != internal_default_instance()) delete cell_diff_map_;
  if (this != internal_default_instance()) delete undo_cell_diff_map_;
}

void CommandCategorySetGroupingColumnsArchive::ArenaDtor(void* object) {
  CommandCategorySetGroupingColumnsArchive* _this = reinterpret_cast< CommandCategorySetGroupingColumnsArchive* >(object);
  (void)_this;
}
void CommandCategorySetGroupingColumnsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandCategorySetGroupingColumnsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandCategorySetGroupingColumnsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandCategorySetGroupingColumnsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  base_row_order_.Clear();
  undo_base_row_order_.Clear();
  view_row_order_.Clear();
  undo_view_row_order_.Clear();
  collapse_state_.Clear();
  undo_collapse_state_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(new_grouping_columns_ != nullptr);
      new_grouping_columns_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(old_grouping_columns_ != nullptr);
      old_grouping_columns_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(summary_change_state_ != nullptr);
      summary_change_state_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(undo_summary_change_state_ != nullptr);
      undo_summary_change_state_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(new_column_aggregates_ != nullptr);
      new_column_aggregates_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(old_column_aggregates_ != nullptr);
      old_column_aggregates_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(undo_set_enabled_rewrite_command_ != nullptr);
      undo_set_enabled_rewrite_command_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(undo_set_columns_rewrite_command_ != nullptr);
      undo_set_columns_rewrite_command_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(cell_diff_map_ != nullptr);
      cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(undo_cell_diff_map_ != nullptr);
      undo_cell_diff_map_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&new_enabled_changing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&restore_view_order_) -
        reinterpret_cast<char*>(&new_enabled_changing_)) + sizeof(restore_view_order_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&undo_restore_view_order_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&force_restore_all_states_) -
        reinterpret_cast<char*>(&undo_restore_view_order_)) + sizeof(force_restore_all_states_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandCategorySetGroupingColumnsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 new_enabled_changing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_new_enabled_changing(&has_bits);
          new_enabled_changing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 old_enabled_changing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_old_enabled_changing(&has_bits);
          old_enabled_changing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.GroupColumnListArchive new_grouping_columns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_grouping_columns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.GroupColumnListArchive old_grouping_columns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_grouping_columns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool restore_base_order = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_restore_base_order(&has_bits);
          restore_base_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID base_row_order = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_base_row_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool undo_restore_base_order = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_undo_restore_base_order(&has_bits);
          undo_restore_base_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID undo_base_row_order = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_base_row_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool restore_view_order = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_restore_view_order(&has_bits);
          restore_view_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID view_row_order = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_view_row_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool undo_restore_view_order = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_undo_restore_view_order(&has_bits);
          undo_restore_view_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID undo_view_row_order = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_view_row_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID collapse_state = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collapse_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID undo_collapse_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_collapse_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TST.SummaryModelGroupByChangeStateArchive summary_change_state = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary_change_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.SummaryModelGroupByChangeStateArchive undo_summary_change_state = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_summary_change_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.ColumnAggregateListArchive new_column_aggregates = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_column_aggregates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.ColumnAggregateListArchive old_column_aggregates = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_column_aggregates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_set_enabled_rewrite_command = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_set_enabled_rewrite_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_set_columns_rewrite_command = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_set_columns_rewrite_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool force_restore_all_states = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_force_restore_all_states(&has_bits);
          force_restore_all_states_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference cell_diff_map = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_cell_diff_map = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandCategorySetGroupingColumnsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandCategorySetGroupingColumnsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required int32 new_enabled_changing = 2;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_new_enabled_changing(), target);
  }

  // required int32 old_enabled_changing = 3;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_old_enabled_changing(), target);
  }

  // required .TST.GroupColumnListArchive new_grouping_columns = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::new_grouping_columns(this), target, stream);
  }

  // optional .TST.GroupColumnListArchive old_grouping_columns = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::old_grouping_columns(this), target, stream);
  }

  // required bool restore_base_order = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_restore_base_order(), target);
  }

  // repeated .TSP.UUID base_row_order = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_base_row_order_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_base_row_order(i), target, stream);
  }

  // required bool undo_restore_base_order = 8;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_undo_restore_base_order(), target);
  }

  // repeated .TSP.UUID undo_base_row_order = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_undo_base_row_order_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_undo_base_row_order(i), target, stream);
  }

  // required bool restore_view_order = 10;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_restore_view_order(), target);
  }

  // repeated .TSP.UUID view_row_order = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_view_row_order_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_view_row_order(i), target, stream);
  }

  // required bool undo_restore_view_order = 12;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_undo_restore_view_order(), target);
  }

  // repeated .TSP.UUID undo_view_row_order = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_undo_view_row_order_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_undo_view_row_order(i), target, stream);
  }

  // repeated .TSP.UUID collapse_state = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collapse_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_collapse_state(i), target, stream);
  }

  // repeated .TSP.UUID undo_collapse_state = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_undo_collapse_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_undo_collapse_state(i), target, stream);
  }

  // optional .TST.SummaryModelGroupByChangeStateArchive summary_change_state = 16;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::summary_change_state(this), target, stream);
  }

  // optional .TST.SummaryModelGroupByChangeStateArchive undo_summary_change_state = 17;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::undo_summary_change_state(this), target, stream);
  }

  // optional .TST.ColumnAggregateListArchive new_column_aggregates = 18;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::new_column_aggregates(this), target, stream);
  }

  // optional .TST.ColumnAggregateListArchive old_column_aggregates = 19;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::old_column_aggregates(this), target, stream);
  }

  // optional .TSP.Reference undo_set_enabled_rewrite_command = 20;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::undo_set_enabled_rewrite_command(this), target, stream);
  }

  // optional .TSP.Reference undo_set_columns_rewrite_command = 21;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::undo_set_columns_rewrite_command(this), target, stream);
  }

  // required bool force_restore_all_states = 22;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_force_restore_all_states(), target);
  }

  // optional .TSP.Reference cell_diff_map = 23;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::cell_diff_map(this), target, stream);
  }

  // optional .TSP.Reference undo_cell_diff_map = 24;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::undo_cell_diff_map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandCategorySetGroupingColumnsArchive)
  return target;
}

size_t CommandCategorySetGroupingColumnsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandCategorySetGroupingColumnsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_new_grouping_columns()) {
    // required .TST.GroupColumnListArchive new_grouping_columns = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_grouping_columns_);
  }

  if (_internal_has_new_enabled_changing()) {
    // required int32 new_enabled_changing = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_new_enabled_changing());
  }

  if (_internal_has_old_enabled_changing()) {
    // required int32 old_enabled_changing = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_old_enabled_changing());
  }

  if (_internal_has_restore_base_order()) {
    // required bool restore_base_order = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_undo_restore_base_order()) {
    // required bool undo_restore_base_order = 8;
    total_size += 1 + 1;
  }

  if (_internal_has_restore_view_order()) {
    // required bool restore_view_order = 10;
    total_size += 1 + 1;
  }

  if (_internal_has_undo_restore_view_order()) {
    // required bool undo_restore_view_order = 12;
    total_size += 1 + 1;
  }

  if (_internal_has_force_restore_all_states()) {
    // required bool force_restore_all_states = 22;
    total_size += 2 + 1;
  }

  return total_size;
}
size_t CommandCategorySetGroupingColumnsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandCategorySetGroupingColumnsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0003f803) ^ 0x0003f803) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TST.GroupColumnListArchive new_grouping_columns = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_grouping_columns_);

    // required int32 new_enabled_changing = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_new_enabled_changing());

    // required int32 old_enabled_changing = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_old_enabled_changing());

    // required bool restore_base_order = 6;
    total_size += 1 + 1;

    // required bool undo_restore_base_order = 8;
    total_size += 1 + 1;

    // required bool restore_view_order = 10;
    total_size += 1 + 1;

    // required bool undo_restore_view_order = 12;
    total_size += 1 + 1;

    // required bool force_restore_all_states = 22;
    total_size += 2 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID base_row_order = 7;
  total_size += 1UL * this->_internal_base_row_order_size();
  for (const auto& msg : this->base_row_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID undo_base_row_order = 9;
  total_size += 1UL * this->_internal_undo_base_row_order_size();
  for (const auto& msg : this->undo_base_row_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID view_row_order = 11;
  total_size += 1UL * this->_internal_view_row_order_size();
  for (const auto& msg : this->view_row_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID undo_view_row_order = 13;
  total_size += 1UL * this->_internal_undo_view_row_order_size();
  for (const auto& msg : this->undo_view_row_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID collapse_state = 14;
  total_size += 1UL * this->_internal_collapse_state_size();
  for (const auto& msg : this->collapse_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID undo_collapse_state = 15;
  total_size += 1UL * this->_internal_undo_collapse_state_size();
  for (const auto& msg : this->undo_collapse_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    // optional .TST.GroupColumnListArchive old_grouping_columns = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_grouping_columns_);
    }

    // optional .TST.SummaryModelGroupByChangeStateArchive summary_change_state = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *summary_change_state_);
    }

    // optional .TST.SummaryModelGroupByChangeStateArchive undo_summary_change_state = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_summary_change_state_);
    }

    // optional .TST.ColumnAggregateListArchive new_column_aggregates = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_column_aggregates_);
    }

    // optional .TST.ColumnAggregateListArchive old_column_aggregates = 19;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_column_aggregates_);
    }

    // optional .TSP.Reference undo_set_enabled_rewrite_command = 20;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_set_enabled_rewrite_command_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .TSP.Reference undo_set_columns_rewrite_command = 21;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_set_columns_rewrite_command_);
    }

    // optional .TSP.Reference cell_diff_map = 23;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_diff_map_);
    }

    // optional .TSP.Reference undo_cell_diff_map = 24;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_cell_diff_map_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandCategorySetGroupingColumnsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandCategorySetGroupingColumnsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandCategorySetGroupingColumnsArchive::GetClassData() const { return &_class_data_; }

void CommandCategorySetGroupingColumnsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandCategorySetGroupingColumnsArchive *>(to)->MergeFrom(
      static_cast<const CommandCategorySetGroupingColumnsArchive &>(from));
}


void CommandCategorySetGroupingColumnsArchive::MergeFrom(const CommandCategorySetGroupingColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandCategorySetGroupingColumnsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  base_row_order_.MergeFrom(from.base_row_order_);
  undo_base_row_order_.MergeFrom(from.undo_base_row_order_);
  view_row_order_.MergeFrom(from.view_row_order_);
  undo_view_row_order_.MergeFrom(from.undo_view_row_order_);
  collapse_state_.MergeFrom(from.collapse_state_);
  undo_collapse_state_.MergeFrom(from.undo_collapse_state_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_new_grouping_columns()->::TST::GroupColumnListArchive::MergeFrom(from._internal_new_grouping_columns());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_old_grouping_columns()->::TST::GroupColumnListArchive::MergeFrom(from._internal_old_grouping_columns());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_summary_change_state()->::TST::SummaryModelGroupByChangeStateArchive::MergeFrom(from._internal_summary_change_state());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_undo_summary_change_state()->::TST::SummaryModelGroupByChangeStateArchive::MergeFrom(from._internal_undo_summary_change_state());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_new_column_aggregates()->::TST::ColumnAggregateListArchive::MergeFrom(from._internal_new_column_aggregates());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_old_column_aggregates()->::TST::ColumnAggregateListArchive::MergeFrom(from._internal_old_column_aggregates());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_undo_set_enabled_rewrite_command()->::TSP::Reference::MergeFrom(from._internal_undo_set_enabled_rewrite_command());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_undo_set_columns_rewrite_command()->::TSP::Reference::MergeFrom(from._internal_undo_set_columns_rewrite_command());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_undo_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_undo_cell_diff_map());
    }
    if (cached_has_bits & 0x00000800u) {
      new_enabled_changing_ = from.new_enabled_changing_;
    }
    if (cached_has_bits & 0x00001000u) {
      old_enabled_changing_ = from.old_enabled_changing_;
    }
    if (cached_has_bits & 0x00002000u) {
      restore_base_order_ = from.restore_base_order_;
    }
    if (cached_has_bits & 0x00004000u) {
      undo_restore_base_order_ = from.undo_restore_base_order_;
    }
    if (cached_has_bits & 0x00008000u) {
      restore_view_order_ = from.restore_view_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      undo_restore_view_order_ = from.undo_restore_view_order_;
    }
    if (cached_has_bits & 0x00020000u) {
      force_restore_all_states_ = from.force_restore_all_states_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandCategorySetGroupingColumnsArchive::CopyFrom(const CommandCategorySetGroupingColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandCategorySetGroupingColumnsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandCategorySetGroupingColumnsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(base_row_order_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(undo_base_row_order_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(view_row_order_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(undo_view_row_order_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(collapse_state_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(undo_collapse_state_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_new_grouping_columns()) {
    if (!new_grouping_columns_->IsInitialized()) return false;
  }
  if (_internal_has_old_grouping_columns()) {
    if (!old_grouping_columns_->IsInitialized()) return false;
  }
  if (_internal_has_summary_change_state()) {
    if (!summary_change_state_->IsInitialized()) return false;
  }
  if (_internal_has_undo_summary_change_state()) {
    if (!undo_summary_change_state_->IsInitialized()) return false;
  }
  if (_internal_has_new_column_aggregates()) {
    if (!new_column_aggregates_->IsInitialized()) return false;
  }
  if (_internal_has_old_column_aggregates()) {
    if (!old_column_aggregates_->IsInitialized()) return false;
  }
  if (_internal_has_undo_set_enabled_rewrite_command()) {
    if (!undo_set_enabled_rewrite_command_->IsInitialized()) return false;
  }
  if (_internal_has_undo_set_columns_rewrite_command()) {
    if (!undo_set_columns_rewrite_command_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_cell_diff_map()) {
    if (!undo_cell_diff_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandCategorySetGroupingColumnsArchive::InternalSwap(CommandCategorySetGroupingColumnsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  base_row_order_.InternalSwap(&other->base_row_order_);
  undo_base_row_order_.InternalSwap(&other->undo_base_row_order_);
  view_row_order_.InternalSwap(&other->view_row_order_);
  undo_view_row_order_.InternalSwap(&other->undo_view_row_order_);
  collapse_state_.InternalSwap(&other->collapse_state_);
  undo_collapse_state_.InternalSwap(&other->undo_collapse_state_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandCategorySetGroupingColumnsArchive, force_restore_all_states_)
      + sizeof(CommandCategorySetGroupingColumnsArchive::force_restore_all_states_)
      - PROTOBUF_FIELD_OFFSET(CommandCategorySetGroupingColumnsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandCategorySetGroupingColumnsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[65]);
}

// ===================================================================

class FormulaEditingCommandGroupArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaEditingCommandGroupArchive>()._has_bits_);
  static const ::TSK::ProgressiveCommandGroupArchive& super(const FormulaEditingCommandGroupArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_undoselectionvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_undoselectionstart(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_undoselectionlength(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_undoactivetoken(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_redoselectionvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_redoselectionstart(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_redoselectionlength(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_redoactivetoken(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001ff) ^ 0x000001ff) != 0;
  }
};

const ::TSK::ProgressiveCommandGroupArchive&
FormulaEditingCommandGroupArchive::_Internal::super(const FormulaEditingCommandGroupArchive* msg) {
  return *msg->super_;
}
void FormulaEditingCommandGroupArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FormulaEditingCommandGroupArchive::FormulaEditingCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.FormulaEditingCommandGroupArchive)
}
FormulaEditingCommandGroupArchive::FormulaEditingCommandGroupArchive(const FormulaEditingCommandGroupArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::ProgressiveCommandGroupArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&undoselectionstart_, &from.undoselectionstart_,
    static_cast<size_t>(reinterpret_cast<char*>(&redoactivetoken_) -
    reinterpret_cast<char*>(&undoselectionstart_)) + sizeof(redoactivetoken_));
  // @@protoc_insertion_point(copy_constructor:TST.FormulaEditingCommandGroupArchive)
}

inline void FormulaEditingCommandGroupArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&redoactivetoken_) -
    reinterpret_cast<char*>(&super_)) + sizeof(redoactivetoken_));
}

FormulaEditingCommandGroupArchive::~FormulaEditingCommandGroupArchive() {
  // @@protoc_insertion_point(destructor:TST.FormulaEditingCommandGroupArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FormulaEditingCommandGroupArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void FormulaEditingCommandGroupArchive::ArenaDtor(void* object) {
  FormulaEditingCommandGroupArchive* _this = reinterpret_cast< FormulaEditingCommandGroupArchive* >(object);
  (void)_this;
}
void FormulaEditingCommandGroupArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormulaEditingCommandGroupArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormulaEditingCommandGroupArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FormulaEditingCommandGroupArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&undoselectionstart_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&redoselectionlength_) -
        reinterpret_cast<char*>(&undoselectionstart_)) + sizeof(redoselectionlength_));
  }
  redoactivetoken_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaEditingCommandGroupArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.ProgressiveCommandGroupArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool undoSelectionValid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_undoselectionvalid(&has_bits);
          undoselectionvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 undoSelectionStart = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_undoselectionstart(&has_bits);
          undoselectionstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 undoSelectionLength = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_undoselectionlength(&has_bits);
          undoselectionlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 undoActiveToken = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_undoactivetoken(&has_bits);
          undoactivetoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool redoSelectionValid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_redoselectionvalid(&has_bits);
          redoselectionvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 redoSelectionStart = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_redoselectionstart(&has_bits);
          redoselectionstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 redoSelectionLength = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_redoselectionlength(&has_bits);
          redoselectionlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 redoActiveToken = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_redoactivetoken(&has_bits);
          redoactivetoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormulaEditingCommandGroupArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FormulaEditingCommandGroupArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.ProgressiveCommandGroupArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required bool undoSelectionValid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_undoselectionvalid(), target);
  }

  // required uint32 undoSelectionStart = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_undoselectionstart(), target);
  }

  // required uint32 undoSelectionLength = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_undoselectionlength(), target);
  }

  // required uint32 undoActiveToken = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_undoactivetoken(), target);
  }

  // required bool redoSelectionValid = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_redoselectionvalid(), target);
  }

  // required uint32 redoSelectionStart = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_redoselectionstart(), target);
  }

  // required uint32 redoSelectionLength = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_redoselectionlength(), target);
  }

  // required uint32 redoActiveToken = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_redoactivetoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FormulaEditingCommandGroupArchive)
  return target;
}

size_t FormulaEditingCommandGroupArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.FormulaEditingCommandGroupArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.ProgressiveCommandGroupArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_undoselectionstart()) {
    // required uint32 undoSelectionStart = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_undoselectionstart());
  }

  if (_internal_has_undoselectionlength()) {
    // required uint32 undoSelectionLength = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_undoselectionlength());
  }

  if (_internal_has_undoselectionvalid()) {
    // required bool undoSelectionValid = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_redoselectionvalid()) {
    // required bool redoSelectionValid = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_undoactivetoken()) {
    // required uint32 undoActiveToken = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_undoactivetoken());
  }

  if (_internal_has_redoselectionstart()) {
    // required uint32 redoSelectionStart = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_redoselectionstart());
  }

  if (_internal_has_redoselectionlength()) {
    // required uint32 redoSelectionLength = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_redoselectionlength());
  }

  if (_internal_has_redoactivetoken()) {
    // required uint32 redoActiveToken = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_redoactivetoken());
  }

  return total_size;
}
size_t FormulaEditingCommandGroupArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FormulaEditingCommandGroupArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required .TSK.ProgressiveCommandGroupArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 undoSelectionStart = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_undoselectionstart());

    // required uint32 undoSelectionLength = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_undoselectionlength());

    // required bool undoSelectionValid = 2;
    total_size += 1 + 1;

    // required bool redoSelectionValid = 6;
    total_size += 1 + 1;

    // required uint32 undoActiveToken = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_undoactivetoken());

    // required uint32 redoSelectionStart = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_redoselectionstart());

    // required uint32 redoSelectionLength = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_redoselectionlength());

    // required uint32 redoActiveToken = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_redoactivetoken());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaEditingCommandGroupArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FormulaEditingCommandGroupArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaEditingCommandGroupArchive::GetClassData() const { return &_class_data_; }

void FormulaEditingCommandGroupArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FormulaEditingCommandGroupArchive *>(to)->MergeFrom(
      static_cast<const FormulaEditingCommandGroupArchive &>(from));
}


void FormulaEditingCommandGroupArchive::MergeFrom(const FormulaEditingCommandGroupArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.FormulaEditingCommandGroupArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::ProgressiveCommandGroupArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      undoselectionstart_ = from.undoselectionstart_;
    }
    if (cached_has_bits & 0x00000004u) {
      undoselectionlength_ = from.undoselectionlength_;
    }
    if (cached_has_bits & 0x00000008u) {
      undoselectionvalid_ = from.undoselectionvalid_;
    }
    if (cached_has_bits & 0x00000010u) {
      redoselectionvalid_ = from.redoselectionvalid_;
    }
    if (cached_has_bits & 0x00000020u) {
      undoactivetoken_ = from.undoactivetoken_;
    }
    if (cached_has_bits & 0x00000040u) {
      redoselectionstart_ = from.redoselectionstart_;
    }
    if (cached_has_bits & 0x00000080u) {
      redoselectionlength_ = from.redoselectionlength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_redoactivetoken(from._internal_redoactivetoken());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaEditingCommandGroupArchive::CopyFrom(const FormulaEditingCommandGroupArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FormulaEditingCommandGroupArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaEditingCommandGroupArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void FormulaEditingCommandGroupArchive::InternalSwap(FormulaEditingCommandGroupArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaEditingCommandGroupArchive, redoactivetoken_)
      + sizeof(FormulaEditingCommandGroupArchive::redoactivetoken_)
      - PROTOBUF_FIELD_OFFSET(FormulaEditingCommandGroupArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaEditingCommandGroupArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[66]);
}

// ===================================================================

class FormulaEditingCommandSelectionBehaviorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaEditingCommandSelectionBehaviorArchive>()._has_bits_);
  static const ::TSK::CommandSelectionBehaviorArchive& super(const FormulaEditingCommandSelectionBehaviorArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_undoactivetoken(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_redoactivetoken(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandSelectionBehaviorArchive&
FormulaEditingCommandSelectionBehaviorArchive::_Internal::super(const FormulaEditingCommandSelectionBehaviorArchive* msg) {
  return *msg->super_;
}
void FormulaEditingCommandSelectionBehaviorArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FormulaEditingCommandSelectionBehaviorArchive::FormulaEditingCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.FormulaEditingCommandSelectionBehaviorArchive)
}
FormulaEditingCommandSelectionBehaviorArchive::FormulaEditingCommandSelectionBehaviorArchive(const FormulaEditingCommandSelectionBehaviorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandSelectionBehaviorArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&undoactivetoken_, &from.undoactivetoken_,
    static_cast<size_t>(reinterpret_cast<char*>(&redoactivetoken_) -
    reinterpret_cast<char*>(&undoactivetoken_)) + sizeof(redoactivetoken_));
  // @@protoc_insertion_point(copy_constructor:TST.FormulaEditingCommandSelectionBehaviorArchive)
}

inline void FormulaEditingCommandSelectionBehaviorArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&redoactivetoken_) -
    reinterpret_cast<char*>(&super_)) + sizeof(redoactivetoken_));
}

FormulaEditingCommandSelectionBehaviorArchive::~FormulaEditingCommandSelectionBehaviorArchive() {
  // @@protoc_insertion_point(destructor:TST.FormulaEditingCommandSelectionBehaviorArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FormulaEditingCommandSelectionBehaviorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void FormulaEditingCommandSelectionBehaviorArchive::ArenaDtor(void* object) {
  FormulaEditingCommandSelectionBehaviorArchive* _this = reinterpret_cast< FormulaEditingCommandSelectionBehaviorArchive* >(object);
  (void)_this;
}
void FormulaEditingCommandSelectionBehaviorArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormulaEditingCommandSelectionBehaviorArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormulaEditingCommandSelectionBehaviorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FormulaEditingCommandSelectionBehaviorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&undoactivetoken_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&redoactivetoken_) -
        reinterpret_cast<char*>(&undoactivetoken_)) + sizeof(redoactivetoken_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaEditingCommandSelectionBehaviorArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandSelectionBehaviorArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 undoActiveToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_undoactivetoken(&has_bits);
          undoactivetoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 redoActiveToken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_redoactivetoken(&has_bits);
          redoactivetoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormulaEditingCommandSelectionBehaviorArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FormulaEditingCommandSelectionBehaviorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandSelectionBehaviorArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 undoActiveToken = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_undoactivetoken(), target);
  }

  // optional uint32 redoActiveToken = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_redoactivetoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FormulaEditingCommandSelectionBehaviorArchive)
  return target;
}

size_t FormulaEditingCommandSelectionBehaviorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FormulaEditingCommandSelectionBehaviorArchive)
  size_t total_size = 0;

  // required .TSK.CommandSelectionBehaviorArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 undoActiveToken = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_undoactivetoken());
    }

    // optional uint32 redoActiveToken = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_redoactivetoken());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaEditingCommandSelectionBehaviorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FormulaEditingCommandSelectionBehaviorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaEditingCommandSelectionBehaviorArchive::GetClassData() const { return &_class_data_; }

void FormulaEditingCommandSelectionBehaviorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FormulaEditingCommandSelectionBehaviorArchive *>(to)->MergeFrom(
      static_cast<const FormulaEditingCommandSelectionBehaviorArchive &>(from));
}


void FormulaEditingCommandSelectionBehaviorArchive::MergeFrom(const FormulaEditingCommandSelectionBehaviorArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.FormulaEditingCommandSelectionBehaviorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandSelectionBehaviorArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      undoactivetoken_ = from.undoactivetoken_;
    }
    if (cached_has_bits & 0x00000004u) {
      redoactivetoken_ = from.redoactivetoken_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaEditingCommandSelectionBehaviorArchive::CopyFrom(const FormulaEditingCommandSelectionBehaviorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FormulaEditingCommandSelectionBehaviorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaEditingCommandSelectionBehaviorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void FormulaEditingCommandSelectionBehaviorArchive::InternalSwap(FormulaEditingCommandSelectionBehaviorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaEditingCommandSelectionBehaviorArchive, redoactivetoken_)
      + sizeof(FormulaEditingCommandSelectionBehaviorArchive::redoactivetoken_)
      - PROTOBUF_FIELD_OFFSET(FormulaEditingCommandSelectionBehaviorArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaEditingCommandSelectionBehaviorArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[67]);
}

// ===================================================================

class TableCommandSelectionBehaviorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableCommandSelectionBehaviorArchive>()._has_bits_);
  static const ::TSK::CommandSelectionBehaviorArchive& super(const TableCommandSelectionBehaviorArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& table_info(const TableCommandSelectionBehaviorArchive* msg);
  static void set_has_table_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& last_column_uid_hit_by_tap(const TableCommandSelectionBehaviorArchive* msg);
  static void set_has_last_column_uid_hit_by_tap(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_invalidate_comments(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandSelectionBehaviorArchive&
TableCommandSelectionBehaviorArchive::_Internal::super(const TableCommandSelectionBehaviorArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
TableCommandSelectionBehaviorArchive::_Internal::table_info(const TableCommandSelectionBehaviorArchive* msg) {
  return *msg->table_info_;
}
const ::TSP::UUID&
TableCommandSelectionBehaviorArchive::_Internal::last_column_uid_hit_by_tap(const TableCommandSelectionBehaviorArchive* msg) {
  return *msg->last_column_uid_hit_by_tap_;
}
void TableCommandSelectionBehaviorArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TableCommandSelectionBehaviorArchive::clear_table_info() {
  if (table_info_ != nullptr) table_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TableCommandSelectionBehaviorArchive::clear_last_column_uid_hit_by_tap() {
  if (last_column_uid_hit_by_tap_ != nullptr) last_column_uid_hit_by_tap_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TableCommandSelectionBehaviorArchive::TableCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TableCommandSelectionBehaviorArchive)
}
TableCommandSelectionBehaviorArchive::TableCommandSelectionBehaviorArchive(const TableCommandSelectionBehaviorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandSelectionBehaviorArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_table_info()) {
    table_info_ = new ::TSP::Reference(*from.table_info_);
  } else {
    table_info_ = nullptr;
  }
  if (from._internal_has_last_column_uid_hit_by_tap()) {
    last_column_uid_hit_by_tap_ = new ::TSP::UUID(*from.last_column_uid_hit_by_tap_);
  } else {
    last_column_uid_hit_by_tap_ = nullptr;
  }
  invalidate_comments_ = from.invalidate_comments_;
  // @@protoc_insertion_point(copy_constructor:TST.TableCommandSelectionBehaviorArchive)
}

inline void TableCommandSelectionBehaviorArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&invalidate_comments_) -
    reinterpret_cast<char*>(&super_)) + sizeof(invalidate_comments_));
}

TableCommandSelectionBehaviorArchive::~TableCommandSelectionBehaviorArchive() {
  // @@protoc_insertion_point(destructor:TST.TableCommandSelectionBehaviorArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableCommandSelectionBehaviorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete table_info_;
  if (this != internal_default_instance()) delete last_column_uid_hit_by_tap_;
}

void TableCommandSelectionBehaviorArchive::ArenaDtor(void* object) {
  TableCommandSelectionBehaviorArchive* _this = reinterpret_cast< TableCommandSelectionBehaviorArchive* >(object);
  (void)_this;
}
void TableCommandSelectionBehaviorArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableCommandSelectionBehaviorArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableCommandSelectionBehaviorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableCommandSelectionBehaviorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(table_info_ != nullptr);
      table_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(last_column_uid_hit_by_tap_ != nullptr);
      last_column_uid_hit_by_tap_->Clear();
    }
  }
  invalidate_comments_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableCommandSelectionBehaviorArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandSelectionBehaviorArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference table_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID last_column_uid_hit_by_tap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_column_uid_hit_by_tap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 invalidate_comments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_invalidate_comments(&has_bits);
          invalidate_comments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableCommandSelectionBehaviorArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableCommandSelectionBehaviorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandSelectionBehaviorArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference table_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::table_info(this), target, stream);
  }

  // optional .TSP.UUID last_column_uid_hit_by_tap = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::last_column_uid_hit_by_tap(this), target, stream);
  }

  // optional uint32 invalidate_comments = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_invalidate_comments(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableCommandSelectionBehaviorArchive)
  return target;
}

size_t TableCommandSelectionBehaviorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableCommandSelectionBehaviorArchive)
  size_t total_size = 0;

  // required .TSK.CommandSelectionBehaviorArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference table_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_info_);
    }

    // optional .TSP.UUID last_column_uid_hit_by_tap = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_column_uid_hit_by_tap_);
    }

    // optional uint32 invalidate_comments = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_invalidate_comments());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableCommandSelectionBehaviorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableCommandSelectionBehaviorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableCommandSelectionBehaviorArchive::GetClassData() const { return &_class_data_; }

void TableCommandSelectionBehaviorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableCommandSelectionBehaviorArchive *>(to)->MergeFrom(
      static_cast<const TableCommandSelectionBehaviorArchive &>(from));
}


void TableCommandSelectionBehaviorArchive::MergeFrom(const TableCommandSelectionBehaviorArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TableCommandSelectionBehaviorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandSelectionBehaviorArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_table_info()->::TSP::Reference::MergeFrom(from._internal_table_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_last_column_uid_hit_by_tap()->::TSP::UUID::MergeFrom(from._internal_last_column_uid_hit_by_tap());
    }
    if (cached_has_bits & 0x00000008u) {
      invalidate_comments_ = from.invalidate_comments_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableCommandSelectionBehaviorArchive::CopyFrom(const TableCommandSelectionBehaviorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableCommandSelectionBehaviorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableCommandSelectionBehaviorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_table_info()) {
    if (!table_info_->IsInitialized()) return false;
  }
  if (_internal_has_last_column_uid_hit_by_tap()) {
    if (!last_column_uid_hit_by_tap_->IsInitialized()) return false;
  }
  return true;
}

void TableCommandSelectionBehaviorArchive::InternalSwap(TableCommandSelectionBehaviorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableCommandSelectionBehaviorArchive, invalidate_comments_)
      + sizeof(TableCommandSelectionBehaviorArchive::invalidate_comments_)
      - PROTOBUF_FIELD_OFFSET(TableCommandSelectionBehaviorArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableCommandSelectionBehaviorArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[68]);
}

// ===================================================================

class CommandApplyCellCommentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandApplyCellCommentArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandApplyCellCommentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDCoordArchive& cell_uid(const CommandApplyCellCommentArchive* msg);
  static void set_has_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& old_comment_storage(const CommandApplyCellCommentArchive* msg);
  static void set_has_old_comment_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& new_comment_storage(const CommandApplyCellCommentArchive* msg);
  static void set_has_new_comment_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_forward_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inverse_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandApplyCellCommentArchive::_Internal::super(const CommandApplyCellCommentArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDCoordArchive&
CommandApplyCellCommentArchive::_Internal::cell_uid(const CommandApplyCellCommentArchive* msg) {
  return *msg->cell_uid_;
}
const ::TSP::Reference&
CommandApplyCellCommentArchive::_Internal::old_comment_storage(const CommandApplyCellCommentArchive* msg) {
  return *msg->old_comment_storage_;
}
const ::TSP::Reference&
CommandApplyCellCommentArchive::_Internal::new_comment_storage(const CommandApplyCellCommentArchive* msg) {
  return *msg->new_comment_storage_;
}
void CommandApplyCellCommentArchive::clear_cell_uid() {
  if (cell_uid_ != nullptr) cell_uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandApplyCellCommentArchive::clear_old_comment_storage() {
  if (old_comment_storage_ != nullptr) old_comment_storage_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandApplyCellCommentArchive::clear_new_comment_storage() {
  if (new_comment_storage_ != nullptr) new_comment_storage_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandApplyCellCommentArchive::CommandApplyCellCommentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandApplyCellCommentArchive)
}
CommandApplyCellCommentArchive::CommandApplyCellCommentArchive(const CommandApplyCellCommentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_cell_uid()) {
    cell_uid_ = new ::TSP::UUIDCoordArchive(*from.cell_uid_);
  } else {
    cell_uid_ = nullptr;
  }
  if (from._internal_has_old_comment_storage()) {
    old_comment_storage_ = new ::TSP::Reference(*from.old_comment_storage_);
  } else {
    old_comment_storage_ = nullptr;
  }
  if (from._internal_has_new_comment_storage()) {
    new_comment_storage_ = new ::TSP::Reference(*from.new_comment_storage_);
  } else {
    new_comment_storage_ = nullptr;
  }
  ::memcpy(&forward_variant_, &from.forward_variant_,
    static_cast<size_t>(reinterpret_cast<char*>(&inverse_variant_) -
    reinterpret_cast<char*>(&forward_variant_)) + sizeof(inverse_variant_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandApplyCellCommentArchive)
}

inline void CommandApplyCellCommentArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inverse_variant_) -
    reinterpret_cast<char*>(&super_)) + sizeof(inverse_variant_));
}

CommandApplyCellCommentArchive::~CommandApplyCellCommentArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandApplyCellCommentArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandApplyCellCommentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete cell_uid_;
  if (this != internal_default_instance()) delete old_comment_storage_;
  if (this != internal_default_instance()) delete new_comment_storage_;
}

void CommandApplyCellCommentArchive::ArenaDtor(void* object) {
  CommandApplyCellCommentArchive* _this = reinterpret_cast< CommandApplyCellCommentArchive* >(object);
  (void)_this;
}
void CommandApplyCellCommentArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandApplyCellCommentArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandApplyCellCommentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandApplyCellCommentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_uid_ != nullptr);
      cell_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(old_comment_storage_ != nullptr);
      old_comment_storage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(new_comment_storage_ != nullptr);
      new_comment_storage_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&forward_variant_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inverse_variant_) -
        reinterpret_cast<char*>(&forward_variant_)) + sizeof(inverse_variant_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandApplyCellCommentArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDCoordArchive cell_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_comment_storage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_comment_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference new_comment_storage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_comment_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.CommentCommandVariant forward_variant = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::CommentCommandVariant_IsValid(val))) {
            _internal_set_forward_variant(static_cast<::TSD::CommentCommandVariant>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSD.CommentCommandVariant inverse_variant = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::CommentCommandVariant_IsValid(val))) {
            _internal_set_inverse_variant(static_cast<::TSD::CommentCommandVariant>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandApplyCellCommentArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandApplyCellCommentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUIDCoordArchive cell_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cell_uid(this), target, stream);
  }

  // optional .TSP.Reference old_comment_storage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::old_comment_storage(this), target, stream);
  }

  // optional .TSP.Reference new_comment_storage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::new_comment_storage(this), target, stream);
  }

  // optional .TSD.CommentCommandVariant forward_variant = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_forward_variant(), target);
  }

  // optional .TSD.CommentCommandVariant inverse_variant = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_inverse_variant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandApplyCellCommentArchive)
  return target;
}

size_t CommandApplyCellCommentArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandApplyCellCommentArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_cell_uid()) {
    // required .TSP.UUIDCoordArchive cell_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_uid_);
  }

  return total_size;
}
size_t CommandApplyCellCommentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandApplyCellCommentArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUIDCoordArchive cell_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_uid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional .TSP.Reference old_comment_storage = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_comment_storage_);
    }

    // optional .TSP.Reference new_comment_storage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_comment_storage_);
    }

    // optional .TSD.CommentCommandVariant forward_variant = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_forward_variant());
    }

    // optional .TSD.CommentCommandVariant inverse_variant = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inverse_variant());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandApplyCellCommentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandApplyCellCommentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandApplyCellCommentArchive::GetClassData() const { return &_class_data_; }

void CommandApplyCellCommentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandApplyCellCommentArchive *>(to)->MergeFrom(
      static_cast<const CommandApplyCellCommentArchive &>(from));
}


void CommandApplyCellCommentArchive::MergeFrom(const CommandApplyCellCommentArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandApplyCellCommentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(from._internal_cell_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_old_comment_storage()->::TSP::Reference::MergeFrom(from._internal_old_comment_storage());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_new_comment_storage()->::TSP::Reference::MergeFrom(from._internal_new_comment_storage());
    }
    if (cached_has_bits & 0x00000010u) {
      forward_variant_ = from.forward_variant_;
    }
    if (cached_has_bits & 0x00000020u) {
      inverse_variant_ = from.inverse_variant_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandApplyCellCommentArchive::CopyFrom(const CommandApplyCellCommentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandApplyCellCommentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyCellCommentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uid()) {
    if (!cell_uid_->IsInitialized()) return false;
  }
  if (_internal_has_old_comment_storage()) {
    if (!old_comment_storage_->IsInitialized()) return false;
  }
  if (_internal_has_new_comment_storage()) {
    if (!new_comment_storage_->IsInitialized()) return false;
  }
  return true;
}

void CommandApplyCellCommentArchive::InternalSwap(CommandApplyCellCommentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandApplyCellCommentArchive, inverse_variant_)
      + sizeof(CommandApplyCellCommentArchive::inverse_variant_)
      - PROTOBUF_FIELD_OFFSET(CommandApplyCellCommentArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandApplyCellCommentArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[69]);
}

// ===================================================================

class CommandSetFormulaTokenizationArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetFormulaTokenizationArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSetFormulaTokenizationArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tokenization(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSetFormulaTokenizationArchive::_Internal::super(const CommandSetFormulaTokenizationArchive* msg) {
  return *msg->super_;
}
void CommandSetFormulaTokenizationArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CommandSetFormulaTokenizationArchive::CommandSetFormulaTokenizationArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetFormulaTokenizationArchive)
}
CommandSetFormulaTokenizationArchive::CommandSetFormulaTokenizationArchive(const CommandSetFormulaTokenizationArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  tokenization_ = from.tokenization_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetFormulaTokenizationArchive)
}

inline void CommandSetFormulaTokenizationArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tokenization_) -
    reinterpret_cast<char*>(&super_)) + sizeof(tokenization_));
}

CommandSetFormulaTokenizationArchive::~CommandSetFormulaTokenizationArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetFormulaTokenizationArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetFormulaTokenizationArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetFormulaTokenizationArchive::ArenaDtor(void* object) {
  CommandSetFormulaTokenizationArchive* _this = reinterpret_cast< CommandSetFormulaTokenizationArchive* >(object);
  (void)_this;
}
void CommandSetFormulaTokenizationArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetFormulaTokenizationArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetFormulaTokenizationArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetFormulaTokenizationArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  tokenization_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetFormulaTokenizationArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool tokenization = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tokenization(&has_bits);
          tokenization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetFormulaTokenizationArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetFormulaTokenizationArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required bool tokenization = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_tokenization(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetFormulaTokenizationArchive)
  return target;
}

size_t CommandSetFormulaTokenizationArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetFormulaTokenizationArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_tokenization()) {
    // required bool tokenization = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetFormulaTokenizationArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetFormulaTokenizationArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required bool tokenization = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetFormulaTokenizationArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetFormulaTokenizationArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetFormulaTokenizationArchive::GetClassData() const { return &_class_data_; }

void CommandSetFormulaTokenizationArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetFormulaTokenizationArchive *>(to)->MergeFrom(
      static_cast<const CommandSetFormulaTokenizationArchive &>(from));
}


void CommandSetFormulaTokenizationArchive::MergeFrom(const CommandSetFormulaTokenizationArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetFormulaTokenizationArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      tokenization_ = from.tokenization_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetFormulaTokenizationArchive::CopyFrom(const CommandSetFormulaTokenizationArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetFormulaTokenizationArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFormulaTokenizationArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetFormulaTokenizationArchive::InternalSwap(CommandSetFormulaTokenizationArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetFormulaTokenizationArchive, tokenization_)
      + sizeof(CommandSetFormulaTokenizationArchive::tokenization_)
      - PROTOBUF_FIELD_OFFSET(CommandSetFormulaTokenizationArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetFormulaTokenizationArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[70]);
}

// ===================================================================

class CommandSetFilterSetTypeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetFilterSetTypeArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetFilterSetTypeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_filter_set_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_new_filter_set_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetFilterSetTypeArchive::_Internal::super(const CommandSetFilterSetTypeArchive* msg) {
  return *msg->super_;
}
void CommandSetFilterSetTypeArchive::clear_rollback_uid_list() {
  rollback_uid_list_.Clear();
}
CommandSetFilterSetTypeArchive::CommandSetFilterSetTypeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rollback_uid_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetFilterSetTypeArchive)
}
CommandSetFilterSetTypeArchive::CommandSetFilterSetTypeArchive(const CommandSetFilterSetTypeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rollback_uid_list_(from.rollback_uid_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&old_filter_set_type_, &from.old_filter_set_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_filter_set_type_) -
    reinterpret_cast<char*>(&old_filter_set_type_)) + sizeof(new_filter_set_type_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetFilterSetTypeArchive)
}

inline void CommandSetFilterSetTypeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_filter_set_type_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_filter_set_type_));
}

CommandSetFilterSetTypeArchive::~CommandSetFilterSetTypeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetFilterSetTypeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetFilterSetTypeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandSetFilterSetTypeArchive::ArenaDtor(void* object) {
  CommandSetFilterSetTypeArchive* _this = reinterpret_cast< CommandSetFilterSetTypeArchive* >(object);
  (void)_this;
}
void CommandSetFilterSetTypeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetFilterSetTypeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetFilterSetTypeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetFilterSetTypeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rollback_uid_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&old_filter_set_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_filter_set_type_) -
        reinterpret_cast<char*>(&old_filter_set_type_)) + sizeof(new_filter_set_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetFilterSetTypeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.FilterSetArchive.FilterSetType old_filter_set_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::FilterSetArchive_FilterSetType_IsValid(val))) {
            _internal_set_old_filter_set_type(static_cast<::TST::FilterSetArchive_FilterSetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .TST.FilterSetArchive.FilterSetType new_filter_set_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::FilterSetArchive_FilterSetType_IsValid(val))) {
            _internal_set_new_filter_set_type(static_cast<::TST::FilterSetArchive_FilterSetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID rollback_uid_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rollback_uid_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetFilterSetTypeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetFilterSetTypeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TST.FilterSetArchive.FilterSetType old_filter_set_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_old_filter_set_type(), target);
  }

  // required .TST.FilterSetArchive.FilterSetType new_filter_set_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_new_filter_set_type(), target);
  }

  // repeated .TSP.UUID rollback_uid_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rollback_uid_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_rollback_uid_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetFilterSetTypeArchive)
  return target;
}

size_t CommandSetFilterSetTypeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetFilterSetTypeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_new_filter_set_type()) {
    // required .TST.FilterSetArchive.FilterSetType new_filter_set_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_new_filter_set_type());
  }

  return total_size;
}
size_t CommandSetFilterSetTypeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetFilterSetTypeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TST.FilterSetArchive.FilterSetType new_filter_set_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_new_filter_set_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID rollback_uid_list = 4;
  total_size += 1UL * this->_internal_rollback_uid_list_size();
  for (const auto& msg : this->rollback_uid_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TST.FilterSetArchive.FilterSetType old_filter_set_type = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_old_filter_set_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetFilterSetTypeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetFilterSetTypeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetFilterSetTypeArchive::GetClassData() const { return &_class_data_; }

void CommandSetFilterSetTypeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetFilterSetTypeArchive *>(to)->MergeFrom(
      static_cast<const CommandSetFilterSetTypeArchive &>(from));
}


void CommandSetFilterSetTypeArchive::MergeFrom(const CommandSetFilterSetTypeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetFilterSetTypeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rollback_uid_list_.MergeFrom(from.rollback_uid_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      old_filter_set_type_ = from.old_filter_set_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      new_filter_set_type_ = from.new_filter_set_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetFilterSetTypeArchive::CopyFrom(const CommandSetFilterSetTypeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetFilterSetTypeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFilterSetTypeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rollback_uid_list_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetFilterSetTypeArchive::InternalSwap(CommandSetFilterSetTypeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rollback_uid_list_.InternalSwap(&other->rollback_uid_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetFilterSetTypeArchive, new_filter_set_type_)
      + sizeof(CommandSetFilterSetTypeArchive::new_filter_set_type_)
      - PROTOBUF_FIELD_OFFSET(CommandSetFilterSetTypeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetFilterSetTypeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[71]);
}

// ===================================================================

class CommandSetTextStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetTextStyleArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetTextStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandSetTextStyleArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& inverse_cell_diff_map(const CommandSetTextStyleArchive* msg);
  static void set_has_inverse_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetTextStyleArchive::_Internal::super(const CommandSetTextStyleArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandSetTextStyleArchive::_Internal::cell_diff_map(const CommandSetTextStyleArchive* msg) {
  return *msg->cell_diff_map_;
}
const ::TSP::Reference&
CommandSetTextStyleArchive::_Internal::inverse_cell_diff_map(const CommandSetTextStyleArchive* msg) {
  return *msg->inverse_cell_diff_map_;
}
void CommandSetTextStyleArchive::clear_cell_diff_map() {
  if (cell_diff_map_ != nullptr) cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSetTextStyleArchive::clear_inverse_cell_diff_map() {
  if (inverse_cell_diff_map_ != nullptr) inverse_cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandSetTextStyleArchive::CommandSetTextStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetTextStyleArchive)
}
CommandSetTextStyleArchive::CommandSetTextStyleArchive(const CommandSetTextStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_cell_diff_map()) {
    cell_diff_map_ = new ::TSP::Reference(*from.cell_diff_map_);
  } else {
    cell_diff_map_ = nullptr;
  }
  if (from._internal_has_inverse_cell_diff_map()) {
    inverse_cell_diff_map_ = new ::TSP::Reference(*from.inverse_cell_diff_map_);
  } else {
    inverse_cell_diff_map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetTextStyleArchive)
}

inline void CommandSetTextStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inverse_cell_diff_map_) -
    reinterpret_cast<char*>(&super_)) + sizeof(inverse_cell_diff_map_));
}

CommandSetTextStyleArchive::~CommandSetTextStyleArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetTextStyleArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetTextStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete cell_diff_map_;
  if (this != internal_default_instance()) delete inverse_cell_diff_map_;
}

void CommandSetTextStyleArchive::ArenaDtor(void* object) {
  CommandSetTextStyleArchive* _this = reinterpret_cast< CommandSetTextStyleArchive* >(object);
  (void)_this;
}
void CommandSetTextStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetTextStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetTextStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetTextStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_diff_map_ != nullptr);
      cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(inverse_cell_diff_map_ != nullptr);
      inverse_cell_diff_map_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetTextStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference cell_diff_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference inverse_cell_diff_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetTextStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetTextStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference cell_diff_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cell_diff_map(this), target, stream);
  }

  // optional .TSP.Reference inverse_cell_diff_map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::inverse_cell_diff_map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetTextStyleArchive)
  return target;
}

size_t CommandSetTextStyleArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetTextStyleArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_cell_diff_map()) {
    // required .TSP.Reference cell_diff_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_diff_map_);
  }

  return total_size;
}
size_t CommandSetTextStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetTextStyleArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference cell_diff_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_diff_map_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference inverse_cell_diff_map = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inverse_cell_diff_map_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetTextStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetTextStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetTextStyleArchive::GetClassData() const { return &_class_data_; }

void CommandSetTextStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetTextStyleArchive *>(to)->MergeFrom(
      static_cast<const CommandSetTextStyleArchive &>(from));
}


void CommandSetTextStyleArchive::MergeFrom(const CommandSetTextStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetTextStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_inverse_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_inverse_cell_diff_map());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetTextStyleArchive::CopyFrom(const CommandSetTextStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetTextStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetTextStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_cell_diff_map()) {
    if (!inverse_cell_diff_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetTextStyleArchive::InternalSwap(CommandSetTextStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetTextStyleArchive, inverse_cell_diff_map_)
      + sizeof(CommandSetTextStyleArchive::inverse_cell_diff_map_)
      - PROTOBUF_FIELD_OFFSET(CommandSetTextStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetTextStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[72]);
}

// ===================================================================

class CommandSetTextStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetTextStylePropertiesArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetTextStylePropertiesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandSetTextStylePropertiesArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& inverse_cell_diff_map(const CommandSetTextStylePropertiesArchive* msg);
  static void set_has_inverse_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetTextStylePropertiesArchive::_Internal::super(const CommandSetTextStylePropertiesArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandSetTextStylePropertiesArchive::_Internal::cell_diff_map(const CommandSetTextStylePropertiesArchive* msg) {
  return *msg->cell_diff_map_;
}
const ::TSP::Reference&
CommandSetTextStylePropertiesArchive::_Internal::inverse_cell_diff_map(const CommandSetTextStylePropertiesArchive* msg) {
  return *msg->inverse_cell_diff_map_;
}
void CommandSetTextStylePropertiesArchive::clear_cell_diff_map() {
  if (cell_diff_map_ != nullptr) cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSetTextStylePropertiesArchive::clear_inverse_cell_diff_map() {
  if (inverse_cell_diff_map_ != nullptr) inverse_cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandSetTextStylePropertiesArchive::CommandSetTextStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cell_was_rich_text_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetTextStylePropertiesArchive)
}
CommandSetTextStylePropertiesArchive::CommandSetTextStylePropertiesArchive(const CommandSetTextStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cell_was_rich_text_(from.cell_was_rich_text_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_cell_diff_map()) {
    cell_diff_map_ = new ::TSP::Reference(*from.cell_diff_map_);
  } else {
    cell_diff_map_ = nullptr;
  }
  if (from._internal_has_inverse_cell_diff_map()) {
    inverse_cell_diff_map_ = new ::TSP::Reference(*from.inverse_cell_diff_map_);
  } else {
    inverse_cell_diff_map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetTextStylePropertiesArchive)
}

inline void CommandSetTextStylePropertiesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inverse_cell_diff_map_) -
    reinterpret_cast<char*>(&super_)) + sizeof(inverse_cell_diff_map_));
}

CommandSetTextStylePropertiesArchive::~CommandSetTextStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetTextStylePropertiesArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetTextStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete cell_diff_map_;
  if (this != internal_default_instance()) delete inverse_cell_diff_map_;
}

void CommandSetTextStylePropertiesArchive::ArenaDtor(void* object) {
  CommandSetTextStylePropertiesArchive* _this = reinterpret_cast< CommandSetTextStylePropertiesArchive* >(object);
  (void)_this;
}
void CommandSetTextStylePropertiesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetTextStylePropertiesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetTextStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetTextStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_was_rich_text_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_diff_map_ != nullptr);
      cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(inverse_cell_diff_map_ != nullptr);
      inverse_cell_diff_map_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetTextStylePropertiesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference cell_diff_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool cell_was_rich_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cell_was_rich_text(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_cell_was_rich_text(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference inverse_cell_diff_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetTextStylePropertiesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetTextStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference cell_diff_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cell_diff_map(this), target, stream);
  }

  // repeated bool cell_was_rich_text = 3;
  for (int i = 0, n = this->_internal_cell_was_rich_text_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_cell_was_rich_text(i), target);
  }

  // optional .TSP.Reference inverse_cell_diff_map = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::inverse_cell_diff_map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetTextStylePropertiesArchive)
  return target;
}

size_t CommandSetTextStylePropertiesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetTextStylePropertiesArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_cell_diff_map()) {
    // required .TSP.Reference cell_diff_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_diff_map_);
  }

  return total_size;
}
size_t CommandSetTextStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetTextStylePropertiesArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference cell_diff_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_diff_map_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool cell_was_rich_text = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cell_was_rich_text_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cell_was_rich_text_size());
    total_size += data_size;
  }

  // optional .TSP.Reference inverse_cell_diff_map = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inverse_cell_diff_map_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetTextStylePropertiesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetTextStylePropertiesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetTextStylePropertiesArchive::GetClassData() const { return &_class_data_; }

void CommandSetTextStylePropertiesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetTextStylePropertiesArchive *>(to)->MergeFrom(
      static_cast<const CommandSetTextStylePropertiesArchive &>(from));
}


void CommandSetTextStylePropertiesArchive::MergeFrom(const CommandSetTextStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetTextStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_was_rich_text_.MergeFrom(from.cell_was_rich_text_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_inverse_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_inverse_cell_diff_map());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetTextStylePropertiesArchive::CopyFrom(const CommandSetTextStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetTextStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetTextStylePropertiesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_cell_diff_map()) {
    if (!inverse_cell_diff_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetTextStylePropertiesArchive::InternalSwap(CommandSetTextStylePropertiesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cell_was_rich_text_.InternalSwap(&other->cell_was_rich_text_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetTextStylePropertiesArchive, inverse_cell_diff_map_)
      + sizeof(CommandSetTextStylePropertiesArchive::inverse_cell_diff_map_)
      - PROTOBUF_FIELD_OFFSET(CommandSetTextStylePropertiesArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetTextStylePropertiesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[73]);
}

// ===================================================================

class CommandJustForNotifyingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandJustForNotifyingArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandJustForNotifyingArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_change_descriptor_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandJustForNotifyingArchive::_Internal::super(const CommandJustForNotifyingArchive* msg) {
  return *msg->super_;
}
CommandJustForNotifyingArchive::CommandJustForNotifyingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandJustForNotifyingArchive)
}
CommandJustForNotifyingArchive::CommandJustForNotifyingArchive(const CommandJustForNotifyingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  change_descriptor_type_ = from.change_descriptor_type_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandJustForNotifyingArchive)
}

inline void CommandJustForNotifyingArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&change_descriptor_type_) -
    reinterpret_cast<char*>(&super_)) + sizeof(change_descriptor_type_));
}

CommandJustForNotifyingArchive::~CommandJustForNotifyingArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandJustForNotifyingArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandJustForNotifyingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandJustForNotifyingArchive::ArenaDtor(void* object) {
  CommandJustForNotifyingArchive* _this = reinterpret_cast< CommandJustForNotifyingArchive* >(object);
  (void)_this;
}
void CommandJustForNotifyingArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandJustForNotifyingArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandJustForNotifyingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandJustForNotifyingArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  change_descriptor_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandJustForNotifyingArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 change_descriptor_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_change_descriptor_type(&has_bits);
          change_descriptor_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandJustForNotifyingArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandJustForNotifyingArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required uint32 change_descriptor_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_change_descriptor_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandJustForNotifyingArchive)
  return target;
}

size_t CommandJustForNotifyingArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandJustForNotifyingArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_change_descriptor_type()) {
    // required uint32 change_descriptor_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_change_descriptor_type());
  }

  return total_size;
}
size_t CommandJustForNotifyingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandJustForNotifyingArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 change_descriptor_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_change_descriptor_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandJustForNotifyingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandJustForNotifyingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandJustForNotifyingArchive::GetClassData() const { return &_class_data_; }

void CommandJustForNotifyingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandJustForNotifyingArchive *>(to)->MergeFrom(
      static_cast<const CommandJustForNotifyingArchive &>(from));
}


void CommandJustForNotifyingArchive::MergeFrom(const CommandJustForNotifyingArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandJustForNotifyingArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      change_descriptor_type_ = from.change_descriptor_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandJustForNotifyingArchive::CopyFrom(const CommandJustForNotifyingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandJustForNotifyingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandJustForNotifyingArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandJustForNotifyingArchive::InternalSwap(CommandJustForNotifyingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandJustForNotifyingArchive, change_descriptor_type_)
      + sizeof(CommandJustForNotifyingArchive::change_descriptor_type_)
      - PROTOBUF_FIELD_OFFSET(CommandJustForNotifyingArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandJustForNotifyingArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[74]);
}

// ===================================================================

class CommandSetStorageLanguageArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetStorageLanguageArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSetStorageLanguageArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& storage(const CommandSetStorageLanguageArchive* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_location(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_range_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSWP::UndoTransaction& undo_transaction(const CommandSetStorageLanguageArchive* msg);
  static void set_has_undo_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000037) ^ 0x00000037) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSetStorageLanguageArchive::_Internal::super(const CommandSetStorageLanguageArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandSetStorageLanguageArchive::_Internal::storage(const CommandSetStorageLanguageArchive* msg) {
  return *msg->storage_;
}
const ::TSWP::UndoTransaction&
CommandSetStorageLanguageArchive::_Internal::undo_transaction(const CommandSetStorageLanguageArchive* msg) {
  return *msg->undo_transaction_;
}
void CommandSetStorageLanguageArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSetStorageLanguageArchive::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSetStorageLanguageArchive::clear_undo_transaction() {
  if (undo_transaction_ != nullptr) undo_transaction_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandSetStorageLanguageArchive::CommandSetStorageLanguageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetStorageLanguageArchive)
}
CommandSetStorageLanguageArchive::CommandSetStorageLanguageArchive(const CommandSetStorageLanguageArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_storage()) {
    storage_ = new ::TSP::Reference(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  if (from._internal_has_undo_transaction()) {
    undo_transaction_ = new ::TSWP::UndoTransaction(*from.undo_transaction_);
  } else {
    undo_transaction_ = nullptr;
  }
  ::memcpy(&range_location_, &from.range_location_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_length_) -
    reinterpret_cast<char*>(&range_location_)) + sizeof(range_length_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetStorageLanguageArchive)
}

inline void CommandSetStorageLanguageArchive::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&range_length_) -
    reinterpret_cast<char*>(&super_)) + sizeof(range_length_));
}

CommandSetStorageLanguageArchive::~CommandSetStorageLanguageArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetStorageLanguageArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetStorageLanguageArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete undo_transaction_;
}

void CommandSetStorageLanguageArchive::ArenaDtor(void* object) {
  CommandSetStorageLanguageArchive* _this = reinterpret_cast< CommandSetStorageLanguageArchive* >(object);
  (void)_this;
}
void CommandSetStorageLanguageArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetStorageLanguageArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetStorageLanguageArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetStorageLanguageArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(storage_ != nullptr);
      storage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undo_transaction_ != nullptr);
      undo_transaction_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&range_location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&range_length_) -
        reinterpret_cast<char*>(&range_location_)) + sizeof(range_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetStorageLanguageArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TST.CommandSetStorageLanguageArchive.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 range_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_range_location(&has_bits);
          range_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 range_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_range_length(&has_bits);
          range_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction undo_transaction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetStorageLanguageArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetStorageLanguageArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference storage = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage(this), target, stream);
  }

  // required string language = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CommandSetStorageLanguageArchive.language");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language(), target);
  }

  // required uint32 range_location = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_range_location(), target);
  }

  // required uint32 range_length = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_range_length(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::undo_transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetStorageLanguageArchive)
  return target;
}

size_t CommandSetStorageLanguageArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetStorageLanguageArchive)
  size_t total_size = 0;

  if (_internal_has_language()) {
    // required string language = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_storage()) {
    // required .TSP.Reference storage = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storage_);
  }

  if (_internal_has_range_location()) {
    // required uint32 range_location = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_range_location());
  }

  if (_internal_has_range_length()) {
    // required uint32 range_length = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_range_length());
  }

  return total_size;
}
size_t CommandSetStorageLanguageArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetStorageLanguageArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000037) ^ 0x00000037) == 0) {  // All required fields are present.
    // required string language = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());

    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference storage = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storage_);

    // required uint32 range_location = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_range_location());

    // required uint32 range_length = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_range_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *undo_transaction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetStorageLanguageArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetStorageLanguageArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetStorageLanguageArchive::GetClassData() const { return &_class_data_; }

void CommandSetStorageLanguageArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetStorageLanguageArchive *>(to)->MergeFrom(
      static_cast<const CommandSetStorageLanguageArchive &>(from));
}


void CommandSetStorageLanguageArchive::MergeFrom(const CommandSetStorageLanguageArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetStorageLanguageArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_storage()->::TSP::Reference::MergeFrom(from._internal_storage());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from._internal_undo_transaction());
    }
    if (cached_has_bits & 0x00000010u) {
      range_location_ = from.range_location_;
    }
    if (cached_has_bits & 0x00000020u) {
      range_length_ = from.range_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetStorageLanguageArchive::CopyFrom(const CommandSetStorageLanguageArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetStorageLanguageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetStorageLanguageArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_storage()) {
    if (!storage_->IsInitialized()) return false;
  }
  if (_internal_has_undo_transaction()) {
    if (!undo_transaction_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetStorageLanguageArchive::InternalSwap(CommandSetStorageLanguageArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, GetArenaForAllocation(),
      &other->language_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetStorageLanguageArchive, range_length_)
      + sizeof(CommandSetStorageLanguageArchive::range_length_)
      - PROTOBUF_FIELD_OFFSET(CommandSetStorageLanguageArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetStorageLanguageArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[75]);
}

// ===================================================================

class CommandSetSortOrderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetSortOrderArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetSortOrderArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::TableSortOrderArchive& old_sort_order(const CommandSetSortOrderArchive* msg);
  static void set_has_old_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::TableSortOrderArchive& new_sort_order(const CommandSetSortOrderArchive* msg);
  static void set_has_new_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetSortOrderArchive::_Internal::super(const CommandSetSortOrderArchive* msg) {
  return *msg->super_;
}
const ::TST::TableSortOrderArchive&
CommandSetSortOrderArchive::_Internal::old_sort_order(const CommandSetSortOrderArchive* msg) {
  return *msg->old_sort_order_;
}
const ::TST::TableSortOrderArchive&
CommandSetSortOrderArchive::_Internal::new_sort_order(const CommandSetSortOrderArchive* msg) {
  return *msg->new_sort_order_;
}
void CommandSetSortOrderArchive::clear_old_sort_order() {
  if (old_sort_order_ != nullptr) old_sort_order_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSetSortOrderArchive::clear_new_sort_order() {
  if (new_sort_order_ != nullptr) new_sort_order_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandSetSortOrderArchive::CommandSetSortOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetSortOrderArchive)
}
CommandSetSortOrderArchive::CommandSetSortOrderArchive(const CommandSetSortOrderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_old_sort_order()) {
    old_sort_order_ = new ::TST::TableSortOrderArchive(*from.old_sort_order_);
  } else {
    old_sort_order_ = nullptr;
  }
  if (from._internal_has_new_sort_order()) {
    new_sort_order_ = new ::TST::TableSortOrderArchive(*from.new_sort_order_);
  } else {
    new_sort_order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetSortOrderArchive)
}

inline void CommandSetSortOrderArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_sort_order_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_sort_order_));
}

CommandSetSortOrderArchive::~CommandSetSortOrderArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetSortOrderArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetSortOrderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete old_sort_order_;
  if (this != internal_default_instance()) delete new_sort_order_;
}

void CommandSetSortOrderArchive::ArenaDtor(void* object) {
  CommandSetSortOrderArchive* _this = reinterpret_cast< CommandSetSortOrderArchive* >(object);
  (void)_this;
}
void CommandSetSortOrderArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetSortOrderArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetSortOrderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetSortOrderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(old_sort_order_ != nullptr);
      old_sort_order_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(new_sort_order_ != nullptr);
      new_sort_order_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetSortOrderArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.TableSortOrderArchive old_sort_order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_sort_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.TableSortOrderArchive new_sort_order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_sort_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetSortOrderArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetSortOrderArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TST.TableSortOrderArchive old_sort_order = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::old_sort_order(this), target, stream);
  }

  // optional .TST.TableSortOrderArchive new_sort_order = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::new_sort_order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetSortOrderArchive)
  return target;
}

size_t CommandSetSortOrderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetSortOrderArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TST.TableSortOrderArchive old_sort_order = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_sort_order_);
    }

    // optional .TST.TableSortOrderArchive new_sort_order = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_sort_order_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetSortOrderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetSortOrderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetSortOrderArchive::GetClassData() const { return &_class_data_; }

void CommandSetSortOrderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetSortOrderArchive *>(to)->MergeFrom(
      static_cast<const CommandSetSortOrderArchive &>(from));
}


void CommandSetSortOrderArchive::MergeFrom(const CommandSetSortOrderArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetSortOrderArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_old_sort_order()->::TST::TableSortOrderArchive::MergeFrom(from._internal_old_sort_order());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_new_sort_order()->::TST::TableSortOrderArchive::MergeFrom(from._internal_new_sort_order());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetSortOrderArchive::CopyFrom(const CommandSetSortOrderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetSortOrderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetSortOrderArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_old_sort_order()) {
    if (!old_sort_order_->IsInitialized()) return false;
  }
  if (_internal_has_new_sort_order()) {
    if (!new_sort_order_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetSortOrderArchive::InternalSwap(CommandSetSortOrderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetSortOrderArchive, new_sort_order_)
      + sizeof(CommandSetSortOrderArchive::new_sort_order_)
      - PROTOBUF_FIELD_OFFSET(CommandSetSortOrderArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetSortOrderArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[76]);
}

// ===================================================================

class CommandRewriteSortOrderForTableResizeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteSortOrderForTableResizeArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewriteSortOrderForTableResizeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::TableSortOrderArchive& old_sort_order(const CommandRewriteSortOrderForTableResizeArchive* msg);
  static void set_has_old_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::TableSortOrderArchive& new_sort_order(const CommandRewriteSortOrderForTableResizeArchive* msg);
  static void set_has_new_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewriteSortOrderForTableResizeArchive::_Internal::super(const CommandRewriteSortOrderForTableResizeArchive* msg) {
  return *msg->super_;
}
const ::TST::TableSortOrderArchive&
CommandRewriteSortOrderForTableResizeArchive::_Internal::old_sort_order(const CommandRewriteSortOrderForTableResizeArchive* msg) {
  return *msg->old_sort_order_;
}
const ::TST::TableSortOrderArchive&
CommandRewriteSortOrderForTableResizeArchive::_Internal::new_sort_order(const CommandRewriteSortOrderForTableResizeArchive* msg) {
  return *msg->new_sort_order_;
}
void CommandRewriteSortOrderForTableResizeArchive::clear_old_sort_order() {
  if (old_sort_order_ != nullptr) old_sort_order_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandRewriteSortOrderForTableResizeArchive::clear_new_sort_order() {
  if (new_sort_order_ != nullptr) new_sort_order_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandRewriteSortOrderForTableResizeArchive::CommandRewriteSortOrderForTableResizeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteSortOrderForTableResizeArchive)
}
CommandRewriteSortOrderForTableResizeArchive::CommandRewriteSortOrderForTableResizeArchive(const CommandRewriteSortOrderForTableResizeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_old_sort_order()) {
    old_sort_order_ = new ::TST::TableSortOrderArchive(*from.old_sort_order_);
  } else {
    old_sort_order_ = nullptr;
  }
  if (from._internal_has_new_sort_order()) {
    new_sort_order_ = new ::TST::TableSortOrderArchive(*from.new_sort_order_);
  } else {
    new_sort_order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteSortOrderForTableResizeArchive)
}

inline void CommandRewriteSortOrderForTableResizeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_sort_order_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_sort_order_));
}

CommandRewriteSortOrderForTableResizeArchive::~CommandRewriteSortOrderForTableResizeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteSortOrderForTableResizeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandRewriteSortOrderForTableResizeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete old_sort_order_;
  if (this != internal_default_instance()) delete new_sort_order_;
}

void CommandRewriteSortOrderForTableResizeArchive::ArenaDtor(void* object) {
  CommandRewriteSortOrderForTableResizeArchive* _this = reinterpret_cast< CommandRewriteSortOrderForTableResizeArchive* >(object);
  (void)_this;
}
void CommandRewriteSortOrderForTableResizeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandRewriteSortOrderForTableResizeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandRewriteSortOrderForTableResizeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteSortOrderForTableResizeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(old_sort_order_ != nullptr);
      old_sort_order_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(new_sort_order_ != nullptr);
      new_sort_order_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteSortOrderForTableResizeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.TableSortOrderArchive old_sort_order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_sort_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.TableSortOrderArchive new_sort_order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_sort_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRewriteSortOrderForTableResizeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteSortOrderForTableResizeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TST.TableSortOrderArchive old_sort_order = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::old_sort_order(this), target, stream);
  }

  // optional .TST.TableSortOrderArchive new_sort_order = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::new_sort_order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteSortOrderForTableResizeArchive)
  return target;
}

size_t CommandRewriteSortOrderForTableResizeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteSortOrderForTableResizeArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TST.TableSortOrderArchive old_sort_order = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_sort_order_);
    }

    // optional .TST.TableSortOrderArchive new_sort_order = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_sort_order_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteSortOrderForTableResizeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandRewriteSortOrderForTableResizeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteSortOrderForTableResizeArchive::GetClassData() const { return &_class_data_; }

void CommandRewriteSortOrderForTableResizeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandRewriteSortOrderForTableResizeArchive *>(to)->MergeFrom(
      static_cast<const CommandRewriteSortOrderForTableResizeArchive &>(from));
}


void CommandRewriteSortOrderForTableResizeArchive::MergeFrom(const CommandRewriteSortOrderForTableResizeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteSortOrderForTableResizeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_old_sort_order()->::TST::TableSortOrderArchive::MergeFrom(from._internal_old_sort_order());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_new_sort_order()->::TST::TableSortOrderArchive::MergeFrom(from._internal_new_sort_order());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteSortOrderForTableResizeArchive::CopyFrom(const CommandRewriteSortOrderForTableResizeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteSortOrderForTableResizeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteSortOrderForTableResizeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_old_sort_order()) {
    if (!old_sort_order_->IsInitialized()) return false;
  }
  if (_internal_has_new_sort_order()) {
    if (!new_sort_order_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteSortOrderForTableResizeArchive::InternalSwap(CommandRewriteSortOrderForTableResizeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewriteSortOrderForTableResizeArchive, new_sort_order_)
      + sizeof(CommandRewriteSortOrderForTableResizeArchive::new_sort_order_)
      - PROTOBUF_FIELD_OFFSET(CommandRewriteSortOrderForTableResizeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteSortOrderForTableResizeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[77]);
}

// ===================================================================

class CommandRewriteSortOrderForRewriteSpecArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteSortOrderForRewriteSpecArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewriteSortOrderForRewriteSpecArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::FormulaRewriteSpecArchive& rewrite_spec(const CommandRewriteSortOrderForRewriteSpecArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::TableSortOrderArchive& old_sort_order(const CommandRewriteSortOrderForRewriteSpecArchive* msg);
  static void set_has_old_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::TableSortOrderArchive& new_sort_order(const CommandRewriteSortOrderForRewriteSpecArchive* msg);
  static void set_has_new_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewriteSortOrderForRewriteSpecArchive::_Internal::super(const CommandRewriteSortOrderForRewriteSpecArchive* msg) {
  return *msg->super_;
}
const ::TSCE::FormulaRewriteSpecArchive&
CommandRewriteSortOrderForRewriteSpecArchive::_Internal::rewrite_spec(const CommandRewriteSortOrderForRewriteSpecArchive* msg) {
  return *msg->rewrite_spec_;
}
const ::TST::TableSortOrderArchive&
CommandRewriteSortOrderForRewriteSpecArchive::_Internal::old_sort_order(const CommandRewriteSortOrderForRewriteSpecArchive* msg) {
  return *msg->old_sort_order_;
}
const ::TST::TableSortOrderArchive&
CommandRewriteSortOrderForRewriteSpecArchive::_Internal::new_sort_order(const CommandRewriteSortOrderForRewriteSpecArchive* msg) {
  return *msg->new_sort_order_;
}
void CommandRewriteSortOrderForRewriteSpecArchive::clear_rewrite_spec() {
  if (rewrite_spec_ != nullptr) rewrite_spec_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandRewriteSortOrderForRewriteSpecArchive::clear_old_sort_order() {
  if (old_sort_order_ != nullptr) old_sort_order_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandRewriteSortOrderForRewriteSpecArchive::clear_new_sort_order() {
  if (new_sort_order_ != nullptr) new_sort_order_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandRewriteSortOrderForRewriteSpecArchive::CommandRewriteSortOrderForRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteSortOrderForRewriteSpecArchive)
}
CommandRewriteSortOrderForRewriteSpecArchive::CommandRewriteSortOrderForRewriteSpecArchive(const CommandRewriteSortOrderForRewriteSpecArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_rewrite_spec()) {
    rewrite_spec_ = new ::TSCE::FormulaRewriteSpecArchive(*from.rewrite_spec_);
  } else {
    rewrite_spec_ = nullptr;
  }
  if (from._internal_has_old_sort_order()) {
    old_sort_order_ = new ::TST::TableSortOrderArchive(*from.old_sort_order_);
  } else {
    old_sort_order_ = nullptr;
  }
  if (from._internal_has_new_sort_order()) {
    new_sort_order_ = new ::TST::TableSortOrderArchive(*from.new_sort_order_);
  } else {
    new_sort_order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteSortOrderForRewriteSpecArchive)
}

inline void CommandRewriteSortOrderForRewriteSpecArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_sort_order_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_sort_order_));
}

CommandRewriteSortOrderForRewriteSpecArchive::~CommandRewriteSortOrderForRewriteSpecArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteSortOrderForRewriteSpecArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandRewriteSortOrderForRewriteSpecArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete rewrite_spec_;
  if (this != internal_default_instance()) delete old_sort_order_;
  if (this != internal_default_instance()) delete new_sort_order_;
}

void CommandRewriteSortOrderForRewriteSpecArchive::ArenaDtor(void* object) {
  CommandRewriteSortOrderForRewriteSpecArchive* _this = reinterpret_cast< CommandRewriteSortOrderForRewriteSpecArchive* >(object);
  (void)_this;
}
void CommandRewriteSortOrderForRewriteSpecArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandRewriteSortOrderForRewriteSpecArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandRewriteSortOrderForRewriteSpecArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteSortOrderForRewriteSpecArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rewrite_spec_ != nullptr);
      rewrite_spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(old_sort_order_ != nullptr);
      old_sort_order_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(new_sort_order_ != nullptr);
      new_sort_order_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteSortOrderForRewriteSpecArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.TableSortOrderArchive old_sort_order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_sort_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.TableSortOrderArchive new_sort_order = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_sort_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRewriteSortOrderForRewriteSpecArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteSortOrderForRewriteSpecArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rewrite_spec(this), target, stream);
  }

  // optional .TST.TableSortOrderArchive old_sort_order = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::old_sort_order(this), target, stream);
  }

  // optional .TST.TableSortOrderArchive new_sort_order = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::new_sort_order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteSortOrderForRewriteSpecArchive)
  return target;
}

size_t CommandRewriteSortOrderForRewriteSpecArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewriteSortOrderForRewriteSpecArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_rewrite_spec()) {
    // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewrite_spec_);
  }

  return total_size;
}
size_t CommandRewriteSortOrderForRewriteSpecArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteSortOrderForRewriteSpecArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewrite_spec_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .TST.TableSortOrderArchive old_sort_order = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_sort_order_);
    }

    // optional .TST.TableSortOrderArchive new_sort_order = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_sort_order_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteSortOrderForRewriteSpecArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandRewriteSortOrderForRewriteSpecArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteSortOrderForRewriteSpecArchive::GetClassData() const { return &_class_data_; }

void CommandRewriteSortOrderForRewriteSpecArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandRewriteSortOrderForRewriteSpecArchive *>(to)->MergeFrom(
      static_cast<const CommandRewriteSortOrderForRewriteSpecArchive &>(from));
}


void CommandRewriteSortOrderForRewriteSpecArchive::MergeFrom(const CommandRewriteSortOrderForRewriteSpecArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteSortOrderForRewriteSpecArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rewrite_spec()->::TSCE::FormulaRewriteSpecArchive::MergeFrom(from._internal_rewrite_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_old_sort_order()->::TST::TableSortOrderArchive::MergeFrom(from._internal_old_sort_order());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_new_sort_order()->::TST::TableSortOrderArchive::MergeFrom(from._internal_new_sort_order());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteSortOrderForRewriteSpecArchive::CopyFrom(const CommandRewriteSortOrderForRewriteSpecArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteSortOrderForRewriteSpecArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteSortOrderForRewriteSpecArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!rewrite_spec_->IsInitialized()) return false;
  }
  if (_internal_has_old_sort_order()) {
    if (!old_sort_order_->IsInitialized()) return false;
  }
  if (_internal_has_new_sort_order()) {
    if (!new_sort_order_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteSortOrderForRewriteSpecArchive::InternalSwap(CommandRewriteSortOrderForRewriteSpecArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewriteSortOrderForRewriteSpecArchive, new_sort_order_)
      + sizeof(CommandRewriteSortOrderForRewriteSpecArchive::new_sort_order_)
      - PROTOBUF_FIELD_OFFSET(CommandRewriteSortOrderForRewriteSpecArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteSortOrderForRewriteSpecArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[78]);
}

// ===================================================================

class CommandSetFilterSetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetFilterSetArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetFilterSetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& new_filter_set(const CommandSetFilterSetArchive* msg);
  static void set_has_new_filter_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& old_filter_set(const CommandSetFilterSetArchive* msg);
  static void set_has_old_filter_set(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetFilterSetArchive::_Internal::super(const CommandSetFilterSetArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandSetFilterSetArchive::_Internal::new_filter_set(const CommandSetFilterSetArchive* msg) {
  return *msg->new_filter_set_;
}
const ::TSP::Reference&
CommandSetFilterSetArchive::_Internal::old_filter_set(const CommandSetFilterSetArchive* msg) {
  return *msg->old_filter_set_;
}
void CommandSetFilterSetArchive::clear_new_filter_set() {
  if (new_filter_set_ != nullptr) new_filter_set_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSetFilterSetArchive::clear_old_filter_set() {
  if (old_filter_set_ != nullptr) old_filter_set_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSetFilterSetArchive::clear_rollback_uid_list() {
  rollback_uid_list_.Clear();
}
CommandSetFilterSetArchive::CommandSetFilterSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rollback_uid_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetFilterSetArchive)
}
CommandSetFilterSetArchive::CommandSetFilterSetArchive(const CommandSetFilterSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rollback_uid_list_(from.rollback_uid_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_new_filter_set()) {
    new_filter_set_ = new ::TSP::Reference(*from.new_filter_set_);
  } else {
    new_filter_set_ = nullptr;
  }
  if (from._internal_has_old_filter_set()) {
    old_filter_set_ = new ::TSP::Reference(*from.old_filter_set_);
  } else {
    old_filter_set_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetFilterSetArchive)
}

inline void CommandSetFilterSetArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_filter_set_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_filter_set_));
}

CommandSetFilterSetArchive::~CommandSetFilterSetArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetFilterSetArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetFilterSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete new_filter_set_;
  if (this != internal_default_instance()) delete old_filter_set_;
}

void CommandSetFilterSetArchive::ArenaDtor(void* object) {
  CommandSetFilterSetArchive* _this = reinterpret_cast< CommandSetFilterSetArchive* >(object);
  (void)_this;
}
void CommandSetFilterSetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetFilterSetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetFilterSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetFilterSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rollback_uid_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(new_filter_set_ != nullptr);
      new_filter_set_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(old_filter_set_ != nullptr);
      old_filter_set_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetFilterSetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference new_filter_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_filter_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_filter_set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_filter_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID rollback_uid_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rollback_uid_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetFilterSetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetFilterSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference new_filter_set = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::new_filter_set(this), target, stream);
  }

  // optional .TSP.Reference old_filter_set = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::old_filter_set(this), target, stream);
  }

  // repeated .TSP.UUID rollback_uid_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rollback_uid_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_rollback_uid_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetFilterSetArchive)
  return target;
}

size_t CommandSetFilterSetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetFilterSetArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_new_filter_set()) {
    // required .TSP.Reference new_filter_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_filter_set_);
  }

  return total_size;
}
size_t CommandSetFilterSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetFilterSetArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference new_filter_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_filter_set_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID rollback_uid_list = 4;
  total_size += 1UL * this->_internal_rollback_uid_list_size();
  for (const auto& msg : this->rollback_uid_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference old_filter_set = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_filter_set_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetFilterSetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetFilterSetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetFilterSetArchive::GetClassData() const { return &_class_data_; }

void CommandSetFilterSetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetFilterSetArchive *>(to)->MergeFrom(
      static_cast<const CommandSetFilterSetArchive &>(from));
}


void CommandSetFilterSetArchive::MergeFrom(const CommandSetFilterSetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetFilterSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rollback_uid_list_.MergeFrom(from.rollback_uid_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_new_filter_set()->::TSP::Reference::MergeFrom(from._internal_new_filter_set());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_old_filter_set()->::TSP::Reference::MergeFrom(from._internal_old_filter_set());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetFilterSetArchive::CopyFrom(const CommandSetFilterSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetFilterSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFilterSetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rollback_uid_list_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_new_filter_set()) {
    if (!new_filter_set_->IsInitialized()) return false;
  }
  if (_internal_has_old_filter_set()) {
    if (!old_filter_set_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetFilterSetArchive::InternalSwap(CommandSetFilterSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rollback_uid_list_.InternalSwap(&other->rollback_uid_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetFilterSetArchive, old_filter_set_)
      + sizeof(CommandSetFilterSetArchive::old_filter_set_)
      - PROTOBUF_FIELD_OFFSET(CommandSetFilterSetArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetFilterSetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[79]);
}

// ===================================================================

class ColumnRowRestoreDataArchive::_Internal {
 public:
};

void ColumnRowRestoreDataArchive::clear_uid_list() {
  uid_list_.Clear();
}
ColumnRowRestoreDataArchive::ColumnRowRestoreDataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  uid_list_(arena),
  metadatas_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ColumnRowRestoreDataArchive)
}
ColumnRowRestoreDataArchive::ColumnRowRestoreDataArchive(const ColumnRowRestoreDataArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uid_list_(from.uid_list_),
      metadatas_(from.metadatas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.ColumnRowRestoreDataArchive)
}

inline void ColumnRowRestoreDataArchive::SharedCtor() {
}

ColumnRowRestoreDataArchive::~ColumnRowRestoreDataArchive() {
  // @@protoc_insertion_point(destructor:TST.ColumnRowRestoreDataArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ColumnRowRestoreDataArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColumnRowRestoreDataArchive::ArenaDtor(void* object) {
  ColumnRowRestoreDataArchive* _this = reinterpret_cast< ColumnRowRestoreDataArchive* >(object);
  (void)_this;
}
void ColumnRowRestoreDataArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColumnRowRestoreDataArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColumnRowRestoreDataArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ColumnRowRestoreDataArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_list_.Clear();
  metadatas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnRowRestoreDataArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID uid_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uid_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TST.ColumnRowMetadataArchive metadatas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadatas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnRowRestoreDataArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ColumnRowRestoreDataArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID uid_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uid_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_uid_list(i), target, stream);
  }

  // repeated .TST.ColumnRowMetadataArchive metadatas = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metadatas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_metadatas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ColumnRowRestoreDataArchive)
  return target;
}

size_t ColumnRowRestoreDataArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ColumnRowRestoreDataArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uid_list = 1;
  total_size += 1UL * this->_internal_uid_list_size();
  for (const auto& msg : this->uid_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.ColumnRowMetadataArchive metadatas = 2;
  total_size += 1UL * this->_internal_metadatas_size();
  for (const auto& msg : this->metadatas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnRowRestoreDataArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColumnRowRestoreDataArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnRowRestoreDataArchive::GetClassData() const { return &_class_data_; }

void ColumnRowRestoreDataArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ColumnRowRestoreDataArchive *>(to)->MergeFrom(
      static_cast<const ColumnRowRestoreDataArchive &>(from));
}


void ColumnRowRestoreDataArchive::MergeFrom(const ColumnRowRestoreDataArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ColumnRowRestoreDataArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uid_list_.MergeFrom(from.uid_list_);
  metadatas_.MergeFrom(from.metadatas_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnRowRestoreDataArchive::CopyFrom(const ColumnRowRestoreDataArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ColumnRowRestoreDataArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnRowRestoreDataArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(uid_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(metadatas_)) return false;
  return true;
}

void ColumnRowRestoreDataArchive::InternalSwap(ColumnRowRestoreDataArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  uid_list_.InternalSwap(&other->uid_list_);
  metadatas_.InternalSwap(&other->metadatas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnRowRestoreDataArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[80]);
}

// ===================================================================

class CommandTransposeTableArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandTransposeTableArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandTransposeTableArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::ExpandedCellRange& original_table_range(const CommandTransposeTableArchive* msg);
  static void set_has_original_table_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& original_cell_map(const CommandTransposeTableArchive* msg);
  static void set_has_original_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_original_footer_row_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& transposed_cell_map(const CommandTransposeTableArchive* msg);
  static void set_has_transposed_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& undo_formula_rewrite_command(const CommandTransposeTableArchive* msg);
  static void set_has_undo_formula_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& rich_text_subcommands(const CommandTransposeTableArchive* msg);
  static void set_has_rich_text_subcommands(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TST::ColumnRowRestoreDataArchive& column_restore_data(const CommandTransposeTableArchive* msg);
  static void set_has_column_restore_data(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TST::ColumnRowRestoreDataArchive& row_restore_data(const CommandTransposeTableArchive* msg);
  static void set_has_row_restore_data(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000010f) ^ 0x0000010f) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandTransposeTableArchive::_Internal::super(const CommandTransposeTableArchive* msg) {
  return *msg->super_;
}
const ::TST::ExpandedCellRange&
CommandTransposeTableArchive::_Internal::original_table_range(const CommandTransposeTableArchive* msg) {
  return *msg->original_table_range_;
}
const ::TSP::Reference&
CommandTransposeTableArchive::_Internal::original_cell_map(const CommandTransposeTableArchive* msg) {
  return *msg->original_cell_map_;
}
const ::TSP::Reference&
CommandTransposeTableArchive::_Internal::transposed_cell_map(const CommandTransposeTableArchive* msg) {
  return *msg->transposed_cell_map_;
}
const ::TSP::Reference&
CommandTransposeTableArchive::_Internal::undo_formula_rewrite_command(const CommandTransposeTableArchive* msg) {
  return *msg->undo_formula_rewrite_command_;
}
const ::TSP::Reference&
CommandTransposeTableArchive::_Internal::rich_text_subcommands(const CommandTransposeTableArchive* msg) {
  return *msg->rich_text_subcommands_;
}
const ::TST::ColumnRowRestoreDataArchive&
CommandTransposeTableArchive::_Internal::column_restore_data(const CommandTransposeTableArchive* msg) {
  return *msg->column_restore_data_;
}
const ::TST::ColumnRowRestoreDataArchive&
CommandTransposeTableArchive::_Internal::row_restore_data(const CommandTransposeTableArchive* msg) {
  return *msg->row_restore_data_;
}
void CommandTransposeTableArchive::clear_original_table_range() {
  if (original_table_range_ != nullptr) original_table_range_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandTransposeTableArchive::clear_original_cell_map() {
  if (original_cell_map_ != nullptr) original_cell_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandTransposeTableArchive::clear_ineligible_merge_list() {
  ineligible_merge_list_.Clear();
}
void CommandTransposeTableArchive::clear_transposed_cell_map() {
  if (transposed_cell_map_ != nullptr) transposed_cell_map_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandTransposeTableArchive::clear_undo_formula_rewrite_command() {
  if (undo_formula_rewrite_command_ != nullptr) undo_formula_rewrite_command_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CommandTransposeTableArchive::clear_rich_text_subcommands() {
  if (rich_text_subcommands_ != nullptr) rich_text_subcommands_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
CommandTransposeTableArchive::CommandTransposeTableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  original_column_widths_(arena),
  original_row_heights_(arena),
  ineligible_merge_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandTransposeTableArchive)
}
CommandTransposeTableArchive::CommandTransposeTableArchive(const CommandTransposeTableArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      original_column_widths_(from.original_column_widths_),
      original_row_heights_(from.original_row_heights_),
      ineligible_merge_list_(from.ineligible_merge_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_original_table_range()) {
    original_table_range_ = new ::TST::ExpandedCellRange(*from.original_table_range_);
  } else {
    original_table_range_ = nullptr;
  }
  if (from._internal_has_original_cell_map()) {
    original_cell_map_ = new ::TSP::Reference(*from.original_cell_map_);
  } else {
    original_cell_map_ = nullptr;
  }
  if (from._internal_has_transposed_cell_map()) {
    transposed_cell_map_ = new ::TSP::Reference(*from.transposed_cell_map_);
  } else {
    transposed_cell_map_ = nullptr;
  }
  if (from._internal_has_undo_formula_rewrite_command()) {
    undo_formula_rewrite_command_ = new ::TSP::Reference(*from.undo_formula_rewrite_command_);
  } else {
    undo_formula_rewrite_command_ = nullptr;
  }
  if (from._internal_has_rich_text_subcommands()) {
    rich_text_subcommands_ = new ::TSP::Reference(*from.rich_text_subcommands_);
  } else {
    rich_text_subcommands_ = nullptr;
  }
  if (from._internal_has_column_restore_data()) {
    column_restore_data_ = new ::TST::ColumnRowRestoreDataArchive(*from.column_restore_data_);
  } else {
    column_restore_data_ = nullptr;
  }
  if (from._internal_has_row_restore_data()) {
    row_restore_data_ = new ::TST::ColumnRowRestoreDataArchive(*from.row_restore_data_);
  } else {
    row_restore_data_ = nullptr;
  }
  original_footer_row_count_ = from.original_footer_row_count_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandTransposeTableArchive)
}

inline void CommandTransposeTableArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&original_footer_row_count_) -
    reinterpret_cast<char*>(&super_)) + sizeof(original_footer_row_count_));
}

CommandTransposeTableArchive::~CommandTransposeTableArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandTransposeTableArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandTransposeTableArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete original_table_range_;
  if (this != internal_default_instance()) delete original_cell_map_;
  if (this != internal_default_instance()) delete transposed_cell_map_;
  if (this != internal_default_instance()) delete undo_formula_rewrite_command_;
  if (this != internal_default_instance()) delete rich_text_subcommands_;
  if (this != internal_default_instance()) delete column_restore_data_;
  if (this != internal_default_instance()) delete row_restore_data_;
}

void CommandTransposeTableArchive::ArenaDtor(void* object) {
  CommandTransposeTableArchive* _this = reinterpret_cast< CommandTransposeTableArchive* >(object);
  (void)_this;
}
void CommandTransposeTableArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandTransposeTableArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandTransposeTableArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandTransposeTableArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  original_column_widths_.Clear();
  original_row_heights_.Clear();
  ineligible_merge_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(original_table_range_ != nullptr);
      original_table_range_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(original_cell_map_ != nullptr);
      original_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(transposed_cell_map_ != nullptr);
      transposed_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(undo_formula_rewrite_command_ != nullptr);
      undo_formula_rewrite_command_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(rich_text_subcommands_ != nullptr);
      rich_text_subcommands_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(column_restore_data_ != nullptr);
      column_restore_data_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(row_restore_data_ != nullptr);
      row_restore_data_->Clear();
    }
  }
  original_footer_row_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandTransposeTableArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.ExpandedCellRange original_table_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_table_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference original_cell_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 original_footer_row_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_original_footer_row_count(&has_bits);
          original_footer_row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float original_column_widths = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_original_column_widths(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_original_column_widths(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float original_row_heights = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_original_row_heights(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_original_row_heights(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.CellRange ineligible_merge_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ineligible_merge_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference transposed_cell_map = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_transposed_cell_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_formula_rewrite_command = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_formula_rewrite_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference rich_text_subcommands = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_rich_text_subcommands(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.ColumnRowRestoreDataArchive column_restore_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_restore_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.ColumnRowRestoreDataArchive row_restore_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_restore_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandTransposeTableArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandTransposeTableArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TST.ExpandedCellRange original_table_range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::original_table_range(this), target, stream);
  }

  // required .TSP.Reference original_cell_map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::original_cell_map(this), target, stream);
  }

  // required uint32 original_footer_row_count = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_original_footer_row_count(), target);
  }

  // repeated float original_column_widths = 5;
  for (int i = 0, n = this->_internal_original_column_widths_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_original_column_widths(i), target);
  }

  // repeated float original_row_heights = 6;
  for (int i = 0, n = this->_internal_original_row_heights_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_original_row_heights(i), target);
  }

  // repeated .TST.CellRange ineligible_merge_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ineligible_merge_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_ineligible_merge_list(i), target, stream);
  }

  // required .TSP.Reference transposed_cell_map = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::transposed_cell_map(this), target, stream);
  }

  // optional .TSP.Reference undo_formula_rewrite_command = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::undo_formula_rewrite_command(this), target, stream);
  }

  // optional .TSP.Reference rich_text_subcommands = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::rich_text_subcommands(this), target, stream);
  }

  // optional .TST.ColumnRowRestoreDataArchive column_restore_data = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::column_restore_data(this), target, stream);
  }

  // optional .TST.ColumnRowRestoreDataArchive row_restore_data = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::row_restore_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandTransposeTableArchive)
  return target;
}

size_t CommandTransposeTableArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandTransposeTableArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_original_table_range()) {
    // required .TST.ExpandedCellRange original_table_range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *original_table_range_);
  }

  if (_internal_has_original_cell_map()) {
    // required .TSP.Reference original_cell_map = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *original_cell_map_);
  }

  if (_internal_has_transposed_cell_map()) {
    // required .TSP.Reference transposed_cell_map = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transposed_cell_map_);
  }

  if (_internal_has_original_footer_row_count()) {
    // required uint32 original_footer_row_count = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_original_footer_row_count());
  }

  return total_size;
}
size_t CommandTransposeTableArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandTransposeTableArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000010f) ^ 0x0000010f) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TST.ExpandedCellRange original_table_range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *original_table_range_);

    // required .TSP.Reference original_cell_map = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *original_cell_map_);

    // required .TSP.Reference transposed_cell_map = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transposed_cell_map_);

    // required uint32 original_footer_row_count = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_original_footer_row_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float original_column_widths = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_original_column_widths_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_original_column_widths_size());
    total_size += data_size;
  }

  // repeated float original_row_heights = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_original_row_heights_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_original_row_heights_size());
    total_size += data_size;
  }

  // repeated .TST.CellRange ineligible_merge_list = 7;
  total_size += 1UL * this->_internal_ineligible_merge_list_size();
  for (const auto& msg : this->ineligible_merge_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f0u) {
    // optional .TSP.Reference undo_formula_rewrite_command = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_formula_rewrite_command_);
    }

    // optional .TSP.Reference rich_text_subcommands = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rich_text_subcommands_);
    }

    // optional .TST.ColumnRowRestoreDataArchive column_restore_data = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *column_restore_data_);
    }

    // optional .TST.ColumnRowRestoreDataArchive row_restore_data = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *row_restore_data_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandTransposeTableArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandTransposeTableArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandTransposeTableArchive::GetClassData() const { return &_class_data_; }

void CommandTransposeTableArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandTransposeTableArchive *>(to)->MergeFrom(
      static_cast<const CommandTransposeTableArchive &>(from));
}


void CommandTransposeTableArchive::MergeFrom(const CommandTransposeTableArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandTransposeTableArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  original_column_widths_.MergeFrom(from.original_column_widths_);
  original_row_heights_.MergeFrom(from.original_row_heights_);
  ineligible_merge_list_.MergeFrom(from.ineligible_merge_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_original_table_range()->::TST::ExpandedCellRange::MergeFrom(from._internal_original_table_range());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_original_cell_map()->::TSP::Reference::MergeFrom(from._internal_original_cell_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_transposed_cell_map()->::TSP::Reference::MergeFrom(from._internal_transposed_cell_map());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_undo_formula_rewrite_command()->::TSP::Reference::MergeFrom(from._internal_undo_formula_rewrite_command());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_rich_text_subcommands()->::TSP::Reference::MergeFrom(from._internal_rich_text_subcommands());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_column_restore_data()->::TST::ColumnRowRestoreDataArchive::MergeFrom(from._internal_column_restore_data());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_row_restore_data()->::TST::ColumnRowRestoreDataArchive::MergeFrom(from._internal_row_restore_data());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_original_footer_row_count(from._internal_original_footer_row_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandTransposeTableArchive::CopyFrom(const CommandTransposeTableArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandTransposeTableArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandTransposeTableArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ineligible_merge_list_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_original_table_range()) {
    if (!original_table_range_->IsInitialized()) return false;
  }
  if (_internal_has_original_cell_map()) {
    if (!original_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_transposed_cell_map()) {
    if (!transposed_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_formula_rewrite_command()) {
    if (!undo_formula_rewrite_command_->IsInitialized()) return false;
  }
  if (_internal_has_rich_text_subcommands()) {
    if (!rich_text_subcommands_->IsInitialized()) return false;
  }
  if (_internal_has_column_restore_data()) {
    if (!column_restore_data_->IsInitialized()) return false;
  }
  if (_internal_has_row_restore_data()) {
    if (!row_restore_data_->IsInitialized()) return false;
  }
  return true;
}

void CommandTransposeTableArchive::InternalSwap(CommandTransposeTableArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  original_column_widths_.InternalSwap(&other->original_column_widths_);
  original_row_heights_.InternalSwap(&other->original_row_heights_);
  ineligible_merge_list_.InternalSwap(&other->ineligible_merge_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandTransposeTableArchive, original_footer_row_count_)
      + sizeof(CommandTransposeTableArchive::original_footer_row_count_)
      - PROTOBUF_FIELD_OFFSET(CommandTransposeTableArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandTransposeTableArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[81]);
}

// ===================================================================

class CommandSetStructuredTextImportRecordArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetStructuredTextImportRecordArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetStructuredTextImportRecordArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::StructuredTextImportRecord& new_import_record(const CommandSetStructuredTextImportRecordArchive* msg);
  static void set_has_new_import_record(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::StructuredTextImportRecord& old_import_record(const CommandSetStructuredTextImportRecordArchive* msg);
  static void set_has_old_import_record(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetStructuredTextImportRecordArchive::_Internal::super(const CommandSetStructuredTextImportRecordArchive* msg) {
  return *msg->super_;
}
const ::TST::StructuredTextImportRecord&
CommandSetStructuredTextImportRecordArchive::_Internal::new_import_record(const CommandSetStructuredTextImportRecordArchive* msg) {
  return *msg->new_import_record_;
}
const ::TST::StructuredTextImportRecord&
CommandSetStructuredTextImportRecordArchive::_Internal::old_import_record(const CommandSetStructuredTextImportRecordArchive* msg) {
  return *msg->old_import_record_;
}
void CommandSetStructuredTextImportRecordArchive::clear_new_import_record() {
  if (new_import_record_ != nullptr) new_import_record_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandSetStructuredTextImportRecordArchive::clear_old_import_record() {
  if (old_import_record_ != nullptr) old_import_record_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandSetStructuredTextImportRecordArchive::CommandSetStructuredTextImportRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetStructuredTextImportRecordArchive)
}
CommandSetStructuredTextImportRecordArchive::CommandSetStructuredTextImportRecordArchive(const CommandSetStructuredTextImportRecordArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_new_import_record()) {
    new_import_record_ = new ::TST::StructuredTextImportRecord(*from.new_import_record_);
  } else {
    new_import_record_ = nullptr;
  }
  if (from._internal_has_old_import_record()) {
    old_import_record_ = new ::TST::StructuredTextImportRecord(*from.old_import_record_);
  } else {
    old_import_record_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetStructuredTextImportRecordArchive)
}

inline void CommandSetStructuredTextImportRecordArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_import_record_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_import_record_));
}

CommandSetStructuredTextImportRecordArchive::~CommandSetStructuredTextImportRecordArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetStructuredTextImportRecordArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSetStructuredTextImportRecordArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete new_import_record_;
  if (this != internal_default_instance()) delete old_import_record_;
}

void CommandSetStructuredTextImportRecordArchive::ArenaDtor(void* object) {
  CommandSetStructuredTextImportRecordArchive* _this = reinterpret_cast< CommandSetStructuredTextImportRecordArchive* >(object);
  (void)_this;
}
void CommandSetStructuredTextImportRecordArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSetStructuredTextImportRecordArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSetStructuredTextImportRecordArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetStructuredTextImportRecordArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(new_import_record_ != nullptr);
      new_import_record_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(old_import_record_ != nullptr);
      old_import_record_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetStructuredTextImportRecordArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.StructuredTextImportRecord new_import_record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_import_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.StructuredTextImportRecord old_import_record = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_import_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSetStructuredTextImportRecordArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetStructuredTextImportRecordArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TST.StructuredTextImportRecord new_import_record = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::new_import_record(this), target, stream);
  }

  // optional .TST.StructuredTextImportRecord old_import_record = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::old_import_record(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetStructuredTextImportRecordArchive)
  return target;
}

size_t CommandSetStructuredTextImportRecordArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetStructuredTextImportRecordArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TST.StructuredTextImportRecord new_import_record = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_import_record_);
    }

    // optional .TST.StructuredTextImportRecord old_import_record = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_import_record_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetStructuredTextImportRecordArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSetStructuredTextImportRecordArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetStructuredTextImportRecordArchive::GetClassData() const { return &_class_data_; }

void CommandSetStructuredTextImportRecordArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSetStructuredTextImportRecordArchive *>(to)->MergeFrom(
      static_cast<const CommandSetStructuredTextImportRecordArchive &>(from));
}


void CommandSetStructuredTextImportRecordArchive::MergeFrom(const CommandSetStructuredTextImportRecordArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetStructuredTextImportRecordArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_new_import_record()->::TST::StructuredTextImportRecord::MergeFrom(from._internal_new_import_record());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_old_import_record()->::TST::StructuredTextImportRecord::MergeFrom(from._internal_old_import_record());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetStructuredTextImportRecordArchive::CopyFrom(const CommandSetStructuredTextImportRecordArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetStructuredTextImportRecordArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetStructuredTextImportRecordArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_new_import_record()) {
    if (!new_import_record_->IsInitialized()) return false;
  }
  if (_internal_has_old_import_record()) {
    if (!old_import_record_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetStructuredTextImportRecordArchive::InternalSwap(CommandSetStructuredTextImportRecordArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetStructuredTextImportRecordArchive, old_import_record_)
      + sizeof(CommandSetStructuredTextImportRecordArchive::old_import_record_)
      - PROTOBUF_FIELD_OFFSET(CommandSetStructuredTextImportRecordArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetStructuredTextImportRecordArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[82]);
}

// ===================================================================

class CommandCategoryCollapseExpandGroupArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandCategoryCollapseExpandGroupArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandCategoryCollapseExpandGroupArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_collapsing(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TST::GroupColumnListArchive& grouping_columns(const CommandCategoryCollapseExpandGroupArchive* msg);
  static void set_has_grouping_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::ExpandCollapseStateArchive& collapse_state(const CommandCategoryCollapseExpandGroupArchive* msg);
  static void set_has_collapse_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::ExpandCollapseStateArchive& undo_collapse_state(const CommandCategoryCollapseExpandGroupArchive* msg);
  static void set_has_undo_collapse_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000017) ^ 0x00000017) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandCategoryCollapseExpandGroupArchive::_Internal::super(const CommandCategoryCollapseExpandGroupArchive* msg) {
  return *msg->super_;
}
const ::TST::GroupColumnListArchive&
CommandCategoryCollapseExpandGroupArchive::_Internal::grouping_columns(const CommandCategoryCollapseExpandGroupArchive* msg) {
  return *msg->grouping_columns_;
}
const ::TST::ExpandCollapseStateArchive&
CommandCategoryCollapseExpandGroupArchive::_Internal::collapse_state(const CommandCategoryCollapseExpandGroupArchive* msg) {
  return *msg->collapse_state_;
}
const ::TST::ExpandCollapseStateArchive&
CommandCategoryCollapseExpandGroupArchive::_Internal::undo_collapse_state(const CommandCategoryCollapseExpandGroupArchive* msg) {
  return *msg->undo_collapse_state_;
}
void CommandCategoryCollapseExpandGroupArchive::clear_grouping_columns() {
  if (grouping_columns_ != nullptr) grouping_columns_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandCategoryCollapseExpandGroupArchive::clear_collapse_state() {
  if (collapse_state_ != nullptr) collapse_state_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandCategoryCollapseExpandGroupArchive::clear_undo_collapse_state() {
  if (undo_collapse_state_ != nullptr) undo_collapse_state_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandCategoryCollapseExpandGroupArchive::CommandCategoryCollapseExpandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandCategoryCollapseExpandGroupArchive)
}
CommandCategoryCollapseExpandGroupArchive::CommandCategoryCollapseExpandGroupArchive(const CommandCategoryCollapseExpandGroupArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_grouping_columns()) {
    grouping_columns_ = new ::TST::GroupColumnListArchive(*from.grouping_columns_);
  } else {
    grouping_columns_ = nullptr;
  }
  if (from._internal_has_collapse_state()) {
    collapse_state_ = new ::TST::ExpandCollapseStateArchive(*from.collapse_state_);
  } else {
    collapse_state_ = nullptr;
  }
  if (from._internal_has_undo_collapse_state()) {
    undo_collapse_state_ = new ::TST::ExpandCollapseStateArchive(*from.undo_collapse_state_);
  } else {
    undo_collapse_state_ = nullptr;
  }
  is_collapsing_ = from.is_collapsing_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandCategoryCollapseExpandGroupArchive)
}

inline void CommandCategoryCollapseExpandGroupArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_collapsing_) -
    reinterpret_cast<char*>(&super_)) + sizeof(is_collapsing_));
}

CommandCategoryCollapseExpandGroupArchive::~CommandCategoryCollapseExpandGroupArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandCategoryCollapseExpandGroupArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandCategoryCollapseExpandGroupArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete grouping_columns_;
  if (this != internal_default_instance()) delete collapse_state_;
  if (this != internal_default_instance()) delete undo_collapse_state_;
}

void CommandCategoryCollapseExpandGroupArchive::ArenaDtor(void* object) {
  CommandCategoryCollapseExpandGroupArchive* _this = reinterpret_cast< CommandCategoryCollapseExpandGroupArchive* >(object);
  (void)_this;
}
void CommandCategoryCollapseExpandGroupArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandCategoryCollapseExpandGroupArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandCategoryCollapseExpandGroupArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandCategoryCollapseExpandGroupArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(grouping_columns_ != nullptr);
      grouping_columns_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(collapse_state_ != nullptr);
      collapse_state_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undo_collapse_state_ != nullptr);
      undo_collapse_state_->Clear();
    }
  }
  is_collapsing_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandCategoryCollapseExpandGroupArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_collapsing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_collapsing(&has_bits);
          is_collapsing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.GroupColumnListArchive grouping_columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_grouping_columns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.ExpandCollapseStateArchive collapse_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_collapse_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.ExpandCollapseStateArchive undo_collapse_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_collapse_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandCategoryCollapseExpandGroupArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandCategoryCollapseExpandGroupArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required bool is_collapsing = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_collapsing(), target);
  }

  // required .TST.GroupColumnListArchive grouping_columns = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::grouping_columns(this), target, stream);
  }

  // required .TST.ExpandCollapseStateArchive collapse_state = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::collapse_state(this), target, stream);
  }

  // optional .TST.ExpandCollapseStateArchive undo_collapse_state = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::undo_collapse_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandCategoryCollapseExpandGroupArchive)
  return target;
}

size_t CommandCategoryCollapseExpandGroupArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandCategoryCollapseExpandGroupArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_grouping_columns()) {
    // required .TST.GroupColumnListArchive grouping_columns = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grouping_columns_);
  }

  if (_internal_has_collapse_state()) {
    // required .TST.ExpandCollapseStateArchive collapse_state = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *collapse_state_);
  }

  if (_internal_has_is_collapsing()) {
    // required bool is_collapsing = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandCategoryCollapseExpandGroupArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandCategoryCollapseExpandGroupArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TST.GroupColumnListArchive grouping_columns = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grouping_columns_);

    // required .TST.ExpandCollapseStateArchive collapse_state = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *collapse_state_);

    // required bool is_collapsing = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TST.ExpandCollapseStateArchive undo_collapse_state = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *undo_collapse_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandCategoryCollapseExpandGroupArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandCategoryCollapseExpandGroupArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandCategoryCollapseExpandGroupArchive::GetClassData() const { return &_class_data_; }

void CommandCategoryCollapseExpandGroupArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandCategoryCollapseExpandGroupArchive *>(to)->MergeFrom(
      static_cast<const CommandCategoryCollapseExpandGroupArchive &>(from));
}


void CommandCategoryCollapseExpandGroupArchive::MergeFrom(const CommandCategoryCollapseExpandGroupArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandCategoryCollapseExpandGroupArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_grouping_columns()->::TST::GroupColumnListArchive::MergeFrom(from._internal_grouping_columns());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_collapse_state()->::TST::ExpandCollapseStateArchive::MergeFrom(from._internal_collapse_state());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_undo_collapse_state()->::TST::ExpandCollapseStateArchive::MergeFrom(from._internal_undo_collapse_state());
    }
    if (cached_has_bits & 0x00000010u) {
      is_collapsing_ = from.is_collapsing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandCategoryCollapseExpandGroupArchive::CopyFrom(const CommandCategoryCollapseExpandGroupArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandCategoryCollapseExpandGroupArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandCategoryCollapseExpandGroupArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_grouping_columns()) {
    if (!grouping_columns_->IsInitialized()) return false;
  }
  if (_internal_has_collapse_state()) {
    if (!collapse_state_->IsInitialized()) return false;
  }
  if (_internal_has_undo_collapse_state()) {
    if (!undo_collapse_state_->IsInitialized()) return false;
  }
  return true;
}

void CommandCategoryCollapseExpandGroupArchive::InternalSwap(CommandCategoryCollapseExpandGroupArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandCategoryCollapseExpandGroupArchive, is_collapsing_)
      + sizeof(CommandCategoryCollapseExpandGroupArchive::is_collapsing_)
      - PROTOBUF_FIELD_OFFSET(CommandCategoryCollapseExpandGroupArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandCategoryCollapseExpandGroupArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[83]);
}

// ===================================================================

class CommandCategoryChangeSummaryAggregateType::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandCategoryChangeSummaryAggregateType>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandCategoryChangeSummaryAggregateType* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_aggregate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_undo_aggregate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& column_uid(const CommandCategoryChangeSummaryAggregateType* msg);
  static void set_has_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_group_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandCategoryChangeSummaryAggregateType::_Internal::super(const CommandCategoryChangeSummaryAggregateType* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandCategoryChangeSummaryAggregateType::_Internal::column_uid(const CommandCategoryChangeSummaryAggregateType* msg) {
  return *msg->column_uid_;
}
void CommandCategoryChangeSummaryAggregateType::clear_column_uid() {
  if (column_uid_ != nullptr) column_uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandCategoryChangeSummaryAggregateType::CommandCategoryChangeSummaryAggregateType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandCategoryChangeSummaryAggregateType)
}
CommandCategoryChangeSummaryAggregateType::CommandCategoryChangeSummaryAggregateType(const CommandCategoryChangeSummaryAggregateType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_column_uid()) {
    column_uid_ = new ::TSP::UUID(*from.column_uid_);
  } else {
    column_uid_ = nullptr;
  }
  ::memcpy(&aggregate_type_, &from.aggregate_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_level_) -
    reinterpret_cast<char*>(&aggregate_type_)) + sizeof(group_level_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandCategoryChangeSummaryAggregateType)
}

inline void CommandCategoryChangeSummaryAggregateType::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_level_) -
    reinterpret_cast<char*>(&super_)) + sizeof(group_level_));
}

CommandCategoryChangeSummaryAggregateType::~CommandCategoryChangeSummaryAggregateType() {
  // @@protoc_insertion_point(destructor:TST.CommandCategoryChangeSummaryAggregateType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandCategoryChangeSummaryAggregateType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete column_uid_;
}

void CommandCategoryChangeSummaryAggregateType::ArenaDtor(void* object) {
  CommandCategoryChangeSummaryAggregateType* _this = reinterpret_cast< CommandCategoryChangeSummaryAggregateType* >(object);
  (void)_this;
}
void CommandCategoryChangeSummaryAggregateType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandCategoryChangeSummaryAggregateType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandCategoryChangeSummaryAggregateType::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandCategoryChangeSummaryAggregateType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(column_uid_ != nullptr);
      column_uid_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&aggregate_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&group_level_) -
        reinterpret_cast<char*>(&aggregate_type_)) + sizeof(group_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandCategoryChangeSummaryAggregateType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 aggregate_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_aggregate_type(&has_bits);
          aggregate_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 undo_aggregate_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_undo_aggregate_type(&has_bits);
          undo_aggregate_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID column_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required sint32 group_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_group_level(&has_bits);
          group_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandCategoryChangeSummaryAggregateType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandCategoryChangeSummaryAggregateType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required uint32 aggregate_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_aggregate_type(), target);
  }

  // required uint32 undo_aggregate_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_undo_aggregate_type(), target);
  }

  // required .TSP.UUID column_uid = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::column_uid(this), target, stream);
  }

  // required sint32 group_level = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_group_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandCategoryChangeSummaryAggregateType)
  return target;
}

size_t CommandCategoryChangeSummaryAggregateType::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandCategoryChangeSummaryAggregateType)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_column_uid()) {
    // required .TSP.UUID column_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_uid_);
  }

  if (_internal_has_aggregate_type()) {
    // required uint32 aggregate_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aggregate_type());
  }

  if (_internal_has_undo_aggregate_type()) {
    // required uint32 undo_aggregate_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_undo_aggregate_type());
  }

  if (_internal_has_group_level()) {
    // required sint32 group_level = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_group_level());
  }

  return total_size;
}
size_t CommandCategoryChangeSummaryAggregateType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandCategoryChangeSummaryAggregateType)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID column_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_uid_);

    // required uint32 aggregate_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_aggregate_type());

    // required uint32 undo_aggregate_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_undo_aggregate_type());

    // required sint32 group_level = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_group_level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandCategoryChangeSummaryAggregateType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandCategoryChangeSummaryAggregateType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandCategoryChangeSummaryAggregateType::GetClassData() const { return &_class_data_; }

void CommandCategoryChangeSummaryAggregateType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandCategoryChangeSummaryAggregateType *>(to)->MergeFrom(
      static_cast<const CommandCategoryChangeSummaryAggregateType &>(from));
}


void CommandCategoryChangeSummaryAggregateType::MergeFrom(const CommandCategoryChangeSummaryAggregateType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandCategoryChangeSummaryAggregateType)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_column_uid()->::TSP::UUID::MergeFrom(from._internal_column_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      aggregate_type_ = from.aggregate_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      undo_aggregate_type_ = from.undo_aggregate_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      group_level_ = from.group_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandCategoryChangeSummaryAggregateType::CopyFrom(const CommandCategoryChangeSummaryAggregateType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandCategoryChangeSummaryAggregateType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandCategoryChangeSummaryAggregateType::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_column_uid()) {
    if (!column_uid_->IsInitialized()) return false;
  }
  return true;
}

void CommandCategoryChangeSummaryAggregateType::InternalSwap(CommandCategoryChangeSummaryAggregateType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandCategoryChangeSummaryAggregateType, group_level_)
      + sizeof(CommandCategoryChangeSummaryAggregateType::group_level_)
      - PROTOBUF_FIELD_OFFSET(CommandCategoryChangeSummaryAggregateType, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandCategoryChangeSummaryAggregateType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[84]);
}

// ===================================================================

class CommandCategorySetLabelRowVisibility::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandCategorySetLabelRowVisibility>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandCategorySetLabelRowVisibility* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_group_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_label_row_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_undo_label_row_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandCategorySetLabelRowVisibility::_Internal::super(const CommandCategorySetLabelRowVisibility* msg) {
  return *msg->super_;
}
CommandCategorySetLabelRowVisibility::CommandCategorySetLabelRowVisibility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandCategorySetLabelRowVisibility)
}
CommandCategorySetLabelRowVisibility::CommandCategorySetLabelRowVisibility(const CommandCategorySetLabelRowVisibility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&group_level_, &from.group_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&undo_label_row_visibility_) -
    reinterpret_cast<char*>(&group_level_)) + sizeof(undo_label_row_visibility_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandCategorySetLabelRowVisibility)
}

inline void CommandCategorySetLabelRowVisibility::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_label_row_visibility_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_label_row_visibility_));
}

CommandCategorySetLabelRowVisibility::~CommandCategorySetLabelRowVisibility() {
  // @@protoc_insertion_point(destructor:TST.CommandCategorySetLabelRowVisibility)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandCategorySetLabelRowVisibility::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CommandCategorySetLabelRowVisibility::ArenaDtor(void* object) {
  CommandCategorySetLabelRowVisibility* _this = reinterpret_cast< CommandCategorySetLabelRowVisibility* >(object);
  (void)_this;
}
void CommandCategorySetLabelRowVisibility::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandCategorySetLabelRowVisibility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandCategorySetLabelRowVisibility::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandCategorySetLabelRowVisibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&group_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&undo_label_row_visibility_) -
        reinterpret_cast<char*>(&group_level_)) + sizeof(undo_label_row_visibility_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandCategorySetLabelRowVisibility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 group_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_group_level(&has_bits);
          group_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 label_row_visibility = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_label_row_visibility(&has_bits);
          label_row_visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 undo_label_row_visibility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_undo_label_row_visibility(&has_bits);
          undo_label_row_visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandCategorySetLabelRowVisibility::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandCategorySetLabelRowVisibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required uint32 group_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_level(), target);
  }

  // required uint32 label_row_visibility = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_label_row_visibility(), target);
  }

  // required uint32 undo_label_row_visibility = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_undo_label_row_visibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandCategorySetLabelRowVisibility)
  return target;
}

size_t CommandCategorySetLabelRowVisibility::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandCategorySetLabelRowVisibility)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_group_level()) {
    // required uint32 group_level = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_group_level());
  }

  if (_internal_has_label_row_visibility()) {
    // required uint32 label_row_visibility = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label_row_visibility());
  }

  if (_internal_has_undo_label_row_visibility()) {
    // required uint32 undo_label_row_visibility = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_undo_label_row_visibility());
  }

  return total_size;
}
size_t CommandCategorySetLabelRowVisibility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandCategorySetLabelRowVisibility)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required uint32 group_level = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_group_level());

    // required uint32 label_row_visibility = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label_row_visibility());

    // required uint32 undo_label_row_visibility = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_undo_label_row_visibility());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandCategorySetLabelRowVisibility::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandCategorySetLabelRowVisibility::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandCategorySetLabelRowVisibility::GetClassData() const { return &_class_data_; }

void CommandCategorySetLabelRowVisibility::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandCategorySetLabelRowVisibility *>(to)->MergeFrom(
      static_cast<const CommandCategorySetLabelRowVisibility &>(from));
}


void CommandCategorySetLabelRowVisibility::MergeFrom(const CommandCategorySetLabelRowVisibility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandCategorySetLabelRowVisibility)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      group_level_ = from.group_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      label_row_visibility_ = from.label_row_visibility_;
    }
    if (cached_has_bits & 0x00000008u) {
      undo_label_row_visibility_ = from.undo_label_row_visibility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandCategorySetLabelRowVisibility::CopyFrom(const CommandCategorySetLabelRowVisibility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandCategorySetLabelRowVisibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandCategorySetLabelRowVisibility::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandCategorySetLabelRowVisibility::InternalSwap(CommandCategorySetLabelRowVisibility* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandCategorySetLabelRowVisibility, undo_label_row_visibility_)
      + sizeof(CommandCategorySetLabelRowVisibility::undo_label_row_visibility_)
      - PROTOBUF_FIELD_OFFSET(CommandCategorySetLabelRowVisibility, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandCategorySetLabelRowVisibility::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[85]);
}

// ===================================================================

class CommandCategoryWillChangeGroupValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandCategoryWillChangeGroupValue>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandCategoryWillChangeGroupValue* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& group_node_uid(const CommandCategoryWillChangeGroupValue* msg);
  static void set_has_group_node_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& undo_group_node_uid(const CommandCategoryWillChangeGroupValue* msg);
  static void set_has_undo_group_node_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::CellValueArchive& group_value(const CommandCategoryWillChangeGroupValue* msg);
  static void set_has_group_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::CellValueArchive& undo_group_value(const CommandCategoryWillChangeGroupValue* msg);
  static void set_has_undo_group_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& rewrite_command_for_undo(const CommandCategoryWillChangeGroupValue* msg);
  static void set_has_rewrite_command_for_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandCategoryWillChangeGroupValue::_Internal::super(const CommandCategoryWillChangeGroupValue* msg) {
  return *msg->super_;
}
const ::TSP::UUID&
CommandCategoryWillChangeGroupValue::_Internal::group_node_uid(const CommandCategoryWillChangeGroupValue* msg) {
  return *msg->group_node_uid_;
}
const ::TSP::UUID&
CommandCategoryWillChangeGroupValue::_Internal::undo_group_node_uid(const CommandCategoryWillChangeGroupValue* msg) {
  return *msg->undo_group_node_uid_;
}
const ::TSCE::CellValueArchive&
CommandCategoryWillChangeGroupValue::_Internal::group_value(const CommandCategoryWillChangeGroupValue* msg) {
  return *msg->group_value_;
}
const ::TSCE::CellValueArchive&
CommandCategoryWillChangeGroupValue::_Internal::undo_group_value(const CommandCategoryWillChangeGroupValue* msg) {
  return *msg->undo_group_value_;
}
const ::TSP::Reference&
CommandCategoryWillChangeGroupValue::_Internal::rewrite_command_for_undo(const CommandCategoryWillChangeGroupValue* msg) {
  return *msg->rewrite_command_for_undo_;
}
void CommandCategoryWillChangeGroupValue::clear_group_node_uid() {
  if (group_node_uid_ != nullptr) group_node_uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandCategoryWillChangeGroupValue::clear_undo_group_node_uid() {
  if (undo_group_node_uid_ != nullptr) undo_group_node_uid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandCategoryWillChangeGroupValue::clear_group_value() {
  if (group_value_ != nullptr) group_value_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandCategoryWillChangeGroupValue::clear_undo_group_value() {
  if (undo_group_value_ != nullptr) undo_group_value_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CommandCategoryWillChangeGroupValue::clear_rewrite_command_for_undo() {
  if (rewrite_command_for_undo_ != nullptr) rewrite_command_for_undo_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
CommandCategoryWillChangeGroupValue::CommandCategoryWillChangeGroupValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandCategoryWillChangeGroupValue)
}
CommandCategoryWillChangeGroupValue::CommandCategoryWillChangeGroupValue(const CommandCategoryWillChangeGroupValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_group_node_uid()) {
    group_node_uid_ = new ::TSP::UUID(*from.group_node_uid_);
  } else {
    group_node_uid_ = nullptr;
  }
  if (from._internal_has_undo_group_node_uid()) {
    undo_group_node_uid_ = new ::TSP::UUID(*from.undo_group_node_uid_);
  } else {
    undo_group_node_uid_ = nullptr;
  }
  if (from._internal_has_group_value()) {
    group_value_ = new ::TSCE::CellValueArchive(*from.group_value_);
  } else {
    group_value_ = nullptr;
  }
  if (from._internal_has_undo_group_value()) {
    undo_group_value_ = new ::TSCE::CellValueArchive(*from.undo_group_value_);
  } else {
    undo_group_value_ = nullptr;
  }
  if (from._internal_has_rewrite_command_for_undo()) {
    rewrite_command_for_undo_ = new ::TSP::Reference(*from.rewrite_command_for_undo_);
  } else {
    rewrite_command_for_undo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandCategoryWillChangeGroupValue)
}

inline void CommandCategoryWillChangeGroupValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rewrite_command_for_undo_) -
    reinterpret_cast<char*>(&super_)) + sizeof(rewrite_command_for_undo_));
}

CommandCategoryWillChangeGroupValue::~CommandCategoryWillChangeGroupValue() {
  // @@protoc_insertion_point(destructor:TST.CommandCategoryWillChangeGroupValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandCategoryWillChangeGroupValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete group_node_uid_;
  if (this != internal_default_instance()) delete undo_group_node_uid_;
  if (this != internal_default_instance()) delete group_value_;
  if (this != internal_default_instance()) delete undo_group_value_;
  if (this != internal_default_instance()) delete rewrite_command_for_undo_;
}

void CommandCategoryWillChangeGroupValue::ArenaDtor(void* object) {
  CommandCategoryWillChangeGroupValue* _this = reinterpret_cast< CommandCategoryWillChangeGroupValue* >(object);
  (void)_this;
}
void CommandCategoryWillChangeGroupValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandCategoryWillChangeGroupValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandCategoryWillChangeGroupValue::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandCategoryWillChangeGroupValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(group_node_uid_ != nullptr);
      group_node_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_group_node_uid_ != nullptr);
      undo_group_node_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(group_value_ != nullptr);
      group_value_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(undo_group_value_ != nullptr);
      undo_group_value_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(rewrite_command_for_undo_ != nullptr);
      rewrite_command_for_undo_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandCategoryWillChangeGroupValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID group_node_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_node_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID undo_group_node_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_group_node_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellValueArchive group_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellValueArchive undo_group_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_group_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference rewrite_command_for_undo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_command_for_undo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandCategoryWillChangeGroupValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandCategoryWillChangeGroupValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUID group_node_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::group_node_uid(this), target, stream);
  }

  // optional .TSP.UUID undo_group_node_uid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::undo_group_node_uid(this), target, stream);
  }

  // optional .TSCE.CellValueArchive group_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::group_value(this), target, stream);
  }

  // optional .TSCE.CellValueArchive undo_group_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::undo_group_value(this), target, stream);
  }

  // optional .TSP.Reference rewrite_command_for_undo = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::rewrite_command_for_undo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandCategoryWillChangeGroupValue)
  return target;
}

size_t CommandCategoryWillChangeGroupValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandCategoryWillChangeGroupValue)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_group_node_uid()) {
    // required .TSP.UUID group_node_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_node_uid_);
  }

  return total_size;
}
size_t CommandCategoryWillChangeGroupValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandCategoryWillChangeGroupValue)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUID group_node_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_node_uid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional .TSP.UUID undo_group_node_uid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_group_node_uid_);
    }

    // optional .TSCE.CellValueArchive group_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *group_value_);
    }

    // optional .TSCE.CellValueArchive undo_group_value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_group_value_);
    }

    // optional .TSP.Reference rewrite_command_for_undo = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rewrite_command_for_undo_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandCategoryWillChangeGroupValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandCategoryWillChangeGroupValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandCategoryWillChangeGroupValue::GetClassData() const { return &_class_data_; }

void CommandCategoryWillChangeGroupValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandCategoryWillChangeGroupValue *>(to)->MergeFrom(
      static_cast<const CommandCategoryWillChangeGroupValue &>(from));
}


void CommandCategoryWillChangeGroupValue::MergeFrom(const CommandCategoryWillChangeGroupValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandCategoryWillChangeGroupValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_group_node_uid()->::TSP::UUID::MergeFrom(from._internal_group_node_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_group_node_uid()->::TSP::UUID::MergeFrom(from._internal_undo_group_node_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_group_value()->::TSCE::CellValueArchive::MergeFrom(from._internal_group_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_undo_group_value()->::TSCE::CellValueArchive::MergeFrom(from._internal_undo_group_value());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_rewrite_command_for_undo()->::TSP::Reference::MergeFrom(from._internal_rewrite_command_for_undo());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandCategoryWillChangeGroupValue::CopyFrom(const CommandCategoryWillChangeGroupValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandCategoryWillChangeGroupValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandCategoryWillChangeGroupValue::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_group_node_uid()) {
    if (!group_node_uid_->IsInitialized()) return false;
  }
  if (_internal_has_undo_group_node_uid()) {
    if (!undo_group_node_uid_->IsInitialized()) return false;
  }
  if (_internal_has_group_value()) {
    if (!group_value_->IsInitialized()) return false;
  }
  if (_internal_has_undo_group_value()) {
    if (!undo_group_value_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_command_for_undo()) {
    if (!rewrite_command_for_undo_->IsInitialized()) return false;
  }
  return true;
}

void CommandCategoryWillChangeGroupValue::InternalSwap(CommandCategoryWillChangeGroupValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandCategoryWillChangeGroupValue, rewrite_command_for_undo_)
      + sizeof(CommandCategoryWillChangeGroupValue::rewrite_command_for_undo_)
      - PROTOBUF_FIELD_OFFSET(CommandCategoryWillChangeGroupValue, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandCategoryWillChangeGroupValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[86]);
}

// ===================================================================

class IdempotentSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<IdempotentSelectionTransformerArchive>()._has_bits_);
  static const ::TSP::Reference& archived_selection(const IdempotentSelectionTransformerArchive* msg);
  static void set_has_archived_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
IdempotentSelectionTransformerArchive::_Internal::archived_selection(const IdempotentSelectionTransformerArchive* msg) {
  return *msg->archived_selection_;
}
void IdempotentSelectionTransformerArchive::clear_archived_selection() {
  if (archived_selection_ != nullptr) archived_selection_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
IdempotentSelectionTransformerArchive::IdempotentSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.IdempotentSelectionTransformerArchive)
}
IdempotentSelectionTransformerArchive::IdempotentSelectionTransformerArchive(const IdempotentSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_archived_selection()) {
    archived_selection_ = new ::TSP::Reference(*from.archived_selection_);
  } else {
    archived_selection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.IdempotentSelectionTransformerArchive)
}

inline void IdempotentSelectionTransformerArchive::SharedCtor() {
archived_selection_ = nullptr;
}

IdempotentSelectionTransformerArchive::~IdempotentSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TST.IdempotentSelectionTransformerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IdempotentSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete archived_selection_;
}

void IdempotentSelectionTransformerArchive::ArenaDtor(void* object) {
  IdempotentSelectionTransformerArchive* _this = reinterpret_cast< IdempotentSelectionTransformerArchive* >(object);
  (void)_this;
}
void IdempotentSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IdempotentSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IdempotentSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.IdempotentSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(archived_selection_ != nullptr);
    archived_selection_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdempotentSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference archived_selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_archived_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IdempotentSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.IdempotentSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference archived_selection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::archived_selection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.IdempotentSelectionTransformerArchive)
  return target;
}

size_t IdempotentSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.IdempotentSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSP.Reference archived_selection = 1;
  if (_internal_has_archived_selection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *archived_selection_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdempotentSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IdempotentSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdempotentSelectionTransformerArchive::GetClassData() const { return &_class_data_; }

void IdempotentSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<IdempotentSelectionTransformerArchive *>(to)->MergeFrom(
      static_cast<const IdempotentSelectionTransformerArchive &>(from));
}


void IdempotentSelectionTransformerArchive::MergeFrom(const IdempotentSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.IdempotentSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_archived_selection()) {
    _internal_mutable_archived_selection()->::TSP::Reference::MergeFrom(from._internal_archived_selection());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdempotentSelectionTransformerArchive::CopyFrom(const IdempotentSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.IdempotentSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdempotentSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_archived_selection()) {
    if (!archived_selection_->IsInitialized()) return false;
  }
  return true;
}

void IdempotentSelectionTransformerArchive::InternalSwap(IdempotentSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(archived_selection_, other->archived_selection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IdempotentSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[87]);
}

// ===================================================================

class WPSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<WPSelectionTransformerArchive>()._has_bits_);
  static const ::TST::TableSubSelectionTransformerBaseArchive& super(const WPSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& archived_selection(const WPSelectionTransformerArchive* msg);
  static void set_has_archived_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDCoordArchive& origin_cell_uid(const WPSelectionTransformerArchive* msg);
  static void set_has_origin_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableSubSelectionTransformerBaseArchive&
WPSelectionTransformerArchive::_Internal::super(const WPSelectionTransformerArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
WPSelectionTransformerArchive::_Internal::archived_selection(const WPSelectionTransformerArchive* msg) {
  return *msg->archived_selection_;
}
const ::TSP::UUIDCoordArchive&
WPSelectionTransformerArchive::_Internal::origin_cell_uid(const WPSelectionTransformerArchive* msg) {
  return *msg->origin_cell_uid_;
}
void WPSelectionTransformerArchive::clear_archived_selection() {
  if (archived_selection_ != nullptr) archived_selection_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void WPSelectionTransformerArchive::clear_origin_cell_uid() {
  if (origin_cell_uid_ != nullptr) origin_cell_uid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
WPSelectionTransformerArchive::WPSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.WPSelectionTransformerArchive)
}
WPSelectionTransformerArchive::WPSelectionTransformerArchive(const WPSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableSubSelectionTransformerBaseArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_archived_selection()) {
    archived_selection_ = new ::TSP::Reference(*from.archived_selection_);
  } else {
    archived_selection_ = nullptr;
  }
  if (from._internal_has_origin_cell_uid()) {
    origin_cell_uid_ = new ::TSP::UUIDCoordArchive(*from.origin_cell_uid_);
  } else {
    origin_cell_uid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.WPSelectionTransformerArchive)
}

inline void WPSelectionTransformerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&origin_cell_uid_) -
    reinterpret_cast<char*>(&super_)) + sizeof(origin_cell_uid_));
}

WPSelectionTransformerArchive::~WPSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TST.WPSelectionTransformerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WPSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete archived_selection_;
  if (this != internal_default_instance()) delete origin_cell_uid_;
}

void WPSelectionTransformerArchive::ArenaDtor(void* object) {
  WPSelectionTransformerArchive* _this = reinterpret_cast< WPSelectionTransformerArchive* >(object);
  (void)_this;
}
void WPSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WPSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WPSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.WPSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(archived_selection_ != nullptr);
      archived_selection_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(origin_cell_uid_ != nullptr);
      origin_cell_uid_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WPSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference archived_selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_archived_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_cell_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WPSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.WPSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference archived_selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::archived_selection(this), target, stream);
  }

  // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::origin_cell_uid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.WPSelectionTransformerArchive)
  return target;
}

size_t WPSelectionTransformerArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.WPSelectionTransformerArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_archived_selection()) {
    // required .TSP.Reference archived_selection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *archived_selection_);
  }

  return total_size;
}
size_t WPSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.WPSelectionTransformerArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference archived_selection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *archived_selection_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_cell_uid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WPSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WPSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WPSelectionTransformerArchive::GetClassData() const { return &_class_data_; }

void WPSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WPSelectionTransformerArchive *>(to)->MergeFrom(
      static_cast<const WPSelectionTransformerArchive &>(from));
}


void WPSelectionTransformerArchive::MergeFrom(const WPSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.WPSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableSubSelectionTransformerBaseArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_archived_selection()->::TSP::Reference::MergeFrom(from._internal_archived_selection());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_origin_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(from._internal_origin_cell_uid());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WPSelectionTransformerArchive::CopyFrom(const WPSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.WPSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_archived_selection()) {
    if (!archived_selection_->IsInitialized()) return false;
  }
  if (_internal_has_origin_cell_uid()) {
    if (!origin_cell_uid_->IsInitialized()) return false;
  }
  return true;
}

void WPSelectionTransformerArchive::InternalSwap(WPSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WPSelectionTransformerArchive, origin_cell_uid_)
      + sizeof(WPSelectionTransformerArchive::origin_cell_uid_)
      - PROTOBUF_FIELD_OFFSET(WPSelectionTransformerArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WPSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[88]);
}

// ===================================================================

class TableSubSelectionTransformerBaseArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableSubSelectionTransformerBaseArchive>()._has_bits_);
  static const ::TSP::UUIDPath& table_info_id_path(const TableSubSelectionTransformerBaseArchive* msg);
  static void set_has_table_info_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUIDPath&
TableSubSelectionTransformerBaseArchive::_Internal::table_info_id_path(const TableSubSelectionTransformerBaseArchive* msg) {
  return *msg->table_info_id_path_;
}
void TableSubSelectionTransformerBaseArchive::clear_table_info_id_path() {
  if (table_info_id_path_ != nullptr) table_info_id_path_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TableSubSelectionTransformerBaseArchive::TableSubSelectionTransformerBaseArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TableSubSelectionTransformerBaseArchive)
}
TableSubSelectionTransformerBaseArchive::TableSubSelectionTransformerBaseArchive(const TableSubSelectionTransformerBaseArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_info_id_path()) {
    table_info_id_path_ = new ::TSP::UUIDPath(*from.table_info_id_path_);
  } else {
    table_info_id_path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.TableSubSelectionTransformerBaseArchive)
}

inline void TableSubSelectionTransformerBaseArchive::SharedCtor() {
table_info_id_path_ = nullptr;
}

TableSubSelectionTransformerBaseArchive::~TableSubSelectionTransformerBaseArchive() {
  // @@protoc_insertion_point(destructor:TST.TableSubSelectionTransformerBaseArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableSubSelectionTransformerBaseArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete table_info_id_path_;
}

void TableSubSelectionTransformerBaseArchive::ArenaDtor(void* object) {
  TableSubSelectionTransformerBaseArchive* _this = reinterpret_cast< TableSubSelectionTransformerBaseArchive* >(object);
  (void)_this;
}
void TableSubSelectionTransformerBaseArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableSubSelectionTransformerBaseArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableSubSelectionTransformerBaseArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableSubSelectionTransformerBaseArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(table_info_id_path_ != nullptr);
    table_info_id_path_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableSubSelectionTransformerBaseArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUIDPath table_info_id_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableSubSelectionTransformerBaseArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableSubSelectionTransformerBaseArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUIDPath table_info_id_path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::table_info_id_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableSubSelectionTransformerBaseArchive)
  return target;
}

size_t TableSubSelectionTransformerBaseArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableSubSelectionTransformerBaseArchive)
  size_t total_size = 0;

  // required .TSP.UUIDPath table_info_id_path = 1;
  if (_internal_has_table_info_id_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_info_id_path_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableSubSelectionTransformerBaseArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableSubSelectionTransformerBaseArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableSubSelectionTransformerBaseArchive::GetClassData() const { return &_class_data_; }

void TableSubSelectionTransformerBaseArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableSubSelectionTransformerBaseArchive *>(to)->MergeFrom(
      static_cast<const TableSubSelectionTransformerBaseArchive &>(from));
}


void TableSubSelectionTransformerBaseArchive::MergeFrom(const TableSubSelectionTransformerBaseArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TableSubSelectionTransformerBaseArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_table_info_id_path()) {
    _internal_mutable_table_info_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_table_info_id_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableSubSelectionTransformerBaseArchive::CopyFrom(const TableSubSelectionTransformerBaseArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableSubSelectionTransformerBaseArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSubSelectionTransformerBaseArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_table_info_id_path()) {
    if (!table_info_id_path_->IsInitialized()) return false;
  }
  return true;
}

void TableSubSelectionTransformerBaseArchive::InternalSwap(TableSubSelectionTransformerBaseArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(table_info_id_path_, other->table_info_id_path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableSubSelectionTransformerBaseArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[89]);
}

// ===================================================================

class TableNameSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableNameSelectionTransformerArchive>()._has_bits_);
  static const ::TST::TableSubSelectionTransformerBaseArchive& super(const TableNameSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableSubSelectionTransformerBaseArchive&
TableNameSelectionTransformerArchive::_Internal::super(const TableNameSelectionTransformerArchive* msg) {
  return *msg->super_;
}
TableNameSelectionTransformerArchive::TableNameSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.TableNameSelectionTransformerArchive)
}
TableNameSelectionTransformerArchive::TableNameSelectionTransformerArchive(const TableNameSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableSubSelectionTransformerBaseArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.TableNameSelectionTransformerArchive)
}

inline void TableNameSelectionTransformerArchive::SharedCtor() {
super_ = nullptr;
}

TableNameSelectionTransformerArchive::~TableNameSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TST.TableNameSelectionTransformerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableNameSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void TableNameSelectionTransformerArchive::ArenaDtor(void* object) {
  TableNameSelectionTransformerArchive* _this = reinterpret_cast< TableNameSelectionTransformerArchive* >(object);
  (void)_this;
}
void TableNameSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableNameSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableNameSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableNameSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableNameSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableNameSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableNameSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableNameSelectionTransformerArchive)
  return target;
}

size_t TableNameSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableNameSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableNameSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableNameSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableNameSelectionTransformerArchive::GetClassData() const { return &_class_data_; }

void TableNameSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableNameSelectionTransformerArchive *>(to)->MergeFrom(
      static_cast<const TableNameSelectionTransformerArchive &>(from));
}


void TableNameSelectionTransformerArchive::MergeFrom(const TableNameSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.TableNameSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TST::TableSubSelectionTransformerBaseArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableNameSelectionTransformerArchive::CopyFrom(const TableNameSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableNameSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableNameSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void TableNameSelectionTransformerArchive::InternalSwap(TableNameSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableNameSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[90]);
}

// ===================================================================

class ControlCellSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlCellSelectionTransformerArchive>()._has_bits_);
  static const ::TST::TableSubSelectionTransformerBaseArchive& super(const ControlCellSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CellUIDListArchive& cell_uids(const ControlCellSelectionTransformerArchive* msg);
  static void set_has_cell_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDCoordArchive& origin_cell_uid(const ControlCellSelectionTransformerArchive* msg);
  static void set_has_origin_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::CellCoordinateArchive& origin_cell_id(const ControlCellSelectionTransformerArchive* msg);
  static void set_has_origin_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

const ::TST::TableSubSelectionTransformerBaseArchive&
ControlCellSelectionTransformerArchive::_Internal::super(const ControlCellSelectionTransformerArchive* msg) {
  return *msg->super_;
}
const ::TST::CellUIDListArchive&
ControlCellSelectionTransformerArchive::_Internal::cell_uids(const ControlCellSelectionTransformerArchive* msg) {
  return *msg->cell_uids_;
}
const ::TSP::UUIDCoordArchive&
ControlCellSelectionTransformerArchive::_Internal::origin_cell_uid(const ControlCellSelectionTransformerArchive* msg) {
  return *msg->origin_cell_uid_;
}
const ::TSCE::CellCoordinateArchive&
ControlCellSelectionTransformerArchive::_Internal::origin_cell_id(const ControlCellSelectionTransformerArchive* msg) {
  return *msg->origin_cell_id_;
}
void ControlCellSelectionTransformerArchive::clear_cell_uids() {
  if (cell_uids_ != nullptr) cell_uids_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ControlCellSelectionTransformerArchive::clear_origin_cell_uid() {
  if (origin_cell_uid_ != nullptr) origin_cell_uid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ControlCellSelectionTransformerArchive::clear_origin_cell_id() {
  if (origin_cell_id_ != nullptr) origin_cell_id_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ControlCellSelectionTransformerArchive::ControlCellSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.ControlCellSelectionTransformerArchive)
}
ControlCellSelectionTransformerArchive::ControlCellSelectionTransformerArchive(const ControlCellSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableSubSelectionTransformerBaseArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_cell_uids()) {
    cell_uids_ = new ::TST::CellUIDListArchive(*from.cell_uids_);
  } else {
    cell_uids_ = nullptr;
  }
  if (from._internal_has_origin_cell_uid()) {
    origin_cell_uid_ = new ::TSP::UUIDCoordArchive(*from.origin_cell_uid_);
  } else {
    origin_cell_uid_ = nullptr;
  }
  if (from._internal_has_origin_cell_id()) {
    origin_cell_id_ = new ::TSCE::CellCoordinateArchive(*from.origin_cell_id_);
  } else {
    origin_cell_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.ControlCellSelectionTransformerArchive)
}

inline void ControlCellSelectionTransformerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&origin_cell_id_) -
    reinterpret_cast<char*>(&super_)) + sizeof(origin_cell_id_));
}

ControlCellSelectionTransformerArchive::~ControlCellSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TST.ControlCellSelectionTransformerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlCellSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete cell_uids_;
  if (this != internal_default_instance()) delete origin_cell_uid_;
  if (this != internal_default_instance()) delete origin_cell_id_;
}

void ControlCellSelectionTransformerArchive::ArenaDtor(void* object) {
  ControlCellSelectionTransformerArchive* _this = reinterpret_cast< ControlCellSelectionTransformerArchive* >(object);
  (void)_this;
}
void ControlCellSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlCellSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlCellSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ControlCellSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_uids_ != nullptr);
      cell_uids_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(origin_cell_uid_ != nullptr);
      origin_cell_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(origin_cell_id_ != nullptr);
      origin_cell_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlCellSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellUIDListArchive cell_uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_cell_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.CellCoordinateArchive origin_cell_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_cell_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlCellSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ControlCellSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TST.CellUIDListArchive cell_uids = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cell_uids(this), target, stream);
  }

  // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::origin_cell_uid(this), target, stream);
  }

  // required .TSCE.CellCoordinateArchive origin_cell_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::origin_cell_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ControlCellSelectionTransformerArchive)
  return target;
}

size_t ControlCellSelectionTransformerArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.ControlCellSelectionTransformerArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_origin_cell_id()) {
    // required .TSCE.CellCoordinateArchive origin_cell_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_cell_id_);
  }

  return total_size;
}
size_t ControlCellSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ControlCellSelectionTransformerArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSCE.CellCoordinateArchive origin_cell_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_cell_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TST.CellUIDListArchive cell_uids = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_uids_);
    }

    // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *origin_cell_uid_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlCellSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlCellSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlCellSelectionTransformerArchive::GetClassData() const { return &_class_data_; }

void ControlCellSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ControlCellSelectionTransformerArchive *>(to)->MergeFrom(
      static_cast<const ControlCellSelectionTransformerArchive &>(from));
}


void ControlCellSelectionTransformerArchive::MergeFrom(const ControlCellSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.ControlCellSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableSubSelectionTransformerBaseArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_uids()->::TST::CellUIDListArchive::MergeFrom(from._internal_cell_uids());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_origin_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(from._internal_origin_cell_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_origin_cell_id()->::TSCE::CellCoordinateArchive::MergeFrom(from._internal_origin_cell_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlCellSelectionTransformerArchive::CopyFrom(const ControlCellSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ControlCellSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCellSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uids()) {
    if (!cell_uids_->IsInitialized()) return false;
  }
  if (_internal_has_origin_cell_uid()) {
    if (!origin_cell_uid_->IsInitialized()) return false;
  }
  return true;
}

void ControlCellSelectionTransformerArchive::InternalSwap(ControlCellSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlCellSelectionTransformerArchive, origin_cell_id_)
      + sizeof(ControlCellSelectionTransformerArchive::origin_cell_id_)
      - PROTOBUF_FIELD_OFFSET(ControlCellSelectionTransformerArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlCellSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[91]);
}

// ===================================================================

class StockCellSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StockCellSelectionTransformerArchive>()._has_bits_);
  static const ::TST::TableSubSelectionTransformerBaseArchive& super(const StockCellSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CellUIDListArchive& cell_uids(const StockCellSelectionTransformerArchive* msg);
  static void set_has_cell_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDCoordArchive& origin_cell_uid(const StockCellSelectionTransformerArchive* msg);
  static void set_has_origin_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::CellCoordinateArchive& origin_cell_id(const StockCellSelectionTransformerArchive* msg);
  static void set_has_origin_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

const ::TST::TableSubSelectionTransformerBaseArchive&
StockCellSelectionTransformerArchive::_Internal::super(const StockCellSelectionTransformerArchive* msg) {
  return *msg->super_;
}
const ::TST::CellUIDListArchive&
StockCellSelectionTransformerArchive::_Internal::cell_uids(const StockCellSelectionTransformerArchive* msg) {
  return *msg->cell_uids_;
}
const ::TSP::UUIDCoordArchive&
StockCellSelectionTransformerArchive::_Internal::origin_cell_uid(const StockCellSelectionTransformerArchive* msg) {
  return *msg->origin_cell_uid_;
}
const ::TSCE::CellCoordinateArchive&
StockCellSelectionTransformerArchive::_Internal::origin_cell_id(const StockCellSelectionTransformerArchive* msg) {
  return *msg->origin_cell_id_;
}
void StockCellSelectionTransformerArchive::clear_cell_uids() {
  if (cell_uids_ != nullptr) cell_uids_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void StockCellSelectionTransformerArchive::clear_origin_cell_uid() {
  if (origin_cell_uid_ != nullptr) origin_cell_uid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void StockCellSelectionTransformerArchive::clear_origin_cell_id() {
  if (origin_cell_id_ != nullptr) origin_cell_id_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
StockCellSelectionTransformerArchive::StockCellSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.StockCellSelectionTransformerArchive)
}
StockCellSelectionTransformerArchive::StockCellSelectionTransformerArchive(const StockCellSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableSubSelectionTransformerBaseArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_cell_uids()) {
    cell_uids_ = new ::TST::CellUIDListArchive(*from.cell_uids_);
  } else {
    cell_uids_ = nullptr;
  }
  if (from._internal_has_origin_cell_uid()) {
    origin_cell_uid_ = new ::TSP::UUIDCoordArchive(*from.origin_cell_uid_);
  } else {
    origin_cell_uid_ = nullptr;
  }
  if (from._internal_has_origin_cell_id()) {
    origin_cell_id_ = new ::TSCE::CellCoordinateArchive(*from.origin_cell_id_);
  } else {
    origin_cell_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.StockCellSelectionTransformerArchive)
}

inline void StockCellSelectionTransformerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&origin_cell_id_) -
    reinterpret_cast<char*>(&super_)) + sizeof(origin_cell_id_));
}

StockCellSelectionTransformerArchive::~StockCellSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TST.StockCellSelectionTransformerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StockCellSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete cell_uids_;
  if (this != internal_default_instance()) delete origin_cell_uid_;
  if (this != internal_default_instance()) delete origin_cell_id_;
}

void StockCellSelectionTransformerArchive::ArenaDtor(void* object) {
  StockCellSelectionTransformerArchive* _this = reinterpret_cast< StockCellSelectionTransformerArchive* >(object);
  (void)_this;
}
void StockCellSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StockCellSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StockCellSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StockCellSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_uids_ != nullptr);
      cell_uids_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(origin_cell_uid_ != nullptr);
      origin_cell_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(origin_cell_id_ != nullptr);
      origin_cell_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StockCellSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellUIDListArchive cell_uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_cell_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.CellCoordinateArchive origin_cell_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_cell_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StockCellSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StockCellSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TST.CellUIDListArchive cell_uids = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cell_uids(this), target, stream);
  }

  // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::origin_cell_uid(this), target, stream);
  }

  // required .TSCE.CellCoordinateArchive origin_cell_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::origin_cell_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StockCellSelectionTransformerArchive)
  return target;
}

size_t StockCellSelectionTransformerArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.StockCellSelectionTransformerArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_origin_cell_id()) {
    // required .TSCE.CellCoordinateArchive origin_cell_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_cell_id_);
  }

  return total_size;
}
size_t StockCellSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StockCellSelectionTransformerArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSCE.CellCoordinateArchive origin_cell_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_cell_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TST.CellUIDListArchive cell_uids = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_uids_);
    }

    // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *origin_cell_uid_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StockCellSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StockCellSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StockCellSelectionTransformerArchive::GetClassData() const { return &_class_data_; }

void StockCellSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StockCellSelectionTransformerArchive *>(to)->MergeFrom(
      static_cast<const StockCellSelectionTransformerArchive &>(from));
}


void StockCellSelectionTransformerArchive::MergeFrom(const StockCellSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.StockCellSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableSubSelectionTransformerBaseArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_uids()->::TST::CellUIDListArchive::MergeFrom(from._internal_cell_uids());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_origin_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(from._internal_origin_cell_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_origin_cell_id()->::TSCE::CellCoordinateArchive::MergeFrom(from._internal_origin_cell_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StockCellSelectionTransformerArchive::CopyFrom(const StockCellSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StockCellSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockCellSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uids()) {
    if (!cell_uids_->IsInitialized()) return false;
  }
  if (_internal_has_origin_cell_uid()) {
    if (!origin_cell_uid_->IsInitialized()) return false;
  }
  return true;
}

void StockCellSelectionTransformerArchive::InternalSwap(StockCellSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StockCellSelectionTransformerArchive, origin_cell_id_)
      + sizeof(StockCellSelectionTransformerArchive::origin_cell_id_)
      - PROTOBUF_FIELD_OFFSET(StockCellSelectionTransformerArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StockCellSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[92]);
}

// ===================================================================

class RegionSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionSelectionTransformerArchive>()._has_bits_);
  static const ::TST::TableSubSelectionTransformerBaseArchive& super(const RegionSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CellUIDListArchive& cell_uids(const RegionSelectionTransformerArchive* msg);
  static void set_has_cell_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDCoordArchive& origin_cell_uid(const RegionSelectionTransformerArchive* msg);
  static void set_has_origin_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUIDCoordArchive& anchor_cell_uid(const RegionSelectionTransformerArchive* msg);
  static void set_has_anchor_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUIDCoordArchive& cursor_cell_uid(const RegionSelectionTransformerArchive* msg);
  static void set_has_cursor_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000019) ^ 0x00000019) != 0;
  }
};

const ::TST::TableSubSelectionTransformerBaseArchive&
RegionSelectionTransformerArchive::_Internal::super(const RegionSelectionTransformerArchive* msg) {
  return *msg->super_;
}
const ::TST::CellUIDListArchive&
RegionSelectionTransformerArchive::_Internal::cell_uids(const RegionSelectionTransformerArchive* msg) {
  return *msg->cell_uids_;
}
const ::TSP::UUIDCoordArchive&
RegionSelectionTransformerArchive::_Internal::origin_cell_uid(const RegionSelectionTransformerArchive* msg) {
  return *msg->origin_cell_uid_;
}
const ::TSP::UUIDCoordArchive&
RegionSelectionTransformerArchive::_Internal::anchor_cell_uid(const RegionSelectionTransformerArchive* msg) {
  return *msg->anchor_cell_uid_;
}
const ::TSP::UUIDCoordArchive&
RegionSelectionTransformerArchive::_Internal::cursor_cell_uid(const RegionSelectionTransformerArchive* msg) {
  return *msg->cursor_cell_uid_;
}
void RegionSelectionTransformerArchive::clear_cell_uids() {
  if (cell_uids_ != nullptr) cell_uids_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void RegionSelectionTransformerArchive::clear_origin_cell_uid() {
  if (origin_cell_uid_ != nullptr) origin_cell_uid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void RegionSelectionTransformerArchive::clear_anchor_cell_uid() {
  if (anchor_cell_uid_ != nullptr) anchor_cell_uid_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void RegionSelectionTransformerArchive::clear_cursor_cell_uid() {
  if (cursor_cell_uid_ != nullptr) cursor_cell_uid_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
RegionSelectionTransformerArchive::RegionSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.RegionSelectionTransformerArchive)
}
RegionSelectionTransformerArchive::RegionSelectionTransformerArchive(const RegionSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableSubSelectionTransformerBaseArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_cell_uids()) {
    cell_uids_ = new ::TST::CellUIDListArchive(*from.cell_uids_);
  } else {
    cell_uids_ = nullptr;
  }
  if (from._internal_has_origin_cell_uid()) {
    origin_cell_uid_ = new ::TSP::UUIDCoordArchive(*from.origin_cell_uid_);
  } else {
    origin_cell_uid_ = nullptr;
  }
  if (from._internal_has_anchor_cell_uid()) {
    anchor_cell_uid_ = new ::TSP::UUIDCoordArchive(*from.anchor_cell_uid_);
  } else {
    anchor_cell_uid_ = nullptr;
  }
  if (from._internal_has_cursor_cell_uid()) {
    cursor_cell_uid_ = new ::TSP::UUIDCoordArchive(*from.cursor_cell_uid_);
  } else {
    cursor_cell_uid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.RegionSelectionTransformerArchive)
}

inline void RegionSelectionTransformerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cursor_cell_uid_) -
    reinterpret_cast<char*>(&super_)) + sizeof(cursor_cell_uid_));
}

RegionSelectionTransformerArchive::~RegionSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TST.RegionSelectionTransformerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegionSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete cell_uids_;
  if (this != internal_default_instance()) delete origin_cell_uid_;
  if (this != internal_default_instance()) delete anchor_cell_uid_;
  if (this != internal_default_instance()) delete cursor_cell_uid_;
}

void RegionSelectionTransformerArchive::ArenaDtor(void* object) {
  RegionSelectionTransformerArchive* _this = reinterpret_cast< RegionSelectionTransformerArchive* >(object);
  (void)_this;
}
void RegionSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegionSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegionSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.RegionSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_uids_ != nullptr);
      cell_uids_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(origin_cell_uid_ != nullptr);
      origin_cell_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(anchor_cell_uid_ != nullptr);
      anchor_cell_uid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(cursor_cell_uid_ != nullptr);
      cursor_cell_uid_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.CellUIDListArchive cell_uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_cell_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDCoordArchive anchor_cell_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchor_cell_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDCoordArchive cursor_cell_uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cursor_cell_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.RegionSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TST.CellUIDListArchive cell_uids = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cell_uids(this), target, stream);
  }

  // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::origin_cell_uid(this), target, stream);
  }

  // required .TSP.UUIDCoordArchive anchor_cell_uid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::anchor_cell_uid(this), target, stream);
  }

  // required .TSP.UUIDCoordArchive cursor_cell_uid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cursor_cell_uid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.RegionSelectionTransformerArchive)
  return target;
}

size_t RegionSelectionTransformerArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.RegionSelectionTransformerArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_anchor_cell_uid()) {
    // required .TSP.UUIDCoordArchive anchor_cell_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anchor_cell_uid_);
  }

  if (_internal_has_cursor_cell_uid()) {
    // required .TSP.UUIDCoordArchive cursor_cell_uid = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cursor_cell_uid_);
  }

  return total_size;
}
size_t RegionSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.RegionSelectionTransformerArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000019) ^ 0x00000019) == 0) {  // All required fields are present.
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUIDCoordArchive anchor_cell_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anchor_cell_uid_);

    // required .TSP.UUIDCoordArchive cursor_cell_uid = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cursor_cell_uid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TST.CellUIDListArchive cell_uids = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_uids_);
    }

    // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *origin_cell_uid_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegionSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegionSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegionSelectionTransformerArchive::GetClassData() const { return &_class_data_; }

void RegionSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RegionSelectionTransformerArchive *>(to)->MergeFrom(
      static_cast<const RegionSelectionTransformerArchive &>(from));
}


void RegionSelectionTransformerArchive::MergeFrom(const RegionSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.RegionSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableSubSelectionTransformerBaseArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_uids()->::TST::CellUIDListArchive::MergeFrom(from._internal_cell_uids());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_origin_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(from._internal_origin_cell_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_anchor_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(from._internal_anchor_cell_uid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_cursor_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(from._internal_cursor_cell_uid());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegionSelectionTransformerArchive::CopyFrom(const RegionSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.RegionSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uids()) {
    if (!cell_uids_->IsInitialized()) return false;
  }
  if (_internal_has_origin_cell_uid()) {
    if (!origin_cell_uid_->IsInitialized()) return false;
  }
  if (_internal_has_anchor_cell_uid()) {
    if (!anchor_cell_uid_->IsInitialized()) return false;
  }
  if (_internal_has_cursor_cell_uid()) {
    if (!cursor_cell_uid_->IsInitialized()) return false;
  }
  return true;
}

void RegionSelectionTransformerArchive::InternalSwap(RegionSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionSelectionTransformerArchive, cursor_cell_uid_)
      + sizeof(RegionSelectionTransformerArchive::cursor_cell_uid_)
      - PROTOBUF_FIELD_OFFSET(RegionSelectionTransformerArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[93]);
}

// ===================================================================

class StrokeSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StrokeSelectionTransformerArchive>()._has_bits_);
  static const ::TST::TableSubSelectionTransformerBaseArchive& super(const StrokeSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& archived_selection(const StrokeSelectionTransformerArchive* msg);
  static void set_has_archived_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableSubSelectionTransformerBaseArchive&
StrokeSelectionTransformerArchive::_Internal::super(const StrokeSelectionTransformerArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
StrokeSelectionTransformerArchive::_Internal::archived_selection(const StrokeSelectionTransformerArchive* msg) {
  return *msg->archived_selection_;
}
void StrokeSelectionTransformerArchive::clear_archived_selection() {
  if (archived_selection_ != nullptr) archived_selection_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
StrokeSelectionTransformerArchive::StrokeSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.StrokeSelectionTransformerArchive)
}
StrokeSelectionTransformerArchive::StrokeSelectionTransformerArchive(const StrokeSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableSubSelectionTransformerBaseArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_archived_selection()) {
    archived_selection_ = new ::TSP::Reference(*from.archived_selection_);
  } else {
    archived_selection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.StrokeSelectionTransformerArchive)
}

inline void StrokeSelectionTransformerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&archived_selection_) -
    reinterpret_cast<char*>(&super_)) + sizeof(archived_selection_));
}

StrokeSelectionTransformerArchive::~StrokeSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TST.StrokeSelectionTransformerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StrokeSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete archived_selection_;
}

void StrokeSelectionTransformerArchive::ArenaDtor(void* object) {
  StrokeSelectionTransformerArchive* _this = reinterpret_cast< StrokeSelectionTransformerArchive* >(object);
  (void)_this;
}
void StrokeSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StrokeSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StrokeSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StrokeSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(archived_selection_ != nullptr);
      archived_selection_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrokeSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference archived_selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_archived_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StrokeSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StrokeSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference archived_selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::archived_selection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StrokeSelectionTransformerArchive)
  return target;
}

size_t StrokeSelectionTransformerArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.StrokeSelectionTransformerArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_archived_selection()) {
    // required .TSP.Reference archived_selection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *archived_selection_);
  }

  return total_size;
}
size_t StrokeSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StrokeSelectionTransformerArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference archived_selection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *archived_selection_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrokeSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StrokeSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrokeSelectionTransformerArchive::GetClassData() const { return &_class_data_; }

void StrokeSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StrokeSelectionTransformerArchive *>(to)->MergeFrom(
      static_cast<const StrokeSelectionTransformerArchive &>(from));
}


void StrokeSelectionTransformerArchive::MergeFrom(const StrokeSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.StrokeSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableSubSelectionTransformerBaseArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_archived_selection()->::TSP::Reference::MergeFrom(from._internal_archived_selection());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrokeSelectionTransformerArchive::CopyFrom(const StrokeSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StrokeSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrokeSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_archived_selection()) {
    if (!archived_selection_->IsInitialized()) return false;
  }
  return true;
}

void StrokeSelectionTransformerArchive::InternalSwap(StrokeSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StrokeSelectionTransformerArchive, archived_selection_)
      + sizeof(StrokeSelectionTransformerArchive::archived_selection_)
      - PROTOBUF_FIELD_OFFSET(StrokeSelectionTransformerArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StrokeSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[94]);
}

// ===================================================================

class RowColumnSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RowColumnSelectionTransformerArchive>()._has_bits_);
  static const ::TST::TableSubSelectionTransformerBaseArchive& super(const RowColumnSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selection_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableSubSelectionTransformerBaseArchive&
RowColumnSelectionTransformerArchive::_Internal::super(const RowColumnSelectionTransformerArchive* msg) {
  return *msg->super_;
}
void RowColumnSelectionTransformerArchive::clear_row_col_uids() {
  row_col_uids_.Clear();
}
RowColumnSelectionTransformerArchive::RowColumnSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  row_col_uids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.RowColumnSelectionTransformerArchive)
}
RowColumnSelectionTransformerArchive::RowColumnSelectionTransformerArchive(const RowColumnSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      row_col_uids_(from.row_col_uids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableSubSelectionTransformerBaseArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  selection_type_ = from.selection_type_;
  // @@protoc_insertion_point(copy_constructor:TST.RowColumnSelectionTransformerArchive)
}

inline void RowColumnSelectionTransformerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&selection_type_) -
    reinterpret_cast<char*>(&super_)) + sizeof(selection_type_));
}

RowColumnSelectionTransformerArchive::~RowColumnSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TST.RowColumnSelectionTransformerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RowColumnSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void RowColumnSelectionTransformerArchive::ArenaDtor(void* object) {
  RowColumnSelectionTransformerArchive* _this = reinterpret_cast< RowColumnSelectionTransformerArchive* >(object);
  (void)_this;
}
void RowColumnSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RowColumnSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RowColumnSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.RowColumnSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_col_uids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  selection_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RowColumnSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TST.SelectionTypeArchive selection_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::SelectionTypeArchive_IsValid(val))) {
            _internal_set_selection_type(static_cast<::TST::SelectionTypeArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID row_col_uids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_col_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RowColumnSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.RowColumnSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TST.SelectionTypeArchive selection_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_selection_type(), target);
  }

  // repeated .TSP.UUID row_col_uids = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_col_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_row_col_uids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.RowColumnSelectionTransformerArchive)
  return target;
}

size_t RowColumnSelectionTransformerArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.RowColumnSelectionTransformerArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_selection_type()) {
    // required .TST.SelectionTypeArchive selection_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_selection_type());
  }

  return total_size;
}
size_t RowColumnSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.RowColumnSelectionTransformerArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TST.SelectionTypeArchive selection_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_selection_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID row_col_uids = 3;
  total_size += 1UL * this->_internal_row_col_uids_size();
  for (const auto& msg : this->row_col_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RowColumnSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RowColumnSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RowColumnSelectionTransformerArchive::GetClassData() const { return &_class_data_; }

void RowColumnSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RowColumnSelectionTransformerArchive *>(to)->MergeFrom(
      static_cast<const RowColumnSelectionTransformerArchive &>(from));
}


void RowColumnSelectionTransformerArchive::MergeFrom(const RowColumnSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.RowColumnSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_col_uids_.MergeFrom(from.row_col_uids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableSubSelectionTransformerBaseArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      selection_type_ = from.selection_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RowColumnSelectionTransformerArchive::CopyFrom(const RowColumnSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.RowColumnSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowColumnSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(row_col_uids_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void RowColumnSelectionTransformerArchive::InternalSwap(RowColumnSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  row_col_uids_.InternalSwap(&other->row_col_uids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RowColumnSelectionTransformerArchive, selection_type_)
      + sizeof(RowColumnSelectionTransformerArchive::selection_type_)
      - PROTOBUF_FIELD_OFFSET(RowColumnSelectionTransformerArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RowColumnSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[95]);
}

// ===================================================================

class CommandCategoryMoveRowsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandCategoryMoveRowsArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandCategoryMoveRowsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandCategoryMoveRowsArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& undo_cell_diff_map(const CommandCategoryMoveRowsArchive* msg);
  static void set_has_undo_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::GroupColumnListArchive& grouping_columns(const CommandCategoryMoveRowsArchive* msg);
  static void set_has_grouping_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000013) ^ 0x00000013) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandCategoryMoveRowsArchive::_Internal::super(const CommandCategoryMoveRowsArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
CommandCategoryMoveRowsArchive::_Internal::cell_diff_map(const CommandCategoryMoveRowsArchive* msg) {
  return *msg->cell_diff_map_;
}
const ::TSP::Reference&
CommandCategoryMoveRowsArchive::_Internal::undo_cell_diff_map(const CommandCategoryMoveRowsArchive* msg) {
  return *msg->undo_cell_diff_map_;
}
const ::TST::GroupColumnListArchive&
CommandCategoryMoveRowsArchive::_Internal::grouping_columns(const CommandCategoryMoveRowsArchive* msg) {
  return *msg->grouping_columns_;
}
void CommandCategoryMoveRowsArchive::clear_category_row_order() {
  category_row_order_.Clear();
}
void CommandCategoryMoveRowsArchive::clear_undo_category_row_order() {
  undo_category_row_order_.Clear();
}
void CommandCategoryMoveRowsArchive::clear_cell_diff_map() {
  if (cell_diff_map_ != nullptr) cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandCategoryMoveRowsArchive::clear_undo_cell_diff_map() {
  if (undo_cell_diff_map_ != nullptr) undo_cell_diff_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandCategoryMoveRowsArchive::clear_grouping_columns() {
  if (grouping_columns_ != nullptr) grouping_columns_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CommandCategoryMoveRowsArchive::CommandCategoryMoveRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  category_row_order_(arena),
  undo_category_row_order_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandCategoryMoveRowsArchive)
}
CommandCategoryMoveRowsArchive::CommandCategoryMoveRowsArchive(const CommandCategoryMoveRowsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      category_row_order_(from.category_row_order_),
      undo_category_row_order_(from.undo_category_row_order_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_cell_diff_map()) {
    cell_diff_map_ = new ::TSP::Reference(*from.cell_diff_map_);
  } else {
    cell_diff_map_ = nullptr;
  }
  if (from._internal_has_undo_cell_diff_map()) {
    undo_cell_diff_map_ = new ::TSP::Reference(*from.undo_cell_diff_map_);
  } else {
    undo_cell_diff_map_ = nullptr;
  }
  if (from._internal_has_grouping_columns()) {
    grouping_columns_ = new ::TST::GroupColumnListArchive(*from.grouping_columns_);
  } else {
    grouping_columns_ = nullptr;
  }
  action_type_ = from.action_type_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandCategoryMoveRowsArchive)
}

inline void CommandCategoryMoveRowsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&action_type_) -
    reinterpret_cast<char*>(&super_)) + sizeof(action_type_));
}

CommandCategoryMoveRowsArchive::~CommandCategoryMoveRowsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandCategoryMoveRowsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandCategoryMoveRowsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete cell_diff_map_;
  if (this != internal_default_instance()) delete undo_cell_diff_map_;
  if (this != internal_default_instance()) delete grouping_columns_;
}

void CommandCategoryMoveRowsArchive::ArenaDtor(void* object) {
  CommandCategoryMoveRowsArchive* _this = reinterpret_cast< CommandCategoryMoveRowsArchive* >(object);
  (void)_this;
}
void CommandCategoryMoveRowsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandCategoryMoveRowsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandCategoryMoveRowsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandCategoryMoveRowsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_row_order_.Clear();
  undo_category_row_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_diff_map_ != nullptr);
      cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_cell_diff_map_ != nullptr);
      undo_cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(grouping_columns_ != nullptr);
      grouping_columns_->Clear();
    }
  }
  action_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandCategoryMoveRowsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 action_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_action_type(&has_bits);
          action_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID category_row_order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category_row_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID undo_category_row_order = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_category_row_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference cell_diff_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_cell_diff_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_cell_diff_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.GroupColumnListArchive grouping_columns = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_grouping_columns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandCategoryMoveRowsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandCategoryMoveRowsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required uint32 action_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_action_type(), target);
  }

  // repeated .TSP.UUID category_row_order = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_category_row_order_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_category_row_order(i), target, stream);
  }

  // repeated .TSP.UUID undo_category_row_order = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_undo_category_row_order_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_undo_category_row_order(i), target, stream);
  }

  // required .TSP.Reference cell_diff_map = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cell_diff_map(this), target, stream);
  }

  // optional .TSP.Reference undo_cell_diff_map = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::undo_cell_diff_map(this), target, stream);
  }

  // optional .TST.GroupColumnListArchive grouping_columns = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::grouping_columns(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandCategoryMoveRowsArchive)
  return target;
}

size_t CommandCategoryMoveRowsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandCategoryMoveRowsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_cell_diff_map()) {
    // required .TSP.Reference cell_diff_map = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_diff_map_);
  }

  if (_internal_has_action_type()) {
    // required uint32 action_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_action_type());
  }

  return total_size;
}
size_t CommandCategoryMoveRowsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandCategoryMoveRowsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference cell_diff_map = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_diff_map_);

    // required uint32 action_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_action_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID category_row_order = 3;
  total_size += 1UL * this->_internal_category_row_order_size();
  for (const auto& msg : this->category_row_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID undo_category_row_order = 4;
  total_size += 1UL * this->_internal_undo_category_row_order_size();
  for (const auto& msg : this->undo_category_row_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .TSP.Reference undo_cell_diff_map = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_cell_diff_map_);
    }

    // optional .TST.GroupColumnListArchive grouping_columns = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *grouping_columns_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandCategoryMoveRowsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandCategoryMoveRowsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandCategoryMoveRowsArchive::GetClassData() const { return &_class_data_; }

void CommandCategoryMoveRowsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandCategoryMoveRowsArchive *>(to)->MergeFrom(
      static_cast<const CommandCategoryMoveRowsArchive &>(from));
}


void CommandCategoryMoveRowsArchive::MergeFrom(const CommandCategoryMoveRowsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandCategoryMoveRowsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  category_row_order_.MergeFrom(from.category_row_order_);
  undo_category_row_order_.MergeFrom(from.undo_category_row_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_cell_diff_map()->::TSP::Reference::MergeFrom(from._internal_undo_cell_diff_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_grouping_columns()->::TST::GroupColumnListArchive::MergeFrom(from._internal_grouping_columns());
    }
    if (cached_has_bits & 0x00000010u) {
      action_type_ = from.action_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandCategoryMoveRowsArchive::CopyFrom(const CommandCategoryMoveRowsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandCategoryMoveRowsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandCategoryMoveRowsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(category_row_order_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(undo_category_row_order_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_cell_diff_map()) {
    if (!undo_cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_grouping_columns()) {
    if (!grouping_columns_->IsInitialized()) return false;
  }
  return true;
}

void CommandCategoryMoveRowsArchive::InternalSwap(CommandCategoryMoveRowsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  category_row_order_.InternalSwap(&other->category_row_order_);
  undo_category_row_order_.InternalSwap(&other->undo_category_row_order_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandCategoryMoveRowsArchive, action_type_)
      + sizeof(CommandCategoryMoveRowsArchive::action_type_)
      - PROTOBUF_FIELD_OFFSET(CommandCategoryMoveRowsArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandCategoryMoveRowsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[96]);
}

// ===================================================================

class CommandRewriteHiddenStatesForGroupByChangeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteHiddenStatesForGroupByChangeArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewriteHiddenStatesForGroupByChangeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::GroupByChangeArchive& group_by_change(const CommandRewriteHiddenStatesForGroupByChangeArchive* msg);
  static void set_has_group_by_change(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::ExpandCollapseStateArchive& collapsed_state(const CommandRewriteHiddenStatesForGroupByChangeArchive* msg);
  static void set_has_collapsed_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewriteHiddenStatesForGroupByChangeArchive::_Internal::super(const CommandRewriteHiddenStatesForGroupByChangeArchive* msg) {
  return *msg->super_;
}
const ::TSCE::GroupByChangeArchive&
CommandRewriteHiddenStatesForGroupByChangeArchive::_Internal::group_by_change(const CommandRewriteHiddenStatesForGroupByChangeArchive* msg) {
  return *msg->group_by_change_;
}
const ::TST::ExpandCollapseStateArchive&
CommandRewriteHiddenStatesForGroupByChangeArchive::_Internal::collapsed_state(const CommandRewriteHiddenStatesForGroupByChangeArchive* msg) {
  return *msg->collapsed_state_;
}
void CommandRewriteHiddenStatesForGroupByChangeArchive::clear_group_by_change() {
  if (group_by_change_ != nullptr) group_by_change_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandRewriteHiddenStatesForGroupByChangeArchive::clear_collapsed_state() {
  if (collapsed_state_ != nullptr) collapsed_state_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandRewriteHiddenStatesForGroupByChangeArchive::CommandRewriteHiddenStatesForGroupByChangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
}
CommandRewriteHiddenStatesForGroupByChangeArchive::CommandRewriteHiddenStatesForGroupByChangeArchive(const CommandRewriteHiddenStatesForGroupByChangeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_group_by_change()) {
    group_by_change_ = new ::TSCE::GroupByChangeArchive(*from.group_by_change_);
  } else {
    group_by_change_ = nullptr;
  }
  if (from._internal_has_collapsed_state()) {
    collapsed_state_ = new ::TST::ExpandCollapseStateArchive(*from.collapsed_state_);
  } else {
    collapsed_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
}

inline void CommandRewriteHiddenStatesForGroupByChangeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&collapsed_state_) -
    reinterpret_cast<char*>(&super_)) + sizeof(collapsed_state_));
}

CommandRewriteHiddenStatesForGroupByChangeArchive::~CommandRewriteHiddenStatesForGroupByChangeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandRewriteHiddenStatesForGroupByChangeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete group_by_change_;
  if (this != internal_default_instance()) delete collapsed_state_;
}

void CommandRewriteHiddenStatesForGroupByChangeArchive::ArenaDtor(void* object) {
  CommandRewriteHiddenStatesForGroupByChangeArchive* _this = reinterpret_cast< CommandRewriteHiddenStatesForGroupByChangeArchive* >(object);
  (void)_this;
}
void CommandRewriteHiddenStatesForGroupByChangeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandRewriteHiddenStatesForGroupByChangeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandRewriteHiddenStatesForGroupByChangeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(group_by_change_ != nullptr);
      group_by_change_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(collapsed_state_ != nullptr);
      collapsed_state_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteHiddenStatesForGroupByChangeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.GroupByChangeArchive group_by_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TST.ExpandCollapseStateArchive collapsed_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_collapsed_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRewriteHiddenStatesForGroupByChangeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSCE.GroupByChangeArchive group_by_change = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::group_by_change(this), target, stream);
  }

  // optional .TST.ExpandCollapseStateArchive collapsed_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::collapsed_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
  return target;
}

size_t CommandRewriteHiddenStatesForGroupByChangeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_group_by_change()) {
    // required .TSCE.GroupByChangeArchive group_by_change = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_by_change_);
  }

  return total_size;
}
size_t CommandRewriteHiddenStatesForGroupByChangeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSCE.GroupByChangeArchive group_by_change = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_by_change_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TST.ExpandCollapseStateArchive collapsed_state = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *collapsed_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteHiddenStatesForGroupByChangeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandRewriteHiddenStatesForGroupByChangeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteHiddenStatesForGroupByChangeArchive::GetClassData() const { return &_class_data_; }

void CommandRewriteHiddenStatesForGroupByChangeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandRewriteHiddenStatesForGroupByChangeArchive *>(to)->MergeFrom(
      static_cast<const CommandRewriteHiddenStatesForGroupByChangeArchive &>(from));
}


void CommandRewriteHiddenStatesForGroupByChangeArchive::MergeFrom(const CommandRewriteHiddenStatesForGroupByChangeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_group_by_change()->::TSCE::GroupByChangeArchive::MergeFrom(from._internal_group_by_change());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_collapsed_state()->::TST::ExpandCollapseStateArchive::MergeFrom(from._internal_collapsed_state());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteHiddenStatesForGroupByChangeArchive::CopyFrom(const CommandRewriteHiddenStatesForGroupByChangeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteHiddenStatesForGroupByChangeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_group_by_change()) {
    if (!group_by_change_->IsInitialized()) return false;
  }
  if (_internal_has_collapsed_state()) {
    if (!collapsed_state_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteHiddenStatesForGroupByChangeArchive::InternalSwap(CommandRewriteHiddenStatesForGroupByChangeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewriteHiddenStatesForGroupByChangeArchive, collapsed_state_)
      + sizeof(CommandRewriteHiddenStatesForGroupByChangeArchive::collapsed_state_)
      - PROTOBUF_FIELD_OFFSET(CommandRewriteHiddenStatesForGroupByChangeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteHiddenStatesForGroupByChangeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[97]);
}

// ===================================================================

class CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewritePencilAnnotationFormulasArchive_AnnotationPair>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& annotation(const CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* msg);
  static void set_has_annotation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::_Internal::annotation(const CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* msg) {
  return *msg->annotation_;
}
void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::clear_annotation() {
  if (annotation_ != nullptr) annotation_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
}
CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair(const CommandRewritePencilAnnotationFormulasArchive_AnnotationPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_annotation()) {
    annotation_ = new ::TSP::Reference(*from.annotation_);
  } else {
    annotation_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
}

inline void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&annotation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&annotation_)) + sizeof(index_));
}

CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::~CommandRewritePencilAnnotationFormulasArchive_AnnotationPair() {
  // @@protoc_insertion_point(destructor:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete annotation_;
}

void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::ArenaDtor(void* object) {
  CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* _this = reinterpret_cast< CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* >(object);
  (void)_this;
}
void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(annotation_ != nullptr);
    annotation_->Clear();
  }
  index_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference annotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_index(), target);
  }

  // required .TSP.Reference annotation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::annotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
  return target;
}

size_t CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
  size_t total_size = 0;

  if (_internal_has_annotation()) {
    // required .TSP.Reference annotation = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_);
  }

  if (_internal_has_index()) {
    // required uint64 index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_index());
  }

  return total_size;
}
size_t CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference annotation = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_);

    // required uint64 index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::GetClassData() const { return &_class_data_; }

void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandRewritePencilAnnotationFormulasArchive_AnnotationPair *>(to)->MergeFrom(
      static_cast<const CommandRewritePencilAnnotationFormulasArchive_AnnotationPair &>(from));
}


void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::MergeFrom(const CommandRewritePencilAnnotationFormulasArchive_AnnotationPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_annotation()->::TSP::Reference::MergeFrom(from._internal_annotation());
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::CopyFrom(const CommandRewritePencilAnnotationFormulasArchive_AnnotationPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_annotation()) {
    if (!annotation_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::InternalSwap(CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewritePencilAnnotationFormulasArchive_AnnotationPair, index_)
      + sizeof(CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::index_)
      - PROTOBUF_FIELD_OFFSET(CommandRewritePencilAnnotationFormulasArchive_AnnotationPair, annotation_)>(
          reinterpret_cast<char*>(&annotation_),
          reinterpret_cast<char*>(&other->annotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[98]);
}

// ===================================================================

class CommandRewritePencilAnnotationFormulasArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewritePencilAnnotationFormulasArchive>()._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewritePencilAnnotationFormulasArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::FormulaRewriteSpecArchive& rewrite_spec(const CommandRewritePencilAnnotationFormulasArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::FormulasForUndoArchive& formulas_to_rewrite(const CommandRewritePencilAnnotationFormulasArchive* msg);
  static void set_has_formulas_to_rewrite(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewritePencilAnnotationFormulasArchive::_Internal::super(const CommandRewritePencilAnnotationFormulasArchive* msg) {
  return *msg->super_;
}
const ::TSCE::FormulaRewriteSpecArchive&
CommandRewritePencilAnnotationFormulasArchive::_Internal::rewrite_spec(const CommandRewritePencilAnnotationFormulasArchive* msg) {
  return *msg->rewrite_spec_;
}
const ::TSCE::FormulasForUndoArchive&
CommandRewritePencilAnnotationFormulasArchive::_Internal::formulas_to_rewrite(const CommandRewritePencilAnnotationFormulasArchive* msg) {
  return *msg->formulas_to_rewrite_;
}
void CommandRewritePencilAnnotationFormulasArchive::clear_rewrite_spec() {
  if (rewrite_spec_ != nullptr) rewrite_spec_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommandRewritePencilAnnotationFormulasArchive::clear_formulas_to_rewrite() {
  if (formulas_to_rewrite_ != nullptr) formulas_to_rewrite_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandRewritePencilAnnotationFormulasArchive::CommandRewritePencilAnnotationFormulasArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotations_for_undo_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewritePencilAnnotationFormulasArchive)
}
CommandRewritePencilAnnotationFormulasArchive::CommandRewritePencilAnnotationFormulasArchive(const CommandRewritePencilAnnotationFormulasArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      annotations_for_undo_(from.annotations_for_undo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TST::TableCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_rewrite_spec()) {
    rewrite_spec_ = new ::TSCE::FormulaRewriteSpecArchive(*from.rewrite_spec_);
  } else {
    rewrite_spec_ = nullptr;
  }
  if (from._internal_has_formulas_to_rewrite()) {
    formulas_to_rewrite_ = new ::TSCE::FormulasForUndoArchive(*from.formulas_to_rewrite_);
  } else {
    formulas_to_rewrite_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewritePencilAnnotationFormulasArchive)
}

inline void CommandRewritePencilAnnotationFormulasArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&formulas_to_rewrite_) -
    reinterpret_cast<char*>(&super_)) + sizeof(formulas_to_rewrite_));
}

CommandRewritePencilAnnotationFormulasArchive::~CommandRewritePencilAnnotationFormulasArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewritePencilAnnotationFormulasArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandRewritePencilAnnotationFormulasArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete rewrite_spec_;
  if (this != internal_default_instance()) delete formulas_to_rewrite_;
}

void CommandRewritePencilAnnotationFormulasArchive::ArenaDtor(void* object) {
  CommandRewritePencilAnnotationFormulasArchive* _this = reinterpret_cast< CommandRewritePencilAnnotationFormulasArchive* >(object);
  (void)_this;
}
void CommandRewritePencilAnnotationFormulasArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandRewritePencilAnnotationFormulasArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandRewritePencilAnnotationFormulasArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewritePencilAnnotationFormulasArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_for_undo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rewrite_spec_ != nullptr);
      rewrite_spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(formulas_to_rewrite_ != nullptr);
      formulas_to_rewrite_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewritePencilAnnotationFormulasArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_formulas_to_rewrite(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair annotations_for_undo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations_for_undo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRewritePencilAnnotationFormulasArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewritePencilAnnotationFormulasArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rewrite_spec(this), target, stream);
  }

  // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::formulas_to_rewrite(this), target, stream);
  }

  // repeated .TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair annotations_for_undo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotations_for_undo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_annotations_for_undo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewritePencilAnnotationFormulasArchive)
  return target;
}

size_t CommandRewritePencilAnnotationFormulasArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewritePencilAnnotationFormulasArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_rewrite_spec()) {
    // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewrite_spec_);
  }

  if (_internal_has_formulas_to_rewrite()) {
    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formulas_to_rewrite_);
  }

  return total_size;
}
size_t CommandRewritePencilAnnotationFormulasArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewritePencilAnnotationFormulasArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewrite_spec_);

    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formulas_to_rewrite_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair annotations_for_undo = 4;
  total_size += 1UL * this->_internal_annotations_for_undo_size();
  for (const auto& msg : this->annotations_for_undo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewritePencilAnnotationFormulasArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandRewritePencilAnnotationFormulasArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewritePencilAnnotationFormulasArchive::GetClassData() const { return &_class_data_; }

void CommandRewritePencilAnnotationFormulasArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandRewritePencilAnnotationFormulasArchive *>(to)->MergeFrom(
      static_cast<const CommandRewritePencilAnnotationFormulasArchive &>(from));
}


void CommandRewritePencilAnnotationFormulasArchive::MergeFrom(const CommandRewritePencilAnnotationFormulasArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewritePencilAnnotationFormulasArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_for_undo_.MergeFrom(from.annotations_for_undo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rewrite_spec()->::TSCE::FormulaRewriteSpecArchive::MergeFrom(from._internal_rewrite_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_formulas_to_rewrite()->::TSCE::FormulasForUndoArchive::MergeFrom(from._internal_formulas_to_rewrite());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewritePencilAnnotationFormulasArchive::CopyFrom(const CommandRewritePencilAnnotationFormulasArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewritePencilAnnotationFormulasArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewritePencilAnnotationFormulasArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(annotations_for_undo_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!rewrite_spec_->IsInitialized()) return false;
  }
  if (_internal_has_formulas_to_rewrite()) {
    if (!formulas_to_rewrite_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewritePencilAnnotationFormulasArchive::InternalSwap(CommandRewritePencilAnnotationFormulasArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  annotations_for_undo_.InternalSwap(&other->annotations_for_undo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewritePencilAnnotationFormulasArchive, formulas_to_rewrite_)
      + sizeof(CommandRewritePencilAnnotationFormulasArchive::formulas_to_rewrite_)
      - PROTOBUF_FIELD_OFFSET(CommandRewritePencilAnnotationFormulasArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewritePencilAnnotationFormulasArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[99]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TST
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TST::TableCommandArchive* Arena::CreateMaybeMessage< ::TST::TableCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandApplyCellContentsArchive* Arena::CreateMaybeMessage< ::TST::CommandApplyCellContentsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandApplyCellContentsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandApplyCellDiffMapArchive* Arena::CreateMaybeMessage< ::TST::CommandApplyCellDiffMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandApplyCellDiffMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandApplyCellMapArchive* Arena::CreateMaybeMessage< ::TST::CommandApplyCellMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandApplyCellMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandApplyConcurrentCellMapArchive* Arena::CreateMaybeMessage< ::TST::CommandApplyConcurrentCellMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandApplyConcurrentCellMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandChangeFreezeHeaderStateArchive* Arena::CreateMaybeMessage< ::TST::CommandChangeFreezeHeaderStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandChangeFreezeHeaderStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandDeleteCellsArchive* Arena::CreateMaybeMessage< ::TST::CommandDeleteCellsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandDeleteCellsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandDeleteCellContentsArchive* Arena::CreateMaybeMessage< ::TST::CommandDeleteCellContentsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandDeleteCellContentsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandMutateCellFormatArchive* Arena::CreateMaybeMessage< ::TST::CommandMutateCellFormatArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandMutateCellFormatArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetAutomaticDurationUnitsArchive* Arena::CreateMaybeMessage< ::TST::CommandSetAutomaticDurationUnitsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetAutomaticDurationUnitsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetDurationStyleArchive* Arena::CreateMaybeMessage< ::TST::CommandSetDurationStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetDurationStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetDurationUnitSmallestLargestArchive* Arena::CreateMaybeMessage< ::TST::CommandSetDurationUnitSmallestLargestArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetDurationUnitSmallestLargestArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandReplaceCustomFormatArchive* Arena::CreateMaybeMessage< ::TST::CommandReplaceCustomFormatArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandReplaceCustomFormatArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandMoveCellsArchive* Arena::CreateMaybeMessage< ::TST::CommandMoveCellsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandMoveCellsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ColumnRowMetadataArchive* Arena::CreateMaybeMessage< ::TST::ColumnRowMetadataArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ColumnRowMetadataArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandInsertColumnsOrRowsArchive* Arena::CreateMaybeMessage< ::TST::CommandInsertColumnsOrRowsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandInsertColumnsOrRowsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ColumnRowBundleArchive* Arena::CreateMaybeMessage< ::TST::ColumnRowBundleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ColumnRowBundleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRemoveColumnsOrRowsArchive* Arena::CreateMaybeMessage< ::TST::CommandRemoveColumnsOrRowsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRemoveColumnsOrRowsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRowColumnRangeArchive* Arena::CreateMaybeMessage< ::TST::CommandRowColumnRangeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRowColumnRangeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandResizeColumnOrRowArchive* Arena::CreateMaybeMessage< ::TST::CommandResizeColumnOrRowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandResizeColumnOrRowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandCategoryResizeColumnOrRowArchive* Arena::CreateMaybeMessage< ::TST::CommandCategoryResizeColumnOrRowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandCategoryResizeColumnOrRowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandHideShowArchive* Arena::CreateMaybeMessage< ::TST::CommandHideShowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandHideShowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandTextPreflightInsertCellArchive* Arena::CreateMaybeMessage< ::TST::CommandTextPreflightInsertCellArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandTextPreflightInsertCellArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandPostflightSetCellArchive* Arena::CreateMaybeMessage< ::TST::CommandPostflightSetCellArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandPostflightSetCellArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandChangeTableAreaForColumnOrRowArchive* Arena::CreateMaybeMessage< ::TST::CommandChangeTableAreaForColumnOrRowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandChangeTableAreaForColumnOrRowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetPencilAnnotationsArchive* Arena::CreateMaybeMessage< ::TST::CommandSetPencilAnnotationsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetPencilAnnotationsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetTableNameArchive* Arena::CreateMaybeMessage< ::TST::CommandSetTableNameArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetTableNameArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetTableNameEnabledArchive* Arena::CreateMaybeMessage< ::TST::CommandSetTableNameEnabledArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetTableNameEnabledArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetTableFontSizeArchive* Arena::CreateMaybeMessage< ::TST::CommandSetTableFontSizeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetTableFontSizeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetTableFontNameArchive* Arena::CreateMaybeMessage< ::TST::CommandSetTableFontNameArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetTableFontNameArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetTableNameHeightArchive* Arena::CreateMaybeMessage< ::TST::CommandSetTableNameHeightArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetTableNameHeightArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetNowArchive* Arena::CreateMaybeMessage< ::TST::CommandSetNowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetNowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetWasCutArchive* Arena::CreateMaybeMessage< ::TST::CommandSetWasCutArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetWasCutArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandStyleCellsArchive* Arena::CreateMaybeMessage< ::TST::CommandStyleCellsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandStyleCellsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandStyleTableArchive* Arena::CreateMaybeMessage< ::TST::CommandStyleTableArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandStyleTableArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetRepeatingHeaderEnabledArchive* Arena::CreateMaybeMessage< ::TST::CommandSetRepeatingHeaderEnabledArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetRepeatingHeaderEnabledArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetFiltersEnabledArchive* Arena::CreateMaybeMessage< ::TST::CommandSetFiltersEnabledArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetFiltersEnabledArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandAddTableStylePresetArchive* Arena::CreateMaybeMessage< ::TST::CommandAddTableStylePresetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandAddTableStylePresetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRemoveTableStylePresetArchive* Arena::CreateMaybeMessage< ::TST::CommandRemoveTableStylePresetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRemoveTableStylePresetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandReplaceTableStylePresetArchive* Arena::CreateMaybeMessage< ::TST::CommandReplaceTableStylePresetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandReplaceTableStylePresetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandApplyTableStylePresetArchive* Arena::CreateMaybeMessage< ::TST::CommandApplyTableStylePresetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandApplyTableStylePresetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetBaseArchive* Arena::CreateMaybeMessage< ::TST::CommandSetBaseArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetBaseArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetBasePlacesArchive* Arena::CreateMaybeMessage< ::TST::CommandSetBasePlacesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetBasePlacesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetBaseUseMinusSignArchive* Arena::CreateMaybeMessage< ::TST::CommandSetBaseUseMinusSignArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetBaseUseMinusSignArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetCurrencyCodeArchive* Arena::CreateMaybeMessage< ::TST::CommandSetCurrencyCodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetCurrencyCodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetFractionAccuracyArchive* Arena::CreateMaybeMessage< ::TST::CommandSetFractionAccuracyArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetFractionAccuracyArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetNegativeNumberStyleArchive* Arena::CreateMaybeMessage< ::TST::CommandSetNegativeNumberStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetNegativeNumberStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetNumberOfDecimalPlacesArchive* Arena::CreateMaybeMessage< ::TST::CommandSetNumberOfDecimalPlacesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetNumberOfDecimalPlacesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetDateTimeFormatArchive* Arena::CreateMaybeMessage< ::TST::CommandSetDateTimeFormatArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetDateTimeFormatArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetShowThousandsSeparatorArchive* Arena::CreateMaybeMessage< ::TST::CommandSetShowThousandsSeparatorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetShowThousandsSeparatorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetUseAccountingStyleArchive* Arena::CreateMaybeMessage< ::TST::CommandSetUseAccountingStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetUseAccountingStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetRangeControlMinMaxIncArchive* Arena::CreateMaybeMessage< ::TST::CommandSetRangeControlMinMaxIncArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetRangeControlMinMaxIncArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandMoveColumnsOrRowsArchive* Arena::CreateMaybeMessage< ::TST::CommandMoveColumnsOrRowsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandMoveColumnsOrRowsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSortArchive* Arena::CreateMaybeMessage< ::TST::CommandSortArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSortArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteFormulasForTransposeArchive* Arena::CreateMaybeMessage< ::TST::CommandRewriteFormulasForTransposeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteFormulasForTransposeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteTableFormulasForRewriteSpecArchive* Arena::CreateMaybeMessage< ::TST::CommandRewriteTableFormulasForRewriteSpecArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteTableFormulasForRewriteSpecArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteMergeFormulasArchive* Arena::CreateMaybeMessage< ::TST::CommandRewriteMergeFormulasArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteMergeFormulasArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteCategoryFormulasArchive* Arena::CreateMaybeMessage< ::TST::CommandRewriteCategoryFormulasArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteCategoryFormulasArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteFilterFormulasForTableResizeArchive* Arena::CreateMaybeMessage< ::TST::CommandRewriteFilterFormulasForTableResizeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteFilterFormulasForTableResizeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteFilterFormulasForRewriteSpecArchive* Arena::CreateMaybeMessage< ::TST::CommandRewriteFilterFormulasForRewriteSpecArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteFilterFormulasForRewriteSpecArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteConditionalStylesForRewriteSpecArchive* Arena::CreateMaybeMessage< ::TST::CommandRewriteConditionalStylesForRewriteSpecArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteConditionalStylesForRewriteSpecArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandMergeArchive* Arena::CreateMaybeMessage< ::TST::CommandMergeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandMergeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandInverseMergeArchive* Arena::CreateMaybeMessage< ::TST::CommandInverseMergeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandInverseMergeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandUnmergeArchive* Arena::CreateMaybeMessage< ::TST::CommandUnmergeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandUnmergeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandChooseTableIdRemapperArchive* Arena::CreateMaybeMessage< ::TST::CommandChooseTableIdRemapperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandChooseTableIdRemapperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandCategorySetGroupingColumnsArchive* Arena::CreateMaybeMessage< ::TST::CommandCategorySetGroupingColumnsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandCategorySetGroupingColumnsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FormulaEditingCommandGroupArchive* Arena::CreateMaybeMessage< ::TST::FormulaEditingCommandGroupArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FormulaEditingCommandGroupArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FormulaEditingCommandSelectionBehaviorArchive* Arena::CreateMaybeMessage< ::TST::FormulaEditingCommandSelectionBehaviorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FormulaEditingCommandSelectionBehaviorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableCommandSelectionBehaviorArchive* Arena::CreateMaybeMessage< ::TST::TableCommandSelectionBehaviorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableCommandSelectionBehaviorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandApplyCellCommentArchive* Arena::CreateMaybeMessage< ::TST::CommandApplyCellCommentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandApplyCellCommentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetFormulaTokenizationArchive* Arena::CreateMaybeMessage< ::TST::CommandSetFormulaTokenizationArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetFormulaTokenizationArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetFilterSetTypeArchive* Arena::CreateMaybeMessage< ::TST::CommandSetFilterSetTypeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetFilterSetTypeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetTextStyleArchive* Arena::CreateMaybeMessage< ::TST::CommandSetTextStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetTextStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetTextStylePropertiesArchive* Arena::CreateMaybeMessage< ::TST::CommandSetTextStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetTextStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandJustForNotifyingArchive* Arena::CreateMaybeMessage< ::TST::CommandJustForNotifyingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandJustForNotifyingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetStorageLanguageArchive* Arena::CreateMaybeMessage< ::TST::CommandSetStorageLanguageArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetStorageLanguageArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetSortOrderArchive* Arena::CreateMaybeMessage< ::TST::CommandSetSortOrderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetSortOrderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteSortOrderForTableResizeArchive* Arena::CreateMaybeMessage< ::TST::CommandRewriteSortOrderForTableResizeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteSortOrderForTableResizeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteSortOrderForRewriteSpecArchive* Arena::CreateMaybeMessage< ::TST::CommandRewriteSortOrderForRewriteSpecArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteSortOrderForRewriteSpecArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetFilterSetArchive* Arena::CreateMaybeMessage< ::TST::CommandSetFilterSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetFilterSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ColumnRowRestoreDataArchive* Arena::CreateMaybeMessage< ::TST::ColumnRowRestoreDataArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ColumnRowRestoreDataArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandTransposeTableArchive* Arena::CreateMaybeMessage< ::TST::CommandTransposeTableArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandTransposeTableArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetStructuredTextImportRecordArchive* Arena::CreateMaybeMessage< ::TST::CommandSetStructuredTextImportRecordArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetStructuredTextImportRecordArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandCategoryCollapseExpandGroupArchive* Arena::CreateMaybeMessage< ::TST::CommandCategoryCollapseExpandGroupArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandCategoryCollapseExpandGroupArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandCategoryChangeSummaryAggregateType* Arena::CreateMaybeMessage< ::TST::CommandCategoryChangeSummaryAggregateType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandCategoryChangeSummaryAggregateType >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandCategorySetLabelRowVisibility* Arena::CreateMaybeMessage< ::TST::CommandCategorySetLabelRowVisibility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandCategorySetLabelRowVisibility >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandCategoryWillChangeGroupValue* Arena::CreateMaybeMessage< ::TST::CommandCategoryWillChangeGroupValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandCategoryWillChangeGroupValue >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::IdempotentSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TST::IdempotentSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::IdempotentSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::WPSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TST::WPSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::WPSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableSubSelectionTransformerBaseArchive* Arena::CreateMaybeMessage< ::TST::TableSubSelectionTransformerBaseArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableSubSelectionTransformerBaseArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableNameSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TST::TableNameSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableNameSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ControlCellSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TST::ControlCellSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ControlCellSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StockCellSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TST::StockCellSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StockCellSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::RegionSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TST::RegionSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::RegionSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StrokeSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TST::StrokeSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StrokeSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::RowColumnSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TST::RowColumnSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::RowColumnSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandCategoryMoveRowsArchive* Arena::CreateMaybeMessage< ::TST::CommandCategoryMoveRowsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandCategoryMoveRowsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteHiddenStatesForGroupByChangeArchive* Arena::CreateMaybeMessage< ::TST::CommandRewriteHiddenStatesForGroupByChangeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteHiddenStatesForGroupByChangeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* Arena::CreateMaybeMessage< ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewritePencilAnnotationFormulasArchive* Arena::CreateMaybeMessage< ::TST::CommandRewritePencilAnnotationFormulasArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewritePencilAnnotationFormulasArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
