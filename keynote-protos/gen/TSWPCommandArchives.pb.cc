// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSWPCommandArchives.proto

#include "TSWPCommandArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TSWP {
constexpr DummyCommandArchive::DummyCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : foo_(0u){}
struct DummyCommandArchiveDefaultTypeInternal {
  constexpr DummyCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DummyCommandArchiveDefaultTypeInternal() {}
  union {
    DummyCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DummyCommandArchiveDefaultTypeInternal _DummyCommandArchive_default_instance_;
constexpr TextCommandArchive::TextCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , storage_(nullptr)
  , undo_transaction_(nullptr)
  , restore_range_location_(0u)
  , restore_range_length_(0u)
  , redo_restore_range_location_(0u)
  , redo_restore_range_length_(0u)
  , text_command_flags_(0u)
  , kind_(0)
{}
struct TextCommandArchiveDefaultTypeInternal {
  constexpr TextCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextCommandArchiveDefaultTypeInternal() {}
  union {
    TextCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextCommandArchiveDefaultTypeInternal _TextCommandArchive_default_instance_;
constexpr StorageActionCommandArchive::StorageActionCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_format_keys_()
  , coalescing_property_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , storage_(nullptr)
  , undo_transaction_(nullptr)
  , changed_data_reference_record_(nullptr)
  , text_command_flags_(0u)
  , kind_(0)

  , is_forward_inverse_command_(false)
  , coalesceable_(false)
  , coalescing_text_(false)
  , should_migrate_styles_(false){}
struct StorageActionCommandArchiveDefaultTypeInternal {
  constexpr StorageActionCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StorageActionCommandArchiveDefaultTypeInternal() {}
  union {
    StorageActionCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StorageActionCommandArchiveDefaultTypeInternal _StorageActionCommandArchive_default_instance_;
constexpr SetColumnStyleCommandArchive::SetColumnStyleCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , storage_(nullptr)
  , undo_transaction_(nullptr){}
struct SetColumnStyleCommandArchiveDefaultTypeInternal {
  constexpr SetColumnStyleCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetColumnStyleCommandArchiveDefaultTypeInternal() {}
  union {
    SetColumnStyleCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetColumnStyleCommandArchiveDefaultTypeInternal _SetColumnStyleCommandArchive_default_instance_;
constexpr ReplaceAllUsesOfStyleCommandArchive::ReplaceAllUsesOfStyleCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , storage_(nullptr)
  , undo_transaction_(nullptr){}
struct ReplaceAllUsesOfStyleCommandArchiveDefaultTypeInternal {
  constexpr ReplaceAllUsesOfStyleCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReplaceAllUsesOfStyleCommandArchiveDefaultTypeInternal() {}
  union {
    ReplaceAllUsesOfStyleCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReplaceAllUsesOfStyleCommandArchiveDefaultTypeInternal _ReplaceAllUsesOfStyleCommandArchive_default_instance_;
constexpr InsertColumnsCommandArchive::InsertColumnsCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , storage_(nullptr)
  , undo_transaction_(nullptr)
  , column_index_(0u)
  , column_count_(0u){}
struct InsertColumnsCommandArchiveDefaultTypeInternal {
  constexpr InsertColumnsCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertColumnsCommandArchiveDefaultTypeInternal() {}
  union {
    InsertColumnsCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertColumnsCommandArchiveDefaultTypeInternal _InsertColumnsCommandArchive_default_instance_;
constexpr InsertRowsCommandArchive::InsertRowsCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , storage_(nullptr)
  , undo_transaction_(nullptr)
  , row_index_(0u)
  , row_count_(0u){}
struct InsertRowsCommandArchiveDefaultTypeInternal {
  constexpr InsertRowsCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertRowsCommandArchiveDefaultTypeInternal() {}
  union {
    InsertRowsCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertRowsCommandArchiveDefaultTypeInternal _InsertRowsCommandArchive_default_instance_;
constexpr RemoveColumnsCommandArchive::RemoveColumnsCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , storage_(nullptr)
  , undo_transaction_(nullptr)
  , column_index_(0u)
  , column_count_(0u){}
struct RemoveColumnsCommandArchiveDefaultTypeInternal {
  constexpr RemoveColumnsCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveColumnsCommandArchiveDefaultTypeInternal() {}
  union {
    RemoveColumnsCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveColumnsCommandArchiveDefaultTypeInternal _RemoveColumnsCommandArchive_default_instance_;
constexpr RemoveRowsCommandArchive::RemoveRowsCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , storage_(nullptr)
  , undo_transaction_(nullptr)
  , row_index_(0u)
  , row_count_(0u){}
struct RemoveRowsCommandArchiveDefaultTypeInternal {
  constexpr RemoveRowsCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveRowsCommandArchiveDefaultTypeInternal() {}
  union {
    RemoveRowsCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveRowsCommandArchiveDefaultTypeInternal _RemoveRowsCommandArchive_default_instance_;
constexpr MergeCellsCommandArchive::MergeCellsCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , storage_(nullptr)
  , undo_transaction_(nullptr)
  , row_(0u)
  , column_(0u)
  , row_count_(0u)
  , column_count_(0u){}
struct MergeCellsCommandArchiveDefaultTypeInternal {
  constexpr MergeCellsCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MergeCellsCommandArchiveDefaultTypeInternal() {}
  union {
    MergeCellsCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MergeCellsCommandArchiveDefaultTypeInternal _MergeCellsCommandArchive_default_instance_;
constexpr ApplyPlaceholderTextCommandArchive::ApplyPlaceholderTextCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : script_tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , storage_(nullptr)
  , undo_transaction_(nullptr)
  , selection_range_location_(0u)
  , selection_range_length_(0u){}
struct ApplyPlaceholderTextCommandArchiveDefaultTypeInternal {
  constexpr ApplyPlaceholderTextCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApplyPlaceholderTextCommandArchiveDefaultTypeInternal() {}
  union {
    ApplyPlaceholderTextCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApplyPlaceholderTextCommandArchiveDefaultTypeInternal _ApplyPlaceholderTextCommandArchive_default_instance_;
constexpr UpdateDateTimeFieldCommandArchive::UpdateDateTimeFieldCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , date_time_field_(nullptr)
  , date_(nullptr)
  , date_style_(0)

  , time_style_(0)
{}
struct UpdateDateTimeFieldCommandArchiveDefaultTypeInternal {
  constexpr UpdateDateTimeFieldCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateDateTimeFieldCommandArchiveDefaultTypeInternal() {}
  union {
    UpdateDateTimeFieldCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateDateTimeFieldCommandArchiveDefaultTypeInternal _UpdateDateTimeFieldCommandArchive_default_instance_;
constexpr ApplyRubyTextCommandArchive::ApplyRubyTextCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ruby_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , storage_(nullptr)
  , undo_transaction_(nullptr)
  , selection_range_location_(0u)
  , selection_range_length_(0u){}
struct ApplyRubyTextCommandArchiveDefaultTypeInternal {
  constexpr ApplyRubyTextCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApplyRubyTextCommandArchiveDefaultTypeInternal() {}
  union {
    ApplyRubyTextCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApplyRubyTextCommandArchiveDefaultTypeInternal _ApplyRubyTextCommandArchive_default_instance_;
constexpr ModifyRubyTextCommandArchive::ModifyRubyTextCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ruby_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , base_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , ruby_field_(nullptr)
  , undo_transaction_(nullptr){}
struct ModifyRubyTextCommandArchiveDefaultTypeInternal {
  constexpr ModifyRubyTextCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModifyRubyTextCommandArchiveDefaultTypeInternal() {}
  union {
    ModifyRubyTextCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModifyRubyTextCommandArchiveDefaultTypeInternal _ModifyRubyTextCommandArchive_default_instance_;
constexpr ModifyTOCSettingsBaseCommandArchive::ModifyTOCSettingsBaseCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , old_toc_settings_(nullptr)
  , new_toc_settings_(nullptr){}
struct ModifyTOCSettingsBaseCommandArchiveDefaultTypeInternal {
  constexpr ModifyTOCSettingsBaseCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModifyTOCSettingsBaseCommandArchiveDefaultTypeInternal() {}
  union {
    ModifyTOCSettingsBaseCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModifyTOCSettingsBaseCommandArchiveDefaultTypeInternal _ModifyTOCSettingsBaseCommandArchive_default_instance_;
constexpr ModifyTOCSettingsForTOCInfoCommandArchive::ModifyTOCSettingsForTOCInfoCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , toc_info_uuid_path_(nullptr){}
struct ModifyTOCSettingsForTOCInfoCommandArchiveDefaultTypeInternal {
  constexpr ModifyTOCSettingsForTOCInfoCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModifyTOCSettingsForTOCInfoCommandArchiveDefaultTypeInternal() {}
  union {
    ModifyTOCSettingsForTOCInfoCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModifyTOCSettingsForTOCInfoCommandArchiveDefaultTypeInternal _ModifyTOCSettingsForTOCInfoCommandArchive_default_instance_;
constexpr ModifyTOCSettingsPresetForThemeCommandArchive::ModifyTOCSettingsPresetForThemeCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , theme_(nullptr)
  , preset_index_(0u){}
struct ModifyTOCSettingsPresetForThemeCommandArchiveDefaultTypeInternal {
  constexpr ModifyTOCSettingsPresetForThemeCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModifyTOCSettingsPresetForThemeCommandArchiveDefaultTypeInternal() {}
  union {
    ModifyTOCSettingsPresetForThemeCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModifyTOCSettingsPresetForThemeCommandArchiveDefaultTypeInternal _ModifyTOCSettingsPresetForThemeCommandArchive_default_instance_;
constexpr AnchorAttachmentCommandArchive::AnchorAttachmentCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , attachment_(nullptr)
  , h_offset_type_(0u)
  , h_offset_(0)
  , v_offset_type_(0u)
  , v_offset_(0)
  , undo_h_offset_type_(0u)
  , undo_h_offset_(0)
  , is_html_wrap_(false)
  , undo_is_html_wrap_(false)
  , undo_v_offset_type_(0u)
  , undo_v_offset_(0){}
struct AnchorAttachmentCommandArchiveDefaultTypeInternal {
  constexpr AnchorAttachmentCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnchorAttachmentCommandArchiveDefaultTypeInternal() {}
  union {
    AnchorAttachmentCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnchorAttachmentCommandArchiveDefaultTypeInternal _AnchorAttachmentCommandArchive_default_instance_;
constexpr TextApplyThemeCommandArchive::TextApplyThemeCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , storage_(nullptr)
  , undo_transaction_(nullptr){}
struct TextApplyThemeCommandArchiveDefaultTypeInternal {
  constexpr TextApplyThemeCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextApplyThemeCommandArchiveDefaultTypeInternal() {}
  union {
    TextApplyThemeCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextApplyThemeCommandArchiveDefaultTypeInternal _TextApplyThemeCommandArchive_default_instance_;
constexpr MoveColumnsCommandArchive::MoveColumnsCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , storage_(nullptr)
  , undo_transaction_(nullptr)
  , src_index_(0u)
  , dst_index_(0u)
  , count_(0u){}
struct MoveColumnsCommandArchiveDefaultTypeInternal {
  constexpr MoveColumnsCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveColumnsCommandArchiveDefaultTypeInternal() {}
  union {
    MoveColumnsCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveColumnsCommandArchiveDefaultTypeInternal _MoveColumnsCommandArchive_default_instance_;
constexpr MoveRowsCommandArchive::MoveRowsCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , storage_(nullptr)
  , undo_transaction_(nullptr)
  , src_index_(0u)
  , dst_index_(0u)
  , count_(0u){}
struct MoveRowsCommandArchiveDefaultTypeInternal {
  constexpr MoveRowsCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveRowsCommandArchiveDefaultTypeInternal() {}
  union {
    MoveRowsCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveRowsCommandArchiveDefaultTypeInternal _MoveRowsCommandArchive_default_instance_;
constexpr ShapeApplyPresetCommandArchive::ShapeApplyPresetCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , undo_style_(nullptr){}
struct ShapeApplyPresetCommandArchiveDefaultTypeInternal {
  constexpr ShapeApplyPresetCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShapeApplyPresetCommandArchiveDefaultTypeInternal() {}
  union {
    ShapeApplyPresetCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShapeApplyPresetCommandArchiveDefaultTypeInternal _ShapeApplyPresetCommandArchive_default_instance_;
constexpr StyleBaseCommandArchive::StyleBaseCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , theme_(nullptr)
  , style_(nullptr){}
struct StyleBaseCommandArchiveDefaultTypeInternal {
  constexpr StyleBaseCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StyleBaseCommandArchiveDefaultTypeInternal() {}
  union {
    StyleBaseCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StyleBaseCommandArchiveDefaultTypeInternal _StyleBaseCommandArchive_default_instance_;
constexpr StyleCreateCommandArchive::StyleCreateCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , preset_index_(0u){}
struct StyleCreateCommandArchiveDefaultTypeInternal {
  constexpr StyleCreateCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StyleCreateCommandArchiveDefaultTypeInternal() {}
  union {
    StyleCreateCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StyleCreateCommandArchiveDefaultTypeInternal _StyleCreateCommandArchive_default_instance_;
constexpr StyleRenameCommandArchive::StyleRenameCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : updated_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , old_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr){}
struct StyleRenameCommandArchiveDefaultTypeInternal {
  constexpr StyleRenameCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StyleRenameCommandArchiveDefaultTypeInternal() {}
  union {
    StyleRenameCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StyleRenameCommandArchiveDefaultTypeInternal _StyleRenameCommandArchive_default_instance_;
constexpr StyleUpdateCommandArchive::StyleUpdateCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , original_style_(nullptr)
  , updated_style_(nullptr){}
struct StyleUpdateCommandArchiveDefaultTypeInternal {
  constexpr StyleUpdateCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StyleUpdateCommandArchiveDefaultTypeInternal() {}
  union {
    StyleUpdateCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StyleUpdateCommandArchiveDefaultTypeInternal _StyleUpdateCommandArchive_default_instance_;
constexpr StyleDeleteCommandArchive::StyleDeleteCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , old_preset_index_(0u){}
struct StyleDeleteCommandArchiveDefaultTypeInternal {
  constexpr StyleDeleteCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StyleDeleteCommandArchiveDefaultTypeInternal() {}
  union {
    StyleDeleteCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StyleDeleteCommandArchiveDefaultTypeInternal _StyleDeleteCommandArchive_default_instance_;
constexpr StyleReorderCommandArchive::StyleReorderCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , old_preset_index_(0u)
  , new_preset_index_(0u){}
struct StyleReorderCommandArchiveDefaultTypeInternal {
  constexpr StyleReorderCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StyleReorderCommandArchiveDefaultTypeInternal() {}
  union {
    StyleReorderCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StyleReorderCommandArchiveDefaultTypeInternal _StyleReorderCommandArchive_default_instance_;
constexpr StyleUpdatePropertyMapCommandArchive::StyleUpdatePropertyMapCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct StyleUpdatePropertyMapCommandArchiveDefaultTypeInternal {
  constexpr StyleUpdatePropertyMapCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StyleUpdatePropertyMapCommandArchiveDefaultTypeInternal() {}
  union {
    StyleUpdatePropertyMapCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StyleUpdatePropertyMapCommandArchiveDefaultTypeInternal _StyleUpdatePropertyMapCommandArchive_default_instance_;
constexpr ShapeStyleSetValueCommandArchive::ShapeStyleSetValueCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , change_(nullptr){}
struct ShapeStyleSetValueCommandArchiveDefaultTypeInternal {
  constexpr ShapeStyleSetValueCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShapeStyleSetValueCommandArchiveDefaultTypeInternal() {}
  union {
    ShapeStyleSetValueCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShapeStyleSetValueCommandArchiveDefaultTypeInternal _ShapeStyleSetValueCommandArchive_default_instance_;
constexpr SelectionTransformerArchive::SelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : storage_uuid_path_(nullptr)
  , selection_(nullptr)
  , transformed_to_noop_(false){}
struct SelectionTransformerArchiveDefaultTypeInternal {
  constexpr SelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    SelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectionTransformerArchiveDefaultTypeInternal _SelectionTransformerArchive_default_instance_;
constexpr PencilAnnotationSelectionTransformerArchive::PencilAnnotationSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_pencil_annotation_uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , storage_uuid_path_(nullptr){}
struct PencilAnnotationSelectionTransformerArchiveDefaultTypeInternal {
  constexpr PencilAnnotationSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PencilAnnotationSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    PencilAnnotationSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PencilAnnotationSelectionTransformerArchiveDefaultTypeInternal _PencilAnnotationSelectionTransformerArchive_default_instance_;
constexpr ShapeSelectionTransformerArchive::ShapeSelectionTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , storage_uuid_path_(nullptr){}
struct ShapeSelectionTransformerArchiveDefaultTypeInternal {
  constexpr ShapeSelectionTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShapeSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    ShapeSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShapeSelectionTransformerArchiveDefaultTypeInternal _ShapeSelectionTransformerArchive_default_instance_;
constexpr ShapeContentDescription::ShapeContentDescription(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , text_range_location_(0u)
  , text_range_length_(0u){}
struct ShapeContentDescriptionDefaultTypeInternal {
  constexpr ShapeContentDescriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShapeContentDescriptionDefaultTypeInternal() {}
  union {
    ShapeContentDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShapeContentDescriptionDefaultTypeInternal _ShapeContentDescription_default_instance_;
constexpr ObjectPropertyArchive::ObjectPropertyArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , string_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_path_value_(nullptr)
  , fill_value_(nullptr)
  , color_value_(nullptr)
  , shadow_value_(nullptr)
  , type_(0)

  , bool_value_(false)
  , float_value_(0)
  , integer_value_(0){}
struct ObjectPropertyArchiveDefaultTypeInternal {
  constexpr ObjectPropertyArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectPropertyArchiveDefaultTypeInternal() {}
  union {
    ObjectPropertyArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectPropertyArchiveDefaultTypeInternal _ObjectPropertyArchive_default_instance_;
constexpr SetObjectPropertiesCommandArchive::SetObjectPropertiesCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : properties_()
  , old_properties_()
  , action_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , object_uuid_path_(nullptr){}
struct SetObjectPropertiesCommandArchiveDefaultTypeInternal {
  constexpr SetObjectPropertiesCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetObjectPropertiesCommandArchiveDefaultTypeInternal() {}
  union {
    SetObjectPropertiesCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetObjectPropertiesCommandArchiveDefaultTypeInternal _SetObjectPropertiesCommandArchive_default_instance_;
constexpr UpdateFlowInfoCommandArchive::UpdateFlowInfoCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_box_id_paths_at_start_()
  , suggested_text_box_id_paths_at_end_()
  , undo_text_boxes_to_restore_()
  , super_(nullptr)
  , flow_info_uuid_path_(nullptr)
  , text_box_id_path_to_add_or_remove_(nullptr)
  , undo_added_shape_info_(nullptr)
  , undo_removed_shape_info_(nullptr)
  , command_mode_(0)
{}
struct UpdateFlowInfoCommandArchiveDefaultTypeInternal {
  constexpr UpdateFlowInfoCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateFlowInfoCommandArchiveDefaultTypeInternal() {}
  union {
    UpdateFlowInfoCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateFlowInfoCommandArchiveDefaultTypeInternal _UpdateFlowInfoCommandArchive_default_instance_;
constexpr AddFlowInfoCommandArchive::AddFlowInfoCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , flow_info_to_add_(nullptr)
  , flow_info_archive_(nullptr)
  , working_undo_object_(nullptr)
  , undo_user_interface_identifier_to_restore_(0u)
  , undo_next_user_interface_identifier_to_restore_(0u){}
struct AddFlowInfoCommandArchiveDefaultTypeInternal {
  constexpr AddFlowInfoCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddFlowInfoCommandArchiveDefaultTypeInternal() {}
  union {
    AddFlowInfoCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddFlowInfoCommandArchiveDefaultTypeInternal _AddFlowInfoCommandArchive_default_instance_;
constexpr RemoveFlowInfoCommandArchive::RemoveFlowInfoCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , flow_info_uuid_path_(nullptr)
  , undo_object_(nullptr)
  , undo_user_interface_identifier_to_restore_(0u)
  , undo_next_user_interface_identifier_to_restore_(0u){}
struct RemoveFlowInfoCommandArchiveDefaultTypeInternal {
  constexpr RemoveFlowInfoCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveFlowInfoCommandArchiveDefaultTypeInternal() {}
  union {
    RemoveFlowInfoCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveFlowInfoCommandArchiveDefaultTypeInternal _RemoveFlowInfoCommandArchive_default_instance_;
constexpr TextCommentReplyCommandArchive::TextCommentReplyCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotation_uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , storage_uuid_path_(nullptr)
  , forward_comment_(nullptr)
  , inverse_comment_(nullptr)
  , forward_variant_(0)

  , inverse_variant_(0)
{}
struct TextCommentReplyCommandArchiveDefaultTypeInternal {
  constexpr TextCommentReplyCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TextCommentReplyCommandArchiveDefaultTypeInternal() {}
  union {
    TextCommentReplyCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TextCommentReplyCommandArchiveDefaultTypeInternal _TextCommentReplyCommandArchive_default_instance_;
constexpr ContainedObjectsCommandArchive_AddBehaviorArgs::ContainedObjectsCommandArchive_AddBehaviorArgs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_list_(){}
struct ContainedObjectsCommandArchive_AddBehaviorArgsDefaultTypeInternal {
  constexpr ContainedObjectsCommandArchive_AddBehaviorArgsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContainedObjectsCommandArchive_AddBehaviorArgsDefaultTypeInternal() {}
  union {
    ContainedObjectsCommandArchive_AddBehaviorArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContainedObjectsCommandArchive_AddBehaviorArgsDefaultTypeInternal _ContainedObjectsCommandArchive_AddBehaviorArgs_default_instance_;
constexpr ContainedObjectsCommandArchive_RemoveBehaviorArgs::ContainedObjectsCommandArchive_RemoveBehaviorArgs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_list_(){}
struct ContainedObjectsCommandArchive_RemoveBehaviorArgsDefaultTypeInternal {
  constexpr ContainedObjectsCommandArchive_RemoveBehaviorArgsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContainedObjectsCommandArchive_RemoveBehaviorArgsDefaultTypeInternal() {}
  union {
    ContainedObjectsCommandArchive_RemoveBehaviorArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContainedObjectsCommandArchive_RemoveBehaviorArgsDefaultTypeInternal _ContainedObjectsCommandArchive_RemoveBehaviorArgs_default_instance_;
constexpr ContainedObjectsCommandArchive_RearrangeBehaviorArgs::ContainedObjectsCommandArchive_RearrangeBehaviorArgs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_list_(){}
struct ContainedObjectsCommandArchive_RearrangeBehaviorArgsDefaultTypeInternal {
  constexpr ContainedObjectsCommandArchive_RearrangeBehaviorArgsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContainedObjectsCommandArchive_RearrangeBehaviorArgsDefaultTypeInternal() {}
  union {
    ContainedObjectsCommandArchive_RearrangeBehaviorArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContainedObjectsCommandArchive_RearrangeBehaviorArgsDefaultTypeInternal _ContainedObjectsCommandArchive_RearrangeBehaviorArgs_default_instance_;
constexpr ContainedObjectsCommandArchive::ContainedObjectsCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objects_()
  , container_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , target_(nullptr)
  , undo_object_for_commit_(nullptr)
  , undo_object_for_make_inverse_(nullptr)
  , add_behavior_args_(nullptr)
  , remove_behavior_args_(nullptr)
  , rearrange_behavior_args_(nullptr){}
struct ContainedObjectsCommandArchiveDefaultTypeInternal {
  constexpr ContainedObjectsCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContainedObjectsCommandArchiveDefaultTypeInternal() {}
  union {
    ContainedObjectsCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContainedObjectsCommandArchiveDefaultTypeInternal _ContainedObjectsCommandArchive_default_instance_;
constexpr EquationInfoGeometryCommandArchive::EquationInfoGeometryCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct EquationInfoGeometryCommandArchiveDefaultTypeInternal {
  constexpr EquationInfoGeometryCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EquationInfoGeometryCommandArchiveDefaultTypeInternal() {}
  union {
    EquationInfoGeometryCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EquationInfoGeometryCommandArchiveDefaultTypeInternal _EquationInfoGeometryCommandArchive_default_instance_;
constexpr CharacterStyleChangePropertyCommand_GArchive::CharacterStyleChangePropertyCommand_GArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : range_list_()
  , change_list_()
  , super_(nullptr)
  , range_list_undefined_(false)
  , change_list_undefined_(false)
  , disable_character_style_promotion_(false){}
struct CharacterStyleChangePropertyCommand_GArchiveDefaultTypeInternal {
  constexpr CharacterStyleChangePropertyCommand_GArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CharacterStyleChangePropertyCommand_GArchiveDefaultTypeInternal() {}
  union {
    CharacterStyleChangePropertyCommand_GArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CharacterStyleChangePropertyCommand_GArchiveDefaultTypeInternal _CharacterStyleChangePropertyCommand_GArchive_default_instance_;
constexpr ParagraphStyleChangePropertyCommand_GArchive::ParagraphStyleChangePropertyCommand_GArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : range_list_()
  , change_list_()
  , super_(nullptr)
  , range_list_undefined_(false)
  , change_list_undefined_(false){}
struct ParagraphStyleChangePropertyCommand_GArchiveDefaultTypeInternal {
  constexpr ParagraphStyleChangePropertyCommand_GArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParagraphStyleChangePropertyCommand_GArchiveDefaultTypeInternal() {}
  union {
    ParagraphStyleChangePropertyCommand_GArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParagraphStyleChangePropertyCommand_GArchiveDefaultTypeInternal _ParagraphStyleChangePropertyCommand_GArchive_default_instance_;
}  // namespace TSWP
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TSWPCommandArchives_2eproto[47];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TSWPCommandArchives_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TSWPCommandArchives_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TSWPCommandArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSWP::DummyCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DummyCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::DummyCommandArchive, foo_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::TextCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TextCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextCommandArchive, storage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextCommandArchive, undo_transaction_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextCommandArchive, restore_range_location_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextCommandArchive, restore_range_length_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextCommandArchive, redo_restore_range_location_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextCommandArchive, redo_restore_range_length_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextCommandArchive, text_command_flags_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextCommandArchive, kind_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageActionCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageActionCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageActionCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageActionCommandArchive, storage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageActionCommandArchive, undo_transaction_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageActionCommandArchive, text_command_flags_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageActionCommandArchive, kind_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageActionCommandArchive, custom_format_keys_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageActionCommandArchive, is_forward_inverse_command_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageActionCommandArchive, coalesceable_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageActionCommandArchive, coalescing_text_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageActionCommandArchive, should_migrate_styles_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageActionCommandArchive, changed_data_reference_record_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageActionCommandArchive, coalescing_property_),
  1,
  2,
  3,
  5,
  6,
  ~0u,
  7,
  8,
  9,
  10,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::SetColumnStyleCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SetColumnStyleCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::SetColumnStyleCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SetColumnStyleCommandArchive, storage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SetColumnStyleCommandArchive, undo_transaction_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::ReplaceAllUsesOfStyleCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ReplaceAllUsesOfStyleCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ReplaceAllUsesOfStyleCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ReplaceAllUsesOfStyleCommandArchive, storage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ReplaceAllUsesOfStyleCommandArchive, undo_transaction_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::InsertColumnsCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::InsertColumnsCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::InsertColumnsCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::InsertColumnsCommandArchive, storage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::InsertColumnsCommandArchive, column_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::InsertColumnsCommandArchive, column_count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::InsertColumnsCommandArchive, undo_transaction_),
  0,
  1,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::InsertRowsCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::InsertRowsCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::InsertRowsCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::InsertRowsCommandArchive, storage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::InsertRowsCommandArchive, row_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::InsertRowsCommandArchive, row_count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::InsertRowsCommandArchive, undo_transaction_),
  0,
  1,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveColumnsCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveColumnsCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveColumnsCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveColumnsCommandArchive, storage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveColumnsCommandArchive, column_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveColumnsCommandArchive, column_count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveColumnsCommandArchive, undo_transaction_),
  0,
  1,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveRowsCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveRowsCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveRowsCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveRowsCommandArchive, storage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveRowsCommandArchive, row_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveRowsCommandArchive, row_count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveRowsCommandArchive, undo_transaction_),
  0,
  1,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeCellsCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeCellsCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeCellsCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeCellsCommandArchive, storage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeCellsCommandArchive, row_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeCellsCommandArchive, column_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeCellsCommandArchive, row_count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeCellsCommandArchive, column_count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeCellsCommandArchive, undo_transaction_),
  0,
  1,
  3,
  4,
  5,
  6,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::ApplyPlaceholderTextCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ApplyPlaceholderTextCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ApplyPlaceholderTextCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ApplyPlaceholderTextCommandArchive, storage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ApplyPlaceholderTextCommandArchive, selection_range_location_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ApplyPlaceholderTextCommandArchive, selection_range_length_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ApplyPlaceholderTextCommandArchive, undo_transaction_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ApplyPlaceholderTextCommandArchive, script_tag_),
  1,
  2,
  4,
  5,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::UpdateDateTimeFieldCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UpdateDateTimeFieldCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::UpdateDateTimeFieldCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UpdateDateTimeFieldCommandArchive, date_time_field_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UpdateDateTimeFieldCommandArchive, date_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UpdateDateTimeFieldCommandArchive, date_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UpdateDateTimeFieldCommandArchive, time_style_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSWP::ApplyRubyTextCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ApplyRubyTextCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ApplyRubyTextCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ApplyRubyTextCommandArchive, storage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ApplyRubyTextCommandArchive, selection_range_location_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ApplyRubyTextCommandArchive, selection_range_length_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ApplyRubyTextCommandArchive, ruby_text_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ApplyRubyTextCommandArchive, undo_transaction_),
  1,
  2,
  4,
  5,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyRubyTextCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyRubyTextCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyRubyTextCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyRubyTextCommandArchive, ruby_field_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyRubyTextCommandArchive, ruby_text_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyRubyTextCommandArchive, base_text_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyRubyTextCommandArchive, undo_transaction_),
  2,
  3,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyTOCSettingsBaseCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyTOCSettingsBaseCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyTOCSettingsBaseCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyTOCSettingsBaseCommandArchive, old_toc_settings_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyTOCSettingsBaseCommandArchive, new_toc_settings_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyTOCSettingsForTOCInfoCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyTOCSettingsForTOCInfoCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyTOCSettingsForTOCInfoCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyTOCSettingsForTOCInfoCommandArchive, toc_info_uuid_path_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyTOCSettingsPresetForThemeCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyTOCSettingsPresetForThemeCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyTOCSettingsPresetForThemeCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyTOCSettingsPresetForThemeCommandArchive, theme_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ModifyTOCSettingsPresetForThemeCommandArchive, preset_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::AnchorAttachmentCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::AnchorAttachmentCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::AnchorAttachmentCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::AnchorAttachmentCommandArchive, attachment_),
  PROTOBUF_FIELD_OFFSET(::TSWP::AnchorAttachmentCommandArchive, h_offset_type_),
  PROTOBUF_FIELD_OFFSET(::TSWP::AnchorAttachmentCommandArchive, h_offset_),
  PROTOBUF_FIELD_OFFSET(::TSWP::AnchorAttachmentCommandArchive, v_offset_type_),
  PROTOBUF_FIELD_OFFSET(::TSWP::AnchorAttachmentCommandArchive, v_offset_),
  PROTOBUF_FIELD_OFFSET(::TSWP::AnchorAttachmentCommandArchive, is_html_wrap_),
  PROTOBUF_FIELD_OFFSET(::TSWP::AnchorAttachmentCommandArchive, undo_h_offset_type_),
  PROTOBUF_FIELD_OFFSET(::TSWP::AnchorAttachmentCommandArchive, undo_h_offset_),
  PROTOBUF_FIELD_OFFSET(::TSWP::AnchorAttachmentCommandArchive, undo_v_offset_type_),
  PROTOBUF_FIELD_OFFSET(::TSWP::AnchorAttachmentCommandArchive, undo_v_offset_),
  PROTOBUF_FIELD_OFFSET(::TSWP::AnchorAttachmentCommandArchive, undo_is_html_wrap_),
  0,
  1,
  2,
  3,
  4,
  5,
  8,
  6,
  7,
  10,
  11,
  9,
  PROTOBUF_FIELD_OFFSET(::TSWP::TextApplyThemeCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextApplyThemeCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TextApplyThemeCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextApplyThemeCommandArchive, storage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextApplyThemeCommandArchive, undo_transaction_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::MoveColumnsCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MoveColumnsCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::MoveColumnsCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MoveColumnsCommandArchive, storage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MoveColumnsCommandArchive, src_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MoveColumnsCommandArchive, dst_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MoveColumnsCommandArchive, count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MoveColumnsCommandArchive, undo_transaction_),
  0,
  1,
  3,
  4,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::MoveRowsCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MoveRowsCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::MoveRowsCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MoveRowsCommandArchive, storage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MoveRowsCommandArchive, src_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MoveRowsCommandArchive, dst_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MoveRowsCommandArchive, count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MoveRowsCommandArchive, undo_transaction_),
  0,
  1,
  3,
  4,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeApplyPresetCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeApplyPresetCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeApplyPresetCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeApplyPresetCommandArchive, undo_style_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleBaseCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleBaseCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleBaseCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleBaseCommandArchive, theme_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleBaseCommandArchive, style_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleCreateCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleCreateCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleCreateCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleCreateCommandArchive, preset_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleRenameCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleRenameCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleRenameCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleRenameCommandArchive, updated_name_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleRenameCommandArchive, old_name_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleUpdateCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleUpdateCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleUpdateCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleUpdateCommandArchive, original_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleUpdateCommandArchive, updated_style_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleDeleteCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleDeleteCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleDeleteCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleDeleteCommandArchive, old_preset_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleReorderCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleReorderCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleReorderCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleReorderCommandArchive, old_preset_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleReorderCommandArchive, new_preset_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleUpdatePropertyMapCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleUpdatePropertyMapCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::StyleUpdatePropertyMapCommandArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStyleSetValueCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStyleSetValueCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStyleSetValueCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStyleSetValueCommandArchive, change_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::SelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::SelectionTransformerArchive, storage_uuid_path_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SelectionTransformerArchive, selection_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SelectionTransformerArchive, transformed_to_noop_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::PencilAnnotationSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::PencilAnnotationSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::PencilAnnotationSelectionTransformerArchive, storage_uuid_path_),
  PROTOBUF_FIELD_OFFSET(::TSWP::PencilAnnotationSelectionTransformerArchive, text_pencil_annotation_uuid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeSelectionTransformerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeSelectionTransformerArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeSelectionTransformerArchive, storage_uuid_path_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeContentDescription, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeContentDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeContentDescription, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeContentDescription, text_range_location_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeContentDescription, text_range_length_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectPropertyArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectPropertyArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectPropertyArchive, name_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectPropertyArchive, type_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectPropertyArchive, bool_value_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectPropertyArchive, float_value_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectPropertyArchive, integer_value_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectPropertyArchive, string_value_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectPropertyArchive, id_path_value_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectPropertyArchive, fill_value_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectPropertyArchive, color_value_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectPropertyArchive, shadow_value_),
  0,
  6,
  7,
  8,
  9,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSWP::SetObjectPropertiesCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SetObjectPropertiesCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::SetObjectPropertiesCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SetObjectPropertiesCommandArchive, object_uuid_path_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SetObjectPropertiesCommandArchive, properties_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SetObjectPropertiesCommandArchive, action_string_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SetObjectPropertiesCommandArchive, old_properties_),
  1,
  2,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSWP::UpdateFlowInfoCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UpdateFlowInfoCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::UpdateFlowInfoCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UpdateFlowInfoCommandArchive, command_mode_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UpdateFlowInfoCommandArchive, flow_info_uuid_path_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UpdateFlowInfoCommandArchive, text_box_id_path_to_add_or_remove_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UpdateFlowInfoCommandArchive, text_box_id_paths_at_start_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UpdateFlowInfoCommandArchive, suggested_text_box_id_paths_at_end_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UpdateFlowInfoCommandArchive, undo_text_boxes_to_restore_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UpdateFlowInfoCommandArchive, undo_added_shape_info_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UpdateFlowInfoCommandArchive, undo_removed_shape_info_),
  0,
  5,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSWP::AddFlowInfoCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::AddFlowInfoCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::AddFlowInfoCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::AddFlowInfoCommandArchive, flow_info_to_add_),
  PROTOBUF_FIELD_OFFSET(::TSWP::AddFlowInfoCommandArchive, flow_info_archive_),
  PROTOBUF_FIELD_OFFSET(::TSWP::AddFlowInfoCommandArchive, undo_user_interface_identifier_to_restore_),
  PROTOBUF_FIELD_OFFSET(::TSWP::AddFlowInfoCommandArchive, undo_next_user_interface_identifier_to_restore_),
  PROTOBUF_FIELD_OFFSET(::TSWP::AddFlowInfoCommandArchive, working_undo_object_),
  0,
  1,
  2,
  4,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveFlowInfoCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveFlowInfoCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveFlowInfoCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveFlowInfoCommandArchive, flow_info_uuid_path_),
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveFlowInfoCommandArchive, undo_object_),
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveFlowInfoCommandArchive, undo_user_interface_identifier_to_restore_),
  PROTOBUF_FIELD_OFFSET(::TSWP::RemoveFlowInfoCommandArchive, undo_next_user_interface_identifier_to_restore_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSWP::TextCommentReplyCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextCommentReplyCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::TextCommentReplyCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextCommentReplyCommandArchive, storage_uuid_path_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextCommentReplyCommandArchive, annotation_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextCommentReplyCommandArchive, forward_comment_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextCommentReplyCommandArchive, inverse_comment_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextCommentReplyCommandArchive, forward_variant_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextCommentReplyCommandArchive, inverse_variant_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs, args_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs, args_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs, args_list_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ContainedObjectsCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ContainedObjectsCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ContainedObjectsCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ContainedObjectsCommandArchive, target_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ContainedObjectsCommandArchive, objects_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ContainedObjectsCommandArchive, undo_object_for_commit_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ContainedObjectsCommandArchive, undo_object_for_make_inverse_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ContainedObjectsCommandArchive, add_behavior_args_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ContainedObjectsCommandArchive, remove_behavior_args_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ContainedObjectsCommandArchive, rearrange_behavior_args_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ContainedObjectsCommandArchive, container_name_),
  1,
  2,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::EquationInfoGeometryCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::EquationInfoGeometryCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::EquationInfoGeometryCommandArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStyleChangePropertyCommand_GArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStyleChangePropertyCommand_GArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStyleChangePropertyCommand_GArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStyleChangePropertyCommand_GArchive, range_list_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStyleChangePropertyCommand_GArchive, range_list_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStyleChangePropertyCommand_GArchive, change_list_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStyleChangePropertyCommand_GArchive, change_list_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStyleChangePropertyCommand_GArchive, disable_character_style_promotion_),
  0,
  ~0u,
  1,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStyleChangePropertyCommand_GArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStyleChangePropertyCommand_GArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStyleChangePropertyCommand_GArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStyleChangePropertyCommand_GArchive, range_list_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStyleChangePropertyCommand_GArchive, range_list_undefined_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStyleChangePropertyCommand_GArchive, change_list_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStyleChangePropertyCommand_GArchive, change_list_undefined_),
  0,
  ~0u,
  1,
  ~0u,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::TSWP::DummyCommandArchive)},
  { 7, 21, sizeof(::TSWP::TextCommandArchive)},
  { 30, 47, sizeof(::TSWP::StorageActionCommandArchive)},
  { 59, 67, sizeof(::TSWP::SetColumnStyleCommandArchive)},
  { 70, 78, sizeof(::TSWP::ReplaceAllUsesOfStyleCommandArchive)},
  { 81, 91, sizeof(::TSWP::InsertColumnsCommandArchive)},
  { 96, 106, sizeof(::TSWP::InsertRowsCommandArchive)},
  { 111, 121, sizeof(::TSWP::RemoveColumnsCommandArchive)},
  { 126, 136, sizeof(::TSWP::RemoveRowsCommandArchive)},
  { 141, 153, sizeof(::TSWP::MergeCellsCommandArchive)},
  { 160, 171, sizeof(::TSWP::ApplyPlaceholderTextCommandArchive)},
  { 177, 187, sizeof(::TSWP::UpdateDateTimeFieldCommandArchive)},
  { 192, 203, sizeof(::TSWP::ApplyRubyTextCommandArchive)},
  { 209, 219, sizeof(::TSWP::ModifyRubyTextCommandArchive)},
  { 224, 232, sizeof(::TSWP::ModifyTOCSettingsBaseCommandArchive)},
  { 235, 242, sizeof(::TSWP::ModifyTOCSettingsForTOCInfoCommandArchive)},
  { 244, 252, sizeof(::TSWP::ModifyTOCSettingsPresetForThemeCommandArchive)},
  { 255, 272, sizeof(::TSWP::AnchorAttachmentCommandArchive)},
  { 284, 292, sizeof(::TSWP::TextApplyThemeCommandArchive)},
  { 295, 306, sizeof(::TSWP::MoveColumnsCommandArchive)},
  { 312, 323, sizeof(::TSWP::MoveRowsCommandArchive)},
  { 329, 336, sizeof(::TSWP::ShapeApplyPresetCommandArchive)},
  { 338, 346, sizeof(::TSWP::StyleBaseCommandArchive)},
  { 349, 356, sizeof(::TSWP::StyleCreateCommandArchive)},
  { 358, 366, sizeof(::TSWP::StyleRenameCommandArchive)},
  { 369, 377, sizeof(::TSWP::StyleUpdateCommandArchive)},
  { 380, 387, sizeof(::TSWP::StyleDeleteCommandArchive)},
  { 389, 397, sizeof(::TSWP::StyleReorderCommandArchive)},
  { 400, 406, sizeof(::TSWP::StyleUpdatePropertyMapCommandArchive)},
  { 407, 414, sizeof(::TSWP::ShapeStyleSetValueCommandArchive)},
  { 416, 424, sizeof(::TSWP::SelectionTransformerArchive)},
  { 427, 434, sizeof(::TSWP::PencilAnnotationSelectionTransformerArchive)},
  { 436, 443, sizeof(::TSWP::ShapeSelectionTransformerArchive)},
  { 445, 453, sizeof(::TSWP::ShapeContentDescription)},
  { 456, 471, sizeof(::TSWP::ObjectPropertyArchive)},
  { 481, 491, sizeof(::TSWP::SetObjectPropertiesCommandArchive)},
  { 496, 510, sizeof(::TSWP::UpdateFlowInfoCommandArchive)},
  { 519, 530, sizeof(::TSWP::AddFlowInfoCommandArchive)},
  { 536, 546, sizeof(::TSWP::RemoveFlowInfoCommandArchive)},
  { 551, 563, sizeof(::TSWP::TextCommentReplyCommandArchive)},
  { 570, -1, sizeof(::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs)},
  { 576, -1, sizeof(::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs)},
  { 582, -1, sizeof(::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs)},
  { 588, 602, sizeof(::TSWP::ContainedObjectsCommandArchive)},
  { 611, 617, sizeof(::TSWP::EquationInfoGeometryCommandArchive)},
  { 618, 629, sizeof(::TSWP::CharacterStyleChangePropertyCommand_GArchive)},
  { 635, 645, sizeof(::TSWP::ParagraphStyleChangePropertyCommand_GArchive)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_DummyCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_TextCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_StorageActionCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_SetColumnStyleCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ReplaceAllUsesOfStyleCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_InsertColumnsCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_InsertRowsCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_RemoveColumnsCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_RemoveRowsCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_MergeCellsCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ApplyPlaceholderTextCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_UpdateDateTimeFieldCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ApplyRubyTextCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ModifyRubyTextCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ModifyTOCSettingsBaseCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ModifyTOCSettingsForTOCInfoCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ModifyTOCSettingsPresetForThemeCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_AnchorAttachmentCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_TextApplyThemeCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_MoveColumnsCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_MoveRowsCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ShapeApplyPresetCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_StyleBaseCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_StyleCreateCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_StyleRenameCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_StyleUpdateCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_StyleDeleteCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_StyleReorderCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_StyleUpdatePropertyMapCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ShapeStyleSetValueCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_SelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_PencilAnnotationSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ShapeSelectionTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ShapeContentDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ObjectPropertyArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_SetObjectPropertiesCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_UpdateFlowInfoCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_AddFlowInfoCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_RemoveFlowInfoCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_TextCommentReplyCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ContainedObjectsCommandArchive_AddBehaviorArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ContainedObjectsCommandArchive_RemoveBehaviorArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ContainedObjectsCommandArchive_RearrangeBehaviorArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ContainedObjectsCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_EquationInfoGeometryCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_CharacterStyleChangePropertyCommand_GArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSWP::_ParagraphStyleChangePropertyCommand_GArchive_default_instance_),
};

const char descriptor_table_protodef_TSWPCommandArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031TSWPCommandArchives.proto\022\004TSWP\032\021TSPMe"
  "ssages.proto\032\021TSSArchives.proto\032\021TSDArch"
  "ives.proto\032\030TSDCommandArchives.proto\032\021TS"
  "KArchives.proto\032\022TSWPArchives.proto\032\026TSW"
  "PArchives.sos.proto\"\"\n\023DummyCommandArchi"
  "ve\022\013\n\003foo\030\001 \002(\r\"\351\006\n\022TextCommandArchive\022\""
  "\n\005super\030\001 \001(\0132\023.TSK.CommandArchive\022\037\n\007st"
  "orage\030\002 \001(\0132\016.TSP.Reference\022/\n\020undo_tran"
  "saction\030\003 \001(\0132\025.TSWP.UndoTransaction\022\036\n\026"
  "restore_range_location\030\004 \001(\r\022\034\n\024restore_"
  "range_length\030\005 \001(\r\022#\n\033redo_restore_range"
  "_location\030\006 \001(\r\022!\n\031redo_restore_range_le"
  "ngth\030\007 \001(\r\022\032\n\022text_command_flags\030\t \001(\r\022;"
  "\n\004kind\030\n \001(\0162\035.TSWP.TextCommandArchive.K"
  "ind:\016kKindContained\"\375\003\n\004Kind\022\022\n\016kKindCon"
  "tained\020\000\022\024\n\020kKindReplaceText\020\001\022\016\n\nkKindP"
  "aste\020\002\022\027\n\023kKindParagraphStyle\020\003\022\022\n\016kKind"
  "ListStyle\020\004\022\035\n\031kKindIndentParagraphLevel"
  "\020\005\022\021\n\rkKindDragText\020\006\022\023\n\017kKindPasteStyle"
  "\020\007\022\034\n\030kKindApplyChangesInRange\020\010\022\034\n\030kKin"
  "dInsertCitationField\020\n\022 \n\034kKindInsertBib"
  "liographyEntry\020\013\022\035\n\031kKindFormatCitationF"
  "ields\020\014\022\034\n\030kKindInsertTOCSmartField\020\r\022\034\n"
  "\030kKindInsertDateTimeField\020\016\022\034\n\030kKindUpda"
  "teDateTimeField\020\017\022%\n!kKindSetParagraphFi"
  "rstTopicNumber\020\020\022\027\n\023kKindCharacterStyle\020"
  "\021\022\025\n\021kKindRevertStyles\020\022\022\031\n\025kKindSetPara"
  "graphBidi\020\023\"\210\014\n\033StorageActionCommandArch"
  "ive\022\"\n\005super\030\001 \001(\0132\023.TSK.CommandArchive\022"
  "\036\n\007storage\030\002 \001(\0132\r.TSP.UUIDPath\022/\n\020undo_"
  "transaction\030\003 \001(\0132\025.TSWP.UndoTransaction"
  "\022\032\n\022text_command_flags\030\004 \001(\r\022D\n\004kind\030\005 \001"
  "(\0162&.TSWP.StorageActionCommandArchive.Ki"
  "nd:\016kKindContained\022%\n\022custom_format_keys"
  "\030\006 \003(\0132\t.TSP.UUID\022\"\n\032is_forward_inverse_"
  "command\030\007 \001(\010\022\024\n\014coalesceable\030\010 \001(\010\022\027\n\017c"
  "oalescing_text\030\t \001(\010\022\035\n\025should_migrate_s"
  "tyles\030\n \001(\010\022\?\n\035changed_data_reference_re"
  "cord\030\013 \001(\0132\030.TSK.DataReferenceRecord\022\033\n\023"
  "coalescing_property\030\014 \001(\t\"\232\010\n\004Kind\022\022\n\016kK"
  "indContained\020\000\022\024\n\020kKindReplaceText\020\001\022\016\n\n"
  "kKindPaste\020\002\022\027\n\023kKindParagraphStyle\020\003\022\022\n"
  "\016kKindListStyle\020\004\022\035\n\031kKindIndentParagrap"
  "hLevel\020\005\022\021\n\rkKindDragText\020\006\022\023\n\017kKindPast"
  "eStyle\020\007\022\034\n\030kKindApplyChangesInRange\020\010\022\034"
  "\n\030kKindInsertCitationField\020\n\022 \n\034kKindIns"
  "ertBibliographyEntry\020\013\022\035\n\031kKindFormatCit"
  "ationFields\020\014\022\034\n\030kKindInsertTOCSmartFiel"
  "d\020\r\022\034\n\030kKindInsertDateTimeField\020\016\022\034\n\030kKi"
  "ndUpdateDateTimeField\020\017\022%\n!kKindSetParag"
  "raphFirstTopicNumber\020\020\022\027\n\023kKindCharacter"
  "Style\020\021\022\025\n\021kKindRevertStyles\020\022\022\031\n\025kKindS"
  "etParagraphBidi\020\023\022\023\n\017kKindFormatText\020\024\022\031"
  "\n\025kKindInsertAttachment\020\025\022\030\n\024kKindCreate"
  "Hyperlink\020\026\022\030\n\024kKindModifyHyperlink\020\027\022\030\n"
  "\024kKindRemoveHyperlink\020\030\022\033\n\027kKindApplyHig"
  "hlightText\020\031\022\036\n\032kKindPropagateStyleChang"
  "es\020\032\022$\n kKindMovedAnchoredDrawableInline"
  "\020\033\022\036\n\032kKindMoveDrawablesAttached\020\034\022\"\n\036kK"
  "indMoveMoveDrawablesFloating\020\035\022#\n\037kKindM"
  "oveInlineDrawableAnchored\020\036\022\031\n\025kKindAnch"
  "orAttachment\020\037\022\021\n\rkKindBookmark\020 \022\027\n\023kKi"
  "ndReplaceSection\020!\022\036\n\032kKindApplyPencilAn"
  "notation\020\"\022\023\n\017kKindCreateRuby\020#\022\023\n\017kKind"
  "ModifyRuby\020$\022\023\n\017kKindRemoveRuby\020%\022\024\n\020kKi"
  "ndTateChuYoko\020&\022\025\n\021kKindDropCapStyle\020\'\"\224"
  "\001\n\034SetColumnStyleCommandArchive\022\"\n\005super"
  "\030\001 \001(\0132\023.TSK.CommandArchive\022\037\n\007storage\030\002"
  " \001(\0132\016.TSP.Reference\022/\n\020undo_transaction"
  "\030\003 \001(\0132\025.TSWP.UndoTransaction\"\233\001\n#Replac"
  "eAllUsesOfStyleCommandArchive\022\"\n\005super\030\001"
  " \001(\0132\023.TSK.CommandArchive\022\037\n\007storage\030\002 \001"
  "(\0132\016.TSP.Reference\022/\n\020undo_transaction\030\003"
  " \001(\0132\025.TSWP.UndoTransaction\"\277\001\n\033InsertCo"
  "lumnsCommandArchive\022\"\n\005super\030\001 \001(\0132\023.TSK"
  ".CommandArchive\022\037\n\007storage\030\002 \001(\0132\016.TSP.R"
  "eference\022\024\n\014column_index\030\003 \001(\r\022\024\n\014column"
  "_count\030\004 \001(\r\022/\n\020undo_transaction\030\005 \001(\0132\025"
  ".TSWP.UndoTransaction\"\266\001\n\030InsertRowsComm"
  "andArchive\022\"\n\005super\030\001 \001(\0132\023.TSK.CommandA"
  "rchive\022\037\n\007storage\030\002 \001(\0132\016.TSP.Reference\022"
  "\021\n\trow_index\030\003 \001(\r\022\021\n\trow_count\030\004 \001(\r\022/\n"
  "\020undo_transaction\030\005 \001(\0132\025.TSWP.UndoTrans"
  "action\"\277\001\n\033RemoveColumnsCommandArchive\022\""
  "\n\005super\030\001 \001(\0132\023.TSK.CommandArchive\022\037\n\007st"
  "orage\030\002 \001(\0132\016.TSP.Reference\022\024\n\014column_in"
  "dex\030\003 \001(\r\022\024\n\014column_count\030\004 \001(\r\022/\n\020undo_"
  "transaction\030\005 \001(\0132\025.TSWP.UndoTransaction"
  "\"\266\001\n\030RemoveRowsCommandArchive\022\"\n\005super\030\001"
  " \001(\0132\023.TSK.CommandArchive\022\037\n\007storage\030\002 \001"
  "(\0132\016.TSP.Reference\022\021\n\trow_index\030\003 \001(\r\022\021\n"
  "\trow_count\030\004 \001(\r\022/\n\020undo_transaction\030\005 \001"
  "(\0132\025.TSWP.UndoTransaction\"\326\001\n\030MergeCells"
  "CommandArchive\022\"\n\005super\030\001 \001(\0132\023.TSK.Comm"
  "andArchive\022\037\n\007storage\030\002 \001(\0132\016.TSP.Refere"
  "nce\022\013\n\003row\030\003 \001(\r\022\016\n\006column\030\004 \001(\r\022\021\n\trow_"
  "count\030\005 \001(\r\022\024\n\014column_count\030\006 \001(\r\022/\n\020und"
  "o_transaction\030\007 \001(\0132\025.TSWP.UndoTransacti"
  "on\"\360\001\n\"ApplyPlaceholderTextCommandArchiv"
  "e\022\"\n\005super\030\001 \001(\0132\023.TSK.CommandArchive\022\037\n"
  "\007storage\030\002 \001(\0132\016.TSP.Reference\022 \n\030select"
  "ion_range_location\030\003 \001(\r\022\036\n\026selection_ra"
  "nge_length\030\004 \001(\r\022/\n\020undo_transaction\030\005 \001"
  "(\0132\025.TSWP.UndoTransaction\022\022\n\nscript_tag\030"
  "\006 \001(\t\"\246\002\n!UpdateDateTimeFieldCommandArch"
  "ive\022\'\n\005super\030\001 \001(\0132\030.TSWP.TextCommandArc"
  "hive\022\'\n\017date_time_field\030\002 \001(\0132\016.TSP.Refe"
  "rence\022\027\n\004date\030\003 \001(\0132\t.TSP.Date\022J\n\ndate_s"
  "tyle\030\004 \001(\01626.TSWP.DateTimeSmartFieldArch"
  "ive.DateTimeFormatterStyle\022J\n\ntime_style"
  "\030\005 \001(\01626.TSWP.DateTimeSmartFieldArchive."
  "DateTimeFormatterStyle\"\350\001\n\033ApplyRubyText"
  "CommandArchive\022\"\n\005super\030\001 \001(\0132\023.TSK.Comm"
  "andArchive\022\037\n\007storage\030\002 \001(\0132\016.TSP.Refere"
  "nce\022 \n\030selection_range_location\030\003 \001(\r\022\036\n"
  "\026selection_range_length\030\004 \001(\r\022\021\n\truby_te"
  "xt\030\005 \001(\t\022/\n\020undo_transaction\030\006 \001(\0132\025.TSW"
  "P.UndoTransaction\"\275\001\n\034ModifyRubyTextComm"
  "andArchive\022\"\n\005super\030\001 \001(\0132\023.TSK.CommandA"
  "rchive\022\"\n\nruby_field\030\002 \001(\0132\016.TSP.Referen"
  "ce\022\021\n\truby_text\030\003 \001(\t\022\021\n\tbase_text\030\004 \001(\t"
  "\022/\n\020undo_transaction\030\005 \001(\0132\025.TSWP.UndoTr"
  "ansaction\"\235\001\n#ModifyTOCSettingsBaseComma"
  "ndArchive\022\"\n\005super\030\001 \001(\0132\023.TSK.CommandAr"
  "chive\022(\n\020old_toc_settings\030\002 \001(\0132\016.TSP.Re"
  "ference\022(\n\020new_toc_settings\030\003 \001(\0132\016.TSP."
  "Reference\"\220\001\n)ModifyTOCSettingsForTOCInf"
  "oCommandArchive\0228\n\005super\030\001 \001(\0132).TSWP.Mo"
  "difyTOCSettingsBaseCommandArchive\022)\n\022toc"
  "_info_uuid_path\030\002 \001(\0132\r.TSP.UUIDPath\"\236\001\n"
  "-ModifyTOCSettingsPresetForThemeCommandA"
  "rchive\0228\n\005super\030\001 \001(\0132).TSWP.ModifyTOCSe"
  "ttingsBaseCommandArchive\022\035\n\005theme\030\002 \001(\0132"
  "\016.TSP.Reference\022\024\n\014preset_index\030\003 \001(\r\"\337\002"
  "\n\036AnchorAttachmentCommandArchive\0220\n\005supe"
  "r\030\001 \001(\0132!.TSWP.StorageActionCommandArchi"
  "ve\022\"\n\nattachment\030\002 \001(\0132\016.TSP.Reference\022\025"
  "\n\rh_offset_type\030\003 \001(\r\022\020\n\010h_offset\030\004 \001(\002\022"
  "\025\n\rv_offset_type\030\005 \001(\r\022\020\n\010v_offset\030\006 \001(\002"
  "\022\024\n\014is_html_wrap\030\007 \001(\010\022\032\n\022undo_h_offset_"
  "type\030\010 \001(\r\022\025\n\rundo_h_offset\030\t \001(\002\022\032\n\022und"
  "o_v_offset_type\030\n \001(\r\022\025\n\rundo_v_offset\030\013"
  " \001(\002\022\031\n\021undo_is_html_wrap\030\014 \001(\010\"\243\001\n\034Text"
  "ApplyThemeCommandArchive\0221\n\005super\030\001 \001(\0132"
  "\".TSS.ApplyThemeChildCommandArchive\022\037\n\007s"
  "torage\030\002 \001(\0132\016.TSP.Reference\022/\n\020undo_tra"
  "nsaction\030\006 \001(\0132\025.TSWP.UndoTransaction\"\306\001"
  "\n\031MoveColumnsCommandArchive\022\"\n\005super\030\001 \001"
  "(\0132\023.TSK.CommandArchive\022\037\n\007storage\030\002 \001(\013"
  "2\016.TSP.Reference\022\021\n\tsrc_index\030\003 \001(\r\022\021\n\td"
  "st_index\030\004 \001(\r\022\r\n\005count\030\005 \001(\r\022/\n\020undo_tr"
  "ansaction\030\006 \001(\0132\025.TSWP.UndoTransaction\"\303"
  "\001\n\026MoveRowsCommandArchive\022\"\n\005super\030\001 \001(\013"
  "2\023.TSK.CommandArchive\022\037\n\007storage\030\002 \001(\0132\016"
  ".TSP.Reference\022\021\n\tsrc_index\030\003 \001(\r\022\021\n\tdst"
  "_index\030\004 \001(\r\022\r\n\005count\030\005 \001(\r\022/\n\020undo_tran"
  "saction\030\006 \001(\0132\025.TSWP.UndoTransaction\"w\n\036"
  "ShapeApplyPresetCommandArchive\0221\n\005super\030"
  "\001 \002(\0132\".TSD.BaseApplyPresetCommandArchiv"
  "e\022\"\n\nundo_style\030\002 \001(\0132\016.TSP.Reference\"{\n"
  "\027StyleBaseCommandArchive\022\"\n\005super\030\001 \001(\0132"
  "\023.TSK.CommandArchive\022\035\n\005theme\030\002 \001(\0132\016.TS"
  "P.Reference\022\035\n\005style\030\003 \001(\0132\016.TSP.Referen"
  "ce\"_\n\031StyleCreateCommandArchive\022,\n\005super"
  "\030\001 \001(\0132\035.TSWP.StyleBaseCommandArchive\022\024\n"
  "\014preset_index\030\002 \001(\r\"q\n\031StyleRenameComman"
  "dArchive\022,\n\005super\030\001 \001(\0132\035.TSWP.StyleBase"
  "CommandArchive\022\024\n\014updated_name\030\002 \001(\t\022\020\n\010"
  "old_name\030\003 \001(\t\"\230\001\n\031StyleUpdateCommandArc"
  "hive\022,\n\005super\030\001 \001(\0132\035.TSWP.StyleBaseComm"
  "andArchive\022&\n\016original_style\030\002 \001(\0132\016.TSP"
  ".Reference\022%\n\rupdated_style\030\003 \001(\0132\016.TSP."
  "Reference\"c\n\031StyleDeleteCommandArchive\022,"
  "\n\005super\030\001 \001(\0132\035.TSWP.StyleBaseCommandArc"
  "hive\022\030\n\020old_preset_index\030\002 \001(\r\"~\n\032StyleR"
  "eorderCommandArchive\022,\n\005super\030\001 \001(\0132\035.TS"
  "WP.StyleBaseCommandArchive\022\030\n\020old_preset"
  "_index\030\002 \001(\r\022\030\n\020new_preset_index\030\003 \001(\r\"`"
  "\n$StyleUpdatePropertyMapCommandArchive\0228"
  "\n\005super\030\001 \002(\0132).TSS.StyleUpdatePropertyM"
  "apCommandArchive\"\224\001\n ShapeStyleSetValueC"
  "ommandArchive\0223\n\005super\030\001 \002(\0132$.TSD.BaseS"
  "tyleSetValueCommandArchive\022;\n\006change\030\004 \001"
  "(\0132+.TSWPSOS.ShapeStylePropertyChangeSet"
  "Archive\"\207\001\n\033SelectionTransformerArchive\022"
  "(\n\021storage_uuid_path\030\001 \002(\0132\r.TSP.UUIDPat"
  "h\022!\n\tselection\030\002 \002(\0132\016.TSP.Reference\022\033\n\023"
  "transformed_to_noop\030\003 \001(\010\"|\n+PencilAnnot"
  "ationSelectionTransformerArchive\022(\n\021stor"
  "age_uuid_path\030\001 \002(\0132\r.TSP.UUIDPath\022#\n\033te"
  "xt_pencil_annotation_uuid\030\002 \002(\t\"\202\001\n Shap"
  "eSelectionTransformerArchive\0224\n\005super\030\001 "
  "\002(\0132%.TSD.ShapeSelectionTransformerArchi"
  "ve\022(\n\021storage_uuid_path\030\002 \001(\0132\r.TSP.UUID"
  "Path\"\201\001\n\027ShapeContentDescription\022.\n\005supe"
  "r\030\001 \002(\0132\037.TSD.DrawableContentDescription"
  "\022\033\n\023text_range_location\030\002 \001(\r\022\031\n\021text_ra"
  "nge_length\030\003 \001(\r\"\272\002\n\025ObjectPropertyArchi"
  "ve\022\014\n\004name\030\001 \002(\t\022&\n\004type\030\002 \002(\0162\030.TSWP.Ob"
  "jectPropertyType\022\022\n\nbool_value\030\003 \001(\010\022\023\n\013"
  "float_value\030\004 \001(\002\022\025\n\rinteger_value\030\005 \001(\005"
  "\022\024\n\014string_value\030\006 \001(\t\022$\n\rid_path_value\030"
  "\007 \001(\0132\r.TSP.UUIDPath\022$\n\nfill_value\030\010 \001(\013"
  "2\020.TSD.FillArchive\022\037\n\013color_value\030\t \001(\0132"
  "\n.TSP.Color\022(\n\014shadow_value\030\n \001(\0132\022.TSD."
  "ShadowArchive\"\355\001\n!SetObjectPropertiesCom"
  "mandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Command"
  "Archive\022\'\n\020object_uuid_path\030\002 \002(\0132\r.TSP."
  "UUIDPath\022/\n\nproperties\030\003 \003(\0132\033.TSWP.Obje"
  "ctPropertyArchive\022\025\n\raction_string\030\004 \001(\t"
  "\0223\n\016old_properties\030\005 \003(\0132\033.TSWP.ObjectPr"
  "opertyArchive\"\311\004\n\034UpdateFlowInfoCommandA"
  "rchive\022\"\n\005super\030\001 \001(\0132\023.TSK.CommandArchi"
  "ve\022M\n\014command_mode\030\002 \001(\0162\'.TSWP.UpdateFl"
  "owInfoCommandArchive.Mode:\016kModeRearrang"
  "e\022*\n\023flow_info_uuid_path\030\003 \001(\0132\r.TSP.UUI"
  "DPath\0228\n!text_box_id_path_to_add_or_remo"
  "ve\030\004 \001(\0132\r.TSP.UUIDPath\0221\n\032text_box_id_p"
  "aths_at_start\030\005 \003(\0132\r.TSP.UUIDPath\0229\n\"su"
  "ggested_text_box_id_paths_at_end\030\006 \003(\0132\r"
  ".TSP.UUIDPath\0222\n\032undo_text_boxes_to_rest"
  "ore\030\007 \003(\0132\016.TSP.Reference\022-\n\025undo_added_"
  "shape_info\030\010 \001(\0132\016.TSP.Reference\022/\n\027undo"
  "_removed_shape_info\030\t \001(\0132\016.TSP.Referenc"
  "e\"N\n\004Mode\022\022\n\016kModeRearrange\020\000\022\014\n\010kModeAd"
  "d\020\001\022\017\n\013kModeRemove\020\002\022\023\n\017kModeCompensate\020"
  "\003\"\254\002\n\031AddFlowInfoCommandArchive\022\"\n\005super"
  "\030\001 \001(\0132\023.TSK.CommandArchive\022(\n\020flow_info"
  "_to_add\030\002 \001(\0132\016.TSP.Reference\022)\n\021flow_in"
  "fo_archive\030\003 \001(\0132\016.TSP.Reference\0221\n)undo"
  "_user_interface_identifier_to_restore\030\004 "
  "\001(\r\0226\n.undo_next_user_interface_identifi"
  "er_to_restore\030\005 \001(\r\022+\n\023working_undo_obje"
  "ct\030\006 \001(\0132\016.TSP.Reference\"\376\001\n\034RemoveFlowI"
  "nfoCommandArchive\022\"\n\005super\030\001 \001(\0132\023.TSK.C"
  "ommandArchive\022*\n\023flow_info_uuid_path\030\002 \001"
  "(\0132\r.TSP.UUIDPath\022#\n\013undo_object\030\003 \001(\0132\016"
  ".TSP.Reference\0221\n)undo_user_interface_id"
  "entifier_to_restore\030\004 \001(\r\0226\n.undo_next_u"
  "ser_interface_identifier_to_restore\030\005 \001("
  "\r\"\303\002\n\036TextCommentReplyCommandArchive\022\"\n\005"
  "super\030\001 \001(\0132\023.TSK.CommandArchive\022(\n\021stor"
  "age_uuid_path\030\002 \001(\0132\r.TSP.UUIDPath\022\027\n\017an"
  "notation_uuid\030\003 \001(\t\022\'\n\017forward_comment\030\004"
  " \001(\0132\016.TSP.Reference\022\'\n\017inverse_comment\030"
  "\005 \001(\0132\016.TSP.Reference\0223\n\017forward_variant"
  "\030\006 \001(\0162\032.TSD.CommentCommandVariant\0223\n\017in"
  "verse_variant\030\007 \001(\0162\032.TSD.CommentCommand"
  "Variant\"\327\005\n\036ContainedObjectsCommandArchi"
  "ve\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\036"
  "\n\006target\030\002 \002(\0132\016.TSP.Reference\022\037\n\007object"
  "s\030\003 \003(\0132\016.TSP.Reference\022.\n\026undo_object_f"
  "or_commit\030\004 \001(\0132\016.TSP.Reference\0224\n\034undo_"
  "object_for_make_inverse\030\005 \001(\0132\016.TSP.Refe"
  "rence\022O\n\021add_behavior_args\030\006 \001(\01324.TSWP."
  "ContainedObjectsCommandArchive.AddBehavi"
  "orArgs\022U\n\024remove_behavior_args\030\007 \001(\01327.T"
  "SWP.ContainedObjectsCommandArchive.Remov"
  "eBehaviorArgs\022[\n\027rearrange_behavior_args"
  "\030\010 \001(\0132:.TSWP.ContainedObjectsCommandArc"
  "hive.RearrangeBehaviorArgs\022\026\n\016container_"
  "name\030\t \001(\t\032=\n\017AddBehaviorArgs\022*\n\targs_li"
  "st\030\001 \003(\0132\027.TSK.AddIdOperationArgs\032C\n\022Rem"
  "oveBehaviorArgs\022-\n\targs_list\030\001 \003(\0132\032.TSK"
  ".RemoveIdOperationArgs\032I\n\025RearrangeBehav"
  "iorArgs\0220\n\targs_list\030\001 \003(\0132\035.TSK.Rearran"
  "geIdOperationArgs\"Y\n\"EquationInfoGeometr"
  "yCommandArchive\0223\n\005super\030\001 \001(\0132$.TSD.Med"
  "iaInfoGeometryCommandArchive\"\256\002\n,Charact"
  "erStyleChangePropertyCommand_GArchive\0220\n"
  "\005super\030\001 \002(\0132!.TSWP.StorageActionCommand"
  "Archive\022\036\n\nrange_list\030\002 \003(\0132\n.TSP.Range\022"
  "\034\n\024range_list_undefined\030\003 \001(\010\022D\n\013change_"
  "list\030\004 \003(\0132/.TSWPSOS.CharacterStylePrope"
  "rtyChangeSetArchive\022\035\n\025change_list_undef"
  "ined\030\005 \001(\010\022)\n!disable_character_style_pr"
  "omotion\030\006 \002(\010\"\203\002\n,ParagraphStyleChangePr"
  "opertyCommand_GArchive\0220\n\005super\030\001 \002(\0132!."
  "TSWP.StorageActionCommandArchive\022\036\n\nrang"
  "e_list\030\002 \003(\0132\n.TSP.Range\022\034\n\024range_list_u"
  "ndefined\030\003 \001(\010\022D\n\013change_list\030\004 \003(\0132/.TS"
  "WPSOS.ParagraphStylePropertyChangeSetArc"
  "hive\022\035\n\025change_list_undefined\030\005 \001(\010*\207\002\n\022"
  "ObjectPropertyType\022\033\n\027kObjectPropertyTyp"
  "eBool\020\000\022\034\n\030kObjectPropertyTypeFloat\020\001\022\036\n"
  "\032kObjectPropertyTypeInteger\020\002\022\035\n\031kObject"
  "PropertyTypeString\020\003\022\035\n\031kObjectPropertyT"
  "ypeIdPath\020\004\022\033\n\027kObjectPropertyTypeFill\020\005"
  "\022\034\n\030kObjectPropertyTypeColor\020\006\022\035\n\031kObjec"
  "tPropertyTypeShadow\020\007"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TSWPCommandArchives_2eproto_deps[7] = {
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSDCommandArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
  &::descriptor_table_TSWPArchives_2esos_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TSWPCommandArchives_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSWPCommandArchives_2eproto = {
  false, false, 11581, descriptor_table_protodef_TSWPCommandArchives_2eproto, "TSWPCommandArchives.proto", 
  &descriptor_table_TSWPCommandArchives_2eproto_once, descriptor_table_TSWPCommandArchives_2eproto_deps, 7, 47,
  schemas, file_default_instances, TableStruct_TSWPCommandArchives_2eproto::offsets,
  file_level_metadata_TSWPCommandArchives_2eproto, file_level_enum_descriptors_TSWPCommandArchives_2eproto, file_level_service_descriptors_TSWPCommandArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TSWPCommandArchives_2eproto_getter() {
  return &descriptor_table_TSWPCommandArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TSWPCommandArchives_2eproto(&descriptor_table_TSWPCommandArchives_2eproto);
namespace TSWP {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextCommandArchive_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPCommandArchives_2eproto);
  return file_level_enum_descriptors_TSWPCommandArchives_2eproto[0];
}
bool TextCommandArchive_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TextCommandArchive_Kind TextCommandArchive::kKindContained;
constexpr TextCommandArchive_Kind TextCommandArchive::kKindReplaceText;
constexpr TextCommandArchive_Kind TextCommandArchive::kKindPaste;
constexpr TextCommandArchive_Kind TextCommandArchive::kKindParagraphStyle;
constexpr TextCommandArchive_Kind TextCommandArchive::kKindListStyle;
constexpr TextCommandArchive_Kind TextCommandArchive::kKindIndentParagraphLevel;
constexpr TextCommandArchive_Kind TextCommandArchive::kKindDragText;
constexpr TextCommandArchive_Kind TextCommandArchive::kKindPasteStyle;
constexpr TextCommandArchive_Kind TextCommandArchive::kKindApplyChangesInRange;
constexpr TextCommandArchive_Kind TextCommandArchive::kKindInsertCitationField;
constexpr TextCommandArchive_Kind TextCommandArchive::kKindInsertBibliographyEntry;
constexpr TextCommandArchive_Kind TextCommandArchive::kKindFormatCitationFields;
constexpr TextCommandArchive_Kind TextCommandArchive::kKindInsertTOCSmartField;
constexpr TextCommandArchive_Kind TextCommandArchive::kKindInsertDateTimeField;
constexpr TextCommandArchive_Kind TextCommandArchive::kKindUpdateDateTimeField;
constexpr TextCommandArchive_Kind TextCommandArchive::kKindSetParagraphFirstTopicNumber;
constexpr TextCommandArchive_Kind TextCommandArchive::kKindCharacterStyle;
constexpr TextCommandArchive_Kind TextCommandArchive::kKindRevertStyles;
constexpr TextCommandArchive_Kind TextCommandArchive::kKindSetParagraphBidi;
constexpr TextCommandArchive_Kind TextCommandArchive::Kind_MIN;
constexpr TextCommandArchive_Kind TextCommandArchive::Kind_MAX;
constexpr int TextCommandArchive::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StorageActionCommandArchive_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPCommandArchives_2eproto);
  return file_level_enum_descriptors_TSWPCommandArchives_2eproto[1];
}
bool StorageActionCommandArchive_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindContained;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindReplaceText;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindPaste;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindParagraphStyle;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindListStyle;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindIndentParagraphLevel;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindDragText;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindPasteStyle;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindApplyChangesInRange;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindInsertCitationField;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindInsertBibliographyEntry;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindFormatCitationFields;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindInsertTOCSmartField;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindInsertDateTimeField;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindUpdateDateTimeField;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindSetParagraphFirstTopicNumber;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindCharacterStyle;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindRevertStyles;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindSetParagraphBidi;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindFormatText;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindInsertAttachment;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindCreateHyperlink;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindModifyHyperlink;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindRemoveHyperlink;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindApplyHighlightText;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindPropagateStyleChanges;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindMovedAnchoredDrawableInline;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindMoveDrawablesAttached;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindMoveMoveDrawablesFloating;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindMoveInlineDrawableAnchored;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindAnchorAttachment;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindBookmark;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindReplaceSection;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindApplyPencilAnnotation;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindCreateRuby;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindModifyRuby;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindRemoveRuby;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindTateChuYoko;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::kKindDropCapStyle;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::Kind_MIN;
constexpr StorageActionCommandArchive_Kind StorageActionCommandArchive::Kind_MAX;
constexpr int StorageActionCommandArchive::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateFlowInfoCommandArchive_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPCommandArchives_2eproto);
  return file_level_enum_descriptors_TSWPCommandArchives_2eproto[2];
}
bool UpdateFlowInfoCommandArchive_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UpdateFlowInfoCommandArchive_Mode UpdateFlowInfoCommandArchive::kModeRearrange;
constexpr UpdateFlowInfoCommandArchive_Mode UpdateFlowInfoCommandArchive::kModeAdd;
constexpr UpdateFlowInfoCommandArchive_Mode UpdateFlowInfoCommandArchive::kModeRemove;
constexpr UpdateFlowInfoCommandArchive_Mode UpdateFlowInfoCommandArchive::kModeCompensate;
constexpr UpdateFlowInfoCommandArchive_Mode UpdateFlowInfoCommandArchive::Mode_MIN;
constexpr UpdateFlowInfoCommandArchive_Mode UpdateFlowInfoCommandArchive::Mode_MAX;
constexpr int UpdateFlowInfoCommandArchive::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectPropertyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPCommandArchives_2eproto);
  return file_level_enum_descriptors_TSWPCommandArchives_2eproto[3];
}
bool ObjectPropertyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DummyCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DummyCommandArchive>()._has_bits_);
  static void set_has_foo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DummyCommandArchive::DummyCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.DummyCommandArchive)
}
DummyCommandArchive::DummyCommandArchive(const DummyCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  foo_ = from.foo_;
  // @@protoc_insertion_point(copy_constructor:TSWP.DummyCommandArchive)
}

void DummyCommandArchive::SharedCtor() {
foo_ = 0u;
}

DummyCommandArchive::~DummyCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.DummyCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DummyCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DummyCommandArchive::ArenaDtor(void* object) {
  DummyCommandArchive* _this = reinterpret_cast< DummyCommandArchive* >(object);
  (void)_this;
}
void DummyCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DummyCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DummyCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.DummyCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  foo_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DummyCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 foo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_foo(&has_bits);
          foo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DummyCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.DummyCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 foo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_foo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.DummyCommandArchive)
  return target;
}

size_t DummyCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.DummyCommandArchive)
  size_t total_size = 0;

  // required uint32 foo = 1;
  if (_internal_has_foo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_foo());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DummyCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.DummyCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DummyCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DummyCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.DummyCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.DummyCommandArchive)
    MergeFrom(*source);
  }
}

void DummyCommandArchive::MergeFrom(const DummyCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.DummyCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_foo()) {
    _internal_set_foo(from._internal_foo());
  }
}

void DummyCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.DummyCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DummyCommandArchive::CopyFrom(const DummyCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.DummyCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DummyCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DummyCommandArchive::InternalSwap(DummyCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(foo_, other->foo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DummyCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[0]);
}

// ===================================================================

class TextCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TextCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const TextCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& storage(const TextCommandArchive* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSWP::UndoTransaction& undo_transaction(const TextCommandArchive* msg);
  static void set_has_undo_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_restore_range_location(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_restore_range_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_redo_restore_range_location(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_redo_restore_range_length(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_text_command_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::TSK::CommandArchive&
TextCommandArchive::_Internal::super(const TextCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
TextCommandArchive::_Internal::storage(const TextCommandArchive* msg) {
  return *msg->storage_;
}
const ::TSWP::UndoTransaction&
TextCommandArchive::_Internal::undo_transaction(const TextCommandArchive* msg) {
  return *msg->undo_transaction_;
}
void TextCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TextCommandArchive::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TextCommandArchive::clear_undo_transaction() {
  if (undo_transaction_ != nullptr) undo_transaction_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TextCommandArchive::TextCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.TextCommandArchive)
}
TextCommandArchive::TextCommandArchive(const TextCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_storage()) {
    storage_ = new ::TSP::Reference(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  if (from._internal_has_undo_transaction()) {
    undo_transaction_ = new ::TSWP::UndoTransaction(*from.undo_transaction_);
  } else {
    undo_transaction_ = nullptr;
  }
  ::memcpy(&restore_range_location_, &from.restore_range_location_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&restore_range_location_)) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:TSWP.TextCommandArchive)
}

void TextCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&super_)) + sizeof(kind_));
}

TextCommandArchive::~TextCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TextCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete undo_transaction_;
}

void TextCommandArchive::ArenaDtor(void* object) {
  TextCommandArchive* _this = reinterpret_cast< TextCommandArchive* >(object);
  (void)_this;
}
void TextCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TextCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(storage_ != nullptr);
      storage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_transaction_ != nullptr);
      undo_transaction_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&restore_range_location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&text_command_flags_) -
        reinterpret_cast<char*>(&restore_range_location_)) + sizeof(text_command_flags_));
  }
  kind_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction undo_transaction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 restore_range_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_restore_range_location(&has_bits);
          restore_range_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 restore_range_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_restore_range_length(&has_bits);
          restore_range_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 redo_restore_range_location = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_redo_restore_range_location(&has_bits);
          redo_restore_range_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 redo_restore_range_length = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_redo_restore_range_length(&has_bits);
          redo_restore_range_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 text_command_flags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_text_command_flags(&has_bits);
          text_command_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.TextCommandArchive.Kind kind = 10 [default = kKindContained];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::TextCommandArchive_Kind_IsValid(val))) {
            _internal_set_kind(static_cast<::TSWP::TextCommandArchive_Kind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TextCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference storage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage(this), target, stream);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::undo_transaction(this), target, stream);
  }

  // optional uint32 restore_range_location = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_restore_range_location(), target);
  }

  // optional uint32 restore_range_length = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_restore_range_length(), target);
  }

  // optional uint32 redo_restore_range_location = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_redo_restore_range_location(), target);
  }

  // optional uint32 redo_restore_range_length = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_redo_restore_range_length(), target);
  }

  // optional uint32 text_command_flags = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_text_command_flags(), target);
  }

  // optional .TSWP.TextCommandArchive.Kind kind = 10 [default = kKindContained];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TextCommandArchive)
  return target;
}

size_t TextCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TextCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSK.CommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference storage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_);
    }

    // optional .TSWP.UndoTransaction undo_transaction = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_transaction_);
    }

    // optional uint32 restore_range_location = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_restore_range_location());
    }

    // optional uint32 restore_range_length = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_restore_range_length());
    }

    // optional uint32 redo_restore_range_location = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_redo_restore_range_location());
    }

    // optional uint32 redo_restore_range_length = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_redo_restore_range_length());
    }

    // optional uint32 text_command_flags = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_text_command_flags());
    }

  }
  // optional .TSWP.TextCommandArchive.Kind kind = 10 [default = kKindContained];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.TextCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const TextCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.TextCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.TextCommandArchive)
    MergeFrom(*source);
  }
}

void TextCommandArchive::MergeFrom(const TextCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TextCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_storage()->::TSP::Reference::MergeFrom(from._internal_storage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from._internal_undo_transaction());
    }
    if (cached_has_bits & 0x00000008u) {
      restore_range_location_ = from.restore_range_location_;
    }
    if (cached_has_bits & 0x00000010u) {
      restore_range_length_ = from.restore_range_length_;
    }
    if (cached_has_bits & 0x00000020u) {
      redo_restore_range_location_ = from.redo_restore_range_location_;
    }
    if (cached_has_bits & 0x00000040u) {
      redo_restore_range_length_ = from.redo_restore_range_length_;
    }
    if (cached_has_bits & 0x00000080u) {
      text_command_flags_ = from.text_command_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_kind(from._internal_kind());
  }
}

void TextCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.TextCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextCommandArchive::CopyFrom(const TextCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TextCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_storage()) {
    if (!storage_->IsInitialized()) return false;
  }
  if (_internal_has_undo_transaction()) {
    if (!undo_transaction_->IsInitialized()) return false;
  }
  return true;
}

void TextCommandArchive::InternalSwap(TextCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextCommandArchive, kind_)
      + sizeof(TextCommandArchive::kind_)
      - PROTOBUF_FIELD_OFFSET(TextCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[1]);
}

// ===================================================================

class StorageActionCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StorageActionCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const StorageActionCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDPath& storage(const StorageActionCommandArchive* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSWP::UndoTransaction& undo_transaction(const StorageActionCommandArchive* msg);
  static void set_has_undo_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_text_command_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_forward_inverse_command(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_coalesceable(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_coalescing_text(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_should_migrate_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSK::DataReferenceRecord& changed_data_reference_record(const StorageActionCommandArchive* msg);
  static void set_has_changed_data_reference_record(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_coalescing_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSK::CommandArchive&
StorageActionCommandArchive::_Internal::super(const StorageActionCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
StorageActionCommandArchive::_Internal::storage(const StorageActionCommandArchive* msg) {
  return *msg->storage_;
}
const ::TSWP::UndoTransaction&
StorageActionCommandArchive::_Internal::undo_transaction(const StorageActionCommandArchive* msg) {
  return *msg->undo_transaction_;
}
const ::TSK::DataReferenceRecord&
StorageActionCommandArchive::_Internal::changed_data_reference_record(const StorageActionCommandArchive* msg) {
  return *msg->changed_data_reference_record_;
}
void StorageActionCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void StorageActionCommandArchive::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void StorageActionCommandArchive::clear_undo_transaction() {
  if (undo_transaction_ != nullptr) undo_transaction_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void StorageActionCommandArchive::clear_custom_format_keys() {
  custom_format_keys_.Clear();
}
void StorageActionCommandArchive::clear_changed_data_reference_record() {
  if (changed_data_reference_record_ != nullptr) changed_data_reference_record_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
StorageActionCommandArchive::StorageActionCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  custom_format_keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.StorageActionCommandArchive)
}
StorageActionCommandArchive::StorageActionCommandArchive(const StorageActionCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      custom_format_keys_(from.custom_format_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  coalescing_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coalescing_property()) {
    coalescing_property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_coalescing_property(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_storage()) {
    storage_ = new ::TSP::UUIDPath(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  if (from._internal_has_undo_transaction()) {
    undo_transaction_ = new ::TSWP::UndoTransaction(*from.undo_transaction_);
  } else {
    undo_transaction_ = nullptr;
  }
  if (from._internal_has_changed_data_reference_record()) {
    changed_data_reference_record_ = new ::TSK::DataReferenceRecord(*from.changed_data_reference_record_);
  } else {
    changed_data_reference_record_ = nullptr;
  }
  ::memcpy(&text_command_flags_, &from.text_command_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&should_migrate_styles_) -
    reinterpret_cast<char*>(&text_command_flags_)) + sizeof(should_migrate_styles_));
  // @@protoc_insertion_point(copy_constructor:TSWP.StorageActionCommandArchive)
}

void StorageActionCommandArchive::SharedCtor() {
coalescing_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&should_migrate_styles_) -
    reinterpret_cast<char*>(&super_)) + sizeof(should_migrate_styles_));
}

StorageActionCommandArchive::~StorageActionCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.StorageActionCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StorageActionCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  coalescing_property_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete undo_transaction_;
  if (this != internal_default_instance()) delete changed_data_reference_record_;
}

void StorageActionCommandArchive::ArenaDtor(void* object) {
  StorageActionCommandArchive* _this = reinterpret_cast< StorageActionCommandArchive* >(object);
  (void)_this;
}
void StorageActionCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StorageActionCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StorageActionCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.StorageActionCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_format_keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      coalescing_property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(storage_ != nullptr);
      storage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undo_transaction_ != nullptr);
      undo_transaction_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(changed_data_reference_record_ != nullptr);
      changed_data_reference_record_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&text_command_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_forward_inverse_command_) -
        reinterpret_cast<char*>(&text_command_flags_)) + sizeof(is_forward_inverse_command_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&coalesceable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&should_migrate_styles_) -
        reinterpret_cast<char*>(&coalesceable_)) + sizeof(should_migrate_styles_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StorageActionCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction undo_transaction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 text_command_flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_text_command_flags(&has_bits);
          text_command_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.StorageActionCommandArchive.Kind kind = 5 [default = kKindContained];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::StorageActionCommandArchive_Kind_IsValid(val))) {
            _internal_set_kind(static_cast<::TSWP::StorageActionCommandArchive_Kind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_forward_inverse_command = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_forward_inverse_command(&has_bits);
          is_forward_inverse_command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool coalesceable = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_coalesceable(&has_bits);
          coalesceable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool coalescing_text = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_coalescing_text(&has_bits);
          coalescing_text_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_migrate_styles = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_should_migrate_styles(&has_bits);
          should_migrate_styles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.DataReferenceRecord changed_data_reference_record = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_changed_data_reference_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string coalescing_property = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_coalescing_property();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.StorageActionCommandArchive.coalescing_property");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StorageActionCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.StorageActionCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.UUIDPath storage = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage(this), target, stream);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::undo_transaction(this), target, stream);
  }

  // optional uint32 text_command_flags = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_text_command_flags(), target);
  }

  // optional .TSWP.StorageActionCommandArchive.Kind kind = 5 [default = kKindContained];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_kind(), target);
  }

  // repeated .TSP.UUID custom_format_keys = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_format_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_custom_format_keys(i), target, stream);
  }

  // optional bool is_forward_inverse_command = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_forward_inverse_command(), target);
  }

  // optional bool coalesceable = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_coalesceable(), target);
  }

  // optional bool coalescing_text = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_coalescing_text(), target);
  }

  // optional bool should_migrate_styles = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_should_migrate_styles(), target);
  }

  // optional .TSK.DataReferenceRecord changed_data_reference_record = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::changed_data_reference_record(this), target, stream);
  }

  // optional string coalescing_property = 12;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coalescing_property().data(), static_cast<int>(this->_internal_coalescing_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.StorageActionCommandArchive.coalescing_property");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_coalescing_property(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.StorageActionCommandArchive)
  return target;
}

size_t StorageActionCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.StorageActionCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID custom_format_keys = 6;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string coalescing_property = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coalescing_property());
    }

    // optional .TSK.CommandArchive super = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.UUIDPath storage = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_);
    }

    // optional .TSWP.UndoTransaction undo_transaction = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_transaction_);
    }

    // optional .TSK.DataReferenceRecord changed_data_reference_record = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *changed_data_reference_record_);
    }

    // optional uint32 text_command_flags = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_text_command_flags());
    }

    // optional .TSWP.StorageActionCommandArchive.Kind kind = 5 [default = kKindContained];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
    }

    // optional bool is_forward_inverse_command = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool coalesceable = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool coalescing_text = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool should_migrate_styles = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageActionCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.StorageActionCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageActionCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StorageActionCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.StorageActionCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.StorageActionCommandArchive)
    MergeFrom(*source);
  }
}

void StorageActionCommandArchive::MergeFrom(const StorageActionCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.StorageActionCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_format_keys_.MergeFrom(from.custom_format_keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_coalescing_property(from._internal_coalescing_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_storage()->::TSP::UUIDPath::MergeFrom(from._internal_storage());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from._internal_undo_transaction());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_changed_data_reference_record()->::TSK::DataReferenceRecord::MergeFrom(from._internal_changed_data_reference_record());
    }
    if (cached_has_bits & 0x00000020u) {
      text_command_flags_ = from.text_command_flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      kind_ = from.kind_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_forward_inverse_command_ = from.is_forward_inverse_command_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      coalesceable_ = from.coalesceable_;
    }
    if (cached_has_bits & 0x00000200u) {
      coalescing_text_ = from.coalescing_text_;
    }
    if (cached_has_bits & 0x00000400u) {
      should_migrate_styles_ = from.should_migrate_styles_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StorageActionCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.StorageActionCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageActionCommandArchive::CopyFrom(const StorageActionCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.StorageActionCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageActionCommandArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(custom_format_keys_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_storage()) {
    if (!storage_->IsInitialized()) return false;
  }
  if (_internal_has_undo_transaction()) {
    if (!undo_transaction_->IsInitialized()) return false;
  }
  if (_internal_has_changed_data_reference_record()) {
    if (!changed_data_reference_record_->IsInitialized()) return false;
  }
  return true;
}

void StorageActionCommandArchive::InternalSwap(StorageActionCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  custom_format_keys_.InternalSwap(&other->custom_format_keys_);
  coalescing_property_.Swap(&other->coalescing_property_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StorageActionCommandArchive, should_migrate_styles_)
      + sizeof(StorageActionCommandArchive::should_migrate_styles_)
      - PROTOBUF_FIELD_OFFSET(StorageActionCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageActionCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[2]);
}

// ===================================================================

class SetColumnStyleCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SetColumnStyleCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const SetColumnStyleCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& storage(const SetColumnStyleCommandArchive* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSWP::UndoTransaction& undo_transaction(const SetColumnStyleCommandArchive* msg);
  static void set_has_undo_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSK::CommandArchive&
SetColumnStyleCommandArchive::_Internal::super(const SetColumnStyleCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
SetColumnStyleCommandArchive::_Internal::storage(const SetColumnStyleCommandArchive* msg) {
  return *msg->storage_;
}
const ::TSWP::UndoTransaction&
SetColumnStyleCommandArchive::_Internal::undo_transaction(const SetColumnStyleCommandArchive* msg) {
  return *msg->undo_transaction_;
}
void SetColumnStyleCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SetColumnStyleCommandArchive::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SetColumnStyleCommandArchive::clear_undo_transaction() {
  if (undo_transaction_ != nullptr) undo_transaction_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SetColumnStyleCommandArchive::SetColumnStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.SetColumnStyleCommandArchive)
}
SetColumnStyleCommandArchive::SetColumnStyleCommandArchive(const SetColumnStyleCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_storage()) {
    storage_ = new ::TSP::Reference(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  if (from._internal_has_undo_transaction()) {
    undo_transaction_ = new ::TSWP::UndoTransaction(*from.undo_transaction_);
  } else {
    undo_transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.SetColumnStyleCommandArchive)
}

void SetColumnStyleCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_transaction_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_transaction_));
}

SetColumnStyleCommandArchive::~SetColumnStyleCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.SetColumnStyleCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetColumnStyleCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete undo_transaction_;
}

void SetColumnStyleCommandArchive::ArenaDtor(void* object) {
  SetColumnStyleCommandArchive* _this = reinterpret_cast< SetColumnStyleCommandArchive* >(object);
  (void)_this;
}
void SetColumnStyleCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetColumnStyleCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetColumnStyleCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.SetColumnStyleCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(storage_ != nullptr);
      storage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_transaction_ != nullptr);
      undo_transaction_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetColumnStyleCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction undo_transaction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetColumnStyleCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.SetColumnStyleCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference storage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage(this), target, stream);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::undo_transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.SetColumnStyleCommandArchive)
  return target;
}

size_t SetColumnStyleCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.SetColumnStyleCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSK.CommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference storage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_);
    }

    // optional .TSWP.UndoTransaction undo_transaction = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_transaction_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetColumnStyleCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.SetColumnStyleCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SetColumnStyleCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetColumnStyleCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.SetColumnStyleCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.SetColumnStyleCommandArchive)
    MergeFrom(*source);
  }
}

void SetColumnStyleCommandArchive::MergeFrom(const SetColumnStyleCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.SetColumnStyleCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_storage()->::TSP::Reference::MergeFrom(from._internal_storage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from._internal_undo_transaction());
    }
  }
}

void SetColumnStyleCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.SetColumnStyleCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetColumnStyleCommandArchive::CopyFrom(const SetColumnStyleCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.SetColumnStyleCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetColumnStyleCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_storage()) {
    if (!storage_->IsInitialized()) return false;
  }
  if (_internal_has_undo_transaction()) {
    if (!undo_transaction_->IsInitialized()) return false;
  }
  return true;
}

void SetColumnStyleCommandArchive::InternalSwap(SetColumnStyleCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetColumnStyleCommandArchive, undo_transaction_)
      + sizeof(SetColumnStyleCommandArchive::undo_transaction_)
      - PROTOBUF_FIELD_OFFSET(SetColumnStyleCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetColumnStyleCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[3]);
}

// ===================================================================

class ReplaceAllUsesOfStyleCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ReplaceAllUsesOfStyleCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ReplaceAllUsesOfStyleCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& storage(const ReplaceAllUsesOfStyleCommandArchive* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSWP::UndoTransaction& undo_transaction(const ReplaceAllUsesOfStyleCommandArchive* msg);
  static void set_has_undo_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSK::CommandArchive&
ReplaceAllUsesOfStyleCommandArchive::_Internal::super(const ReplaceAllUsesOfStyleCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
ReplaceAllUsesOfStyleCommandArchive::_Internal::storage(const ReplaceAllUsesOfStyleCommandArchive* msg) {
  return *msg->storage_;
}
const ::TSWP::UndoTransaction&
ReplaceAllUsesOfStyleCommandArchive::_Internal::undo_transaction(const ReplaceAllUsesOfStyleCommandArchive* msg) {
  return *msg->undo_transaction_;
}
void ReplaceAllUsesOfStyleCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ReplaceAllUsesOfStyleCommandArchive::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ReplaceAllUsesOfStyleCommandArchive::clear_undo_transaction() {
  if (undo_transaction_ != nullptr) undo_transaction_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ReplaceAllUsesOfStyleCommandArchive::ReplaceAllUsesOfStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.ReplaceAllUsesOfStyleCommandArchive)
}
ReplaceAllUsesOfStyleCommandArchive::ReplaceAllUsesOfStyleCommandArchive(const ReplaceAllUsesOfStyleCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_storage()) {
    storage_ = new ::TSP::Reference(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  if (from._internal_has_undo_transaction()) {
    undo_transaction_ = new ::TSWP::UndoTransaction(*from.undo_transaction_);
  } else {
    undo_transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.ReplaceAllUsesOfStyleCommandArchive)
}

void ReplaceAllUsesOfStyleCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_transaction_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_transaction_));
}

ReplaceAllUsesOfStyleCommandArchive::~ReplaceAllUsesOfStyleCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ReplaceAllUsesOfStyleCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplaceAllUsesOfStyleCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete undo_transaction_;
}

void ReplaceAllUsesOfStyleCommandArchive::ArenaDtor(void* object) {
  ReplaceAllUsesOfStyleCommandArchive* _this = reinterpret_cast< ReplaceAllUsesOfStyleCommandArchive* >(object);
  (void)_this;
}
void ReplaceAllUsesOfStyleCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplaceAllUsesOfStyleCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReplaceAllUsesOfStyleCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ReplaceAllUsesOfStyleCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(storage_ != nullptr);
      storage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_transaction_ != nullptr);
      undo_transaction_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplaceAllUsesOfStyleCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction undo_transaction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplaceAllUsesOfStyleCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ReplaceAllUsesOfStyleCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference storage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage(this), target, stream);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::undo_transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ReplaceAllUsesOfStyleCommandArchive)
  return target;
}

size_t ReplaceAllUsesOfStyleCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ReplaceAllUsesOfStyleCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSK.CommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference storage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_);
    }

    // optional .TSWP.UndoTransaction undo_transaction = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_transaction_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplaceAllUsesOfStyleCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.ReplaceAllUsesOfStyleCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplaceAllUsesOfStyleCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplaceAllUsesOfStyleCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.ReplaceAllUsesOfStyleCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.ReplaceAllUsesOfStyleCommandArchive)
    MergeFrom(*source);
  }
}

void ReplaceAllUsesOfStyleCommandArchive::MergeFrom(const ReplaceAllUsesOfStyleCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ReplaceAllUsesOfStyleCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_storage()->::TSP::Reference::MergeFrom(from._internal_storage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from._internal_undo_transaction());
    }
  }
}

void ReplaceAllUsesOfStyleCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.ReplaceAllUsesOfStyleCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceAllUsesOfStyleCommandArchive::CopyFrom(const ReplaceAllUsesOfStyleCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ReplaceAllUsesOfStyleCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceAllUsesOfStyleCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_storage()) {
    if (!storage_->IsInitialized()) return false;
  }
  if (_internal_has_undo_transaction()) {
    if (!undo_transaction_->IsInitialized()) return false;
  }
  return true;
}

void ReplaceAllUsesOfStyleCommandArchive::InternalSwap(ReplaceAllUsesOfStyleCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplaceAllUsesOfStyleCommandArchive, undo_transaction_)
      + sizeof(ReplaceAllUsesOfStyleCommandArchive::undo_transaction_)
      - PROTOBUF_FIELD_OFFSET(ReplaceAllUsesOfStyleCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplaceAllUsesOfStyleCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[4]);
}

// ===================================================================

class InsertColumnsCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InsertColumnsCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const InsertColumnsCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& storage(const InsertColumnsCommandArchive* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_column_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_column_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSWP::UndoTransaction& undo_transaction(const InsertColumnsCommandArchive* msg);
  static void set_has_undo_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSK::CommandArchive&
InsertColumnsCommandArchive::_Internal::super(const InsertColumnsCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
InsertColumnsCommandArchive::_Internal::storage(const InsertColumnsCommandArchive* msg) {
  return *msg->storage_;
}
const ::TSWP::UndoTransaction&
InsertColumnsCommandArchive::_Internal::undo_transaction(const InsertColumnsCommandArchive* msg) {
  return *msg->undo_transaction_;
}
void InsertColumnsCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void InsertColumnsCommandArchive::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void InsertColumnsCommandArchive::clear_undo_transaction() {
  if (undo_transaction_ != nullptr) undo_transaction_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
InsertColumnsCommandArchive::InsertColumnsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.InsertColumnsCommandArchive)
}
InsertColumnsCommandArchive::InsertColumnsCommandArchive(const InsertColumnsCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_storage()) {
    storage_ = new ::TSP::Reference(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  if (from._internal_has_undo_transaction()) {
    undo_transaction_ = new ::TSWP::UndoTransaction(*from.undo_transaction_);
  } else {
    undo_transaction_ = nullptr;
  }
  ::memcpy(&column_index_, &from.column_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&column_count_) -
    reinterpret_cast<char*>(&column_index_)) + sizeof(column_count_));
  // @@protoc_insertion_point(copy_constructor:TSWP.InsertColumnsCommandArchive)
}

void InsertColumnsCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&column_count_) -
    reinterpret_cast<char*>(&super_)) + sizeof(column_count_));
}

InsertColumnsCommandArchive::~InsertColumnsCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.InsertColumnsCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertColumnsCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete undo_transaction_;
}

void InsertColumnsCommandArchive::ArenaDtor(void* object) {
  InsertColumnsCommandArchive* _this = reinterpret_cast< InsertColumnsCommandArchive* >(object);
  (void)_this;
}
void InsertColumnsCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertColumnsCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertColumnsCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.InsertColumnsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(storage_ != nullptr);
      storage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_transaction_ != nullptr);
      undo_transaction_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&column_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&column_count_) -
        reinterpret_cast<char*>(&column_index_)) + sizeof(column_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertColumnsCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 column_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_column_index(&has_bits);
          column_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 column_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_column_count(&has_bits);
          column_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction undo_transaction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertColumnsCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.InsertColumnsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference storage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage(this), target, stream);
  }

  // optional uint32 column_index = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_column_index(), target);
  }

  // optional uint32 column_count = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_column_count(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::undo_transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.InsertColumnsCommandArchive)
  return target;
}

size_t InsertColumnsCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.InsertColumnsCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSK.CommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference storage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_);
    }

    // optional .TSWP.UndoTransaction undo_transaction = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_transaction_);
    }

    // optional uint32 column_index = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_column_index());
    }

    // optional uint32 column_count = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_column_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertColumnsCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.InsertColumnsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertColumnsCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertColumnsCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.InsertColumnsCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.InsertColumnsCommandArchive)
    MergeFrom(*source);
  }
}

void InsertColumnsCommandArchive::MergeFrom(const InsertColumnsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.InsertColumnsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_storage()->::TSP::Reference::MergeFrom(from._internal_storage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from._internal_undo_transaction());
    }
    if (cached_has_bits & 0x00000008u) {
      column_index_ = from.column_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      column_count_ = from.column_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InsertColumnsCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.InsertColumnsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertColumnsCommandArchive::CopyFrom(const InsertColumnsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.InsertColumnsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertColumnsCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_storage()) {
    if (!storage_->IsInitialized()) return false;
  }
  if (_internal_has_undo_transaction()) {
    if (!undo_transaction_->IsInitialized()) return false;
  }
  return true;
}

void InsertColumnsCommandArchive::InternalSwap(InsertColumnsCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertColumnsCommandArchive, column_count_)
      + sizeof(InsertColumnsCommandArchive::column_count_)
      - PROTOBUF_FIELD_OFFSET(InsertColumnsCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertColumnsCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[5]);
}

// ===================================================================

class InsertRowsCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InsertRowsCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const InsertRowsCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& storage(const InsertRowsCommandArchive* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_row_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSWP::UndoTransaction& undo_transaction(const InsertRowsCommandArchive* msg);
  static void set_has_undo_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSK::CommandArchive&
InsertRowsCommandArchive::_Internal::super(const InsertRowsCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
InsertRowsCommandArchive::_Internal::storage(const InsertRowsCommandArchive* msg) {
  return *msg->storage_;
}
const ::TSWP::UndoTransaction&
InsertRowsCommandArchive::_Internal::undo_transaction(const InsertRowsCommandArchive* msg) {
  return *msg->undo_transaction_;
}
void InsertRowsCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void InsertRowsCommandArchive::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void InsertRowsCommandArchive::clear_undo_transaction() {
  if (undo_transaction_ != nullptr) undo_transaction_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
InsertRowsCommandArchive::InsertRowsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.InsertRowsCommandArchive)
}
InsertRowsCommandArchive::InsertRowsCommandArchive(const InsertRowsCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_storage()) {
    storage_ = new ::TSP::Reference(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  if (from._internal_has_undo_transaction()) {
    undo_transaction_ = new ::TSWP::UndoTransaction(*from.undo_transaction_);
  } else {
    undo_transaction_ = nullptr;
  }
  ::memcpy(&row_index_, &from.row_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&row_count_) -
    reinterpret_cast<char*>(&row_index_)) + sizeof(row_count_));
  // @@protoc_insertion_point(copy_constructor:TSWP.InsertRowsCommandArchive)
}

void InsertRowsCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&row_count_) -
    reinterpret_cast<char*>(&super_)) + sizeof(row_count_));
}

InsertRowsCommandArchive::~InsertRowsCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.InsertRowsCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertRowsCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete undo_transaction_;
}

void InsertRowsCommandArchive::ArenaDtor(void* object) {
  InsertRowsCommandArchive* _this = reinterpret_cast< InsertRowsCommandArchive* >(object);
  (void)_this;
}
void InsertRowsCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertRowsCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertRowsCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.InsertRowsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(storage_ != nullptr);
      storage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_transaction_ != nullptr);
      undo_transaction_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&row_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&row_count_) -
        reinterpret_cast<char*>(&row_index_)) + sizeof(row_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertRowsCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 row_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_row_index(&has_bits);
          row_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 row_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_row_count(&has_bits);
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction undo_transaction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertRowsCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.InsertRowsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference storage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage(this), target, stream);
  }

  // optional uint32 row_index = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_row_index(), target);
  }

  // optional uint32 row_count = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_row_count(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::undo_transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.InsertRowsCommandArchive)
  return target;
}

size_t InsertRowsCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.InsertRowsCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSK.CommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference storage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_);
    }

    // optional .TSWP.UndoTransaction undo_transaction = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_transaction_);
    }

    // optional uint32 row_index = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_row_index());
    }

    // optional uint32 row_count = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_row_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertRowsCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.InsertRowsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertRowsCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertRowsCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.InsertRowsCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.InsertRowsCommandArchive)
    MergeFrom(*source);
  }
}

void InsertRowsCommandArchive::MergeFrom(const InsertRowsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.InsertRowsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_storage()->::TSP::Reference::MergeFrom(from._internal_storage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from._internal_undo_transaction());
    }
    if (cached_has_bits & 0x00000008u) {
      row_index_ = from.row_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      row_count_ = from.row_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InsertRowsCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.InsertRowsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertRowsCommandArchive::CopyFrom(const InsertRowsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.InsertRowsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertRowsCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_storage()) {
    if (!storage_->IsInitialized()) return false;
  }
  if (_internal_has_undo_transaction()) {
    if (!undo_transaction_->IsInitialized()) return false;
  }
  return true;
}

void InsertRowsCommandArchive::InternalSwap(InsertRowsCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertRowsCommandArchive, row_count_)
      + sizeof(InsertRowsCommandArchive::row_count_)
      - PROTOBUF_FIELD_OFFSET(InsertRowsCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertRowsCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[6]);
}

// ===================================================================

class RemoveColumnsCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoveColumnsCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const RemoveColumnsCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& storage(const RemoveColumnsCommandArchive* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_column_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_column_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSWP::UndoTransaction& undo_transaction(const RemoveColumnsCommandArchive* msg);
  static void set_has_undo_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSK::CommandArchive&
RemoveColumnsCommandArchive::_Internal::super(const RemoveColumnsCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
RemoveColumnsCommandArchive::_Internal::storage(const RemoveColumnsCommandArchive* msg) {
  return *msg->storage_;
}
const ::TSWP::UndoTransaction&
RemoveColumnsCommandArchive::_Internal::undo_transaction(const RemoveColumnsCommandArchive* msg) {
  return *msg->undo_transaction_;
}
void RemoveColumnsCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RemoveColumnsCommandArchive::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void RemoveColumnsCommandArchive::clear_undo_transaction() {
  if (undo_transaction_ != nullptr) undo_transaction_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
RemoveColumnsCommandArchive::RemoveColumnsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.RemoveColumnsCommandArchive)
}
RemoveColumnsCommandArchive::RemoveColumnsCommandArchive(const RemoveColumnsCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_storage()) {
    storage_ = new ::TSP::Reference(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  if (from._internal_has_undo_transaction()) {
    undo_transaction_ = new ::TSWP::UndoTransaction(*from.undo_transaction_);
  } else {
    undo_transaction_ = nullptr;
  }
  ::memcpy(&column_index_, &from.column_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&column_count_) -
    reinterpret_cast<char*>(&column_index_)) + sizeof(column_count_));
  // @@protoc_insertion_point(copy_constructor:TSWP.RemoveColumnsCommandArchive)
}

void RemoveColumnsCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&column_count_) -
    reinterpret_cast<char*>(&super_)) + sizeof(column_count_));
}

RemoveColumnsCommandArchive::~RemoveColumnsCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.RemoveColumnsCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveColumnsCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete undo_transaction_;
}

void RemoveColumnsCommandArchive::ArenaDtor(void* object) {
  RemoveColumnsCommandArchive* _this = reinterpret_cast< RemoveColumnsCommandArchive* >(object);
  (void)_this;
}
void RemoveColumnsCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveColumnsCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveColumnsCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.RemoveColumnsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(storage_ != nullptr);
      storage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_transaction_ != nullptr);
      undo_transaction_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&column_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&column_count_) -
        reinterpret_cast<char*>(&column_index_)) + sizeof(column_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveColumnsCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 column_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_column_index(&has_bits);
          column_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 column_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_column_count(&has_bits);
          column_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction undo_transaction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveColumnsCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.RemoveColumnsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference storage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage(this), target, stream);
  }

  // optional uint32 column_index = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_column_index(), target);
  }

  // optional uint32 column_count = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_column_count(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::undo_transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.RemoveColumnsCommandArchive)
  return target;
}

size_t RemoveColumnsCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.RemoveColumnsCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSK.CommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference storage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_);
    }

    // optional .TSWP.UndoTransaction undo_transaction = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_transaction_);
    }

    // optional uint32 column_index = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_column_index());
    }

    // optional uint32 column_count = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_column_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveColumnsCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.RemoveColumnsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveColumnsCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveColumnsCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.RemoveColumnsCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.RemoveColumnsCommandArchive)
    MergeFrom(*source);
  }
}

void RemoveColumnsCommandArchive::MergeFrom(const RemoveColumnsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.RemoveColumnsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_storage()->::TSP::Reference::MergeFrom(from._internal_storage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from._internal_undo_transaction());
    }
    if (cached_has_bits & 0x00000008u) {
      column_index_ = from.column_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      column_count_ = from.column_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoveColumnsCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.RemoveColumnsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveColumnsCommandArchive::CopyFrom(const RemoveColumnsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.RemoveColumnsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveColumnsCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_storage()) {
    if (!storage_->IsInitialized()) return false;
  }
  if (_internal_has_undo_transaction()) {
    if (!undo_transaction_->IsInitialized()) return false;
  }
  return true;
}

void RemoveColumnsCommandArchive::InternalSwap(RemoveColumnsCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveColumnsCommandArchive, column_count_)
      + sizeof(RemoveColumnsCommandArchive::column_count_)
      - PROTOBUF_FIELD_OFFSET(RemoveColumnsCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveColumnsCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[7]);
}

// ===================================================================

class RemoveRowsCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoveRowsCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const RemoveRowsCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& storage(const RemoveRowsCommandArchive* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_row_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSWP::UndoTransaction& undo_transaction(const RemoveRowsCommandArchive* msg);
  static void set_has_undo_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSK::CommandArchive&
RemoveRowsCommandArchive::_Internal::super(const RemoveRowsCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
RemoveRowsCommandArchive::_Internal::storage(const RemoveRowsCommandArchive* msg) {
  return *msg->storage_;
}
const ::TSWP::UndoTransaction&
RemoveRowsCommandArchive::_Internal::undo_transaction(const RemoveRowsCommandArchive* msg) {
  return *msg->undo_transaction_;
}
void RemoveRowsCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RemoveRowsCommandArchive::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void RemoveRowsCommandArchive::clear_undo_transaction() {
  if (undo_transaction_ != nullptr) undo_transaction_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
RemoveRowsCommandArchive::RemoveRowsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.RemoveRowsCommandArchive)
}
RemoveRowsCommandArchive::RemoveRowsCommandArchive(const RemoveRowsCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_storage()) {
    storage_ = new ::TSP::Reference(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  if (from._internal_has_undo_transaction()) {
    undo_transaction_ = new ::TSWP::UndoTransaction(*from.undo_transaction_);
  } else {
    undo_transaction_ = nullptr;
  }
  ::memcpy(&row_index_, &from.row_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&row_count_) -
    reinterpret_cast<char*>(&row_index_)) + sizeof(row_count_));
  // @@protoc_insertion_point(copy_constructor:TSWP.RemoveRowsCommandArchive)
}

void RemoveRowsCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&row_count_) -
    reinterpret_cast<char*>(&super_)) + sizeof(row_count_));
}

RemoveRowsCommandArchive::~RemoveRowsCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.RemoveRowsCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveRowsCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete undo_transaction_;
}

void RemoveRowsCommandArchive::ArenaDtor(void* object) {
  RemoveRowsCommandArchive* _this = reinterpret_cast< RemoveRowsCommandArchive* >(object);
  (void)_this;
}
void RemoveRowsCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveRowsCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveRowsCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.RemoveRowsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(storage_ != nullptr);
      storage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_transaction_ != nullptr);
      undo_transaction_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&row_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&row_count_) -
        reinterpret_cast<char*>(&row_index_)) + sizeof(row_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveRowsCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 row_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_row_index(&has_bits);
          row_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 row_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_row_count(&has_bits);
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction undo_transaction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveRowsCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.RemoveRowsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference storage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage(this), target, stream);
  }

  // optional uint32 row_index = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_row_index(), target);
  }

  // optional uint32 row_count = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_row_count(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::undo_transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.RemoveRowsCommandArchive)
  return target;
}

size_t RemoveRowsCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.RemoveRowsCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSK.CommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference storage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_);
    }

    // optional .TSWP.UndoTransaction undo_transaction = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_transaction_);
    }

    // optional uint32 row_index = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_row_index());
    }

    // optional uint32 row_count = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_row_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveRowsCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.RemoveRowsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveRowsCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveRowsCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.RemoveRowsCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.RemoveRowsCommandArchive)
    MergeFrom(*source);
  }
}

void RemoveRowsCommandArchive::MergeFrom(const RemoveRowsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.RemoveRowsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_storage()->::TSP::Reference::MergeFrom(from._internal_storage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from._internal_undo_transaction());
    }
    if (cached_has_bits & 0x00000008u) {
      row_index_ = from.row_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      row_count_ = from.row_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoveRowsCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.RemoveRowsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveRowsCommandArchive::CopyFrom(const RemoveRowsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.RemoveRowsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRowsCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_storage()) {
    if (!storage_->IsInitialized()) return false;
  }
  if (_internal_has_undo_transaction()) {
    if (!undo_transaction_->IsInitialized()) return false;
  }
  return true;
}

void RemoveRowsCommandArchive::InternalSwap(RemoveRowsCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveRowsCommandArchive, row_count_)
      + sizeof(RemoveRowsCommandArchive::row_count_)
      - PROTOBUF_FIELD_OFFSET(RemoveRowsCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveRowsCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[8]);
}

// ===================================================================

class MergeCellsCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MergeCellsCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const MergeCellsCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& storage(const MergeCellsCommandArchive* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_row_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_column_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSWP::UndoTransaction& undo_transaction(const MergeCellsCommandArchive* msg);
  static void set_has_undo_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSK::CommandArchive&
MergeCellsCommandArchive::_Internal::super(const MergeCellsCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
MergeCellsCommandArchive::_Internal::storage(const MergeCellsCommandArchive* msg) {
  return *msg->storage_;
}
const ::TSWP::UndoTransaction&
MergeCellsCommandArchive::_Internal::undo_transaction(const MergeCellsCommandArchive* msg) {
  return *msg->undo_transaction_;
}
void MergeCellsCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MergeCellsCommandArchive::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void MergeCellsCommandArchive::clear_undo_transaction() {
  if (undo_transaction_ != nullptr) undo_transaction_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
MergeCellsCommandArchive::MergeCellsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.MergeCellsCommandArchive)
}
MergeCellsCommandArchive::MergeCellsCommandArchive(const MergeCellsCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_storage()) {
    storage_ = new ::TSP::Reference(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  if (from._internal_has_undo_transaction()) {
    undo_transaction_ = new ::TSWP::UndoTransaction(*from.undo_transaction_);
  } else {
    undo_transaction_ = nullptr;
  }
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&column_count_) -
    reinterpret_cast<char*>(&row_)) + sizeof(column_count_));
  // @@protoc_insertion_point(copy_constructor:TSWP.MergeCellsCommandArchive)
}

void MergeCellsCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&column_count_) -
    reinterpret_cast<char*>(&super_)) + sizeof(column_count_));
}

MergeCellsCommandArchive::~MergeCellsCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.MergeCellsCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MergeCellsCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete undo_transaction_;
}

void MergeCellsCommandArchive::ArenaDtor(void* object) {
  MergeCellsCommandArchive* _this = reinterpret_cast< MergeCellsCommandArchive* >(object);
  (void)_this;
}
void MergeCellsCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MergeCellsCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MergeCellsCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.MergeCellsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(storage_ != nullptr);
      storage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_transaction_ != nullptr);
      undo_transaction_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&row_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&column_count_) -
        reinterpret_cast<char*>(&row_)) + sizeof(column_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeCellsCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_row(&has_bits);
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 column = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_column(&has_bits);
          column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 row_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_row_count(&has_bits);
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 column_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_column_count(&has_bits);
          column_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction undo_transaction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MergeCellsCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.MergeCellsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference storage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage(this), target, stream);
  }

  // optional uint32 row = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_row(), target);
  }

  // optional uint32 column = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_column(), target);
  }

  // optional uint32 row_count = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_row_count(), target);
  }

  // optional uint32 column_count = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_column_count(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::undo_transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.MergeCellsCommandArchive)
  return target;
}

size_t MergeCellsCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.MergeCellsCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .TSK.CommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference storage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_);
    }

    // optional .TSWP.UndoTransaction undo_transaction = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_transaction_);
    }

    // optional uint32 row = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_row());
    }

    // optional uint32 column = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_column());
    }

    // optional uint32 row_count = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_row_count());
    }

    // optional uint32 column_count = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_column_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MergeCellsCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.MergeCellsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MergeCellsCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MergeCellsCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.MergeCellsCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.MergeCellsCommandArchive)
    MergeFrom(*source);
  }
}

void MergeCellsCommandArchive::MergeFrom(const MergeCellsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.MergeCellsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_storage()->::TSP::Reference::MergeFrom(from._internal_storage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from._internal_undo_transaction());
    }
    if (cached_has_bits & 0x00000008u) {
      row_ = from.row_;
    }
    if (cached_has_bits & 0x00000010u) {
      column_ = from.column_;
    }
    if (cached_has_bits & 0x00000020u) {
      row_count_ = from.row_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      column_count_ = from.column_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MergeCellsCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.MergeCellsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeCellsCommandArchive::CopyFrom(const MergeCellsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.MergeCellsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeCellsCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_storage()) {
    if (!storage_->IsInitialized()) return false;
  }
  if (_internal_has_undo_transaction()) {
    if (!undo_transaction_->IsInitialized()) return false;
  }
  return true;
}

void MergeCellsCommandArchive::InternalSwap(MergeCellsCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MergeCellsCommandArchive, column_count_)
      + sizeof(MergeCellsCommandArchive::column_count_)
      - PROTOBUF_FIELD_OFFSET(MergeCellsCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeCellsCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[9]);
}

// ===================================================================

class ApplyPlaceholderTextCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ApplyPlaceholderTextCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ApplyPlaceholderTextCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& storage(const ApplyPlaceholderTextCommandArchive* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_selection_range_location(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_selection_range_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSWP::UndoTransaction& undo_transaction(const ApplyPlaceholderTextCommandArchive* msg);
  static void set_has_undo_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_script_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSK::CommandArchive&
ApplyPlaceholderTextCommandArchive::_Internal::super(const ApplyPlaceholderTextCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
ApplyPlaceholderTextCommandArchive::_Internal::storage(const ApplyPlaceholderTextCommandArchive* msg) {
  return *msg->storage_;
}
const ::TSWP::UndoTransaction&
ApplyPlaceholderTextCommandArchive::_Internal::undo_transaction(const ApplyPlaceholderTextCommandArchive* msg) {
  return *msg->undo_transaction_;
}
void ApplyPlaceholderTextCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ApplyPlaceholderTextCommandArchive::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ApplyPlaceholderTextCommandArchive::clear_undo_transaction() {
  if (undo_transaction_ != nullptr) undo_transaction_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ApplyPlaceholderTextCommandArchive::ApplyPlaceholderTextCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.ApplyPlaceholderTextCommandArchive)
}
ApplyPlaceholderTextCommandArchive::ApplyPlaceholderTextCommandArchive(const ApplyPlaceholderTextCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  script_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_script_tag()) {
    script_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_script_tag(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_storage()) {
    storage_ = new ::TSP::Reference(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  if (from._internal_has_undo_transaction()) {
    undo_transaction_ = new ::TSWP::UndoTransaction(*from.undo_transaction_);
  } else {
    undo_transaction_ = nullptr;
  }
  ::memcpy(&selection_range_location_, &from.selection_range_location_,
    static_cast<size_t>(reinterpret_cast<char*>(&selection_range_length_) -
    reinterpret_cast<char*>(&selection_range_location_)) + sizeof(selection_range_length_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ApplyPlaceholderTextCommandArchive)
}

void ApplyPlaceholderTextCommandArchive::SharedCtor() {
script_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&selection_range_length_) -
    reinterpret_cast<char*>(&super_)) + sizeof(selection_range_length_));
}

ApplyPlaceholderTextCommandArchive::~ApplyPlaceholderTextCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ApplyPlaceholderTextCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApplyPlaceholderTextCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  script_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete undo_transaction_;
}

void ApplyPlaceholderTextCommandArchive::ArenaDtor(void* object) {
  ApplyPlaceholderTextCommandArchive* _this = reinterpret_cast< ApplyPlaceholderTextCommandArchive* >(object);
  (void)_this;
}
void ApplyPlaceholderTextCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplyPlaceholderTextCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApplyPlaceholderTextCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ApplyPlaceholderTextCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      script_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(storage_ != nullptr);
      storage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undo_transaction_ != nullptr);
      undo_transaction_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&selection_range_location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selection_range_length_) -
        reinterpret_cast<char*>(&selection_range_location_)) + sizeof(selection_range_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyPlaceholderTextCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 selection_range_location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_selection_range_location(&has_bits);
          selection_range_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 selection_range_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_selection_range_length(&has_bits);
          selection_range_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction undo_transaction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string script_tag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_script_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.ApplyPlaceholderTextCommandArchive.script_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplyPlaceholderTextCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ApplyPlaceholderTextCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference storage = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage(this), target, stream);
  }

  // optional uint32 selection_range_location = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_selection_range_location(), target);
  }

  // optional uint32 selection_range_length = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_selection_range_length(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::undo_transaction(this), target, stream);
  }

  // optional string script_tag = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_script_tag().data(), static_cast<int>(this->_internal_script_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.ApplyPlaceholderTextCommandArchive.script_tag");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_script_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ApplyPlaceholderTextCommandArchive)
  return target;
}

size_t ApplyPlaceholderTextCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ApplyPlaceholderTextCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string script_tag = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_script_tag());
    }

    // optional .TSK.CommandArchive super = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference storage = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_);
    }

    // optional .TSWP.UndoTransaction undo_transaction = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_transaction_);
    }

    // optional uint32 selection_range_location = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_selection_range_location());
    }

    // optional uint32 selection_range_length = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_selection_range_length());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyPlaceholderTextCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.ApplyPlaceholderTextCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyPlaceholderTextCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplyPlaceholderTextCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.ApplyPlaceholderTextCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.ApplyPlaceholderTextCommandArchive)
    MergeFrom(*source);
  }
}

void ApplyPlaceholderTextCommandArchive::MergeFrom(const ApplyPlaceholderTextCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ApplyPlaceholderTextCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_script_tag(from._internal_script_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_storage()->::TSP::Reference::MergeFrom(from._internal_storage());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from._internal_undo_transaction());
    }
    if (cached_has_bits & 0x00000010u) {
      selection_range_location_ = from.selection_range_location_;
    }
    if (cached_has_bits & 0x00000020u) {
      selection_range_length_ = from.selection_range_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyPlaceholderTextCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.ApplyPlaceholderTextCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyPlaceholderTextCommandArchive::CopyFrom(const ApplyPlaceholderTextCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ApplyPlaceholderTextCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyPlaceholderTextCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_storage()) {
    if (!storage_->IsInitialized()) return false;
  }
  if (_internal_has_undo_transaction()) {
    if (!undo_transaction_->IsInitialized()) return false;
  }
  return true;
}

void ApplyPlaceholderTextCommandArchive::InternalSwap(ApplyPlaceholderTextCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  script_tag_.Swap(&other->script_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApplyPlaceholderTextCommandArchive, selection_range_length_)
      + sizeof(ApplyPlaceholderTextCommandArchive::selection_range_length_)
      - PROTOBUF_FIELD_OFFSET(ApplyPlaceholderTextCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyPlaceholderTextCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[10]);
}

// ===================================================================

class UpdateDateTimeFieldCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateDateTimeFieldCommandArchive>()._has_bits_);
  static const ::TSWP::TextCommandArchive& super(const UpdateDateTimeFieldCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& date_time_field(const UpdateDateTimeFieldCommandArchive* msg);
  static void set_has_date_time_field(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Date& date(const UpdateDateTimeFieldCommandArchive* msg);
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_date_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSWP::TextCommandArchive&
UpdateDateTimeFieldCommandArchive::_Internal::super(const UpdateDateTimeFieldCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
UpdateDateTimeFieldCommandArchive::_Internal::date_time_field(const UpdateDateTimeFieldCommandArchive* msg) {
  return *msg->date_time_field_;
}
const ::TSP::Date&
UpdateDateTimeFieldCommandArchive::_Internal::date(const UpdateDateTimeFieldCommandArchive* msg) {
  return *msg->date_;
}
void UpdateDateTimeFieldCommandArchive::clear_date_time_field() {
  if (date_time_field_ != nullptr) date_time_field_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void UpdateDateTimeFieldCommandArchive::clear_date() {
  if (date_ != nullptr) date_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
UpdateDateTimeFieldCommandArchive::UpdateDateTimeFieldCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.UpdateDateTimeFieldCommandArchive)
}
UpdateDateTimeFieldCommandArchive::UpdateDateTimeFieldCommandArchive(const UpdateDateTimeFieldCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::TextCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_date_time_field()) {
    date_time_field_ = new ::TSP::Reference(*from.date_time_field_);
  } else {
    date_time_field_ = nullptr;
  }
  if (from._internal_has_date()) {
    date_ = new ::TSP::Date(*from.date_);
  } else {
    date_ = nullptr;
  }
  ::memcpy(&date_style_, &from.date_style_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_style_) -
    reinterpret_cast<char*>(&date_style_)) + sizeof(time_style_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UpdateDateTimeFieldCommandArchive)
}

void UpdateDateTimeFieldCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_style_) -
    reinterpret_cast<char*>(&super_)) + sizeof(time_style_));
}

UpdateDateTimeFieldCommandArchive::~UpdateDateTimeFieldCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.UpdateDateTimeFieldCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateDateTimeFieldCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete date_time_field_;
  if (this != internal_default_instance()) delete date_;
}

void UpdateDateTimeFieldCommandArchive::ArenaDtor(void* object) {
  UpdateDateTimeFieldCommandArchive* _this = reinterpret_cast< UpdateDateTimeFieldCommandArchive* >(object);
  (void)_this;
}
void UpdateDateTimeFieldCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateDateTimeFieldCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateDateTimeFieldCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UpdateDateTimeFieldCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(date_time_field_ != nullptr);
      date_time_field_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(date_ != nullptr);
      date_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&date_style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_style_) -
        reinterpret_cast<char*>(&date_style_)) + sizeof(time_style_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDateTimeFieldCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.TextCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference date_time_field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_time_field(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Date date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle_IsValid(val))) {
            _internal_set_date_style(static_cast<::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle_IsValid(val))) {
            _internal_set_time_style(static_cast<::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateDateTimeFieldCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UpdateDateTimeFieldCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.TextCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference date_time_field = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::date_time_field(this), target, stream);
  }

  // optional .TSP.Date date = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::date(this), target, stream);
  }

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_date_style(), target);
  }

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_time_style(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UpdateDateTimeFieldCommandArchive)
  return target;
}

size_t UpdateDateTimeFieldCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UpdateDateTimeFieldCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSWP.TextCommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference date_time_field = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *date_time_field_);
    }

    // optional .TSP.Date date = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *date_);
    }

    // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_date_style());
    }

    // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_time_style());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateDateTimeFieldCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.UpdateDateTimeFieldCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDateTimeFieldCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateDateTimeFieldCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.UpdateDateTimeFieldCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.UpdateDateTimeFieldCommandArchive)
    MergeFrom(*source);
  }
}

void UpdateDateTimeFieldCommandArchive::MergeFrom(const UpdateDateTimeFieldCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UpdateDateTimeFieldCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSWP::TextCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_date_time_field()->::TSP::Reference::MergeFrom(from._internal_date_time_field());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_date()->::TSP::Date::MergeFrom(from._internal_date());
    }
    if (cached_has_bits & 0x00000008u) {
      date_style_ = from.date_style_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_style_ = from.time_style_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateDateTimeFieldCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.UpdateDateTimeFieldCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDateTimeFieldCommandArchive::CopyFrom(const UpdateDateTimeFieldCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UpdateDateTimeFieldCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDateTimeFieldCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_date_time_field()) {
    if (!date_time_field_->IsInitialized()) return false;
  }
  if (_internal_has_date()) {
    if (!date_->IsInitialized()) return false;
  }
  return true;
}

void UpdateDateTimeFieldCommandArchive::InternalSwap(UpdateDateTimeFieldCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateDateTimeFieldCommandArchive, time_style_)
      + sizeof(UpdateDateTimeFieldCommandArchive::time_style_)
      - PROTOBUF_FIELD_OFFSET(UpdateDateTimeFieldCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDateTimeFieldCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[11]);
}

// ===================================================================

class ApplyRubyTextCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ApplyRubyTextCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ApplyRubyTextCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& storage(const ApplyRubyTextCommandArchive* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_selection_range_location(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_selection_range_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ruby_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSWP::UndoTransaction& undo_transaction(const ApplyRubyTextCommandArchive* msg);
  static void set_has_undo_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSK::CommandArchive&
ApplyRubyTextCommandArchive::_Internal::super(const ApplyRubyTextCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
ApplyRubyTextCommandArchive::_Internal::storage(const ApplyRubyTextCommandArchive* msg) {
  return *msg->storage_;
}
const ::TSWP::UndoTransaction&
ApplyRubyTextCommandArchive::_Internal::undo_transaction(const ApplyRubyTextCommandArchive* msg) {
  return *msg->undo_transaction_;
}
void ApplyRubyTextCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ApplyRubyTextCommandArchive::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ApplyRubyTextCommandArchive::clear_undo_transaction() {
  if (undo_transaction_ != nullptr) undo_transaction_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ApplyRubyTextCommandArchive::ApplyRubyTextCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.ApplyRubyTextCommandArchive)
}
ApplyRubyTextCommandArchive::ApplyRubyTextCommandArchive(const ApplyRubyTextCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ruby_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ruby_text()) {
    ruby_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ruby_text(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_storage()) {
    storage_ = new ::TSP::Reference(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  if (from._internal_has_undo_transaction()) {
    undo_transaction_ = new ::TSWP::UndoTransaction(*from.undo_transaction_);
  } else {
    undo_transaction_ = nullptr;
  }
  ::memcpy(&selection_range_location_, &from.selection_range_location_,
    static_cast<size_t>(reinterpret_cast<char*>(&selection_range_length_) -
    reinterpret_cast<char*>(&selection_range_location_)) + sizeof(selection_range_length_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ApplyRubyTextCommandArchive)
}

void ApplyRubyTextCommandArchive::SharedCtor() {
ruby_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&selection_range_length_) -
    reinterpret_cast<char*>(&super_)) + sizeof(selection_range_length_));
}

ApplyRubyTextCommandArchive::~ApplyRubyTextCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ApplyRubyTextCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApplyRubyTextCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ruby_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete undo_transaction_;
}

void ApplyRubyTextCommandArchive::ArenaDtor(void* object) {
  ApplyRubyTextCommandArchive* _this = reinterpret_cast< ApplyRubyTextCommandArchive* >(object);
  (void)_this;
}
void ApplyRubyTextCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplyRubyTextCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApplyRubyTextCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ApplyRubyTextCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ruby_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(storage_ != nullptr);
      storage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undo_transaction_ != nullptr);
      undo_transaction_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&selection_range_location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selection_range_length_) -
        reinterpret_cast<char*>(&selection_range_location_)) + sizeof(selection_range_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyRubyTextCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 selection_range_location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_selection_range_location(&has_bits);
          selection_range_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 selection_range_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_selection_range_length(&has_bits);
          selection_range_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ruby_text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ruby_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.ApplyRubyTextCommandArchive.ruby_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction undo_transaction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplyRubyTextCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ApplyRubyTextCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference storage = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage(this), target, stream);
  }

  // optional uint32 selection_range_location = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_selection_range_location(), target);
  }

  // optional uint32 selection_range_length = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_selection_range_length(), target);
  }

  // optional string ruby_text = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ruby_text().data(), static_cast<int>(this->_internal_ruby_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.ApplyRubyTextCommandArchive.ruby_text");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ruby_text(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::undo_transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ApplyRubyTextCommandArchive)
  return target;
}

size_t ApplyRubyTextCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ApplyRubyTextCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string ruby_text = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ruby_text());
    }

    // optional .TSK.CommandArchive super = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference storage = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_);
    }

    // optional .TSWP.UndoTransaction undo_transaction = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_transaction_);
    }

    // optional uint32 selection_range_location = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_selection_range_location());
    }

    // optional uint32 selection_range_length = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_selection_range_length());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyRubyTextCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.ApplyRubyTextCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyRubyTextCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplyRubyTextCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.ApplyRubyTextCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.ApplyRubyTextCommandArchive)
    MergeFrom(*source);
  }
}

void ApplyRubyTextCommandArchive::MergeFrom(const ApplyRubyTextCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ApplyRubyTextCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ruby_text(from._internal_ruby_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_storage()->::TSP::Reference::MergeFrom(from._internal_storage());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from._internal_undo_transaction());
    }
    if (cached_has_bits & 0x00000010u) {
      selection_range_location_ = from.selection_range_location_;
    }
    if (cached_has_bits & 0x00000020u) {
      selection_range_length_ = from.selection_range_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyRubyTextCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.ApplyRubyTextCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyRubyTextCommandArchive::CopyFrom(const ApplyRubyTextCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ApplyRubyTextCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyRubyTextCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_storage()) {
    if (!storage_->IsInitialized()) return false;
  }
  if (_internal_has_undo_transaction()) {
    if (!undo_transaction_->IsInitialized()) return false;
  }
  return true;
}

void ApplyRubyTextCommandArchive::InternalSwap(ApplyRubyTextCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ruby_text_.Swap(&other->ruby_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApplyRubyTextCommandArchive, selection_range_length_)
      + sizeof(ApplyRubyTextCommandArchive::selection_range_length_)
      - PROTOBUF_FIELD_OFFSET(ApplyRubyTextCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyRubyTextCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[12]);
}

// ===================================================================

class ModifyRubyTextCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ModifyRubyTextCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ModifyRubyTextCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& ruby_field(const ModifyRubyTextCommandArchive* msg);
  static void set_has_ruby_field(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ruby_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_base_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSWP::UndoTransaction& undo_transaction(const ModifyRubyTextCommandArchive* msg);
  static void set_has_undo_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSK::CommandArchive&
ModifyRubyTextCommandArchive::_Internal::super(const ModifyRubyTextCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
ModifyRubyTextCommandArchive::_Internal::ruby_field(const ModifyRubyTextCommandArchive* msg) {
  return *msg->ruby_field_;
}
const ::TSWP::UndoTransaction&
ModifyRubyTextCommandArchive::_Internal::undo_transaction(const ModifyRubyTextCommandArchive* msg) {
  return *msg->undo_transaction_;
}
void ModifyRubyTextCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ModifyRubyTextCommandArchive::clear_ruby_field() {
  if (ruby_field_ != nullptr) ruby_field_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ModifyRubyTextCommandArchive::clear_undo_transaction() {
  if (undo_transaction_ != nullptr) undo_transaction_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ModifyRubyTextCommandArchive::ModifyRubyTextCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.ModifyRubyTextCommandArchive)
}
ModifyRubyTextCommandArchive::ModifyRubyTextCommandArchive(const ModifyRubyTextCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ruby_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ruby_text()) {
    ruby_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ruby_text(), 
      GetArena());
  }
  base_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_base_text()) {
    base_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_base_text(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_ruby_field()) {
    ruby_field_ = new ::TSP::Reference(*from.ruby_field_);
  } else {
    ruby_field_ = nullptr;
  }
  if (from._internal_has_undo_transaction()) {
    undo_transaction_ = new ::TSWP::UndoTransaction(*from.undo_transaction_);
  } else {
    undo_transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.ModifyRubyTextCommandArchive)
}

void ModifyRubyTextCommandArchive::SharedCtor() {
ruby_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
base_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_transaction_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_transaction_));
}

ModifyRubyTextCommandArchive::~ModifyRubyTextCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ModifyRubyTextCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModifyRubyTextCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ruby_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete ruby_field_;
  if (this != internal_default_instance()) delete undo_transaction_;
}

void ModifyRubyTextCommandArchive::ArenaDtor(void* object) {
  ModifyRubyTextCommandArchive* _this = reinterpret_cast< ModifyRubyTextCommandArchive* >(object);
  (void)_this;
}
void ModifyRubyTextCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModifyRubyTextCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModifyRubyTextCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ModifyRubyTextCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ruby_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      base_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ruby_field_ != nullptr);
      ruby_field_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(undo_transaction_ != nullptr);
      undo_transaction_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyRubyTextCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference ruby_field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ruby_field(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ruby_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ruby_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.ModifyRubyTextCommandArchive.ruby_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string base_text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_base_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.ModifyRubyTextCommandArchive.base_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction undo_transaction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyRubyTextCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ModifyRubyTextCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference ruby_field = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ruby_field(this), target, stream);
  }

  // optional string ruby_text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ruby_text().data(), static_cast<int>(this->_internal_ruby_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.ModifyRubyTextCommandArchive.ruby_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ruby_text(), target);
  }

  // optional string base_text = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_base_text().data(), static_cast<int>(this->_internal_base_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.ModifyRubyTextCommandArchive.base_text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_base_text(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::undo_transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ModifyRubyTextCommandArchive)
  return target;
}

size_t ModifyRubyTextCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ModifyRubyTextCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string ruby_text = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ruby_text());
    }

    // optional string base_text = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_base_text());
    }

    // optional .TSK.CommandArchive super = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference ruby_field = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ruby_field_);
    }

    // optional .TSWP.UndoTransaction undo_transaction = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_transaction_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyRubyTextCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.ModifyRubyTextCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyRubyTextCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifyRubyTextCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.ModifyRubyTextCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.ModifyRubyTextCommandArchive)
    MergeFrom(*source);
  }
}

void ModifyRubyTextCommandArchive::MergeFrom(const ModifyRubyTextCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ModifyRubyTextCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ruby_text(from._internal_ruby_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_base_text(from._internal_base_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ruby_field()->::TSP::Reference::MergeFrom(from._internal_ruby_field());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from._internal_undo_transaction());
    }
  }
}

void ModifyRubyTextCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.ModifyRubyTextCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyRubyTextCommandArchive::CopyFrom(const ModifyRubyTextCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ModifyRubyTextCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyRubyTextCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_ruby_field()) {
    if (!ruby_field_->IsInitialized()) return false;
  }
  if (_internal_has_undo_transaction()) {
    if (!undo_transaction_->IsInitialized()) return false;
  }
  return true;
}

void ModifyRubyTextCommandArchive::InternalSwap(ModifyRubyTextCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ruby_text_.Swap(&other->ruby_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  base_text_.Swap(&other->base_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModifyRubyTextCommandArchive, undo_transaction_)
      + sizeof(ModifyRubyTextCommandArchive::undo_transaction_)
      - PROTOBUF_FIELD_OFFSET(ModifyRubyTextCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyRubyTextCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[13]);
}

// ===================================================================

class ModifyTOCSettingsBaseCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ModifyTOCSettingsBaseCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ModifyTOCSettingsBaseCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& old_toc_settings(const ModifyTOCSettingsBaseCommandArchive* msg);
  static void set_has_old_toc_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& new_toc_settings(const ModifyTOCSettingsBaseCommandArchive* msg);
  static void set_has_new_toc_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSK::CommandArchive&
ModifyTOCSettingsBaseCommandArchive::_Internal::super(const ModifyTOCSettingsBaseCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
ModifyTOCSettingsBaseCommandArchive::_Internal::old_toc_settings(const ModifyTOCSettingsBaseCommandArchive* msg) {
  return *msg->old_toc_settings_;
}
const ::TSP::Reference&
ModifyTOCSettingsBaseCommandArchive::_Internal::new_toc_settings(const ModifyTOCSettingsBaseCommandArchive* msg) {
  return *msg->new_toc_settings_;
}
void ModifyTOCSettingsBaseCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ModifyTOCSettingsBaseCommandArchive::clear_old_toc_settings() {
  if (old_toc_settings_ != nullptr) old_toc_settings_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ModifyTOCSettingsBaseCommandArchive::clear_new_toc_settings() {
  if (new_toc_settings_ != nullptr) new_toc_settings_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ModifyTOCSettingsBaseCommandArchive::ModifyTOCSettingsBaseCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.ModifyTOCSettingsBaseCommandArchive)
}
ModifyTOCSettingsBaseCommandArchive::ModifyTOCSettingsBaseCommandArchive(const ModifyTOCSettingsBaseCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_old_toc_settings()) {
    old_toc_settings_ = new ::TSP::Reference(*from.old_toc_settings_);
  } else {
    old_toc_settings_ = nullptr;
  }
  if (from._internal_has_new_toc_settings()) {
    new_toc_settings_ = new ::TSP::Reference(*from.new_toc_settings_);
  } else {
    new_toc_settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.ModifyTOCSettingsBaseCommandArchive)
}

void ModifyTOCSettingsBaseCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_toc_settings_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_toc_settings_));
}

ModifyTOCSettingsBaseCommandArchive::~ModifyTOCSettingsBaseCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ModifyTOCSettingsBaseCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModifyTOCSettingsBaseCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete old_toc_settings_;
  if (this != internal_default_instance()) delete new_toc_settings_;
}

void ModifyTOCSettingsBaseCommandArchive::ArenaDtor(void* object) {
  ModifyTOCSettingsBaseCommandArchive* _this = reinterpret_cast< ModifyTOCSettingsBaseCommandArchive* >(object);
  (void)_this;
}
void ModifyTOCSettingsBaseCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModifyTOCSettingsBaseCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModifyTOCSettingsBaseCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ModifyTOCSettingsBaseCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(old_toc_settings_ != nullptr);
      old_toc_settings_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(new_toc_settings_ != nullptr);
      new_toc_settings_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyTOCSettingsBaseCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_toc_settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_toc_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference new_toc_settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_toc_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyTOCSettingsBaseCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ModifyTOCSettingsBaseCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference old_toc_settings = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::old_toc_settings(this), target, stream);
  }

  // optional .TSP.Reference new_toc_settings = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::new_toc_settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ModifyTOCSettingsBaseCommandArchive)
  return target;
}

size_t ModifyTOCSettingsBaseCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ModifyTOCSettingsBaseCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSK.CommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference old_toc_settings = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_toc_settings_);
    }

    // optional .TSP.Reference new_toc_settings = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_toc_settings_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyTOCSettingsBaseCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.ModifyTOCSettingsBaseCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyTOCSettingsBaseCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifyTOCSettingsBaseCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.ModifyTOCSettingsBaseCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.ModifyTOCSettingsBaseCommandArchive)
    MergeFrom(*source);
  }
}

void ModifyTOCSettingsBaseCommandArchive::MergeFrom(const ModifyTOCSettingsBaseCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ModifyTOCSettingsBaseCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_old_toc_settings()->::TSP::Reference::MergeFrom(from._internal_old_toc_settings());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_new_toc_settings()->::TSP::Reference::MergeFrom(from._internal_new_toc_settings());
    }
  }
}

void ModifyTOCSettingsBaseCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.ModifyTOCSettingsBaseCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyTOCSettingsBaseCommandArchive::CopyFrom(const ModifyTOCSettingsBaseCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ModifyTOCSettingsBaseCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyTOCSettingsBaseCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_old_toc_settings()) {
    if (!old_toc_settings_->IsInitialized()) return false;
  }
  if (_internal_has_new_toc_settings()) {
    if (!new_toc_settings_->IsInitialized()) return false;
  }
  return true;
}

void ModifyTOCSettingsBaseCommandArchive::InternalSwap(ModifyTOCSettingsBaseCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModifyTOCSettingsBaseCommandArchive, new_toc_settings_)
      + sizeof(ModifyTOCSettingsBaseCommandArchive::new_toc_settings_)
      - PROTOBUF_FIELD_OFFSET(ModifyTOCSettingsBaseCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyTOCSettingsBaseCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[14]);
}

// ===================================================================

class ModifyTOCSettingsForTOCInfoCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ModifyTOCSettingsForTOCInfoCommandArchive>()._has_bits_);
  static const ::TSWP::ModifyTOCSettingsBaseCommandArchive& super(const ModifyTOCSettingsForTOCInfoCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& toc_info_uuid_path(const ModifyTOCSettingsForTOCInfoCommandArchive* msg);
  static void set_has_toc_info_uuid_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSWP::ModifyTOCSettingsBaseCommandArchive&
ModifyTOCSettingsForTOCInfoCommandArchive::_Internal::super(const ModifyTOCSettingsForTOCInfoCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
ModifyTOCSettingsForTOCInfoCommandArchive::_Internal::toc_info_uuid_path(const ModifyTOCSettingsForTOCInfoCommandArchive* msg) {
  return *msg->toc_info_uuid_path_;
}
void ModifyTOCSettingsForTOCInfoCommandArchive::clear_toc_info_uuid_path() {
  if (toc_info_uuid_path_ != nullptr) toc_info_uuid_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ModifyTOCSettingsForTOCInfoCommandArchive::ModifyTOCSettingsForTOCInfoCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive)
}
ModifyTOCSettingsForTOCInfoCommandArchive::ModifyTOCSettingsForTOCInfoCommandArchive(const ModifyTOCSettingsForTOCInfoCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::ModifyTOCSettingsBaseCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_toc_info_uuid_path()) {
    toc_info_uuid_path_ = new ::TSP::UUIDPath(*from.toc_info_uuid_path_);
  } else {
    toc_info_uuid_path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive)
}

void ModifyTOCSettingsForTOCInfoCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&toc_info_uuid_path_) -
    reinterpret_cast<char*>(&super_)) + sizeof(toc_info_uuid_path_));
}

ModifyTOCSettingsForTOCInfoCommandArchive::~ModifyTOCSettingsForTOCInfoCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModifyTOCSettingsForTOCInfoCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete toc_info_uuid_path_;
}

void ModifyTOCSettingsForTOCInfoCommandArchive::ArenaDtor(void* object) {
  ModifyTOCSettingsForTOCInfoCommandArchive* _this = reinterpret_cast< ModifyTOCSettingsForTOCInfoCommandArchive* >(object);
  (void)_this;
}
void ModifyTOCSettingsForTOCInfoCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModifyTOCSettingsForTOCInfoCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModifyTOCSettingsForTOCInfoCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(toc_info_uuid_path_ != nullptr);
      toc_info_uuid_path_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyTOCSettingsForTOCInfoCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.ModifyTOCSettingsBaseCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath toc_info_uuid_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_toc_info_uuid_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyTOCSettingsForTOCInfoCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.ModifyTOCSettingsBaseCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.UUIDPath toc_info_uuid_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::toc_info_uuid_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive)
  return target;
}

size_t ModifyTOCSettingsForTOCInfoCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSWP.ModifyTOCSettingsBaseCommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.UUIDPath toc_info_uuid_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *toc_info_uuid_path_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyTOCSettingsForTOCInfoCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyTOCSettingsForTOCInfoCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifyTOCSettingsForTOCInfoCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive)
    MergeFrom(*source);
  }
}

void ModifyTOCSettingsForTOCInfoCommandArchive::MergeFrom(const ModifyTOCSettingsForTOCInfoCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSWP::ModifyTOCSettingsBaseCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_toc_info_uuid_path()->::TSP::UUIDPath::MergeFrom(from._internal_toc_info_uuid_path());
    }
  }
}

void ModifyTOCSettingsForTOCInfoCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyTOCSettingsForTOCInfoCommandArchive::CopyFrom(const ModifyTOCSettingsForTOCInfoCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ModifyTOCSettingsForTOCInfoCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyTOCSettingsForTOCInfoCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_toc_info_uuid_path()) {
    if (!toc_info_uuid_path_->IsInitialized()) return false;
  }
  return true;
}

void ModifyTOCSettingsForTOCInfoCommandArchive::InternalSwap(ModifyTOCSettingsForTOCInfoCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModifyTOCSettingsForTOCInfoCommandArchive, toc_info_uuid_path_)
      + sizeof(ModifyTOCSettingsForTOCInfoCommandArchive::toc_info_uuid_path_)
      - PROTOBUF_FIELD_OFFSET(ModifyTOCSettingsForTOCInfoCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyTOCSettingsForTOCInfoCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[15]);
}

// ===================================================================

class ModifyTOCSettingsPresetForThemeCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ModifyTOCSettingsPresetForThemeCommandArchive>()._has_bits_);
  static const ::TSWP::ModifyTOCSettingsBaseCommandArchive& super(const ModifyTOCSettingsPresetForThemeCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& theme(const ModifyTOCSettingsPresetForThemeCommandArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_preset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSWP::ModifyTOCSettingsBaseCommandArchive&
ModifyTOCSettingsPresetForThemeCommandArchive::_Internal::super(const ModifyTOCSettingsPresetForThemeCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
ModifyTOCSettingsPresetForThemeCommandArchive::_Internal::theme(const ModifyTOCSettingsPresetForThemeCommandArchive* msg) {
  return *msg->theme_;
}
void ModifyTOCSettingsPresetForThemeCommandArchive::clear_theme() {
  if (theme_ != nullptr) theme_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ModifyTOCSettingsPresetForThemeCommandArchive::ModifyTOCSettingsPresetForThemeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive)
}
ModifyTOCSettingsPresetForThemeCommandArchive::ModifyTOCSettingsPresetForThemeCommandArchive(const ModifyTOCSettingsPresetForThemeCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::ModifyTOCSettingsBaseCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_theme()) {
    theme_ = new ::TSP::Reference(*from.theme_);
  } else {
    theme_ = nullptr;
  }
  preset_index_ = from.preset_index_;
  // @@protoc_insertion_point(copy_constructor:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive)
}

void ModifyTOCSettingsPresetForThemeCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&preset_index_) -
    reinterpret_cast<char*>(&super_)) + sizeof(preset_index_));
}

ModifyTOCSettingsPresetForThemeCommandArchive::~ModifyTOCSettingsPresetForThemeCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModifyTOCSettingsPresetForThemeCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete theme_;
}

void ModifyTOCSettingsPresetForThemeCommandArchive::ArenaDtor(void* object) {
  ModifyTOCSettingsPresetForThemeCommandArchive* _this = reinterpret_cast< ModifyTOCSettingsPresetForThemeCommandArchive* >(object);
  (void)_this;
}
void ModifyTOCSettingsPresetForThemeCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModifyTOCSettingsPresetForThemeCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModifyTOCSettingsPresetForThemeCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(theme_ != nullptr);
      theme_->Clear();
    }
  }
  preset_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyTOCSettingsPresetForThemeCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.ModifyTOCSettingsBaseCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 preset_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_preset_index(&has_bits);
          preset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyTOCSettingsPresetForThemeCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.ModifyTOCSettingsBaseCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference theme = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::theme(this), target, stream);
  }

  // optional uint32 preset_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_preset_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive)
  return target;
}

size_t ModifyTOCSettingsPresetForThemeCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSWP.ModifyTOCSettingsBaseCommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference theme = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *theme_);
    }

    // optional uint32 preset_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_preset_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyTOCSettingsPresetForThemeCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyTOCSettingsPresetForThemeCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifyTOCSettingsPresetForThemeCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive)
    MergeFrom(*source);
  }
}

void ModifyTOCSettingsPresetForThemeCommandArchive::MergeFrom(const ModifyTOCSettingsPresetForThemeCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSWP::ModifyTOCSettingsBaseCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_theme()->::TSP::Reference::MergeFrom(from._internal_theme());
    }
    if (cached_has_bits & 0x00000004u) {
      preset_index_ = from.preset_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModifyTOCSettingsPresetForThemeCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyTOCSettingsPresetForThemeCommandArchive::CopyFrom(const ModifyTOCSettingsPresetForThemeCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ModifyTOCSettingsPresetForThemeCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyTOCSettingsPresetForThemeCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!theme_->IsInitialized()) return false;
  }
  return true;
}

void ModifyTOCSettingsPresetForThemeCommandArchive::InternalSwap(ModifyTOCSettingsPresetForThemeCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModifyTOCSettingsPresetForThemeCommandArchive, preset_index_)
      + sizeof(ModifyTOCSettingsPresetForThemeCommandArchive::preset_index_)
      - PROTOBUF_FIELD_OFFSET(ModifyTOCSettingsPresetForThemeCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyTOCSettingsPresetForThemeCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[16]);
}

// ===================================================================

class AnchorAttachmentCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AnchorAttachmentCommandArchive>()._has_bits_);
  static const ::TSWP::StorageActionCommandArchive& super(const AnchorAttachmentCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& attachment(const AnchorAttachmentCommandArchive* msg);
  static void set_has_attachment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_h_offset_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_h_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_v_offset_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_v_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_html_wrap(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_undo_h_offset_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_undo_h_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_undo_v_offset_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_undo_v_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_undo_is_html_wrap(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::TSWP::StorageActionCommandArchive&
AnchorAttachmentCommandArchive::_Internal::super(const AnchorAttachmentCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
AnchorAttachmentCommandArchive::_Internal::attachment(const AnchorAttachmentCommandArchive* msg) {
  return *msg->attachment_;
}
void AnchorAttachmentCommandArchive::clear_attachment() {
  if (attachment_ != nullptr) attachment_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
AnchorAttachmentCommandArchive::AnchorAttachmentCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.AnchorAttachmentCommandArchive)
}
AnchorAttachmentCommandArchive::AnchorAttachmentCommandArchive(const AnchorAttachmentCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::StorageActionCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_attachment()) {
    attachment_ = new ::TSP::Reference(*from.attachment_);
  } else {
    attachment_ = nullptr;
  }
  ::memcpy(&h_offset_type_, &from.h_offset_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&undo_v_offset_) -
    reinterpret_cast<char*>(&h_offset_type_)) + sizeof(undo_v_offset_));
  // @@protoc_insertion_point(copy_constructor:TSWP.AnchorAttachmentCommandArchive)
}

void AnchorAttachmentCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_v_offset_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_v_offset_));
}

AnchorAttachmentCommandArchive::~AnchorAttachmentCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.AnchorAttachmentCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnchorAttachmentCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete attachment_;
}

void AnchorAttachmentCommandArchive::ArenaDtor(void* object) {
  AnchorAttachmentCommandArchive* _this = reinterpret_cast< AnchorAttachmentCommandArchive* >(object);
  (void)_this;
}
void AnchorAttachmentCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnchorAttachmentCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnchorAttachmentCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.AnchorAttachmentCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(attachment_ != nullptr);
      attachment_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&h_offset_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&undo_h_offset_) -
        reinterpret_cast<char*>(&h_offset_type_)) + sizeof(undo_h_offset_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&is_html_wrap_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&undo_v_offset_) -
        reinterpret_cast<char*>(&is_html_wrap_)) + sizeof(undo_v_offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnchorAttachmentCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.StorageActionCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference attachment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attachment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 h_offset_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_h_offset_type(&has_bits);
          h_offset_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float h_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_h_offset(&has_bits);
          h_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 v_offset_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_v_offset_type(&has_bits);
          v_offset_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float v_offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_v_offset(&has_bits);
          v_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool is_html_wrap = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_html_wrap(&has_bits);
          is_html_wrap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 undo_h_offset_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_undo_h_offset_type(&has_bits);
          undo_h_offset_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float undo_h_offset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_undo_h_offset(&has_bits);
          undo_h_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 undo_v_offset_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_undo_v_offset_type(&has_bits);
          undo_v_offset_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float undo_v_offset = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_undo_v_offset(&has_bits);
          undo_v_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool undo_is_html_wrap = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_undo_is_html_wrap(&has_bits);
          undo_is_html_wrap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnchorAttachmentCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.AnchorAttachmentCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.StorageActionCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference attachment = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::attachment(this), target, stream);
  }

  // optional uint32 h_offset_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_h_offset_type(), target);
  }

  // optional float h_offset = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_h_offset(), target);
  }

  // optional uint32 v_offset_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_v_offset_type(), target);
  }

  // optional float v_offset = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_v_offset(), target);
  }

  // optional bool is_html_wrap = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_html_wrap(), target);
  }

  // optional uint32 undo_h_offset_type = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_undo_h_offset_type(), target);
  }

  // optional float undo_h_offset = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_undo_h_offset(), target);
  }

  // optional uint32 undo_v_offset_type = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_undo_v_offset_type(), target);
  }

  // optional float undo_v_offset = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_undo_v_offset(), target);
  }

  // optional bool undo_is_html_wrap = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_undo_is_html_wrap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.AnchorAttachmentCommandArchive)
  return target;
}

size_t AnchorAttachmentCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.AnchorAttachmentCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSWP.StorageActionCommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference attachment = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attachment_);
    }

    // optional uint32 h_offset_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_h_offset_type());
    }

    // optional float h_offset = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 v_offset_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_v_offset_type());
    }

    // optional float v_offset = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 undo_h_offset_type = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_undo_h_offset_type());
    }

    // optional float undo_h_offset = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool is_html_wrap = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool undo_is_html_wrap = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional uint32 undo_v_offset_type = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_undo_v_offset_type());
    }

    // optional float undo_v_offset = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnchorAttachmentCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.AnchorAttachmentCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const AnchorAttachmentCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnchorAttachmentCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.AnchorAttachmentCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.AnchorAttachmentCommandArchive)
    MergeFrom(*source);
  }
}

void AnchorAttachmentCommandArchive::MergeFrom(const AnchorAttachmentCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.AnchorAttachmentCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSWP::StorageActionCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_attachment()->::TSP::Reference::MergeFrom(from._internal_attachment());
    }
    if (cached_has_bits & 0x00000004u) {
      h_offset_type_ = from.h_offset_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      h_offset_ = from.h_offset_;
    }
    if (cached_has_bits & 0x00000010u) {
      v_offset_type_ = from.v_offset_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      v_offset_ = from.v_offset_;
    }
    if (cached_has_bits & 0x00000040u) {
      undo_h_offset_type_ = from.undo_h_offset_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      undo_h_offset_ = from.undo_h_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      is_html_wrap_ = from.is_html_wrap_;
    }
    if (cached_has_bits & 0x00000200u) {
      undo_is_html_wrap_ = from.undo_is_html_wrap_;
    }
    if (cached_has_bits & 0x00000400u) {
      undo_v_offset_type_ = from.undo_v_offset_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      undo_v_offset_ = from.undo_v_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnchorAttachmentCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.AnchorAttachmentCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnchorAttachmentCommandArchive::CopyFrom(const AnchorAttachmentCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.AnchorAttachmentCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnchorAttachmentCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_attachment()) {
    if (!attachment_->IsInitialized()) return false;
  }
  return true;
}

void AnchorAttachmentCommandArchive::InternalSwap(AnchorAttachmentCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnchorAttachmentCommandArchive, undo_v_offset_)
      + sizeof(AnchorAttachmentCommandArchive::undo_v_offset_)
      - PROTOBUF_FIELD_OFFSET(AnchorAttachmentCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnchorAttachmentCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[17]);
}

// ===================================================================

class TextApplyThemeCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TextApplyThemeCommandArchive>()._has_bits_);
  static const ::TSS::ApplyThemeChildCommandArchive& super(const TextApplyThemeCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& storage(const TextApplyThemeCommandArchive* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSWP::UndoTransaction& undo_transaction(const TextApplyThemeCommandArchive* msg);
  static void set_has_undo_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSS::ApplyThemeChildCommandArchive&
TextApplyThemeCommandArchive::_Internal::super(const TextApplyThemeCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
TextApplyThemeCommandArchive::_Internal::storage(const TextApplyThemeCommandArchive* msg) {
  return *msg->storage_;
}
const ::TSWP::UndoTransaction&
TextApplyThemeCommandArchive::_Internal::undo_transaction(const TextApplyThemeCommandArchive* msg) {
  return *msg->undo_transaction_;
}
void TextApplyThemeCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TextApplyThemeCommandArchive::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TextApplyThemeCommandArchive::clear_undo_transaction() {
  if (undo_transaction_ != nullptr) undo_transaction_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TextApplyThemeCommandArchive::TextApplyThemeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.TextApplyThemeCommandArchive)
}
TextApplyThemeCommandArchive::TextApplyThemeCommandArchive(const TextApplyThemeCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::ApplyThemeChildCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_storage()) {
    storage_ = new ::TSP::Reference(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  if (from._internal_has_undo_transaction()) {
    undo_transaction_ = new ::TSWP::UndoTransaction(*from.undo_transaction_);
  } else {
    undo_transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.TextApplyThemeCommandArchive)
}

void TextApplyThemeCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_transaction_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_transaction_));
}

TextApplyThemeCommandArchive::~TextApplyThemeCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TextApplyThemeCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextApplyThemeCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete undo_transaction_;
}

void TextApplyThemeCommandArchive::ArenaDtor(void* object) {
  TextApplyThemeCommandArchive* _this = reinterpret_cast< TextApplyThemeCommandArchive* >(object);
  (void)_this;
}
void TextApplyThemeCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextApplyThemeCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextApplyThemeCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TextApplyThemeCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(storage_ != nullptr);
      storage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_transaction_ != nullptr);
      undo_transaction_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextApplyThemeCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSS.ApplyThemeChildCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction undo_transaction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextApplyThemeCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TextApplyThemeCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSS.ApplyThemeChildCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference storage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage(this), target, stream);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::undo_transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TextApplyThemeCommandArchive)
  return target;
}

size_t TextApplyThemeCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TextApplyThemeCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSS.ApplyThemeChildCommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference storage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_);
    }

    // optional .TSWP.UndoTransaction undo_transaction = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_transaction_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextApplyThemeCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.TextApplyThemeCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const TextApplyThemeCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextApplyThemeCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.TextApplyThemeCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.TextApplyThemeCommandArchive)
    MergeFrom(*source);
  }
}

void TextApplyThemeCommandArchive::MergeFrom(const TextApplyThemeCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TextApplyThemeCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSS::ApplyThemeChildCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_storage()->::TSP::Reference::MergeFrom(from._internal_storage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from._internal_undo_transaction());
    }
  }
}

void TextApplyThemeCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.TextApplyThemeCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextApplyThemeCommandArchive::CopyFrom(const TextApplyThemeCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TextApplyThemeCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextApplyThemeCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_storage()) {
    if (!storage_->IsInitialized()) return false;
  }
  if (_internal_has_undo_transaction()) {
    if (!undo_transaction_->IsInitialized()) return false;
  }
  return true;
}

void TextApplyThemeCommandArchive::InternalSwap(TextApplyThemeCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextApplyThemeCommandArchive, undo_transaction_)
      + sizeof(TextApplyThemeCommandArchive::undo_transaction_)
      - PROTOBUF_FIELD_OFFSET(TextApplyThemeCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextApplyThemeCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[18]);
}

// ===================================================================

class MoveColumnsCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveColumnsCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const MoveColumnsCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& storage(const MoveColumnsCommandArchive* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_src_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dst_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSWP::UndoTransaction& undo_transaction(const MoveColumnsCommandArchive* msg);
  static void set_has_undo_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSK::CommandArchive&
MoveColumnsCommandArchive::_Internal::super(const MoveColumnsCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
MoveColumnsCommandArchive::_Internal::storage(const MoveColumnsCommandArchive* msg) {
  return *msg->storage_;
}
const ::TSWP::UndoTransaction&
MoveColumnsCommandArchive::_Internal::undo_transaction(const MoveColumnsCommandArchive* msg) {
  return *msg->undo_transaction_;
}
void MoveColumnsCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MoveColumnsCommandArchive::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void MoveColumnsCommandArchive::clear_undo_transaction() {
  if (undo_transaction_ != nullptr) undo_transaction_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
MoveColumnsCommandArchive::MoveColumnsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.MoveColumnsCommandArchive)
}
MoveColumnsCommandArchive::MoveColumnsCommandArchive(const MoveColumnsCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_storage()) {
    storage_ = new ::TSP::Reference(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  if (from._internal_has_undo_transaction()) {
    undo_transaction_ = new ::TSWP::UndoTransaction(*from.undo_transaction_);
  } else {
    undo_transaction_ = nullptr;
  }
  ::memcpy(&src_index_, &from.src_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&src_index_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:TSWP.MoveColumnsCommandArchive)
}

void MoveColumnsCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&super_)) + sizeof(count_));
}

MoveColumnsCommandArchive::~MoveColumnsCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.MoveColumnsCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveColumnsCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete undo_transaction_;
}

void MoveColumnsCommandArchive::ArenaDtor(void* object) {
  MoveColumnsCommandArchive* _this = reinterpret_cast< MoveColumnsCommandArchive* >(object);
  (void)_this;
}
void MoveColumnsCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveColumnsCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveColumnsCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.MoveColumnsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(storage_ != nullptr);
      storage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_transaction_ != nullptr);
      undo_transaction_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&src_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&src_index_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveColumnsCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 src_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_src_index(&has_bits);
          src_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dst_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_dst_index(&has_bits);
          dst_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction undo_transaction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveColumnsCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.MoveColumnsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference storage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage(this), target, stream);
  }

  // optional uint32 src_index = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_src_index(), target);
  }

  // optional uint32 dst_index = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dst_index(), target);
  }

  // optional uint32 count = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_count(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::undo_transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.MoveColumnsCommandArchive)
  return target;
}

size_t MoveColumnsCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.MoveColumnsCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TSK.CommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference storage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_);
    }

    // optional .TSWP.UndoTransaction undo_transaction = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_transaction_);
    }

    // optional uint32 src_index = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_src_index());
    }

    // optional uint32 dst_index = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dst_index());
    }

    // optional uint32 count = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveColumnsCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.MoveColumnsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveColumnsCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveColumnsCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.MoveColumnsCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.MoveColumnsCommandArchive)
    MergeFrom(*source);
  }
}

void MoveColumnsCommandArchive::MergeFrom(const MoveColumnsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.MoveColumnsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_storage()->::TSP::Reference::MergeFrom(from._internal_storage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from._internal_undo_transaction());
    }
    if (cached_has_bits & 0x00000008u) {
      src_index_ = from.src_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      dst_index_ = from.dst_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoveColumnsCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.MoveColumnsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveColumnsCommandArchive::CopyFrom(const MoveColumnsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.MoveColumnsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveColumnsCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_storage()) {
    if (!storage_->IsInitialized()) return false;
  }
  if (_internal_has_undo_transaction()) {
    if (!undo_transaction_->IsInitialized()) return false;
  }
  return true;
}

void MoveColumnsCommandArchive::InternalSwap(MoveColumnsCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveColumnsCommandArchive, count_)
      + sizeof(MoveColumnsCommandArchive::count_)
      - PROTOBUF_FIELD_OFFSET(MoveColumnsCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveColumnsCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[19]);
}

// ===================================================================

class MoveRowsCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveRowsCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const MoveRowsCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& storage(const MoveRowsCommandArchive* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_src_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dst_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSWP::UndoTransaction& undo_transaction(const MoveRowsCommandArchive* msg);
  static void set_has_undo_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSK::CommandArchive&
MoveRowsCommandArchive::_Internal::super(const MoveRowsCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
MoveRowsCommandArchive::_Internal::storage(const MoveRowsCommandArchive* msg) {
  return *msg->storage_;
}
const ::TSWP::UndoTransaction&
MoveRowsCommandArchive::_Internal::undo_transaction(const MoveRowsCommandArchive* msg) {
  return *msg->undo_transaction_;
}
void MoveRowsCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MoveRowsCommandArchive::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void MoveRowsCommandArchive::clear_undo_transaction() {
  if (undo_transaction_ != nullptr) undo_transaction_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
MoveRowsCommandArchive::MoveRowsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.MoveRowsCommandArchive)
}
MoveRowsCommandArchive::MoveRowsCommandArchive(const MoveRowsCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_storage()) {
    storage_ = new ::TSP::Reference(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  if (from._internal_has_undo_transaction()) {
    undo_transaction_ = new ::TSWP::UndoTransaction(*from.undo_transaction_);
  } else {
    undo_transaction_ = nullptr;
  }
  ::memcpy(&src_index_, &from.src_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&src_index_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:TSWP.MoveRowsCommandArchive)
}

void MoveRowsCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&super_)) + sizeof(count_));
}

MoveRowsCommandArchive::~MoveRowsCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.MoveRowsCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveRowsCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete undo_transaction_;
}

void MoveRowsCommandArchive::ArenaDtor(void* object) {
  MoveRowsCommandArchive* _this = reinterpret_cast< MoveRowsCommandArchive* >(object);
  (void)_this;
}
void MoveRowsCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveRowsCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveRowsCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.MoveRowsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(storage_ != nullptr);
      storage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_transaction_ != nullptr);
      undo_transaction_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&src_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&src_index_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveRowsCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 src_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_src_index(&has_bits);
          src_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dst_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_dst_index(&has_bits);
          dst_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction undo_transaction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveRowsCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.MoveRowsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference storage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage(this), target, stream);
  }

  // optional uint32 src_index = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_src_index(), target);
  }

  // optional uint32 dst_index = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dst_index(), target);
  }

  // optional uint32 count = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_count(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::undo_transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.MoveRowsCommandArchive)
  return target;
}

size_t MoveRowsCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.MoveRowsCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TSK.CommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference storage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_);
    }

    // optional .TSWP.UndoTransaction undo_transaction = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_transaction_);
    }

    // optional uint32 src_index = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_src_index());
    }

    // optional uint32 dst_index = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dst_index());
    }

    // optional uint32 count = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveRowsCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.MoveRowsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveRowsCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveRowsCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.MoveRowsCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.MoveRowsCommandArchive)
    MergeFrom(*source);
  }
}

void MoveRowsCommandArchive::MergeFrom(const MoveRowsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.MoveRowsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_storage()->::TSP::Reference::MergeFrom(from._internal_storage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from._internal_undo_transaction());
    }
    if (cached_has_bits & 0x00000008u) {
      src_index_ = from.src_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      dst_index_ = from.dst_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoveRowsCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.MoveRowsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveRowsCommandArchive::CopyFrom(const MoveRowsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.MoveRowsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRowsCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_storage()) {
    if (!storage_->IsInitialized()) return false;
  }
  if (_internal_has_undo_transaction()) {
    if (!undo_transaction_->IsInitialized()) return false;
  }
  return true;
}

void MoveRowsCommandArchive::InternalSwap(MoveRowsCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveRowsCommandArchive, count_)
      + sizeof(MoveRowsCommandArchive::count_)
      - PROTOBUF_FIELD_OFFSET(MoveRowsCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveRowsCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[20]);
}

// ===================================================================

class ShapeApplyPresetCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShapeApplyPresetCommandArchive>()._has_bits_);
  static const ::TSD::BaseApplyPresetCommandArchive& super(const ShapeApplyPresetCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& undo_style(const ShapeApplyPresetCommandArchive* msg);
  static void set_has_undo_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::BaseApplyPresetCommandArchive&
ShapeApplyPresetCommandArchive::_Internal::super(const ShapeApplyPresetCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
ShapeApplyPresetCommandArchive::_Internal::undo_style(const ShapeApplyPresetCommandArchive* msg) {
  return *msg->undo_style_;
}
void ShapeApplyPresetCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ShapeApplyPresetCommandArchive::clear_undo_style() {
  if (undo_style_ != nullptr) undo_style_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ShapeApplyPresetCommandArchive::ShapeApplyPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.ShapeApplyPresetCommandArchive)
}
ShapeApplyPresetCommandArchive::ShapeApplyPresetCommandArchive(const ShapeApplyPresetCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::BaseApplyPresetCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_undo_style()) {
    undo_style_ = new ::TSP::Reference(*from.undo_style_);
  } else {
    undo_style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.ShapeApplyPresetCommandArchive)
}

void ShapeApplyPresetCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_style_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_style_));
}

ShapeApplyPresetCommandArchive::~ShapeApplyPresetCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ShapeApplyPresetCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShapeApplyPresetCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete undo_style_;
}

void ShapeApplyPresetCommandArchive::ArenaDtor(void* object) {
  ShapeApplyPresetCommandArchive* _this = reinterpret_cast< ShapeApplyPresetCommandArchive* >(object);
  (void)_this;
}
void ShapeApplyPresetCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeApplyPresetCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShapeApplyPresetCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ShapeApplyPresetCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(undo_style_ != nullptr);
      undo_style_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeApplyPresetCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.BaseApplyPresetCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeApplyPresetCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ShapeApplyPresetCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.BaseApplyPresetCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference undo_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::undo_style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ShapeApplyPresetCommandArchive)
  return target;
}

size_t ShapeApplyPresetCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ShapeApplyPresetCommandArchive)
  size_t total_size = 0;

  // required .TSD.BaseApplyPresetCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference undo_style = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *undo_style_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeApplyPresetCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.ShapeApplyPresetCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeApplyPresetCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeApplyPresetCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.ShapeApplyPresetCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.ShapeApplyPresetCommandArchive)
    MergeFrom(*source);
  }
}

void ShapeApplyPresetCommandArchive::MergeFrom(const ShapeApplyPresetCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ShapeApplyPresetCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::BaseApplyPresetCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_undo_style()->::TSP::Reference::MergeFrom(from._internal_undo_style());
    }
  }
}

void ShapeApplyPresetCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.ShapeApplyPresetCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeApplyPresetCommandArchive::CopyFrom(const ShapeApplyPresetCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ShapeApplyPresetCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeApplyPresetCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_undo_style()) {
    if (!undo_style_->IsInitialized()) return false;
  }
  return true;
}

void ShapeApplyPresetCommandArchive::InternalSwap(ShapeApplyPresetCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeApplyPresetCommandArchive, undo_style_)
      + sizeof(ShapeApplyPresetCommandArchive::undo_style_)
      - PROTOBUF_FIELD_OFFSET(ShapeApplyPresetCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeApplyPresetCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[21]);
}

// ===================================================================

class StyleBaseCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StyleBaseCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const StyleBaseCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& theme(const StyleBaseCommandArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& style(const StyleBaseCommandArchive* msg);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSK::CommandArchive&
StyleBaseCommandArchive::_Internal::super(const StyleBaseCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
StyleBaseCommandArchive::_Internal::theme(const StyleBaseCommandArchive* msg) {
  return *msg->theme_;
}
const ::TSP::Reference&
StyleBaseCommandArchive::_Internal::style(const StyleBaseCommandArchive* msg) {
  return *msg->style_;
}
void StyleBaseCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void StyleBaseCommandArchive::clear_theme() {
  if (theme_ != nullptr) theme_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void StyleBaseCommandArchive::clear_style() {
  if (style_ != nullptr) style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
StyleBaseCommandArchive::StyleBaseCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.StyleBaseCommandArchive)
}
StyleBaseCommandArchive::StyleBaseCommandArchive(const StyleBaseCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_theme()) {
    theme_ = new ::TSP::Reference(*from.theme_);
  } else {
    theme_ = nullptr;
  }
  if (from._internal_has_style()) {
    style_ = new ::TSP::Reference(*from.style_);
  } else {
    style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.StyleBaseCommandArchive)
}

void StyleBaseCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&style_) -
    reinterpret_cast<char*>(&super_)) + sizeof(style_));
}

StyleBaseCommandArchive::~StyleBaseCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.StyleBaseCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StyleBaseCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete theme_;
  if (this != internal_default_instance()) delete style_;
}

void StyleBaseCommandArchive::ArenaDtor(void* object) {
  StyleBaseCommandArchive* _this = reinterpret_cast< StyleBaseCommandArchive* >(object);
  (void)_this;
}
void StyleBaseCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StyleBaseCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StyleBaseCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.StyleBaseCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(theme_ != nullptr);
      theme_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(style_ != nullptr);
      style_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleBaseCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StyleBaseCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.StyleBaseCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference theme = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::theme(this), target, stream);
  }

  // optional .TSP.Reference style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.StyleBaseCommandArchive)
  return target;
}

size_t StyleBaseCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.StyleBaseCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSK.CommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference theme = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *theme_);
    }

    // optional .TSP.Reference style = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *style_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StyleBaseCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.StyleBaseCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const StyleBaseCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StyleBaseCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.StyleBaseCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.StyleBaseCommandArchive)
    MergeFrom(*source);
  }
}

void StyleBaseCommandArchive::MergeFrom(const StyleBaseCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.StyleBaseCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_theme()->::TSP::Reference::MergeFrom(from._internal_theme());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_style()->::TSP::Reference::MergeFrom(from._internal_style());
    }
  }
}

void StyleBaseCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.StyleBaseCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleBaseCommandArchive::CopyFrom(const StyleBaseCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.StyleBaseCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleBaseCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!theme_->IsInitialized()) return false;
  }
  if (_internal_has_style()) {
    if (!style_->IsInitialized()) return false;
  }
  return true;
}

void StyleBaseCommandArchive::InternalSwap(StyleBaseCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StyleBaseCommandArchive, style_)
      + sizeof(StyleBaseCommandArchive::style_)
      - PROTOBUF_FIELD_OFFSET(StyleBaseCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleBaseCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[22]);
}

// ===================================================================

class StyleCreateCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StyleCreateCommandArchive>()._has_bits_);
  static const ::TSWP::StyleBaseCommandArchive& super(const StyleCreateCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSWP::StyleBaseCommandArchive&
StyleCreateCommandArchive::_Internal::super(const StyleCreateCommandArchive* msg) {
  return *msg->super_;
}
StyleCreateCommandArchive::StyleCreateCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.StyleCreateCommandArchive)
}
StyleCreateCommandArchive::StyleCreateCommandArchive(const StyleCreateCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::StyleBaseCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  preset_index_ = from.preset_index_;
  // @@protoc_insertion_point(copy_constructor:TSWP.StyleCreateCommandArchive)
}

void StyleCreateCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&preset_index_) -
    reinterpret_cast<char*>(&super_)) + sizeof(preset_index_));
}

StyleCreateCommandArchive::~StyleCreateCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.StyleCreateCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StyleCreateCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void StyleCreateCommandArchive::ArenaDtor(void* object) {
  StyleCreateCommandArchive* _this = reinterpret_cast< StyleCreateCommandArchive* >(object);
  (void)_this;
}
void StyleCreateCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StyleCreateCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StyleCreateCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.StyleCreateCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  preset_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleCreateCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.StyleBaseCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 preset_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_preset_index(&has_bits);
          preset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StyleCreateCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.StyleCreateCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.StyleBaseCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 preset_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_preset_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.StyleCreateCommandArchive)
  return target;
}

size_t StyleCreateCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.StyleCreateCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSWP.StyleBaseCommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional uint32 preset_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_preset_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StyleCreateCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.StyleCreateCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const StyleCreateCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StyleCreateCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.StyleCreateCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.StyleCreateCommandArchive)
    MergeFrom(*source);
  }
}

void StyleCreateCommandArchive::MergeFrom(const StyleCreateCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.StyleCreateCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSWP::StyleBaseCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      preset_index_ = from.preset_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StyleCreateCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.StyleCreateCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleCreateCommandArchive::CopyFrom(const StyleCreateCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.StyleCreateCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleCreateCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void StyleCreateCommandArchive::InternalSwap(StyleCreateCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StyleCreateCommandArchive, preset_index_)
      + sizeof(StyleCreateCommandArchive::preset_index_)
      - PROTOBUF_FIELD_OFFSET(StyleCreateCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleCreateCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[23]);
}

// ===================================================================

class StyleRenameCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StyleRenameCommandArchive>()._has_bits_);
  static const ::TSWP::StyleBaseCommandArchive& super(const StyleRenameCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_updated_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSWP::StyleBaseCommandArchive&
StyleRenameCommandArchive::_Internal::super(const StyleRenameCommandArchive* msg) {
  return *msg->super_;
}
StyleRenameCommandArchive::StyleRenameCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.StyleRenameCommandArchive)
}
StyleRenameCommandArchive::StyleRenameCommandArchive(const StyleRenameCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  updated_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_updated_name()) {
    updated_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_updated_name(), 
      GetArena());
  }
  old_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_old_name()) {
    old_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_old_name(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSWP::StyleBaseCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.StyleRenameCommandArchive)
}

void StyleRenameCommandArchive::SharedCtor() {
updated_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
old_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
super_ = nullptr;
}

StyleRenameCommandArchive::~StyleRenameCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.StyleRenameCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StyleRenameCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  updated_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void StyleRenameCommandArchive::ArenaDtor(void* object) {
  StyleRenameCommandArchive* _this = reinterpret_cast< StyleRenameCommandArchive* >(object);
  (void)_this;
}
void StyleRenameCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StyleRenameCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StyleRenameCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.StyleRenameCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      updated_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      old_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleRenameCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.StyleBaseCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string updated_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_updated_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.StyleRenameCommandArchive.updated_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string old_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_old_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.StyleRenameCommandArchive.old_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StyleRenameCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.StyleRenameCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.StyleBaseCommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional string updated_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_updated_name().data(), static_cast<int>(this->_internal_updated_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.StyleRenameCommandArchive.updated_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_updated_name(), target);
  }

  // optional string old_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_old_name().data(), static_cast<int>(this->_internal_old_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.StyleRenameCommandArchive.old_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_old_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.StyleRenameCommandArchive)
  return target;
}

size_t StyleRenameCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.StyleRenameCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string updated_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_updated_name());
    }

    // optional string old_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_old_name());
    }

    // optional .TSWP.StyleBaseCommandArchive super = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StyleRenameCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.StyleRenameCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const StyleRenameCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StyleRenameCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.StyleRenameCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.StyleRenameCommandArchive)
    MergeFrom(*source);
  }
}

void StyleRenameCommandArchive::MergeFrom(const StyleRenameCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.StyleRenameCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_updated_name(from._internal_updated_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_old_name(from._internal_old_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TSWP::StyleBaseCommandArchive::MergeFrom(from._internal_super());
    }
  }
}

void StyleRenameCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.StyleRenameCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleRenameCommandArchive::CopyFrom(const StyleRenameCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.StyleRenameCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleRenameCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void StyleRenameCommandArchive::InternalSwap(StyleRenameCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  updated_name_.Swap(&other->updated_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_name_.Swap(&other->old_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleRenameCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[24]);
}

// ===================================================================

class StyleUpdateCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StyleUpdateCommandArchive>()._has_bits_);
  static const ::TSWP::StyleBaseCommandArchive& super(const StyleUpdateCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& original_style(const StyleUpdateCommandArchive* msg);
  static void set_has_original_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& updated_style(const StyleUpdateCommandArchive* msg);
  static void set_has_updated_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSWP::StyleBaseCommandArchive&
StyleUpdateCommandArchive::_Internal::super(const StyleUpdateCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
StyleUpdateCommandArchive::_Internal::original_style(const StyleUpdateCommandArchive* msg) {
  return *msg->original_style_;
}
const ::TSP::Reference&
StyleUpdateCommandArchive::_Internal::updated_style(const StyleUpdateCommandArchive* msg) {
  return *msg->updated_style_;
}
void StyleUpdateCommandArchive::clear_original_style() {
  if (original_style_ != nullptr) original_style_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void StyleUpdateCommandArchive::clear_updated_style() {
  if (updated_style_ != nullptr) updated_style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
StyleUpdateCommandArchive::StyleUpdateCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.StyleUpdateCommandArchive)
}
StyleUpdateCommandArchive::StyleUpdateCommandArchive(const StyleUpdateCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::StyleBaseCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_original_style()) {
    original_style_ = new ::TSP::Reference(*from.original_style_);
  } else {
    original_style_ = nullptr;
  }
  if (from._internal_has_updated_style()) {
    updated_style_ = new ::TSP::Reference(*from.updated_style_);
  } else {
    updated_style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.StyleUpdateCommandArchive)
}

void StyleUpdateCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&updated_style_) -
    reinterpret_cast<char*>(&super_)) + sizeof(updated_style_));
}

StyleUpdateCommandArchive::~StyleUpdateCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.StyleUpdateCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StyleUpdateCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete original_style_;
  if (this != internal_default_instance()) delete updated_style_;
}

void StyleUpdateCommandArchive::ArenaDtor(void* object) {
  StyleUpdateCommandArchive* _this = reinterpret_cast< StyleUpdateCommandArchive* >(object);
  (void)_this;
}
void StyleUpdateCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StyleUpdateCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StyleUpdateCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.StyleUpdateCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(original_style_ != nullptr);
      original_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(updated_style_ != nullptr);
      updated_style_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleUpdateCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.StyleBaseCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference original_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference updated_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StyleUpdateCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.StyleUpdateCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.StyleBaseCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference original_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::original_style(this), target, stream);
  }

  // optional .TSP.Reference updated_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::updated_style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.StyleUpdateCommandArchive)
  return target;
}

size_t StyleUpdateCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.StyleUpdateCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSWP.StyleBaseCommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference original_style = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *original_style_);
    }

    // optional .TSP.Reference updated_style = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *updated_style_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StyleUpdateCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.StyleUpdateCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const StyleUpdateCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StyleUpdateCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.StyleUpdateCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.StyleUpdateCommandArchive)
    MergeFrom(*source);
  }
}

void StyleUpdateCommandArchive::MergeFrom(const StyleUpdateCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.StyleUpdateCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSWP::StyleBaseCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_original_style()->::TSP::Reference::MergeFrom(from._internal_original_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_updated_style()->::TSP::Reference::MergeFrom(from._internal_updated_style());
    }
  }
}

void StyleUpdateCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.StyleUpdateCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleUpdateCommandArchive::CopyFrom(const StyleUpdateCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.StyleUpdateCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleUpdateCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_original_style()) {
    if (!original_style_->IsInitialized()) return false;
  }
  if (_internal_has_updated_style()) {
    if (!updated_style_->IsInitialized()) return false;
  }
  return true;
}

void StyleUpdateCommandArchive::InternalSwap(StyleUpdateCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StyleUpdateCommandArchive, updated_style_)
      + sizeof(StyleUpdateCommandArchive::updated_style_)
      - PROTOBUF_FIELD_OFFSET(StyleUpdateCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleUpdateCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[25]);
}

// ===================================================================

class StyleDeleteCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StyleDeleteCommandArchive>()._has_bits_);
  static const ::TSWP::StyleBaseCommandArchive& super(const StyleDeleteCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_preset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSWP::StyleBaseCommandArchive&
StyleDeleteCommandArchive::_Internal::super(const StyleDeleteCommandArchive* msg) {
  return *msg->super_;
}
StyleDeleteCommandArchive::StyleDeleteCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.StyleDeleteCommandArchive)
}
StyleDeleteCommandArchive::StyleDeleteCommandArchive(const StyleDeleteCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::StyleBaseCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  old_preset_index_ = from.old_preset_index_;
  // @@protoc_insertion_point(copy_constructor:TSWP.StyleDeleteCommandArchive)
}

void StyleDeleteCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_preset_index_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_preset_index_));
}

StyleDeleteCommandArchive::~StyleDeleteCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.StyleDeleteCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StyleDeleteCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void StyleDeleteCommandArchive::ArenaDtor(void* object) {
  StyleDeleteCommandArchive* _this = reinterpret_cast< StyleDeleteCommandArchive* >(object);
  (void)_this;
}
void StyleDeleteCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StyleDeleteCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StyleDeleteCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.StyleDeleteCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  old_preset_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleDeleteCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.StyleBaseCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 old_preset_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_old_preset_index(&has_bits);
          old_preset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StyleDeleteCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.StyleDeleteCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.StyleBaseCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 old_preset_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_old_preset_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.StyleDeleteCommandArchive)
  return target;
}

size_t StyleDeleteCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.StyleDeleteCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSWP.StyleBaseCommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional uint32 old_preset_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_old_preset_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StyleDeleteCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.StyleDeleteCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const StyleDeleteCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StyleDeleteCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.StyleDeleteCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.StyleDeleteCommandArchive)
    MergeFrom(*source);
  }
}

void StyleDeleteCommandArchive::MergeFrom(const StyleDeleteCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.StyleDeleteCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSWP::StyleBaseCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      old_preset_index_ = from.old_preset_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StyleDeleteCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.StyleDeleteCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleDeleteCommandArchive::CopyFrom(const StyleDeleteCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.StyleDeleteCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleDeleteCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void StyleDeleteCommandArchive::InternalSwap(StyleDeleteCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StyleDeleteCommandArchive, old_preset_index_)
      + sizeof(StyleDeleteCommandArchive::old_preset_index_)
      - PROTOBUF_FIELD_OFFSET(StyleDeleteCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleDeleteCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[26]);
}

// ===================================================================

class StyleReorderCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StyleReorderCommandArchive>()._has_bits_);
  static const ::TSWP::StyleBaseCommandArchive& super(const StyleReorderCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_preset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_new_preset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSWP::StyleBaseCommandArchive&
StyleReorderCommandArchive::_Internal::super(const StyleReorderCommandArchive* msg) {
  return *msg->super_;
}
StyleReorderCommandArchive::StyleReorderCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.StyleReorderCommandArchive)
}
StyleReorderCommandArchive::StyleReorderCommandArchive(const StyleReorderCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::StyleBaseCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&old_preset_index_, &from.old_preset_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_preset_index_) -
    reinterpret_cast<char*>(&old_preset_index_)) + sizeof(new_preset_index_));
  // @@protoc_insertion_point(copy_constructor:TSWP.StyleReorderCommandArchive)
}

void StyleReorderCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_preset_index_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_preset_index_));
}

StyleReorderCommandArchive::~StyleReorderCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.StyleReorderCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StyleReorderCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void StyleReorderCommandArchive::ArenaDtor(void* object) {
  StyleReorderCommandArchive* _this = reinterpret_cast< StyleReorderCommandArchive* >(object);
  (void)_this;
}
void StyleReorderCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StyleReorderCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StyleReorderCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.StyleReorderCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&old_preset_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_preset_index_) -
        reinterpret_cast<char*>(&old_preset_index_)) + sizeof(new_preset_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleReorderCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.StyleBaseCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 old_preset_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_old_preset_index(&has_bits);
          old_preset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 new_preset_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_new_preset_index(&has_bits);
          new_preset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StyleReorderCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.StyleReorderCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSWP.StyleBaseCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 old_preset_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_old_preset_index(), target);
  }

  // optional uint32 new_preset_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_new_preset_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.StyleReorderCommandArchive)
  return target;
}

size_t StyleReorderCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.StyleReorderCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSWP.StyleBaseCommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional uint32 old_preset_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_old_preset_index());
    }

    // optional uint32 new_preset_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_new_preset_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StyleReorderCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.StyleReorderCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const StyleReorderCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StyleReorderCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.StyleReorderCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.StyleReorderCommandArchive)
    MergeFrom(*source);
  }
}

void StyleReorderCommandArchive::MergeFrom(const StyleReorderCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.StyleReorderCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSWP::StyleBaseCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      old_preset_index_ = from.old_preset_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      new_preset_index_ = from.new_preset_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StyleReorderCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.StyleReorderCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleReorderCommandArchive::CopyFrom(const StyleReorderCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.StyleReorderCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleReorderCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void StyleReorderCommandArchive::InternalSwap(StyleReorderCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StyleReorderCommandArchive, new_preset_index_)
      + sizeof(StyleReorderCommandArchive::new_preset_index_)
      - PROTOBUF_FIELD_OFFSET(StyleReorderCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleReorderCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[27]);
}

// ===================================================================

class StyleUpdatePropertyMapCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StyleUpdatePropertyMapCommandArchive>()._has_bits_);
  static const ::TSS::StyleUpdatePropertyMapCommandArchive& super(const StyleUpdatePropertyMapCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleUpdatePropertyMapCommandArchive&
StyleUpdatePropertyMapCommandArchive::_Internal::super(const StyleUpdatePropertyMapCommandArchive* msg) {
  return *msg->super_;
}
void StyleUpdatePropertyMapCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
StyleUpdatePropertyMapCommandArchive::StyleUpdatePropertyMapCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.StyleUpdatePropertyMapCommandArchive)
}
StyleUpdatePropertyMapCommandArchive::StyleUpdatePropertyMapCommandArchive(const StyleUpdatePropertyMapCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleUpdatePropertyMapCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.StyleUpdatePropertyMapCommandArchive)
}

void StyleUpdatePropertyMapCommandArchive::SharedCtor() {
super_ = nullptr;
}

StyleUpdatePropertyMapCommandArchive::~StyleUpdatePropertyMapCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.StyleUpdatePropertyMapCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StyleUpdatePropertyMapCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void StyleUpdatePropertyMapCommandArchive::ArenaDtor(void* object) {
  StyleUpdatePropertyMapCommandArchive* _this = reinterpret_cast< StyleUpdatePropertyMapCommandArchive* >(object);
  (void)_this;
}
void StyleUpdatePropertyMapCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StyleUpdatePropertyMapCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StyleUpdatePropertyMapCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.StyleUpdatePropertyMapCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleUpdatePropertyMapCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleUpdatePropertyMapCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StyleUpdatePropertyMapCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.StyleUpdatePropertyMapCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.StyleUpdatePropertyMapCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.StyleUpdatePropertyMapCommandArchive)
  return target;
}

size_t StyleUpdatePropertyMapCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.StyleUpdatePropertyMapCommandArchive)
  size_t total_size = 0;

  // required .TSS.StyleUpdatePropertyMapCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StyleUpdatePropertyMapCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.StyleUpdatePropertyMapCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const StyleUpdatePropertyMapCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StyleUpdatePropertyMapCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.StyleUpdatePropertyMapCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.StyleUpdatePropertyMapCommandArchive)
    MergeFrom(*source);
  }
}

void StyleUpdatePropertyMapCommandArchive::MergeFrom(const StyleUpdatePropertyMapCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.StyleUpdatePropertyMapCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSS::StyleUpdatePropertyMapCommandArchive::MergeFrom(from._internal_super());
  }
}

void StyleUpdatePropertyMapCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.StyleUpdatePropertyMapCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleUpdatePropertyMapCommandArchive::CopyFrom(const StyleUpdatePropertyMapCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.StyleUpdatePropertyMapCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleUpdatePropertyMapCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void StyleUpdatePropertyMapCommandArchive::InternalSwap(StyleUpdatePropertyMapCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleUpdatePropertyMapCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[28]);
}

// ===================================================================

class ShapeStyleSetValueCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShapeStyleSetValueCommandArchive>()._has_bits_);
  static const ::TSD::BaseStyleSetValueCommandArchive& super(const ShapeStyleSetValueCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSWPSOS::ShapeStylePropertyChangeSetArchive& change(const ShapeStyleSetValueCommandArchive* msg);
  static void set_has_change(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::BaseStyleSetValueCommandArchive&
ShapeStyleSetValueCommandArchive::_Internal::super(const ShapeStyleSetValueCommandArchive* msg) {
  return *msg->super_;
}
const ::TSWPSOS::ShapeStylePropertyChangeSetArchive&
ShapeStyleSetValueCommandArchive::_Internal::change(const ShapeStyleSetValueCommandArchive* msg) {
  return *msg->change_;
}
void ShapeStyleSetValueCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ShapeStyleSetValueCommandArchive::clear_change() {
  if (change_ != nullptr) change_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ShapeStyleSetValueCommandArchive::ShapeStyleSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.ShapeStyleSetValueCommandArchive)
}
ShapeStyleSetValueCommandArchive::ShapeStyleSetValueCommandArchive(const ShapeStyleSetValueCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::BaseStyleSetValueCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_change()) {
    change_ = new ::TSWPSOS::ShapeStylePropertyChangeSetArchive(*from.change_);
  } else {
    change_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.ShapeStyleSetValueCommandArchive)
}

void ShapeStyleSetValueCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&change_) -
    reinterpret_cast<char*>(&super_)) + sizeof(change_));
}

ShapeStyleSetValueCommandArchive::~ShapeStyleSetValueCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ShapeStyleSetValueCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShapeStyleSetValueCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete change_;
}

void ShapeStyleSetValueCommandArchive::ArenaDtor(void* object) {
  ShapeStyleSetValueCommandArchive* _this = reinterpret_cast< ShapeStyleSetValueCommandArchive* >(object);
  (void)_this;
}
void ShapeStyleSetValueCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeStyleSetValueCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShapeStyleSetValueCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ShapeStyleSetValueCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(change_ != nullptr);
      change_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeStyleSetValueCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.BaseStyleSetValueCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWPSOS.ShapeStylePropertyChangeSetArchive change = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeStyleSetValueCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ShapeStyleSetValueCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.BaseStyleSetValueCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSWPSOS.ShapeStylePropertyChangeSetArchive change = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::change(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ShapeStyleSetValueCommandArchive)
  return target;
}

size_t ShapeStyleSetValueCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ShapeStyleSetValueCommandArchive)
  size_t total_size = 0;

  // required .TSD.BaseStyleSetValueCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSWPSOS.ShapeStylePropertyChangeSetArchive change = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *change_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeStyleSetValueCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.ShapeStyleSetValueCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeStyleSetValueCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeStyleSetValueCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.ShapeStyleSetValueCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.ShapeStyleSetValueCommandArchive)
    MergeFrom(*source);
  }
}

void ShapeStyleSetValueCommandArchive::MergeFrom(const ShapeStyleSetValueCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ShapeStyleSetValueCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::BaseStyleSetValueCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_change()->::TSWPSOS::ShapeStylePropertyChangeSetArchive::MergeFrom(from._internal_change());
    }
  }
}

void ShapeStyleSetValueCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.ShapeStyleSetValueCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeStyleSetValueCommandArchive::CopyFrom(const ShapeStyleSetValueCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ShapeStyleSetValueCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeStyleSetValueCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_change()) {
    if (!change_->IsInitialized()) return false;
  }
  return true;
}

void ShapeStyleSetValueCommandArchive::InternalSwap(ShapeStyleSetValueCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeStyleSetValueCommandArchive, change_)
      + sizeof(ShapeStyleSetValueCommandArchive::change_)
      - PROTOBUF_FIELD_OFFSET(ShapeStyleSetValueCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeStyleSetValueCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[29]);
}

// ===================================================================

class SelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectionTransformerArchive>()._has_bits_);
  static const ::TSP::UUIDPath& storage_uuid_path(const SelectionTransformerArchive* msg);
  static void set_has_storage_uuid_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& selection(const SelectionTransformerArchive* msg);
  static void set_has_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_transformed_to_noop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUIDPath&
SelectionTransformerArchive::_Internal::storage_uuid_path(const SelectionTransformerArchive* msg) {
  return *msg->storage_uuid_path_;
}
const ::TSP::Reference&
SelectionTransformerArchive::_Internal::selection(const SelectionTransformerArchive* msg) {
  return *msg->selection_;
}
void SelectionTransformerArchive::clear_storage_uuid_path() {
  if (storage_uuid_path_ != nullptr) storage_uuid_path_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SelectionTransformerArchive::clear_selection() {
  if (selection_ != nullptr) selection_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SelectionTransformerArchive::SelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.SelectionTransformerArchive)
}
SelectionTransformerArchive::SelectionTransformerArchive(const SelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_storage_uuid_path()) {
    storage_uuid_path_ = new ::TSP::UUIDPath(*from.storage_uuid_path_);
  } else {
    storage_uuid_path_ = nullptr;
  }
  if (from._internal_has_selection()) {
    selection_ = new ::TSP::Reference(*from.selection_);
  } else {
    selection_ = nullptr;
  }
  transformed_to_noop_ = from.transformed_to_noop_;
  // @@protoc_insertion_point(copy_constructor:TSWP.SelectionTransformerArchive)
}

void SelectionTransformerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&storage_uuid_path_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&transformed_to_noop_) -
    reinterpret_cast<char*>(&storage_uuid_path_)) + sizeof(transformed_to_noop_));
}

SelectionTransformerArchive::~SelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSWP.SelectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete storage_uuid_path_;
  if (this != internal_default_instance()) delete selection_;
}

void SelectionTransformerArchive::ArenaDtor(void* object) {
  SelectionTransformerArchive* _this = reinterpret_cast< SelectionTransformerArchive* >(object);
  (void)_this;
}
void SelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.SelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(storage_uuid_path_ != nullptr);
      storage_uuid_path_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(selection_ != nullptr);
      selection_->Clear();
    }
  }
  transformed_to_noop_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUIDPath storage_uuid_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_uuid_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool transformed_to_noop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_transformed_to_noop(&has_bits);
          transformed_to_noop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.SelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUIDPath storage_uuid_path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::storage_uuid_path(this), target, stream);
  }

  // required .TSP.Reference selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::selection(this), target, stream);
  }

  // optional bool transformed_to_noop = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_transformed_to_noop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.SelectionTransformerArchive)
  return target;
}

size_t SelectionTransformerArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.SelectionTransformerArchive)
  size_t total_size = 0;

  if (_internal_has_storage_uuid_path()) {
    // required .TSP.UUIDPath storage_uuid_path = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storage_uuid_path_);
  }

  if (_internal_has_selection()) {
    // required .TSP.Reference selection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selection_);
  }

  return total_size;
}
size_t SelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.SelectionTransformerArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUIDPath storage_uuid_path = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storage_uuid_path_);

    // required .TSP.Reference selection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selection_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool transformed_to_noop = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.SelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.SelectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.SelectionTransformerArchive)
    MergeFrom(*source);
  }
}

void SelectionTransformerArchive::MergeFrom(const SelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.SelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_storage_uuid_path()->::TSP::UUIDPath::MergeFrom(from._internal_storage_uuid_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_selection()->::TSP::Reference::MergeFrom(from._internal_selection());
    }
    if (cached_has_bits & 0x00000004u) {
      transformed_to_noop_ = from.transformed_to_noop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SelectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.SelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectionTransformerArchive::CopyFrom(const SelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.SelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_storage_uuid_path()) {
    if (!storage_uuid_path_->IsInitialized()) return false;
  }
  if (_internal_has_selection()) {
    if (!selection_->IsInitialized()) return false;
  }
  return true;
}

void SelectionTransformerArchive::InternalSwap(SelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectionTransformerArchive, transformed_to_noop_)
      + sizeof(SelectionTransformerArchive::transformed_to_noop_)
      - PROTOBUF_FIELD_OFFSET(SelectionTransformerArchive, storage_uuid_path_)>(
          reinterpret_cast<char*>(&storage_uuid_path_),
          reinterpret_cast<char*>(&other->storage_uuid_path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[30]);
}

// ===================================================================

class PencilAnnotationSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PencilAnnotationSelectionTransformerArchive>()._has_bits_);
  static const ::TSP::UUIDPath& storage_uuid_path(const PencilAnnotationSelectionTransformerArchive* msg);
  static void set_has_storage_uuid_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text_pencil_annotation_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUIDPath&
PencilAnnotationSelectionTransformerArchive::_Internal::storage_uuid_path(const PencilAnnotationSelectionTransformerArchive* msg) {
  return *msg->storage_uuid_path_;
}
void PencilAnnotationSelectionTransformerArchive::clear_storage_uuid_path() {
  if (storage_uuid_path_ != nullptr) storage_uuid_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
PencilAnnotationSelectionTransformerArchive::PencilAnnotationSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.PencilAnnotationSelectionTransformerArchive)
}
PencilAnnotationSelectionTransformerArchive::PencilAnnotationSelectionTransformerArchive(const PencilAnnotationSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_pencil_annotation_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text_pencil_annotation_uuid()) {
    text_pencil_annotation_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text_pencil_annotation_uuid(), 
      GetArena());
  }
  if (from._internal_has_storage_uuid_path()) {
    storage_uuid_path_ = new ::TSP::UUIDPath(*from.storage_uuid_path_);
  } else {
    storage_uuid_path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.PencilAnnotationSelectionTransformerArchive)
}

void PencilAnnotationSelectionTransformerArchive::SharedCtor() {
text_pencil_annotation_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
storage_uuid_path_ = nullptr;
}

PencilAnnotationSelectionTransformerArchive::~PencilAnnotationSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSWP.PencilAnnotationSelectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PencilAnnotationSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_pencil_annotation_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete storage_uuid_path_;
}

void PencilAnnotationSelectionTransformerArchive::ArenaDtor(void* object) {
  PencilAnnotationSelectionTransformerArchive* _this = reinterpret_cast< PencilAnnotationSelectionTransformerArchive* >(object);
  (void)_this;
}
void PencilAnnotationSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PencilAnnotationSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PencilAnnotationSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.PencilAnnotationSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      text_pencil_annotation_uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(storage_uuid_path_ != nullptr);
      storage_uuid_path_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PencilAnnotationSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUIDPath storage_uuid_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_uuid_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string text_pencil_annotation_uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text_pencil_annotation_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.PencilAnnotationSelectionTransformerArchive.text_pencil_annotation_uuid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PencilAnnotationSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.PencilAnnotationSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUIDPath storage_uuid_path = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::storage_uuid_path(this), target, stream);
  }

  // required string text_pencil_annotation_uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text_pencil_annotation_uuid().data(), static_cast<int>(this->_internal_text_pencil_annotation_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.PencilAnnotationSelectionTransformerArchive.text_pencil_annotation_uuid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text_pencil_annotation_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.PencilAnnotationSelectionTransformerArchive)
  return target;
}

size_t PencilAnnotationSelectionTransformerArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.PencilAnnotationSelectionTransformerArchive)
  size_t total_size = 0;

  if (_internal_has_text_pencil_annotation_uuid()) {
    // required string text_pencil_annotation_uuid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text_pencil_annotation_uuid());
  }

  if (_internal_has_storage_uuid_path()) {
    // required .TSP.UUIDPath storage_uuid_path = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storage_uuid_path_);
  }

  return total_size;
}
size_t PencilAnnotationSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.PencilAnnotationSelectionTransformerArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string text_pencil_annotation_uuid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text_pencil_annotation_uuid());

    // required .TSP.UUIDPath storage_uuid_path = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storage_uuid_path_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PencilAnnotationSelectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.PencilAnnotationSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PencilAnnotationSelectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PencilAnnotationSelectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.PencilAnnotationSelectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.PencilAnnotationSelectionTransformerArchive)
    MergeFrom(*source);
  }
}

void PencilAnnotationSelectionTransformerArchive::MergeFrom(const PencilAnnotationSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.PencilAnnotationSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text_pencil_annotation_uuid(from._internal_text_pencil_annotation_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_storage_uuid_path()->::TSP::UUIDPath::MergeFrom(from._internal_storage_uuid_path());
    }
  }
}

void PencilAnnotationSelectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.PencilAnnotationSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PencilAnnotationSelectionTransformerArchive::CopyFrom(const PencilAnnotationSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.PencilAnnotationSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PencilAnnotationSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_storage_uuid_path()) {
    if (!storage_uuid_path_->IsInitialized()) return false;
  }
  return true;
}

void PencilAnnotationSelectionTransformerArchive::InternalSwap(PencilAnnotationSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_pencil_annotation_uuid_.Swap(&other->text_pencil_annotation_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(storage_uuid_path_, other->storage_uuid_path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PencilAnnotationSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[31]);
}

// ===================================================================

class ShapeSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShapeSelectionTransformerArchive>()._has_bits_);
  static const ::TSD::ShapeSelectionTransformerArchive& super(const ShapeSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& storage_uuid_path(const ShapeSelectionTransformerArchive* msg);
  static void set_has_storage_uuid_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::ShapeSelectionTransformerArchive&
ShapeSelectionTransformerArchive::_Internal::super(const ShapeSelectionTransformerArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
ShapeSelectionTransformerArchive::_Internal::storage_uuid_path(const ShapeSelectionTransformerArchive* msg) {
  return *msg->storage_uuid_path_;
}
void ShapeSelectionTransformerArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ShapeSelectionTransformerArchive::clear_storage_uuid_path() {
  if (storage_uuid_path_ != nullptr) storage_uuid_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ShapeSelectionTransformerArchive::ShapeSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.ShapeSelectionTransformerArchive)
}
ShapeSelectionTransformerArchive::ShapeSelectionTransformerArchive(const ShapeSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::ShapeSelectionTransformerArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_storage_uuid_path()) {
    storage_uuid_path_ = new ::TSP::UUIDPath(*from.storage_uuid_path_);
  } else {
    storage_uuid_path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.ShapeSelectionTransformerArchive)
}

void ShapeSelectionTransformerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&storage_uuid_path_) -
    reinterpret_cast<char*>(&super_)) + sizeof(storage_uuid_path_));
}

ShapeSelectionTransformerArchive::~ShapeSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ShapeSelectionTransformerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShapeSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete storage_uuid_path_;
}

void ShapeSelectionTransformerArchive::ArenaDtor(void* object) {
  ShapeSelectionTransformerArchive* _this = reinterpret_cast< ShapeSelectionTransformerArchive* >(object);
  (void)_this;
}
void ShapeSelectionTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeSelectionTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShapeSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ShapeSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(storage_uuid_path_ != nullptr);
      storage_uuid_path_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeSelectionTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.ShapeSelectionTransformerArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath storage_uuid_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_uuid_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeSelectionTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ShapeSelectionTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.ShapeSelectionTransformerArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.UUIDPath storage_uuid_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage_uuid_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ShapeSelectionTransformerArchive)
  return target;
}

size_t ShapeSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ShapeSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSD.ShapeSelectionTransformerArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.UUIDPath storage_uuid_path = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storage_uuid_path_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeSelectionTransformerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.ShapeSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeSelectionTransformerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeSelectionTransformerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.ShapeSelectionTransformerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.ShapeSelectionTransformerArchive)
    MergeFrom(*source);
  }
}

void ShapeSelectionTransformerArchive::MergeFrom(const ShapeSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ShapeSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::ShapeSelectionTransformerArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_storage_uuid_path()->::TSP::UUIDPath::MergeFrom(from._internal_storage_uuid_path());
    }
  }
}

void ShapeSelectionTransformerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.ShapeSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeSelectionTransformerArchive::CopyFrom(const ShapeSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ShapeSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_storage_uuid_path()) {
    if (!storage_uuid_path_->IsInitialized()) return false;
  }
  return true;
}

void ShapeSelectionTransformerArchive::InternalSwap(ShapeSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeSelectionTransformerArchive, storage_uuid_path_)
      + sizeof(ShapeSelectionTransformerArchive::storage_uuid_path_)
      - PROTOBUF_FIELD_OFFSET(ShapeSelectionTransformerArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeSelectionTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[32]);
}

// ===================================================================

class ShapeContentDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<ShapeContentDescription>()._has_bits_);
  static const ::TSD::DrawableContentDescription& super(const ShapeContentDescription* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_text_range_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text_range_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::DrawableContentDescription&
ShapeContentDescription::_Internal::super(const ShapeContentDescription* msg) {
  return *msg->super_;
}
void ShapeContentDescription::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ShapeContentDescription::ShapeContentDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.ShapeContentDescription)
}
ShapeContentDescription::ShapeContentDescription(const ShapeContentDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::DrawableContentDescription(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&text_range_location_, &from.text_range_location_,
    static_cast<size_t>(reinterpret_cast<char*>(&text_range_length_) -
    reinterpret_cast<char*>(&text_range_location_)) + sizeof(text_range_length_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ShapeContentDescription)
}

void ShapeContentDescription::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&text_range_length_) -
    reinterpret_cast<char*>(&super_)) + sizeof(text_range_length_));
}

ShapeContentDescription::~ShapeContentDescription() {
  // @@protoc_insertion_point(destructor:TSWP.ShapeContentDescription)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShapeContentDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ShapeContentDescription::ArenaDtor(void* object) {
  ShapeContentDescription* _this = reinterpret_cast< ShapeContentDescription* >(object);
  (void)_this;
}
void ShapeContentDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeContentDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShapeContentDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ShapeContentDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&text_range_location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&text_range_length_) -
        reinterpret_cast<char*>(&text_range_location_)) + sizeof(text_range_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeContentDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.DrawableContentDescription super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 text_range_location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_text_range_location(&has_bits);
          text_range_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 text_range_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_text_range_length(&has_bits);
          text_range_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeContentDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ShapeContentDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.DrawableContentDescription super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 text_range_location = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_text_range_location(), target);
  }

  // optional uint32 text_range_length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_text_range_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ShapeContentDescription)
  return target;
}

size_t ShapeContentDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ShapeContentDescription)
  size_t total_size = 0;

  // required .TSD.DrawableContentDescription super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 text_range_location = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_text_range_location());
    }

    // optional uint32 text_range_length = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_text_range_length());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeContentDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.ShapeContentDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeContentDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeContentDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.ShapeContentDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.ShapeContentDescription)
    MergeFrom(*source);
  }
}

void ShapeContentDescription::MergeFrom(const ShapeContentDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ShapeContentDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::DrawableContentDescription::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      text_range_location_ = from.text_range_location_;
    }
    if (cached_has_bits & 0x00000004u) {
      text_range_length_ = from.text_range_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShapeContentDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.ShapeContentDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeContentDescription::CopyFrom(const ShapeContentDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ShapeContentDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeContentDescription::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ShapeContentDescription::InternalSwap(ShapeContentDescription* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeContentDescription, text_range_length_)
      + sizeof(ShapeContentDescription::text_range_length_)
      - PROTOBUF_FIELD_OFFSET(ShapeContentDescription, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeContentDescription::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[33]);
}

// ===================================================================

class ObjectPropertyArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectPropertyArchive>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bool_value(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_float_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_integer_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDPath& id_path_value(const ObjectPropertyArchive* msg);
  static void set_has_id_path_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::FillArchive& fill_value(const ObjectPropertyArchive* msg);
  static void set_has_fill_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Color& color_value(const ObjectPropertyArchive* msg);
  static void set_has_color_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::ShadowArchive& shadow_value(const ObjectPropertyArchive* msg);
  static void set_has_shadow_value(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000041) ^ 0x00000041) != 0;
  }
};

const ::TSP::UUIDPath&
ObjectPropertyArchive::_Internal::id_path_value(const ObjectPropertyArchive* msg) {
  return *msg->id_path_value_;
}
const ::TSD::FillArchive&
ObjectPropertyArchive::_Internal::fill_value(const ObjectPropertyArchive* msg) {
  return *msg->fill_value_;
}
const ::TSP::Color&
ObjectPropertyArchive::_Internal::color_value(const ObjectPropertyArchive* msg) {
  return *msg->color_value_;
}
const ::TSD::ShadowArchive&
ObjectPropertyArchive::_Internal::shadow_value(const ObjectPropertyArchive* msg) {
  return *msg->shadow_value_;
}
void ObjectPropertyArchive::clear_id_path_value() {
  if (id_path_value_ != nullptr) id_path_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ObjectPropertyArchive::clear_fill_value() {
  if (fill_value_ != nullptr) fill_value_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ObjectPropertyArchive::clear_color_value() {
  if (color_value_ != nullptr) color_value_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ObjectPropertyArchive::clear_shadow_value() {
  if (shadow_value_ != nullptr) shadow_value_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
ObjectPropertyArchive::ObjectPropertyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.ObjectPropertyArchive)
}
ObjectPropertyArchive::ObjectPropertyArchive(const ObjectPropertyArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string_value()) {
    string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string_value(), 
      GetArena());
  }
  if (from._internal_has_id_path_value()) {
    id_path_value_ = new ::TSP::UUIDPath(*from.id_path_value_);
  } else {
    id_path_value_ = nullptr;
  }
  if (from._internal_has_fill_value()) {
    fill_value_ = new ::TSD::FillArchive(*from.fill_value_);
  } else {
    fill_value_ = nullptr;
  }
  if (from._internal_has_color_value()) {
    color_value_ = new ::TSP::Color(*from.color_value_);
  } else {
    color_value_ = nullptr;
  }
  if (from._internal_has_shadow_value()) {
    shadow_value_ = new ::TSD::ShadowArchive(*from.shadow_value_);
  } else {
    shadow_value_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&integer_value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(integer_value_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ObjectPropertyArchive)
}

void ObjectPropertyArchive::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_path_value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&integer_value_) -
    reinterpret_cast<char*>(&id_path_value_)) + sizeof(integer_value_));
}

ObjectPropertyArchive::~ObjectPropertyArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ObjectPropertyArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectPropertyArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_path_value_;
  if (this != internal_default_instance()) delete fill_value_;
  if (this != internal_default_instance()) delete color_value_;
  if (this != internal_default_instance()) delete shadow_value_;
}

void ObjectPropertyArchive::ArenaDtor(void* object) {
  ObjectPropertyArchive* _this = reinterpret_cast< ObjectPropertyArchive* >(object);
  (void)_this;
}
void ObjectPropertyArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectPropertyArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectPropertyArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ObjectPropertyArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      string_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(id_path_value_ != nullptr);
      id_path_value_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(fill_value_ != nullptr);
      fill_value_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(color_value_ != nullptr);
      color_value_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(shadow_value_ != nullptr);
      shadow_value_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bool_value_) -
        reinterpret_cast<char*>(&type_)) + sizeof(bool_value_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&float_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&integer_value_) -
        reinterpret_cast<char*>(&float_value_)) + sizeof(integer_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectPropertyArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.ObjectPropertyArchive.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSWP.ObjectPropertyType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::ObjectPropertyType_IsValid(val))) {
            _internal_set_type(static_cast<::TSWP::ObjectPropertyType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool bool_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bool_value(&has_bits);
          bool_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float float_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_float_value(&has_bits);
          float_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 integer_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_integer_value(&has_bits);
          integer_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string string_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.ObjectPropertyArchive.string_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath id_path_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_id_path_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FillArchive fill_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color color_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive shadow_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_shadow_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectPropertyArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ObjectPropertyArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.ObjectPropertyArchive.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required .TSWP.ObjectPropertyType type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional bool bool_value = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bool_value(), target);
  }

  // optional float float_value = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_float_value(), target);
  }

  // optional int32 integer_value = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_integer_value(), target);
  }

  // optional string string_value = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.ObjectPropertyArchive.string_value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_string_value(), target);
  }

  // optional .TSP.UUIDPath id_path_value = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::id_path_value(this), target, stream);
  }

  // optional .TSD.FillArchive fill_value = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::fill_value(this), target, stream);
  }

  // optional .TSP.Color color_value = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::color_value(this), target, stream);
  }

  // optional .TSD.ShadowArchive shadow_value = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::shadow_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ObjectPropertyArchive)
  return target;
}

size_t ObjectPropertyArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.ObjectPropertyArchive)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_type()) {
    // required .TSWP.ObjectPropertyType type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t ObjectPropertyArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ObjectPropertyArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000041) ^ 0x00000041) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .TSWP.ObjectPropertyType type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional string string_value = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
    }

    // optional .TSP.UUIDPath id_path_value = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_path_value_);
    }

    // optional .TSD.FillArchive fill_value = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fill_value_);
    }

    // optional .TSP.Color color_value = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_value_);
    }

    // optional .TSD.ShadowArchive shadow_value = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shadow_value_);
    }

  }
  // optional bool bool_value = 3;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 + 1;
  }

  if (cached_has_bits & 0x00000300u) {
    // optional float float_value = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int32 integer_value = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_integer_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectPropertyArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.ObjectPropertyArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectPropertyArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.ObjectPropertyArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.ObjectPropertyArchive)
    MergeFrom(*source);
  }
}

void ObjectPropertyArchive::MergeFrom(const ObjectPropertyArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ObjectPropertyArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_id_path_value()->::TSP::UUIDPath::MergeFrom(from._internal_id_path_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_fill_value()->::TSD::FillArchive::MergeFrom(from._internal_fill_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_color_value()->::TSP::Color::MergeFrom(from._internal_color_value());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_shadow_value()->::TSD::ShadowArchive::MergeFrom(from._internal_shadow_value());
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      bool_value_ = from.bool_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      float_value_ = from.float_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      integer_value_ = from.integer_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectPropertyArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.ObjectPropertyArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyArchive::CopyFrom(const ObjectPropertyArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ObjectPropertyArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_id_path_value()) {
    if (!id_path_value_->IsInitialized()) return false;
  }
  if (_internal_has_fill_value()) {
    if (!fill_value_->IsInitialized()) return false;
  }
  if (_internal_has_color_value()) {
    if (!color_value_->IsInitialized()) return false;
  }
  if (_internal_has_shadow_value()) {
    if (!shadow_value_->IsInitialized()) return false;
  }
  return true;
}

void ObjectPropertyArchive::InternalSwap(ObjectPropertyArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  string_value_.Swap(&other->string_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectPropertyArchive, integer_value_)
      + sizeof(ObjectPropertyArchive::integer_value_)
      - PROTOBUF_FIELD_OFFSET(ObjectPropertyArchive, id_path_value_)>(
          reinterpret_cast<char*>(&id_path_value_),
          reinterpret_cast<char*>(&other->id_path_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectPropertyArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[34]);
}

// ===================================================================

class SetObjectPropertiesCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SetObjectPropertiesCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const SetObjectPropertiesCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDPath& object_uuid_path(const SetObjectPropertiesCommandArchive* msg);
  static void set_has_object_uuid_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_action_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSK::CommandArchive&
SetObjectPropertiesCommandArchive::_Internal::super(const SetObjectPropertiesCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
SetObjectPropertiesCommandArchive::_Internal::object_uuid_path(const SetObjectPropertiesCommandArchive* msg) {
  return *msg->object_uuid_path_;
}
void SetObjectPropertiesCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SetObjectPropertiesCommandArchive::clear_object_uuid_path() {
  if (object_uuid_path_ != nullptr) object_uuid_path_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SetObjectPropertiesCommandArchive::SetObjectPropertiesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  properties_(arena),
  old_properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.SetObjectPropertiesCommandArchive)
}
SetObjectPropertiesCommandArchive::SetObjectPropertiesCommandArchive(const SetObjectPropertiesCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      properties_(from.properties_),
      old_properties_(from.old_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_action_string()) {
    action_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action_string(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_object_uuid_path()) {
    object_uuid_path_ = new ::TSP::UUIDPath(*from.object_uuid_path_);
  } else {
    object_uuid_path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.SetObjectPropertiesCommandArchive)
}

void SetObjectPropertiesCommandArchive::SharedCtor() {
action_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&object_uuid_path_) -
    reinterpret_cast<char*>(&super_)) + sizeof(object_uuid_path_));
}

SetObjectPropertiesCommandArchive::~SetObjectPropertiesCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.SetObjectPropertiesCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetObjectPropertiesCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  action_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete object_uuid_path_;
}

void SetObjectPropertiesCommandArchive::ArenaDtor(void* object) {
  SetObjectPropertiesCommandArchive* _this = reinterpret_cast< SetObjectPropertiesCommandArchive* >(object);
  (void)_this;
}
void SetObjectPropertiesCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetObjectPropertiesCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetObjectPropertiesCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.SetObjectPropertiesCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  old_properties_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      action_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(object_uuid_path_ != nullptr);
      object_uuid_path_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetObjectPropertiesCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDPath object_uuid_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_uuid_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSWP.ObjectPropertyArchive properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string action_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.SetObjectPropertiesCommandArchive.action_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSWP.ObjectPropertyArchive old_properties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetObjectPropertiesCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.SetObjectPropertiesCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.UUIDPath object_uuid_path = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::object_uuid_path(this), target, stream);
  }

  // repeated .TSWP.ObjectPropertyArchive properties = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_properties(i), target, stream);
  }

  // optional string action_string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action_string().data(), static_cast<int>(this->_internal_action_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.SetObjectPropertiesCommandArchive.action_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action_string(), target);
  }

  // repeated .TSWP.ObjectPropertyArchive old_properties = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_old_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.SetObjectPropertiesCommandArchive)
  return target;
}

size_t SetObjectPropertiesCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.SetObjectPropertiesCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_object_uuid_path()) {
    // required .TSP.UUIDPath object_uuid_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_uuid_path_);
  }

  return total_size;
}
size_t SetObjectPropertiesCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.SetObjectPropertiesCommandArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.UUIDPath object_uuid_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_uuid_path_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.ObjectPropertyArchive properties = 3;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSWP.ObjectPropertyArchive old_properties = 5;
  total_size += 1UL * this->_internal_old_properties_size();
  for (const auto& msg : this->old_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string action_string = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_string());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetObjectPropertiesCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.SetObjectPropertiesCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SetObjectPropertiesCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetObjectPropertiesCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.SetObjectPropertiesCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.SetObjectPropertiesCommandArchive)
    MergeFrom(*source);
  }
}

void SetObjectPropertiesCommandArchive::MergeFrom(const SetObjectPropertiesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.SetObjectPropertiesCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  old_properties_.MergeFrom(from.old_properties_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_action_string(from._internal_action_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_object_uuid_path()->::TSP::UUIDPath::MergeFrom(from._internal_object_uuid_path());
    }
  }
}

void SetObjectPropertiesCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.SetObjectPropertiesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetObjectPropertiesCommandArchive::CopyFrom(const SetObjectPropertiesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.SetObjectPropertiesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetObjectPropertiesCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(properties_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(old_properties_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_object_uuid_path()) {
    if (!object_uuid_path_->IsInitialized()) return false;
  }
  return true;
}

void SetObjectPropertiesCommandArchive::InternalSwap(SetObjectPropertiesCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  properties_.InternalSwap(&other->properties_);
  old_properties_.InternalSwap(&other->old_properties_);
  action_string_.Swap(&other->action_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetObjectPropertiesCommandArchive, object_uuid_path_)
      + sizeof(SetObjectPropertiesCommandArchive::object_uuid_path_)
      - PROTOBUF_FIELD_OFFSET(SetObjectPropertiesCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetObjectPropertiesCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[35]);
}

// ===================================================================

class UpdateFlowInfoCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateFlowInfoCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const UpdateFlowInfoCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_command_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::UUIDPath& flow_info_uuid_path(const UpdateFlowInfoCommandArchive* msg);
  static void set_has_flow_info_uuid_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDPath& text_box_id_path_to_add_or_remove(const UpdateFlowInfoCommandArchive* msg);
  static void set_has_text_box_id_path_to_add_or_remove(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_added_shape_info(const UpdateFlowInfoCommandArchive* msg);
  static void set_has_undo_added_shape_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& undo_removed_shape_info(const UpdateFlowInfoCommandArchive* msg);
  static void set_has_undo_removed_shape_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSK::CommandArchive&
UpdateFlowInfoCommandArchive::_Internal::super(const UpdateFlowInfoCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
UpdateFlowInfoCommandArchive::_Internal::flow_info_uuid_path(const UpdateFlowInfoCommandArchive* msg) {
  return *msg->flow_info_uuid_path_;
}
const ::TSP::UUIDPath&
UpdateFlowInfoCommandArchive::_Internal::text_box_id_path_to_add_or_remove(const UpdateFlowInfoCommandArchive* msg) {
  return *msg->text_box_id_path_to_add_or_remove_;
}
const ::TSP::Reference&
UpdateFlowInfoCommandArchive::_Internal::undo_added_shape_info(const UpdateFlowInfoCommandArchive* msg) {
  return *msg->undo_added_shape_info_;
}
const ::TSP::Reference&
UpdateFlowInfoCommandArchive::_Internal::undo_removed_shape_info(const UpdateFlowInfoCommandArchive* msg) {
  return *msg->undo_removed_shape_info_;
}
void UpdateFlowInfoCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateFlowInfoCommandArchive::clear_flow_info_uuid_path() {
  if (flow_info_uuid_path_ != nullptr) flow_info_uuid_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void UpdateFlowInfoCommandArchive::clear_text_box_id_path_to_add_or_remove() {
  if (text_box_id_path_to_add_or_remove_ != nullptr) text_box_id_path_to_add_or_remove_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void UpdateFlowInfoCommandArchive::clear_text_box_id_paths_at_start() {
  text_box_id_paths_at_start_.Clear();
}
void UpdateFlowInfoCommandArchive::clear_suggested_text_box_id_paths_at_end() {
  suggested_text_box_id_paths_at_end_.Clear();
}
void UpdateFlowInfoCommandArchive::clear_undo_text_boxes_to_restore() {
  undo_text_boxes_to_restore_.Clear();
}
void UpdateFlowInfoCommandArchive::clear_undo_added_shape_info() {
  if (undo_added_shape_info_ != nullptr) undo_added_shape_info_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void UpdateFlowInfoCommandArchive::clear_undo_removed_shape_info() {
  if (undo_removed_shape_info_ != nullptr) undo_removed_shape_info_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
UpdateFlowInfoCommandArchive::UpdateFlowInfoCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  text_box_id_paths_at_start_(arena),
  suggested_text_box_id_paths_at_end_(arena),
  undo_text_boxes_to_restore_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.UpdateFlowInfoCommandArchive)
}
UpdateFlowInfoCommandArchive::UpdateFlowInfoCommandArchive(const UpdateFlowInfoCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      text_box_id_paths_at_start_(from.text_box_id_paths_at_start_),
      suggested_text_box_id_paths_at_end_(from.suggested_text_box_id_paths_at_end_),
      undo_text_boxes_to_restore_(from.undo_text_boxes_to_restore_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_flow_info_uuid_path()) {
    flow_info_uuid_path_ = new ::TSP::UUIDPath(*from.flow_info_uuid_path_);
  } else {
    flow_info_uuid_path_ = nullptr;
  }
  if (from._internal_has_text_box_id_path_to_add_or_remove()) {
    text_box_id_path_to_add_or_remove_ = new ::TSP::UUIDPath(*from.text_box_id_path_to_add_or_remove_);
  } else {
    text_box_id_path_to_add_or_remove_ = nullptr;
  }
  if (from._internal_has_undo_added_shape_info()) {
    undo_added_shape_info_ = new ::TSP::Reference(*from.undo_added_shape_info_);
  } else {
    undo_added_shape_info_ = nullptr;
  }
  if (from._internal_has_undo_removed_shape_info()) {
    undo_removed_shape_info_ = new ::TSP::Reference(*from.undo_removed_shape_info_);
  } else {
    undo_removed_shape_info_ = nullptr;
  }
  command_mode_ = from.command_mode_;
  // @@protoc_insertion_point(copy_constructor:TSWP.UpdateFlowInfoCommandArchive)
}

void UpdateFlowInfoCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&command_mode_) -
    reinterpret_cast<char*>(&super_)) + sizeof(command_mode_));
}

UpdateFlowInfoCommandArchive::~UpdateFlowInfoCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.UpdateFlowInfoCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateFlowInfoCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete flow_info_uuid_path_;
  if (this != internal_default_instance()) delete text_box_id_path_to_add_or_remove_;
  if (this != internal_default_instance()) delete undo_added_shape_info_;
  if (this != internal_default_instance()) delete undo_removed_shape_info_;
}

void UpdateFlowInfoCommandArchive::ArenaDtor(void* object) {
  UpdateFlowInfoCommandArchive* _this = reinterpret_cast< UpdateFlowInfoCommandArchive* >(object);
  (void)_this;
}
void UpdateFlowInfoCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateFlowInfoCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateFlowInfoCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UpdateFlowInfoCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_box_id_paths_at_start_.Clear();
  suggested_text_box_id_paths_at_end_.Clear();
  undo_text_boxes_to_restore_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(flow_info_uuid_path_ != nullptr);
      flow_info_uuid_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(text_box_id_path_to_add_or_remove_ != nullptr);
      text_box_id_path_to_add_or_remove_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undo_added_shape_info_ != nullptr);
      undo_added_shape_info_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(undo_removed_shape_info_ != nullptr);
      undo_removed_shape_info_->Clear();
    }
  }
  command_mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateFlowInfoCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.UpdateFlowInfoCommandArchive.Mode command_mode = 2 [default = kModeRearrange];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::UpdateFlowInfoCommandArchive_Mode_IsValid(val))) {
            _internal_set_command_mode(static_cast<::TSWP::UpdateFlowInfoCommandArchive_Mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath flow_info_uuid_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow_info_uuid_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath text_box_id_path_to_add_or_remove = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_box_id_path_to_add_or_remove(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUIDPath text_box_id_paths_at_start = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_text_box_id_paths_at_start(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUIDPath suggested_text_box_id_paths_at_end = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_suggested_text_box_id_paths_at_end(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference undo_text_boxes_to_restore = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_text_boxes_to_restore(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_added_shape_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_added_shape_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_removed_shape_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_removed_shape_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateFlowInfoCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UpdateFlowInfoCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSWP.UpdateFlowInfoCommandArchive.Mode command_mode = 2 [default = kModeRearrange];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_command_mode(), target);
  }

  // optional .TSP.UUIDPath flow_info_uuid_path = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::flow_info_uuid_path(this), target, stream);
  }

  // optional .TSP.UUIDPath text_box_id_path_to_add_or_remove = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::text_box_id_path_to_add_or_remove(this), target, stream);
  }

  // repeated .TSP.UUIDPath text_box_id_paths_at_start = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_text_box_id_paths_at_start_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_text_box_id_paths_at_start(i), target, stream);
  }

  // repeated .TSP.UUIDPath suggested_text_box_id_paths_at_end = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_suggested_text_box_id_paths_at_end_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_suggested_text_box_id_paths_at_end(i), target, stream);
  }

  // repeated .TSP.Reference undo_text_boxes_to_restore = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_undo_text_boxes_to_restore_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_undo_text_boxes_to_restore(i), target, stream);
  }

  // optional .TSP.Reference undo_added_shape_info = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::undo_added_shape_info(this), target, stream);
  }

  // optional .TSP.Reference undo_removed_shape_info = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::undo_removed_shape_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UpdateFlowInfoCommandArchive)
  return target;
}

size_t UpdateFlowInfoCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UpdateFlowInfoCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUIDPath text_box_id_paths_at_start = 5;
  total_size += 1UL * this->_internal_text_box_id_paths_at_start_size();
  for (const auto& msg : this->text_box_id_paths_at_start_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUIDPath suggested_text_box_id_paths_at_end = 6;
  total_size += 1UL * this->_internal_suggested_text_box_id_paths_at_end_size();
  for (const auto& msg : this->suggested_text_box_id_paths_at_end_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference undo_text_boxes_to_restore = 7;
  total_size += 1UL * this->_internal_undo_text_boxes_to_restore_size();
  for (const auto& msg : this->undo_text_boxes_to_restore_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TSK.CommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.UUIDPath flow_info_uuid_path = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *flow_info_uuid_path_);
    }

    // optional .TSP.UUIDPath text_box_id_path_to_add_or_remove = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_box_id_path_to_add_or_remove_);
    }

    // optional .TSP.Reference undo_added_shape_info = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_added_shape_info_);
    }

    // optional .TSP.Reference undo_removed_shape_info = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_removed_shape_info_);
    }

    // optional .TSWP.UpdateFlowInfoCommandArchive.Mode command_mode = 2 [default = kModeRearrange];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateFlowInfoCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.UpdateFlowInfoCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateFlowInfoCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateFlowInfoCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.UpdateFlowInfoCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.UpdateFlowInfoCommandArchive)
    MergeFrom(*source);
  }
}

void UpdateFlowInfoCommandArchive::MergeFrom(const UpdateFlowInfoCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UpdateFlowInfoCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  text_box_id_paths_at_start_.MergeFrom(from.text_box_id_paths_at_start_);
  suggested_text_box_id_paths_at_end_.MergeFrom(from.suggested_text_box_id_paths_at_end_);
  undo_text_boxes_to_restore_.MergeFrom(from.undo_text_boxes_to_restore_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_flow_info_uuid_path()->::TSP::UUIDPath::MergeFrom(from._internal_flow_info_uuid_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_text_box_id_path_to_add_or_remove()->::TSP::UUIDPath::MergeFrom(from._internal_text_box_id_path_to_add_or_remove());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_undo_added_shape_info()->::TSP::Reference::MergeFrom(from._internal_undo_added_shape_info());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_undo_removed_shape_info()->::TSP::Reference::MergeFrom(from._internal_undo_removed_shape_info());
    }
    if (cached_has_bits & 0x00000020u) {
      command_mode_ = from.command_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateFlowInfoCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.UpdateFlowInfoCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFlowInfoCommandArchive::CopyFrom(const UpdateFlowInfoCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UpdateFlowInfoCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFlowInfoCommandArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(text_box_id_paths_at_start_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(suggested_text_box_id_paths_at_end_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(undo_text_boxes_to_restore_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_flow_info_uuid_path()) {
    if (!flow_info_uuid_path_->IsInitialized()) return false;
  }
  if (_internal_has_text_box_id_path_to_add_or_remove()) {
    if (!text_box_id_path_to_add_or_remove_->IsInitialized()) return false;
  }
  if (_internal_has_undo_added_shape_info()) {
    if (!undo_added_shape_info_->IsInitialized()) return false;
  }
  if (_internal_has_undo_removed_shape_info()) {
    if (!undo_removed_shape_info_->IsInitialized()) return false;
  }
  return true;
}

void UpdateFlowInfoCommandArchive::InternalSwap(UpdateFlowInfoCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_box_id_paths_at_start_.InternalSwap(&other->text_box_id_paths_at_start_);
  suggested_text_box_id_paths_at_end_.InternalSwap(&other->suggested_text_box_id_paths_at_end_);
  undo_text_boxes_to_restore_.InternalSwap(&other->undo_text_boxes_to_restore_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateFlowInfoCommandArchive, command_mode_)
      + sizeof(UpdateFlowInfoCommandArchive::command_mode_)
      - PROTOBUF_FIELD_OFFSET(UpdateFlowInfoCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateFlowInfoCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[36]);
}

// ===================================================================

class AddFlowInfoCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AddFlowInfoCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const AddFlowInfoCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& flow_info_to_add(const AddFlowInfoCommandArchive* msg);
  static void set_has_flow_info_to_add(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& flow_info_archive(const AddFlowInfoCommandArchive* msg);
  static void set_has_flow_info_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_undo_user_interface_identifier_to_restore(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_undo_next_user_interface_identifier_to_restore(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& working_undo_object(const AddFlowInfoCommandArchive* msg);
  static void set_has_working_undo_object(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSK::CommandArchive&
AddFlowInfoCommandArchive::_Internal::super(const AddFlowInfoCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
AddFlowInfoCommandArchive::_Internal::flow_info_to_add(const AddFlowInfoCommandArchive* msg) {
  return *msg->flow_info_to_add_;
}
const ::TSP::Reference&
AddFlowInfoCommandArchive::_Internal::flow_info_archive(const AddFlowInfoCommandArchive* msg) {
  return *msg->flow_info_archive_;
}
const ::TSP::Reference&
AddFlowInfoCommandArchive::_Internal::working_undo_object(const AddFlowInfoCommandArchive* msg) {
  return *msg->working_undo_object_;
}
void AddFlowInfoCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void AddFlowInfoCommandArchive::clear_flow_info_to_add() {
  if (flow_info_to_add_ != nullptr) flow_info_to_add_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void AddFlowInfoCommandArchive::clear_flow_info_archive() {
  if (flow_info_archive_ != nullptr) flow_info_archive_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void AddFlowInfoCommandArchive::clear_working_undo_object() {
  if (working_undo_object_ != nullptr) working_undo_object_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
AddFlowInfoCommandArchive::AddFlowInfoCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.AddFlowInfoCommandArchive)
}
AddFlowInfoCommandArchive::AddFlowInfoCommandArchive(const AddFlowInfoCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_flow_info_to_add()) {
    flow_info_to_add_ = new ::TSP::Reference(*from.flow_info_to_add_);
  } else {
    flow_info_to_add_ = nullptr;
  }
  if (from._internal_has_flow_info_archive()) {
    flow_info_archive_ = new ::TSP::Reference(*from.flow_info_archive_);
  } else {
    flow_info_archive_ = nullptr;
  }
  if (from._internal_has_working_undo_object()) {
    working_undo_object_ = new ::TSP::Reference(*from.working_undo_object_);
  } else {
    working_undo_object_ = nullptr;
  }
  ::memcpy(&undo_user_interface_identifier_to_restore_, &from.undo_user_interface_identifier_to_restore_,
    static_cast<size_t>(reinterpret_cast<char*>(&undo_next_user_interface_identifier_to_restore_) -
    reinterpret_cast<char*>(&undo_user_interface_identifier_to_restore_)) + sizeof(undo_next_user_interface_identifier_to_restore_));
  // @@protoc_insertion_point(copy_constructor:TSWP.AddFlowInfoCommandArchive)
}

void AddFlowInfoCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_next_user_interface_identifier_to_restore_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_next_user_interface_identifier_to_restore_));
}

AddFlowInfoCommandArchive::~AddFlowInfoCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.AddFlowInfoCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddFlowInfoCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete flow_info_to_add_;
  if (this != internal_default_instance()) delete flow_info_archive_;
  if (this != internal_default_instance()) delete working_undo_object_;
}

void AddFlowInfoCommandArchive::ArenaDtor(void* object) {
  AddFlowInfoCommandArchive* _this = reinterpret_cast< AddFlowInfoCommandArchive* >(object);
  (void)_this;
}
void AddFlowInfoCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddFlowInfoCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddFlowInfoCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.AddFlowInfoCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(flow_info_to_add_ != nullptr);
      flow_info_to_add_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(flow_info_archive_ != nullptr);
      flow_info_archive_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(working_undo_object_ != nullptr);
      working_undo_object_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&undo_user_interface_identifier_to_restore_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&undo_next_user_interface_identifier_to_restore_) -
        reinterpret_cast<char*>(&undo_user_interface_identifier_to_restore_)) + sizeof(undo_next_user_interface_identifier_to_restore_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddFlowInfoCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference flow_info_to_add = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow_info_to_add(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference flow_info_archive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow_info_archive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 undo_user_interface_identifier_to_restore = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_undo_user_interface_identifier_to_restore(&has_bits);
          undo_user_interface_identifier_to_restore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 undo_next_user_interface_identifier_to_restore = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_undo_next_user_interface_identifier_to_restore(&has_bits);
          undo_next_user_interface_identifier_to_restore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference working_undo_object = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_working_undo_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddFlowInfoCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.AddFlowInfoCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference flow_info_to_add = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::flow_info_to_add(this), target, stream);
  }

  // optional .TSP.Reference flow_info_archive = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::flow_info_archive(this), target, stream);
  }

  // optional uint32 undo_user_interface_identifier_to_restore = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_undo_user_interface_identifier_to_restore(), target);
  }

  // optional uint32 undo_next_user_interface_identifier_to_restore = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_undo_next_user_interface_identifier_to_restore(), target);
  }

  // optional .TSP.Reference working_undo_object = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::working_undo_object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.AddFlowInfoCommandArchive)
  return target;
}

size_t AddFlowInfoCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.AddFlowInfoCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TSK.CommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.Reference flow_info_to_add = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *flow_info_to_add_);
    }

    // optional .TSP.Reference flow_info_archive = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *flow_info_archive_);
    }

    // optional .TSP.Reference working_undo_object = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *working_undo_object_);
    }

    // optional uint32 undo_user_interface_identifier_to_restore = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_undo_user_interface_identifier_to_restore());
    }

    // optional uint32 undo_next_user_interface_identifier_to_restore = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_undo_next_user_interface_identifier_to_restore());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFlowInfoCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.AddFlowInfoCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFlowInfoCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddFlowInfoCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.AddFlowInfoCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.AddFlowInfoCommandArchive)
    MergeFrom(*source);
  }
}

void AddFlowInfoCommandArchive::MergeFrom(const AddFlowInfoCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.AddFlowInfoCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_flow_info_to_add()->::TSP::Reference::MergeFrom(from._internal_flow_info_to_add());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_flow_info_archive()->::TSP::Reference::MergeFrom(from._internal_flow_info_archive());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_working_undo_object()->::TSP::Reference::MergeFrom(from._internal_working_undo_object());
    }
    if (cached_has_bits & 0x00000010u) {
      undo_user_interface_identifier_to_restore_ = from.undo_user_interface_identifier_to_restore_;
    }
    if (cached_has_bits & 0x00000020u) {
      undo_next_user_interface_identifier_to_restore_ = from.undo_next_user_interface_identifier_to_restore_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddFlowInfoCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.AddFlowInfoCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFlowInfoCommandArchive::CopyFrom(const AddFlowInfoCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.AddFlowInfoCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFlowInfoCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_flow_info_to_add()) {
    if (!flow_info_to_add_->IsInitialized()) return false;
  }
  if (_internal_has_flow_info_archive()) {
    if (!flow_info_archive_->IsInitialized()) return false;
  }
  if (_internal_has_working_undo_object()) {
    if (!working_undo_object_->IsInitialized()) return false;
  }
  return true;
}

void AddFlowInfoCommandArchive::InternalSwap(AddFlowInfoCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddFlowInfoCommandArchive, undo_next_user_interface_identifier_to_restore_)
      + sizeof(AddFlowInfoCommandArchive::undo_next_user_interface_identifier_to_restore_)
      - PROTOBUF_FIELD_OFFSET(AddFlowInfoCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFlowInfoCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[37]);
}

// ===================================================================

class RemoveFlowInfoCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoveFlowInfoCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const RemoveFlowInfoCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& flow_info_uuid_path(const RemoveFlowInfoCommandArchive* msg);
  static void set_has_flow_info_uuid_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& undo_object(const RemoveFlowInfoCommandArchive* msg);
  static void set_has_undo_object(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_undo_user_interface_identifier_to_restore(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_undo_next_user_interface_identifier_to_restore(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSK::CommandArchive&
RemoveFlowInfoCommandArchive::_Internal::super(const RemoveFlowInfoCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
RemoveFlowInfoCommandArchive::_Internal::flow_info_uuid_path(const RemoveFlowInfoCommandArchive* msg) {
  return *msg->flow_info_uuid_path_;
}
const ::TSP::Reference&
RemoveFlowInfoCommandArchive::_Internal::undo_object(const RemoveFlowInfoCommandArchive* msg) {
  return *msg->undo_object_;
}
void RemoveFlowInfoCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RemoveFlowInfoCommandArchive::clear_flow_info_uuid_path() {
  if (flow_info_uuid_path_ != nullptr) flow_info_uuid_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void RemoveFlowInfoCommandArchive::clear_undo_object() {
  if (undo_object_ != nullptr) undo_object_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
RemoveFlowInfoCommandArchive::RemoveFlowInfoCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.RemoveFlowInfoCommandArchive)
}
RemoveFlowInfoCommandArchive::RemoveFlowInfoCommandArchive(const RemoveFlowInfoCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_flow_info_uuid_path()) {
    flow_info_uuid_path_ = new ::TSP::UUIDPath(*from.flow_info_uuid_path_);
  } else {
    flow_info_uuid_path_ = nullptr;
  }
  if (from._internal_has_undo_object()) {
    undo_object_ = new ::TSP::Reference(*from.undo_object_);
  } else {
    undo_object_ = nullptr;
  }
  ::memcpy(&undo_user_interface_identifier_to_restore_, &from.undo_user_interface_identifier_to_restore_,
    static_cast<size_t>(reinterpret_cast<char*>(&undo_next_user_interface_identifier_to_restore_) -
    reinterpret_cast<char*>(&undo_user_interface_identifier_to_restore_)) + sizeof(undo_next_user_interface_identifier_to_restore_));
  // @@protoc_insertion_point(copy_constructor:TSWP.RemoveFlowInfoCommandArchive)
}

void RemoveFlowInfoCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_next_user_interface_identifier_to_restore_) -
    reinterpret_cast<char*>(&super_)) + sizeof(undo_next_user_interface_identifier_to_restore_));
}

RemoveFlowInfoCommandArchive::~RemoveFlowInfoCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.RemoveFlowInfoCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveFlowInfoCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete flow_info_uuid_path_;
  if (this != internal_default_instance()) delete undo_object_;
}

void RemoveFlowInfoCommandArchive::ArenaDtor(void* object) {
  RemoveFlowInfoCommandArchive* _this = reinterpret_cast< RemoveFlowInfoCommandArchive* >(object);
  (void)_this;
}
void RemoveFlowInfoCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveFlowInfoCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveFlowInfoCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.RemoveFlowInfoCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(flow_info_uuid_path_ != nullptr);
      flow_info_uuid_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(undo_object_ != nullptr);
      undo_object_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&undo_user_interface_identifier_to_restore_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&undo_next_user_interface_identifier_to_restore_) -
        reinterpret_cast<char*>(&undo_user_interface_identifier_to_restore_)) + sizeof(undo_next_user_interface_identifier_to_restore_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveFlowInfoCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath flow_info_uuid_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow_info_uuid_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_object = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 undo_user_interface_identifier_to_restore = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_undo_user_interface_identifier_to_restore(&has_bits);
          undo_user_interface_identifier_to_restore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 undo_next_user_interface_identifier_to_restore = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_undo_next_user_interface_identifier_to_restore(&has_bits);
          undo_next_user_interface_identifier_to_restore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveFlowInfoCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.RemoveFlowInfoCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.UUIDPath flow_info_uuid_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::flow_info_uuid_path(this), target, stream);
  }

  // optional .TSP.Reference undo_object = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::undo_object(this), target, stream);
  }

  // optional uint32 undo_user_interface_identifier_to_restore = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_undo_user_interface_identifier_to_restore(), target);
  }

  // optional uint32 undo_next_user_interface_identifier_to_restore = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_undo_next_user_interface_identifier_to_restore(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.RemoveFlowInfoCommandArchive)
  return target;
}

size_t RemoveFlowInfoCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.RemoveFlowInfoCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSK.CommandArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.UUIDPath flow_info_uuid_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *flow_info_uuid_path_);
    }

    // optional .TSP.Reference undo_object = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_object_);
    }

    // optional uint32 undo_user_interface_identifier_to_restore = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_undo_user_interface_identifier_to_restore());
    }

    // optional uint32 undo_next_user_interface_identifier_to_restore = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_undo_next_user_interface_identifier_to_restore());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveFlowInfoCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.RemoveFlowInfoCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveFlowInfoCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveFlowInfoCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.RemoveFlowInfoCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.RemoveFlowInfoCommandArchive)
    MergeFrom(*source);
  }
}

void RemoveFlowInfoCommandArchive::MergeFrom(const RemoveFlowInfoCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.RemoveFlowInfoCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_flow_info_uuid_path()->::TSP::UUIDPath::MergeFrom(from._internal_flow_info_uuid_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_undo_object()->::TSP::Reference::MergeFrom(from._internal_undo_object());
    }
    if (cached_has_bits & 0x00000008u) {
      undo_user_interface_identifier_to_restore_ = from.undo_user_interface_identifier_to_restore_;
    }
    if (cached_has_bits & 0x00000010u) {
      undo_next_user_interface_identifier_to_restore_ = from.undo_next_user_interface_identifier_to_restore_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoveFlowInfoCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.RemoveFlowInfoCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveFlowInfoCommandArchive::CopyFrom(const RemoveFlowInfoCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.RemoveFlowInfoCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveFlowInfoCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_flow_info_uuid_path()) {
    if (!flow_info_uuid_path_->IsInitialized()) return false;
  }
  if (_internal_has_undo_object()) {
    if (!undo_object_->IsInitialized()) return false;
  }
  return true;
}

void RemoveFlowInfoCommandArchive::InternalSwap(RemoveFlowInfoCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveFlowInfoCommandArchive, undo_next_user_interface_identifier_to_restore_)
      + sizeof(RemoveFlowInfoCommandArchive::undo_next_user_interface_identifier_to_restore_)
      - PROTOBUF_FIELD_OFFSET(RemoveFlowInfoCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveFlowInfoCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[38]);
}

// ===================================================================

class TextCommentReplyCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TextCommentReplyCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const TextCommentReplyCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDPath& storage_uuid_path(const TextCommentReplyCommandArchive* msg);
  static void set_has_storage_uuid_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_annotation_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& forward_comment(const TextCommentReplyCommandArchive* msg);
  static void set_has_forward_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& inverse_comment(const TextCommentReplyCommandArchive* msg);
  static void set_has_inverse_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_forward_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_inverse_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::TSK::CommandArchive&
TextCommentReplyCommandArchive::_Internal::super(const TextCommentReplyCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::UUIDPath&
TextCommentReplyCommandArchive::_Internal::storage_uuid_path(const TextCommentReplyCommandArchive* msg) {
  return *msg->storage_uuid_path_;
}
const ::TSP::Reference&
TextCommentReplyCommandArchive::_Internal::forward_comment(const TextCommentReplyCommandArchive* msg) {
  return *msg->forward_comment_;
}
const ::TSP::Reference&
TextCommentReplyCommandArchive::_Internal::inverse_comment(const TextCommentReplyCommandArchive* msg) {
  return *msg->inverse_comment_;
}
void TextCommentReplyCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TextCommentReplyCommandArchive::clear_storage_uuid_path() {
  if (storage_uuid_path_ != nullptr) storage_uuid_path_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void TextCommentReplyCommandArchive::clear_forward_comment() {
  if (forward_comment_ != nullptr) forward_comment_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void TextCommentReplyCommandArchive::clear_inverse_comment() {
  if (inverse_comment_ != nullptr) inverse_comment_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
TextCommentReplyCommandArchive::TextCommentReplyCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.TextCommentReplyCommandArchive)
}
TextCommentReplyCommandArchive::TextCommentReplyCommandArchive(const TextCommentReplyCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  annotation_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_annotation_uuid()) {
    annotation_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_annotation_uuid(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_storage_uuid_path()) {
    storage_uuid_path_ = new ::TSP::UUIDPath(*from.storage_uuid_path_);
  } else {
    storage_uuid_path_ = nullptr;
  }
  if (from._internal_has_forward_comment()) {
    forward_comment_ = new ::TSP::Reference(*from.forward_comment_);
  } else {
    forward_comment_ = nullptr;
  }
  if (from._internal_has_inverse_comment()) {
    inverse_comment_ = new ::TSP::Reference(*from.inverse_comment_);
  } else {
    inverse_comment_ = nullptr;
  }
  ::memcpy(&forward_variant_, &from.forward_variant_,
    static_cast<size_t>(reinterpret_cast<char*>(&inverse_variant_) -
    reinterpret_cast<char*>(&forward_variant_)) + sizeof(inverse_variant_));
  // @@protoc_insertion_point(copy_constructor:TSWP.TextCommentReplyCommandArchive)
}

void TextCommentReplyCommandArchive::SharedCtor() {
annotation_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inverse_variant_) -
    reinterpret_cast<char*>(&super_)) + sizeof(inverse_variant_));
}

TextCommentReplyCommandArchive::~TextCommentReplyCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TextCommentReplyCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextCommentReplyCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  annotation_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete storage_uuid_path_;
  if (this != internal_default_instance()) delete forward_comment_;
  if (this != internal_default_instance()) delete inverse_comment_;
}

void TextCommentReplyCommandArchive::ArenaDtor(void* object) {
  TextCommentReplyCommandArchive* _this = reinterpret_cast< TextCommentReplyCommandArchive* >(object);
  (void)_this;
}
void TextCommentReplyCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextCommentReplyCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TextCommentReplyCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TextCommentReplyCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      annotation_uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(storage_uuid_path_ != nullptr);
      storage_uuid_path_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(forward_comment_ != nullptr);
      forward_comment_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(inverse_comment_ != nullptr);
      inverse_comment_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&forward_variant_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inverse_variant_) -
        reinterpret_cast<char*>(&forward_variant_)) + sizeof(inverse_variant_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextCommentReplyCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath storage_uuid_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_uuid_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string annotation_uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_annotation_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.TextCommentReplyCommandArchive.annotation_uuid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference forward_comment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_comment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference inverse_comment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_comment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.CommentCommandVariant forward_variant = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::CommentCommandVariant_IsValid(val))) {
            _internal_set_forward_variant(static_cast<::TSD::CommentCommandVariant>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSD.CommentCommandVariant inverse_variant = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::CommentCommandVariant_IsValid(val))) {
            _internal_set_inverse_variant(static_cast<::TSD::CommentCommandVariant>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextCommentReplyCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TextCommentReplyCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.UUIDPath storage_uuid_path = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage_uuid_path(this), target, stream);
  }

  // optional string annotation_uuid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_annotation_uuid().data(), static_cast<int>(this->_internal_annotation_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.TextCommentReplyCommandArchive.annotation_uuid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_annotation_uuid(), target);
  }

  // optional .TSP.Reference forward_comment = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::forward_comment(this), target, stream);
  }

  // optional .TSP.Reference inverse_comment = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::inverse_comment(this), target, stream);
  }

  // optional .TSD.CommentCommandVariant forward_variant = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_forward_variant(), target);
  }

  // optional .TSD.CommentCommandVariant inverse_variant = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_inverse_variant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TextCommentReplyCommandArchive)
  return target;
}

size_t TextCommentReplyCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TextCommentReplyCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string annotation_uuid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_annotation_uuid());
    }

    // optional .TSK.CommandArchive super = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

    // optional .TSP.UUIDPath storage_uuid_path = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_uuid_path_);
    }

    // optional .TSP.Reference forward_comment = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forward_comment_);
    }

    // optional .TSP.Reference inverse_comment = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inverse_comment_);
    }

    // optional .TSD.CommentCommandVariant forward_variant = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_forward_variant());
    }

    // optional .TSD.CommentCommandVariant inverse_variant = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inverse_variant());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextCommentReplyCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.TextCommentReplyCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const TextCommentReplyCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextCommentReplyCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.TextCommentReplyCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.TextCommentReplyCommandArchive)
    MergeFrom(*source);
  }
}

void TextCommentReplyCommandArchive::MergeFrom(const TextCommentReplyCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TextCommentReplyCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_annotation_uuid(from._internal_annotation_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_storage_uuid_path()->::TSP::UUIDPath::MergeFrom(from._internal_storage_uuid_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_forward_comment()->::TSP::Reference::MergeFrom(from._internal_forward_comment());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_inverse_comment()->::TSP::Reference::MergeFrom(from._internal_inverse_comment());
    }
    if (cached_has_bits & 0x00000020u) {
      forward_variant_ = from.forward_variant_;
    }
    if (cached_has_bits & 0x00000040u) {
      inverse_variant_ = from.inverse_variant_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TextCommentReplyCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.TextCommentReplyCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextCommentReplyCommandArchive::CopyFrom(const TextCommentReplyCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TextCommentReplyCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextCommentReplyCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_storage_uuid_path()) {
    if (!storage_uuid_path_->IsInitialized()) return false;
  }
  if (_internal_has_forward_comment()) {
    if (!forward_comment_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_comment()) {
    if (!inverse_comment_->IsInitialized()) return false;
  }
  return true;
}

void TextCommentReplyCommandArchive::InternalSwap(TextCommentReplyCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  annotation_uuid_.Swap(&other->annotation_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextCommentReplyCommandArchive, inverse_variant_)
      + sizeof(TextCommentReplyCommandArchive::inverse_variant_)
      - PROTOBUF_FIELD_OFFSET(TextCommentReplyCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextCommentReplyCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[39]);
}

// ===================================================================

class ContainedObjectsCommandArchive_AddBehaviorArgs::_Internal {
 public:
};

void ContainedObjectsCommandArchive_AddBehaviorArgs::clear_args_list() {
  args_list_.Clear();
}
ContainedObjectsCommandArchive_AddBehaviorArgs::ContainedObjectsCommandArchive_AddBehaviorArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs)
}
ContainedObjectsCommandArchive_AddBehaviorArgs::ContainedObjectsCommandArchive_AddBehaviorArgs(const ContainedObjectsCommandArchive_AddBehaviorArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      args_list_(from.args_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs)
}

void ContainedObjectsCommandArchive_AddBehaviorArgs::SharedCtor() {
}

ContainedObjectsCommandArchive_AddBehaviorArgs::~ContainedObjectsCommandArchive_AddBehaviorArgs() {
  // @@protoc_insertion_point(destructor:TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainedObjectsCommandArchive_AddBehaviorArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ContainedObjectsCommandArchive_AddBehaviorArgs::ArenaDtor(void* object) {
  ContainedObjectsCommandArchive_AddBehaviorArgs* _this = reinterpret_cast< ContainedObjectsCommandArchive_AddBehaviorArgs* >(object);
  (void)_this;
}
void ContainedObjectsCommandArchive_AddBehaviorArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainedObjectsCommandArchive_AddBehaviorArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContainedObjectsCommandArchive_AddBehaviorArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainedObjectsCommandArchive_AddBehaviorArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSK.AddIdOperationArgs args_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainedObjectsCommandArchive_AddBehaviorArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSK.AddIdOperationArgs args_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_args_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs)
  return target;
}

size_t ContainedObjectsCommandArchive_AddBehaviorArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.AddIdOperationArgs args_list = 1;
  total_size += 1UL * this->_internal_args_list_size();
  for (const auto& msg : this->args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainedObjectsCommandArchive_AddBehaviorArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainedObjectsCommandArchive_AddBehaviorArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainedObjectsCommandArchive_AddBehaviorArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs)
    MergeFrom(*source);
  }
}

void ContainedObjectsCommandArchive_AddBehaviorArgs::MergeFrom(const ContainedObjectsCommandArchive_AddBehaviorArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_list_.MergeFrom(from.args_list_);
}

void ContainedObjectsCommandArchive_AddBehaviorArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainedObjectsCommandArchive_AddBehaviorArgs::CopyFrom(const ContainedObjectsCommandArchive_AddBehaviorArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainedObjectsCommandArchive_AddBehaviorArgs::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_list_)) return false;
  return true;
}

void ContainedObjectsCommandArchive_AddBehaviorArgs::InternalSwap(ContainedObjectsCommandArchive_AddBehaviorArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  args_list_.InternalSwap(&other->args_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainedObjectsCommandArchive_AddBehaviorArgs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[40]);
}

// ===================================================================

class ContainedObjectsCommandArchive_RemoveBehaviorArgs::_Internal {
 public:
};

void ContainedObjectsCommandArchive_RemoveBehaviorArgs::clear_args_list() {
  args_list_.Clear();
}
ContainedObjectsCommandArchive_RemoveBehaviorArgs::ContainedObjectsCommandArchive_RemoveBehaviorArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs)
}
ContainedObjectsCommandArchive_RemoveBehaviorArgs::ContainedObjectsCommandArchive_RemoveBehaviorArgs(const ContainedObjectsCommandArchive_RemoveBehaviorArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      args_list_(from.args_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs)
}

void ContainedObjectsCommandArchive_RemoveBehaviorArgs::SharedCtor() {
}

ContainedObjectsCommandArchive_RemoveBehaviorArgs::~ContainedObjectsCommandArchive_RemoveBehaviorArgs() {
  // @@protoc_insertion_point(destructor:TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainedObjectsCommandArchive_RemoveBehaviorArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ContainedObjectsCommandArchive_RemoveBehaviorArgs::ArenaDtor(void* object) {
  ContainedObjectsCommandArchive_RemoveBehaviorArgs* _this = reinterpret_cast< ContainedObjectsCommandArchive_RemoveBehaviorArgs* >(object);
  (void)_this;
}
void ContainedObjectsCommandArchive_RemoveBehaviorArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainedObjectsCommandArchive_RemoveBehaviorArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContainedObjectsCommandArchive_RemoveBehaviorArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainedObjectsCommandArchive_RemoveBehaviorArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSK.RemoveIdOperationArgs args_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainedObjectsCommandArchive_RemoveBehaviorArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSK.RemoveIdOperationArgs args_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_args_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs)
  return target;
}

size_t ContainedObjectsCommandArchive_RemoveBehaviorArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.RemoveIdOperationArgs args_list = 1;
  total_size += 1UL * this->_internal_args_list_size();
  for (const auto& msg : this->args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainedObjectsCommandArchive_RemoveBehaviorArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainedObjectsCommandArchive_RemoveBehaviorArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainedObjectsCommandArchive_RemoveBehaviorArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs)
    MergeFrom(*source);
  }
}

void ContainedObjectsCommandArchive_RemoveBehaviorArgs::MergeFrom(const ContainedObjectsCommandArchive_RemoveBehaviorArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_list_.MergeFrom(from.args_list_);
}

void ContainedObjectsCommandArchive_RemoveBehaviorArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainedObjectsCommandArchive_RemoveBehaviorArgs::CopyFrom(const ContainedObjectsCommandArchive_RemoveBehaviorArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainedObjectsCommandArchive_RemoveBehaviorArgs::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_list_)) return false;
  return true;
}

void ContainedObjectsCommandArchive_RemoveBehaviorArgs::InternalSwap(ContainedObjectsCommandArchive_RemoveBehaviorArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  args_list_.InternalSwap(&other->args_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainedObjectsCommandArchive_RemoveBehaviorArgs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[41]);
}

// ===================================================================

class ContainedObjectsCommandArchive_RearrangeBehaviorArgs::_Internal {
 public:
};

void ContainedObjectsCommandArchive_RearrangeBehaviorArgs::clear_args_list() {
  args_list_.Clear();
}
ContainedObjectsCommandArchive_RearrangeBehaviorArgs::ContainedObjectsCommandArchive_RearrangeBehaviorArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs)
}
ContainedObjectsCommandArchive_RearrangeBehaviorArgs::ContainedObjectsCommandArchive_RearrangeBehaviorArgs(const ContainedObjectsCommandArchive_RearrangeBehaviorArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      args_list_(from.args_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs)
}

void ContainedObjectsCommandArchive_RearrangeBehaviorArgs::SharedCtor() {
}

ContainedObjectsCommandArchive_RearrangeBehaviorArgs::~ContainedObjectsCommandArchive_RearrangeBehaviorArgs() {
  // @@protoc_insertion_point(destructor:TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainedObjectsCommandArchive_RearrangeBehaviorArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ContainedObjectsCommandArchive_RearrangeBehaviorArgs::ArenaDtor(void* object) {
  ContainedObjectsCommandArchive_RearrangeBehaviorArgs* _this = reinterpret_cast< ContainedObjectsCommandArchive_RearrangeBehaviorArgs* >(object);
  (void)_this;
}
void ContainedObjectsCommandArchive_RearrangeBehaviorArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainedObjectsCommandArchive_RearrangeBehaviorArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContainedObjectsCommandArchive_RearrangeBehaviorArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainedObjectsCommandArchive_RearrangeBehaviorArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSK.RearrangeIdOperationArgs args_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainedObjectsCommandArchive_RearrangeBehaviorArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSK.RearrangeIdOperationArgs args_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_args_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs)
  return target;
}

size_t ContainedObjectsCommandArchive_RearrangeBehaviorArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.RearrangeIdOperationArgs args_list = 1;
  total_size += 1UL * this->_internal_args_list_size();
  for (const auto& msg : this->args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainedObjectsCommandArchive_RearrangeBehaviorArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainedObjectsCommandArchive_RearrangeBehaviorArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainedObjectsCommandArchive_RearrangeBehaviorArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs)
    MergeFrom(*source);
  }
}

void ContainedObjectsCommandArchive_RearrangeBehaviorArgs::MergeFrom(const ContainedObjectsCommandArchive_RearrangeBehaviorArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_list_.MergeFrom(from.args_list_);
}

void ContainedObjectsCommandArchive_RearrangeBehaviorArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainedObjectsCommandArchive_RearrangeBehaviorArgs::CopyFrom(const ContainedObjectsCommandArchive_RearrangeBehaviorArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainedObjectsCommandArchive_RearrangeBehaviorArgs::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_list_)) return false;
  return true;
}

void ContainedObjectsCommandArchive_RearrangeBehaviorArgs::InternalSwap(ContainedObjectsCommandArchive_RearrangeBehaviorArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  args_list_.InternalSwap(&other->args_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainedObjectsCommandArchive_RearrangeBehaviorArgs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[42]);
}

// ===================================================================

class ContainedObjectsCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ContainedObjectsCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ContainedObjectsCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& target(const ContainedObjectsCommandArchive* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_object_for_commit(const ContainedObjectsCommandArchive* msg);
  static void set_has_undo_object_for_commit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& undo_object_for_make_inverse(const ContainedObjectsCommandArchive* msg);
  static void set_has_undo_object_for_make_inverse(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs& add_behavior_args(const ContainedObjectsCommandArchive* msg);
  static void set_has_add_behavior_args(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs& remove_behavior_args(const ContainedObjectsCommandArchive* msg);
  static void set_has_remove_behavior_args(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs& rearrange_behavior_args(const ContainedObjectsCommandArchive* msg);
  static void set_has_rearrange_behavior_args(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_container_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSK::CommandArchive&
ContainedObjectsCommandArchive::_Internal::super(const ContainedObjectsCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
ContainedObjectsCommandArchive::_Internal::target(const ContainedObjectsCommandArchive* msg) {
  return *msg->target_;
}
const ::TSP::Reference&
ContainedObjectsCommandArchive::_Internal::undo_object_for_commit(const ContainedObjectsCommandArchive* msg) {
  return *msg->undo_object_for_commit_;
}
const ::TSP::Reference&
ContainedObjectsCommandArchive::_Internal::undo_object_for_make_inverse(const ContainedObjectsCommandArchive* msg) {
  return *msg->undo_object_for_make_inverse_;
}
const ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs&
ContainedObjectsCommandArchive::_Internal::add_behavior_args(const ContainedObjectsCommandArchive* msg) {
  return *msg->add_behavior_args_;
}
const ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs&
ContainedObjectsCommandArchive::_Internal::remove_behavior_args(const ContainedObjectsCommandArchive* msg) {
  return *msg->remove_behavior_args_;
}
const ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs&
ContainedObjectsCommandArchive::_Internal::rearrange_behavior_args(const ContainedObjectsCommandArchive* msg) {
  return *msg->rearrange_behavior_args_;
}
void ContainedObjectsCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ContainedObjectsCommandArchive::clear_target() {
  if (target_ != nullptr) target_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ContainedObjectsCommandArchive::clear_objects() {
  objects_.Clear();
}
void ContainedObjectsCommandArchive::clear_undo_object_for_commit() {
  if (undo_object_for_commit_ != nullptr) undo_object_for_commit_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ContainedObjectsCommandArchive::clear_undo_object_for_make_inverse() {
  if (undo_object_for_make_inverse_ != nullptr) undo_object_for_make_inverse_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ContainedObjectsCommandArchive::ContainedObjectsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.ContainedObjectsCommandArchive)
}
ContainedObjectsCommandArchive::ContainedObjectsCommandArchive(const ContainedObjectsCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_container_name()) {
    container_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container_name(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_target()) {
    target_ = new ::TSP::Reference(*from.target_);
  } else {
    target_ = nullptr;
  }
  if (from._internal_has_undo_object_for_commit()) {
    undo_object_for_commit_ = new ::TSP::Reference(*from.undo_object_for_commit_);
  } else {
    undo_object_for_commit_ = nullptr;
  }
  if (from._internal_has_undo_object_for_make_inverse()) {
    undo_object_for_make_inverse_ = new ::TSP::Reference(*from.undo_object_for_make_inverse_);
  } else {
    undo_object_for_make_inverse_ = nullptr;
  }
  if (from._internal_has_add_behavior_args()) {
    add_behavior_args_ = new ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs(*from.add_behavior_args_);
  } else {
    add_behavior_args_ = nullptr;
  }
  if (from._internal_has_remove_behavior_args()) {
    remove_behavior_args_ = new ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs(*from.remove_behavior_args_);
  } else {
    remove_behavior_args_ = nullptr;
  }
  if (from._internal_has_rearrange_behavior_args()) {
    rearrange_behavior_args_ = new ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs(*from.rearrange_behavior_args_);
  } else {
    rearrange_behavior_args_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.ContainedObjectsCommandArchive)
}

void ContainedObjectsCommandArchive::SharedCtor() {
container_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rearrange_behavior_args_) -
    reinterpret_cast<char*>(&super_)) + sizeof(rearrange_behavior_args_));
}

ContainedObjectsCommandArchive::~ContainedObjectsCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ContainedObjectsCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainedObjectsCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  container_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete target_;
  if (this != internal_default_instance()) delete undo_object_for_commit_;
  if (this != internal_default_instance()) delete undo_object_for_make_inverse_;
  if (this != internal_default_instance()) delete add_behavior_args_;
  if (this != internal_default_instance()) delete remove_behavior_args_;
  if (this != internal_default_instance()) delete rearrange_behavior_args_;
}

void ContainedObjectsCommandArchive::ArenaDtor(void* object) {
  ContainedObjectsCommandArchive* _this = reinterpret_cast< ContainedObjectsCommandArchive* >(object);
  (void)_this;
}
void ContainedObjectsCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainedObjectsCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContainedObjectsCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ContainedObjectsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      container_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(target_ != nullptr);
      target_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undo_object_for_commit_ != nullptr);
      undo_object_for_commit_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(undo_object_for_make_inverse_ != nullptr);
      undo_object_for_make_inverse_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(add_behavior_args_ != nullptr);
      add_behavior_args_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(remove_behavior_args_ != nullptr);
      remove_behavior_args_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(rearrange_behavior_args_ != nullptr);
      rearrange_behavior_args_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainedObjectsCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference objects = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_object_for_commit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_object_for_commit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_object_for_make_inverse = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_object_for_make_inverse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs add_behavior_args = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_behavior_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs remove_behavior_args = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_behavior_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs rearrange_behavior_args = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_rearrange_behavior_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string container_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_container_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSWP.ContainedObjectsCommandArchive.container_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainedObjectsCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ContainedObjectsCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference target = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target(this), target, stream);
  }

  // repeated .TSP.Reference objects = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_objects(i), target, stream);
  }

  // optional .TSP.Reference undo_object_for_commit = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::undo_object_for_commit(this), target, stream);
  }

  // optional .TSP.Reference undo_object_for_make_inverse = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::undo_object_for_make_inverse(this), target, stream);
  }

  // optional .TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs add_behavior_args = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::add_behavior_args(this), target, stream);
  }

  // optional .TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs remove_behavior_args = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::remove_behavior_args(this), target, stream);
  }

  // optional .TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs rearrange_behavior_args = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::rearrange_behavior_args(this), target, stream);
  }

  // optional string container_name = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_container_name().data(), static_cast<int>(this->_internal_container_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.ContainedObjectsCommandArchive.container_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_container_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ContainedObjectsCommandArchive)
  return target;
}

size_t ContainedObjectsCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.ContainedObjectsCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_target()) {
    // required .TSP.Reference target = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  return total_size;
}
size_t ContainedObjectsCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ContainedObjectsCommandArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference target = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference objects = 3;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string container_name = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container_name());
  }

  if (cached_has_bits & 0x000000f8u) {
    // optional .TSP.Reference undo_object_for_commit = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_object_for_commit_);
    }

    // optional .TSP.Reference undo_object_for_make_inverse = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_object_for_make_inverse_);
    }

    // optional .TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs add_behavior_args = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *add_behavior_args_);
    }

    // optional .TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs remove_behavior_args = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remove_behavior_args_);
    }

    // optional .TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs rearrange_behavior_args = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rearrange_behavior_args_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainedObjectsCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.ContainedObjectsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainedObjectsCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainedObjectsCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.ContainedObjectsCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.ContainedObjectsCommandArchive)
    MergeFrom(*source);
  }
}

void ContainedObjectsCommandArchive::MergeFrom(const ContainedObjectsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ContainedObjectsCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_container_name(from._internal_container_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_target()->::TSP::Reference::MergeFrom(from._internal_target());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_undo_object_for_commit()->::TSP::Reference::MergeFrom(from._internal_undo_object_for_commit());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_undo_object_for_make_inverse()->::TSP::Reference::MergeFrom(from._internal_undo_object_for_make_inverse());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_add_behavior_args()->::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs::MergeFrom(from._internal_add_behavior_args());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_remove_behavior_args()->::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs::MergeFrom(from._internal_remove_behavior_args());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_rearrange_behavior_args()->::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs::MergeFrom(from._internal_rearrange_behavior_args());
    }
  }
}

void ContainedObjectsCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.ContainedObjectsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainedObjectsCommandArchive::CopyFrom(const ContainedObjectsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ContainedObjectsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainedObjectsCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(objects_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_target()) {
    if (!target_->IsInitialized()) return false;
  }
  if (_internal_has_undo_object_for_commit()) {
    if (!undo_object_for_commit_->IsInitialized()) return false;
  }
  if (_internal_has_undo_object_for_make_inverse()) {
    if (!undo_object_for_make_inverse_->IsInitialized()) return false;
  }
  if (_internal_has_add_behavior_args()) {
    if (!add_behavior_args_->IsInitialized()) return false;
  }
  if (_internal_has_remove_behavior_args()) {
    if (!remove_behavior_args_->IsInitialized()) return false;
  }
  if (_internal_has_rearrange_behavior_args()) {
    if (!rearrange_behavior_args_->IsInitialized()) return false;
  }
  return true;
}

void ContainedObjectsCommandArchive::InternalSwap(ContainedObjectsCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  objects_.InternalSwap(&other->objects_);
  container_name_.Swap(&other->container_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContainedObjectsCommandArchive, rearrange_behavior_args_)
      + sizeof(ContainedObjectsCommandArchive::rearrange_behavior_args_)
      - PROTOBUF_FIELD_OFFSET(ContainedObjectsCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainedObjectsCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[43]);
}

// ===================================================================

class EquationInfoGeometryCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<EquationInfoGeometryCommandArchive>()._has_bits_);
  static const ::TSD::MediaInfoGeometryCommandArchive& super(const EquationInfoGeometryCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSD::MediaInfoGeometryCommandArchive&
EquationInfoGeometryCommandArchive::_Internal::super(const EquationInfoGeometryCommandArchive* msg) {
  return *msg->super_;
}
void EquationInfoGeometryCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
EquationInfoGeometryCommandArchive::EquationInfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.EquationInfoGeometryCommandArchive)
}
EquationInfoGeometryCommandArchive::EquationInfoGeometryCommandArchive(const EquationInfoGeometryCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::MediaInfoGeometryCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.EquationInfoGeometryCommandArchive)
}

void EquationInfoGeometryCommandArchive::SharedCtor() {
super_ = nullptr;
}

EquationInfoGeometryCommandArchive::~EquationInfoGeometryCommandArchive() {
  // @@protoc_insertion_point(destructor:TSWP.EquationInfoGeometryCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EquationInfoGeometryCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void EquationInfoGeometryCommandArchive::ArenaDtor(void* object) {
  EquationInfoGeometryCommandArchive* _this = reinterpret_cast< EquationInfoGeometryCommandArchive* >(object);
  (void)_this;
}
void EquationInfoGeometryCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EquationInfoGeometryCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EquationInfoGeometryCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.EquationInfoGeometryCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EquationInfoGeometryCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.MediaInfoGeometryCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EquationInfoGeometryCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.EquationInfoGeometryCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.MediaInfoGeometryCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.EquationInfoGeometryCommandArchive)
  return target;
}

size_t EquationInfoGeometryCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.EquationInfoGeometryCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSD.MediaInfoGeometryCommandArchive super = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EquationInfoGeometryCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.EquationInfoGeometryCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const EquationInfoGeometryCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EquationInfoGeometryCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.EquationInfoGeometryCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.EquationInfoGeometryCommandArchive)
    MergeFrom(*source);
  }
}

void EquationInfoGeometryCommandArchive::MergeFrom(const EquationInfoGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.EquationInfoGeometryCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSD::MediaInfoGeometryCommandArchive::MergeFrom(from._internal_super());
  }
}

void EquationInfoGeometryCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.EquationInfoGeometryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquationInfoGeometryCommandArchive::CopyFrom(const EquationInfoGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.EquationInfoGeometryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquationInfoGeometryCommandArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void EquationInfoGeometryCommandArchive::InternalSwap(EquationInfoGeometryCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EquationInfoGeometryCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[44]);
}

// ===================================================================

class CharacterStyleChangePropertyCommand_GArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CharacterStyleChangePropertyCommand_GArchive>()._has_bits_);
  static const ::TSWP::StorageActionCommandArchive& super(const CharacterStyleChangePropertyCommand_GArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_list_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_change_list_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_disable_character_style_promotion(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

const ::TSWP::StorageActionCommandArchive&
CharacterStyleChangePropertyCommand_GArchive::_Internal::super(const CharacterStyleChangePropertyCommand_GArchive* msg) {
  return *msg->super_;
}
void CharacterStyleChangePropertyCommand_GArchive::clear_range_list() {
  range_list_.Clear();
}
void CharacterStyleChangePropertyCommand_GArchive::clear_change_list() {
  change_list_.Clear();
}
CharacterStyleChangePropertyCommand_GArchive::CharacterStyleChangePropertyCommand_GArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  range_list_(arena),
  change_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.CharacterStyleChangePropertyCommand_GArchive)
}
CharacterStyleChangePropertyCommand_GArchive::CharacterStyleChangePropertyCommand_GArchive(const CharacterStyleChangePropertyCommand_GArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      range_list_(from.range_list_),
      change_list_(from.change_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::StorageActionCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&range_list_undefined_, &from.range_list_undefined_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_character_style_promotion_) -
    reinterpret_cast<char*>(&range_list_undefined_)) + sizeof(disable_character_style_promotion_));
  // @@protoc_insertion_point(copy_constructor:TSWP.CharacterStyleChangePropertyCommand_GArchive)
}

void CharacterStyleChangePropertyCommand_GArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disable_character_style_promotion_) -
    reinterpret_cast<char*>(&super_)) + sizeof(disable_character_style_promotion_));
}

CharacterStyleChangePropertyCommand_GArchive::~CharacterStyleChangePropertyCommand_GArchive() {
  // @@protoc_insertion_point(destructor:TSWP.CharacterStyleChangePropertyCommand_GArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CharacterStyleChangePropertyCommand_GArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void CharacterStyleChangePropertyCommand_GArchive::ArenaDtor(void* object) {
  CharacterStyleChangePropertyCommand_GArchive* _this = reinterpret_cast< CharacterStyleChangePropertyCommand_GArchive* >(object);
  (void)_this;
}
void CharacterStyleChangePropertyCommand_GArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CharacterStyleChangePropertyCommand_GArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CharacterStyleChangePropertyCommand_GArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.CharacterStyleChangePropertyCommand_GArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_list_.Clear();
  change_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  ::memset(&range_list_undefined_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_character_style_promotion_) -
      reinterpret_cast<char*>(&range_list_undefined_)) + sizeof(disable_character_style_promotion_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterStyleChangePropertyCommand_GArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.StorageActionCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Range range_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_range_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool range_list_undefined = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_range_list_undefined(&has_bits);
          range_list_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSWPSOS.CharacterStylePropertyChangeSetArchive change_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_change_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool change_list_undefined = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_change_list_undefined(&has_bits);
          change_list_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool disable_character_style_promotion = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_disable_character_style_promotion(&has_bits);
          disable_character_style_promotion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CharacterStyleChangePropertyCommand_GArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.CharacterStyleChangePropertyCommand_GArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.StorageActionCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.Range range_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_range_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_range_list(i), target, stream);
  }

  // optional bool range_list_undefined = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_range_list_undefined(), target);
  }

  // repeated .TSWPSOS.CharacterStylePropertyChangeSetArchive change_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_change_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_change_list(i), target, stream);
  }

  // optional bool change_list_undefined = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_change_list_undefined(), target);
  }

  // required bool disable_character_style_promotion = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_disable_character_style_promotion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.CharacterStyleChangePropertyCommand_GArchive)
  return target;
}

size_t CharacterStyleChangePropertyCommand_GArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.CharacterStyleChangePropertyCommand_GArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSWP.StorageActionCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_disable_character_style_promotion()) {
    // required bool disable_character_style_promotion = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CharacterStyleChangePropertyCommand_GArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.CharacterStyleChangePropertyCommand_GArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required .TSWP.StorageActionCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required bool disable_character_style_promotion = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Range range_list = 2;
  total_size += 1UL * this->_internal_range_list_size();
  for (const auto& msg : this->range_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSWPSOS.CharacterStylePropertyChangeSetArchive change_list = 4;
  total_size += 1UL * this->_internal_change_list_size();
  for (const auto& msg : this->change_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional bool range_list_undefined = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool change_list_undefined = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CharacterStyleChangePropertyCommand_GArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.CharacterStyleChangePropertyCommand_GArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CharacterStyleChangePropertyCommand_GArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CharacterStyleChangePropertyCommand_GArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.CharacterStyleChangePropertyCommand_GArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.CharacterStyleChangePropertyCommand_GArchive)
    MergeFrom(*source);
  }
}

void CharacterStyleChangePropertyCommand_GArchive::MergeFrom(const CharacterStyleChangePropertyCommand_GArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.CharacterStyleChangePropertyCommand_GArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  range_list_.MergeFrom(from.range_list_);
  change_list_.MergeFrom(from.change_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSWP::StorageActionCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      range_list_undefined_ = from.range_list_undefined_;
    }
    if (cached_has_bits & 0x00000004u) {
      change_list_undefined_ = from.change_list_undefined_;
    }
    if (cached_has_bits & 0x00000008u) {
      disable_character_style_promotion_ = from.disable_character_style_promotion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CharacterStyleChangePropertyCommand_GArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.CharacterStyleChangePropertyCommand_GArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterStyleChangePropertyCommand_GArchive::CopyFrom(const CharacterStyleChangePropertyCommand_GArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.CharacterStyleChangePropertyCommand_GArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterStyleChangePropertyCommand_GArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(range_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(change_list_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CharacterStyleChangePropertyCommand_GArchive::InternalSwap(CharacterStyleChangePropertyCommand_GArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  range_list_.InternalSwap(&other->range_list_);
  change_list_.InternalSwap(&other->change_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterStyleChangePropertyCommand_GArchive, disable_character_style_promotion_)
      + sizeof(CharacterStyleChangePropertyCommand_GArchive::disable_character_style_promotion_)
      - PROTOBUF_FIELD_OFFSET(CharacterStyleChangePropertyCommand_GArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterStyleChangePropertyCommand_GArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[45]);
}

// ===================================================================

class ParagraphStyleChangePropertyCommand_GArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ParagraphStyleChangePropertyCommand_GArchive>()._has_bits_);
  static const ::TSWP::StorageActionCommandArchive& super(const ParagraphStyleChangePropertyCommand_GArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_list_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_change_list_undefined(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::StorageActionCommandArchive&
ParagraphStyleChangePropertyCommand_GArchive::_Internal::super(const ParagraphStyleChangePropertyCommand_GArchive* msg) {
  return *msg->super_;
}
void ParagraphStyleChangePropertyCommand_GArchive::clear_range_list() {
  range_list_.Clear();
}
void ParagraphStyleChangePropertyCommand_GArchive::clear_change_list() {
  change_list_.Clear();
}
ParagraphStyleChangePropertyCommand_GArchive::ParagraphStyleChangePropertyCommand_GArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  range_list_(arena),
  change_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSWP.ParagraphStyleChangePropertyCommand_GArchive)
}
ParagraphStyleChangePropertyCommand_GArchive::ParagraphStyleChangePropertyCommand_GArchive(const ParagraphStyleChangePropertyCommand_GArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      range_list_(from.range_list_),
      change_list_(from.change_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSWP::StorageActionCommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&range_list_undefined_, &from.range_list_undefined_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_list_undefined_) -
    reinterpret_cast<char*>(&range_list_undefined_)) + sizeof(change_list_undefined_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ParagraphStyleChangePropertyCommand_GArchive)
}

void ParagraphStyleChangePropertyCommand_GArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&change_list_undefined_) -
    reinterpret_cast<char*>(&super_)) + sizeof(change_list_undefined_));
}

ParagraphStyleChangePropertyCommand_GArchive::~ParagraphStyleChangePropertyCommand_GArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ParagraphStyleChangePropertyCommand_GArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParagraphStyleChangePropertyCommand_GArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ParagraphStyleChangePropertyCommand_GArchive::ArenaDtor(void* object) {
  ParagraphStyleChangePropertyCommand_GArchive* _this = reinterpret_cast< ParagraphStyleChangePropertyCommand_GArchive* >(object);
  (void)_this;
}
void ParagraphStyleChangePropertyCommand_GArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParagraphStyleChangePropertyCommand_GArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParagraphStyleChangePropertyCommand_GArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ParagraphStyleChangePropertyCommand_GArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_list_.Clear();
  change_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  ::memset(&range_list_undefined_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_list_undefined_) -
      reinterpret_cast<char*>(&range_list_undefined_)) + sizeof(change_list_undefined_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParagraphStyleChangePropertyCommand_GArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.StorageActionCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Range range_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_range_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool range_list_undefined = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_range_list_undefined(&has_bits);
          range_list_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSWPSOS.ParagraphStylePropertyChangeSetArchive change_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_change_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool change_list_undefined = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_change_list_undefined(&has_bits);
          change_list_undefined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParagraphStyleChangePropertyCommand_GArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ParagraphStyleChangePropertyCommand_GArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSWP.StorageActionCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.Range range_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_range_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_range_list(i), target, stream);
  }

  // optional bool range_list_undefined = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_range_list_undefined(), target);
  }

  // repeated .TSWPSOS.ParagraphStylePropertyChangeSetArchive change_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_change_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_change_list(i), target, stream);
  }

  // optional bool change_list_undefined = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_change_list_undefined(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ParagraphStyleChangePropertyCommand_GArchive)
  return target;
}

size_t ParagraphStyleChangePropertyCommand_GArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ParagraphStyleChangePropertyCommand_GArchive)
  size_t total_size = 0;

  // required .TSWP.StorageActionCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Range range_list = 2;
  total_size += 1UL * this->_internal_range_list_size();
  for (const auto& msg : this->range_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSWPSOS.ParagraphStylePropertyChangeSetArchive change_list = 4;
  total_size += 1UL * this->_internal_change_list_size();
  for (const auto& msg : this->change_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional bool range_list_undefined = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool change_list_undefined = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParagraphStyleChangePropertyCommand_GArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSWP.ParagraphStyleChangePropertyCommand_GArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ParagraphStyleChangePropertyCommand_GArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParagraphStyleChangePropertyCommand_GArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSWP.ParagraphStyleChangePropertyCommand_GArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSWP.ParagraphStyleChangePropertyCommand_GArchive)
    MergeFrom(*source);
  }
}

void ParagraphStyleChangePropertyCommand_GArchive::MergeFrom(const ParagraphStyleChangePropertyCommand_GArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ParagraphStyleChangePropertyCommand_GArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  range_list_.MergeFrom(from.range_list_);
  change_list_.MergeFrom(from.change_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSWP::StorageActionCommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      range_list_undefined_ = from.range_list_undefined_;
    }
    if (cached_has_bits & 0x00000004u) {
      change_list_undefined_ = from.change_list_undefined_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParagraphStyleChangePropertyCommand_GArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSWP.ParagraphStyleChangePropertyCommand_GArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParagraphStyleChangePropertyCommand_GArchive::CopyFrom(const ParagraphStyleChangePropertyCommand_GArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ParagraphStyleChangePropertyCommand_GArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParagraphStyleChangePropertyCommand_GArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(range_list_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(change_list_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ParagraphStyleChangePropertyCommand_GArchive::InternalSwap(ParagraphStyleChangePropertyCommand_GArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  range_list_.InternalSwap(&other->range_list_);
  change_list_.InternalSwap(&other->change_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParagraphStyleChangePropertyCommand_GArchive, change_list_undefined_)
      + sizeof(ParagraphStyleChangePropertyCommand_GArchive::change_list_undefined_)
      - PROTOBUF_FIELD_OFFSET(ParagraphStyleChangePropertyCommand_GArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParagraphStyleChangePropertyCommand_GArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSWPCommandArchives_2eproto_getter, &descriptor_table_TSWPCommandArchives_2eproto_once,
      file_level_metadata_TSWPCommandArchives_2eproto[46]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSWP
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSWP::DummyCommandArchive* Arena::CreateMaybeMessage< ::TSWP::DummyCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::DummyCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TextCommandArchive* Arena::CreateMaybeMessage< ::TSWP::TextCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TextCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::StorageActionCommandArchive* Arena::CreateMaybeMessage< ::TSWP::StorageActionCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::StorageActionCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::SetColumnStyleCommandArchive* Arena::CreateMaybeMessage< ::TSWP::SetColumnStyleCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::SetColumnStyleCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ReplaceAllUsesOfStyleCommandArchive* Arena::CreateMaybeMessage< ::TSWP::ReplaceAllUsesOfStyleCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ReplaceAllUsesOfStyleCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::InsertColumnsCommandArchive* Arena::CreateMaybeMessage< ::TSWP::InsertColumnsCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::InsertColumnsCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::InsertRowsCommandArchive* Arena::CreateMaybeMessage< ::TSWP::InsertRowsCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::InsertRowsCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::RemoveColumnsCommandArchive* Arena::CreateMaybeMessage< ::TSWP::RemoveColumnsCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::RemoveColumnsCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::RemoveRowsCommandArchive* Arena::CreateMaybeMessage< ::TSWP::RemoveRowsCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::RemoveRowsCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::MergeCellsCommandArchive* Arena::CreateMaybeMessage< ::TSWP::MergeCellsCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::MergeCellsCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ApplyPlaceholderTextCommandArchive* Arena::CreateMaybeMessage< ::TSWP::ApplyPlaceholderTextCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ApplyPlaceholderTextCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UpdateDateTimeFieldCommandArchive* Arena::CreateMaybeMessage< ::TSWP::UpdateDateTimeFieldCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UpdateDateTimeFieldCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ApplyRubyTextCommandArchive* Arena::CreateMaybeMessage< ::TSWP::ApplyRubyTextCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ApplyRubyTextCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ModifyRubyTextCommandArchive* Arena::CreateMaybeMessage< ::TSWP::ModifyRubyTextCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ModifyRubyTextCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ModifyTOCSettingsBaseCommandArchive* Arena::CreateMaybeMessage< ::TSWP::ModifyTOCSettingsBaseCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ModifyTOCSettingsBaseCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ModifyTOCSettingsForTOCInfoCommandArchive* Arena::CreateMaybeMessage< ::TSWP::ModifyTOCSettingsForTOCInfoCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ModifyTOCSettingsForTOCInfoCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ModifyTOCSettingsPresetForThemeCommandArchive* Arena::CreateMaybeMessage< ::TSWP::ModifyTOCSettingsPresetForThemeCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ModifyTOCSettingsPresetForThemeCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::AnchorAttachmentCommandArchive* Arena::CreateMaybeMessage< ::TSWP::AnchorAttachmentCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::AnchorAttachmentCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TextApplyThemeCommandArchive* Arena::CreateMaybeMessage< ::TSWP::TextApplyThemeCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TextApplyThemeCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::MoveColumnsCommandArchive* Arena::CreateMaybeMessage< ::TSWP::MoveColumnsCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::MoveColumnsCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::MoveRowsCommandArchive* Arena::CreateMaybeMessage< ::TSWP::MoveRowsCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::MoveRowsCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ShapeApplyPresetCommandArchive* Arena::CreateMaybeMessage< ::TSWP::ShapeApplyPresetCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ShapeApplyPresetCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::StyleBaseCommandArchive* Arena::CreateMaybeMessage< ::TSWP::StyleBaseCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::StyleBaseCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::StyleCreateCommandArchive* Arena::CreateMaybeMessage< ::TSWP::StyleCreateCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::StyleCreateCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::StyleRenameCommandArchive* Arena::CreateMaybeMessage< ::TSWP::StyleRenameCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::StyleRenameCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::StyleUpdateCommandArchive* Arena::CreateMaybeMessage< ::TSWP::StyleUpdateCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::StyleUpdateCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::StyleDeleteCommandArchive* Arena::CreateMaybeMessage< ::TSWP::StyleDeleteCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::StyleDeleteCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::StyleReorderCommandArchive* Arena::CreateMaybeMessage< ::TSWP::StyleReorderCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::StyleReorderCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::StyleUpdatePropertyMapCommandArchive* Arena::CreateMaybeMessage< ::TSWP::StyleUpdatePropertyMapCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::StyleUpdatePropertyMapCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ShapeStyleSetValueCommandArchive* Arena::CreateMaybeMessage< ::TSWP::ShapeStyleSetValueCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ShapeStyleSetValueCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::SelectionTransformerArchive* Arena::CreateMaybeMessage< ::TSWP::SelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::SelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::PencilAnnotationSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TSWP::PencilAnnotationSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::PencilAnnotationSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ShapeSelectionTransformerArchive* Arena::CreateMaybeMessage< ::TSWP::ShapeSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ShapeSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ShapeContentDescription* Arena::CreateMaybeMessage< ::TSWP::ShapeContentDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ShapeContentDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ObjectPropertyArchive* Arena::CreateMaybeMessage< ::TSWP::ObjectPropertyArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ObjectPropertyArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::SetObjectPropertiesCommandArchive* Arena::CreateMaybeMessage< ::TSWP::SetObjectPropertiesCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::SetObjectPropertiesCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UpdateFlowInfoCommandArchive* Arena::CreateMaybeMessage< ::TSWP::UpdateFlowInfoCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UpdateFlowInfoCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::AddFlowInfoCommandArchive* Arena::CreateMaybeMessage< ::TSWP::AddFlowInfoCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::AddFlowInfoCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::RemoveFlowInfoCommandArchive* Arena::CreateMaybeMessage< ::TSWP::RemoveFlowInfoCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::RemoveFlowInfoCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TextCommentReplyCommandArchive* Arena::CreateMaybeMessage< ::TSWP::TextCommentReplyCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TextCommentReplyCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs* Arena::CreateMaybeMessage< ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ContainedObjectsCommandArchive_AddBehaviorArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs* Arena::CreateMaybeMessage< ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ContainedObjectsCommandArchive_RemoveBehaviorArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs* Arena::CreateMaybeMessage< ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ContainedObjectsCommandArchive_RearrangeBehaviorArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ContainedObjectsCommandArchive* Arena::CreateMaybeMessage< ::TSWP::ContainedObjectsCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ContainedObjectsCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::EquationInfoGeometryCommandArchive* Arena::CreateMaybeMessage< ::TSWP::EquationInfoGeometryCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::EquationInfoGeometryCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::CharacterStyleChangePropertyCommand_GArchive* Arena::CreateMaybeMessage< ::TSWP::CharacterStyleChangePropertyCommand_GArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::CharacterStyleChangePropertyCommand_GArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ParagraphStyleChangePropertyCommand_GArchive* Arena::CreateMaybeMessage< ::TSWP::ParagraphStyleChangePropertyCommand_GArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ParagraphStyleChangePropertyCommand_GArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
