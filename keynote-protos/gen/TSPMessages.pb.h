// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSPMessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSPMessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSPMessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSPMessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSPMessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[43]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSPMessages_2eproto;
namespace TSP {
class CFUUIDArchive;
struct CFUUIDArchiveDefaultTypeInternal;
extern CFUUIDArchiveDefaultTypeInternal _CFUUIDArchive_default_instance_;
class Color;
struct ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class DataAttributes;
struct DataAttributesDefaultTypeInternal;
extern DataAttributesDefaultTypeInternal _DataAttributes_default_instance_;
class DataReference;
struct DataReferenceDefaultTypeInternal;
extern DataReferenceDefaultTypeInternal _DataReference_default_instance_;
class Date;
struct DateDefaultTypeInternal;
extern DateDefaultTypeInternal _Date_default_instance_;
class IndexSet;
struct IndexSetDefaultTypeInternal;
extern IndexSetDefaultTypeInternal _IndexSet_default_instance_;
class LargeArray;
struct LargeArrayDefaultTypeInternal;
extern LargeArrayDefaultTypeInternal _LargeArray_default_instance_;
class LargeArraySegment;
struct LargeArraySegmentDefaultTypeInternal;
extern LargeArraySegmentDefaultTypeInternal _LargeArraySegment_default_instance_;
class LargeLazyObjectArray;
struct LargeLazyObjectArrayDefaultTypeInternal;
extern LargeLazyObjectArrayDefaultTypeInternal _LargeLazyObjectArray_default_instance_;
class LargeLazyObjectArraySegment;
struct LargeLazyObjectArraySegmentDefaultTypeInternal;
extern LargeLazyObjectArraySegmentDefaultTypeInternal _LargeLazyObjectArraySegment_default_instance_;
class LargeNumberArray;
struct LargeNumberArrayDefaultTypeInternal;
extern LargeNumberArrayDefaultTypeInternal _LargeNumberArray_default_instance_;
class LargeNumberArraySegment;
struct LargeNumberArraySegmentDefaultTypeInternal;
extern LargeNumberArraySegmentDefaultTypeInternal _LargeNumberArraySegment_default_instance_;
class LargeObjectArray;
struct LargeObjectArrayDefaultTypeInternal;
extern LargeObjectArrayDefaultTypeInternal _LargeObjectArray_default_instance_;
class LargeObjectArraySegment;
struct LargeObjectArraySegmentDefaultTypeInternal;
extern LargeObjectArraySegmentDefaultTypeInternal _LargeObjectArraySegment_default_instance_;
class LargeStringArray;
struct LargeStringArrayDefaultTypeInternal;
extern LargeStringArrayDefaultTypeInternal _LargeStringArray_default_instance_;
class LargeStringArraySegment;
struct LargeStringArraySegmentDefaultTypeInternal;
extern LargeStringArraySegmentDefaultTypeInternal _LargeStringArraySegment_default_instance_;
class LargeStringArraySegment_OptionalElement;
struct LargeStringArraySegment_OptionalElementDefaultTypeInternal;
extern LargeStringArraySegment_OptionalElementDefaultTypeInternal _LargeStringArraySegment_OptionalElement_default_instance_;
class LargeUUIDArray;
struct LargeUUIDArrayDefaultTypeInternal;
extern LargeUUIDArrayDefaultTypeInternal _LargeUUIDArray_default_instance_;
class LargeUUIDArraySegment;
struct LargeUUIDArraySegmentDefaultTypeInternal;
extern LargeUUIDArraySegmentDefaultTypeInternal _LargeUUIDArraySegment_default_instance_;
class ObjectCollection;
struct ObjectCollectionDefaultTypeInternal;
extern ObjectCollectionDefaultTypeInternal _ObjectCollection_default_instance_;
class ObjectContainer;
struct ObjectContainerDefaultTypeInternal;
extern ObjectContainerDefaultTypeInternal _ObjectContainer_default_instance_;
class PasteboardObject;
struct PasteboardObjectDefaultTypeInternal;
extern PasteboardObjectDefaultTypeInternal _PasteboardObject_default_instance_;
class Path;
struct PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class Path_Element;
struct Path_ElementDefaultTypeInternal;
extern Path_ElementDefaultTypeInternal _Path_Element_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Range;
struct RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
class Reference;
struct ReferenceDefaultTypeInternal;
extern ReferenceDefaultTypeInternal _Reference_default_instance_;
class ReferenceDictionary;
struct ReferenceDictionaryDefaultTypeInternal;
extern ReferenceDictionaryDefaultTypeInternal _ReferenceDictionary_default_instance_;
class ReferenceDictionary_Entry;
struct ReferenceDictionary_EntryDefaultTypeInternal;
extern ReferenceDictionary_EntryDefaultTypeInternal _ReferenceDictionary_Entry_default_instance_;
class Size;
struct SizeDefaultTypeInternal;
extern SizeDefaultTypeInternal _Size_default_instance_;
class SparseReferenceArray;
struct SparseReferenceArrayDefaultTypeInternal;
extern SparseReferenceArrayDefaultTypeInternal _SparseReferenceArray_default_instance_;
class SparseReferenceArray_Entry;
struct SparseReferenceArray_EntryDefaultTypeInternal;
extern SparseReferenceArray_EntryDefaultTypeInternal _SparseReferenceArray_Entry_default_instance_;
class SparseUUIDArray;
struct SparseUUIDArrayDefaultTypeInternal;
extern SparseUUIDArrayDefaultTypeInternal _SparseUUIDArray_default_instance_;
class SparseUUIDArray_Entry;
struct SparseUUIDArray_EntryDefaultTypeInternal;
extern SparseUUIDArray_EntryDefaultTypeInternal _SparseUUIDArray_Entry_default_instance_;
class SparseUUIDPathArray;
struct SparseUUIDPathArrayDefaultTypeInternal;
extern SparseUUIDPathArrayDefaultTypeInternal _SparseUUIDPathArray_default_instance_;
class SparseUUIDPathArray_Entry;
struct SparseUUIDPathArray_EntryDefaultTypeInternal;
extern SparseUUIDPathArray_EntryDefaultTypeInternal _SparseUUIDPathArray_Entry_default_instance_;
class UUID;
struct UUIDDefaultTypeInternal;
extern UUIDDefaultTypeInternal _UUID_default_instance_;
class UUIDCoordArchive;
struct UUIDCoordArchiveDefaultTypeInternal;
extern UUIDCoordArchiveDefaultTypeInternal _UUIDCoordArchive_default_instance_;
class UUIDMapArchive;
struct UUIDMapArchiveDefaultTypeInternal;
extern UUIDMapArchiveDefaultTypeInternal _UUIDMapArchive_default_instance_;
class UUIDMultiMapArchive;
struct UUIDMultiMapArchiveDefaultTypeInternal;
extern UUIDMultiMapArchiveDefaultTypeInternal _UUIDMultiMapArchive_default_instance_;
class UUIDPath;
struct UUIDPathDefaultTypeInternal;
extern UUIDPathDefaultTypeInternal _UUIDPath_default_instance_;
class UUIDRectArchive;
struct UUIDRectArchiveDefaultTypeInternal;
extern UUIDRectArchiveDefaultTypeInternal _UUIDRectArchive_default_instance_;
class UUIDSetArchive;
struct UUIDSetArchiveDefaultTypeInternal;
extern UUIDSetArchiveDefaultTypeInternal _UUIDSetArchive_default_instance_;
}  // namespace TSP
PROTOBUF_NAMESPACE_OPEN
template<> ::TSP::CFUUIDArchive* Arena::CreateMaybeMessage<::TSP::CFUUIDArchive>(Arena*);
template<> ::TSP::Color* Arena::CreateMaybeMessage<::TSP::Color>(Arena*);
template<> ::TSP::DataAttributes* Arena::CreateMaybeMessage<::TSP::DataAttributes>(Arena*);
template<> ::TSP::DataReference* Arena::CreateMaybeMessage<::TSP::DataReference>(Arena*);
template<> ::TSP::Date* Arena::CreateMaybeMessage<::TSP::Date>(Arena*);
template<> ::TSP::IndexSet* Arena::CreateMaybeMessage<::TSP::IndexSet>(Arena*);
template<> ::TSP::LargeArray* Arena::CreateMaybeMessage<::TSP::LargeArray>(Arena*);
template<> ::TSP::LargeArraySegment* Arena::CreateMaybeMessage<::TSP::LargeArraySegment>(Arena*);
template<> ::TSP::LargeLazyObjectArray* Arena::CreateMaybeMessage<::TSP::LargeLazyObjectArray>(Arena*);
template<> ::TSP::LargeLazyObjectArraySegment* Arena::CreateMaybeMessage<::TSP::LargeLazyObjectArraySegment>(Arena*);
template<> ::TSP::LargeNumberArray* Arena::CreateMaybeMessage<::TSP::LargeNumberArray>(Arena*);
template<> ::TSP::LargeNumberArraySegment* Arena::CreateMaybeMessage<::TSP::LargeNumberArraySegment>(Arena*);
template<> ::TSP::LargeObjectArray* Arena::CreateMaybeMessage<::TSP::LargeObjectArray>(Arena*);
template<> ::TSP::LargeObjectArraySegment* Arena::CreateMaybeMessage<::TSP::LargeObjectArraySegment>(Arena*);
template<> ::TSP::LargeStringArray* Arena::CreateMaybeMessage<::TSP::LargeStringArray>(Arena*);
template<> ::TSP::LargeStringArraySegment* Arena::CreateMaybeMessage<::TSP::LargeStringArraySegment>(Arena*);
template<> ::TSP::LargeStringArraySegment_OptionalElement* Arena::CreateMaybeMessage<::TSP::LargeStringArraySegment_OptionalElement>(Arena*);
template<> ::TSP::LargeUUIDArray* Arena::CreateMaybeMessage<::TSP::LargeUUIDArray>(Arena*);
template<> ::TSP::LargeUUIDArraySegment* Arena::CreateMaybeMessage<::TSP::LargeUUIDArraySegment>(Arena*);
template<> ::TSP::ObjectCollection* Arena::CreateMaybeMessage<::TSP::ObjectCollection>(Arena*);
template<> ::TSP::ObjectContainer* Arena::CreateMaybeMessage<::TSP::ObjectContainer>(Arena*);
template<> ::TSP::PasteboardObject* Arena::CreateMaybeMessage<::TSP::PasteboardObject>(Arena*);
template<> ::TSP::Path* Arena::CreateMaybeMessage<::TSP::Path>(Arena*);
template<> ::TSP::Path_Element* Arena::CreateMaybeMessage<::TSP::Path_Element>(Arena*);
template<> ::TSP::Point* Arena::CreateMaybeMessage<::TSP::Point>(Arena*);
template<> ::TSP::Range* Arena::CreateMaybeMessage<::TSP::Range>(Arena*);
template<> ::TSP::Reference* Arena::CreateMaybeMessage<::TSP::Reference>(Arena*);
template<> ::TSP::ReferenceDictionary* Arena::CreateMaybeMessage<::TSP::ReferenceDictionary>(Arena*);
template<> ::TSP::ReferenceDictionary_Entry* Arena::CreateMaybeMessage<::TSP::ReferenceDictionary_Entry>(Arena*);
template<> ::TSP::Size* Arena::CreateMaybeMessage<::TSP::Size>(Arena*);
template<> ::TSP::SparseReferenceArray* Arena::CreateMaybeMessage<::TSP::SparseReferenceArray>(Arena*);
template<> ::TSP::SparseReferenceArray_Entry* Arena::CreateMaybeMessage<::TSP::SparseReferenceArray_Entry>(Arena*);
template<> ::TSP::SparseUUIDArray* Arena::CreateMaybeMessage<::TSP::SparseUUIDArray>(Arena*);
template<> ::TSP::SparseUUIDArray_Entry* Arena::CreateMaybeMessage<::TSP::SparseUUIDArray_Entry>(Arena*);
template<> ::TSP::SparseUUIDPathArray* Arena::CreateMaybeMessage<::TSP::SparseUUIDPathArray>(Arena*);
template<> ::TSP::SparseUUIDPathArray_Entry* Arena::CreateMaybeMessage<::TSP::SparseUUIDPathArray_Entry>(Arena*);
template<> ::TSP::UUID* Arena::CreateMaybeMessage<::TSP::UUID>(Arena*);
template<> ::TSP::UUIDCoordArchive* Arena::CreateMaybeMessage<::TSP::UUIDCoordArchive>(Arena*);
template<> ::TSP::UUIDMapArchive* Arena::CreateMaybeMessage<::TSP::UUIDMapArchive>(Arena*);
template<> ::TSP::UUIDMultiMapArchive* Arena::CreateMaybeMessage<::TSP::UUIDMultiMapArchive>(Arena*);
template<> ::TSP::UUIDPath* Arena::CreateMaybeMessage<::TSP::UUIDPath>(Arena*);
template<> ::TSP::UUIDRectArchive* Arena::CreateMaybeMessage<::TSP::UUIDRectArchive>(Arena*);
template<> ::TSP::UUIDSetArchive* Arena::CreateMaybeMessage<::TSP::UUIDSetArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSP {

enum Color_ColorModel : int {
  Color_ColorModel_rgb = 1,
  Color_ColorModel_cmyk = 2,
  Color_ColorModel_white = 3
};
bool Color_ColorModel_IsValid(int value);
constexpr Color_ColorModel Color_ColorModel_ColorModel_MIN = Color_ColorModel_rgb;
constexpr Color_ColorModel Color_ColorModel_ColorModel_MAX = Color_ColorModel_white;
constexpr int Color_ColorModel_ColorModel_ARRAYSIZE = Color_ColorModel_ColorModel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_ColorModel_descriptor();
template<typename T>
inline const std::string& Color_ColorModel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Color_ColorModel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Color_ColorModel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Color_ColorModel_descriptor(), enum_t_value);
}
inline bool Color_ColorModel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Color_ColorModel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Color_ColorModel>(
    Color_ColorModel_descriptor(), name, value);
}
enum Color_RGBColorSpace : int {
  Color_RGBColorSpace_srgb = 1,
  Color_RGBColorSpace_p3 = 2
};
bool Color_RGBColorSpace_IsValid(int value);
constexpr Color_RGBColorSpace Color_RGBColorSpace_RGBColorSpace_MIN = Color_RGBColorSpace_srgb;
constexpr Color_RGBColorSpace Color_RGBColorSpace_RGBColorSpace_MAX = Color_RGBColorSpace_p3;
constexpr int Color_RGBColorSpace_RGBColorSpace_ARRAYSIZE = Color_RGBColorSpace_RGBColorSpace_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_RGBColorSpace_descriptor();
template<typename T>
inline const std::string& Color_RGBColorSpace_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Color_RGBColorSpace>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Color_RGBColorSpace_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Color_RGBColorSpace_descriptor(), enum_t_value);
}
inline bool Color_RGBColorSpace_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Color_RGBColorSpace* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Color_RGBColorSpace>(
    Color_RGBColorSpace_descriptor(), name, value);
}
enum Path_ElementType : int {
  Path_ElementType_moveTo = 1,
  Path_ElementType_lineTo = 2,
  Path_ElementType_quadCurveTo = 3,
  Path_ElementType_curveTo = 4,
  Path_ElementType_closeSubpath = 5
};
bool Path_ElementType_IsValid(int value);
constexpr Path_ElementType Path_ElementType_ElementType_MIN = Path_ElementType_moveTo;
constexpr Path_ElementType Path_ElementType_ElementType_MAX = Path_ElementType_closeSubpath;
constexpr int Path_ElementType_ElementType_ARRAYSIZE = Path_ElementType_ElementType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Path_ElementType_descriptor();
template<typename T>
inline const std::string& Path_ElementType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Path_ElementType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Path_ElementType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Path_ElementType_descriptor(), enum_t_value);
}
inline bool Path_ElementType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Path_ElementType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Path_ElementType>(
    Path_ElementType_descriptor(), name, value);
}
enum DataUploadStatus : int {
  DataUploadStatus_Pending = 0,
  DataUploadStatus_Reserved = 1,
  DataUploadStatus_UnableToReserve = 2,
  DataUploadStatus_Corrupted = 3,
  DataUploadStatus_DocumentMayExceedDocumentSizeLimit = 4,
  DataUploadStatus_Expired = 5
};
bool DataUploadStatus_IsValid(int value);
constexpr DataUploadStatus DataUploadStatus_MIN = DataUploadStatus_Pending;
constexpr DataUploadStatus DataUploadStatus_MAX = DataUploadStatus_Expired;
constexpr int DataUploadStatus_ARRAYSIZE = DataUploadStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataUploadStatus_descriptor();
template<typename T>
inline const std::string& DataUploadStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataUploadStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataUploadStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataUploadStatus_descriptor(), enum_t_value);
}
inline bool DataUploadStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataUploadStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataUploadStatus>(
    DataUploadStatus_descriptor(), name, value);
}
// ===================================================================

class Reference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.Reference) */ {
 public:
  inline Reference() : Reference(nullptr) {}
  ~Reference() override;
  explicit constexpr Reference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Reference(const Reference& from);
  Reference(Reference&& from) noexcept
    : Reference() {
    *this = ::std::move(from);
  }

  inline Reference& operator=(const Reference& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reference& operator=(Reference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Reference& default_instance() {
    return *internal_default_instance();
  }
  static inline const Reference* internal_default_instance() {
    return reinterpret_cast<const Reference*>(
               &_Reference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Reference& a, Reference& b) {
    a.Swap(&b);
  }
  inline void Swap(Reference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reference* New() const final {
    return CreateMaybeMessage<Reference>(nullptr);
  }

  Reference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reference& from);
  void MergeFrom(const Reference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.Reference";
  }
  protected:
  explicit Reference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kDeprecatedTypeFieldNumber = 2,
    kDeprecatedIsExternalFieldNumber = 3,
  };
  // required uint64 identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  ::PROTOBUF_NAMESPACE_ID::uint64 identifier() const;
  void set_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_identifier() const;
  void _internal_set_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 deprecated_type = 2;
  bool has_deprecated_type() const;
  private:
  bool _internal_has_deprecated_type() const;
  public:
  void clear_deprecated_type();
  ::PROTOBUF_NAMESPACE_ID::int32 deprecated_type() const;
  void set_deprecated_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_deprecated_type() const;
  void _internal_set_deprecated_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool deprecated_is_external = 3;
  bool has_deprecated_is_external() const;
  private:
  bool _internal_has_deprecated_is_external() const;
  public:
  void clear_deprecated_is_external();
  bool deprecated_is_external() const;
  void set_deprecated_is_external(bool value);
  private:
  bool _internal_deprecated_is_external() const;
  void _internal_set_deprecated_is_external(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.Reference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 identifier_;
  ::PROTOBUF_NAMESPACE_ID::int32 deprecated_type_;
  bool deprecated_is_external_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class DataReference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.DataReference) */ {
 public:
  inline DataReference() : DataReference(nullptr) {}
  ~DataReference() override;
  explicit constexpr DataReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataReference(const DataReference& from);
  DataReference(DataReference&& from) noexcept
    : DataReference() {
    *this = ::std::move(from);
  }

  inline DataReference& operator=(const DataReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataReference& operator=(DataReference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataReference* internal_default_instance() {
    return reinterpret_cast<const DataReference*>(
               &_DataReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataReference& a, DataReference& b) {
    a.Swap(&b);
  }
  inline void Swap(DataReference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataReference* New() const final {
    return CreateMaybeMessage<DataReference>(nullptr);
  }

  DataReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataReference& from);
  void MergeFrom(const DataReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.DataReference";
  }
  protected:
  explicit DataReference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
  };
  // required uint64 identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  ::PROTOBUF_NAMESPACE_ID::uint64 identifier() const;
  void set_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_identifier() const;
  void _internal_set_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.DataReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 identifier_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class SparseReferenceArray_Entry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.SparseReferenceArray.Entry) */ {
 public:
  inline SparseReferenceArray_Entry() : SparseReferenceArray_Entry(nullptr) {}
  ~SparseReferenceArray_Entry() override;
  explicit constexpr SparseReferenceArray_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseReferenceArray_Entry(const SparseReferenceArray_Entry& from);
  SparseReferenceArray_Entry(SparseReferenceArray_Entry&& from) noexcept
    : SparseReferenceArray_Entry() {
    *this = ::std::move(from);
  }

  inline SparseReferenceArray_Entry& operator=(const SparseReferenceArray_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseReferenceArray_Entry& operator=(SparseReferenceArray_Entry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparseReferenceArray_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseReferenceArray_Entry* internal_default_instance() {
    return reinterpret_cast<const SparseReferenceArray_Entry*>(
               &_SparseReferenceArray_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SparseReferenceArray_Entry& a, SparseReferenceArray_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseReferenceArray_Entry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseReferenceArray_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SparseReferenceArray_Entry* New() const final {
    return CreateMaybeMessage<SparseReferenceArray_Entry>(nullptr);
  }

  SparseReferenceArray_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SparseReferenceArray_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SparseReferenceArray_Entry& from);
  void MergeFrom(const SparseReferenceArray_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseReferenceArray_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.SparseReferenceArray.Entry";
  }
  protected:
  explicit SparseReferenceArray_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // required .TSP.Reference reference = 2;
  bool has_reference() const;
  private:
  bool _internal_has_reference() const;
  public:
  void clear_reference();
  const ::TSP::Reference& reference() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_reference();
  ::TSP::Reference* mutable_reference();
  void set_allocated_reference(::TSP::Reference* reference);
  private:
  const ::TSP::Reference& _internal_reference() const;
  ::TSP::Reference* _internal_mutable_reference();
  public:
  void unsafe_arena_set_allocated_reference(
      ::TSP::Reference* reference);
  ::TSP::Reference* unsafe_arena_release_reference();

  // required uint32 index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.SparseReferenceArray.Entry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* reference_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class SparseReferenceArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.SparseReferenceArray) */ {
 public:
  inline SparseReferenceArray() : SparseReferenceArray(nullptr) {}
  ~SparseReferenceArray() override;
  explicit constexpr SparseReferenceArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseReferenceArray(const SparseReferenceArray& from);
  SparseReferenceArray(SparseReferenceArray&& from) noexcept
    : SparseReferenceArray() {
    *this = ::std::move(from);
  }

  inline SparseReferenceArray& operator=(const SparseReferenceArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseReferenceArray& operator=(SparseReferenceArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparseReferenceArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseReferenceArray* internal_default_instance() {
    return reinterpret_cast<const SparseReferenceArray*>(
               &_SparseReferenceArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SparseReferenceArray& a, SparseReferenceArray& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseReferenceArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseReferenceArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SparseReferenceArray* New() const final {
    return CreateMaybeMessage<SparseReferenceArray>(nullptr);
  }

  SparseReferenceArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SparseReferenceArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SparseReferenceArray& from);
  void MergeFrom(const SparseReferenceArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseReferenceArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.SparseReferenceArray";
  }
  protected:
  explicit SparseReferenceArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SparseReferenceArray_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kCountFieldNumber = 1,
  };
  // repeated .TSP.SparseReferenceArray.Entry entries = 2;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::TSP::SparseReferenceArray_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::SparseReferenceArray_Entry >*
      mutable_entries();
  private:
  const ::TSP::SparseReferenceArray_Entry& _internal_entries(int index) const;
  ::TSP::SparseReferenceArray_Entry* _internal_add_entries();
  public:
  const ::TSP::SparseReferenceArray_Entry& entries(int index) const;
  ::TSP::SparseReferenceArray_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::SparseReferenceArray_Entry >&
      entries() const;

  // required uint32 count = 1;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.SparseReferenceArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::SparseReferenceArray_Entry > entries_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit constexpr Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.Point)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class Size PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.Size) */ {
 public:
  inline Size() : Size(nullptr) {}
  ~Size() override;
  explicit constexpr Size(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Size(const Size& from);
  Size(Size&& from) noexcept
    : Size() {
    *this = ::std::move(from);
  }

  inline Size& operator=(const Size& from) {
    CopyFrom(from);
    return *this;
  }
  inline Size& operator=(Size&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Size& default_instance() {
    return *internal_default_instance();
  }
  static inline const Size* internal_default_instance() {
    return reinterpret_cast<const Size*>(
               &_Size_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Size& a, Size& b) {
    a.Swap(&b);
  }
  inline void Swap(Size* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Size* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Size* New() const final {
    return CreateMaybeMessage<Size>(nullptr);
  }

  Size* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Size>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Size& from);
  void MergeFrom(const Size& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Size* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.Size";
  }
  protected:
  explicit Size(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // required float width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // required float height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.Size)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float width_;
  float height_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class Range PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.Range) */ {
 public:
  inline Range() : Range(nullptr) {}
  ~Range() override;
  explicit constexpr Range(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Range(const Range& from);
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline Range& operator=(Range&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Range& default_instance() {
    return *internal_default_instance();
  }
  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }
  inline void Swap(Range* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Range* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Range* New() const final {
    return CreateMaybeMessage<Range>(nullptr);
  }

  Range* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Range>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Range* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.Range";
  }
  protected:
  explicit Range(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // required uint32 location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  ::PROTOBUF_NAMESPACE_ID::uint32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_location() const;
  void _internal_set_location(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 length = 2;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.Range)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 location_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class Date PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.Date) */ {
 public:
  inline Date() : Date(nullptr) {}
  ~Date() override;
  explicit constexpr Date(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Date(const Date& from);
  Date(Date&& from) noexcept
    : Date() {
    *this = ::std::move(from);
  }

  inline Date& operator=(const Date& from) {
    CopyFrom(from);
    return *this;
  }
  inline Date& operator=(Date&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Date& default_instance() {
    return *internal_default_instance();
  }
  static inline const Date* internal_default_instance() {
    return reinterpret_cast<const Date*>(
               &_Date_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Date& a, Date& b) {
    a.Swap(&b);
  }
  inline void Swap(Date* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Date* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Date* New() const final {
    return CreateMaybeMessage<Date>(nullptr);
  }

  Date* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Date>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Date& from);
  void MergeFrom(const Date& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Date* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.Date";
  }
  protected:
  explicit Date(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
  };
  // required double seconds = 1;
  bool has_seconds() const;
  private:
  bool _internal_has_seconds() const;
  public:
  void clear_seconds();
  double seconds() const;
  void set_seconds(double value);
  private:
  double _internal_seconds() const;
  void _internal_set_seconds(double value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.Date)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double seconds_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class IndexSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.IndexSet) */ {
 public:
  inline IndexSet() : IndexSet(nullptr) {}
  ~IndexSet() override;
  explicit constexpr IndexSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexSet(const IndexSet& from);
  IndexSet(IndexSet&& from) noexcept
    : IndexSet() {
    *this = ::std::move(from);
  }

  inline IndexSet& operator=(const IndexSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexSet& operator=(IndexSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexSet* internal_default_instance() {
    return reinterpret_cast<const IndexSet*>(
               &_IndexSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IndexSet& a, IndexSet& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexSet* New() const final {
    return CreateMaybeMessage<IndexSet>(nullptr);
  }

  IndexSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexSet& from);
  void MergeFrom(const IndexSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.IndexSet";
  }
  protected:
  explicit IndexSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangesFieldNumber = 1,
  };
  // repeated .TSP.Range ranges = 1;
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;
  public:
  void clear_ranges();
  ::TSP::Range* mutable_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >*
      mutable_ranges();
  private:
  const ::TSP::Range& _internal_ranges(int index) const;
  ::TSP::Range* _internal_add_ranges();
  public:
  const ::TSP::Range& ranges(int index) const;
  ::TSP::Range* add_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >&
      ranges() const;

  // @@protoc_insertion_point(class_scope:TSP.IndexSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range > ranges_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class Color PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  ~Color() override;
  explicit constexpr Color(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Color& default_instance() {
    return *internal_default_instance();
  }
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(nullptr);
  }

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Color_ColorModel ColorModel;
  static constexpr ColorModel rgb =
    Color_ColorModel_rgb;
  static constexpr ColorModel cmyk =
    Color_ColorModel_cmyk;
  static constexpr ColorModel white =
    Color_ColorModel_white;
  static inline bool ColorModel_IsValid(int value) {
    return Color_ColorModel_IsValid(value);
  }
  static constexpr ColorModel ColorModel_MIN =
    Color_ColorModel_ColorModel_MIN;
  static constexpr ColorModel ColorModel_MAX =
    Color_ColorModel_ColorModel_MAX;
  static constexpr int ColorModel_ARRAYSIZE =
    Color_ColorModel_ColorModel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ColorModel_descriptor() {
    return Color_ColorModel_descriptor();
  }
  template<typename T>
  static inline const std::string& ColorModel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ColorModel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ColorModel_Name.");
    return Color_ColorModel_Name(enum_t_value);
  }
  static inline bool ColorModel_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ColorModel* value) {
    return Color_ColorModel_Parse(name, value);
  }

  typedef Color_RGBColorSpace RGBColorSpace;
  static constexpr RGBColorSpace srgb =
    Color_RGBColorSpace_srgb;
  static constexpr RGBColorSpace p3 =
    Color_RGBColorSpace_p3;
  static inline bool RGBColorSpace_IsValid(int value) {
    return Color_RGBColorSpace_IsValid(value);
  }
  static constexpr RGBColorSpace RGBColorSpace_MIN =
    Color_RGBColorSpace_RGBColorSpace_MIN;
  static constexpr RGBColorSpace RGBColorSpace_MAX =
    Color_RGBColorSpace_RGBColorSpace_MAX;
  static constexpr int RGBColorSpace_ARRAYSIZE =
    Color_RGBColorSpace_RGBColorSpace_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RGBColorSpace_descriptor() {
    return Color_RGBColorSpace_descriptor();
  }
  template<typename T>
  static inline const std::string& RGBColorSpace_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RGBColorSpace>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RGBColorSpace_Name.");
    return Color_RGBColorSpace_Name(enum_t_value);
  }
  static inline bool RGBColorSpace_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RGBColorSpace* value) {
    return Color_RGBColorSpace_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 3,
    kGFieldNumber = 4,
    kBFieldNumber = 5,
    kCFieldNumber = 7,
    kMFieldNumber = 8,
    kYFieldNumber = 9,
    kKFieldNumber = 10,
    kWFieldNumber = 11,
    kRgbspaceFieldNumber = 12,
    kModelFieldNumber = 1,
    kAFieldNumber = 6,
  };
  // optional float r = 3;
  bool has_r() const;
  private:
  bool _internal_has_r() const;
  public:
  void clear_r();
  float r() const;
  void set_r(float value);
  private:
  float _internal_r() const;
  void _internal_set_r(float value);
  public:

  // optional float g = 4;
  bool has_g() const;
  private:
  bool _internal_has_g() const;
  public:
  void clear_g();
  float g() const;
  void set_g(float value);
  private:
  float _internal_g() const;
  void _internal_set_g(float value);
  public:

  // optional float b = 5;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  float b() const;
  void set_b(float value);
  private:
  float _internal_b() const;
  void _internal_set_b(float value);
  public:

  // optional float c = 7;
  bool has_c() const;
  private:
  bool _internal_has_c() const;
  public:
  void clear_c();
  float c() const;
  void set_c(float value);
  private:
  float _internal_c() const;
  void _internal_set_c(float value);
  public:

  // optional float m = 8;
  bool has_m() const;
  private:
  bool _internal_has_m() const;
  public:
  void clear_m();
  float m() const;
  void set_m(float value);
  private:
  float _internal_m() const;
  void _internal_set_m(float value);
  public:

  // optional float y = 9;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float k = 10;
  bool has_k() const;
  private:
  bool _internal_has_k() const;
  public:
  void clear_k();
  float k() const;
  void set_k(float value);
  private:
  float _internal_k() const;
  void _internal_set_k(float value);
  public:

  // optional float w = 11;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // optional .TSP.Color.RGBColorSpace rgbspace = 12;
  bool has_rgbspace() const;
  private:
  bool _internal_has_rgbspace() const;
  public:
  void clear_rgbspace();
  ::TSP::Color_RGBColorSpace rgbspace() const;
  void set_rgbspace(::TSP::Color_RGBColorSpace value);
  private:
  ::TSP::Color_RGBColorSpace _internal_rgbspace() const;
  void _internal_set_rgbspace(::TSP::Color_RGBColorSpace value);
  public:

  // required .TSP.Color.ColorModel model = 1;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  ::TSP::Color_ColorModel model() const;
  void set_model(::TSP::Color_ColorModel value);
  private:
  ::TSP::Color_ColorModel _internal_model() const;
  void _internal_set_model(::TSP::Color_ColorModel value);
  public:

  // optional float a = 6 [default = 1];
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float r_;
  float g_;
  float b_;
  float c_;
  float m_;
  float y_;
  float k_;
  float w_;
  int rgbspace_;
  int model_;
  float a_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class Path_Element PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.Path.Element) */ {
 public:
  inline Path_Element() : Path_Element(nullptr) {}
  ~Path_Element() override;
  explicit constexpr Path_Element(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Path_Element(const Path_Element& from);
  Path_Element(Path_Element&& from) noexcept
    : Path_Element() {
    *this = ::std::move(from);
  }

  inline Path_Element& operator=(const Path_Element& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path_Element& operator=(Path_Element&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Path_Element& default_instance() {
    return *internal_default_instance();
  }
  static inline const Path_Element* internal_default_instance() {
    return reinterpret_cast<const Path_Element*>(
               &_Path_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Path_Element& a, Path_Element& b) {
    a.Swap(&b);
  }
  inline void Swap(Path_Element* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Path_Element* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Path_Element* New() const final {
    return CreateMaybeMessage<Path_Element>(nullptr);
  }

  Path_Element* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Path_Element>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Path_Element& from);
  void MergeFrom(const Path_Element& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path_Element* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.Path.Element";
  }
  protected:
  explicit Path_Element(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .TSP.Point points = 2;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::TSP::Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Point >*
      mutable_points();
  private:
  const ::TSP::Point& _internal_points(int index) const;
  ::TSP::Point* _internal_add_points();
  public:
  const ::TSP::Point& points(int index) const;
  ::TSP::Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Point >&
      points() const;

  // required .TSP.Path.ElementType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::TSP::Path_ElementType type() const;
  void set_type(::TSP::Path_ElementType value);
  private:
  ::TSP::Path_ElementType _internal_type() const;
  void _internal_set_type(::TSP::Path_ElementType value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.Path.Element)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Point > points_;
  int type_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class Path PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.Path) */ {
 public:
  inline Path() : Path(nullptr) {}
  ~Path() override;
  explicit constexpr Path(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Path& default_instance() {
    return *internal_default_instance();
  }
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Path* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Path* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Path* New() const final {
    return CreateMaybeMessage<Path>(nullptr);
  }

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.Path";
  }
  protected:
  explicit Path(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Path_Element Element;

  typedef Path_ElementType ElementType;
  static constexpr ElementType moveTo =
    Path_ElementType_moveTo;
  static constexpr ElementType lineTo =
    Path_ElementType_lineTo;
  static constexpr ElementType quadCurveTo =
    Path_ElementType_quadCurveTo;
  static constexpr ElementType curveTo =
    Path_ElementType_curveTo;
  static constexpr ElementType closeSubpath =
    Path_ElementType_closeSubpath;
  static inline bool ElementType_IsValid(int value) {
    return Path_ElementType_IsValid(value);
  }
  static constexpr ElementType ElementType_MIN =
    Path_ElementType_ElementType_MIN;
  static constexpr ElementType ElementType_MAX =
    Path_ElementType_ElementType_MAX;
  static constexpr int ElementType_ARRAYSIZE =
    Path_ElementType_ElementType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ElementType_descriptor() {
    return Path_ElementType_descriptor();
  }
  template<typename T>
  static inline const std::string& ElementType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ElementType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ElementType_Name.");
    return Path_ElementType_Name(enum_t_value);
  }
  static inline bool ElementType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ElementType* value) {
    return Path_ElementType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .TSP.Path.Element elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::TSP::Path_Element* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Path_Element >*
      mutable_elements();
  private:
  const ::TSP::Path_Element& _internal_elements(int index) const;
  ::TSP::Path_Element* _internal_add_elements();
  public:
  const ::TSP::Path_Element& elements(int index) const;
  ::TSP::Path_Element* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Path_Element >&
      elements() const;

  // @@protoc_insertion_point(class_scope:TSP.Path)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Path_Element > elements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class ReferenceDictionary_Entry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.ReferenceDictionary.Entry) */ {
 public:
  inline ReferenceDictionary_Entry() : ReferenceDictionary_Entry(nullptr) {}
  ~ReferenceDictionary_Entry() override;
  explicit constexpr ReferenceDictionary_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReferenceDictionary_Entry(const ReferenceDictionary_Entry& from);
  ReferenceDictionary_Entry(ReferenceDictionary_Entry&& from) noexcept
    : ReferenceDictionary_Entry() {
    *this = ::std::move(from);
  }

  inline ReferenceDictionary_Entry& operator=(const ReferenceDictionary_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceDictionary_Entry& operator=(ReferenceDictionary_Entry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReferenceDictionary_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReferenceDictionary_Entry* internal_default_instance() {
    return reinterpret_cast<const ReferenceDictionary_Entry*>(
               &_ReferenceDictionary_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ReferenceDictionary_Entry& a, ReferenceDictionary_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceDictionary_Entry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferenceDictionary_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReferenceDictionary_Entry* New() const final {
    return CreateMaybeMessage<ReferenceDictionary_Entry>(nullptr);
  }

  ReferenceDictionary_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReferenceDictionary_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReferenceDictionary_Entry& from);
  void MergeFrom(const ReferenceDictionary_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceDictionary_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.ReferenceDictionary.Entry";
  }
  protected:
  explicit ReferenceDictionary_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required .TSP.Reference key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::TSP::Reference& key() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_key();
  ::TSP::Reference* mutable_key();
  void set_allocated_key(::TSP::Reference* key);
  private:
  const ::TSP::Reference& _internal_key() const;
  ::TSP::Reference* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::TSP::Reference* key);
  ::TSP::Reference* unsafe_arena_release_key();

  // required .TSP.Reference value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::TSP::Reference& value() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_value();
  ::TSP::Reference* mutable_value();
  void set_allocated_value(::TSP::Reference* value);
  private:
  const ::TSP::Reference& _internal_value() const;
  ::TSP::Reference* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::TSP::Reference* value);
  ::TSP::Reference* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:TSP.ReferenceDictionary.Entry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* key_;
  ::TSP::Reference* value_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class ReferenceDictionary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.ReferenceDictionary) */ {
 public:
  inline ReferenceDictionary() : ReferenceDictionary(nullptr) {}
  ~ReferenceDictionary() override;
  explicit constexpr ReferenceDictionary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReferenceDictionary(const ReferenceDictionary& from);
  ReferenceDictionary(ReferenceDictionary&& from) noexcept
    : ReferenceDictionary() {
    *this = ::std::move(from);
  }

  inline ReferenceDictionary& operator=(const ReferenceDictionary& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceDictionary& operator=(ReferenceDictionary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReferenceDictionary& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReferenceDictionary* internal_default_instance() {
    return reinterpret_cast<const ReferenceDictionary*>(
               &_ReferenceDictionary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ReferenceDictionary& a, ReferenceDictionary& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceDictionary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferenceDictionary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReferenceDictionary* New() const final {
    return CreateMaybeMessage<ReferenceDictionary>(nullptr);
  }

  ReferenceDictionary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReferenceDictionary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReferenceDictionary& from);
  void MergeFrom(const ReferenceDictionary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceDictionary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.ReferenceDictionary";
  }
  protected:
  explicit ReferenceDictionary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReferenceDictionary_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .TSP.ReferenceDictionary.Entry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::TSP::ReferenceDictionary_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::ReferenceDictionary_Entry >*
      mutable_entries();
  private:
  const ::TSP::ReferenceDictionary_Entry& _internal_entries(int index) const;
  ::TSP::ReferenceDictionary_Entry* _internal_add_entries();
  public:
  const ::TSP::ReferenceDictionary_Entry& entries(int index) const;
  ::TSP::ReferenceDictionary_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::ReferenceDictionary_Entry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:TSP.ReferenceDictionary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::ReferenceDictionary_Entry > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class UUID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.UUID) */ {
 public:
  inline UUID() : UUID(nullptr) {}
  ~UUID() override;
  explicit constexpr UUID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UUID(const UUID& from);
  UUID(UUID&& from) noexcept
    : UUID() {
    *this = ::std::move(from);
  }

  inline UUID& operator=(const UUID& from) {
    CopyFrom(from);
    return *this;
  }
  inline UUID& operator=(UUID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UUID& default_instance() {
    return *internal_default_instance();
  }
  static inline const UUID* internal_default_instance() {
    return reinterpret_cast<const UUID*>(
               &_UUID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UUID& a, UUID& b) {
    a.Swap(&b);
  }
  inline void Swap(UUID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UUID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UUID* New() const final {
    return CreateMaybeMessage<UUID>(nullptr);
  }

  UUID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UUID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UUID& from);
  void MergeFrom(const UUID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UUID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.UUID";
  }
  protected:
  explicit UUID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowerFieldNumber = 1,
    kUpperFieldNumber = 2,
  };
  // required uint64 lower = 1;
  bool has_lower() const;
  private:
  bool _internal_has_lower() const;
  public:
  void clear_lower();
  ::PROTOBUF_NAMESPACE_ID::uint64 lower() const;
  void set_lower(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lower() const;
  void _internal_set_lower(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 upper = 2;
  bool has_upper() const;
  private:
  bool _internal_has_upper() const;
  public:
  void clear_upper();
  ::PROTOBUF_NAMESPACE_ID::uint64 upper() const;
  void set_upper(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_upper() const;
  void _internal_set_upper(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.UUID)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lower_;
  ::PROTOBUF_NAMESPACE_ID::uint64 upper_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class CFUUIDArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.CFUUIDArchive) */ {
 public:
  inline CFUUIDArchive() : CFUUIDArchive(nullptr) {}
  ~CFUUIDArchive() override;
  explicit constexpr CFUUIDArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFUUIDArchive(const CFUUIDArchive& from);
  CFUUIDArchive(CFUUIDArchive&& from) noexcept
    : CFUUIDArchive() {
    *this = ::std::move(from);
  }

  inline CFUUIDArchive& operator=(const CFUUIDArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFUUIDArchive& operator=(CFUUIDArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFUUIDArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFUUIDArchive* internal_default_instance() {
    return reinterpret_cast<const CFUUIDArchive*>(
               &_CFUUIDArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CFUUIDArchive& a, CFUUIDArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CFUUIDArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFUUIDArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CFUUIDArchive* New() const final {
    return CreateMaybeMessage<CFUUIDArchive>(nullptr);
  }

  CFUUIDArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CFUUIDArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CFUUIDArchive& from);
  void MergeFrom(const CFUUIDArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFUUIDArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.CFUUIDArchive";
  }
  protected:
  explicit CFUUIDArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidBytesFieldNumber = 1,
    kUuidW0FieldNumber = 2,
    kUuidW1FieldNumber = 3,
    kUuidW2FieldNumber = 4,
    kUuidW3FieldNumber = 5,
  };
  // optional bytes uuid_bytes = 1;
  bool has_uuid_bytes() const;
  private:
  bool _internal_has_uuid_bytes() const;
  public:
  void clear_uuid_bytes();
  const std::string& uuid_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid_bytes();
  std::string* release_uuid_bytes();
  void set_allocated_uuid_bytes(std::string* uuid_bytes);
  private:
  const std::string& _internal_uuid_bytes() const;
  void _internal_set_uuid_bytes(const std::string& value);
  std::string* _internal_mutable_uuid_bytes();
  public:

  // optional uint32 uuid_w0 = 2;
  bool has_uuid_w0() const;
  private:
  bool _internal_has_uuid_w0() const;
  public:
  void clear_uuid_w0();
  ::PROTOBUF_NAMESPACE_ID::uint32 uuid_w0() const;
  void set_uuid_w0(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uuid_w0() const;
  void _internal_set_uuid_w0(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 uuid_w1 = 3;
  bool has_uuid_w1() const;
  private:
  bool _internal_has_uuid_w1() const;
  public:
  void clear_uuid_w1();
  ::PROTOBUF_NAMESPACE_ID::uint32 uuid_w1() const;
  void set_uuid_w1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uuid_w1() const;
  void _internal_set_uuid_w1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 uuid_w2 = 4;
  bool has_uuid_w2() const;
  private:
  bool _internal_has_uuid_w2() const;
  public:
  void clear_uuid_w2();
  ::PROTOBUF_NAMESPACE_ID::uint32 uuid_w2() const;
  void set_uuid_w2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uuid_w2() const;
  void _internal_set_uuid_w2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 uuid_w3 = 5;
  bool has_uuid_w3() const;
  private:
  bool _internal_has_uuid_w3() const;
  public:
  void clear_uuid_w3();
  ::PROTOBUF_NAMESPACE_ID::uint32 uuid_w3() const;
  void set_uuid_w3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uuid_w3() const;
  void _internal_set_uuid_w3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.CFUUIDArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uuid_w0_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uuid_w1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uuid_w2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uuid_w3_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class UUIDSetArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.UUIDSetArchive) */ {
 public:
  inline UUIDSetArchive() : UUIDSetArchive(nullptr) {}
  ~UUIDSetArchive() override;
  explicit constexpr UUIDSetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UUIDSetArchive(const UUIDSetArchive& from);
  UUIDSetArchive(UUIDSetArchive&& from) noexcept
    : UUIDSetArchive() {
    *this = ::std::move(from);
  }

  inline UUIDSetArchive& operator=(const UUIDSetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UUIDSetArchive& operator=(UUIDSetArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UUIDSetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UUIDSetArchive* internal_default_instance() {
    return reinterpret_cast<const UUIDSetArchive*>(
               &_UUIDSetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UUIDSetArchive& a, UUIDSetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UUIDSetArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UUIDSetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UUIDSetArchive* New() const final {
    return CreateMaybeMessage<UUIDSetArchive>(nullptr);
  }

  UUIDSetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UUIDSetArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UUIDSetArchive& from);
  void MergeFrom(const UUIDSetArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UUIDSetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.UUIDSetArchive";
  }
  protected:
  explicit UUIDSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidsFieldNumber = 1,
  };
  // repeated .TSP.UUID uids = 1;
  int uids_size() const;
  private:
  int _internal_uids_size() const;
  public:
  void clear_uids();
  ::TSP::UUID* mutable_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_uids();
  private:
  const ::TSP::UUID& _internal_uids(int index) const;
  ::TSP::UUID* _internal_add_uids();
  public:
  const ::TSP::UUID& uids(int index) const;
  ::TSP::UUID* add_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      uids() const;

  // @@protoc_insertion_point(class_scope:TSP.UUIDSetArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > uids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class UUIDMapArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.UUIDMapArchive) */ {
 public:
  inline UUIDMapArchive() : UUIDMapArchive(nullptr) {}
  ~UUIDMapArchive() override;
  explicit constexpr UUIDMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UUIDMapArchive(const UUIDMapArchive& from);
  UUIDMapArchive(UUIDMapArchive&& from) noexcept
    : UUIDMapArchive() {
    *this = ::std::move(from);
  }

  inline UUIDMapArchive& operator=(const UUIDMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UUIDMapArchive& operator=(UUIDMapArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UUIDMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UUIDMapArchive* internal_default_instance() {
    return reinterpret_cast<const UUIDMapArchive*>(
               &_UUIDMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(UUIDMapArchive& a, UUIDMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UUIDMapArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UUIDMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UUIDMapArchive* New() const final {
    return CreateMaybeMessage<UUIDMapArchive>(nullptr);
  }

  UUIDMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UUIDMapArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UUIDMapArchive& from);
  void MergeFrom(const UUIDMapArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UUIDMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.UUIDMapArchive";
  }
  protected:
  explicit UUIDMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kTargetFieldNumber = 2,
  };
  // repeated .TSP.UUID source = 1;
  int source_size() const;
  private:
  int _internal_source_size() const;
  public:
  void clear_source();
  ::TSP::UUID* mutable_source(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_source();
  private:
  const ::TSP::UUID& _internal_source(int index) const;
  ::TSP::UUID* _internal_add_source();
  public:
  const ::TSP::UUID& source(int index) const;
  ::TSP::UUID* add_source();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      source() const;

  // repeated .TSP.UUID target = 2;
  int target_size() const;
  private:
  int _internal_target_size() const;
  public:
  void clear_target();
  ::TSP::UUID* mutable_target(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_target();
  private:
  const ::TSP::UUID& _internal_target(int index) const;
  ::TSP::UUID* _internal_add_target();
  public:
  const ::TSP::UUID& target(int index) const;
  ::TSP::UUID* add_target();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      target() const;

  // @@protoc_insertion_point(class_scope:TSP.UUIDMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > source_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class UUIDMultiMapArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.UUIDMultiMapArchive) */ {
 public:
  inline UUIDMultiMapArchive() : UUIDMultiMapArchive(nullptr) {}
  ~UUIDMultiMapArchive() override;
  explicit constexpr UUIDMultiMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UUIDMultiMapArchive(const UUIDMultiMapArchive& from);
  UUIDMultiMapArchive(UUIDMultiMapArchive&& from) noexcept
    : UUIDMultiMapArchive() {
    *this = ::std::move(from);
  }

  inline UUIDMultiMapArchive& operator=(const UUIDMultiMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UUIDMultiMapArchive& operator=(UUIDMultiMapArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UUIDMultiMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UUIDMultiMapArchive* internal_default_instance() {
    return reinterpret_cast<const UUIDMultiMapArchive*>(
               &_UUIDMultiMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UUIDMultiMapArchive& a, UUIDMultiMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UUIDMultiMapArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UUIDMultiMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UUIDMultiMapArchive* New() const final {
    return CreateMaybeMessage<UUIDMultiMapArchive>(nullptr);
  }

  UUIDMultiMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UUIDMultiMapArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UUIDMultiMapArchive& from);
  void MergeFrom(const UUIDMultiMapArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UUIDMultiMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.UUIDMultiMapArchive";
  }
  protected:
  explicit UUIDMultiMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kTargetFieldNumber = 2,
  };
  // repeated .TSP.UUID source = 1;
  int source_size() const;
  private:
  int _internal_source_size() const;
  public:
  void clear_source();
  ::TSP::UUID* mutable_source(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_source();
  private:
  const ::TSP::UUID& _internal_source(int index) const;
  ::TSP::UUID* _internal_add_source();
  public:
  const ::TSP::UUID& source(int index) const;
  ::TSP::UUID* add_source();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      source() const;

  // repeated .TSP.UUID target = 2;
  int target_size() const;
  private:
  int _internal_target_size() const;
  public:
  void clear_target();
  ::TSP::UUID* mutable_target(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_target();
  private:
  const ::TSP::UUID& _internal_target(int index) const;
  ::TSP::UUID* _internal_add_target();
  public:
  const ::TSP::UUID& target(int index) const;
  ::TSP::UUID* add_target();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      target() const;

  // @@protoc_insertion_point(class_scope:TSP.UUIDMultiMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > source_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class UUIDCoordArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.UUIDCoordArchive) */ {
 public:
  inline UUIDCoordArchive() : UUIDCoordArchive(nullptr) {}
  ~UUIDCoordArchive() override;
  explicit constexpr UUIDCoordArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UUIDCoordArchive(const UUIDCoordArchive& from);
  UUIDCoordArchive(UUIDCoordArchive&& from) noexcept
    : UUIDCoordArchive() {
    *this = ::std::move(from);
  }

  inline UUIDCoordArchive& operator=(const UUIDCoordArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UUIDCoordArchive& operator=(UUIDCoordArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UUIDCoordArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UUIDCoordArchive* internal_default_instance() {
    return reinterpret_cast<const UUIDCoordArchive*>(
               &_UUIDCoordArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UUIDCoordArchive& a, UUIDCoordArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UUIDCoordArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UUIDCoordArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UUIDCoordArchive* New() const final {
    return CreateMaybeMessage<UUIDCoordArchive>(nullptr);
  }

  UUIDCoordArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UUIDCoordArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UUIDCoordArchive& from);
  void MergeFrom(const UUIDCoordArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UUIDCoordArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.UUIDCoordArchive";
  }
  protected:
  explicit UUIDCoordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowUidFieldNumber = 1,
    kColumnUidFieldNumber = 2,
  };
  // required .TSP.UUID row_uid = 1;
  bool has_row_uid() const;
  private:
  bool _internal_has_row_uid() const;
  public:
  void clear_row_uid();
  const ::TSP::UUID& row_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_row_uid();
  ::TSP::UUID* mutable_row_uid();
  void set_allocated_row_uid(::TSP::UUID* row_uid);
  private:
  const ::TSP::UUID& _internal_row_uid() const;
  ::TSP::UUID* _internal_mutable_row_uid();
  public:
  void unsafe_arena_set_allocated_row_uid(
      ::TSP::UUID* row_uid);
  ::TSP::UUID* unsafe_arena_release_row_uid();

  // required .TSP.UUID column_uid = 2;
  bool has_column_uid() const;
  private:
  bool _internal_has_column_uid() const;
  public:
  void clear_column_uid();
  const ::TSP::UUID& column_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_column_uid();
  ::TSP::UUID* mutable_column_uid();
  void set_allocated_column_uid(::TSP::UUID* column_uid);
  private:
  const ::TSP::UUID& _internal_column_uid() const;
  ::TSP::UUID* _internal_mutable_column_uid();
  public:
  void unsafe_arena_set_allocated_column_uid(
      ::TSP::UUID* column_uid);
  ::TSP::UUID* unsafe_arena_release_column_uid();

  // @@protoc_insertion_point(class_scope:TSP.UUIDCoordArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* row_uid_;
  ::TSP::UUID* column_uid_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class UUIDRectArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.UUIDRectArchive) */ {
 public:
  inline UUIDRectArchive() : UUIDRectArchive(nullptr) {}
  ~UUIDRectArchive() override;
  explicit constexpr UUIDRectArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UUIDRectArchive(const UUIDRectArchive& from);
  UUIDRectArchive(UUIDRectArchive&& from) noexcept
    : UUIDRectArchive() {
    *this = ::std::move(from);
  }

  inline UUIDRectArchive& operator=(const UUIDRectArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UUIDRectArchive& operator=(UUIDRectArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UUIDRectArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UUIDRectArchive* internal_default_instance() {
    return reinterpret_cast<const UUIDRectArchive*>(
               &_UUIDRectArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(UUIDRectArchive& a, UUIDRectArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UUIDRectArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UUIDRectArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UUIDRectArchive* New() const final {
    return CreateMaybeMessage<UUIDRectArchive>(nullptr);
  }

  UUIDRectArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UUIDRectArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UUIDRectArchive& from);
  void MergeFrom(const UUIDRectArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UUIDRectArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.UUIDRectArchive";
  }
  protected:
  explicit UUIDRectArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnUidsFieldNumber = 1,
    kRowUidsFieldNumber = 2,
  };
  // repeated .TSP.UUID column_uids = 1;
  int column_uids_size() const;
  private:
  int _internal_column_uids_size() const;
  public:
  void clear_column_uids();
  ::TSP::UUID* mutable_column_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_column_uids();
  private:
  const ::TSP::UUID& _internal_column_uids(int index) const;
  ::TSP::UUID* _internal_add_column_uids();
  public:
  const ::TSP::UUID& column_uids(int index) const;
  ::TSP::UUID* add_column_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      column_uids() const;

  // repeated .TSP.UUID row_uids = 2;
  int row_uids_size() const;
  private:
  int _internal_row_uids_size() const;
  public:
  void clear_row_uids();
  ::TSP::UUID* mutable_row_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_row_uids();
  private:
  const ::TSP::UUID& _internal_row_uids(int index) const;
  ::TSP::UUID* _internal_add_row_uids();
  public:
  const ::TSP::UUID& row_uids(int index) const;
  ::TSP::UUID* add_row_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      row_uids() const;

  // @@protoc_insertion_point(class_scope:TSP.UUIDRectArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > column_uids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > row_uids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class SparseUUIDArray_Entry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.SparseUUIDArray.Entry) */ {
 public:
  inline SparseUUIDArray_Entry() : SparseUUIDArray_Entry(nullptr) {}
  ~SparseUUIDArray_Entry() override;
  explicit constexpr SparseUUIDArray_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseUUIDArray_Entry(const SparseUUIDArray_Entry& from);
  SparseUUIDArray_Entry(SparseUUIDArray_Entry&& from) noexcept
    : SparseUUIDArray_Entry() {
    *this = ::std::move(from);
  }

  inline SparseUUIDArray_Entry& operator=(const SparseUUIDArray_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseUUIDArray_Entry& operator=(SparseUUIDArray_Entry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparseUUIDArray_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseUUIDArray_Entry* internal_default_instance() {
    return reinterpret_cast<const SparseUUIDArray_Entry*>(
               &_SparseUUIDArray_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SparseUUIDArray_Entry& a, SparseUUIDArray_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseUUIDArray_Entry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseUUIDArray_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SparseUUIDArray_Entry* New() const final {
    return CreateMaybeMessage<SparseUUIDArray_Entry>(nullptr);
  }

  SparseUUIDArray_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SparseUUIDArray_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SparseUUIDArray_Entry& from);
  void MergeFrom(const SparseUUIDArray_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseUUIDArray_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.SparseUUIDArray.Entry";
  }
  protected:
  explicit SparseUUIDArray_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // required .TSP.UUID uuid = 2;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::TSP::UUID& uuid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_uuid();
  ::TSP::UUID* mutable_uuid();
  void set_allocated_uuid(::TSP::UUID* uuid);
  private:
  const ::TSP::UUID& _internal_uuid() const;
  ::TSP::UUID* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::TSP::UUID* uuid);
  ::TSP::UUID* unsafe_arena_release_uuid();

  // required uint32 index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.SparseUUIDArray.Entry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* uuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class SparseUUIDArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.SparseUUIDArray) */ {
 public:
  inline SparseUUIDArray() : SparseUUIDArray(nullptr) {}
  ~SparseUUIDArray() override;
  explicit constexpr SparseUUIDArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseUUIDArray(const SparseUUIDArray& from);
  SparseUUIDArray(SparseUUIDArray&& from) noexcept
    : SparseUUIDArray() {
    *this = ::std::move(from);
  }

  inline SparseUUIDArray& operator=(const SparseUUIDArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseUUIDArray& operator=(SparseUUIDArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparseUUIDArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseUUIDArray* internal_default_instance() {
    return reinterpret_cast<const SparseUUIDArray*>(
               &_SparseUUIDArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SparseUUIDArray& a, SparseUUIDArray& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseUUIDArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseUUIDArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SparseUUIDArray* New() const final {
    return CreateMaybeMessage<SparseUUIDArray>(nullptr);
  }

  SparseUUIDArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SparseUUIDArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SparseUUIDArray& from);
  void MergeFrom(const SparseUUIDArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseUUIDArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.SparseUUIDArray";
  }
  protected:
  explicit SparseUUIDArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SparseUUIDArray_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kCountFieldNumber = 1,
  };
  // repeated .TSP.SparseUUIDArray.Entry entries = 2;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::TSP::SparseUUIDArray_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::SparseUUIDArray_Entry >*
      mutable_entries();
  private:
  const ::TSP::SparseUUIDArray_Entry& _internal_entries(int index) const;
  ::TSP::SparseUUIDArray_Entry* _internal_add_entries();
  public:
  const ::TSP::SparseUUIDArray_Entry& entries(int index) const;
  ::TSP::SparseUUIDArray_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::SparseUUIDArray_Entry >&
      entries() const;

  // required uint32 count = 1;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.SparseUUIDArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::SparseUUIDArray_Entry > entries_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class UUIDPath PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.UUIDPath) */ {
 public:
  inline UUIDPath() : UUIDPath(nullptr) {}
  ~UUIDPath() override;
  explicit constexpr UUIDPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UUIDPath(const UUIDPath& from);
  UUIDPath(UUIDPath&& from) noexcept
    : UUIDPath() {
    *this = ::std::move(from);
  }

  inline UUIDPath& operator=(const UUIDPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline UUIDPath& operator=(UUIDPath&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UUIDPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const UUIDPath* internal_default_instance() {
    return reinterpret_cast<const UUIDPath*>(
               &_UUIDPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UUIDPath& a, UUIDPath& b) {
    a.Swap(&b);
  }
  inline void Swap(UUIDPath* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UUIDPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UUIDPath* New() const final {
    return CreateMaybeMessage<UUIDPath>(nullptr);
  }

  UUIDPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UUIDPath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UUIDPath& from);
  void MergeFrom(const UUIDPath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UUIDPath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.UUIDPath";
  }
  protected:
  explicit UUIDPath(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidsFieldNumber = 1,
  };
  // repeated .TSP.UUID uuids = 1;
  int uuids_size() const;
  private:
  int _internal_uuids_size() const;
  public:
  void clear_uuids();
  ::TSP::UUID* mutable_uuids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_uuids();
  private:
  const ::TSP::UUID& _internal_uuids(int index) const;
  ::TSP::UUID* _internal_add_uuids();
  public:
  const ::TSP::UUID& uuids(int index) const;
  ::TSP::UUID* add_uuids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      uuids() const;

  // @@protoc_insertion_point(class_scope:TSP.UUIDPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > uuids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class SparseUUIDPathArray_Entry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.SparseUUIDPathArray.Entry) */ {
 public:
  inline SparseUUIDPathArray_Entry() : SparseUUIDPathArray_Entry(nullptr) {}
  ~SparseUUIDPathArray_Entry() override;
  explicit constexpr SparseUUIDPathArray_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseUUIDPathArray_Entry(const SparseUUIDPathArray_Entry& from);
  SparseUUIDPathArray_Entry(SparseUUIDPathArray_Entry&& from) noexcept
    : SparseUUIDPathArray_Entry() {
    *this = ::std::move(from);
  }

  inline SparseUUIDPathArray_Entry& operator=(const SparseUUIDPathArray_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseUUIDPathArray_Entry& operator=(SparseUUIDPathArray_Entry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparseUUIDPathArray_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseUUIDPathArray_Entry* internal_default_instance() {
    return reinterpret_cast<const SparseUUIDPathArray_Entry*>(
               &_SparseUUIDPathArray_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SparseUUIDPathArray_Entry& a, SparseUUIDPathArray_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseUUIDPathArray_Entry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseUUIDPathArray_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SparseUUIDPathArray_Entry* New() const final {
    return CreateMaybeMessage<SparseUUIDPathArray_Entry>(nullptr);
  }

  SparseUUIDPathArray_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SparseUUIDPathArray_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SparseUUIDPathArray_Entry& from);
  void MergeFrom(const SparseUUIDPathArray_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseUUIDPathArray_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.SparseUUIDPathArray.Entry";
  }
  protected:
  explicit SparseUUIDPathArray_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidPathFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // required .TSP.UUIDPath uuid_path = 2;
  bool has_uuid_path() const;
  private:
  bool _internal_has_uuid_path() const;
  public:
  void clear_uuid_path();
  const ::TSP::UUIDPath& uuid_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_uuid_path();
  ::TSP::UUIDPath* mutable_uuid_path();
  void set_allocated_uuid_path(::TSP::UUIDPath* uuid_path);
  private:
  const ::TSP::UUIDPath& _internal_uuid_path() const;
  ::TSP::UUIDPath* _internal_mutable_uuid_path();
  public:
  void unsafe_arena_set_allocated_uuid_path(
      ::TSP::UUIDPath* uuid_path);
  ::TSP::UUIDPath* unsafe_arena_release_uuid_path();

  // required uint32 index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.SparseUUIDPathArray.Entry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUIDPath* uuid_path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class SparseUUIDPathArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.SparseUUIDPathArray) */ {
 public:
  inline SparseUUIDPathArray() : SparseUUIDPathArray(nullptr) {}
  ~SparseUUIDPathArray() override;
  explicit constexpr SparseUUIDPathArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseUUIDPathArray(const SparseUUIDPathArray& from);
  SparseUUIDPathArray(SparseUUIDPathArray&& from) noexcept
    : SparseUUIDPathArray() {
    *this = ::std::move(from);
  }

  inline SparseUUIDPathArray& operator=(const SparseUUIDPathArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseUUIDPathArray& operator=(SparseUUIDPathArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparseUUIDPathArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseUUIDPathArray* internal_default_instance() {
    return reinterpret_cast<const SparseUUIDPathArray*>(
               &_SparseUUIDPathArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SparseUUIDPathArray& a, SparseUUIDPathArray& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseUUIDPathArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseUUIDPathArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SparseUUIDPathArray* New() const final {
    return CreateMaybeMessage<SparseUUIDPathArray>(nullptr);
  }

  SparseUUIDPathArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SparseUUIDPathArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SparseUUIDPathArray& from);
  void MergeFrom(const SparseUUIDPathArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseUUIDPathArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.SparseUUIDPathArray";
  }
  protected:
  explicit SparseUUIDPathArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SparseUUIDPathArray_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kCountFieldNumber = 1,
  };
  // repeated .TSP.SparseUUIDPathArray.Entry entries = 2;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::TSP::SparseUUIDPathArray_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::SparseUUIDPathArray_Entry >*
      mutable_entries();
  private:
  const ::TSP::SparseUUIDPathArray_Entry& _internal_entries(int index) const;
  ::TSP::SparseUUIDPathArray_Entry* _internal_add_entries();
  public:
  const ::TSP::SparseUUIDPathArray_Entry& entries(int index) const;
  ::TSP::SparseUUIDPathArray_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::SparseUUIDPathArray_Entry >&
      entries() const;

  // required uint32 count = 1;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.SparseUUIDPathArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::SparseUUIDPathArray_Entry > entries_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class PasteboardObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.PasteboardObject) */ {
 public:
  inline PasteboardObject() : PasteboardObject(nullptr) {}
  ~PasteboardObject() override;
  explicit constexpr PasteboardObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PasteboardObject(const PasteboardObject& from);
  PasteboardObject(PasteboardObject&& from) noexcept
    : PasteboardObject() {
    *this = ::std::move(from);
  }

  inline PasteboardObject& operator=(const PasteboardObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasteboardObject& operator=(PasteboardObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PasteboardObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasteboardObject* internal_default_instance() {
    return reinterpret_cast<const PasteboardObject*>(
               &_PasteboardObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(PasteboardObject& a, PasteboardObject& b) {
    a.Swap(&b);
  }
  inline void Swap(PasteboardObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasteboardObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PasteboardObject* New() const final {
    return CreateMaybeMessage<PasteboardObject>(nullptr);
  }

  PasteboardObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PasteboardObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PasteboardObject& from);
  void MergeFrom(const PasteboardObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PasteboardObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.PasteboardObject";
  }
  protected:
  explicit PasteboardObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawablesFieldNumber = 2,
    kStylesFieldNumber = 3,
    kPresetsFieldNumber = 10,
    kTopLevelObjectsFieldNumber = 11,
    kStylesheetFieldNumber = 1,
    kWpStorageFieldNumber = 5,
    kAppNativeObjectFieldNumber = 6,
    kGuideStorageFieldNumber = 9,
    kNativeContentDescriptionFieldNumber = 12,
    kIsTextPrimaryFieldNumber = 7,
    kIsSmartFieldNumber = 8,
  };
  // repeated .TSP.Reference drawables = 2;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TSP::Reference* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables();
  private:
  const ::TSP::Reference& _internal_drawables(int index) const;
  ::TSP::Reference* _internal_add_drawables();
  public:
  const ::TSP::Reference& drawables(int index) const;
  ::TSP::Reference* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables() const;

  // repeated .TSP.Reference styles = 3;
  int styles_size() const;
  private:
  int _internal_styles_size() const;
  public:
  void clear_styles();
  ::TSP::Reference* mutable_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_styles();
  private:
  const ::TSP::Reference& _internal_styles(int index) const;
  ::TSP::Reference* _internal_add_styles();
  public:
  const ::TSP::Reference& styles(int index) const;
  ::TSP::Reference* add_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      styles() const;

  // repeated .TSP.Reference presets = 10;
  int presets_size() const;
  private:
  int _internal_presets_size() const;
  public:
  void clear_presets();
  ::TSP::Reference* mutable_presets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_presets();
  private:
  const ::TSP::Reference& _internal_presets(int index) const;
  ::TSP::Reference* _internal_add_presets();
  public:
  const ::TSP::Reference& presets(int index) const;
  ::TSP::Reference* add_presets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      presets() const;

  // repeated .TSP.Reference top_level_objects = 11;
  int top_level_objects_size() const;
  private:
  int _internal_top_level_objects_size() const;
  public:
  void clear_top_level_objects();
  ::TSP::Reference* mutable_top_level_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_top_level_objects();
  private:
  const ::TSP::Reference& _internal_top_level_objects(int index) const;
  ::TSP::Reference* _internal_add_top_level_objects();
  public:
  const ::TSP::Reference& top_level_objects(int index) const;
  ::TSP::Reference* add_top_level_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      top_level_objects() const;

  // optional .TSP.Reference stylesheet = 1;
  bool has_stylesheet() const;
  private:
  bool _internal_has_stylesheet() const;
  public:
  void clear_stylesheet();
  const ::TSP::Reference& stylesheet() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_stylesheet();
  ::TSP::Reference* mutable_stylesheet();
  void set_allocated_stylesheet(::TSP::Reference* stylesheet);
  private:
  const ::TSP::Reference& _internal_stylesheet() const;
  ::TSP::Reference* _internal_mutable_stylesheet();
  public:
  void unsafe_arena_set_allocated_stylesheet(
      ::TSP::Reference* stylesheet);
  ::TSP::Reference* unsafe_arena_release_stylesheet();

  // optional .TSP.Reference wp_storage = 5;
  bool has_wp_storage() const;
  private:
  bool _internal_has_wp_storage() const;
  public:
  void clear_wp_storage();
  const ::TSP::Reference& wp_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_wp_storage();
  ::TSP::Reference* mutable_wp_storage();
  void set_allocated_wp_storage(::TSP::Reference* wp_storage);
  private:
  const ::TSP::Reference& _internal_wp_storage() const;
  ::TSP::Reference* _internal_mutable_wp_storage();
  public:
  void unsafe_arena_set_allocated_wp_storage(
      ::TSP::Reference* wp_storage);
  ::TSP::Reference* unsafe_arena_release_wp_storage();

  // optional .TSP.Reference app_native_object = 6;
  bool has_app_native_object() const;
  private:
  bool _internal_has_app_native_object() const;
  public:
  void clear_app_native_object();
  const ::TSP::Reference& app_native_object() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_app_native_object();
  ::TSP::Reference* mutable_app_native_object();
  void set_allocated_app_native_object(::TSP::Reference* app_native_object);
  private:
  const ::TSP::Reference& _internal_app_native_object() const;
  ::TSP::Reference* _internal_mutable_app_native_object();
  public:
  void unsafe_arena_set_allocated_app_native_object(
      ::TSP::Reference* app_native_object);
  ::TSP::Reference* unsafe_arena_release_app_native_object();

  // optional .TSP.Reference guide_storage = 9;
  bool has_guide_storage() const;
  private:
  bool _internal_has_guide_storage() const;
  public:
  void clear_guide_storage();
  const ::TSP::Reference& guide_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_guide_storage();
  ::TSP::Reference* mutable_guide_storage();
  void set_allocated_guide_storage(::TSP::Reference* guide_storage);
  private:
  const ::TSP::Reference& _internal_guide_storage() const;
  ::TSP::Reference* _internal_mutable_guide_storage();
  public:
  void unsafe_arena_set_allocated_guide_storage(
      ::TSP::Reference* guide_storage);
  ::TSP::Reference* unsafe_arena_release_guide_storage();

  // optional .TSP.Reference native_content_description = 12;
  bool has_native_content_description() const;
  private:
  bool _internal_has_native_content_description() const;
  public:
  void clear_native_content_description();
  const ::TSP::Reference& native_content_description() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_native_content_description();
  ::TSP::Reference* mutable_native_content_description();
  void set_allocated_native_content_description(::TSP::Reference* native_content_description);
  private:
  const ::TSP::Reference& _internal_native_content_description() const;
  ::TSP::Reference* _internal_mutable_native_content_description();
  public:
  void unsafe_arena_set_allocated_native_content_description(
      ::TSP::Reference* native_content_description);
  ::TSP::Reference* unsafe_arena_release_native_content_description();

  // optional bool is_text_primary = 7 [default = false];
  bool has_is_text_primary() const;
  private:
  bool _internal_has_is_text_primary() const;
  public:
  void clear_is_text_primary();
  bool is_text_primary() const;
  void set_is_text_primary(bool value);
  private:
  bool _internal_is_text_primary() const;
  void _internal_set_is_text_primary(bool value);
  public:

  // optional bool is_smart = 8 [default = false];
  bool has_is_smart() const;
  private:
  bool _internal_has_is_smart() const;
  public:
  void clear_is_smart();
  bool is_smart() const;
  void set_is_smart(bool value);
  private:
  bool _internal_is_smart() const;
  void _internal_set_is_smart(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.PasteboardObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > styles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > presets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > top_level_objects_;
  ::TSP::Reference* stylesheet_;
  ::TSP::Reference* wp_storage_;
  ::TSP::Reference* app_native_object_;
  ::TSP::Reference* guide_storage_;
  ::TSP::Reference* native_content_description_;
  bool is_text_primary_;
  bool is_smart_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class ObjectCollection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.ObjectCollection) */ {
 public:
  inline ObjectCollection() : ObjectCollection(nullptr) {}
  ~ObjectCollection() override;
  explicit constexpr ObjectCollection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectCollection(const ObjectCollection& from);
  ObjectCollection(ObjectCollection&& from) noexcept
    : ObjectCollection() {
    *this = ::std::move(from);
  }

  inline ObjectCollection& operator=(const ObjectCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectCollection& operator=(ObjectCollection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectCollection& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectCollection* internal_default_instance() {
    return reinterpret_cast<const ObjectCollection*>(
               &_ObjectCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ObjectCollection& a, ObjectCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectCollection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectCollection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectCollection* New() const final {
    return CreateMaybeMessage<ObjectCollection>(nullptr);
  }

  ObjectCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectCollection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectCollection& from);
  void MergeFrom(const ObjectCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.ObjectCollection";
  }
  protected:
  explicit ObjectCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 1,
  };
  // repeated .TSP.Reference objects = 1;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::TSP::Reference* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_objects();
  private:
  const ::TSP::Reference& _internal_objects(int index) const;
  ::TSP::Reference* _internal_add_objects();
  public:
  const ::TSP::Reference& objects(int index) const;
  ::TSP::Reference* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      objects() const;

  // @@protoc_insertion_point(class_scope:TSP.ObjectCollection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > objects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class ObjectContainer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.ObjectContainer) */ {
 public:
  inline ObjectContainer() : ObjectContainer(nullptr) {}
  ~ObjectContainer() override;
  explicit constexpr ObjectContainer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectContainer(const ObjectContainer& from);
  ObjectContainer(ObjectContainer&& from) noexcept
    : ObjectContainer() {
    *this = ::std::move(from);
  }

  inline ObjectContainer& operator=(const ObjectContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectContainer& operator=(ObjectContainer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectContainer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectContainer* internal_default_instance() {
    return reinterpret_cast<const ObjectContainer*>(
               &_ObjectContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ObjectContainer& a, ObjectContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectContainer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectContainer* New() const final {
    return CreateMaybeMessage<ObjectContainer>(nullptr);
  }

  ObjectContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectContainer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectContainer& from);
  void MergeFrom(const ObjectContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.ObjectContainer";
  }
  protected:
  explicit ObjectContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 2,
    kIdentifierFieldNumber = 1,
  };
  // repeated .TSP.Reference objects = 2;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::TSP::Reference* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_objects();
  private:
  const ::TSP::Reference& _internal_objects(int index) const;
  ::TSP::Reference* _internal_add_objects();
  public:
  const ::TSP::Reference& objects(int index) const;
  ::TSP::Reference* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      objects() const;

  // optional uint32 identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  ::PROTOBUF_NAMESPACE_ID::uint32 identifier() const;
  void set_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_identifier() const;
  void _internal_set_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.ObjectContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > objects_;
  ::PROTOBUF_NAMESPACE_ID::uint32 identifier_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class DataAttributes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.DataAttributes) */ {
 public:
  inline DataAttributes() : DataAttributes(nullptr) {}
  ~DataAttributes() override;
  explicit constexpr DataAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataAttributes(const DataAttributes& from);
  DataAttributes(DataAttributes&& from) noexcept
    : DataAttributes() {
    *this = ::std::move(from);
  }

  inline DataAttributes& operator=(const DataAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataAttributes& operator=(DataAttributes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataAttributes* internal_default_instance() {
    return reinterpret_cast<const DataAttributes*>(
               &_DataAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(DataAttributes& a, DataAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(DataAttributes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataAttributes* New() const final {
    return CreateMaybeMessage<DataAttributes>(nullptr);
  }

  DataAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataAttributes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataAttributes& from);
  void MergeFrom(const DataAttributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataAttributes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.DataAttributes";
  }
  protected:
  explicit DataAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DataAttributes)
  // @@protoc_insertion_point(class_scope:TSP.DataAttributes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class LargeArraySegment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.LargeArraySegment) */ {
 public:
  inline LargeArraySegment() : LargeArraySegment(nullptr) {}
  ~LargeArraySegment() override;
  explicit constexpr LargeArraySegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LargeArraySegment(const LargeArraySegment& from);
  LargeArraySegment(LargeArraySegment&& from) noexcept
    : LargeArraySegment() {
    *this = ::std::move(from);
  }

  inline LargeArraySegment& operator=(const LargeArraySegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeArraySegment& operator=(LargeArraySegment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargeArraySegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const LargeArraySegment* internal_default_instance() {
    return reinterpret_cast<const LargeArraySegment*>(
               &_LargeArraySegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(LargeArraySegment& a, LargeArraySegment& b) {
    a.Swap(&b);
  }
  inline void Swap(LargeArraySegment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeArraySegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LargeArraySegment* New() const final {
    return CreateMaybeMessage<LargeArraySegment>(nullptr);
  }

  LargeArraySegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LargeArraySegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LargeArraySegment& from);
  void MergeFrom(const LargeArraySegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeArraySegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.LargeArraySegment";
  }
  protected:
  explicit LargeArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageLocatorFieldNumber = 3,
    kShouldDelayArchivingFieldNumber = 1,
    kDelayedArchivingPriorityFieldNumber = 2,
  };
  // optional string package_locator = 3;
  bool has_package_locator() const;
  private:
  bool _internal_has_package_locator() const;
  public:
  void clear_package_locator();
  const std::string& package_locator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_package_locator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_package_locator();
  std::string* release_package_locator();
  void set_allocated_package_locator(std::string* package_locator);
  private:
  const std::string& _internal_package_locator() const;
  void _internal_set_package_locator(const std::string& value);
  std::string* _internal_mutable_package_locator();
  public:

  // optional bool should_delay_archiving = 1;
  bool has_should_delay_archiving() const;
  private:
  bool _internal_has_should_delay_archiving() const;
  public:
  void clear_should_delay_archiving();
  bool should_delay_archiving() const;
  void set_should_delay_archiving(bool value);
  private:
  bool _internal_should_delay_archiving() const;
  void _internal_set_should_delay_archiving(bool value);
  public:

  // optional uint32 delayed_archiving_priority = 2;
  bool has_delayed_archiving_priority() const;
  private:
  bool _internal_has_delayed_archiving_priority() const;
  public:
  void clear_delayed_archiving_priority();
  ::PROTOBUF_NAMESPACE_ID::uint32 delayed_archiving_priority() const;
  void set_delayed_archiving_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_delayed_archiving_priority() const;
  void _internal_set_delayed_archiving_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.LargeArraySegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_locator_;
  bool should_delay_archiving_;
  ::PROTOBUF_NAMESPACE_ID::uint32 delayed_archiving_priority_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class LargeNumberArraySegment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.LargeNumberArraySegment) */ {
 public:
  inline LargeNumberArraySegment() : LargeNumberArraySegment(nullptr) {}
  ~LargeNumberArraySegment() override;
  explicit constexpr LargeNumberArraySegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LargeNumberArraySegment(const LargeNumberArraySegment& from);
  LargeNumberArraySegment(LargeNumberArraySegment&& from) noexcept
    : LargeNumberArraySegment() {
    *this = ::std::move(from);
  }

  inline LargeNumberArraySegment& operator=(const LargeNumberArraySegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeNumberArraySegment& operator=(LargeNumberArraySegment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargeNumberArraySegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const LargeNumberArraySegment* internal_default_instance() {
    return reinterpret_cast<const LargeNumberArraySegment*>(
               &_LargeNumberArraySegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(LargeNumberArraySegment& a, LargeNumberArraySegment& b) {
    a.Swap(&b);
  }
  inline void Swap(LargeNumberArraySegment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeNumberArraySegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LargeNumberArraySegment* New() const final {
    return CreateMaybeMessage<LargeNumberArraySegment>(nullptr);
  }

  LargeNumberArraySegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LargeNumberArraySegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LargeNumberArraySegment& from);
  void MergeFrom(const LargeNumberArraySegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeNumberArraySegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.LargeNumberArraySegment";
  }
  protected:
  explicit LargeNumberArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 2,
    kLargeArraySegmentFieldNumber = 1,
  };
  // repeated double elements = 2;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  private:
  double _internal_elements(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_elements() const;
  void _internal_add_elements(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_elements();
  public:
  double elements(int index) const;
  void set_elements(int index, double value);
  void add_elements(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      elements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_elements();

  // optional .TSP.LargeArraySegment large_array_segment = 1;
  bool has_large_array_segment() const;
  private:
  bool _internal_has_large_array_segment() const;
  public:
  void clear_large_array_segment();
  const ::TSP::LargeArraySegment& large_array_segment() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::LargeArraySegment* release_large_array_segment();
  ::TSP::LargeArraySegment* mutable_large_array_segment();
  void set_allocated_large_array_segment(::TSP::LargeArraySegment* large_array_segment);
  private:
  const ::TSP::LargeArraySegment& _internal_large_array_segment() const;
  ::TSP::LargeArraySegment* _internal_mutable_large_array_segment();
  public:
  void unsafe_arena_set_allocated_large_array_segment(
      ::TSP::LargeArraySegment* large_array_segment);
  ::TSP::LargeArraySegment* unsafe_arena_release_large_array_segment();

  // @@protoc_insertion_point(class_scope:TSP.LargeNumberArraySegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > elements_;
  ::TSP::LargeArraySegment* large_array_segment_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class LargeStringArraySegment_OptionalElement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.LargeStringArraySegment.OptionalElement) */ {
 public:
  inline LargeStringArraySegment_OptionalElement() : LargeStringArraySegment_OptionalElement(nullptr) {}
  ~LargeStringArraySegment_OptionalElement() override;
  explicit constexpr LargeStringArraySegment_OptionalElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LargeStringArraySegment_OptionalElement(const LargeStringArraySegment_OptionalElement& from);
  LargeStringArraySegment_OptionalElement(LargeStringArraySegment_OptionalElement&& from) noexcept
    : LargeStringArraySegment_OptionalElement() {
    *this = ::std::move(from);
  }

  inline LargeStringArraySegment_OptionalElement& operator=(const LargeStringArraySegment_OptionalElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeStringArraySegment_OptionalElement& operator=(LargeStringArraySegment_OptionalElement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargeStringArraySegment_OptionalElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const LargeStringArraySegment_OptionalElement* internal_default_instance() {
    return reinterpret_cast<const LargeStringArraySegment_OptionalElement*>(
               &_LargeStringArraySegment_OptionalElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(LargeStringArraySegment_OptionalElement& a, LargeStringArraySegment_OptionalElement& b) {
    a.Swap(&b);
  }
  inline void Swap(LargeStringArraySegment_OptionalElement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeStringArraySegment_OptionalElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LargeStringArraySegment_OptionalElement* New() const final {
    return CreateMaybeMessage<LargeStringArraySegment_OptionalElement>(nullptr);
  }

  LargeStringArraySegment_OptionalElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LargeStringArraySegment_OptionalElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LargeStringArraySegment_OptionalElement& from);
  void MergeFrom(const LargeStringArraySegment_OptionalElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeStringArraySegment_OptionalElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.LargeStringArraySegment.OptionalElement";
  }
  protected:
  explicit LargeStringArraySegment_OptionalElement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
  };
  // optional string element = 1;
  bool has_element() const;
  private:
  bool _internal_has_element() const;
  public:
  void clear_element();
  const std::string& element() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_element(ArgT0&& arg0, ArgT... args);
  std::string* mutable_element();
  std::string* release_element();
  void set_allocated_element(std::string* element);
  private:
  const std::string& _internal_element() const;
  void _internal_set_element(const std::string& value);
  std::string* _internal_mutable_element();
  public:

  // @@protoc_insertion_point(class_scope:TSP.LargeStringArraySegment.OptionalElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr element_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class LargeStringArraySegment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.LargeStringArraySegment) */ {
 public:
  inline LargeStringArraySegment() : LargeStringArraySegment(nullptr) {}
  ~LargeStringArraySegment() override;
  explicit constexpr LargeStringArraySegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LargeStringArraySegment(const LargeStringArraySegment& from);
  LargeStringArraySegment(LargeStringArraySegment&& from) noexcept
    : LargeStringArraySegment() {
    *this = ::std::move(from);
  }

  inline LargeStringArraySegment& operator=(const LargeStringArraySegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeStringArraySegment& operator=(LargeStringArraySegment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargeStringArraySegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const LargeStringArraySegment* internal_default_instance() {
    return reinterpret_cast<const LargeStringArraySegment*>(
               &_LargeStringArraySegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(LargeStringArraySegment& a, LargeStringArraySegment& b) {
    a.Swap(&b);
  }
  inline void Swap(LargeStringArraySegment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeStringArraySegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LargeStringArraySegment* New() const final {
    return CreateMaybeMessage<LargeStringArraySegment>(nullptr);
  }

  LargeStringArraySegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LargeStringArraySegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LargeStringArraySegment& from);
  void MergeFrom(const LargeStringArraySegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeStringArraySegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.LargeStringArraySegment";
  }
  protected:
  explicit LargeStringArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LargeStringArraySegment_OptionalElement OptionalElement;

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 2,
    kLargeArraySegmentFieldNumber = 1,
  };
  // repeated .TSP.LargeStringArraySegment.OptionalElement elements = 2;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::TSP::LargeStringArraySegment_OptionalElement* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::LargeStringArraySegment_OptionalElement >*
      mutable_elements();
  private:
  const ::TSP::LargeStringArraySegment_OptionalElement& _internal_elements(int index) const;
  ::TSP::LargeStringArraySegment_OptionalElement* _internal_add_elements();
  public:
  const ::TSP::LargeStringArraySegment_OptionalElement& elements(int index) const;
  ::TSP::LargeStringArraySegment_OptionalElement* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::LargeStringArraySegment_OptionalElement >&
      elements() const;

  // optional .TSP.LargeArraySegment large_array_segment = 1;
  bool has_large_array_segment() const;
  private:
  bool _internal_has_large_array_segment() const;
  public:
  void clear_large_array_segment();
  const ::TSP::LargeArraySegment& large_array_segment() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::LargeArraySegment* release_large_array_segment();
  ::TSP::LargeArraySegment* mutable_large_array_segment();
  void set_allocated_large_array_segment(::TSP::LargeArraySegment* large_array_segment);
  private:
  const ::TSP::LargeArraySegment& _internal_large_array_segment() const;
  ::TSP::LargeArraySegment* _internal_mutable_large_array_segment();
  public:
  void unsafe_arena_set_allocated_large_array_segment(
      ::TSP::LargeArraySegment* large_array_segment);
  ::TSP::LargeArraySegment* unsafe_arena_release_large_array_segment();

  // @@protoc_insertion_point(class_scope:TSP.LargeStringArraySegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::LargeStringArraySegment_OptionalElement > elements_;
  ::TSP::LargeArraySegment* large_array_segment_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class LargeUUIDArraySegment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.LargeUUIDArraySegment) */ {
 public:
  inline LargeUUIDArraySegment() : LargeUUIDArraySegment(nullptr) {}
  ~LargeUUIDArraySegment() override;
  explicit constexpr LargeUUIDArraySegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LargeUUIDArraySegment(const LargeUUIDArraySegment& from);
  LargeUUIDArraySegment(LargeUUIDArraySegment&& from) noexcept
    : LargeUUIDArraySegment() {
    *this = ::std::move(from);
  }

  inline LargeUUIDArraySegment& operator=(const LargeUUIDArraySegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeUUIDArraySegment& operator=(LargeUUIDArraySegment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargeUUIDArraySegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const LargeUUIDArraySegment* internal_default_instance() {
    return reinterpret_cast<const LargeUUIDArraySegment*>(
               &_LargeUUIDArraySegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(LargeUUIDArraySegment& a, LargeUUIDArraySegment& b) {
    a.Swap(&b);
  }
  inline void Swap(LargeUUIDArraySegment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeUUIDArraySegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LargeUUIDArraySegment* New() const final {
    return CreateMaybeMessage<LargeUUIDArraySegment>(nullptr);
  }

  LargeUUIDArraySegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LargeUUIDArraySegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LargeUUIDArraySegment& from);
  void MergeFrom(const LargeUUIDArraySegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeUUIDArraySegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.LargeUUIDArraySegment";
  }
  protected:
  explicit LargeUUIDArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 2,
    kLargeArraySegmentFieldNumber = 1,
  };
  // repeated .TSP.UUID elements = 2;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::TSP::UUID* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_elements();
  private:
  const ::TSP::UUID& _internal_elements(int index) const;
  ::TSP::UUID* _internal_add_elements();
  public:
  const ::TSP::UUID& elements(int index) const;
  ::TSP::UUID* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      elements() const;

  // optional .TSP.LargeArraySegment large_array_segment = 1;
  bool has_large_array_segment() const;
  private:
  bool _internal_has_large_array_segment() const;
  public:
  void clear_large_array_segment();
  const ::TSP::LargeArraySegment& large_array_segment() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::LargeArraySegment* release_large_array_segment();
  ::TSP::LargeArraySegment* mutable_large_array_segment();
  void set_allocated_large_array_segment(::TSP::LargeArraySegment* large_array_segment);
  private:
  const ::TSP::LargeArraySegment& _internal_large_array_segment() const;
  ::TSP::LargeArraySegment* _internal_mutable_large_array_segment();
  public:
  void unsafe_arena_set_allocated_large_array_segment(
      ::TSP::LargeArraySegment* large_array_segment);
  ::TSP::LargeArraySegment* unsafe_arena_release_large_array_segment();

  // @@protoc_insertion_point(class_scope:TSP.LargeUUIDArraySegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > elements_;
  ::TSP::LargeArraySegment* large_array_segment_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class LargeLazyObjectArraySegment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.LargeLazyObjectArraySegment) */ {
 public:
  inline LargeLazyObjectArraySegment() : LargeLazyObjectArraySegment(nullptr) {}
  ~LargeLazyObjectArraySegment() override;
  explicit constexpr LargeLazyObjectArraySegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LargeLazyObjectArraySegment(const LargeLazyObjectArraySegment& from);
  LargeLazyObjectArraySegment(LargeLazyObjectArraySegment&& from) noexcept
    : LargeLazyObjectArraySegment() {
    *this = ::std::move(from);
  }

  inline LargeLazyObjectArraySegment& operator=(const LargeLazyObjectArraySegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeLazyObjectArraySegment& operator=(LargeLazyObjectArraySegment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargeLazyObjectArraySegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const LargeLazyObjectArraySegment* internal_default_instance() {
    return reinterpret_cast<const LargeLazyObjectArraySegment*>(
               &_LargeLazyObjectArraySegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(LargeLazyObjectArraySegment& a, LargeLazyObjectArraySegment& b) {
    a.Swap(&b);
  }
  inline void Swap(LargeLazyObjectArraySegment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeLazyObjectArraySegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LargeLazyObjectArraySegment* New() const final {
    return CreateMaybeMessage<LargeLazyObjectArraySegment>(nullptr);
  }

  LargeLazyObjectArraySegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LargeLazyObjectArraySegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LargeLazyObjectArraySegment& from);
  void MergeFrom(const LargeLazyObjectArraySegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeLazyObjectArraySegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.LargeLazyObjectArraySegment";
  }
  protected:
  explicit LargeLazyObjectArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 2,
    kLargeArraySegmentFieldNumber = 1,
  };
  // repeated .TSP.Reference elements = 2;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::TSP::Reference* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_elements();
  private:
  const ::TSP::Reference& _internal_elements(int index) const;
  ::TSP::Reference* _internal_add_elements();
  public:
  const ::TSP::Reference& elements(int index) const;
  ::TSP::Reference* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      elements() const;

  // optional .TSP.LargeArraySegment large_array_segment = 1;
  bool has_large_array_segment() const;
  private:
  bool _internal_has_large_array_segment() const;
  public:
  void clear_large_array_segment();
  const ::TSP::LargeArraySegment& large_array_segment() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::LargeArraySegment* release_large_array_segment();
  ::TSP::LargeArraySegment* mutable_large_array_segment();
  void set_allocated_large_array_segment(::TSP::LargeArraySegment* large_array_segment);
  private:
  const ::TSP::LargeArraySegment& _internal_large_array_segment() const;
  ::TSP::LargeArraySegment* _internal_mutable_large_array_segment();
  public:
  void unsafe_arena_set_allocated_large_array_segment(
      ::TSP::LargeArraySegment* large_array_segment);
  ::TSP::LargeArraySegment* unsafe_arena_release_large_array_segment();

  // @@protoc_insertion_point(class_scope:TSP.LargeLazyObjectArraySegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > elements_;
  ::TSP::LargeArraySegment* large_array_segment_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class LargeObjectArraySegment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.LargeObjectArraySegment) */ {
 public:
  inline LargeObjectArraySegment() : LargeObjectArraySegment(nullptr) {}
  ~LargeObjectArraySegment() override;
  explicit constexpr LargeObjectArraySegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LargeObjectArraySegment(const LargeObjectArraySegment& from);
  LargeObjectArraySegment(LargeObjectArraySegment&& from) noexcept
    : LargeObjectArraySegment() {
    *this = ::std::move(from);
  }

  inline LargeObjectArraySegment& operator=(const LargeObjectArraySegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeObjectArraySegment& operator=(LargeObjectArraySegment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargeObjectArraySegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const LargeObjectArraySegment* internal_default_instance() {
    return reinterpret_cast<const LargeObjectArraySegment*>(
               &_LargeObjectArraySegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(LargeObjectArraySegment& a, LargeObjectArraySegment& b) {
    a.Swap(&b);
  }
  inline void Swap(LargeObjectArraySegment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeObjectArraySegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LargeObjectArraySegment* New() const final {
    return CreateMaybeMessage<LargeObjectArraySegment>(nullptr);
  }

  LargeObjectArraySegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LargeObjectArraySegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LargeObjectArraySegment& from);
  void MergeFrom(const LargeObjectArraySegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeObjectArraySegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.LargeObjectArraySegment";
  }
  protected:
  explicit LargeObjectArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 2,
    kLargeArraySegmentFieldNumber = 1,
  };
  // repeated .TSP.Reference elements = 2;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::TSP::Reference* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_elements();
  private:
  const ::TSP::Reference& _internal_elements(int index) const;
  ::TSP::Reference* _internal_add_elements();
  public:
  const ::TSP::Reference& elements(int index) const;
  ::TSP::Reference* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      elements() const;

  // optional .TSP.LargeArraySegment large_array_segment = 1;
  bool has_large_array_segment() const;
  private:
  bool _internal_has_large_array_segment() const;
  public:
  void clear_large_array_segment();
  const ::TSP::LargeArraySegment& large_array_segment() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::LargeArraySegment* release_large_array_segment();
  ::TSP::LargeArraySegment* mutable_large_array_segment();
  void set_allocated_large_array_segment(::TSP::LargeArraySegment* large_array_segment);
  private:
  const ::TSP::LargeArraySegment& _internal_large_array_segment() const;
  ::TSP::LargeArraySegment* _internal_mutable_large_array_segment();
  public:
  void unsafe_arena_set_allocated_large_array_segment(
      ::TSP::LargeArraySegment* large_array_segment);
  ::TSP::LargeArraySegment* unsafe_arena_release_large_array_segment();

  // @@protoc_insertion_point(class_scope:TSP.LargeObjectArraySegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > elements_;
  ::TSP::LargeArraySegment* large_array_segment_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class LargeArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.LargeArray) */ {
 public:
  inline LargeArray() : LargeArray(nullptr) {}
  ~LargeArray() override;
  explicit constexpr LargeArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LargeArray(const LargeArray& from);
  LargeArray(LargeArray&& from) noexcept
    : LargeArray() {
    *this = ::std::move(from);
  }

  inline LargeArray& operator=(const LargeArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeArray& operator=(LargeArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargeArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const LargeArray* internal_default_instance() {
    return reinterpret_cast<const LargeArray*>(
               &_LargeArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(LargeArray& a, LargeArray& b) {
    a.Swap(&b);
  }
  inline void Swap(LargeArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LargeArray* New() const final {
    return CreateMaybeMessage<LargeArray>(nullptr);
  }

  LargeArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LargeArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LargeArray& from);
  void MergeFrom(const LargeArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.LargeArray";
  }
  protected:
  explicit LargeArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangesFieldNumber = 1,
    kSegmentsFieldNumber = 2,
    kMaxSegmentElementCountFieldNumber = 3,
    kMaxSegmentSizeFieldNumber = 4,
    kDelayedArchivingPriorityFieldNumber = 6,
    kShouldDelayArchivingFieldNumber = 5,
    kStoreOutsideObjectArchiveFieldNumber = 7,
    kEstimatedByteSizeFieldNumber = 8,
  };
  // repeated .TSP.Range ranges = 1;
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;
  public:
  void clear_ranges();
  ::TSP::Range* mutable_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >*
      mutable_ranges();
  private:
  const ::TSP::Range& _internal_ranges(int index) const;
  ::TSP::Range* _internal_add_ranges();
  public:
  const ::TSP::Range& ranges(int index) const;
  ::TSP::Range* add_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >&
      ranges() const;

  // repeated .TSP.Reference segments = 2;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  ::TSP::Reference* mutable_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_segments();
  private:
  const ::TSP::Reference& _internal_segments(int index) const;
  ::TSP::Reference* _internal_add_segments();
  public:
  const ::TSP::Reference& segments(int index) const;
  ::TSP::Reference* add_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      segments() const;

  // optional uint64 max_segment_element_count = 3;
  bool has_max_segment_element_count() const;
  private:
  bool _internal_has_max_segment_element_count() const;
  public:
  void clear_max_segment_element_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_segment_element_count() const;
  void set_max_segment_element_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_segment_element_count() const;
  void _internal_set_max_segment_element_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 max_segment_size = 4;
  bool has_max_segment_size() const;
  private:
  bool _internal_has_max_segment_size() const;
  public:
  void clear_max_segment_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_segment_size() const;
  void set_max_segment_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_segment_size() const;
  void _internal_set_max_segment_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 delayed_archiving_priority = 6;
  bool has_delayed_archiving_priority() const;
  private:
  bool _internal_has_delayed_archiving_priority() const;
  public:
  void clear_delayed_archiving_priority();
  ::PROTOBUF_NAMESPACE_ID::uint32 delayed_archiving_priority() const;
  void set_delayed_archiving_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_delayed_archiving_priority() const;
  void _internal_set_delayed_archiving_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool should_delay_archiving = 5;
  bool has_should_delay_archiving() const;
  private:
  bool _internal_has_should_delay_archiving() const;
  public:
  void clear_should_delay_archiving();
  bool should_delay_archiving() const;
  void set_should_delay_archiving(bool value);
  private:
  bool _internal_should_delay_archiving() const;
  void _internal_set_should_delay_archiving(bool value);
  public:

  // optional bool store_outside_object_archive = 7;
  bool has_store_outside_object_archive() const;
  private:
  bool _internal_has_store_outside_object_archive() const;
  public:
  void clear_store_outside_object_archive();
  bool store_outside_object_archive() const;
  void set_store_outside_object_archive(bool value);
  private:
  bool _internal_store_outside_object_archive() const;
  void _internal_set_store_outside_object_archive(bool value);
  public:

  // optional uint64 estimated_byte_size = 8;
  bool has_estimated_byte_size() const;
  private:
  bool _internal_has_estimated_byte_size() const;
  public:
  void clear_estimated_byte_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 estimated_byte_size() const;
  void set_estimated_byte_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_estimated_byte_size() const;
  void _internal_set_estimated_byte_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.LargeArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range > ranges_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > segments_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_segment_element_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_segment_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 delayed_archiving_priority_;
  bool should_delay_archiving_;
  bool store_outside_object_archive_;
  ::PROTOBUF_NAMESPACE_ID::uint64 estimated_byte_size_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class LargeNumberArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.LargeNumberArray) */ {
 public:
  inline LargeNumberArray() : LargeNumberArray(nullptr) {}
  ~LargeNumberArray() override;
  explicit constexpr LargeNumberArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LargeNumberArray(const LargeNumberArray& from);
  LargeNumberArray(LargeNumberArray&& from) noexcept
    : LargeNumberArray() {
    *this = ::std::move(from);
  }

  inline LargeNumberArray& operator=(const LargeNumberArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeNumberArray& operator=(LargeNumberArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargeNumberArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const LargeNumberArray* internal_default_instance() {
    return reinterpret_cast<const LargeNumberArray*>(
               &_LargeNumberArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(LargeNumberArray& a, LargeNumberArray& b) {
    a.Swap(&b);
  }
  inline void Swap(LargeNumberArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeNumberArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LargeNumberArray* New() const final {
    return CreateMaybeMessage<LargeNumberArray>(nullptr);
  }

  LargeNumberArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LargeNumberArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LargeNumberArray& from);
  void MergeFrom(const LargeNumberArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeNumberArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.LargeNumberArray";
  }
  protected:
  explicit LargeNumberArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLargeArrayFieldNumber = 1,
  };
  // optional .TSP.LargeArray large_array = 1;
  bool has_large_array() const;
  private:
  bool _internal_has_large_array() const;
  public:
  void clear_large_array();
  const ::TSP::LargeArray& large_array() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::LargeArray* release_large_array();
  ::TSP::LargeArray* mutable_large_array();
  void set_allocated_large_array(::TSP::LargeArray* large_array);
  private:
  const ::TSP::LargeArray& _internal_large_array() const;
  ::TSP::LargeArray* _internal_mutable_large_array();
  public:
  void unsafe_arena_set_allocated_large_array(
      ::TSP::LargeArray* large_array);
  ::TSP::LargeArray* unsafe_arena_release_large_array();

  // @@protoc_insertion_point(class_scope:TSP.LargeNumberArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::LargeArray* large_array_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class LargeStringArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.LargeStringArray) */ {
 public:
  inline LargeStringArray() : LargeStringArray(nullptr) {}
  ~LargeStringArray() override;
  explicit constexpr LargeStringArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LargeStringArray(const LargeStringArray& from);
  LargeStringArray(LargeStringArray&& from) noexcept
    : LargeStringArray() {
    *this = ::std::move(from);
  }

  inline LargeStringArray& operator=(const LargeStringArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeStringArray& operator=(LargeStringArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargeStringArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const LargeStringArray* internal_default_instance() {
    return reinterpret_cast<const LargeStringArray*>(
               &_LargeStringArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(LargeStringArray& a, LargeStringArray& b) {
    a.Swap(&b);
  }
  inline void Swap(LargeStringArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeStringArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LargeStringArray* New() const final {
    return CreateMaybeMessage<LargeStringArray>(nullptr);
  }

  LargeStringArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LargeStringArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LargeStringArray& from);
  void MergeFrom(const LargeStringArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeStringArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.LargeStringArray";
  }
  protected:
  explicit LargeStringArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLargeArrayFieldNumber = 1,
  };
  // optional .TSP.LargeArray large_array = 1;
  bool has_large_array() const;
  private:
  bool _internal_has_large_array() const;
  public:
  void clear_large_array();
  const ::TSP::LargeArray& large_array() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::LargeArray* release_large_array();
  ::TSP::LargeArray* mutable_large_array();
  void set_allocated_large_array(::TSP::LargeArray* large_array);
  private:
  const ::TSP::LargeArray& _internal_large_array() const;
  ::TSP::LargeArray* _internal_mutable_large_array();
  public:
  void unsafe_arena_set_allocated_large_array(
      ::TSP::LargeArray* large_array);
  ::TSP::LargeArray* unsafe_arena_release_large_array();

  // @@protoc_insertion_point(class_scope:TSP.LargeStringArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::LargeArray* large_array_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class LargeLazyObjectArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.LargeLazyObjectArray) */ {
 public:
  inline LargeLazyObjectArray() : LargeLazyObjectArray(nullptr) {}
  ~LargeLazyObjectArray() override;
  explicit constexpr LargeLazyObjectArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LargeLazyObjectArray(const LargeLazyObjectArray& from);
  LargeLazyObjectArray(LargeLazyObjectArray&& from) noexcept
    : LargeLazyObjectArray() {
    *this = ::std::move(from);
  }

  inline LargeLazyObjectArray& operator=(const LargeLazyObjectArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeLazyObjectArray& operator=(LargeLazyObjectArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargeLazyObjectArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const LargeLazyObjectArray* internal_default_instance() {
    return reinterpret_cast<const LargeLazyObjectArray*>(
               &_LargeLazyObjectArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(LargeLazyObjectArray& a, LargeLazyObjectArray& b) {
    a.Swap(&b);
  }
  inline void Swap(LargeLazyObjectArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeLazyObjectArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LargeLazyObjectArray* New() const final {
    return CreateMaybeMessage<LargeLazyObjectArray>(nullptr);
  }

  LargeLazyObjectArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LargeLazyObjectArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LargeLazyObjectArray& from);
  void MergeFrom(const LargeLazyObjectArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeLazyObjectArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.LargeLazyObjectArray";
  }
  protected:
  explicit LargeLazyObjectArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLargeArrayFieldNumber = 1,
  };
  // optional .TSP.LargeArray large_array = 1;
  bool has_large_array() const;
  private:
  bool _internal_has_large_array() const;
  public:
  void clear_large_array();
  const ::TSP::LargeArray& large_array() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::LargeArray* release_large_array();
  ::TSP::LargeArray* mutable_large_array();
  void set_allocated_large_array(::TSP::LargeArray* large_array);
  private:
  const ::TSP::LargeArray& _internal_large_array() const;
  ::TSP::LargeArray* _internal_mutable_large_array();
  public:
  void unsafe_arena_set_allocated_large_array(
      ::TSP::LargeArray* large_array);
  ::TSP::LargeArray* unsafe_arena_release_large_array();

  // @@protoc_insertion_point(class_scope:TSP.LargeLazyObjectArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::LargeArray* large_array_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class LargeObjectArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.LargeObjectArray) */ {
 public:
  inline LargeObjectArray() : LargeObjectArray(nullptr) {}
  ~LargeObjectArray() override;
  explicit constexpr LargeObjectArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LargeObjectArray(const LargeObjectArray& from);
  LargeObjectArray(LargeObjectArray&& from) noexcept
    : LargeObjectArray() {
    *this = ::std::move(from);
  }

  inline LargeObjectArray& operator=(const LargeObjectArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeObjectArray& operator=(LargeObjectArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargeObjectArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const LargeObjectArray* internal_default_instance() {
    return reinterpret_cast<const LargeObjectArray*>(
               &_LargeObjectArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(LargeObjectArray& a, LargeObjectArray& b) {
    a.Swap(&b);
  }
  inline void Swap(LargeObjectArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeObjectArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LargeObjectArray* New() const final {
    return CreateMaybeMessage<LargeObjectArray>(nullptr);
  }

  LargeObjectArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LargeObjectArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LargeObjectArray& from);
  void MergeFrom(const LargeObjectArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeObjectArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.LargeObjectArray";
  }
  protected:
  explicit LargeObjectArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLargeArrayFieldNumber = 1,
  };
  // optional .TSP.LargeArray large_array = 1;
  bool has_large_array() const;
  private:
  bool _internal_has_large_array() const;
  public:
  void clear_large_array();
  const ::TSP::LargeArray& large_array() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::LargeArray* release_large_array();
  ::TSP::LargeArray* mutable_large_array();
  void set_allocated_large_array(::TSP::LargeArray* large_array);
  private:
  const ::TSP::LargeArray& _internal_large_array() const;
  ::TSP::LargeArray* _internal_mutable_large_array();
  public:
  void unsafe_arena_set_allocated_large_array(
      ::TSP::LargeArray* large_array);
  ::TSP::LargeArray* unsafe_arena_release_large_array();

  // @@protoc_insertion_point(class_scope:TSP.LargeObjectArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::LargeArray* large_array_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// -------------------------------------------------------------------

class LargeUUIDArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.LargeUUIDArray) */ {
 public:
  inline LargeUUIDArray() : LargeUUIDArray(nullptr) {}
  ~LargeUUIDArray() override;
  explicit constexpr LargeUUIDArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LargeUUIDArray(const LargeUUIDArray& from);
  LargeUUIDArray(LargeUUIDArray&& from) noexcept
    : LargeUUIDArray() {
    *this = ::std::move(from);
  }

  inline LargeUUIDArray& operator=(const LargeUUIDArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeUUIDArray& operator=(LargeUUIDArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LargeUUIDArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const LargeUUIDArray* internal_default_instance() {
    return reinterpret_cast<const LargeUUIDArray*>(
               &_LargeUUIDArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(LargeUUIDArray& a, LargeUUIDArray& b) {
    a.Swap(&b);
  }
  inline void Swap(LargeUUIDArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LargeUUIDArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LargeUUIDArray* New() const final {
    return CreateMaybeMessage<LargeUUIDArray>(nullptr);
  }

  LargeUUIDArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LargeUUIDArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LargeUUIDArray& from);
  void MergeFrom(const LargeUUIDArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeUUIDArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.LargeUUIDArray";
  }
  protected:
  explicit LargeUUIDArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLargeArrayFieldNumber = 1,
  };
  // optional .TSP.LargeArray large_array = 1;
  bool has_large_array() const;
  private:
  bool _internal_has_large_array() const;
  public:
  void clear_large_array();
  const ::TSP::LargeArray& large_array() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::LargeArray* release_large_array();
  ::TSP::LargeArray* mutable_large_array();
  void set_allocated_large_array(::TSP::LargeArray* large_array);
  private:
  const ::TSP::LargeArray& _internal_large_array() const;
  ::TSP::LargeArray* _internal_mutable_large_array();
  public:
  void unsafe_arena_set_allocated_large_array(
      ::TSP::LargeArray* large_array);
  ::TSP::LargeArray* unsafe_arena_release_large_array();

  // @@protoc_insertion_point(class_scope:TSP.LargeUUIDArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::LargeArray* large_array_;
  friend struct ::TableStruct_TSPMessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Reference

// required uint64 identifier = 1;
inline bool Reference::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Reference::has_identifier() const {
  return _internal_has_identifier();
}
inline void Reference::clear_identifier() {
  identifier_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Reference::_internal_identifier() const {
  return identifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Reference::identifier() const {
  // @@protoc_insertion_point(field_get:TSP.Reference.identifier)
  return _internal_identifier();
}
inline void Reference::_internal_set_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_ = value;
}
inline void Reference::set_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:TSP.Reference.identifier)
}

// optional int32 deprecated_type = 2;
inline bool Reference::_internal_has_deprecated_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Reference::has_deprecated_type() const {
  return _internal_has_deprecated_type();
}
inline void Reference::clear_deprecated_type() {
  deprecated_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Reference::_internal_deprecated_type() const {
  return deprecated_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Reference::deprecated_type() const {
  // @@protoc_insertion_point(field_get:TSP.Reference.deprecated_type)
  return _internal_deprecated_type();
}
inline void Reference::_internal_set_deprecated_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  deprecated_type_ = value;
}
inline void Reference::set_deprecated_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_deprecated_type(value);
  // @@protoc_insertion_point(field_set:TSP.Reference.deprecated_type)
}

// optional bool deprecated_is_external = 3;
inline bool Reference::_internal_has_deprecated_is_external() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Reference::has_deprecated_is_external() const {
  return _internal_has_deprecated_is_external();
}
inline void Reference::clear_deprecated_is_external() {
  deprecated_is_external_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Reference::_internal_deprecated_is_external() const {
  return deprecated_is_external_;
}
inline bool Reference::deprecated_is_external() const {
  // @@protoc_insertion_point(field_get:TSP.Reference.deprecated_is_external)
  return _internal_deprecated_is_external();
}
inline void Reference::_internal_set_deprecated_is_external(bool value) {
  _has_bits_[0] |= 0x00000004u;
  deprecated_is_external_ = value;
}
inline void Reference::set_deprecated_is_external(bool value) {
  _internal_set_deprecated_is_external(value);
  // @@protoc_insertion_point(field_set:TSP.Reference.deprecated_is_external)
}

// -------------------------------------------------------------------

// DataReference

// required uint64 identifier = 1;
inline bool DataReference::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataReference::has_identifier() const {
  return _internal_has_identifier();
}
inline void DataReference::clear_identifier() {
  identifier_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DataReference::_internal_identifier() const {
  return identifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DataReference::identifier() const {
  // @@protoc_insertion_point(field_get:TSP.DataReference.identifier)
  return _internal_identifier();
}
inline void DataReference::_internal_set_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_ = value;
}
inline void DataReference::set_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:TSP.DataReference.identifier)
}

// -------------------------------------------------------------------

// SparseReferenceArray_Entry

// required uint32 index = 1;
inline bool SparseReferenceArray_Entry::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SparseReferenceArray_Entry::has_index() const {
  return _internal_has_index();
}
inline void SparseReferenceArray_Entry::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseReferenceArray_Entry::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseReferenceArray_Entry::index() const {
  // @@protoc_insertion_point(field_get:TSP.SparseReferenceArray.Entry.index)
  return _internal_index();
}
inline void SparseReferenceArray_Entry::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  index_ = value;
}
inline void SparseReferenceArray_Entry::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TSP.SparseReferenceArray.Entry.index)
}

// required .TSP.Reference reference = 2;
inline bool SparseReferenceArray_Entry::_internal_has_reference() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || reference_ != nullptr);
  return value;
}
inline bool SparseReferenceArray_Entry::has_reference() const {
  return _internal_has_reference();
}
inline void SparseReferenceArray_Entry::clear_reference() {
  if (reference_ != nullptr) reference_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSP::Reference& SparseReferenceArray_Entry::_internal_reference() const {
  const ::TSP::Reference* p = reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SparseReferenceArray_Entry::reference() const {
  // @@protoc_insertion_point(field_get:TSP.SparseReferenceArray.Entry.reference)
  return _internal_reference();
}
inline void SparseReferenceArray_Entry::unsafe_arena_set_allocated_reference(
    ::TSP::Reference* reference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_);
  }
  reference_ = reference;
  if (reference) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.SparseReferenceArray.Entry.reference)
}
inline ::TSP::Reference* SparseReferenceArray_Entry::release_reference() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = reference_;
  reference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SparseReferenceArray_Entry::unsafe_arena_release_reference() {
  // @@protoc_insertion_point(field_release:TSP.SparseReferenceArray.Entry.reference)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = reference_;
  reference_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SparseReferenceArray_Entry::_internal_mutable_reference() {
  _has_bits_[0] |= 0x00000001u;
  if (reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    reference_ = p;
  }
  return reference_;
}
inline ::TSP::Reference* SparseReferenceArray_Entry::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:TSP.SparseReferenceArray.Entry.reference)
  return _internal_mutable_reference();
}
inline void SparseReferenceArray_Entry::set_allocated_reference(::TSP::Reference* reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reference_;
  }
  if (reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reference);
    if (message_arena != submessage_arena) {
      reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reference_ = reference;
  // @@protoc_insertion_point(field_set_allocated:TSP.SparseReferenceArray.Entry.reference)
}

// -------------------------------------------------------------------

// SparseReferenceArray

// required uint32 count = 1;
inline bool SparseReferenceArray::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SparseReferenceArray::has_count() const {
  return _internal_has_count();
}
inline void SparseReferenceArray::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseReferenceArray::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseReferenceArray::count() const {
  // @@protoc_insertion_point(field_get:TSP.SparseReferenceArray.count)
  return _internal_count();
}
inline void SparseReferenceArray::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  count_ = value;
}
inline void SparseReferenceArray::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:TSP.SparseReferenceArray.count)
}

// repeated .TSP.SparseReferenceArray.Entry entries = 2;
inline int SparseReferenceArray::_internal_entries_size() const {
  return entries_.size();
}
inline int SparseReferenceArray::entries_size() const {
  return _internal_entries_size();
}
inline void SparseReferenceArray::clear_entries() {
  entries_.Clear();
}
inline ::TSP::SparseReferenceArray_Entry* SparseReferenceArray::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.SparseReferenceArray.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::SparseReferenceArray_Entry >*
SparseReferenceArray::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSP.SparseReferenceArray.entries)
  return &entries_;
}
inline const ::TSP::SparseReferenceArray_Entry& SparseReferenceArray::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::TSP::SparseReferenceArray_Entry& SparseReferenceArray::entries(int index) const {
  // @@protoc_insertion_point(field_get:TSP.SparseReferenceArray.entries)
  return _internal_entries(index);
}
inline ::TSP::SparseReferenceArray_Entry* SparseReferenceArray::_internal_add_entries() {
  return entries_.Add();
}
inline ::TSP::SparseReferenceArray_Entry* SparseReferenceArray::add_entries() {
  // @@protoc_insertion_point(field_add:TSP.SparseReferenceArray.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::SparseReferenceArray_Entry >&
SparseReferenceArray::entries() const {
  // @@protoc_insertion_point(field_list:TSP.SparseReferenceArray.entries)
  return entries_;
}

// -------------------------------------------------------------------

// Point

// required float x = 1;
inline bool Point::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Point::has_x() const {
  return _internal_has_x();
}
inline void Point::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Point::_internal_x() const {
  return x_;
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:TSP.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Point::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:TSP.Point.x)
}

// required float y = 2;
inline bool Point::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Point::has_y() const {
  return _internal_has_y();
}
inline void Point::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Point::_internal_y() const {
  return y_;
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:TSP.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Point::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:TSP.Point.y)
}

// -------------------------------------------------------------------

// Size

// required float width = 1;
inline bool Size::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Size::has_width() const {
  return _internal_has_width();
}
inline void Size::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Size::_internal_width() const {
  return width_;
}
inline float Size::width() const {
  // @@protoc_insertion_point(field_get:TSP.Size.width)
  return _internal_width();
}
inline void Size::_internal_set_width(float value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
}
inline void Size::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:TSP.Size.width)
}

// required float height = 2;
inline bool Size::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Size::has_height() const {
  return _internal_has_height();
}
inline void Size::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Size::_internal_height() const {
  return height_;
}
inline float Size::height() const {
  // @@protoc_insertion_point(field_get:TSP.Size.height)
  return _internal_height();
}
inline void Size::_internal_set_height(float value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void Size::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:TSP.Size.height)
}

// -------------------------------------------------------------------

// Range

// required uint32 location = 1;
inline bool Range::_internal_has_location() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Range::has_location() const {
  return _internal_has_location();
}
inline void Range::clear_location() {
  location_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Range::_internal_location() const {
  return location_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Range::location() const {
  // @@protoc_insertion_point(field_get:TSP.Range.location)
  return _internal_location();
}
inline void Range::_internal_set_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  location_ = value;
}
inline void Range::set_location(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:TSP.Range.location)
}

// required uint32 length = 2;
inline bool Range::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Range::has_length() const {
  return _internal_has_length();
}
inline void Range::clear_length() {
  length_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Range::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Range::length() const {
  // @@protoc_insertion_point(field_get:TSP.Range.length)
  return _internal_length();
}
inline void Range::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  length_ = value;
}
inline void Range::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:TSP.Range.length)
}

// -------------------------------------------------------------------

// Date

// required double seconds = 1;
inline bool Date::_internal_has_seconds() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Date::has_seconds() const {
  return _internal_has_seconds();
}
inline void Date::clear_seconds() {
  seconds_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Date::_internal_seconds() const {
  return seconds_;
}
inline double Date::seconds() const {
  // @@protoc_insertion_point(field_get:TSP.Date.seconds)
  return _internal_seconds();
}
inline void Date::_internal_set_seconds(double value) {
  _has_bits_[0] |= 0x00000001u;
  seconds_ = value;
}
inline void Date::set_seconds(double value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:TSP.Date.seconds)
}

// -------------------------------------------------------------------

// IndexSet

// repeated .TSP.Range ranges = 1;
inline int IndexSet::_internal_ranges_size() const {
  return ranges_.size();
}
inline int IndexSet::ranges_size() const {
  return _internal_ranges_size();
}
inline void IndexSet::clear_ranges() {
  ranges_.Clear();
}
inline ::TSP::Range* IndexSet::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.IndexSet.ranges)
  return ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >*
IndexSet::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:TSP.IndexSet.ranges)
  return &ranges_;
}
inline const ::TSP::Range& IndexSet::_internal_ranges(int index) const {
  return ranges_.Get(index);
}
inline const ::TSP::Range& IndexSet::ranges(int index) const {
  // @@protoc_insertion_point(field_get:TSP.IndexSet.ranges)
  return _internal_ranges(index);
}
inline ::TSP::Range* IndexSet::_internal_add_ranges() {
  return ranges_.Add();
}
inline ::TSP::Range* IndexSet::add_ranges() {
  // @@protoc_insertion_point(field_add:TSP.IndexSet.ranges)
  return _internal_add_ranges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >&
IndexSet::ranges() const {
  // @@protoc_insertion_point(field_list:TSP.IndexSet.ranges)
  return ranges_;
}

// -------------------------------------------------------------------

// Color

// required .TSP.Color.ColorModel model = 1;
inline bool Color::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Color::has_model() const {
  return _internal_has_model();
}
inline void Color::clear_model() {
  model_ = 1;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::TSP::Color_ColorModel Color::_internal_model() const {
  return static_cast< ::TSP::Color_ColorModel >(model_);
}
inline ::TSP::Color_ColorModel Color::model() const {
  // @@protoc_insertion_point(field_get:TSP.Color.model)
  return _internal_model();
}
inline void Color::_internal_set_model(::TSP::Color_ColorModel value) {
  assert(::TSP::Color_ColorModel_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  model_ = value;
}
inline void Color::set_model(::TSP::Color_ColorModel value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:TSP.Color.model)
}

// optional float r = 3;
inline bool Color::_internal_has_r() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Color::has_r() const {
  return _internal_has_r();
}
inline void Color::clear_r() {
  r_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Color::_internal_r() const {
  return r_;
}
inline float Color::r() const {
  // @@protoc_insertion_point(field_get:TSP.Color.r)
  return _internal_r();
}
inline void Color::_internal_set_r(float value) {
  _has_bits_[0] |= 0x00000001u;
  r_ = value;
}
inline void Color::set_r(float value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:TSP.Color.r)
}

// optional float g = 4;
inline bool Color::_internal_has_g() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Color::has_g() const {
  return _internal_has_g();
}
inline void Color::clear_g() {
  g_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Color::_internal_g() const {
  return g_;
}
inline float Color::g() const {
  // @@protoc_insertion_point(field_get:TSP.Color.g)
  return _internal_g();
}
inline void Color::_internal_set_g(float value) {
  _has_bits_[0] |= 0x00000002u;
  g_ = value;
}
inline void Color::set_g(float value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:TSP.Color.g)
}

// optional float b = 5;
inline bool Color::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Color::has_b() const {
  return _internal_has_b();
}
inline void Color::clear_b() {
  b_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Color::_internal_b() const {
  return b_;
}
inline float Color::b() const {
  // @@protoc_insertion_point(field_get:TSP.Color.b)
  return _internal_b();
}
inline void Color::_internal_set_b(float value) {
  _has_bits_[0] |= 0x00000004u;
  b_ = value;
}
inline void Color::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:TSP.Color.b)
}

// optional .TSP.Color.RGBColorSpace rgbspace = 12;
inline bool Color::_internal_has_rgbspace() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Color::has_rgbspace() const {
  return _internal_has_rgbspace();
}
inline void Color::clear_rgbspace() {
  rgbspace_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::TSP::Color_RGBColorSpace Color::_internal_rgbspace() const {
  return static_cast< ::TSP::Color_RGBColorSpace >(rgbspace_);
}
inline ::TSP::Color_RGBColorSpace Color::rgbspace() const {
  // @@protoc_insertion_point(field_get:TSP.Color.rgbspace)
  return _internal_rgbspace();
}
inline void Color::_internal_set_rgbspace(::TSP::Color_RGBColorSpace value) {
  assert(::TSP::Color_RGBColorSpace_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  rgbspace_ = value;
}
inline void Color::set_rgbspace(::TSP::Color_RGBColorSpace value) {
  _internal_set_rgbspace(value);
  // @@protoc_insertion_point(field_set:TSP.Color.rgbspace)
}

// optional float a = 6 [default = 1];
inline bool Color::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Color::has_a() const {
  return _internal_has_a();
}
inline void Color::clear_a() {
  a_ = 1;
  _has_bits_[0] &= ~0x00000400u;
}
inline float Color::_internal_a() const {
  return a_;
}
inline float Color::a() const {
  // @@protoc_insertion_point(field_get:TSP.Color.a)
  return _internal_a();
}
inline void Color::_internal_set_a(float value) {
  _has_bits_[0] |= 0x00000400u;
  a_ = value;
}
inline void Color::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:TSP.Color.a)
}

// optional float c = 7;
inline bool Color::_internal_has_c() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Color::has_c() const {
  return _internal_has_c();
}
inline void Color::clear_c() {
  c_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Color::_internal_c() const {
  return c_;
}
inline float Color::c() const {
  // @@protoc_insertion_point(field_get:TSP.Color.c)
  return _internal_c();
}
inline void Color::_internal_set_c(float value) {
  _has_bits_[0] |= 0x00000008u;
  c_ = value;
}
inline void Color::set_c(float value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:TSP.Color.c)
}

// optional float m = 8;
inline bool Color::_internal_has_m() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Color::has_m() const {
  return _internal_has_m();
}
inline void Color::clear_m() {
  m_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Color::_internal_m() const {
  return m_;
}
inline float Color::m() const {
  // @@protoc_insertion_point(field_get:TSP.Color.m)
  return _internal_m();
}
inline void Color::_internal_set_m(float value) {
  _has_bits_[0] |= 0x00000010u;
  m_ = value;
}
inline void Color::set_m(float value) {
  _internal_set_m(value);
  // @@protoc_insertion_point(field_set:TSP.Color.m)
}

// optional float y = 9;
inline bool Color::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Color::has_y() const {
  return _internal_has_y();
}
inline void Color::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Color::_internal_y() const {
  return y_;
}
inline float Color::y() const {
  // @@protoc_insertion_point(field_get:TSP.Color.y)
  return _internal_y();
}
inline void Color::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000020u;
  y_ = value;
}
inline void Color::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:TSP.Color.y)
}

// optional float k = 10;
inline bool Color::_internal_has_k() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Color::has_k() const {
  return _internal_has_k();
}
inline void Color::clear_k() {
  k_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float Color::_internal_k() const {
  return k_;
}
inline float Color::k() const {
  // @@protoc_insertion_point(field_get:TSP.Color.k)
  return _internal_k();
}
inline void Color::_internal_set_k(float value) {
  _has_bits_[0] |= 0x00000040u;
  k_ = value;
}
inline void Color::set_k(float value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:TSP.Color.k)
}

// optional float w = 11;
inline bool Color::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Color::has_w() const {
  return _internal_has_w();
}
inline void Color::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float Color::_internal_w() const {
  return w_;
}
inline float Color::w() const {
  // @@protoc_insertion_point(field_get:TSP.Color.w)
  return _internal_w();
}
inline void Color::_internal_set_w(float value) {
  _has_bits_[0] |= 0x00000080u;
  w_ = value;
}
inline void Color::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:TSP.Color.w)
}

// -------------------------------------------------------------------

// Path_Element

// required .TSP.Path.ElementType type = 1;
inline bool Path_Element::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Path_Element::has_type() const {
  return _internal_has_type();
}
inline void Path_Element::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::TSP::Path_ElementType Path_Element::_internal_type() const {
  return static_cast< ::TSP::Path_ElementType >(type_);
}
inline ::TSP::Path_ElementType Path_Element::type() const {
  // @@protoc_insertion_point(field_get:TSP.Path.Element.type)
  return _internal_type();
}
inline void Path_Element::_internal_set_type(::TSP::Path_ElementType value) {
  assert(::TSP::Path_ElementType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void Path_Element::set_type(::TSP::Path_ElementType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TSP.Path.Element.type)
}

// repeated .TSP.Point points = 2;
inline int Path_Element::_internal_points_size() const {
  return points_.size();
}
inline int Path_Element::points_size() const {
  return _internal_points_size();
}
inline void Path_Element::clear_points() {
  points_.Clear();
}
inline ::TSP::Point* Path_Element::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.Path.Element.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Point >*
Path_Element::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:TSP.Path.Element.points)
  return &points_;
}
inline const ::TSP::Point& Path_Element::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::TSP::Point& Path_Element::points(int index) const {
  // @@protoc_insertion_point(field_get:TSP.Path.Element.points)
  return _internal_points(index);
}
inline ::TSP::Point* Path_Element::_internal_add_points() {
  return points_.Add();
}
inline ::TSP::Point* Path_Element::add_points() {
  // @@protoc_insertion_point(field_add:TSP.Path.Element.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Point >&
Path_Element::points() const {
  // @@protoc_insertion_point(field_list:TSP.Path.Element.points)
  return points_;
}

// -------------------------------------------------------------------

// Path

// repeated .TSP.Path.Element elements = 1;
inline int Path::_internal_elements_size() const {
  return elements_.size();
}
inline int Path::elements_size() const {
  return _internal_elements_size();
}
inline void Path::clear_elements() {
  elements_.Clear();
}
inline ::TSP::Path_Element* Path::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.Path.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Path_Element >*
Path::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:TSP.Path.elements)
  return &elements_;
}
inline const ::TSP::Path_Element& Path::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::TSP::Path_Element& Path::elements(int index) const {
  // @@protoc_insertion_point(field_get:TSP.Path.elements)
  return _internal_elements(index);
}
inline ::TSP::Path_Element* Path::_internal_add_elements() {
  return elements_.Add();
}
inline ::TSP::Path_Element* Path::add_elements() {
  // @@protoc_insertion_point(field_add:TSP.Path.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Path_Element >&
Path::elements() const {
  // @@protoc_insertion_point(field_list:TSP.Path.elements)
  return elements_;
}

// -------------------------------------------------------------------

// ReferenceDictionary_Entry

// required .TSP.Reference key = 1;
inline bool ReferenceDictionary_Entry::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || key_ != nullptr);
  return value;
}
inline bool ReferenceDictionary_Entry::has_key() const {
  return _internal_has_key();
}
inline void ReferenceDictionary_Entry::clear_key() {
  if (key_ != nullptr) key_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSP::Reference& ReferenceDictionary_Entry::_internal_key() const {
  const ::TSP::Reference* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ReferenceDictionary_Entry::key() const {
  // @@protoc_insertion_point(field_get:TSP.ReferenceDictionary.Entry.key)
  return _internal_key();
}
inline void ReferenceDictionary_Entry::unsafe_arena_set_allocated_key(
    ::TSP::Reference* key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.ReferenceDictionary.Entry.key)
}
inline ::TSP::Reference* ReferenceDictionary_Entry::release_key() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = key_;
  key_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ReferenceDictionary_Entry::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:TSP.ReferenceDictionary.Entry.key)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ReferenceDictionary_Entry::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    key_ = p;
  }
  return key_;
}
inline ::TSP::Reference* ReferenceDictionary_Entry::mutable_key() {
  // @@protoc_insertion_point(field_mutable:TSP.ReferenceDictionary.Entry.key)
  return _internal_mutable_key();
}
inline void ReferenceDictionary_Entry::set_allocated_key(::TSP::Reference* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:TSP.ReferenceDictionary.Entry.key)
}

// required .TSP.Reference value = 2;
inline bool ReferenceDictionary_Entry::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool ReferenceDictionary_Entry::has_value() const {
  return _internal_has_value();
}
inline void ReferenceDictionary_Entry::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSP::Reference& ReferenceDictionary_Entry::_internal_value() const {
  const ::TSP::Reference* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ReferenceDictionary_Entry::value() const {
  // @@protoc_insertion_point(field_get:TSP.ReferenceDictionary.Entry.value)
  return _internal_value();
}
inline void ReferenceDictionary_Entry::unsafe_arena_set_allocated_value(
    ::TSP::Reference* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.ReferenceDictionary.Entry.value)
}
inline ::TSP::Reference* ReferenceDictionary_Entry::release_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ReferenceDictionary_Entry::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:TSP.ReferenceDictionary.Entry.value)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ReferenceDictionary_Entry::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::TSP::Reference* ReferenceDictionary_Entry::mutable_value() {
  // @@protoc_insertion_point(field_mutable:TSP.ReferenceDictionary.Entry.value)
  return _internal_mutable_value();
}
inline void ReferenceDictionary_Entry::set_allocated_value(::TSP::Reference* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:TSP.ReferenceDictionary.Entry.value)
}

// -------------------------------------------------------------------

// ReferenceDictionary

// repeated .TSP.ReferenceDictionary.Entry entries = 1;
inline int ReferenceDictionary::_internal_entries_size() const {
  return entries_.size();
}
inline int ReferenceDictionary::entries_size() const {
  return _internal_entries_size();
}
inline void ReferenceDictionary::clear_entries() {
  entries_.Clear();
}
inline ::TSP::ReferenceDictionary_Entry* ReferenceDictionary::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.ReferenceDictionary.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::ReferenceDictionary_Entry >*
ReferenceDictionary::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSP.ReferenceDictionary.entries)
  return &entries_;
}
inline const ::TSP::ReferenceDictionary_Entry& ReferenceDictionary::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::TSP::ReferenceDictionary_Entry& ReferenceDictionary::entries(int index) const {
  // @@protoc_insertion_point(field_get:TSP.ReferenceDictionary.entries)
  return _internal_entries(index);
}
inline ::TSP::ReferenceDictionary_Entry* ReferenceDictionary::_internal_add_entries() {
  return entries_.Add();
}
inline ::TSP::ReferenceDictionary_Entry* ReferenceDictionary::add_entries() {
  // @@protoc_insertion_point(field_add:TSP.ReferenceDictionary.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::ReferenceDictionary_Entry >&
ReferenceDictionary::entries() const {
  // @@protoc_insertion_point(field_list:TSP.ReferenceDictionary.entries)
  return entries_;
}

// -------------------------------------------------------------------

// UUID

// required uint64 lower = 1;
inline bool UUID::_internal_has_lower() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UUID::has_lower() const {
  return _internal_has_lower();
}
inline void UUID::clear_lower() {
  lower_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UUID::_internal_lower() const {
  return lower_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UUID::lower() const {
  // @@protoc_insertion_point(field_get:TSP.UUID.lower)
  return _internal_lower();
}
inline void UUID::_internal_set_lower(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  lower_ = value;
}
inline void UUID::set_lower(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lower(value);
  // @@protoc_insertion_point(field_set:TSP.UUID.lower)
}

// required uint64 upper = 2;
inline bool UUID::_internal_has_upper() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UUID::has_upper() const {
  return _internal_has_upper();
}
inline void UUID::clear_upper() {
  upper_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UUID::_internal_upper() const {
  return upper_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UUID::upper() const {
  // @@protoc_insertion_point(field_get:TSP.UUID.upper)
  return _internal_upper();
}
inline void UUID::_internal_set_upper(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  upper_ = value;
}
inline void UUID::set_upper(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_upper(value);
  // @@protoc_insertion_point(field_set:TSP.UUID.upper)
}

// -------------------------------------------------------------------

// CFUUIDArchive

// optional bytes uuid_bytes = 1;
inline bool CFUUIDArchive::_internal_has_uuid_bytes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFUUIDArchive::has_uuid_bytes() const {
  return _internal_has_uuid_bytes();
}
inline void CFUUIDArchive::clear_uuid_bytes() {
  uuid_bytes_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CFUUIDArchive::uuid_bytes() const {
  // @@protoc_insertion_point(field_get:TSP.CFUUIDArchive.uuid_bytes)
  return _internal_uuid_bytes();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CFUUIDArchive::set_uuid_bytes(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 uuid_bytes_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSP.CFUUIDArchive.uuid_bytes)
}
inline std::string* CFUUIDArchive::mutable_uuid_bytes() {
  // @@protoc_insertion_point(field_mutable:TSP.CFUUIDArchive.uuid_bytes)
  return _internal_mutable_uuid_bytes();
}
inline const std::string& CFUUIDArchive::_internal_uuid_bytes() const {
  return uuid_bytes_.Get();
}
inline void CFUUIDArchive::_internal_set_uuid_bytes(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CFUUIDArchive::_internal_mutable_uuid_bytes() {
  _has_bits_[0] |= 0x00000001u;
  return uuid_bytes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CFUUIDArchive::release_uuid_bytes() {
  // @@protoc_insertion_point(field_release:TSP.CFUUIDArchive.uuid_bytes)
  if (!_internal_has_uuid_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uuid_bytes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CFUUIDArchive::set_allocated_uuid_bytes(std::string* uuid_bytes) {
  if (uuid_bytes != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid_bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSP.CFUUIDArchive.uuid_bytes)
}

// optional uint32 uuid_w0 = 2;
inline bool CFUUIDArchive::_internal_has_uuid_w0() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CFUUIDArchive::has_uuid_w0() const {
  return _internal_has_uuid_w0();
}
inline void CFUUIDArchive::clear_uuid_w0() {
  uuid_w0_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFUUIDArchive::_internal_uuid_w0() const {
  return uuid_w0_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFUUIDArchive::uuid_w0() const {
  // @@protoc_insertion_point(field_get:TSP.CFUUIDArchive.uuid_w0)
  return _internal_uuid_w0();
}
inline void CFUUIDArchive::_internal_set_uuid_w0(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  uuid_w0_ = value;
}
inline void CFUUIDArchive::set_uuid_w0(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uuid_w0(value);
  // @@protoc_insertion_point(field_set:TSP.CFUUIDArchive.uuid_w0)
}

// optional uint32 uuid_w1 = 3;
inline bool CFUUIDArchive::_internal_has_uuid_w1() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CFUUIDArchive::has_uuid_w1() const {
  return _internal_has_uuid_w1();
}
inline void CFUUIDArchive::clear_uuid_w1() {
  uuid_w1_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFUUIDArchive::_internal_uuid_w1() const {
  return uuid_w1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFUUIDArchive::uuid_w1() const {
  // @@protoc_insertion_point(field_get:TSP.CFUUIDArchive.uuid_w1)
  return _internal_uuid_w1();
}
inline void CFUUIDArchive::_internal_set_uuid_w1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  uuid_w1_ = value;
}
inline void CFUUIDArchive::set_uuid_w1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uuid_w1(value);
  // @@protoc_insertion_point(field_set:TSP.CFUUIDArchive.uuid_w1)
}

// optional uint32 uuid_w2 = 4;
inline bool CFUUIDArchive::_internal_has_uuid_w2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CFUUIDArchive::has_uuid_w2() const {
  return _internal_has_uuid_w2();
}
inline void CFUUIDArchive::clear_uuid_w2() {
  uuid_w2_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFUUIDArchive::_internal_uuid_w2() const {
  return uuid_w2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFUUIDArchive::uuid_w2() const {
  // @@protoc_insertion_point(field_get:TSP.CFUUIDArchive.uuid_w2)
  return _internal_uuid_w2();
}
inline void CFUUIDArchive::_internal_set_uuid_w2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  uuid_w2_ = value;
}
inline void CFUUIDArchive::set_uuid_w2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uuid_w2(value);
  // @@protoc_insertion_point(field_set:TSP.CFUUIDArchive.uuid_w2)
}

// optional uint32 uuid_w3 = 5;
inline bool CFUUIDArchive::_internal_has_uuid_w3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CFUUIDArchive::has_uuid_w3() const {
  return _internal_has_uuid_w3();
}
inline void CFUUIDArchive::clear_uuid_w3() {
  uuid_w3_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFUUIDArchive::_internal_uuid_w3() const {
  return uuid_w3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CFUUIDArchive::uuid_w3() const {
  // @@protoc_insertion_point(field_get:TSP.CFUUIDArchive.uuid_w3)
  return _internal_uuid_w3();
}
inline void CFUUIDArchive::_internal_set_uuid_w3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  uuid_w3_ = value;
}
inline void CFUUIDArchive::set_uuid_w3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uuid_w3(value);
  // @@protoc_insertion_point(field_set:TSP.CFUUIDArchive.uuid_w3)
}

// -------------------------------------------------------------------

// UUIDSetArchive

// repeated .TSP.UUID uids = 1;
inline int UUIDSetArchive::_internal_uids_size() const {
  return uids_.size();
}
inline int UUIDSetArchive::uids_size() const {
  return _internal_uids_size();
}
inline void UUIDSetArchive::clear_uids() {
  uids_.Clear();
}
inline ::TSP::UUID* UUIDSetArchive::mutable_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.UUIDSetArchive.uids)
  return uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
UUIDSetArchive::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:TSP.UUIDSetArchive.uids)
  return &uids_;
}
inline const ::TSP::UUID& UUIDSetArchive::_internal_uids(int index) const {
  return uids_.Get(index);
}
inline const ::TSP::UUID& UUIDSetArchive::uids(int index) const {
  // @@protoc_insertion_point(field_get:TSP.UUIDSetArchive.uids)
  return _internal_uids(index);
}
inline ::TSP::UUID* UUIDSetArchive::_internal_add_uids() {
  return uids_.Add();
}
inline ::TSP::UUID* UUIDSetArchive::add_uids() {
  // @@protoc_insertion_point(field_add:TSP.UUIDSetArchive.uids)
  return _internal_add_uids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
UUIDSetArchive::uids() const {
  // @@protoc_insertion_point(field_list:TSP.UUIDSetArchive.uids)
  return uids_;
}

// -------------------------------------------------------------------

// UUIDMapArchive

// repeated .TSP.UUID source = 1;
inline int UUIDMapArchive::_internal_source_size() const {
  return source_.size();
}
inline int UUIDMapArchive::source_size() const {
  return _internal_source_size();
}
inline void UUIDMapArchive::clear_source() {
  source_.Clear();
}
inline ::TSP::UUID* UUIDMapArchive::mutable_source(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.UUIDMapArchive.source)
  return source_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
UUIDMapArchive::mutable_source() {
  // @@protoc_insertion_point(field_mutable_list:TSP.UUIDMapArchive.source)
  return &source_;
}
inline const ::TSP::UUID& UUIDMapArchive::_internal_source(int index) const {
  return source_.Get(index);
}
inline const ::TSP::UUID& UUIDMapArchive::source(int index) const {
  // @@protoc_insertion_point(field_get:TSP.UUIDMapArchive.source)
  return _internal_source(index);
}
inline ::TSP::UUID* UUIDMapArchive::_internal_add_source() {
  return source_.Add();
}
inline ::TSP::UUID* UUIDMapArchive::add_source() {
  // @@protoc_insertion_point(field_add:TSP.UUIDMapArchive.source)
  return _internal_add_source();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
UUIDMapArchive::source() const {
  // @@protoc_insertion_point(field_list:TSP.UUIDMapArchive.source)
  return source_;
}

// repeated .TSP.UUID target = 2;
inline int UUIDMapArchive::_internal_target_size() const {
  return target_.size();
}
inline int UUIDMapArchive::target_size() const {
  return _internal_target_size();
}
inline void UUIDMapArchive::clear_target() {
  target_.Clear();
}
inline ::TSP::UUID* UUIDMapArchive::mutable_target(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.UUIDMapArchive.target)
  return target_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
UUIDMapArchive::mutable_target() {
  // @@protoc_insertion_point(field_mutable_list:TSP.UUIDMapArchive.target)
  return &target_;
}
inline const ::TSP::UUID& UUIDMapArchive::_internal_target(int index) const {
  return target_.Get(index);
}
inline const ::TSP::UUID& UUIDMapArchive::target(int index) const {
  // @@protoc_insertion_point(field_get:TSP.UUIDMapArchive.target)
  return _internal_target(index);
}
inline ::TSP::UUID* UUIDMapArchive::_internal_add_target() {
  return target_.Add();
}
inline ::TSP::UUID* UUIDMapArchive::add_target() {
  // @@protoc_insertion_point(field_add:TSP.UUIDMapArchive.target)
  return _internal_add_target();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
UUIDMapArchive::target() const {
  // @@protoc_insertion_point(field_list:TSP.UUIDMapArchive.target)
  return target_;
}

// -------------------------------------------------------------------

// UUIDMultiMapArchive

// repeated .TSP.UUID source = 1;
inline int UUIDMultiMapArchive::_internal_source_size() const {
  return source_.size();
}
inline int UUIDMultiMapArchive::source_size() const {
  return _internal_source_size();
}
inline void UUIDMultiMapArchive::clear_source() {
  source_.Clear();
}
inline ::TSP::UUID* UUIDMultiMapArchive::mutable_source(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.UUIDMultiMapArchive.source)
  return source_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
UUIDMultiMapArchive::mutable_source() {
  // @@protoc_insertion_point(field_mutable_list:TSP.UUIDMultiMapArchive.source)
  return &source_;
}
inline const ::TSP::UUID& UUIDMultiMapArchive::_internal_source(int index) const {
  return source_.Get(index);
}
inline const ::TSP::UUID& UUIDMultiMapArchive::source(int index) const {
  // @@protoc_insertion_point(field_get:TSP.UUIDMultiMapArchive.source)
  return _internal_source(index);
}
inline ::TSP::UUID* UUIDMultiMapArchive::_internal_add_source() {
  return source_.Add();
}
inline ::TSP::UUID* UUIDMultiMapArchive::add_source() {
  // @@protoc_insertion_point(field_add:TSP.UUIDMultiMapArchive.source)
  return _internal_add_source();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
UUIDMultiMapArchive::source() const {
  // @@protoc_insertion_point(field_list:TSP.UUIDMultiMapArchive.source)
  return source_;
}

// repeated .TSP.UUID target = 2;
inline int UUIDMultiMapArchive::_internal_target_size() const {
  return target_.size();
}
inline int UUIDMultiMapArchive::target_size() const {
  return _internal_target_size();
}
inline void UUIDMultiMapArchive::clear_target() {
  target_.Clear();
}
inline ::TSP::UUID* UUIDMultiMapArchive::mutable_target(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.UUIDMultiMapArchive.target)
  return target_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
UUIDMultiMapArchive::mutable_target() {
  // @@protoc_insertion_point(field_mutable_list:TSP.UUIDMultiMapArchive.target)
  return &target_;
}
inline const ::TSP::UUID& UUIDMultiMapArchive::_internal_target(int index) const {
  return target_.Get(index);
}
inline const ::TSP::UUID& UUIDMultiMapArchive::target(int index) const {
  // @@protoc_insertion_point(field_get:TSP.UUIDMultiMapArchive.target)
  return _internal_target(index);
}
inline ::TSP::UUID* UUIDMultiMapArchive::_internal_add_target() {
  return target_.Add();
}
inline ::TSP::UUID* UUIDMultiMapArchive::add_target() {
  // @@protoc_insertion_point(field_add:TSP.UUIDMultiMapArchive.target)
  return _internal_add_target();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
UUIDMultiMapArchive::target() const {
  // @@protoc_insertion_point(field_list:TSP.UUIDMultiMapArchive.target)
  return target_;
}

// -------------------------------------------------------------------

// UUIDCoordArchive

// required .TSP.UUID row_uid = 1;
inline bool UUIDCoordArchive::_internal_has_row_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || row_uid_ != nullptr);
  return value;
}
inline bool UUIDCoordArchive::has_row_uid() const {
  return _internal_has_row_uid();
}
inline void UUIDCoordArchive::clear_row_uid() {
  if (row_uid_ != nullptr) row_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSP::UUID& UUIDCoordArchive::_internal_row_uid() const {
  const ::TSP::UUID* p = row_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& UUIDCoordArchive::row_uid() const {
  // @@protoc_insertion_point(field_get:TSP.UUIDCoordArchive.row_uid)
  return _internal_row_uid();
}
inline void UUIDCoordArchive::unsafe_arena_set_allocated_row_uid(
    ::TSP::UUID* row_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_uid_);
  }
  row_uid_ = row_uid;
  if (row_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.UUIDCoordArchive.row_uid)
}
inline ::TSP::UUID* UUIDCoordArchive::release_row_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = row_uid_;
  row_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* UUIDCoordArchive::unsafe_arena_release_row_uid() {
  // @@protoc_insertion_point(field_release:TSP.UUIDCoordArchive.row_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = row_uid_;
  row_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* UUIDCoordArchive::_internal_mutable_row_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (row_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    row_uid_ = p;
  }
  return row_uid_;
}
inline ::TSP::UUID* UUIDCoordArchive::mutable_row_uid() {
  // @@protoc_insertion_point(field_mutable:TSP.UUIDCoordArchive.row_uid)
  return _internal_mutable_row_uid();
}
inline void UUIDCoordArchive::set_allocated_row_uid(::TSP::UUID* row_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete row_uid_;
  }
  if (row_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(row_uid);
    if (message_arena != submessage_arena) {
      row_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  row_uid_ = row_uid;
  // @@protoc_insertion_point(field_set_allocated:TSP.UUIDCoordArchive.row_uid)
}

// required .TSP.UUID column_uid = 2;
inline bool UUIDCoordArchive::_internal_has_column_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || column_uid_ != nullptr);
  return value;
}
inline bool UUIDCoordArchive::has_column_uid() const {
  return _internal_has_column_uid();
}
inline void UUIDCoordArchive::clear_column_uid() {
  if (column_uid_ != nullptr) column_uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSP::UUID& UUIDCoordArchive::_internal_column_uid() const {
  const ::TSP::UUID* p = column_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& UUIDCoordArchive::column_uid() const {
  // @@protoc_insertion_point(field_get:TSP.UUIDCoordArchive.column_uid)
  return _internal_column_uid();
}
inline void UUIDCoordArchive::unsafe_arena_set_allocated_column_uid(
    ::TSP::UUID* column_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uid_);
  }
  column_uid_ = column_uid;
  if (column_uid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.UUIDCoordArchive.column_uid)
}
inline ::TSP::UUID* UUIDCoordArchive::release_column_uid() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = column_uid_;
  column_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* UUIDCoordArchive::unsafe_arena_release_column_uid() {
  // @@protoc_insertion_point(field_release:TSP.UUIDCoordArchive.column_uid)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = column_uid_;
  column_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* UUIDCoordArchive::_internal_mutable_column_uid() {
  _has_bits_[0] |= 0x00000002u;
  if (column_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    column_uid_ = p;
  }
  return column_uid_;
}
inline ::TSP::UUID* UUIDCoordArchive::mutable_column_uid() {
  // @@protoc_insertion_point(field_mutable:TSP.UUIDCoordArchive.column_uid)
  return _internal_mutable_column_uid();
}
inline void UUIDCoordArchive::set_allocated_column_uid(::TSP::UUID* column_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete column_uid_;
  }
  if (column_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(column_uid);
    if (message_arena != submessage_arena) {
      column_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  column_uid_ = column_uid;
  // @@protoc_insertion_point(field_set_allocated:TSP.UUIDCoordArchive.column_uid)
}

// -------------------------------------------------------------------

// UUIDRectArchive

// repeated .TSP.UUID column_uids = 1;
inline int UUIDRectArchive::_internal_column_uids_size() const {
  return column_uids_.size();
}
inline int UUIDRectArchive::column_uids_size() const {
  return _internal_column_uids_size();
}
inline void UUIDRectArchive::clear_column_uids() {
  column_uids_.Clear();
}
inline ::TSP::UUID* UUIDRectArchive::mutable_column_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.UUIDRectArchive.column_uids)
  return column_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
UUIDRectArchive::mutable_column_uids() {
  // @@protoc_insertion_point(field_mutable_list:TSP.UUIDRectArchive.column_uids)
  return &column_uids_;
}
inline const ::TSP::UUID& UUIDRectArchive::_internal_column_uids(int index) const {
  return column_uids_.Get(index);
}
inline const ::TSP::UUID& UUIDRectArchive::column_uids(int index) const {
  // @@protoc_insertion_point(field_get:TSP.UUIDRectArchive.column_uids)
  return _internal_column_uids(index);
}
inline ::TSP::UUID* UUIDRectArchive::_internal_add_column_uids() {
  return column_uids_.Add();
}
inline ::TSP::UUID* UUIDRectArchive::add_column_uids() {
  // @@protoc_insertion_point(field_add:TSP.UUIDRectArchive.column_uids)
  return _internal_add_column_uids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
UUIDRectArchive::column_uids() const {
  // @@protoc_insertion_point(field_list:TSP.UUIDRectArchive.column_uids)
  return column_uids_;
}

// repeated .TSP.UUID row_uids = 2;
inline int UUIDRectArchive::_internal_row_uids_size() const {
  return row_uids_.size();
}
inline int UUIDRectArchive::row_uids_size() const {
  return _internal_row_uids_size();
}
inline void UUIDRectArchive::clear_row_uids() {
  row_uids_.Clear();
}
inline ::TSP::UUID* UUIDRectArchive::mutable_row_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.UUIDRectArchive.row_uids)
  return row_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
UUIDRectArchive::mutable_row_uids() {
  // @@protoc_insertion_point(field_mutable_list:TSP.UUIDRectArchive.row_uids)
  return &row_uids_;
}
inline const ::TSP::UUID& UUIDRectArchive::_internal_row_uids(int index) const {
  return row_uids_.Get(index);
}
inline const ::TSP::UUID& UUIDRectArchive::row_uids(int index) const {
  // @@protoc_insertion_point(field_get:TSP.UUIDRectArchive.row_uids)
  return _internal_row_uids(index);
}
inline ::TSP::UUID* UUIDRectArchive::_internal_add_row_uids() {
  return row_uids_.Add();
}
inline ::TSP::UUID* UUIDRectArchive::add_row_uids() {
  // @@protoc_insertion_point(field_add:TSP.UUIDRectArchive.row_uids)
  return _internal_add_row_uids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
UUIDRectArchive::row_uids() const {
  // @@protoc_insertion_point(field_list:TSP.UUIDRectArchive.row_uids)
  return row_uids_;
}

// -------------------------------------------------------------------

// SparseUUIDArray_Entry

// required uint32 index = 1;
inline bool SparseUUIDArray_Entry::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SparseUUIDArray_Entry::has_index() const {
  return _internal_has_index();
}
inline void SparseUUIDArray_Entry::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseUUIDArray_Entry::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseUUIDArray_Entry::index() const {
  // @@protoc_insertion_point(field_get:TSP.SparseUUIDArray.Entry.index)
  return _internal_index();
}
inline void SparseUUIDArray_Entry::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  index_ = value;
}
inline void SparseUUIDArray_Entry::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TSP.SparseUUIDArray.Entry.index)
}

// required .TSP.UUID uuid = 2;
inline bool SparseUUIDArray_Entry::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || uuid_ != nullptr);
  return value;
}
inline bool SparseUUIDArray_Entry::has_uuid() const {
  return _internal_has_uuid();
}
inline void SparseUUIDArray_Entry::clear_uuid() {
  if (uuid_ != nullptr) uuid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSP::UUID& SparseUUIDArray_Entry::_internal_uuid() const {
  const ::TSP::UUID* p = uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& SparseUUIDArray_Entry::uuid() const {
  // @@protoc_insertion_point(field_get:TSP.SparseUUIDArray.Entry.uuid)
  return _internal_uuid();
}
inline void SparseUUIDArray_Entry::unsafe_arena_set_allocated_uuid(
    ::TSP::UUID* uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  uuid_ = uuid;
  if (uuid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.SparseUUIDArray.Entry.uuid)
}
inline ::TSP::UUID* SparseUUIDArray_Entry::release_uuid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = uuid_;
  uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* SparseUUIDArray_Entry::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:TSP.SparseUUIDArray.Entry.uuid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = uuid_;
  uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* SparseUUIDArray_Entry::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  if (uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    uuid_ = p;
  }
  return uuid_;
}
inline ::TSP::UUID* SparseUUIDArray_Entry::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:TSP.SparseUUIDArray.Entry.uuid)
  return _internal_mutable_uuid();
}
inline void SparseUUIDArray_Entry::set_allocated_uuid(::TSP::UUID* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uuid_;
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uuid);
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:TSP.SparseUUIDArray.Entry.uuid)
}

// -------------------------------------------------------------------

// SparseUUIDArray

// required uint32 count = 1;
inline bool SparseUUIDArray::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SparseUUIDArray::has_count() const {
  return _internal_has_count();
}
inline void SparseUUIDArray::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseUUIDArray::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseUUIDArray::count() const {
  // @@protoc_insertion_point(field_get:TSP.SparseUUIDArray.count)
  return _internal_count();
}
inline void SparseUUIDArray::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  count_ = value;
}
inline void SparseUUIDArray::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:TSP.SparseUUIDArray.count)
}

// repeated .TSP.SparseUUIDArray.Entry entries = 2;
inline int SparseUUIDArray::_internal_entries_size() const {
  return entries_.size();
}
inline int SparseUUIDArray::entries_size() const {
  return _internal_entries_size();
}
inline void SparseUUIDArray::clear_entries() {
  entries_.Clear();
}
inline ::TSP::SparseUUIDArray_Entry* SparseUUIDArray::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.SparseUUIDArray.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::SparseUUIDArray_Entry >*
SparseUUIDArray::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSP.SparseUUIDArray.entries)
  return &entries_;
}
inline const ::TSP::SparseUUIDArray_Entry& SparseUUIDArray::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::TSP::SparseUUIDArray_Entry& SparseUUIDArray::entries(int index) const {
  // @@protoc_insertion_point(field_get:TSP.SparseUUIDArray.entries)
  return _internal_entries(index);
}
inline ::TSP::SparseUUIDArray_Entry* SparseUUIDArray::_internal_add_entries() {
  return entries_.Add();
}
inline ::TSP::SparseUUIDArray_Entry* SparseUUIDArray::add_entries() {
  // @@protoc_insertion_point(field_add:TSP.SparseUUIDArray.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::SparseUUIDArray_Entry >&
SparseUUIDArray::entries() const {
  // @@protoc_insertion_point(field_list:TSP.SparseUUIDArray.entries)
  return entries_;
}

// -------------------------------------------------------------------

// UUIDPath

// repeated .TSP.UUID uuids = 1;
inline int UUIDPath::_internal_uuids_size() const {
  return uuids_.size();
}
inline int UUIDPath::uuids_size() const {
  return _internal_uuids_size();
}
inline void UUIDPath::clear_uuids() {
  uuids_.Clear();
}
inline ::TSP::UUID* UUIDPath::mutable_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.UUIDPath.uuids)
  return uuids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
UUIDPath::mutable_uuids() {
  // @@protoc_insertion_point(field_mutable_list:TSP.UUIDPath.uuids)
  return &uuids_;
}
inline const ::TSP::UUID& UUIDPath::_internal_uuids(int index) const {
  return uuids_.Get(index);
}
inline const ::TSP::UUID& UUIDPath::uuids(int index) const {
  // @@protoc_insertion_point(field_get:TSP.UUIDPath.uuids)
  return _internal_uuids(index);
}
inline ::TSP::UUID* UUIDPath::_internal_add_uuids() {
  return uuids_.Add();
}
inline ::TSP::UUID* UUIDPath::add_uuids() {
  // @@protoc_insertion_point(field_add:TSP.UUIDPath.uuids)
  return _internal_add_uuids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
UUIDPath::uuids() const {
  // @@protoc_insertion_point(field_list:TSP.UUIDPath.uuids)
  return uuids_;
}

// -------------------------------------------------------------------

// SparseUUIDPathArray_Entry

// required uint32 index = 1;
inline bool SparseUUIDPathArray_Entry::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SparseUUIDPathArray_Entry::has_index() const {
  return _internal_has_index();
}
inline void SparseUUIDPathArray_Entry::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseUUIDPathArray_Entry::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseUUIDPathArray_Entry::index() const {
  // @@protoc_insertion_point(field_get:TSP.SparseUUIDPathArray.Entry.index)
  return _internal_index();
}
inline void SparseUUIDPathArray_Entry::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  index_ = value;
}
inline void SparseUUIDPathArray_Entry::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TSP.SparseUUIDPathArray.Entry.index)
}

// required .TSP.UUIDPath uuid_path = 2;
inline bool SparseUUIDPathArray_Entry::_internal_has_uuid_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || uuid_path_ != nullptr);
  return value;
}
inline bool SparseUUIDPathArray_Entry::has_uuid_path() const {
  return _internal_has_uuid_path();
}
inline void SparseUUIDPathArray_Entry::clear_uuid_path() {
  if (uuid_path_ != nullptr) uuid_path_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSP::UUIDPath& SparseUUIDPathArray_Entry::_internal_uuid_path() const {
  const ::TSP::UUIDPath* p = uuid_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& SparseUUIDPathArray_Entry::uuid_path() const {
  // @@protoc_insertion_point(field_get:TSP.SparseUUIDPathArray.Entry.uuid_path)
  return _internal_uuid_path();
}
inline void SparseUUIDPathArray_Entry::unsafe_arena_set_allocated_uuid_path(
    ::TSP::UUIDPath* uuid_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_path_);
  }
  uuid_path_ = uuid_path;
  if (uuid_path) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.SparseUUIDPathArray.Entry.uuid_path)
}
inline ::TSP::UUIDPath* SparseUUIDPathArray_Entry::release_uuid_path() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUIDPath* temp = uuid_path_;
  uuid_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* SparseUUIDPathArray_Entry::unsafe_arena_release_uuid_path() {
  // @@protoc_insertion_point(field_release:TSP.SparseUUIDPathArray.Entry.uuid_path)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUIDPath* temp = uuid_path_;
  uuid_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* SparseUUIDPathArray_Entry::_internal_mutable_uuid_path() {
  _has_bits_[0] |= 0x00000001u;
  if (uuid_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    uuid_path_ = p;
  }
  return uuid_path_;
}
inline ::TSP::UUIDPath* SparseUUIDPathArray_Entry::mutable_uuid_path() {
  // @@protoc_insertion_point(field_mutable:TSP.SparseUUIDPathArray.Entry.uuid_path)
  return _internal_mutable_uuid_path();
}
inline void SparseUUIDPathArray_Entry::set_allocated_uuid_path(::TSP::UUIDPath* uuid_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uuid_path_;
  }
  if (uuid_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uuid_path);
    if (message_arena != submessage_arena) {
      uuid_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_path_ = uuid_path;
  // @@protoc_insertion_point(field_set_allocated:TSP.SparseUUIDPathArray.Entry.uuid_path)
}

// -------------------------------------------------------------------

// SparseUUIDPathArray

// required uint32 count = 1;
inline bool SparseUUIDPathArray::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SparseUUIDPathArray::has_count() const {
  return _internal_has_count();
}
inline void SparseUUIDPathArray::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseUUIDPathArray::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseUUIDPathArray::count() const {
  // @@protoc_insertion_point(field_get:TSP.SparseUUIDPathArray.count)
  return _internal_count();
}
inline void SparseUUIDPathArray::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  count_ = value;
}
inline void SparseUUIDPathArray::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:TSP.SparseUUIDPathArray.count)
}

// repeated .TSP.SparseUUIDPathArray.Entry entries = 2;
inline int SparseUUIDPathArray::_internal_entries_size() const {
  return entries_.size();
}
inline int SparseUUIDPathArray::entries_size() const {
  return _internal_entries_size();
}
inline void SparseUUIDPathArray::clear_entries() {
  entries_.Clear();
}
inline ::TSP::SparseUUIDPathArray_Entry* SparseUUIDPathArray::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.SparseUUIDPathArray.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::SparseUUIDPathArray_Entry >*
SparseUUIDPathArray::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSP.SparseUUIDPathArray.entries)
  return &entries_;
}
inline const ::TSP::SparseUUIDPathArray_Entry& SparseUUIDPathArray::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::TSP::SparseUUIDPathArray_Entry& SparseUUIDPathArray::entries(int index) const {
  // @@protoc_insertion_point(field_get:TSP.SparseUUIDPathArray.entries)
  return _internal_entries(index);
}
inline ::TSP::SparseUUIDPathArray_Entry* SparseUUIDPathArray::_internal_add_entries() {
  return entries_.Add();
}
inline ::TSP::SparseUUIDPathArray_Entry* SparseUUIDPathArray::add_entries() {
  // @@protoc_insertion_point(field_add:TSP.SparseUUIDPathArray.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::SparseUUIDPathArray_Entry >&
SparseUUIDPathArray::entries() const {
  // @@protoc_insertion_point(field_list:TSP.SparseUUIDPathArray.entries)
  return entries_;
}

// -------------------------------------------------------------------

// PasteboardObject

// optional .TSP.Reference stylesheet = 1;
inline bool PasteboardObject::_internal_has_stylesheet() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || stylesheet_ != nullptr);
  return value;
}
inline bool PasteboardObject::has_stylesheet() const {
  return _internal_has_stylesheet();
}
inline void PasteboardObject::clear_stylesheet() {
  if (stylesheet_ != nullptr) stylesheet_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSP::Reference& PasteboardObject::_internal_stylesheet() const {
  const ::TSP::Reference* p = stylesheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PasteboardObject::stylesheet() const {
  // @@protoc_insertion_point(field_get:TSP.PasteboardObject.stylesheet)
  return _internal_stylesheet();
}
inline void PasteboardObject::unsafe_arena_set_allocated_stylesheet(
    ::TSP::Reference* stylesheet) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheet_);
  }
  stylesheet_ = stylesheet;
  if (stylesheet) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.PasteboardObject.stylesheet)
}
inline ::TSP::Reference* PasteboardObject::release_stylesheet() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = stylesheet_;
  stylesheet_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* PasteboardObject::unsafe_arena_release_stylesheet() {
  // @@protoc_insertion_point(field_release:TSP.PasteboardObject.stylesheet)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = stylesheet_;
  stylesheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PasteboardObject::_internal_mutable_stylesheet() {
  _has_bits_[0] |= 0x00000001u;
  if (stylesheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    stylesheet_ = p;
  }
  return stylesheet_;
}
inline ::TSP::Reference* PasteboardObject::mutable_stylesheet() {
  // @@protoc_insertion_point(field_mutable:TSP.PasteboardObject.stylesheet)
  return _internal_mutable_stylesheet();
}
inline void PasteboardObject::set_allocated_stylesheet(::TSP::Reference* stylesheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stylesheet_;
  }
  if (stylesheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stylesheet);
    if (message_arena != submessage_arena) {
      stylesheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stylesheet, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stylesheet_ = stylesheet;
  // @@protoc_insertion_point(field_set_allocated:TSP.PasteboardObject.stylesheet)
}

// repeated .TSP.Reference drawables = 2;
inline int PasteboardObject::_internal_drawables_size() const {
  return drawables_.size();
}
inline int PasteboardObject::drawables_size() const {
  return _internal_drawables_size();
}
inline void PasteboardObject::clear_drawables() {
  drawables_.Clear();
}
inline ::TSP::Reference* PasteboardObject::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.PasteboardObject.drawables)
  return drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PasteboardObject::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TSP.PasteboardObject.drawables)
  return &drawables_;
}
inline const ::TSP::Reference& PasteboardObject::_internal_drawables(int index) const {
  return drawables_.Get(index);
}
inline const ::TSP::Reference& PasteboardObject::drawables(int index) const {
  // @@protoc_insertion_point(field_get:TSP.PasteboardObject.drawables)
  return _internal_drawables(index);
}
inline ::TSP::Reference* PasteboardObject::_internal_add_drawables() {
  return drawables_.Add();
}
inline ::TSP::Reference* PasteboardObject::add_drawables() {
  // @@protoc_insertion_point(field_add:TSP.PasteboardObject.drawables)
  return _internal_add_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PasteboardObject::drawables() const {
  // @@protoc_insertion_point(field_list:TSP.PasteboardObject.drawables)
  return drawables_;
}

// repeated .TSP.Reference styles = 3;
inline int PasteboardObject::_internal_styles_size() const {
  return styles_.size();
}
inline int PasteboardObject::styles_size() const {
  return _internal_styles_size();
}
inline void PasteboardObject::clear_styles() {
  styles_.Clear();
}
inline ::TSP::Reference* PasteboardObject::mutable_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.PasteboardObject.styles)
  return styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PasteboardObject::mutable_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSP.PasteboardObject.styles)
  return &styles_;
}
inline const ::TSP::Reference& PasteboardObject::_internal_styles(int index) const {
  return styles_.Get(index);
}
inline const ::TSP::Reference& PasteboardObject::styles(int index) const {
  // @@protoc_insertion_point(field_get:TSP.PasteboardObject.styles)
  return _internal_styles(index);
}
inline ::TSP::Reference* PasteboardObject::_internal_add_styles() {
  return styles_.Add();
}
inline ::TSP::Reference* PasteboardObject::add_styles() {
  // @@protoc_insertion_point(field_add:TSP.PasteboardObject.styles)
  return _internal_add_styles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PasteboardObject::styles() const {
  // @@protoc_insertion_point(field_list:TSP.PasteboardObject.styles)
  return styles_;
}

// optional .TSP.Reference wp_storage = 5;
inline bool PasteboardObject::_internal_has_wp_storage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || wp_storage_ != nullptr);
  return value;
}
inline bool PasteboardObject::has_wp_storage() const {
  return _internal_has_wp_storage();
}
inline void PasteboardObject::clear_wp_storage() {
  if (wp_storage_ != nullptr) wp_storage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSP::Reference& PasteboardObject::_internal_wp_storage() const {
  const ::TSP::Reference* p = wp_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PasteboardObject::wp_storage() const {
  // @@protoc_insertion_point(field_get:TSP.PasteboardObject.wp_storage)
  return _internal_wp_storage();
}
inline void PasteboardObject::unsafe_arena_set_allocated_wp_storage(
    ::TSP::Reference* wp_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wp_storage_);
  }
  wp_storage_ = wp_storage;
  if (wp_storage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.PasteboardObject.wp_storage)
}
inline ::TSP::Reference* PasteboardObject::release_wp_storage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = wp_storage_;
  wp_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* PasteboardObject::unsafe_arena_release_wp_storage() {
  // @@protoc_insertion_point(field_release:TSP.PasteboardObject.wp_storage)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = wp_storage_;
  wp_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PasteboardObject::_internal_mutable_wp_storage() {
  _has_bits_[0] |= 0x00000002u;
  if (wp_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    wp_storage_ = p;
  }
  return wp_storage_;
}
inline ::TSP::Reference* PasteboardObject::mutable_wp_storage() {
  // @@protoc_insertion_point(field_mutable:TSP.PasteboardObject.wp_storage)
  return _internal_mutable_wp_storage();
}
inline void PasteboardObject::set_allocated_wp_storage(::TSP::Reference* wp_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wp_storage_;
  }
  if (wp_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wp_storage);
    if (message_arena != submessage_arena) {
      wp_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wp_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  wp_storage_ = wp_storage;
  // @@protoc_insertion_point(field_set_allocated:TSP.PasteboardObject.wp_storage)
}

// optional .TSP.Reference guide_storage = 9;
inline bool PasteboardObject::_internal_has_guide_storage() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || guide_storage_ != nullptr);
  return value;
}
inline bool PasteboardObject::has_guide_storage() const {
  return _internal_has_guide_storage();
}
inline void PasteboardObject::clear_guide_storage() {
  if (guide_storage_ != nullptr) guide_storage_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TSP::Reference& PasteboardObject::_internal_guide_storage() const {
  const ::TSP::Reference* p = guide_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PasteboardObject::guide_storage() const {
  // @@protoc_insertion_point(field_get:TSP.PasteboardObject.guide_storage)
  return _internal_guide_storage();
}
inline void PasteboardObject::unsafe_arena_set_allocated_guide_storage(
    ::TSP::Reference* guide_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guide_storage_);
  }
  guide_storage_ = guide_storage;
  if (guide_storage) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.PasteboardObject.guide_storage)
}
inline ::TSP::Reference* PasteboardObject::release_guide_storage() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = guide_storage_;
  guide_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* PasteboardObject::unsafe_arena_release_guide_storage() {
  // @@protoc_insertion_point(field_release:TSP.PasteboardObject.guide_storage)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = guide_storage_;
  guide_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PasteboardObject::_internal_mutable_guide_storage() {
  _has_bits_[0] |= 0x00000008u;
  if (guide_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    guide_storage_ = p;
  }
  return guide_storage_;
}
inline ::TSP::Reference* PasteboardObject::mutable_guide_storage() {
  // @@protoc_insertion_point(field_mutable:TSP.PasteboardObject.guide_storage)
  return _internal_mutable_guide_storage();
}
inline void PasteboardObject::set_allocated_guide_storage(::TSP::Reference* guide_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete guide_storage_;
  }
  if (guide_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(guide_storage);
    if (message_arena != submessage_arena) {
      guide_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guide_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  guide_storage_ = guide_storage;
  // @@protoc_insertion_point(field_set_allocated:TSP.PasteboardObject.guide_storage)
}

// optional .TSP.Reference app_native_object = 6;
inline bool PasteboardObject::_internal_has_app_native_object() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || app_native_object_ != nullptr);
  return value;
}
inline bool PasteboardObject::has_app_native_object() const {
  return _internal_has_app_native_object();
}
inline void PasteboardObject::clear_app_native_object() {
  if (app_native_object_ != nullptr) app_native_object_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSP::Reference& PasteboardObject::_internal_app_native_object() const {
  const ::TSP::Reference* p = app_native_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PasteboardObject::app_native_object() const {
  // @@protoc_insertion_point(field_get:TSP.PasteboardObject.app_native_object)
  return _internal_app_native_object();
}
inline void PasteboardObject::unsafe_arena_set_allocated_app_native_object(
    ::TSP::Reference* app_native_object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_native_object_);
  }
  app_native_object_ = app_native_object;
  if (app_native_object) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.PasteboardObject.app_native_object)
}
inline ::TSP::Reference* PasteboardObject::release_app_native_object() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = app_native_object_;
  app_native_object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* PasteboardObject::unsafe_arena_release_app_native_object() {
  // @@protoc_insertion_point(field_release:TSP.PasteboardObject.app_native_object)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = app_native_object_;
  app_native_object_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PasteboardObject::_internal_mutable_app_native_object() {
  _has_bits_[0] |= 0x00000004u;
  if (app_native_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    app_native_object_ = p;
  }
  return app_native_object_;
}
inline ::TSP::Reference* PasteboardObject::mutable_app_native_object() {
  // @@protoc_insertion_point(field_mutable:TSP.PasteboardObject.app_native_object)
  return _internal_mutable_app_native_object();
}
inline void PasteboardObject::set_allocated_app_native_object(::TSP::Reference* app_native_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete app_native_object_;
  }
  if (app_native_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(app_native_object);
    if (message_arena != submessage_arena) {
      app_native_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_native_object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  app_native_object_ = app_native_object;
  // @@protoc_insertion_point(field_set_allocated:TSP.PasteboardObject.app_native_object)
}

// optional bool is_text_primary = 7 [default = false];
inline bool PasteboardObject::_internal_has_is_text_primary() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PasteboardObject::has_is_text_primary() const {
  return _internal_has_is_text_primary();
}
inline void PasteboardObject::clear_is_text_primary() {
  is_text_primary_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool PasteboardObject::_internal_is_text_primary() const {
  return is_text_primary_;
}
inline bool PasteboardObject::is_text_primary() const {
  // @@protoc_insertion_point(field_get:TSP.PasteboardObject.is_text_primary)
  return _internal_is_text_primary();
}
inline void PasteboardObject::_internal_set_is_text_primary(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_text_primary_ = value;
}
inline void PasteboardObject::set_is_text_primary(bool value) {
  _internal_set_is_text_primary(value);
  // @@protoc_insertion_point(field_set:TSP.PasteboardObject.is_text_primary)
}

// optional bool is_smart = 8 [default = false];
inline bool PasteboardObject::_internal_has_is_smart() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PasteboardObject::has_is_smart() const {
  return _internal_has_is_smart();
}
inline void PasteboardObject::clear_is_smart() {
  is_smart_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PasteboardObject::_internal_is_smart() const {
  return is_smart_;
}
inline bool PasteboardObject::is_smart() const {
  // @@protoc_insertion_point(field_get:TSP.PasteboardObject.is_smart)
  return _internal_is_smart();
}
inline void PasteboardObject::_internal_set_is_smart(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_smart_ = value;
}
inline void PasteboardObject::set_is_smart(bool value) {
  _internal_set_is_smart(value);
  // @@protoc_insertion_point(field_set:TSP.PasteboardObject.is_smart)
}

// repeated .TSP.Reference presets = 10;
inline int PasteboardObject::_internal_presets_size() const {
  return presets_.size();
}
inline int PasteboardObject::presets_size() const {
  return _internal_presets_size();
}
inline void PasteboardObject::clear_presets() {
  presets_.Clear();
}
inline ::TSP::Reference* PasteboardObject::mutable_presets(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.PasteboardObject.presets)
  return presets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PasteboardObject::mutable_presets() {
  // @@protoc_insertion_point(field_mutable_list:TSP.PasteboardObject.presets)
  return &presets_;
}
inline const ::TSP::Reference& PasteboardObject::_internal_presets(int index) const {
  return presets_.Get(index);
}
inline const ::TSP::Reference& PasteboardObject::presets(int index) const {
  // @@protoc_insertion_point(field_get:TSP.PasteboardObject.presets)
  return _internal_presets(index);
}
inline ::TSP::Reference* PasteboardObject::_internal_add_presets() {
  return presets_.Add();
}
inline ::TSP::Reference* PasteboardObject::add_presets() {
  // @@protoc_insertion_point(field_add:TSP.PasteboardObject.presets)
  return _internal_add_presets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PasteboardObject::presets() const {
  // @@protoc_insertion_point(field_list:TSP.PasteboardObject.presets)
  return presets_;
}

// repeated .TSP.Reference top_level_objects = 11;
inline int PasteboardObject::_internal_top_level_objects_size() const {
  return top_level_objects_.size();
}
inline int PasteboardObject::top_level_objects_size() const {
  return _internal_top_level_objects_size();
}
inline void PasteboardObject::clear_top_level_objects() {
  top_level_objects_.Clear();
}
inline ::TSP::Reference* PasteboardObject::mutable_top_level_objects(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.PasteboardObject.top_level_objects)
  return top_level_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PasteboardObject::mutable_top_level_objects() {
  // @@protoc_insertion_point(field_mutable_list:TSP.PasteboardObject.top_level_objects)
  return &top_level_objects_;
}
inline const ::TSP::Reference& PasteboardObject::_internal_top_level_objects(int index) const {
  return top_level_objects_.Get(index);
}
inline const ::TSP::Reference& PasteboardObject::top_level_objects(int index) const {
  // @@protoc_insertion_point(field_get:TSP.PasteboardObject.top_level_objects)
  return _internal_top_level_objects(index);
}
inline ::TSP::Reference* PasteboardObject::_internal_add_top_level_objects() {
  return top_level_objects_.Add();
}
inline ::TSP::Reference* PasteboardObject::add_top_level_objects() {
  // @@protoc_insertion_point(field_add:TSP.PasteboardObject.top_level_objects)
  return _internal_add_top_level_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PasteboardObject::top_level_objects() const {
  // @@protoc_insertion_point(field_list:TSP.PasteboardObject.top_level_objects)
  return top_level_objects_;
}

// optional .TSP.Reference native_content_description = 12;
inline bool PasteboardObject::_internal_has_native_content_description() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || native_content_description_ != nullptr);
  return value;
}
inline bool PasteboardObject::has_native_content_description() const {
  return _internal_has_native_content_description();
}
inline void PasteboardObject::clear_native_content_description() {
  if (native_content_description_ != nullptr) native_content_description_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TSP::Reference& PasteboardObject::_internal_native_content_description() const {
  const ::TSP::Reference* p = native_content_description_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PasteboardObject::native_content_description() const {
  // @@protoc_insertion_point(field_get:TSP.PasteboardObject.native_content_description)
  return _internal_native_content_description();
}
inline void PasteboardObject::unsafe_arena_set_allocated_native_content_description(
    ::TSP::Reference* native_content_description) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(native_content_description_);
  }
  native_content_description_ = native_content_description;
  if (native_content_description) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.PasteboardObject.native_content_description)
}
inline ::TSP::Reference* PasteboardObject::release_native_content_description() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = native_content_description_;
  native_content_description_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* PasteboardObject::unsafe_arena_release_native_content_description() {
  // @@protoc_insertion_point(field_release:TSP.PasteboardObject.native_content_description)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = native_content_description_;
  native_content_description_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PasteboardObject::_internal_mutable_native_content_description() {
  _has_bits_[0] |= 0x00000010u;
  if (native_content_description_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    native_content_description_ = p;
  }
  return native_content_description_;
}
inline ::TSP::Reference* PasteboardObject::mutable_native_content_description() {
  // @@protoc_insertion_point(field_mutable:TSP.PasteboardObject.native_content_description)
  return _internal_mutable_native_content_description();
}
inline void PasteboardObject::set_allocated_native_content_description(::TSP::Reference* native_content_description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete native_content_description_;
  }
  if (native_content_description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(native_content_description);
    if (message_arena != submessage_arena) {
      native_content_description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, native_content_description, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  native_content_description_ = native_content_description;
  // @@protoc_insertion_point(field_set_allocated:TSP.PasteboardObject.native_content_description)
}

// -------------------------------------------------------------------

// ObjectCollection

// repeated .TSP.Reference objects = 1;
inline int ObjectCollection::_internal_objects_size() const {
  return objects_.size();
}
inline int ObjectCollection::objects_size() const {
  return _internal_objects_size();
}
inline void ObjectCollection::clear_objects() {
  objects_.Clear();
}
inline ::TSP::Reference* ObjectCollection::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.ObjectCollection.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ObjectCollection::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:TSP.ObjectCollection.objects)
  return &objects_;
}
inline const ::TSP::Reference& ObjectCollection::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::TSP::Reference& ObjectCollection::objects(int index) const {
  // @@protoc_insertion_point(field_get:TSP.ObjectCollection.objects)
  return _internal_objects(index);
}
inline ::TSP::Reference* ObjectCollection::_internal_add_objects() {
  return objects_.Add();
}
inline ::TSP::Reference* ObjectCollection::add_objects() {
  // @@protoc_insertion_point(field_add:TSP.ObjectCollection.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ObjectCollection::objects() const {
  // @@protoc_insertion_point(field_list:TSP.ObjectCollection.objects)
  return objects_;
}

// -------------------------------------------------------------------

// ObjectContainer

// optional uint32 identifier = 1;
inline bool ObjectContainer::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObjectContainer::has_identifier() const {
  return _internal_has_identifier();
}
inline void ObjectContainer::clear_identifier() {
  identifier_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectContainer::_internal_identifier() const {
  return identifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectContainer::identifier() const {
  // @@protoc_insertion_point(field_get:TSP.ObjectContainer.identifier)
  return _internal_identifier();
}
inline void ObjectContainer::_internal_set_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_ = value;
}
inline void ObjectContainer::set_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:TSP.ObjectContainer.identifier)
}

// repeated .TSP.Reference objects = 2;
inline int ObjectContainer::_internal_objects_size() const {
  return objects_.size();
}
inline int ObjectContainer::objects_size() const {
  return _internal_objects_size();
}
inline void ObjectContainer::clear_objects() {
  objects_.Clear();
}
inline ::TSP::Reference* ObjectContainer::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.ObjectContainer.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ObjectContainer::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:TSP.ObjectContainer.objects)
  return &objects_;
}
inline const ::TSP::Reference& ObjectContainer::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::TSP::Reference& ObjectContainer::objects(int index) const {
  // @@protoc_insertion_point(field_get:TSP.ObjectContainer.objects)
  return _internal_objects(index);
}
inline ::TSP::Reference* ObjectContainer::_internal_add_objects() {
  return objects_.Add();
}
inline ::TSP::Reference* ObjectContainer::add_objects() {
  // @@protoc_insertion_point(field_add:TSP.ObjectContainer.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ObjectContainer::objects() const {
  // @@protoc_insertion_point(field_list:TSP.ObjectContainer.objects)
  return objects_;
}

// -------------------------------------------------------------------

// DataAttributes

// -------------------------------------------------------------------

// LargeArraySegment

// optional bool should_delay_archiving = 1;
inline bool LargeArraySegment::_internal_has_should_delay_archiving() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LargeArraySegment::has_should_delay_archiving() const {
  return _internal_has_should_delay_archiving();
}
inline void LargeArraySegment::clear_should_delay_archiving() {
  should_delay_archiving_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LargeArraySegment::_internal_should_delay_archiving() const {
  return should_delay_archiving_;
}
inline bool LargeArraySegment::should_delay_archiving() const {
  // @@protoc_insertion_point(field_get:TSP.LargeArraySegment.should_delay_archiving)
  return _internal_should_delay_archiving();
}
inline void LargeArraySegment::_internal_set_should_delay_archiving(bool value) {
  _has_bits_[0] |= 0x00000002u;
  should_delay_archiving_ = value;
}
inline void LargeArraySegment::set_should_delay_archiving(bool value) {
  _internal_set_should_delay_archiving(value);
  // @@protoc_insertion_point(field_set:TSP.LargeArraySegment.should_delay_archiving)
}

// optional uint32 delayed_archiving_priority = 2;
inline bool LargeArraySegment::_internal_has_delayed_archiving_priority() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LargeArraySegment::has_delayed_archiving_priority() const {
  return _internal_has_delayed_archiving_priority();
}
inline void LargeArraySegment::clear_delayed_archiving_priority() {
  delayed_archiving_priority_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LargeArraySegment::_internal_delayed_archiving_priority() const {
  return delayed_archiving_priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LargeArraySegment::delayed_archiving_priority() const {
  // @@protoc_insertion_point(field_get:TSP.LargeArraySegment.delayed_archiving_priority)
  return _internal_delayed_archiving_priority();
}
inline void LargeArraySegment::_internal_set_delayed_archiving_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  delayed_archiving_priority_ = value;
}
inline void LargeArraySegment::set_delayed_archiving_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_delayed_archiving_priority(value);
  // @@protoc_insertion_point(field_set:TSP.LargeArraySegment.delayed_archiving_priority)
}

// optional string package_locator = 3;
inline bool LargeArraySegment::_internal_has_package_locator() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LargeArraySegment::has_package_locator() const {
  return _internal_has_package_locator();
}
inline void LargeArraySegment::clear_package_locator() {
  package_locator_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LargeArraySegment::package_locator() const {
  // @@protoc_insertion_point(field_get:TSP.LargeArraySegment.package_locator)
  return _internal_package_locator();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void LargeArraySegment::set_package_locator(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 package_locator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSP.LargeArraySegment.package_locator)
}
inline std::string* LargeArraySegment::mutable_package_locator() {
  // @@protoc_insertion_point(field_mutable:TSP.LargeArraySegment.package_locator)
  return _internal_mutable_package_locator();
}
inline const std::string& LargeArraySegment::_internal_package_locator() const {
  return package_locator_.Get();
}
inline void LargeArraySegment::_internal_set_package_locator(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_locator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* LargeArraySegment::_internal_mutable_package_locator() {
  _has_bits_[0] |= 0x00000001u;
  return package_locator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LargeArraySegment::release_package_locator() {
  // @@protoc_insertion_point(field_release:TSP.LargeArraySegment.package_locator)
  if (!_internal_has_package_locator()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return package_locator_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LargeArraySegment::set_allocated_package_locator(std::string* package_locator) {
  if (package_locator != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_locator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_locator,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSP.LargeArraySegment.package_locator)
}

// -------------------------------------------------------------------

// LargeNumberArraySegment

// optional .TSP.LargeArraySegment large_array_segment = 1;
inline bool LargeNumberArraySegment::_internal_has_large_array_segment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || large_array_segment_ != nullptr);
  return value;
}
inline bool LargeNumberArraySegment::has_large_array_segment() const {
  return _internal_has_large_array_segment();
}
inline void LargeNumberArraySegment::clear_large_array_segment() {
  if (large_array_segment_ != nullptr) large_array_segment_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSP::LargeArraySegment& LargeNumberArraySegment::_internal_large_array_segment() const {
  const ::TSP::LargeArraySegment* p = large_array_segment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::LargeArraySegment&>(
      ::TSP::_LargeArraySegment_default_instance_);
}
inline const ::TSP::LargeArraySegment& LargeNumberArraySegment::large_array_segment() const {
  // @@protoc_insertion_point(field_get:TSP.LargeNumberArraySegment.large_array_segment)
  return _internal_large_array_segment();
}
inline void LargeNumberArraySegment::unsafe_arena_set_allocated_large_array_segment(
    ::TSP::LargeArraySegment* large_array_segment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_segment_);
  }
  large_array_segment_ = large_array_segment;
  if (large_array_segment) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.LargeNumberArraySegment.large_array_segment)
}
inline ::TSP::LargeArraySegment* LargeNumberArraySegment::release_large_array_segment() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArraySegment* temp = large_array_segment_;
  large_array_segment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::LargeArraySegment* LargeNumberArraySegment::unsafe_arena_release_large_array_segment() {
  // @@protoc_insertion_point(field_release:TSP.LargeNumberArraySegment.large_array_segment)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArraySegment* temp = large_array_segment_;
  large_array_segment_ = nullptr;
  return temp;
}
inline ::TSP::LargeArraySegment* LargeNumberArraySegment::_internal_mutable_large_array_segment() {
  _has_bits_[0] |= 0x00000001u;
  if (large_array_segment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::LargeArraySegment>(GetArena());
    large_array_segment_ = p;
  }
  return large_array_segment_;
}
inline ::TSP::LargeArraySegment* LargeNumberArraySegment::mutable_large_array_segment() {
  // @@protoc_insertion_point(field_mutable:TSP.LargeNumberArraySegment.large_array_segment)
  return _internal_mutable_large_array_segment();
}
inline void LargeNumberArraySegment::set_allocated_large_array_segment(::TSP::LargeArraySegment* large_array_segment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete large_array_segment_;
  }
  if (large_array_segment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(large_array_segment);
    if (message_arena != submessage_arena) {
      large_array_segment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_array_segment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  large_array_segment_ = large_array_segment;
  // @@protoc_insertion_point(field_set_allocated:TSP.LargeNumberArraySegment.large_array_segment)
}

// repeated double elements = 2;
inline int LargeNumberArraySegment::_internal_elements_size() const {
  return elements_.size();
}
inline int LargeNumberArraySegment::elements_size() const {
  return _internal_elements_size();
}
inline void LargeNumberArraySegment::clear_elements() {
  elements_.Clear();
}
inline double LargeNumberArraySegment::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline double LargeNumberArraySegment::elements(int index) const {
  // @@protoc_insertion_point(field_get:TSP.LargeNumberArraySegment.elements)
  return _internal_elements(index);
}
inline void LargeNumberArraySegment::set_elements(int index, double value) {
  elements_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSP.LargeNumberArraySegment.elements)
}
inline void LargeNumberArraySegment::_internal_add_elements(double value) {
  elements_.Add(value);
}
inline void LargeNumberArraySegment::add_elements(double value) {
  _internal_add_elements(value);
  // @@protoc_insertion_point(field_add:TSP.LargeNumberArraySegment.elements)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LargeNumberArraySegment::_internal_elements() const {
  return elements_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LargeNumberArraySegment::elements() const {
  // @@protoc_insertion_point(field_list:TSP.LargeNumberArraySegment.elements)
  return _internal_elements();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LargeNumberArraySegment::_internal_mutable_elements() {
  return &elements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LargeNumberArraySegment::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:TSP.LargeNumberArraySegment.elements)
  return _internal_mutable_elements();
}

// -------------------------------------------------------------------

// LargeStringArraySegment_OptionalElement

// optional string element = 1;
inline bool LargeStringArraySegment_OptionalElement::_internal_has_element() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LargeStringArraySegment_OptionalElement::has_element() const {
  return _internal_has_element();
}
inline void LargeStringArraySegment_OptionalElement::clear_element() {
  element_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LargeStringArraySegment_OptionalElement::element() const {
  // @@protoc_insertion_point(field_get:TSP.LargeStringArraySegment.OptionalElement.element)
  return _internal_element();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void LargeStringArraySegment_OptionalElement::set_element(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 element_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSP.LargeStringArraySegment.OptionalElement.element)
}
inline std::string* LargeStringArraySegment_OptionalElement::mutable_element() {
  // @@protoc_insertion_point(field_mutable:TSP.LargeStringArraySegment.OptionalElement.element)
  return _internal_mutable_element();
}
inline const std::string& LargeStringArraySegment_OptionalElement::_internal_element() const {
  return element_.Get();
}
inline void LargeStringArraySegment_OptionalElement::_internal_set_element(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  element_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* LargeStringArraySegment_OptionalElement::_internal_mutable_element() {
  _has_bits_[0] |= 0x00000001u;
  return element_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LargeStringArraySegment_OptionalElement::release_element() {
  // @@protoc_insertion_point(field_release:TSP.LargeStringArraySegment.OptionalElement.element)
  if (!_internal_has_element()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return element_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LargeStringArraySegment_OptionalElement::set_allocated_element(std::string* element) {
  if (element != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  element_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), element,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSP.LargeStringArraySegment.OptionalElement.element)
}

// -------------------------------------------------------------------

// LargeStringArraySegment

// optional .TSP.LargeArraySegment large_array_segment = 1;
inline bool LargeStringArraySegment::_internal_has_large_array_segment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || large_array_segment_ != nullptr);
  return value;
}
inline bool LargeStringArraySegment::has_large_array_segment() const {
  return _internal_has_large_array_segment();
}
inline void LargeStringArraySegment::clear_large_array_segment() {
  if (large_array_segment_ != nullptr) large_array_segment_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSP::LargeArraySegment& LargeStringArraySegment::_internal_large_array_segment() const {
  const ::TSP::LargeArraySegment* p = large_array_segment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::LargeArraySegment&>(
      ::TSP::_LargeArraySegment_default_instance_);
}
inline const ::TSP::LargeArraySegment& LargeStringArraySegment::large_array_segment() const {
  // @@protoc_insertion_point(field_get:TSP.LargeStringArraySegment.large_array_segment)
  return _internal_large_array_segment();
}
inline void LargeStringArraySegment::unsafe_arena_set_allocated_large_array_segment(
    ::TSP::LargeArraySegment* large_array_segment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_segment_);
  }
  large_array_segment_ = large_array_segment;
  if (large_array_segment) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.LargeStringArraySegment.large_array_segment)
}
inline ::TSP::LargeArraySegment* LargeStringArraySegment::release_large_array_segment() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArraySegment* temp = large_array_segment_;
  large_array_segment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::LargeArraySegment* LargeStringArraySegment::unsafe_arena_release_large_array_segment() {
  // @@protoc_insertion_point(field_release:TSP.LargeStringArraySegment.large_array_segment)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArraySegment* temp = large_array_segment_;
  large_array_segment_ = nullptr;
  return temp;
}
inline ::TSP::LargeArraySegment* LargeStringArraySegment::_internal_mutable_large_array_segment() {
  _has_bits_[0] |= 0x00000001u;
  if (large_array_segment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::LargeArraySegment>(GetArena());
    large_array_segment_ = p;
  }
  return large_array_segment_;
}
inline ::TSP::LargeArraySegment* LargeStringArraySegment::mutable_large_array_segment() {
  // @@protoc_insertion_point(field_mutable:TSP.LargeStringArraySegment.large_array_segment)
  return _internal_mutable_large_array_segment();
}
inline void LargeStringArraySegment::set_allocated_large_array_segment(::TSP::LargeArraySegment* large_array_segment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete large_array_segment_;
  }
  if (large_array_segment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(large_array_segment);
    if (message_arena != submessage_arena) {
      large_array_segment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_array_segment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  large_array_segment_ = large_array_segment;
  // @@protoc_insertion_point(field_set_allocated:TSP.LargeStringArraySegment.large_array_segment)
}

// repeated .TSP.LargeStringArraySegment.OptionalElement elements = 2;
inline int LargeStringArraySegment::_internal_elements_size() const {
  return elements_.size();
}
inline int LargeStringArraySegment::elements_size() const {
  return _internal_elements_size();
}
inline void LargeStringArraySegment::clear_elements() {
  elements_.Clear();
}
inline ::TSP::LargeStringArraySegment_OptionalElement* LargeStringArraySegment::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.LargeStringArraySegment.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::LargeStringArraySegment_OptionalElement >*
LargeStringArraySegment::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:TSP.LargeStringArraySegment.elements)
  return &elements_;
}
inline const ::TSP::LargeStringArraySegment_OptionalElement& LargeStringArraySegment::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::TSP::LargeStringArraySegment_OptionalElement& LargeStringArraySegment::elements(int index) const {
  // @@protoc_insertion_point(field_get:TSP.LargeStringArraySegment.elements)
  return _internal_elements(index);
}
inline ::TSP::LargeStringArraySegment_OptionalElement* LargeStringArraySegment::_internal_add_elements() {
  return elements_.Add();
}
inline ::TSP::LargeStringArraySegment_OptionalElement* LargeStringArraySegment::add_elements() {
  // @@protoc_insertion_point(field_add:TSP.LargeStringArraySegment.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::LargeStringArraySegment_OptionalElement >&
LargeStringArraySegment::elements() const {
  // @@protoc_insertion_point(field_list:TSP.LargeStringArraySegment.elements)
  return elements_;
}

// -------------------------------------------------------------------

// LargeUUIDArraySegment

// optional .TSP.LargeArraySegment large_array_segment = 1;
inline bool LargeUUIDArraySegment::_internal_has_large_array_segment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || large_array_segment_ != nullptr);
  return value;
}
inline bool LargeUUIDArraySegment::has_large_array_segment() const {
  return _internal_has_large_array_segment();
}
inline void LargeUUIDArraySegment::clear_large_array_segment() {
  if (large_array_segment_ != nullptr) large_array_segment_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSP::LargeArraySegment& LargeUUIDArraySegment::_internal_large_array_segment() const {
  const ::TSP::LargeArraySegment* p = large_array_segment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::LargeArraySegment&>(
      ::TSP::_LargeArraySegment_default_instance_);
}
inline const ::TSP::LargeArraySegment& LargeUUIDArraySegment::large_array_segment() const {
  // @@protoc_insertion_point(field_get:TSP.LargeUUIDArraySegment.large_array_segment)
  return _internal_large_array_segment();
}
inline void LargeUUIDArraySegment::unsafe_arena_set_allocated_large_array_segment(
    ::TSP::LargeArraySegment* large_array_segment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_segment_);
  }
  large_array_segment_ = large_array_segment;
  if (large_array_segment) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.LargeUUIDArraySegment.large_array_segment)
}
inline ::TSP::LargeArraySegment* LargeUUIDArraySegment::release_large_array_segment() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArraySegment* temp = large_array_segment_;
  large_array_segment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::LargeArraySegment* LargeUUIDArraySegment::unsafe_arena_release_large_array_segment() {
  // @@protoc_insertion_point(field_release:TSP.LargeUUIDArraySegment.large_array_segment)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArraySegment* temp = large_array_segment_;
  large_array_segment_ = nullptr;
  return temp;
}
inline ::TSP::LargeArraySegment* LargeUUIDArraySegment::_internal_mutable_large_array_segment() {
  _has_bits_[0] |= 0x00000001u;
  if (large_array_segment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::LargeArraySegment>(GetArena());
    large_array_segment_ = p;
  }
  return large_array_segment_;
}
inline ::TSP::LargeArraySegment* LargeUUIDArraySegment::mutable_large_array_segment() {
  // @@protoc_insertion_point(field_mutable:TSP.LargeUUIDArraySegment.large_array_segment)
  return _internal_mutable_large_array_segment();
}
inline void LargeUUIDArraySegment::set_allocated_large_array_segment(::TSP::LargeArraySegment* large_array_segment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete large_array_segment_;
  }
  if (large_array_segment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(large_array_segment);
    if (message_arena != submessage_arena) {
      large_array_segment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_array_segment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  large_array_segment_ = large_array_segment;
  // @@protoc_insertion_point(field_set_allocated:TSP.LargeUUIDArraySegment.large_array_segment)
}

// repeated .TSP.UUID elements = 2;
inline int LargeUUIDArraySegment::_internal_elements_size() const {
  return elements_.size();
}
inline int LargeUUIDArraySegment::elements_size() const {
  return _internal_elements_size();
}
inline void LargeUUIDArraySegment::clear_elements() {
  elements_.Clear();
}
inline ::TSP::UUID* LargeUUIDArraySegment::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.LargeUUIDArraySegment.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
LargeUUIDArraySegment::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:TSP.LargeUUIDArraySegment.elements)
  return &elements_;
}
inline const ::TSP::UUID& LargeUUIDArraySegment::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::TSP::UUID& LargeUUIDArraySegment::elements(int index) const {
  // @@protoc_insertion_point(field_get:TSP.LargeUUIDArraySegment.elements)
  return _internal_elements(index);
}
inline ::TSP::UUID* LargeUUIDArraySegment::_internal_add_elements() {
  return elements_.Add();
}
inline ::TSP::UUID* LargeUUIDArraySegment::add_elements() {
  // @@protoc_insertion_point(field_add:TSP.LargeUUIDArraySegment.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
LargeUUIDArraySegment::elements() const {
  // @@protoc_insertion_point(field_list:TSP.LargeUUIDArraySegment.elements)
  return elements_;
}

// -------------------------------------------------------------------

// LargeLazyObjectArraySegment

// optional .TSP.LargeArraySegment large_array_segment = 1;
inline bool LargeLazyObjectArraySegment::_internal_has_large_array_segment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || large_array_segment_ != nullptr);
  return value;
}
inline bool LargeLazyObjectArraySegment::has_large_array_segment() const {
  return _internal_has_large_array_segment();
}
inline void LargeLazyObjectArraySegment::clear_large_array_segment() {
  if (large_array_segment_ != nullptr) large_array_segment_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSP::LargeArraySegment& LargeLazyObjectArraySegment::_internal_large_array_segment() const {
  const ::TSP::LargeArraySegment* p = large_array_segment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::LargeArraySegment&>(
      ::TSP::_LargeArraySegment_default_instance_);
}
inline const ::TSP::LargeArraySegment& LargeLazyObjectArraySegment::large_array_segment() const {
  // @@protoc_insertion_point(field_get:TSP.LargeLazyObjectArraySegment.large_array_segment)
  return _internal_large_array_segment();
}
inline void LargeLazyObjectArraySegment::unsafe_arena_set_allocated_large_array_segment(
    ::TSP::LargeArraySegment* large_array_segment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_segment_);
  }
  large_array_segment_ = large_array_segment;
  if (large_array_segment) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.LargeLazyObjectArraySegment.large_array_segment)
}
inline ::TSP::LargeArraySegment* LargeLazyObjectArraySegment::release_large_array_segment() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArraySegment* temp = large_array_segment_;
  large_array_segment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::LargeArraySegment* LargeLazyObjectArraySegment::unsafe_arena_release_large_array_segment() {
  // @@protoc_insertion_point(field_release:TSP.LargeLazyObjectArraySegment.large_array_segment)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArraySegment* temp = large_array_segment_;
  large_array_segment_ = nullptr;
  return temp;
}
inline ::TSP::LargeArraySegment* LargeLazyObjectArraySegment::_internal_mutable_large_array_segment() {
  _has_bits_[0] |= 0x00000001u;
  if (large_array_segment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::LargeArraySegment>(GetArena());
    large_array_segment_ = p;
  }
  return large_array_segment_;
}
inline ::TSP::LargeArraySegment* LargeLazyObjectArraySegment::mutable_large_array_segment() {
  // @@protoc_insertion_point(field_mutable:TSP.LargeLazyObjectArraySegment.large_array_segment)
  return _internal_mutable_large_array_segment();
}
inline void LargeLazyObjectArraySegment::set_allocated_large_array_segment(::TSP::LargeArraySegment* large_array_segment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete large_array_segment_;
  }
  if (large_array_segment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(large_array_segment);
    if (message_arena != submessage_arena) {
      large_array_segment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_array_segment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  large_array_segment_ = large_array_segment;
  // @@protoc_insertion_point(field_set_allocated:TSP.LargeLazyObjectArraySegment.large_array_segment)
}

// repeated .TSP.Reference elements = 2;
inline int LargeLazyObjectArraySegment::_internal_elements_size() const {
  return elements_.size();
}
inline int LargeLazyObjectArraySegment::elements_size() const {
  return _internal_elements_size();
}
inline void LargeLazyObjectArraySegment::clear_elements() {
  elements_.Clear();
}
inline ::TSP::Reference* LargeLazyObjectArraySegment::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.LargeLazyObjectArraySegment.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
LargeLazyObjectArraySegment::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:TSP.LargeLazyObjectArraySegment.elements)
  return &elements_;
}
inline const ::TSP::Reference& LargeLazyObjectArraySegment::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::TSP::Reference& LargeLazyObjectArraySegment::elements(int index) const {
  // @@protoc_insertion_point(field_get:TSP.LargeLazyObjectArraySegment.elements)
  return _internal_elements(index);
}
inline ::TSP::Reference* LargeLazyObjectArraySegment::_internal_add_elements() {
  return elements_.Add();
}
inline ::TSP::Reference* LargeLazyObjectArraySegment::add_elements() {
  // @@protoc_insertion_point(field_add:TSP.LargeLazyObjectArraySegment.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
LargeLazyObjectArraySegment::elements() const {
  // @@protoc_insertion_point(field_list:TSP.LargeLazyObjectArraySegment.elements)
  return elements_;
}

// -------------------------------------------------------------------

// LargeObjectArraySegment

// optional .TSP.LargeArraySegment large_array_segment = 1;
inline bool LargeObjectArraySegment::_internal_has_large_array_segment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || large_array_segment_ != nullptr);
  return value;
}
inline bool LargeObjectArraySegment::has_large_array_segment() const {
  return _internal_has_large_array_segment();
}
inline void LargeObjectArraySegment::clear_large_array_segment() {
  if (large_array_segment_ != nullptr) large_array_segment_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSP::LargeArraySegment& LargeObjectArraySegment::_internal_large_array_segment() const {
  const ::TSP::LargeArraySegment* p = large_array_segment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::LargeArraySegment&>(
      ::TSP::_LargeArraySegment_default_instance_);
}
inline const ::TSP::LargeArraySegment& LargeObjectArraySegment::large_array_segment() const {
  // @@protoc_insertion_point(field_get:TSP.LargeObjectArraySegment.large_array_segment)
  return _internal_large_array_segment();
}
inline void LargeObjectArraySegment::unsafe_arena_set_allocated_large_array_segment(
    ::TSP::LargeArraySegment* large_array_segment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_segment_);
  }
  large_array_segment_ = large_array_segment;
  if (large_array_segment) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.LargeObjectArraySegment.large_array_segment)
}
inline ::TSP::LargeArraySegment* LargeObjectArraySegment::release_large_array_segment() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArraySegment* temp = large_array_segment_;
  large_array_segment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::LargeArraySegment* LargeObjectArraySegment::unsafe_arena_release_large_array_segment() {
  // @@protoc_insertion_point(field_release:TSP.LargeObjectArraySegment.large_array_segment)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArraySegment* temp = large_array_segment_;
  large_array_segment_ = nullptr;
  return temp;
}
inline ::TSP::LargeArraySegment* LargeObjectArraySegment::_internal_mutable_large_array_segment() {
  _has_bits_[0] |= 0x00000001u;
  if (large_array_segment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::LargeArraySegment>(GetArena());
    large_array_segment_ = p;
  }
  return large_array_segment_;
}
inline ::TSP::LargeArraySegment* LargeObjectArraySegment::mutable_large_array_segment() {
  // @@protoc_insertion_point(field_mutable:TSP.LargeObjectArraySegment.large_array_segment)
  return _internal_mutable_large_array_segment();
}
inline void LargeObjectArraySegment::set_allocated_large_array_segment(::TSP::LargeArraySegment* large_array_segment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete large_array_segment_;
  }
  if (large_array_segment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(large_array_segment);
    if (message_arena != submessage_arena) {
      large_array_segment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_array_segment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  large_array_segment_ = large_array_segment;
  // @@protoc_insertion_point(field_set_allocated:TSP.LargeObjectArraySegment.large_array_segment)
}

// repeated .TSP.Reference elements = 2;
inline int LargeObjectArraySegment::_internal_elements_size() const {
  return elements_.size();
}
inline int LargeObjectArraySegment::elements_size() const {
  return _internal_elements_size();
}
inline void LargeObjectArraySegment::clear_elements() {
  elements_.Clear();
}
inline ::TSP::Reference* LargeObjectArraySegment::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.LargeObjectArraySegment.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
LargeObjectArraySegment::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:TSP.LargeObjectArraySegment.elements)
  return &elements_;
}
inline const ::TSP::Reference& LargeObjectArraySegment::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::TSP::Reference& LargeObjectArraySegment::elements(int index) const {
  // @@protoc_insertion_point(field_get:TSP.LargeObjectArraySegment.elements)
  return _internal_elements(index);
}
inline ::TSP::Reference* LargeObjectArraySegment::_internal_add_elements() {
  return elements_.Add();
}
inline ::TSP::Reference* LargeObjectArraySegment::add_elements() {
  // @@protoc_insertion_point(field_add:TSP.LargeObjectArraySegment.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
LargeObjectArraySegment::elements() const {
  // @@protoc_insertion_point(field_list:TSP.LargeObjectArraySegment.elements)
  return elements_;
}

// -------------------------------------------------------------------

// LargeArray

// repeated .TSP.Range ranges = 1;
inline int LargeArray::_internal_ranges_size() const {
  return ranges_.size();
}
inline int LargeArray::ranges_size() const {
  return _internal_ranges_size();
}
inline void LargeArray::clear_ranges() {
  ranges_.Clear();
}
inline ::TSP::Range* LargeArray::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.LargeArray.ranges)
  return ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >*
LargeArray::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:TSP.LargeArray.ranges)
  return &ranges_;
}
inline const ::TSP::Range& LargeArray::_internal_ranges(int index) const {
  return ranges_.Get(index);
}
inline const ::TSP::Range& LargeArray::ranges(int index) const {
  // @@protoc_insertion_point(field_get:TSP.LargeArray.ranges)
  return _internal_ranges(index);
}
inline ::TSP::Range* LargeArray::_internal_add_ranges() {
  return ranges_.Add();
}
inline ::TSP::Range* LargeArray::add_ranges() {
  // @@protoc_insertion_point(field_add:TSP.LargeArray.ranges)
  return _internal_add_ranges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Range >&
LargeArray::ranges() const {
  // @@protoc_insertion_point(field_list:TSP.LargeArray.ranges)
  return ranges_;
}

// repeated .TSP.Reference segments = 2;
inline int LargeArray::_internal_segments_size() const {
  return segments_.size();
}
inline int LargeArray::segments_size() const {
  return _internal_segments_size();
}
inline void LargeArray::clear_segments() {
  segments_.Clear();
}
inline ::TSP::Reference* LargeArray::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.LargeArray.segments)
  return segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
LargeArray::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:TSP.LargeArray.segments)
  return &segments_;
}
inline const ::TSP::Reference& LargeArray::_internal_segments(int index) const {
  return segments_.Get(index);
}
inline const ::TSP::Reference& LargeArray::segments(int index) const {
  // @@protoc_insertion_point(field_get:TSP.LargeArray.segments)
  return _internal_segments(index);
}
inline ::TSP::Reference* LargeArray::_internal_add_segments() {
  return segments_.Add();
}
inline ::TSP::Reference* LargeArray::add_segments() {
  // @@protoc_insertion_point(field_add:TSP.LargeArray.segments)
  return _internal_add_segments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
LargeArray::segments() const {
  // @@protoc_insertion_point(field_list:TSP.LargeArray.segments)
  return segments_;
}

// optional uint64 max_segment_element_count = 3;
inline bool LargeArray::_internal_has_max_segment_element_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LargeArray::has_max_segment_element_count() const {
  return _internal_has_max_segment_element_count();
}
inline void LargeArray::clear_max_segment_element_count() {
  max_segment_element_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LargeArray::_internal_max_segment_element_count() const {
  return max_segment_element_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LargeArray::max_segment_element_count() const {
  // @@protoc_insertion_point(field_get:TSP.LargeArray.max_segment_element_count)
  return _internal_max_segment_element_count();
}
inline void LargeArray::_internal_set_max_segment_element_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  max_segment_element_count_ = value;
}
inline void LargeArray::set_max_segment_element_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_segment_element_count(value);
  // @@protoc_insertion_point(field_set:TSP.LargeArray.max_segment_element_count)
}

// optional uint64 max_segment_size = 4;
inline bool LargeArray::_internal_has_max_segment_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LargeArray::has_max_segment_size() const {
  return _internal_has_max_segment_size();
}
inline void LargeArray::clear_max_segment_size() {
  max_segment_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LargeArray::_internal_max_segment_size() const {
  return max_segment_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LargeArray::max_segment_size() const {
  // @@protoc_insertion_point(field_get:TSP.LargeArray.max_segment_size)
  return _internal_max_segment_size();
}
inline void LargeArray::_internal_set_max_segment_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  max_segment_size_ = value;
}
inline void LargeArray::set_max_segment_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_segment_size(value);
  // @@protoc_insertion_point(field_set:TSP.LargeArray.max_segment_size)
}

// optional bool should_delay_archiving = 5;
inline bool LargeArray::_internal_has_should_delay_archiving() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LargeArray::has_should_delay_archiving() const {
  return _internal_has_should_delay_archiving();
}
inline void LargeArray::clear_should_delay_archiving() {
  should_delay_archiving_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool LargeArray::_internal_should_delay_archiving() const {
  return should_delay_archiving_;
}
inline bool LargeArray::should_delay_archiving() const {
  // @@protoc_insertion_point(field_get:TSP.LargeArray.should_delay_archiving)
  return _internal_should_delay_archiving();
}
inline void LargeArray::_internal_set_should_delay_archiving(bool value) {
  _has_bits_[0] |= 0x00000008u;
  should_delay_archiving_ = value;
}
inline void LargeArray::set_should_delay_archiving(bool value) {
  _internal_set_should_delay_archiving(value);
  // @@protoc_insertion_point(field_set:TSP.LargeArray.should_delay_archiving)
}

// optional uint32 delayed_archiving_priority = 6;
inline bool LargeArray::_internal_has_delayed_archiving_priority() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LargeArray::has_delayed_archiving_priority() const {
  return _internal_has_delayed_archiving_priority();
}
inline void LargeArray::clear_delayed_archiving_priority() {
  delayed_archiving_priority_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LargeArray::_internal_delayed_archiving_priority() const {
  return delayed_archiving_priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LargeArray::delayed_archiving_priority() const {
  // @@protoc_insertion_point(field_get:TSP.LargeArray.delayed_archiving_priority)
  return _internal_delayed_archiving_priority();
}
inline void LargeArray::_internal_set_delayed_archiving_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  delayed_archiving_priority_ = value;
}
inline void LargeArray::set_delayed_archiving_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_delayed_archiving_priority(value);
  // @@protoc_insertion_point(field_set:TSP.LargeArray.delayed_archiving_priority)
}

// optional bool store_outside_object_archive = 7;
inline bool LargeArray::_internal_has_store_outside_object_archive() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LargeArray::has_store_outside_object_archive() const {
  return _internal_has_store_outside_object_archive();
}
inline void LargeArray::clear_store_outside_object_archive() {
  store_outside_object_archive_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool LargeArray::_internal_store_outside_object_archive() const {
  return store_outside_object_archive_;
}
inline bool LargeArray::store_outside_object_archive() const {
  // @@protoc_insertion_point(field_get:TSP.LargeArray.store_outside_object_archive)
  return _internal_store_outside_object_archive();
}
inline void LargeArray::_internal_set_store_outside_object_archive(bool value) {
  _has_bits_[0] |= 0x00000010u;
  store_outside_object_archive_ = value;
}
inline void LargeArray::set_store_outside_object_archive(bool value) {
  _internal_set_store_outside_object_archive(value);
  // @@protoc_insertion_point(field_set:TSP.LargeArray.store_outside_object_archive)
}

// optional uint64 estimated_byte_size = 8;
inline bool LargeArray::_internal_has_estimated_byte_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LargeArray::has_estimated_byte_size() const {
  return _internal_has_estimated_byte_size();
}
inline void LargeArray::clear_estimated_byte_size() {
  estimated_byte_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LargeArray::_internal_estimated_byte_size() const {
  return estimated_byte_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LargeArray::estimated_byte_size() const {
  // @@protoc_insertion_point(field_get:TSP.LargeArray.estimated_byte_size)
  return _internal_estimated_byte_size();
}
inline void LargeArray::_internal_set_estimated_byte_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  estimated_byte_size_ = value;
}
inline void LargeArray::set_estimated_byte_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_estimated_byte_size(value);
  // @@protoc_insertion_point(field_set:TSP.LargeArray.estimated_byte_size)
}

// -------------------------------------------------------------------

// LargeNumberArray

// optional .TSP.LargeArray large_array = 1;
inline bool LargeNumberArray::_internal_has_large_array() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || large_array_ != nullptr);
  return value;
}
inline bool LargeNumberArray::has_large_array() const {
  return _internal_has_large_array();
}
inline void LargeNumberArray::clear_large_array() {
  if (large_array_ != nullptr) large_array_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSP::LargeArray& LargeNumberArray::_internal_large_array() const {
  const ::TSP::LargeArray* p = large_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::LargeArray&>(
      ::TSP::_LargeArray_default_instance_);
}
inline const ::TSP::LargeArray& LargeNumberArray::large_array() const {
  // @@protoc_insertion_point(field_get:TSP.LargeNumberArray.large_array)
  return _internal_large_array();
}
inline void LargeNumberArray::unsafe_arena_set_allocated_large_array(
    ::TSP::LargeArray* large_array) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_);
  }
  large_array_ = large_array;
  if (large_array) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.LargeNumberArray.large_array)
}
inline ::TSP::LargeArray* LargeNumberArray::release_large_array() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArray* temp = large_array_;
  large_array_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::LargeArray* LargeNumberArray::unsafe_arena_release_large_array() {
  // @@protoc_insertion_point(field_release:TSP.LargeNumberArray.large_array)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArray* temp = large_array_;
  large_array_ = nullptr;
  return temp;
}
inline ::TSP::LargeArray* LargeNumberArray::_internal_mutable_large_array() {
  _has_bits_[0] |= 0x00000001u;
  if (large_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::LargeArray>(GetArena());
    large_array_ = p;
  }
  return large_array_;
}
inline ::TSP::LargeArray* LargeNumberArray::mutable_large_array() {
  // @@protoc_insertion_point(field_mutable:TSP.LargeNumberArray.large_array)
  return _internal_mutable_large_array();
}
inline void LargeNumberArray::set_allocated_large_array(::TSP::LargeArray* large_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete large_array_;
  }
  if (large_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(large_array);
    if (message_arena != submessage_arena) {
      large_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_array, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  large_array_ = large_array;
  // @@protoc_insertion_point(field_set_allocated:TSP.LargeNumberArray.large_array)
}

// -------------------------------------------------------------------

// LargeStringArray

// optional .TSP.LargeArray large_array = 1;
inline bool LargeStringArray::_internal_has_large_array() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || large_array_ != nullptr);
  return value;
}
inline bool LargeStringArray::has_large_array() const {
  return _internal_has_large_array();
}
inline void LargeStringArray::clear_large_array() {
  if (large_array_ != nullptr) large_array_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSP::LargeArray& LargeStringArray::_internal_large_array() const {
  const ::TSP::LargeArray* p = large_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::LargeArray&>(
      ::TSP::_LargeArray_default_instance_);
}
inline const ::TSP::LargeArray& LargeStringArray::large_array() const {
  // @@protoc_insertion_point(field_get:TSP.LargeStringArray.large_array)
  return _internal_large_array();
}
inline void LargeStringArray::unsafe_arena_set_allocated_large_array(
    ::TSP::LargeArray* large_array) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_);
  }
  large_array_ = large_array;
  if (large_array) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.LargeStringArray.large_array)
}
inline ::TSP::LargeArray* LargeStringArray::release_large_array() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArray* temp = large_array_;
  large_array_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::LargeArray* LargeStringArray::unsafe_arena_release_large_array() {
  // @@protoc_insertion_point(field_release:TSP.LargeStringArray.large_array)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArray* temp = large_array_;
  large_array_ = nullptr;
  return temp;
}
inline ::TSP::LargeArray* LargeStringArray::_internal_mutable_large_array() {
  _has_bits_[0] |= 0x00000001u;
  if (large_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::LargeArray>(GetArena());
    large_array_ = p;
  }
  return large_array_;
}
inline ::TSP::LargeArray* LargeStringArray::mutable_large_array() {
  // @@protoc_insertion_point(field_mutable:TSP.LargeStringArray.large_array)
  return _internal_mutable_large_array();
}
inline void LargeStringArray::set_allocated_large_array(::TSP::LargeArray* large_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete large_array_;
  }
  if (large_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(large_array);
    if (message_arena != submessage_arena) {
      large_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_array, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  large_array_ = large_array;
  // @@protoc_insertion_point(field_set_allocated:TSP.LargeStringArray.large_array)
}

// -------------------------------------------------------------------

// LargeLazyObjectArray

// optional .TSP.LargeArray large_array = 1;
inline bool LargeLazyObjectArray::_internal_has_large_array() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || large_array_ != nullptr);
  return value;
}
inline bool LargeLazyObjectArray::has_large_array() const {
  return _internal_has_large_array();
}
inline void LargeLazyObjectArray::clear_large_array() {
  if (large_array_ != nullptr) large_array_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSP::LargeArray& LargeLazyObjectArray::_internal_large_array() const {
  const ::TSP::LargeArray* p = large_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::LargeArray&>(
      ::TSP::_LargeArray_default_instance_);
}
inline const ::TSP::LargeArray& LargeLazyObjectArray::large_array() const {
  // @@protoc_insertion_point(field_get:TSP.LargeLazyObjectArray.large_array)
  return _internal_large_array();
}
inline void LargeLazyObjectArray::unsafe_arena_set_allocated_large_array(
    ::TSP::LargeArray* large_array) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_);
  }
  large_array_ = large_array;
  if (large_array) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.LargeLazyObjectArray.large_array)
}
inline ::TSP::LargeArray* LargeLazyObjectArray::release_large_array() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArray* temp = large_array_;
  large_array_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::LargeArray* LargeLazyObjectArray::unsafe_arena_release_large_array() {
  // @@protoc_insertion_point(field_release:TSP.LargeLazyObjectArray.large_array)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArray* temp = large_array_;
  large_array_ = nullptr;
  return temp;
}
inline ::TSP::LargeArray* LargeLazyObjectArray::_internal_mutable_large_array() {
  _has_bits_[0] |= 0x00000001u;
  if (large_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::LargeArray>(GetArena());
    large_array_ = p;
  }
  return large_array_;
}
inline ::TSP::LargeArray* LargeLazyObjectArray::mutable_large_array() {
  // @@protoc_insertion_point(field_mutable:TSP.LargeLazyObjectArray.large_array)
  return _internal_mutable_large_array();
}
inline void LargeLazyObjectArray::set_allocated_large_array(::TSP::LargeArray* large_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete large_array_;
  }
  if (large_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(large_array);
    if (message_arena != submessage_arena) {
      large_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_array, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  large_array_ = large_array;
  // @@protoc_insertion_point(field_set_allocated:TSP.LargeLazyObjectArray.large_array)
}

// -------------------------------------------------------------------

// LargeObjectArray

// optional .TSP.LargeArray large_array = 1;
inline bool LargeObjectArray::_internal_has_large_array() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || large_array_ != nullptr);
  return value;
}
inline bool LargeObjectArray::has_large_array() const {
  return _internal_has_large_array();
}
inline void LargeObjectArray::clear_large_array() {
  if (large_array_ != nullptr) large_array_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSP::LargeArray& LargeObjectArray::_internal_large_array() const {
  const ::TSP::LargeArray* p = large_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::LargeArray&>(
      ::TSP::_LargeArray_default_instance_);
}
inline const ::TSP::LargeArray& LargeObjectArray::large_array() const {
  // @@protoc_insertion_point(field_get:TSP.LargeObjectArray.large_array)
  return _internal_large_array();
}
inline void LargeObjectArray::unsafe_arena_set_allocated_large_array(
    ::TSP::LargeArray* large_array) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_);
  }
  large_array_ = large_array;
  if (large_array) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.LargeObjectArray.large_array)
}
inline ::TSP::LargeArray* LargeObjectArray::release_large_array() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArray* temp = large_array_;
  large_array_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::LargeArray* LargeObjectArray::unsafe_arena_release_large_array() {
  // @@protoc_insertion_point(field_release:TSP.LargeObjectArray.large_array)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArray* temp = large_array_;
  large_array_ = nullptr;
  return temp;
}
inline ::TSP::LargeArray* LargeObjectArray::_internal_mutable_large_array() {
  _has_bits_[0] |= 0x00000001u;
  if (large_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::LargeArray>(GetArena());
    large_array_ = p;
  }
  return large_array_;
}
inline ::TSP::LargeArray* LargeObjectArray::mutable_large_array() {
  // @@protoc_insertion_point(field_mutable:TSP.LargeObjectArray.large_array)
  return _internal_mutable_large_array();
}
inline void LargeObjectArray::set_allocated_large_array(::TSP::LargeArray* large_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete large_array_;
  }
  if (large_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(large_array);
    if (message_arena != submessage_arena) {
      large_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_array, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  large_array_ = large_array;
  // @@protoc_insertion_point(field_set_allocated:TSP.LargeObjectArray.large_array)
}

// -------------------------------------------------------------------

// LargeUUIDArray

// optional .TSP.LargeArray large_array = 1;
inline bool LargeUUIDArray::_internal_has_large_array() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || large_array_ != nullptr);
  return value;
}
inline bool LargeUUIDArray::has_large_array() const {
  return _internal_has_large_array();
}
inline void LargeUUIDArray::clear_large_array() {
  if (large_array_ != nullptr) large_array_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSP::LargeArray& LargeUUIDArray::_internal_large_array() const {
  const ::TSP::LargeArray* p = large_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::LargeArray&>(
      ::TSP::_LargeArray_default_instance_);
}
inline const ::TSP::LargeArray& LargeUUIDArray::large_array() const {
  // @@protoc_insertion_point(field_get:TSP.LargeUUIDArray.large_array)
  return _internal_large_array();
}
inline void LargeUUIDArray::unsafe_arena_set_allocated_large_array(
    ::TSP::LargeArray* large_array) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_);
  }
  large_array_ = large_array;
  if (large_array) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.LargeUUIDArray.large_array)
}
inline ::TSP::LargeArray* LargeUUIDArray::release_large_array() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArray* temp = large_array_;
  large_array_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::LargeArray* LargeUUIDArray::unsafe_arena_release_large_array() {
  // @@protoc_insertion_point(field_release:TSP.LargeUUIDArray.large_array)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArray* temp = large_array_;
  large_array_ = nullptr;
  return temp;
}
inline ::TSP::LargeArray* LargeUUIDArray::_internal_mutable_large_array() {
  _has_bits_[0] |= 0x00000001u;
  if (large_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::LargeArray>(GetArena());
    large_array_ = p;
  }
  return large_array_;
}
inline ::TSP::LargeArray* LargeUUIDArray::mutable_large_array() {
  // @@protoc_insertion_point(field_mutable:TSP.LargeUUIDArray.large_array)
  return _internal_mutable_large_array();
}
inline void LargeUUIDArray::set_allocated_large_array(::TSP::LargeArray* large_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete large_array_;
  }
  if (large_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(large_array);
    if (message_arena != submessage_arena) {
      large_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_array, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  large_array_ = large_array;
  // @@protoc_insertion_point(field_set_allocated:TSP.LargeUUIDArray.large_array)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSP

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TSP::Color_ColorModel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSP::Color_ColorModel>() {
  return ::TSP::Color_ColorModel_descriptor();
}
template <> struct is_proto_enum< ::TSP::Color_RGBColorSpace> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSP::Color_RGBColorSpace>() {
  return ::TSP::Color_RGBColorSpace_descriptor();
}
template <> struct is_proto_enum< ::TSP::Path_ElementType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSP::Path_ElementType>() {
  return ::TSP::Path_ElementType_descriptor();
}
template <> struct is_proto_enum< ::TSP::DataUploadStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSP::DataUploadStatus>() {
  return ::TSP::DataUploadStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSPMessages_2eproto
