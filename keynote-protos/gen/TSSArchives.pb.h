// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSSArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSSArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSSArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSSArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSSArchives_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSSArchives_2eproto;
namespace TSS {
class ApplyThemeChildCommandArchive;
struct ApplyThemeChildCommandArchiveDefaultTypeInternal;
extern ApplyThemeChildCommandArchiveDefaultTypeInternal _ApplyThemeChildCommandArchive_default_instance_;
class ApplyThemeCommandArchive;
struct ApplyThemeCommandArchiveDefaultTypeInternal;
extern ApplyThemeCommandArchiveDefaultTypeInternal _ApplyThemeCommandArchive_default_instance_;
class CommandPropertyEntryArchive;
struct CommandPropertyEntryArchiveDefaultTypeInternal;
extern CommandPropertyEntryArchiveDefaultTypeInternal _CommandPropertyEntryArchive_default_instance_;
class CommandPropertyMapArchive;
struct CommandPropertyMapArchiveDefaultTypeInternal;
extern CommandPropertyMapArchiveDefaultTypeInternal _CommandPropertyMapArchive_default_instance_;
class StyleArchive;
struct StyleArchiveDefaultTypeInternal;
extern StyleArchiveDefaultTypeInternal _StyleArchive_default_instance_;
class StyleUpdatePropertyMapCommandArchive;
struct StyleUpdatePropertyMapCommandArchiveDefaultTypeInternal;
extern StyleUpdatePropertyMapCommandArchiveDefaultTypeInternal _StyleUpdatePropertyMapCommandArchive_default_instance_;
class StylesheetArchive;
struct StylesheetArchiveDefaultTypeInternal;
extern StylesheetArchiveDefaultTypeInternal _StylesheetArchive_default_instance_;
class StylesheetArchive_IdentifiedStyleEntry;
struct StylesheetArchive_IdentifiedStyleEntryDefaultTypeInternal;
extern StylesheetArchive_IdentifiedStyleEntryDefaultTypeInternal _StylesheetArchive_IdentifiedStyleEntry_default_instance_;
class StylesheetArchive_StyleChildrenEntry;
struct StylesheetArchive_StyleChildrenEntryDefaultTypeInternal;
extern StylesheetArchive_StyleChildrenEntryDefaultTypeInternal _StylesheetArchive_StyleChildrenEntry_default_instance_;
class StylesheetArchive_VersionedStyles;
struct StylesheetArchive_VersionedStylesDefaultTypeInternal;
extern StylesheetArchive_VersionedStylesDefaultTypeInternal _StylesheetArchive_VersionedStyles_default_instance_;
class ThemeAddStylePresetCommandArchive;
struct ThemeAddStylePresetCommandArchiveDefaultTypeInternal;
extern ThemeAddStylePresetCommandArchiveDefaultTypeInternal _ThemeAddStylePresetCommandArchive_default_instance_;
class ThemeArchive;
struct ThemeArchiveDefaultTypeInternal;
extern ThemeArchiveDefaultTypeInternal _ThemeArchive_default_instance_;
class ThemeMovePresetCommandArchive;
struct ThemeMovePresetCommandArchiveDefaultTypeInternal;
extern ThemeMovePresetCommandArchiveDefaultTypeInternal _ThemeMovePresetCommandArchive_default_instance_;
class ThemeRemoveStylePresetCommandArchive;
struct ThemeRemoveStylePresetCommandArchiveDefaultTypeInternal;
extern ThemeRemoveStylePresetCommandArchiveDefaultTypeInternal _ThemeRemoveStylePresetCommandArchive_default_instance_;
class ThemeReplaceColorPresetCommandArchive;
struct ThemeReplaceColorPresetCommandArchiveDefaultTypeInternal;
extern ThemeReplaceColorPresetCommandArchiveDefaultTypeInternal _ThemeReplaceColorPresetCommandArchive_default_instance_;
class ThemeReplacePresetCommandArchive;
struct ThemeReplacePresetCommandArchiveDefaultTypeInternal;
extern ThemeReplacePresetCommandArchiveDefaultTypeInternal _ThemeReplacePresetCommandArchive_default_instance_;
class ThemeReplaceStylePresetAndDisconnectStylesCommandArchive;
struct ThemeReplaceStylePresetAndDisconnectStylesCommandArchiveDefaultTypeInternal;
extern ThemeReplaceStylePresetAndDisconnectStylesCommandArchiveDefaultTypeInternal _ThemeReplaceStylePresetAndDisconnectStylesCommandArchive_default_instance_;
}  // namespace TSS
PROTOBUF_NAMESPACE_OPEN
template<> ::TSS::ApplyThemeChildCommandArchive* Arena::CreateMaybeMessage<::TSS::ApplyThemeChildCommandArchive>(Arena*);
template<> ::TSS::ApplyThemeCommandArchive* Arena::CreateMaybeMessage<::TSS::ApplyThemeCommandArchive>(Arena*);
template<> ::TSS::CommandPropertyEntryArchive* Arena::CreateMaybeMessage<::TSS::CommandPropertyEntryArchive>(Arena*);
template<> ::TSS::CommandPropertyMapArchive* Arena::CreateMaybeMessage<::TSS::CommandPropertyMapArchive>(Arena*);
template<> ::TSS::StyleArchive* Arena::CreateMaybeMessage<::TSS::StyleArchive>(Arena*);
template<> ::TSS::StyleUpdatePropertyMapCommandArchive* Arena::CreateMaybeMessage<::TSS::StyleUpdatePropertyMapCommandArchive>(Arena*);
template<> ::TSS::StylesheetArchive* Arena::CreateMaybeMessage<::TSS::StylesheetArchive>(Arena*);
template<> ::TSS::StylesheetArchive_IdentifiedStyleEntry* Arena::CreateMaybeMessage<::TSS::StylesheetArchive_IdentifiedStyleEntry>(Arena*);
template<> ::TSS::StylesheetArchive_StyleChildrenEntry* Arena::CreateMaybeMessage<::TSS::StylesheetArchive_StyleChildrenEntry>(Arena*);
template<> ::TSS::StylesheetArchive_VersionedStyles* Arena::CreateMaybeMessage<::TSS::StylesheetArchive_VersionedStyles>(Arena*);
template<> ::TSS::ThemeAddStylePresetCommandArchive* Arena::CreateMaybeMessage<::TSS::ThemeAddStylePresetCommandArchive>(Arena*);
template<> ::TSS::ThemeArchive* Arena::CreateMaybeMessage<::TSS::ThemeArchive>(Arena*);
template<> ::TSS::ThemeMovePresetCommandArchive* Arena::CreateMaybeMessage<::TSS::ThemeMovePresetCommandArchive>(Arena*);
template<> ::TSS::ThemeRemoveStylePresetCommandArchive* Arena::CreateMaybeMessage<::TSS::ThemeRemoveStylePresetCommandArchive>(Arena*);
template<> ::TSS::ThemeReplaceColorPresetCommandArchive* Arena::CreateMaybeMessage<::TSS::ThemeReplaceColorPresetCommandArchive>(Arena*);
template<> ::TSS::ThemeReplacePresetCommandArchive* Arena::CreateMaybeMessage<::TSS::ThemeReplacePresetCommandArchive>(Arena*);
template<> ::TSS::ThemeReplaceStylePresetAndDisconnectStylesCommandArchive* Arena::CreateMaybeMessage<::TSS::ThemeReplaceStylePresetAndDisconnectStylesCommandArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSS {

enum ValueType : int {
  ObjectType = 0,
  IntType = 1,
  FloatType = 2,
  DoubleType = 3
};
bool ValueType_IsValid(int value);
constexpr ValueType ValueType_MIN = ObjectType;
constexpr ValueType ValueType_MAX = DoubleType;
constexpr int ValueType_ARRAYSIZE = ValueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValueType_descriptor();
template<typename T>
inline const std::string& ValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ValueType_descriptor(), enum_t_value);
}
inline bool ValueType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ValueType>(
    ValueType_descriptor(), name, value);
}
enum PropertyType : int {
  InvalidPropertyType = 1,
  NullPropertyType = 2,
  IntegerPropertyType = 3,
  FloatPropertyType = 4,
  DoublePropertyType = 5,
  NSStringPropertyType = 6,
  TSPObjectPropertyType = 7
};
bool PropertyType_IsValid(int value);
constexpr PropertyType PropertyType_MIN = InvalidPropertyType;
constexpr PropertyType PropertyType_MAX = TSPObjectPropertyType;
constexpr int PropertyType_ARRAYSIZE = PropertyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PropertyType_descriptor();
template<typename T>
inline const std::string& PropertyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PropertyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PropertyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PropertyType_descriptor(), enum_t_value);
}
inline bool PropertyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PropertyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PropertyType>(
    PropertyType_descriptor(), name, value);
}
// ===================================================================

class StyleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSS.StyleArchive) */ {
 public:
  inline StyleArchive() : StyleArchive(nullptr) {}
  ~StyleArchive() override;
  explicit constexpr StyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StyleArchive(const StyleArchive& from);
  StyleArchive(StyleArchive&& from) noexcept
    : StyleArchive() {
    *this = ::std::move(from);
  }

  inline StyleArchive& operator=(const StyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleArchive& operator=(StyleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StyleArchive* internal_default_instance() {
    return reinterpret_cast<const StyleArchive*>(
               &_StyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StyleArchive& a, StyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyleArchive* New() const final {
    return CreateMaybeMessage<StyleArchive>(nullptr);
  }

  StyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StyleArchive& from);
  void MergeFrom(const StyleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSS.StyleArchive";
  }
  protected:
  explicit StyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStyleIdentifierFieldNumber = 2,
    kParentFieldNumber = 3,
    kStylesheetFieldNumber = 5,
    kIsVariationFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string style_identifier = 2;
  bool has_style_identifier() const;
  private:
  bool _internal_has_style_identifier() const;
  public:
  void clear_style_identifier();
  const std::string& style_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_style_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_style_identifier();
  std::string* release_style_identifier();
  void set_allocated_style_identifier(std::string* style_identifier);
  private:
  const std::string& _internal_style_identifier() const;
  void _internal_set_style_identifier(const std::string& value);
  std::string* _internal_mutable_style_identifier();
  public:

  // optional .TSP.Reference parent = 3;
  bool has_parent() const;
  private:
  bool _internal_has_parent() const;
  public:
  void clear_parent();
  const ::TSP::Reference& parent() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_parent();
  ::TSP::Reference* mutable_parent();
  void set_allocated_parent(::TSP::Reference* parent);
  private:
  const ::TSP::Reference& _internal_parent() const;
  ::TSP::Reference* _internal_mutable_parent();
  public:
  void unsafe_arena_set_allocated_parent(
      ::TSP::Reference* parent);
  ::TSP::Reference* unsafe_arena_release_parent();

  // optional .TSP.Reference stylesheet = 5;
  bool has_stylesheet() const;
  private:
  bool _internal_has_stylesheet() const;
  public:
  void clear_stylesheet();
  const ::TSP::Reference& stylesheet() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_stylesheet();
  ::TSP::Reference* mutable_stylesheet();
  void set_allocated_stylesheet(::TSP::Reference* stylesheet);
  private:
  const ::TSP::Reference& _internal_stylesheet() const;
  ::TSP::Reference* _internal_mutable_stylesheet();
  public:
  void unsafe_arena_set_allocated_stylesheet(
      ::TSP::Reference* stylesheet);
  ::TSP::Reference* unsafe_arena_release_stylesheet();

  // optional bool is_variation = 4 [default = false];
  bool has_is_variation() const;
  private:
  bool _internal_has_is_variation() const;
  public:
  void clear_is_variation();
  bool is_variation() const;
  void set_is_variation(bool value);
  private:
  bool _internal_is_variation() const;
  void _internal_set_is_variation(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSS.StyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr style_identifier_;
  ::TSP::Reference* parent_;
  ::TSP::Reference* stylesheet_;
  bool is_variation_;
  friend struct ::TableStruct_TSSArchives_2eproto;
};
// -------------------------------------------------------------------

class StylesheetArchive_IdentifiedStyleEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSS.StylesheetArchive.IdentifiedStyleEntry) */ {
 public:
  inline StylesheetArchive_IdentifiedStyleEntry() : StylesheetArchive_IdentifiedStyleEntry(nullptr) {}
  ~StylesheetArchive_IdentifiedStyleEntry() override;
  explicit constexpr StylesheetArchive_IdentifiedStyleEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StylesheetArchive_IdentifiedStyleEntry(const StylesheetArchive_IdentifiedStyleEntry& from);
  StylesheetArchive_IdentifiedStyleEntry(StylesheetArchive_IdentifiedStyleEntry&& from) noexcept
    : StylesheetArchive_IdentifiedStyleEntry() {
    *this = ::std::move(from);
  }

  inline StylesheetArchive_IdentifiedStyleEntry& operator=(const StylesheetArchive_IdentifiedStyleEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline StylesheetArchive_IdentifiedStyleEntry& operator=(StylesheetArchive_IdentifiedStyleEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StylesheetArchive_IdentifiedStyleEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const StylesheetArchive_IdentifiedStyleEntry* internal_default_instance() {
    return reinterpret_cast<const StylesheetArchive_IdentifiedStyleEntry*>(
               &_StylesheetArchive_IdentifiedStyleEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StylesheetArchive_IdentifiedStyleEntry& a, StylesheetArchive_IdentifiedStyleEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(StylesheetArchive_IdentifiedStyleEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StylesheetArchive_IdentifiedStyleEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StylesheetArchive_IdentifiedStyleEntry* New() const final {
    return CreateMaybeMessage<StylesheetArchive_IdentifiedStyleEntry>(nullptr);
  }

  StylesheetArchive_IdentifiedStyleEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StylesheetArchive_IdentifiedStyleEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StylesheetArchive_IdentifiedStyleEntry& from);
  void MergeFrom(const StylesheetArchive_IdentifiedStyleEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StylesheetArchive_IdentifiedStyleEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSS.StylesheetArchive.IdentifiedStyleEntry";
  }
  protected:
  explicit StylesheetArchive_IdentifiedStyleEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kStyleFieldNumber = 2,
  };
  // required string identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // required .TSP.Reference style = 2;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::TSP::Reference& style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_style();
  ::TSP::Reference* mutable_style();
  void set_allocated_style(::TSP::Reference* style);
  private:
  const ::TSP::Reference& _internal_style() const;
  ::TSP::Reference* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::TSP::Reference* style);
  ::TSP::Reference* unsafe_arena_release_style();

  // @@protoc_insertion_point(class_scope:TSS.StylesheetArchive.IdentifiedStyleEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::TSP::Reference* style_;
  friend struct ::TableStruct_TSSArchives_2eproto;
};
// -------------------------------------------------------------------

class StylesheetArchive_StyleChildrenEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSS.StylesheetArchive.StyleChildrenEntry) */ {
 public:
  inline StylesheetArchive_StyleChildrenEntry() : StylesheetArchive_StyleChildrenEntry(nullptr) {}
  ~StylesheetArchive_StyleChildrenEntry() override;
  explicit constexpr StylesheetArchive_StyleChildrenEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StylesheetArchive_StyleChildrenEntry(const StylesheetArchive_StyleChildrenEntry& from);
  StylesheetArchive_StyleChildrenEntry(StylesheetArchive_StyleChildrenEntry&& from) noexcept
    : StylesheetArchive_StyleChildrenEntry() {
    *this = ::std::move(from);
  }

  inline StylesheetArchive_StyleChildrenEntry& operator=(const StylesheetArchive_StyleChildrenEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline StylesheetArchive_StyleChildrenEntry& operator=(StylesheetArchive_StyleChildrenEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StylesheetArchive_StyleChildrenEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const StylesheetArchive_StyleChildrenEntry* internal_default_instance() {
    return reinterpret_cast<const StylesheetArchive_StyleChildrenEntry*>(
               &_StylesheetArchive_StyleChildrenEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StylesheetArchive_StyleChildrenEntry& a, StylesheetArchive_StyleChildrenEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(StylesheetArchive_StyleChildrenEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StylesheetArchive_StyleChildrenEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StylesheetArchive_StyleChildrenEntry* New() const final {
    return CreateMaybeMessage<StylesheetArchive_StyleChildrenEntry>(nullptr);
  }

  StylesheetArchive_StyleChildrenEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StylesheetArchive_StyleChildrenEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StylesheetArchive_StyleChildrenEntry& from);
  void MergeFrom(const StylesheetArchive_StyleChildrenEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StylesheetArchive_StyleChildrenEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSS.StylesheetArchive.StyleChildrenEntry";
  }
  protected:
  explicit StylesheetArchive_StyleChildrenEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 2,
    kParentFieldNumber = 1,
  };
  // repeated .TSP.Reference children = 2;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::TSP::Reference* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_children();
  private:
  const ::TSP::Reference& _internal_children(int index) const;
  ::TSP::Reference* _internal_add_children();
  public:
  const ::TSP::Reference& children(int index) const;
  ::TSP::Reference* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      children() const;

  // required .TSP.Reference parent = 1;
  bool has_parent() const;
  private:
  bool _internal_has_parent() const;
  public:
  void clear_parent();
  const ::TSP::Reference& parent() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_parent();
  ::TSP::Reference* mutable_parent();
  void set_allocated_parent(::TSP::Reference* parent);
  private:
  const ::TSP::Reference& _internal_parent() const;
  ::TSP::Reference* _internal_mutable_parent();
  public:
  void unsafe_arena_set_allocated_parent(
      ::TSP::Reference* parent);
  ::TSP::Reference* unsafe_arena_release_parent();

  // @@protoc_insertion_point(class_scope:TSS.StylesheetArchive.StyleChildrenEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > children_;
  ::TSP::Reference* parent_;
  friend struct ::TableStruct_TSSArchives_2eproto;
};
// -------------------------------------------------------------------

class StylesheetArchive_VersionedStyles PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSS.StylesheetArchive.VersionedStyles) */ {
 public:
  inline StylesheetArchive_VersionedStyles() : StylesheetArchive_VersionedStyles(nullptr) {}
  ~StylesheetArchive_VersionedStyles() override;
  explicit constexpr StylesheetArchive_VersionedStyles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StylesheetArchive_VersionedStyles(const StylesheetArchive_VersionedStyles& from);
  StylesheetArchive_VersionedStyles(StylesheetArchive_VersionedStyles&& from) noexcept
    : StylesheetArchive_VersionedStyles() {
    *this = ::std::move(from);
  }

  inline StylesheetArchive_VersionedStyles& operator=(const StylesheetArchive_VersionedStyles& from) {
    CopyFrom(from);
    return *this;
  }
  inline StylesheetArchive_VersionedStyles& operator=(StylesheetArchive_VersionedStyles&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StylesheetArchive_VersionedStyles& default_instance() {
    return *internal_default_instance();
  }
  static inline const StylesheetArchive_VersionedStyles* internal_default_instance() {
    return reinterpret_cast<const StylesheetArchive_VersionedStyles*>(
               &_StylesheetArchive_VersionedStyles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StylesheetArchive_VersionedStyles& a, StylesheetArchive_VersionedStyles& b) {
    a.Swap(&b);
  }
  inline void Swap(StylesheetArchive_VersionedStyles* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StylesheetArchive_VersionedStyles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StylesheetArchive_VersionedStyles* New() const final {
    return CreateMaybeMessage<StylesheetArchive_VersionedStyles>(nullptr);
  }

  StylesheetArchive_VersionedStyles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StylesheetArchive_VersionedStyles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StylesheetArchive_VersionedStyles& from);
  void MergeFrom(const StylesheetArchive_VersionedStyles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StylesheetArchive_VersionedStyles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSS.StylesheetArchive.VersionedStyles";
  }
  protected:
  explicit StylesheetArchive_VersionedStyles(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStylesFieldNumber = 1,
    kIdentifierToStyleMapFieldNumber = 2,
    kParentToChildrenStyleMapFieldNumber = 3,
  };
  // repeated .TSP.Reference styles = 1;
  int styles_size() const;
  private:
  int _internal_styles_size() const;
  public:
  void clear_styles();
  ::TSP::Reference* mutable_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_styles();
  private:
  const ::TSP::Reference& _internal_styles(int index) const;
  ::TSP::Reference* _internal_add_styles();
  public:
  const ::TSP::Reference& styles(int index) const;
  ::TSP::Reference* add_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      styles() const;

  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 2;
  int identifier_to_style_map_size() const;
  private:
  int _internal_identifier_to_style_map_size() const;
  public:
  void clear_identifier_to_style_map();
  ::TSS::StylesheetArchive_IdentifiedStyleEntry* mutable_identifier_to_style_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >*
      mutable_identifier_to_style_map();
  private:
  const ::TSS::StylesheetArchive_IdentifiedStyleEntry& _internal_identifier_to_style_map(int index) const;
  ::TSS::StylesheetArchive_IdentifiedStyleEntry* _internal_add_identifier_to_style_map();
  public:
  const ::TSS::StylesheetArchive_IdentifiedStyleEntry& identifier_to_style_map(int index) const;
  ::TSS::StylesheetArchive_IdentifiedStyleEntry* add_identifier_to_style_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >&
      identifier_to_style_map() const;

  // repeated .TSS.StylesheetArchive.StyleChildrenEntry parent_to_children_style_map = 3;
  int parent_to_children_style_map_size() const;
  private:
  int _internal_parent_to_children_style_map_size() const;
  public:
  void clear_parent_to_children_style_map();
  ::TSS::StylesheetArchive_StyleChildrenEntry* mutable_parent_to_children_style_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_StyleChildrenEntry >*
      mutable_parent_to_children_style_map();
  private:
  const ::TSS::StylesheetArchive_StyleChildrenEntry& _internal_parent_to_children_style_map(int index) const;
  ::TSS::StylesheetArchive_StyleChildrenEntry* _internal_add_parent_to_children_style_map();
  public:
  const ::TSS::StylesheetArchive_StyleChildrenEntry& parent_to_children_style_map(int index) const;
  ::TSS::StylesheetArchive_StyleChildrenEntry* add_parent_to_children_style_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_StyleChildrenEntry >&
      parent_to_children_style_map() const;

  // @@protoc_insertion_point(class_scope:TSS.StylesheetArchive.VersionedStyles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > styles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry > identifier_to_style_map_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_StyleChildrenEntry > parent_to_children_style_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSSArchives_2eproto;
};
// -------------------------------------------------------------------

class StylesheetArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSS.StylesheetArchive) */ {
 public:
  inline StylesheetArchive() : StylesheetArchive(nullptr) {}
  ~StylesheetArchive() override;
  explicit constexpr StylesheetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StylesheetArchive(const StylesheetArchive& from);
  StylesheetArchive(StylesheetArchive&& from) noexcept
    : StylesheetArchive() {
    *this = ::std::move(from);
  }

  inline StylesheetArchive& operator=(const StylesheetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StylesheetArchive& operator=(StylesheetArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StylesheetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StylesheetArchive* internal_default_instance() {
    return reinterpret_cast<const StylesheetArchive*>(
               &_StylesheetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StylesheetArchive& a, StylesheetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StylesheetArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StylesheetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StylesheetArchive* New() const final {
    return CreateMaybeMessage<StylesheetArchive>(nullptr);
  }

  StylesheetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StylesheetArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StylesheetArchive& from);
  void MergeFrom(const StylesheetArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StylesheetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSS.StylesheetArchive";
  }
  protected:
  explicit StylesheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StylesheetArchive_IdentifiedStyleEntry IdentifiedStyleEntry;
  typedef StylesheetArchive_StyleChildrenEntry StyleChildrenEntry;
  typedef StylesheetArchive_VersionedStyles VersionedStyles;

  // accessors -------------------------------------------------------

  enum : int {
    kStylesFieldNumber = 1,
    kIdentifierToStyleMapFieldNumber = 2,
    kParentToChildrenStyleMapFieldNumber = 5,
    kParentFieldNumber = 3,
    kStylesFor100FieldNumber = 7,
    kStylesFor101FieldNumber = 8,
    kStylesFor102FieldNumber = 9,
    kStylesFor110FieldNumber = 10,
    kStylesFor111FieldNumber = 11,
    kCanCullStylesFieldNumber = 6,
    kIsLockedFieldNumber = 4,
  };
  // repeated .TSP.Reference styles = 1;
  int styles_size() const;
  private:
  int _internal_styles_size() const;
  public:
  void clear_styles();
  ::TSP::Reference* mutable_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_styles();
  private:
  const ::TSP::Reference& _internal_styles(int index) const;
  ::TSP::Reference* _internal_add_styles();
  public:
  const ::TSP::Reference& styles(int index) const;
  ::TSP::Reference* add_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      styles() const;

  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 2;
  int identifier_to_style_map_size() const;
  private:
  int _internal_identifier_to_style_map_size() const;
  public:
  void clear_identifier_to_style_map();
  ::TSS::StylesheetArchive_IdentifiedStyleEntry* mutable_identifier_to_style_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >*
      mutable_identifier_to_style_map();
  private:
  const ::TSS::StylesheetArchive_IdentifiedStyleEntry& _internal_identifier_to_style_map(int index) const;
  ::TSS::StylesheetArchive_IdentifiedStyleEntry* _internal_add_identifier_to_style_map();
  public:
  const ::TSS::StylesheetArchive_IdentifiedStyleEntry& identifier_to_style_map(int index) const;
  ::TSS::StylesheetArchive_IdentifiedStyleEntry* add_identifier_to_style_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >&
      identifier_to_style_map() const;

  // repeated .TSS.StylesheetArchive.StyleChildrenEntry parent_to_children_style_map = 5;
  int parent_to_children_style_map_size() const;
  private:
  int _internal_parent_to_children_style_map_size() const;
  public:
  void clear_parent_to_children_style_map();
  ::TSS::StylesheetArchive_StyleChildrenEntry* mutable_parent_to_children_style_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_StyleChildrenEntry >*
      mutable_parent_to_children_style_map();
  private:
  const ::TSS::StylesheetArchive_StyleChildrenEntry& _internal_parent_to_children_style_map(int index) const;
  ::TSS::StylesheetArchive_StyleChildrenEntry* _internal_add_parent_to_children_style_map();
  public:
  const ::TSS::StylesheetArchive_StyleChildrenEntry& parent_to_children_style_map(int index) const;
  ::TSS::StylesheetArchive_StyleChildrenEntry* add_parent_to_children_style_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_StyleChildrenEntry >&
      parent_to_children_style_map() const;

  // optional .TSP.Reference parent = 3;
  bool has_parent() const;
  private:
  bool _internal_has_parent() const;
  public:
  void clear_parent();
  const ::TSP::Reference& parent() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_parent();
  ::TSP::Reference* mutable_parent();
  void set_allocated_parent(::TSP::Reference* parent);
  private:
  const ::TSP::Reference& _internal_parent() const;
  ::TSP::Reference* _internal_mutable_parent();
  public:
  void unsafe_arena_set_allocated_parent(
      ::TSP::Reference* parent);
  ::TSP::Reference* unsafe_arena_release_parent();

  // optional .TSS.StylesheetArchive.VersionedStyles styles_for_10_0 = 7;
  bool has_styles_for_10_0() const;
  private:
  bool _internal_has_styles_for_10_0() const;
  public:
  void clear_styles_for_10_0();
  const ::TSS::StylesheetArchive_VersionedStyles& styles_for_10_0() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StylesheetArchive_VersionedStyles* release_styles_for_10_0();
  ::TSS::StylesheetArchive_VersionedStyles* mutable_styles_for_10_0();
  void set_allocated_styles_for_10_0(::TSS::StylesheetArchive_VersionedStyles* styles_for_10_0);
  private:
  const ::TSS::StylesheetArchive_VersionedStyles& _internal_styles_for_10_0() const;
  ::TSS::StylesheetArchive_VersionedStyles* _internal_mutable_styles_for_10_0();
  public:
  void unsafe_arena_set_allocated_styles_for_10_0(
      ::TSS::StylesheetArchive_VersionedStyles* styles_for_10_0);
  ::TSS::StylesheetArchive_VersionedStyles* unsafe_arena_release_styles_for_10_0();

  // optional .TSS.StylesheetArchive.VersionedStyles styles_for_10_1 = 8;
  bool has_styles_for_10_1() const;
  private:
  bool _internal_has_styles_for_10_1() const;
  public:
  void clear_styles_for_10_1();
  const ::TSS::StylesheetArchive_VersionedStyles& styles_for_10_1() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StylesheetArchive_VersionedStyles* release_styles_for_10_1();
  ::TSS::StylesheetArchive_VersionedStyles* mutable_styles_for_10_1();
  void set_allocated_styles_for_10_1(::TSS::StylesheetArchive_VersionedStyles* styles_for_10_1);
  private:
  const ::TSS::StylesheetArchive_VersionedStyles& _internal_styles_for_10_1() const;
  ::TSS::StylesheetArchive_VersionedStyles* _internal_mutable_styles_for_10_1();
  public:
  void unsafe_arena_set_allocated_styles_for_10_1(
      ::TSS::StylesheetArchive_VersionedStyles* styles_for_10_1);
  ::TSS::StylesheetArchive_VersionedStyles* unsafe_arena_release_styles_for_10_1();

  // optional .TSS.StylesheetArchive.VersionedStyles styles_for_10_2 = 9;
  bool has_styles_for_10_2() const;
  private:
  bool _internal_has_styles_for_10_2() const;
  public:
  void clear_styles_for_10_2();
  const ::TSS::StylesheetArchive_VersionedStyles& styles_for_10_2() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StylesheetArchive_VersionedStyles* release_styles_for_10_2();
  ::TSS::StylesheetArchive_VersionedStyles* mutable_styles_for_10_2();
  void set_allocated_styles_for_10_2(::TSS::StylesheetArchive_VersionedStyles* styles_for_10_2);
  private:
  const ::TSS::StylesheetArchive_VersionedStyles& _internal_styles_for_10_2() const;
  ::TSS::StylesheetArchive_VersionedStyles* _internal_mutable_styles_for_10_2();
  public:
  void unsafe_arena_set_allocated_styles_for_10_2(
      ::TSS::StylesheetArchive_VersionedStyles* styles_for_10_2);
  ::TSS::StylesheetArchive_VersionedStyles* unsafe_arena_release_styles_for_10_2();

  // optional .TSS.StylesheetArchive.VersionedStyles styles_for_11_0 = 10;
  bool has_styles_for_11_0() const;
  private:
  bool _internal_has_styles_for_11_0() const;
  public:
  void clear_styles_for_11_0();
  const ::TSS::StylesheetArchive_VersionedStyles& styles_for_11_0() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StylesheetArchive_VersionedStyles* release_styles_for_11_0();
  ::TSS::StylesheetArchive_VersionedStyles* mutable_styles_for_11_0();
  void set_allocated_styles_for_11_0(::TSS::StylesheetArchive_VersionedStyles* styles_for_11_0);
  private:
  const ::TSS::StylesheetArchive_VersionedStyles& _internal_styles_for_11_0() const;
  ::TSS::StylesheetArchive_VersionedStyles* _internal_mutable_styles_for_11_0();
  public:
  void unsafe_arena_set_allocated_styles_for_11_0(
      ::TSS::StylesheetArchive_VersionedStyles* styles_for_11_0);
  ::TSS::StylesheetArchive_VersionedStyles* unsafe_arena_release_styles_for_11_0();

  // optional .TSS.StylesheetArchive.VersionedStyles styles_for_11_1 = 11;
  bool has_styles_for_11_1() const;
  private:
  bool _internal_has_styles_for_11_1() const;
  public:
  void clear_styles_for_11_1();
  const ::TSS::StylesheetArchive_VersionedStyles& styles_for_11_1() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StylesheetArchive_VersionedStyles* release_styles_for_11_1();
  ::TSS::StylesheetArchive_VersionedStyles* mutable_styles_for_11_1();
  void set_allocated_styles_for_11_1(::TSS::StylesheetArchive_VersionedStyles* styles_for_11_1);
  private:
  const ::TSS::StylesheetArchive_VersionedStyles& _internal_styles_for_11_1() const;
  ::TSS::StylesheetArchive_VersionedStyles* _internal_mutable_styles_for_11_1();
  public:
  void unsafe_arena_set_allocated_styles_for_11_1(
      ::TSS::StylesheetArchive_VersionedStyles* styles_for_11_1);
  ::TSS::StylesheetArchive_VersionedStyles* unsafe_arena_release_styles_for_11_1();

  // optional bool can_cull_styles = 6 [default = false];
  bool has_can_cull_styles() const;
  private:
  bool _internal_has_can_cull_styles() const;
  public:
  void clear_can_cull_styles();
  bool can_cull_styles() const;
  void set_can_cull_styles(bool value);
  private:
  bool _internal_can_cull_styles() const;
  void _internal_set_can_cull_styles(bool value);
  public:

  // optional bool is_locked = 4 [default = true];
  bool has_is_locked() const;
  private:
  bool _internal_has_is_locked() const;
  public:
  void clear_is_locked();
  bool is_locked() const;
  void set_is_locked(bool value);
  private:
  bool _internal_is_locked() const;
  void _internal_set_is_locked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSS.StylesheetArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > styles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry > identifier_to_style_map_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_StyleChildrenEntry > parent_to_children_style_map_;
  ::TSP::Reference* parent_;
  ::TSS::StylesheetArchive_VersionedStyles* styles_for_10_0_;
  ::TSS::StylesheetArchive_VersionedStyles* styles_for_10_1_;
  ::TSS::StylesheetArchive_VersionedStyles* styles_for_10_2_;
  ::TSS::StylesheetArchive_VersionedStyles* styles_for_11_0_;
  ::TSS::StylesheetArchive_VersionedStyles* styles_for_11_1_;
  bool can_cull_styles_;
  bool is_locked_;
  friend struct ::TableStruct_TSSArchives_2eproto;
};
// -------------------------------------------------------------------

class ThemeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSS.ThemeArchive) */ {
 public:
  inline ThemeArchive() : ThemeArchive(nullptr) {}
  ~ThemeArchive() override;
  explicit constexpr ThemeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemeArchive(const ThemeArchive& from);
  ThemeArchive(ThemeArchive&& from) noexcept
    : ThemeArchive() {
    *this = ::std::move(from);
  }

  inline ThemeArchive& operator=(const ThemeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemeArchive& operator=(ThemeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemeArchive* internal_default_instance() {
    return reinterpret_cast<const ThemeArchive*>(
               &_ThemeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ThemeArchive& a, ThemeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThemeArchive* New() const final {
    return CreateMaybeMessage<ThemeArchive>(nullptr);
  }

  ThemeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThemeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThemeArchive& from);
  void MergeFrom(const ThemeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSS.ThemeArchive";
  }
  protected:
  explicit ThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldUuidsForPresetReplacementsFieldNumber = 5,
    kNewUuidsForPresetReplacementsFieldNumber = 6,
    kColorPresetsFieldNumber = 10,
    kThemeIdentifierFieldNumber = 3,
    kLegacyStylesheetFieldNumber = 1,
    kDocumentStylesheetFieldNumber = 4,
  };
  // repeated .TSP.UUID old_uuids_for_preset_replacements = 5;
  int old_uuids_for_preset_replacements_size() const;
  private:
  int _internal_old_uuids_for_preset_replacements_size() const;
  public:
  void clear_old_uuids_for_preset_replacements();
  ::TSP::UUID* mutable_old_uuids_for_preset_replacements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_old_uuids_for_preset_replacements();
  private:
  const ::TSP::UUID& _internal_old_uuids_for_preset_replacements(int index) const;
  ::TSP::UUID* _internal_add_old_uuids_for_preset_replacements();
  public:
  const ::TSP::UUID& old_uuids_for_preset_replacements(int index) const;
  ::TSP::UUID* add_old_uuids_for_preset_replacements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      old_uuids_for_preset_replacements() const;

  // repeated .TSP.UUID new_uuids_for_preset_replacements = 6;
  int new_uuids_for_preset_replacements_size() const;
  private:
  int _internal_new_uuids_for_preset_replacements_size() const;
  public:
  void clear_new_uuids_for_preset_replacements();
  ::TSP::UUID* mutable_new_uuids_for_preset_replacements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_new_uuids_for_preset_replacements();
  private:
  const ::TSP::UUID& _internal_new_uuids_for_preset_replacements(int index) const;
  ::TSP::UUID* _internal_add_new_uuids_for_preset_replacements();
  public:
  const ::TSP::UUID& new_uuids_for_preset_replacements(int index) const;
  ::TSP::UUID* add_new_uuids_for_preset_replacements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      new_uuids_for_preset_replacements() const;

  // repeated .TSP.Color color_presets = 10;
  int color_presets_size() const;
  private:
  int _internal_color_presets_size() const;
  public:
  void clear_color_presets();
  ::TSP::Color* mutable_color_presets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Color >*
      mutable_color_presets();
  private:
  const ::TSP::Color& _internal_color_presets(int index) const;
  ::TSP::Color* _internal_add_color_presets();
  public:
  const ::TSP::Color& color_presets(int index) const;
  ::TSP::Color* add_color_presets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Color >&
      color_presets() const;

  // optional string theme_identifier = 3;
  bool has_theme_identifier() const;
  private:
  bool _internal_has_theme_identifier() const;
  public:
  void clear_theme_identifier();
  const std::string& theme_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_theme_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_theme_identifier();
  std::string* release_theme_identifier();
  void set_allocated_theme_identifier(std::string* theme_identifier);
  private:
  const std::string& _internal_theme_identifier() const;
  void _internal_set_theme_identifier(const std::string& value);
  std::string* _internal_mutable_theme_identifier();
  public:

  // optional .TSP.Reference legacy_stylesheet = 1;
  bool has_legacy_stylesheet() const;
  private:
  bool _internal_has_legacy_stylesheet() const;
  public:
  void clear_legacy_stylesheet();
  const ::TSP::Reference& legacy_stylesheet() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_legacy_stylesheet();
  ::TSP::Reference* mutable_legacy_stylesheet();
  void set_allocated_legacy_stylesheet(::TSP::Reference* legacy_stylesheet);
  private:
  const ::TSP::Reference& _internal_legacy_stylesheet() const;
  ::TSP::Reference* _internal_mutable_legacy_stylesheet();
  public:
  void unsafe_arena_set_allocated_legacy_stylesheet(
      ::TSP::Reference* legacy_stylesheet);
  ::TSP::Reference* unsafe_arena_release_legacy_stylesheet();

  // optional .TSP.Reference document_stylesheet = 4;
  bool has_document_stylesheet() const;
  private:
  bool _internal_has_document_stylesheet() const;
  public:
  void clear_document_stylesheet();
  const ::TSP::Reference& document_stylesheet() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_document_stylesheet();
  ::TSP::Reference* mutable_document_stylesheet();
  void set_allocated_document_stylesheet(::TSP::Reference* document_stylesheet);
  private:
  const ::TSP::Reference& _internal_document_stylesheet() const;
  ::TSP::Reference* _internal_mutable_document_stylesheet();
  public:
  void unsafe_arena_set_allocated_document_stylesheet(
      ::TSP::Reference* document_stylesheet);
  ::TSP::Reference* unsafe_arena_release_document_stylesheet();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ThemeArchive)
  // @@protoc_insertion_point(class_scope:TSS.ThemeArchive)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > old_uuids_for_preset_replacements_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > new_uuids_for_preset_replacements_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Color > color_presets_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr theme_identifier_;
  ::TSP::Reference* legacy_stylesheet_;
  ::TSP::Reference* document_stylesheet_;
  friend struct ::TableStruct_TSSArchives_2eproto;
};
// -------------------------------------------------------------------

class ApplyThemeCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSS.ApplyThemeCommandArchive) */ {
 public:
  inline ApplyThemeCommandArchive() : ApplyThemeCommandArchive(nullptr) {}
  ~ApplyThemeCommandArchive() override;
  explicit constexpr ApplyThemeCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApplyThemeCommandArchive(const ApplyThemeCommandArchive& from);
  ApplyThemeCommandArchive(ApplyThemeCommandArchive&& from) noexcept
    : ApplyThemeCommandArchive() {
    *this = ::std::move(from);
  }

  inline ApplyThemeCommandArchive& operator=(const ApplyThemeCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyThemeCommandArchive& operator=(ApplyThemeCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApplyThemeCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplyThemeCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ApplyThemeCommandArchive*>(
               &_ApplyThemeCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ApplyThemeCommandArchive& a, ApplyThemeCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyThemeCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyThemeCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplyThemeCommandArchive* New() const final {
    return CreateMaybeMessage<ApplyThemeCommandArchive>(nullptr);
  }

  ApplyThemeCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplyThemeCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplyThemeCommandArchive& from);
  void MergeFrom(const ApplyThemeCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyThemeCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSS.ApplyThemeCommandArchive";
  }
  protected:
  explicit ApplyThemeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandsFieldNumber = 2,
    kSuperFieldNumber = 1,
    kOldThemeFieldNumber = 3,
    kNewThemeFieldNumber = 4,
  };
  // repeated .TSP.Reference commands = 2;
  int commands_size() const;
  private:
  int _internal_commands_size() const;
  public:
  void clear_commands();
  ::TSP::Reference* mutable_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_commands();
  private:
  const ::TSP::Reference& _internal_commands(int index) const;
  ::TSP::Reference* _internal_add_commands();
  public:
  const ::TSP::Reference& commands(int index) const;
  ::TSP::Reference* add_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      commands() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference old_theme = 3;
  bool has_old_theme() const;
  private:
  bool _internal_has_old_theme() const;
  public:
  void clear_old_theme();
  const ::TSP::Reference& old_theme() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_old_theme();
  ::TSP::Reference* mutable_old_theme();
  void set_allocated_old_theme(::TSP::Reference* old_theme);
  private:
  const ::TSP::Reference& _internal_old_theme() const;
  ::TSP::Reference* _internal_mutable_old_theme();
  public:
  void unsafe_arena_set_allocated_old_theme(
      ::TSP::Reference* old_theme);
  ::TSP::Reference* unsafe_arena_release_old_theme();

  // optional .TSP.Reference new_theme = 4;
  bool has_new_theme() const;
  private:
  bool _internal_has_new_theme() const;
  public:
  void clear_new_theme();
  const ::TSP::Reference& new_theme() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_new_theme();
  ::TSP::Reference* mutable_new_theme();
  void set_allocated_new_theme(::TSP::Reference* new_theme);
  private:
  const ::TSP::Reference& _internal_new_theme() const;
  ::TSP::Reference* _internal_mutable_new_theme();
  public:
  void unsafe_arena_set_allocated_new_theme(
      ::TSP::Reference* new_theme);
  ::TSP::Reference* unsafe_arena_release_new_theme();

  // @@protoc_insertion_point(class_scope:TSS.ApplyThemeCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > commands_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* old_theme_;
  ::TSP::Reference* new_theme_;
  friend struct ::TableStruct_TSSArchives_2eproto;
};
// -------------------------------------------------------------------

class ApplyThemeChildCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSS.ApplyThemeChildCommandArchive) */ {
 public:
  inline ApplyThemeChildCommandArchive() : ApplyThemeChildCommandArchive(nullptr) {}
  ~ApplyThemeChildCommandArchive() override;
  explicit constexpr ApplyThemeChildCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApplyThemeChildCommandArchive(const ApplyThemeChildCommandArchive& from);
  ApplyThemeChildCommandArchive(ApplyThemeChildCommandArchive&& from) noexcept
    : ApplyThemeChildCommandArchive() {
    *this = ::std::move(from);
  }

  inline ApplyThemeChildCommandArchive& operator=(const ApplyThemeChildCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyThemeChildCommandArchive& operator=(ApplyThemeChildCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApplyThemeChildCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplyThemeChildCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ApplyThemeChildCommandArchive*>(
               &_ApplyThemeChildCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ApplyThemeChildCommandArchive& a, ApplyThemeChildCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyThemeChildCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyThemeChildCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplyThemeChildCommandArchive* New() const final {
    return CreateMaybeMessage<ApplyThemeChildCommandArchive>(nullptr);
  }

  ApplyThemeChildCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplyThemeChildCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplyThemeChildCommandArchive& from);
  void MergeFrom(const ApplyThemeChildCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyThemeChildCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSS.ApplyThemeChildCommandArchive";
  }
  protected:
  explicit ApplyThemeChildCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kParentFieldNumber = 2,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference parent = 2;
  bool has_parent() const;
  private:
  bool _internal_has_parent() const;
  public:
  void clear_parent();
  const ::TSP::Reference& parent() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_parent();
  ::TSP::Reference* mutable_parent();
  void set_allocated_parent(::TSP::Reference* parent);
  private:
  const ::TSP::Reference& _internal_parent() const;
  ::TSP::Reference* _internal_mutable_parent();
  public:
  void unsafe_arena_set_allocated_parent(
      ::TSP::Reference* parent);
  ::TSP::Reference* unsafe_arena_release_parent();

  // @@protoc_insertion_point(class_scope:TSS.ApplyThemeChildCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* parent_;
  friend struct ::TableStruct_TSSArchives_2eproto;
};
// -------------------------------------------------------------------

class StyleUpdatePropertyMapCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSS.StyleUpdatePropertyMapCommandArchive) */ {
 public:
  inline StyleUpdatePropertyMapCommandArchive() : StyleUpdatePropertyMapCommandArchive(nullptr) {}
  ~StyleUpdatePropertyMapCommandArchive() override;
  explicit constexpr StyleUpdatePropertyMapCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StyleUpdatePropertyMapCommandArchive(const StyleUpdatePropertyMapCommandArchive& from);
  StyleUpdatePropertyMapCommandArchive(StyleUpdatePropertyMapCommandArchive&& from) noexcept
    : StyleUpdatePropertyMapCommandArchive() {
    *this = ::std::move(from);
  }

  inline StyleUpdatePropertyMapCommandArchive& operator=(const StyleUpdatePropertyMapCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleUpdatePropertyMapCommandArchive& operator=(StyleUpdatePropertyMapCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StyleUpdatePropertyMapCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StyleUpdatePropertyMapCommandArchive* internal_default_instance() {
    return reinterpret_cast<const StyleUpdatePropertyMapCommandArchive*>(
               &_StyleUpdatePropertyMapCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StyleUpdatePropertyMapCommandArchive& a, StyleUpdatePropertyMapCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleUpdatePropertyMapCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StyleUpdatePropertyMapCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyleUpdatePropertyMapCommandArchive* New() const final {
    return CreateMaybeMessage<StyleUpdatePropertyMapCommandArchive>(nullptr);
  }

  StyleUpdatePropertyMapCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyleUpdatePropertyMapCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StyleUpdatePropertyMapCommandArchive& from);
  void MergeFrom(const StyleUpdatePropertyMapCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleUpdatePropertyMapCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSS.StyleUpdatePropertyMapCommandArchive";
  }
  protected:
  explicit StyleUpdatePropertyMapCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCurrentStyleFieldNumber = 2,
    kStyleWithOldPropertyMapFieldNumber = 3,
    kStyleWithNewPropertyMapFieldNumber = 4,
    kStyleDiffFieldNumber = 7,
    kNotifyForStyleClientsFieldNumber = 6,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference current_style = 2;
  bool has_current_style() const;
  private:
  bool _internal_has_current_style() const;
  public:
  void clear_current_style();
  const ::TSP::Reference& current_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_current_style();
  ::TSP::Reference* mutable_current_style();
  void set_allocated_current_style(::TSP::Reference* current_style);
  private:
  const ::TSP::Reference& _internal_current_style() const;
  ::TSP::Reference* _internal_mutable_current_style();
  public:
  void unsafe_arena_set_allocated_current_style(
      ::TSP::Reference* current_style);
  ::TSP::Reference* unsafe_arena_release_current_style();

  // optional .TSP.Reference style_with_old_property_map = 3;
  bool has_style_with_old_property_map() const;
  private:
  bool _internal_has_style_with_old_property_map() const;
  public:
  void clear_style_with_old_property_map();
  const ::TSP::Reference& style_with_old_property_map() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_style_with_old_property_map();
  ::TSP::Reference* mutable_style_with_old_property_map();
  void set_allocated_style_with_old_property_map(::TSP::Reference* style_with_old_property_map);
  private:
  const ::TSP::Reference& _internal_style_with_old_property_map() const;
  ::TSP::Reference* _internal_mutable_style_with_old_property_map();
  public:
  void unsafe_arena_set_allocated_style_with_old_property_map(
      ::TSP::Reference* style_with_old_property_map);
  ::TSP::Reference* unsafe_arena_release_style_with_old_property_map();

  // optional .TSP.Reference style_with_new_property_map = 4;
  bool has_style_with_new_property_map() const;
  private:
  bool _internal_has_style_with_new_property_map() const;
  public:
  void clear_style_with_new_property_map();
  const ::TSP::Reference& style_with_new_property_map() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_style_with_new_property_map();
  ::TSP::Reference* mutable_style_with_new_property_map();
  void set_allocated_style_with_new_property_map(::TSP::Reference* style_with_new_property_map);
  private:
  const ::TSP::Reference& _internal_style_with_new_property_map() const;
  ::TSP::Reference* _internal_mutable_style_with_new_property_map();
  public:
  void unsafe_arena_set_allocated_style_with_new_property_map(
      ::TSP::Reference* style_with_new_property_map);
  ::TSP::Reference* unsafe_arena_release_style_with_new_property_map();

  // optional .TSP.Reference style_diff = 7;
  bool has_style_diff() const;
  private:
  bool _internal_has_style_diff() const;
  public:
  void clear_style_diff();
  const ::TSP::Reference& style_diff() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_style_diff();
  ::TSP::Reference* mutable_style_diff();
  void set_allocated_style_diff(::TSP::Reference* style_diff);
  private:
  const ::TSP::Reference& _internal_style_diff() const;
  ::TSP::Reference* _internal_mutable_style_diff();
  public:
  void unsafe_arena_set_allocated_style_diff(
      ::TSP::Reference* style_diff);
  ::TSP::Reference* unsafe_arena_release_style_diff();

  // optional bool notify_for_style_clients = 6 [default = true];
  bool has_notify_for_style_clients() const;
  private:
  bool _internal_has_notify_for_style_clients() const;
  public:
  void clear_notify_for_style_clients();
  bool notify_for_style_clients() const;
  void set_notify_for_style_clients(bool value);
  private:
  bool _internal_notify_for_style_clients() const;
  void _internal_set_notify_for_style_clients(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSS.StyleUpdatePropertyMapCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* current_style_;
  ::TSP::Reference* style_with_old_property_map_;
  ::TSP::Reference* style_with_new_property_map_;
  ::TSP::Reference* style_diff_;
  bool notify_for_style_clients_;
  friend struct ::TableStruct_TSSArchives_2eproto;
};
// -------------------------------------------------------------------

class ThemeReplacePresetCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSS.ThemeReplacePresetCommandArchive) */ {
 public:
  inline ThemeReplacePresetCommandArchive() : ThemeReplacePresetCommandArchive(nullptr) {}
  ~ThemeReplacePresetCommandArchive() override;
  explicit constexpr ThemeReplacePresetCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemeReplacePresetCommandArchive(const ThemeReplacePresetCommandArchive& from);
  ThemeReplacePresetCommandArchive(ThemeReplacePresetCommandArchive&& from) noexcept
    : ThemeReplacePresetCommandArchive() {
    *this = ::std::move(from);
  }

  inline ThemeReplacePresetCommandArchive& operator=(const ThemeReplacePresetCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemeReplacePresetCommandArchive& operator=(ThemeReplacePresetCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemeReplacePresetCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemeReplacePresetCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ThemeReplacePresetCommandArchive*>(
               &_ThemeReplacePresetCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ThemeReplacePresetCommandArchive& a, ThemeReplacePresetCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemeReplacePresetCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemeReplacePresetCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThemeReplacePresetCommandArchive* New() const final {
    return CreateMaybeMessage<ThemeReplacePresetCommandArchive>(nullptr);
  }

  ThemeReplacePresetCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThemeReplacePresetCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThemeReplacePresetCommandArchive& from);
  void MergeFrom(const ThemeReplacePresetCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemeReplacePresetCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSS.ThemeReplacePresetCommandArchive";
  }
  protected:
  explicit ThemeReplacePresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kPresetFieldNumber = 3,
    kOldPresetFieldNumber = 4,
    kIndexFieldNumber = 5,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference preset = 3;
  bool has_preset() const;
  private:
  bool _internal_has_preset() const;
  public:
  void clear_preset();
  const ::TSP::Reference& preset() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_preset();
  ::TSP::Reference* mutable_preset();
  void set_allocated_preset(::TSP::Reference* preset);
  private:
  const ::TSP::Reference& _internal_preset() const;
  ::TSP::Reference* _internal_mutable_preset();
  public:
  void unsafe_arena_set_allocated_preset(
      ::TSP::Reference* preset);
  ::TSP::Reference* unsafe_arena_release_preset();

  // optional .TSP.Reference oldPreset = 4;
  bool has_oldpreset() const;
  private:
  bool _internal_has_oldpreset() const;
  public:
  void clear_oldpreset();
  const ::TSP::Reference& oldpreset() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_oldpreset();
  ::TSP::Reference* mutable_oldpreset();
  void set_allocated_oldpreset(::TSP::Reference* oldpreset);
  private:
  const ::TSP::Reference& _internal_oldpreset() const;
  ::TSP::Reference* _internal_mutable_oldpreset();
  public:
  void unsafe_arena_set_allocated_oldpreset(
      ::TSP::Reference* oldpreset);
  ::TSP::Reference* unsafe_arena_release_oldpreset();

  // required uint32 index = 5;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSS.ThemeReplacePresetCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* preset_;
  ::TSP::Reference* oldpreset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  friend struct ::TableStruct_TSSArchives_2eproto;
};
// -------------------------------------------------------------------

class ThemeReplaceColorPresetCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSS.ThemeReplaceColorPresetCommandArchive) */ {
 public:
  inline ThemeReplaceColorPresetCommandArchive() : ThemeReplaceColorPresetCommandArchive(nullptr) {}
  ~ThemeReplaceColorPresetCommandArchive() override;
  explicit constexpr ThemeReplaceColorPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemeReplaceColorPresetCommandArchive(const ThemeReplaceColorPresetCommandArchive& from);
  ThemeReplaceColorPresetCommandArchive(ThemeReplaceColorPresetCommandArchive&& from) noexcept
    : ThemeReplaceColorPresetCommandArchive() {
    *this = ::std::move(from);
  }

  inline ThemeReplaceColorPresetCommandArchive& operator=(const ThemeReplaceColorPresetCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemeReplaceColorPresetCommandArchive& operator=(ThemeReplaceColorPresetCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemeReplaceColorPresetCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemeReplaceColorPresetCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ThemeReplaceColorPresetCommandArchive*>(
               &_ThemeReplaceColorPresetCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ThemeReplaceColorPresetCommandArchive& a, ThemeReplaceColorPresetCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemeReplaceColorPresetCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemeReplaceColorPresetCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThemeReplaceColorPresetCommandArchive* New() const final {
    return CreateMaybeMessage<ThemeReplaceColorPresetCommandArchive>(nullptr);
  }

  ThemeReplaceColorPresetCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThemeReplaceColorPresetCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThemeReplaceColorPresetCommandArchive& from);
  void MergeFrom(const ThemeReplaceColorPresetCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemeReplaceColorPresetCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSS.ThemeReplaceColorPresetCommandArchive";
  }
  protected:
  explicit ThemeReplaceColorPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kThemeFieldNumber = 2,
    kColorFieldNumber = 3,
    kOldColorFieldNumber = 4,
    kIndexFieldNumber = 5,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference theme = 2;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // required .TSP.Color color = 3;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::TSP::Color& color() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Color* release_color();
  ::TSP::Color* mutable_color();
  void set_allocated_color(::TSP::Color* color);
  private:
  const ::TSP::Color& _internal_color() const;
  ::TSP::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::TSP::Color* color);
  ::TSP::Color* unsafe_arena_release_color();

  // required .TSP.Color old_color = 4;
  bool has_old_color() const;
  private:
  bool _internal_has_old_color() const;
  public:
  void clear_old_color();
  const ::TSP::Color& old_color() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Color* release_old_color();
  ::TSP::Color* mutable_old_color();
  void set_allocated_old_color(::TSP::Color* old_color);
  private:
  const ::TSP::Color& _internal_old_color() const;
  ::TSP::Color* _internal_mutable_old_color();
  public:
  void unsafe_arena_set_allocated_old_color(
      ::TSP::Color* old_color);
  ::TSP::Color* unsafe_arena_release_old_color();

  // required uint32 index = 5;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSS.ThemeReplaceColorPresetCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* theme_;
  ::TSP::Color* color_;
  ::TSP::Color* old_color_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  friend struct ::TableStruct_TSSArchives_2eproto;
};
// -------------------------------------------------------------------

class ThemeAddStylePresetCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSS.ThemeAddStylePresetCommandArchive) */ {
 public:
  inline ThemeAddStylePresetCommandArchive() : ThemeAddStylePresetCommandArchive(nullptr) {}
  ~ThemeAddStylePresetCommandArchive() override;
  explicit constexpr ThemeAddStylePresetCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemeAddStylePresetCommandArchive(const ThemeAddStylePresetCommandArchive& from);
  ThemeAddStylePresetCommandArchive(ThemeAddStylePresetCommandArchive&& from) noexcept
    : ThemeAddStylePresetCommandArchive() {
    *this = ::std::move(from);
  }

  inline ThemeAddStylePresetCommandArchive& operator=(const ThemeAddStylePresetCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemeAddStylePresetCommandArchive& operator=(ThemeAddStylePresetCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemeAddStylePresetCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemeAddStylePresetCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ThemeAddStylePresetCommandArchive*>(
               &_ThemeAddStylePresetCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ThemeAddStylePresetCommandArchive& a, ThemeAddStylePresetCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemeAddStylePresetCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemeAddStylePresetCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThemeAddStylePresetCommandArchive* New() const final {
    return CreateMaybeMessage<ThemeAddStylePresetCommandArchive>(nullptr);
  }

  ThemeAddStylePresetCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThemeAddStylePresetCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThemeAddStylePresetCommandArchive& from);
  void MergeFrom(const ThemeAddStylePresetCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemeAddStylePresetCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSS.ThemeAddStylePresetCommandArchive";
  }
  protected:
  explicit ThemeAddStylePresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPresetKindFieldNumber = 4,
    kIdentifierFieldNumber = 5,
    kSuperFieldNumber = 1,
    kThemeFieldNumber = 2,
    kPresetFieldNumber = 3,
    kAddPresetToStylesheetFieldNumber = 6,
  };
  // required string preset_kind = 4;
  bool has_preset_kind() const;
  private:
  bool _internal_has_preset_kind() const;
  public:
  void clear_preset_kind();
  const std::string& preset_kind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_preset_kind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_preset_kind();
  std::string* release_preset_kind();
  void set_allocated_preset_kind(std::string* preset_kind);
  private:
  const std::string& _internal_preset_kind() const;
  void _internal_set_preset_kind(const std::string& value);
  std::string* _internal_mutable_preset_kind();
  public:

  // optional string identifier = 5;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference theme = 2;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // required .TSP.Reference preset = 3;
  bool has_preset() const;
  private:
  bool _internal_has_preset() const;
  public:
  void clear_preset();
  const ::TSP::Reference& preset() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_preset();
  ::TSP::Reference* mutable_preset();
  void set_allocated_preset(::TSP::Reference* preset);
  private:
  const ::TSP::Reference& _internal_preset() const;
  ::TSP::Reference* _internal_mutable_preset();
  public:
  void unsafe_arena_set_allocated_preset(
      ::TSP::Reference* preset);
  ::TSP::Reference* unsafe_arena_release_preset();

  // optional bool add_preset_to_stylesheet = 6;
  bool has_add_preset_to_stylesheet() const;
  private:
  bool _internal_has_add_preset_to_stylesheet() const;
  public:
  void clear_add_preset_to_stylesheet();
  bool add_preset_to_stylesheet() const;
  void set_add_preset_to_stylesheet(bool value);
  private:
  bool _internal_add_preset_to_stylesheet() const;
  void _internal_set_add_preset_to_stylesheet(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSS.ThemeAddStylePresetCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preset_kind_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* theme_;
  ::TSP::Reference* preset_;
  bool add_preset_to_stylesheet_;
  friend struct ::TableStruct_TSSArchives_2eproto;
};
// -------------------------------------------------------------------

class ThemeRemoveStylePresetCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSS.ThemeRemoveStylePresetCommandArchive) */ {
 public:
  inline ThemeRemoveStylePresetCommandArchive() : ThemeRemoveStylePresetCommandArchive(nullptr) {}
  ~ThemeRemoveStylePresetCommandArchive() override;
  explicit constexpr ThemeRemoveStylePresetCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemeRemoveStylePresetCommandArchive(const ThemeRemoveStylePresetCommandArchive& from);
  ThemeRemoveStylePresetCommandArchive(ThemeRemoveStylePresetCommandArchive&& from) noexcept
    : ThemeRemoveStylePresetCommandArchive() {
    *this = ::std::move(from);
  }

  inline ThemeRemoveStylePresetCommandArchive& operator=(const ThemeRemoveStylePresetCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemeRemoveStylePresetCommandArchive& operator=(ThemeRemoveStylePresetCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemeRemoveStylePresetCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemeRemoveStylePresetCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ThemeRemoveStylePresetCommandArchive*>(
               &_ThemeRemoveStylePresetCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ThemeRemoveStylePresetCommandArchive& a, ThemeRemoveStylePresetCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemeRemoveStylePresetCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemeRemoveStylePresetCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThemeRemoveStylePresetCommandArchive* New() const final {
    return CreateMaybeMessage<ThemeRemoveStylePresetCommandArchive>(nullptr);
  }

  ThemeRemoveStylePresetCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThemeRemoveStylePresetCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThemeRemoveStylePresetCommandArchive& from);
  void MergeFrom(const ThemeRemoveStylePresetCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemeRemoveStylePresetCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSS.ThemeRemoveStylePresetCommandArchive";
  }
  protected:
  explicit ThemeRemoveStylePresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPresetKindFieldNumber = 5,
    kIdentifierFieldNumber = 6,
    kSuperFieldNumber = 1,
    kThemeFieldNumber = 2,
    kPresetFieldNumber = 3,
    kReplacementPresetFieldNumber = 7,
    kPresetIndexFieldNumber = 4,
  };
  // required string preset_kind = 5;
  bool has_preset_kind() const;
  private:
  bool _internal_has_preset_kind() const;
  public:
  void clear_preset_kind();
  const std::string& preset_kind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_preset_kind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_preset_kind();
  std::string* release_preset_kind();
  void set_allocated_preset_kind(std::string* preset_kind);
  private:
  const std::string& _internal_preset_kind() const;
  void _internal_set_preset_kind(const std::string& value);
  std::string* _internal_mutable_preset_kind();
  public:

  // optional string identifier = 6;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference theme = 2;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // required .TSP.Reference preset = 3;
  bool has_preset() const;
  private:
  bool _internal_has_preset() const;
  public:
  void clear_preset();
  const ::TSP::Reference& preset() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_preset();
  ::TSP::Reference* mutable_preset();
  void set_allocated_preset(::TSP::Reference* preset);
  private:
  const ::TSP::Reference& _internal_preset() const;
  ::TSP::Reference* _internal_mutable_preset();
  public:
  void unsafe_arena_set_allocated_preset(
      ::TSP::Reference* preset);
  ::TSP::Reference* unsafe_arena_release_preset();

  // optional .TSP.Reference replacement_preset = 7;
  bool has_replacement_preset() const;
  private:
  bool _internal_has_replacement_preset() const;
  public:
  void clear_replacement_preset();
  const ::TSP::Reference& replacement_preset() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_replacement_preset();
  ::TSP::Reference* mutable_replacement_preset();
  void set_allocated_replacement_preset(::TSP::Reference* replacement_preset);
  private:
  const ::TSP::Reference& _internal_replacement_preset() const;
  ::TSP::Reference* _internal_mutable_replacement_preset();
  public:
  void unsafe_arena_set_allocated_replacement_preset(
      ::TSP::Reference* replacement_preset);
  ::TSP::Reference* unsafe_arena_release_replacement_preset();

  // required uint32 preset_index = 4;
  bool has_preset_index() const;
  private:
  bool _internal_has_preset_index() const;
  public:
  void clear_preset_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 preset_index() const;
  void set_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_preset_index() const;
  void _internal_set_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSS.ThemeRemoveStylePresetCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preset_kind_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* theme_;
  ::TSP::Reference* preset_;
  ::TSP::Reference* replacement_preset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 preset_index_;
  friend struct ::TableStruct_TSSArchives_2eproto;
};
// -------------------------------------------------------------------

class ThemeMovePresetCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSS.ThemeMovePresetCommandArchive) */ {
 public:
  inline ThemeMovePresetCommandArchive() : ThemeMovePresetCommandArchive(nullptr) {}
  ~ThemeMovePresetCommandArchive() override;
  explicit constexpr ThemeMovePresetCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemeMovePresetCommandArchive(const ThemeMovePresetCommandArchive& from);
  ThemeMovePresetCommandArchive(ThemeMovePresetCommandArchive&& from) noexcept
    : ThemeMovePresetCommandArchive() {
    *this = ::std::move(from);
  }

  inline ThemeMovePresetCommandArchive& operator=(const ThemeMovePresetCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemeMovePresetCommandArchive& operator=(ThemeMovePresetCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemeMovePresetCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemeMovePresetCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ThemeMovePresetCommandArchive*>(
               &_ThemeMovePresetCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ThemeMovePresetCommandArchive& a, ThemeMovePresetCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemeMovePresetCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemeMovePresetCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThemeMovePresetCommandArchive* New() const final {
    return CreateMaybeMessage<ThemeMovePresetCommandArchive>(nullptr);
  }

  ThemeMovePresetCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThemeMovePresetCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThemeMovePresetCommandArchive& from);
  void MergeFrom(const ThemeMovePresetCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemeMovePresetCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSS.ThemeMovePresetCommandArchive";
  }
  protected:
  explicit ThemeMovePresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kThemeFieldNumber = 2,
    kPresetIdFieldNumber = 3,
    kNewIndexFieldNumber = 4,
    kOldIndexFieldNumber = 5,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference theme = 2;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // required .TSP.UUID preset_id = 3;
  bool has_preset_id() const;
  private:
  bool _internal_has_preset_id() const;
  public:
  void clear_preset_id();
  const ::TSP::UUID& preset_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_preset_id();
  ::TSP::UUID* mutable_preset_id();
  void set_allocated_preset_id(::TSP::UUID* preset_id);
  private:
  const ::TSP::UUID& _internal_preset_id() const;
  ::TSP::UUID* _internal_mutable_preset_id();
  public:
  void unsafe_arena_set_allocated_preset_id(
      ::TSP::UUID* preset_id);
  ::TSP::UUID* unsafe_arena_release_preset_id();

  // required uint32 new_index = 4;
  bool has_new_index() const;
  private:
  bool _internal_has_new_index() const;
  public:
  void clear_new_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 new_index() const;
  void set_new_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_new_index() const;
  void _internal_set_new_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 old_index = 5;
  bool has_old_index() const;
  private:
  bool _internal_has_old_index() const;
  public:
  void clear_old_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 old_index() const;
  void set_old_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_old_index() const;
  void _internal_set_old_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSS.ThemeMovePresetCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* theme_;
  ::TSP::UUID* preset_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 new_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 old_index_;
  friend struct ::TableStruct_TSSArchives_2eproto;
};
// -------------------------------------------------------------------

class ThemeReplaceStylePresetAndDisconnectStylesCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive) */ {
 public:
  inline ThemeReplaceStylePresetAndDisconnectStylesCommandArchive() : ThemeReplaceStylePresetAndDisconnectStylesCommandArchive(nullptr) {}
  ~ThemeReplaceStylePresetAndDisconnectStylesCommandArchive() override;
  explicit constexpr ThemeReplaceStylePresetAndDisconnectStylesCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemeReplaceStylePresetAndDisconnectStylesCommandArchive(const ThemeReplaceStylePresetAndDisconnectStylesCommandArchive& from);
  ThemeReplaceStylePresetAndDisconnectStylesCommandArchive(ThemeReplaceStylePresetAndDisconnectStylesCommandArchive&& from) noexcept
    : ThemeReplaceStylePresetAndDisconnectStylesCommandArchive() {
    *this = ::std::move(from);
  }

  inline ThemeReplaceStylePresetAndDisconnectStylesCommandArchive& operator=(const ThemeReplaceStylePresetAndDisconnectStylesCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemeReplaceStylePresetAndDisconnectStylesCommandArchive& operator=(ThemeReplaceStylePresetAndDisconnectStylesCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemeReplaceStylePresetAndDisconnectStylesCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemeReplaceStylePresetAndDisconnectStylesCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ThemeReplaceStylePresetAndDisconnectStylesCommandArchive*>(
               &_ThemeReplaceStylePresetAndDisconnectStylesCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ThemeReplaceStylePresetAndDisconnectStylesCommandArchive& a, ThemeReplaceStylePresetAndDisconnectStylesCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemeReplaceStylePresetAndDisconnectStylesCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemeReplaceStylePresetAndDisconnectStylesCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThemeReplaceStylePresetAndDisconnectStylesCommandArchive* New() const final {
    return CreateMaybeMessage<ThemeReplaceStylePresetAndDisconnectStylesCommandArchive>(nullptr);
  }

  ThemeReplaceStylePresetAndDisconnectStylesCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThemeReplaceStylePresetAndDisconnectStylesCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThemeReplaceStylePresetAndDisconnectStylesCommandArchive& from);
  void MergeFrom(const ThemeReplaceStylePresetAndDisconnectStylesCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemeReplaceStylePresetAndDisconnectStylesCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive";
  }
  protected:
  explicit ThemeReplaceStylePresetAndDisconnectStylesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kPresetFieldNumber = 2,
    kReplacementPresetFieldNumber = 3,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference preset = 2;
  bool has_preset() const;
  private:
  bool _internal_has_preset() const;
  public:
  void clear_preset();
  const ::TSP::Reference& preset() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_preset();
  ::TSP::Reference* mutable_preset();
  void set_allocated_preset(::TSP::Reference* preset);
  private:
  const ::TSP::Reference& _internal_preset() const;
  ::TSP::Reference* _internal_mutable_preset();
  public:
  void unsafe_arena_set_allocated_preset(
      ::TSP::Reference* preset);
  ::TSP::Reference* unsafe_arena_release_preset();

  // required .TSP.Reference replacement_preset = 3;
  bool has_replacement_preset() const;
  private:
  bool _internal_has_replacement_preset() const;
  public:
  void clear_replacement_preset();
  const ::TSP::Reference& replacement_preset() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_replacement_preset();
  ::TSP::Reference* mutable_replacement_preset();
  void set_allocated_replacement_preset(::TSP::Reference* replacement_preset);
  private:
  const ::TSP::Reference& _internal_replacement_preset() const;
  ::TSP::Reference* _internal_mutable_replacement_preset();
  public:
  void unsafe_arena_set_allocated_replacement_preset(
      ::TSP::Reference* replacement_preset);
  ::TSP::Reference* unsafe_arena_release_replacement_preset();

  // @@protoc_insertion_point(class_scope:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* preset_;
  ::TSP::Reference* replacement_preset_;
  friend struct ::TableStruct_TSSArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandPropertyEntryArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSS.CommandPropertyEntryArchive) */ {
 public:
  inline CommandPropertyEntryArchive() : CommandPropertyEntryArchive(nullptr) {}
  ~CommandPropertyEntryArchive() override;
  explicit constexpr CommandPropertyEntryArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandPropertyEntryArchive(const CommandPropertyEntryArchive& from);
  CommandPropertyEntryArchive(CommandPropertyEntryArchive&& from) noexcept
    : CommandPropertyEntryArchive() {
    *this = ::std::move(from);
  }

  inline CommandPropertyEntryArchive& operator=(const CommandPropertyEntryArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandPropertyEntryArchive& operator=(CommandPropertyEntryArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandPropertyEntryArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandPropertyEntryArchive* internal_default_instance() {
    return reinterpret_cast<const CommandPropertyEntryArchive*>(
               &_CommandPropertyEntryArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CommandPropertyEntryArchive& a, CommandPropertyEntryArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandPropertyEntryArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandPropertyEntryArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandPropertyEntryArchive* New() const final {
    return CreateMaybeMessage<CommandPropertyEntryArchive>(nullptr);
  }

  CommandPropertyEntryArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandPropertyEntryArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandPropertyEntryArchive& from);
  void MergeFrom(const CommandPropertyEntryArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandPropertyEntryArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSS.CommandPropertyEntryArchive";
  }
  protected:
  explicit CommandPropertyEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 6,
    kTspReferenceFieldNumber = 7,
    kPropertyFieldNumber = 1,
    kTypeFieldNumber = 2,
    kIntegerValueFieldNumber = 3,
    kFloatValueFieldNumber = 4,
    kDoubleValueFieldNumber = 5,
  };
  // optional string string_value = 6;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // optional .TSP.Reference tsp_reference = 7;
  bool has_tsp_reference() const;
  private:
  bool _internal_has_tsp_reference() const;
  public:
  void clear_tsp_reference();
  const ::TSP::Reference& tsp_reference() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_tsp_reference();
  ::TSP::Reference* mutable_tsp_reference();
  void set_allocated_tsp_reference(::TSP::Reference* tsp_reference);
  private:
  const ::TSP::Reference& _internal_tsp_reference() const;
  ::TSP::Reference* _internal_mutable_tsp_reference();
  public:
  void unsafe_arena_set_allocated_tsp_reference(
      ::TSP::Reference* tsp_reference);
  ::TSP::Reference* unsafe_arena_release_tsp_reference();

  // required uint32 property = 1;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  ::PROTOBUF_NAMESPACE_ID::uint32 property() const;
  void set_property(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_property() const;
  void _internal_set_property(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required int32 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 integer_value = 3;
  bool has_integer_value() const;
  private:
  bool _internal_has_integer_value() const;
  public:
  void clear_integer_value();
  ::PROTOBUF_NAMESPACE_ID::int32 integer_value() const;
  void set_integer_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_integer_value() const;
  void _internal_set_integer_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float float_value = 4;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // optional double double_value = 5;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(CommandPropertyEntryArchive)
  // @@protoc_insertion_point(class_scope:TSS.CommandPropertyEntryArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  ::TSP::Reference* tsp_reference_;
  ::PROTOBUF_NAMESPACE_ID::uint32 property_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 integer_value_;
  float float_value_;
  double double_value_;
  friend struct ::TableStruct_TSSArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandPropertyMapArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSS.CommandPropertyMapArchive) */ {
 public:
  inline CommandPropertyMapArchive() : CommandPropertyMapArchive(nullptr) {}
  ~CommandPropertyMapArchive() override;
  explicit constexpr CommandPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandPropertyMapArchive(const CommandPropertyMapArchive& from);
  CommandPropertyMapArchive(CommandPropertyMapArchive&& from) noexcept
    : CommandPropertyMapArchive() {
    *this = ::std::move(from);
  }

  inline CommandPropertyMapArchive& operator=(const CommandPropertyMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandPropertyMapArchive& operator=(CommandPropertyMapArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandPropertyMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandPropertyMapArchive* internal_default_instance() {
    return reinterpret_cast<const CommandPropertyMapArchive*>(
               &_CommandPropertyMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CommandPropertyMapArchive& a, CommandPropertyMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandPropertyMapArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandPropertyMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandPropertyMapArchive* New() const final {
    return CreateMaybeMessage<CommandPropertyMapArchive>(nullptr);
  }

  CommandPropertyMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandPropertyMapArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandPropertyMapArchive& from);
  void MergeFrom(const CommandPropertyMapArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandPropertyMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSS.CommandPropertyMapArchive";
  }
  protected:
  explicit CommandPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyEntriesFieldNumber = 1,
  };
  // repeated .TSS.CommandPropertyEntryArchive property_entries = 1;
  int property_entries_size() const;
  private:
  int _internal_property_entries_size() const;
  public:
  void clear_property_entries();
  ::TSS::CommandPropertyEntryArchive* mutable_property_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::CommandPropertyEntryArchive >*
      mutable_property_entries();
  private:
  const ::TSS::CommandPropertyEntryArchive& _internal_property_entries(int index) const;
  ::TSS::CommandPropertyEntryArchive* _internal_add_property_entries();
  public:
  const ::TSS::CommandPropertyEntryArchive& property_entries(int index) const;
  ::TSS::CommandPropertyEntryArchive* add_property_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::CommandPropertyEntryArchive >&
      property_entries() const;

  // @@protoc_insertion_point(class_scope:TSS.CommandPropertyMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::CommandPropertyEntryArchive > property_entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSSArchives_2eproto;
};
// ===================================================================

static const int kColorFieldNumber = 8;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSP::Color >, 11, false >
  color;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StyleArchive

// optional string name = 1;
inline bool StyleArchive::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StyleArchive::has_name() const {
  return _internal_has_name();
}
inline void StyleArchive::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StyleArchive::name() const {
  // @@protoc_insertion_point(field_get:TSS.StyleArchive.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void StyleArchive::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSS.StyleArchive.name)
}
inline std::string* StyleArchive::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TSS.StyleArchive.name)
  return _internal_mutable_name();
}
inline const std::string& StyleArchive::_internal_name() const {
  return name_.Get();
}
inline void StyleArchive::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* StyleArchive::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StyleArchive::release_name() {
  // @@protoc_insertion_point(field_release:TSS.StyleArchive.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StyleArchive::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSS.StyleArchive.name)
}

// optional string style_identifier = 2;
inline bool StyleArchive::_internal_has_style_identifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StyleArchive::has_style_identifier() const {
  return _internal_has_style_identifier();
}
inline void StyleArchive::clear_style_identifier() {
  style_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StyleArchive::style_identifier() const {
  // @@protoc_insertion_point(field_get:TSS.StyleArchive.style_identifier)
  return _internal_style_identifier();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void StyleArchive::set_style_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 style_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSS.StyleArchive.style_identifier)
}
inline std::string* StyleArchive::mutable_style_identifier() {
  // @@protoc_insertion_point(field_mutable:TSS.StyleArchive.style_identifier)
  return _internal_mutable_style_identifier();
}
inline const std::string& StyleArchive::_internal_style_identifier() const {
  return style_identifier_.Get();
}
inline void StyleArchive::_internal_set_style_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  style_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* StyleArchive::_internal_mutable_style_identifier() {
  _has_bits_[0] |= 0x00000002u;
  return style_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StyleArchive::release_style_identifier() {
  // @@protoc_insertion_point(field_release:TSS.StyleArchive.style_identifier)
  if (!_internal_has_style_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return style_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StyleArchive::set_allocated_style_identifier(std::string* style_identifier) {
  if (style_identifier != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  style_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), style_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSS.StyleArchive.style_identifier)
}

// optional .TSP.Reference parent = 3;
inline bool StyleArchive::_internal_has_parent() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || parent_ != nullptr);
  return value;
}
inline bool StyleArchive::has_parent() const {
  return _internal_has_parent();
}
inline const ::TSP::Reference& StyleArchive::_internal_parent() const {
  const ::TSP::Reference* p = parent_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyleArchive::parent() const {
  // @@protoc_insertion_point(field_get:TSS.StyleArchive.parent)
  return _internal_parent();
}
inline void StyleArchive::unsafe_arena_set_allocated_parent(
    ::TSP::Reference* parent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_);
  }
  parent_ = parent;
  if (parent) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.StyleArchive.parent)
}
inline ::TSP::Reference* StyleArchive::release_parent() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = parent_;
  parent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* StyleArchive::unsafe_arena_release_parent() {
  // @@protoc_insertion_point(field_release:TSS.StyleArchive.parent)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = parent_;
  parent_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyleArchive::_internal_mutable_parent() {
  _has_bits_[0] |= 0x00000004u;
  if (parent_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    parent_ = p;
  }
  return parent_;
}
inline ::TSP::Reference* StyleArchive::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:TSS.StyleArchive.parent)
  return _internal_mutable_parent();
}
inline void StyleArchive::set_allocated_parent(::TSP::Reference* parent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_);
  }
  if (parent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent)->GetArena();
    if (message_arena != submessage_arena) {
      parent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:TSS.StyleArchive.parent)
}

// optional bool is_variation = 4 [default = false];
inline bool StyleArchive::_internal_has_is_variation() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StyleArchive::has_is_variation() const {
  return _internal_has_is_variation();
}
inline void StyleArchive::clear_is_variation() {
  is_variation_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool StyleArchive::_internal_is_variation() const {
  return is_variation_;
}
inline bool StyleArchive::is_variation() const {
  // @@protoc_insertion_point(field_get:TSS.StyleArchive.is_variation)
  return _internal_is_variation();
}
inline void StyleArchive::_internal_set_is_variation(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_variation_ = value;
}
inline void StyleArchive::set_is_variation(bool value) {
  _internal_set_is_variation(value);
  // @@protoc_insertion_point(field_set:TSS.StyleArchive.is_variation)
}

// optional .TSP.Reference stylesheet = 5;
inline bool StyleArchive::_internal_has_stylesheet() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || stylesheet_ != nullptr);
  return value;
}
inline bool StyleArchive::has_stylesheet() const {
  return _internal_has_stylesheet();
}
inline const ::TSP::Reference& StyleArchive::_internal_stylesheet() const {
  const ::TSP::Reference* p = stylesheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyleArchive::stylesheet() const {
  // @@protoc_insertion_point(field_get:TSS.StyleArchive.stylesheet)
  return _internal_stylesheet();
}
inline void StyleArchive::unsafe_arena_set_allocated_stylesheet(
    ::TSP::Reference* stylesheet) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheet_);
  }
  stylesheet_ = stylesheet;
  if (stylesheet) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.StyleArchive.stylesheet)
}
inline ::TSP::Reference* StyleArchive::release_stylesheet() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = stylesheet_;
  stylesheet_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* StyleArchive::unsafe_arena_release_stylesheet() {
  // @@protoc_insertion_point(field_release:TSS.StyleArchive.stylesheet)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = stylesheet_;
  stylesheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyleArchive::_internal_mutable_stylesheet() {
  _has_bits_[0] |= 0x00000008u;
  if (stylesheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    stylesheet_ = p;
  }
  return stylesheet_;
}
inline ::TSP::Reference* StyleArchive::mutable_stylesheet() {
  // @@protoc_insertion_point(field_mutable:TSS.StyleArchive.stylesheet)
  return _internal_mutable_stylesheet();
}
inline void StyleArchive::set_allocated_stylesheet(::TSP::Reference* stylesheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheet_);
  }
  if (stylesheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheet)->GetArena();
    if (message_arena != submessage_arena) {
      stylesheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stylesheet, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  stylesheet_ = stylesheet;
  // @@protoc_insertion_point(field_set_allocated:TSS.StyleArchive.stylesheet)
}

// -------------------------------------------------------------------

// StylesheetArchive_IdentifiedStyleEntry

// required string identifier = 1;
inline bool StylesheetArchive_IdentifiedStyleEntry::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StylesheetArchive_IdentifiedStyleEntry::has_identifier() const {
  return _internal_has_identifier();
}
inline void StylesheetArchive_IdentifiedStyleEntry::clear_identifier() {
  identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StylesheetArchive_IdentifiedStyleEntry::identifier() const {
  // @@protoc_insertion_point(field_get:TSS.StylesheetArchive.IdentifiedStyleEntry.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void StylesheetArchive_IdentifiedStyleEntry::set_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSS.StylesheetArchive.IdentifiedStyleEntry.identifier)
}
inline std::string* StylesheetArchive_IdentifiedStyleEntry::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable:TSS.StylesheetArchive.IdentifiedStyleEntry.identifier)
  return _internal_mutable_identifier();
}
inline const std::string& StylesheetArchive_IdentifiedStyleEntry::_internal_identifier() const {
  return identifier_.Get();
}
inline void StylesheetArchive_IdentifiedStyleEntry::_internal_set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* StylesheetArchive_IdentifiedStyleEntry::_internal_mutable_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StylesheetArchive_IdentifiedStyleEntry::release_identifier() {
  // @@protoc_insertion_point(field_release:TSS.StylesheetArchive.IdentifiedStyleEntry.identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StylesheetArchive_IdentifiedStyleEntry::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSS.StylesheetArchive.IdentifiedStyleEntry.identifier)
}

// required .TSP.Reference style = 2;
inline bool StylesheetArchive_IdentifiedStyleEntry::_internal_has_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || style_ != nullptr);
  return value;
}
inline bool StylesheetArchive_IdentifiedStyleEntry::has_style() const {
  return _internal_has_style();
}
inline const ::TSP::Reference& StylesheetArchive_IdentifiedStyleEntry::_internal_style() const {
  const ::TSP::Reference* p = style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StylesheetArchive_IdentifiedStyleEntry::style() const {
  // @@protoc_insertion_point(field_get:TSS.StylesheetArchive.IdentifiedStyleEntry.style)
  return _internal_style();
}
inline void StylesheetArchive_IdentifiedStyleEntry::unsafe_arena_set_allocated_style(
    ::TSP::Reference* style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  style_ = style;
  if (style) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.StylesheetArchive.IdentifiedStyleEntry.style)
}
inline ::TSP::Reference* StylesheetArchive_IdentifiedStyleEntry::release_style() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = style_;
  style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* StylesheetArchive_IdentifiedStyleEntry::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:TSS.StylesheetArchive.IdentifiedStyleEntry.style)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = style_;
  style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StylesheetArchive_IdentifiedStyleEntry::_internal_mutable_style() {
  _has_bits_[0] |= 0x00000002u;
  if (style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    style_ = p;
  }
  return style_;
}
inline ::TSP::Reference* StylesheetArchive_IdentifiedStyleEntry::mutable_style() {
  // @@protoc_insertion_point(field_mutable:TSS.StylesheetArchive.IdentifiedStyleEntry.style)
  return _internal_mutable_style();
}
inline void StylesheetArchive_IdentifiedStyleEntry::set_allocated_style(::TSP::Reference* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style)->GetArena();
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:TSS.StylesheetArchive.IdentifiedStyleEntry.style)
}

// -------------------------------------------------------------------

// StylesheetArchive_StyleChildrenEntry

// required .TSP.Reference parent = 1;
inline bool StylesheetArchive_StyleChildrenEntry::_internal_has_parent() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || parent_ != nullptr);
  return value;
}
inline bool StylesheetArchive_StyleChildrenEntry::has_parent() const {
  return _internal_has_parent();
}
inline const ::TSP::Reference& StylesheetArchive_StyleChildrenEntry::_internal_parent() const {
  const ::TSP::Reference* p = parent_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StylesheetArchive_StyleChildrenEntry::parent() const {
  // @@protoc_insertion_point(field_get:TSS.StylesheetArchive.StyleChildrenEntry.parent)
  return _internal_parent();
}
inline void StylesheetArchive_StyleChildrenEntry::unsafe_arena_set_allocated_parent(
    ::TSP::Reference* parent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_);
  }
  parent_ = parent;
  if (parent) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.StylesheetArchive.StyleChildrenEntry.parent)
}
inline ::TSP::Reference* StylesheetArchive_StyleChildrenEntry::release_parent() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = parent_;
  parent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* StylesheetArchive_StyleChildrenEntry::unsafe_arena_release_parent() {
  // @@protoc_insertion_point(field_release:TSS.StylesheetArchive.StyleChildrenEntry.parent)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = parent_;
  parent_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StylesheetArchive_StyleChildrenEntry::_internal_mutable_parent() {
  _has_bits_[0] |= 0x00000001u;
  if (parent_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    parent_ = p;
  }
  return parent_;
}
inline ::TSP::Reference* StylesheetArchive_StyleChildrenEntry::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:TSS.StylesheetArchive.StyleChildrenEntry.parent)
  return _internal_mutable_parent();
}
inline void StylesheetArchive_StyleChildrenEntry::set_allocated_parent(::TSP::Reference* parent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_);
  }
  if (parent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent)->GetArena();
    if (message_arena != submessage_arena) {
      parent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:TSS.StylesheetArchive.StyleChildrenEntry.parent)
}

// repeated .TSP.Reference children = 2;
inline int StylesheetArchive_StyleChildrenEntry::_internal_children_size() const {
  return children_.size();
}
inline int StylesheetArchive_StyleChildrenEntry::children_size() const {
  return _internal_children_size();
}
inline ::TSP::Reference* StylesheetArchive_StyleChildrenEntry::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:TSS.StylesheetArchive.StyleChildrenEntry.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
StylesheetArchive_StyleChildrenEntry::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:TSS.StylesheetArchive.StyleChildrenEntry.children)
  return &children_;
}
inline const ::TSP::Reference& StylesheetArchive_StyleChildrenEntry::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::TSP::Reference& StylesheetArchive_StyleChildrenEntry::children(int index) const {
  // @@protoc_insertion_point(field_get:TSS.StylesheetArchive.StyleChildrenEntry.children)
  return _internal_children(index);
}
inline ::TSP::Reference* StylesheetArchive_StyleChildrenEntry::_internal_add_children() {
  return children_.Add();
}
inline ::TSP::Reference* StylesheetArchive_StyleChildrenEntry::add_children() {
  // @@protoc_insertion_point(field_add:TSS.StylesheetArchive.StyleChildrenEntry.children)
  return _internal_add_children();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
StylesheetArchive_StyleChildrenEntry::children() const {
  // @@protoc_insertion_point(field_list:TSS.StylesheetArchive.StyleChildrenEntry.children)
  return children_;
}

// -------------------------------------------------------------------

// StylesheetArchive_VersionedStyles

// repeated .TSP.Reference styles = 1;
inline int StylesheetArchive_VersionedStyles::_internal_styles_size() const {
  return styles_.size();
}
inline int StylesheetArchive_VersionedStyles::styles_size() const {
  return _internal_styles_size();
}
inline ::TSP::Reference* StylesheetArchive_VersionedStyles::mutable_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSS.StylesheetArchive.VersionedStyles.styles)
  return styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
StylesheetArchive_VersionedStyles::mutable_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSS.StylesheetArchive.VersionedStyles.styles)
  return &styles_;
}
inline const ::TSP::Reference& StylesheetArchive_VersionedStyles::_internal_styles(int index) const {
  return styles_.Get(index);
}
inline const ::TSP::Reference& StylesheetArchive_VersionedStyles::styles(int index) const {
  // @@protoc_insertion_point(field_get:TSS.StylesheetArchive.VersionedStyles.styles)
  return _internal_styles(index);
}
inline ::TSP::Reference* StylesheetArchive_VersionedStyles::_internal_add_styles() {
  return styles_.Add();
}
inline ::TSP::Reference* StylesheetArchive_VersionedStyles::add_styles() {
  // @@protoc_insertion_point(field_add:TSS.StylesheetArchive.VersionedStyles.styles)
  return _internal_add_styles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
StylesheetArchive_VersionedStyles::styles() const {
  // @@protoc_insertion_point(field_list:TSS.StylesheetArchive.VersionedStyles.styles)
  return styles_;
}

// repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 2;
inline int StylesheetArchive_VersionedStyles::_internal_identifier_to_style_map_size() const {
  return identifier_to_style_map_.size();
}
inline int StylesheetArchive_VersionedStyles::identifier_to_style_map_size() const {
  return _internal_identifier_to_style_map_size();
}
inline void StylesheetArchive_VersionedStyles::clear_identifier_to_style_map() {
  identifier_to_style_map_.Clear();
}
inline ::TSS::StylesheetArchive_IdentifiedStyleEntry* StylesheetArchive_VersionedStyles::mutable_identifier_to_style_map(int index) {
  // @@protoc_insertion_point(field_mutable:TSS.StylesheetArchive.VersionedStyles.identifier_to_style_map)
  return identifier_to_style_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >*
StylesheetArchive_VersionedStyles::mutable_identifier_to_style_map() {
  // @@protoc_insertion_point(field_mutable_list:TSS.StylesheetArchive.VersionedStyles.identifier_to_style_map)
  return &identifier_to_style_map_;
}
inline const ::TSS::StylesheetArchive_IdentifiedStyleEntry& StylesheetArchive_VersionedStyles::_internal_identifier_to_style_map(int index) const {
  return identifier_to_style_map_.Get(index);
}
inline const ::TSS::StylesheetArchive_IdentifiedStyleEntry& StylesheetArchive_VersionedStyles::identifier_to_style_map(int index) const {
  // @@protoc_insertion_point(field_get:TSS.StylesheetArchive.VersionedStyles.identifier_to_style_map)
  return _internal_identifier_to_style_map(index);
}
inline ::TSS::StylesheetArchive_IdentifiedStyleEntry* StylesheetArchive_VersionedStyles::_internal_add_identifier_to_style_map() {
  return identifier_to_style_map_.Add();
}
inline ::TSS::StylesheetArchive_IdentifiedStyleEntry* StylesheetArchive_VersionedStyles::add_identifier_to_style_map() {
  // @@protoc_insertion_point(field_add:TSS.StylesheetArchive.VersionedStyles.identifier_to_style_map)
  return _internal_add_identifier_to_style_map();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >&
StylesheetArchive_VersionedStyles::identifier_to_style_map() const {
  // @@protoc_insertion_point(field_list:TSS.StylesheetArchive.VersionedStyles.identifier_to_style_map)
  return identifier_to_style_map_;
}

// repeated .TSS.StylesheetArchive.StyleChildrenEntry parent_to_children_style_map = 3;
inline int StylesheetArchive_VersionedStyles::_internal_parent_to_children_style_map_size() const {
  return parent_to_children_style_map_.size();
}
inline int StylesheetArchive_VersionedStyles::parent_to_children_style_map_size() const {
  return _internal_parent_to_children_style_map_size();
}
inline void StylesheetArchive_VersionedStyles::clear_parent_to_children_style_map() {
  parent_to_children_style_map_.Clear();
}
inline ::TSS::StylesheetArchive_StyleChildrenEntry* StylesheetArchive_VersionedStyles::mutable_parent_to_children_style_map(int index) {
  // @@protoc_insertion_point(field_mutable:TSS.StylesheetArchive.VersionedStyles.parent_to_children_style_map)
  return parent_to_children_style_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_StyleChildrenEntry >*
StylesheetArchive_VersionedStyles::mutable_parent_to_children_style_map() {
  // @@protoc_insertion_point(field_mutable_list:TSS.StylesheetArchive.VersionedStyles.parent_to_children_style_map)
  return &parent_to_children_style_map_;
}
inline const ::TSS::StylesheetArchive_StyleChildrenEntry& StylesheetArchive_VersionedStyles::_internal_parent_to_children_style_map(int index) const {
  return parent_to_children_style_map_.Get(index);
}
inline const ::TSS::StylesheetArchive_StyleChildrenEntry& StylesheetArchive_VersionedStyles::parent_to_children_style_map(int index) const {
  // @@protoc_insertion_point(field_get:TSS.StylesheetArchive.VersionedStyles.parent_to_children_style_map)
  return _internal_parent_to_children_style_map(index);
}
inline ::TSS::StylesheetArchive_StyleChildrenEntry* StylesheetArchive_VersionedStyles::_internal_add_parent_to_children_style_map() {
  return parent_to_children_style_map_.Add();
}
inline ::TSS::StylesheetArchive_StyleChildrenEntry* StylesheetArchive_VersionedStyles::add_parent_to_children_style_map() {
  // @@protoc_insertion_point(field_add:TSS.StylesheetArchive.VersionedStyles.parent_to_children_style_map)
  return _internal_add_parent_to_children_style_map();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_StyleChildrenEntry >&
StylesheetArchive_VersionedStyles::parent_to_children_style_map() const {
  // @@protoc_insertion_point(field_list:TSS.StylesheetArchive.VersionedStyles.parent_to_children_style_map)
  return parent_to_children_style_map_;
}

// -------------------------------------------------------------------

// StylesheetArchive

// repeated .TSP.Reference styles = 1;
inline int StylesheetArchive::_internal_styles_size() const {
  return styles_.size();
}
inline int StylesheetArchive::styles_size() const {
  return _internal_styles_size();
}
inline ::TSP::Reference* StylesheetArchive::mutable_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSS.StylesheetArchive.styles)
  return styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
StylesheetArchive::mutable_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSS.StylesheetArchive.styles)
  return &styles_;
}
inline const ::TSP::Reference& StylesheetArchive::_internal_styles(int index) const {
  return styles_.Get(index);
}
inline const ::TSP::Reference& StylesheetArchive::styles(int index) const {
  // @@protoc_insertion_point(field_get:TSS.StylesheetArchive.styles)
  return _internal_styles(index);
}
inline ::TSP::Reference* StylesheetArchive::_internal_add_styles() {
  return styles_.Add();
}
inline ::TSP::Reference* StylesheetArchive::add_styles() {
  // @@protoc_insertion_point(field_add:TSS.StylesheetArchive.styles)
  return _internal_add_styles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
StylesheetArchive::styles() const {
  // @@protoc_insertion_point(field_list:TSS.StylesheetArchive.styles)
  return styles_;
}

// repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 2;
inline int StylesheetArchive::_internal_identifier_to_style_map_size() const {
  return identifier_to_style_map_.size();
}
inline int StylesheetArchive::identifier_to_style_map_size() const {
  return _internal_identifier_to_style_map_size();
}
inline void StylesheetArchive::clear_identifier_to_style_map() {
  identifier_to_style_map_.Clear();
}
inline ::TSS::StylesheetArchive_IdentifiedStyleEntry* StylesheetArchive::mutable_identifier_to_style_map(int index) {
  // @@protoc_insertion_point(field_mutable:TSS.StylesheetArchive.identifier_to_style_map)
  return identifier_to_style_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >*
StylesheetArchive::mutable_identifier_to_style_map() {
  // @@protoc_insertion_point(field_mutable_list:TSS.StylesheetArchive.identifier_to_style_map)
  return &identifier_to_style_map_;
}
inline const ::TSS::StylesheetArchive_IdentifiedStyleEntry& StylesheetArchive::_internal_identifier_to_style_map(int index) const {
  return identifier_to_style_map_.Get(index);
}
inline const ::TSS::StylesheetArchive_IdentifiedStyleEntry& StylesheetArchive::identifier_to_style_map(int index) const {
  // @@protoc_insertion_point(field_get:TSS.StylesheetArchive.identifier_to_style_map)
  return _internal_identifier_to_style_map(index);
}
inline ::TSS::StylesheetArchive_IdentifiedStyleEntry* StylesheetArchive::_internal_add_identifier_to_style_map() {
  return identifier_to_style_map_.Add();
}
inline ::TSS::StylesheetArchive_IdentifiedStyleEntry* StylesheetArchive::add_identifier_to_style_map() {
  // @@protoc_insertion_point(field_add:TSS.StylesheetArchive.identifier_to_style_map)
  return _internal_add_identifier_to_style_map();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >&
StylesheetArchive::identifier_to_style_map() const {
  // @@protoc_insertion_point(field_list:TSS.StylesheetArchive.identifier_to_style_map)
  return identifier_to_style_map_;
}

// optional .TSP.Reference parent = 3;
inline bool StylesheetArchive::_internal_has_parent() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || parent_ != nullptr);
  return value;
}
inline bool StylesheetArchive::has_parent() const {
  return _internal_has_parent();
}
inline const ::TSP::Reference& StylesheetArchive::_internal_parent() const {
  const ::TSP::Reference* p = parent_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StylesheetArchive::parent() const {
  // @@protoc_insertion_point(field_get:TSS.StylesheetArchive.parent)
  return _internal_parent();
}
inline void StylesheetArchive::unsafe_arena_set_allocated_parent(
    ::TSP::Reference* parent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_);
  }
  parent_ = parent;
  if (parent) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.StylesheetArchive.parent)
}
inline ::TSP::Reference* StylesheetArchive::release_parent() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = parent_;
  parent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* StylesheetArchive::unsafe_arena_release_parent() {
  // @@protoc_insertion_point(field_release:TSS.StylesheetArchive.parent)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = parent_;
  parent_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StylesheetArchive::_internal_mutable_parent() {
  _has_bits_[0] |= 0x00000001u;
  if (parent_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    parent_ = p;
  }
  return parent_;
}
inline ::TSP::Reference* StylesheetArchive::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:TSS.StylesheetArchive.parent)
  return _internal_mutable_parent();
}
inline void StylesheetArchive::set_allocated_parent(::TSP::Reference* parent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_);
  }
  if (parent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent)->GetArena();
    if (message_arena != submessage_arena) {
      parent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:TSS.StylesheetArchive.parent)
}

// optional bool is_locked = 4 [default = true];
inline bool StylesheetArchive::_internal_has_is_locked() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool StylesheetArchive::has_is_locked() const {
  return _internal_has_is_locked();
}
inline void StylesheetArchive::clear_is_locked() {
  is_locked_ = true;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool StylesheetArchive::_internal_is_locked() const {
  return is_locked_;
}
inline bool StylesheetArchive::is_locked() const {
  // @@protoc_insertion_point(field_get:TSS.StylesheetArchive.is_locked)
  return _internal_is_locked();
}
inline void StylesheetArchive::_internal_set_is_locked(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_locked_ = value;
}
inline void StylesheetArchive::set_is_locked(bool value) {
  _internal_set_is_locked(value);
  // @@protoc_insertion_point(field_set:TSS.StylesheetArchive.is_locked)
}

// repeated .TSS.StylesheetArchive.StyleChildrenEntry parent_to_children_style_map = 5;
inline int StylesheetArchive::_internal_parent_to_children_style_map_size() const {
  return parent_to_children_style_map_.size();
}
inline int StylesheetArchive::parent_to_children_style_map_size() const {
  return _internal_parent_to_children_style_map_size();
}
inline void StylesheetArchive::clear_parent_to_children_style_map() {
  parent_to_children_style_map_.Clear();
}
inline ::TSS::StylesheetArchive_StyleChildrenEntry* StylesheetArchive::mutable_parent_to_children_style_map(int index) {
  // @@protoc_insertion_point(field_mutable:TSS.StylesheetArchive.parent_to_children_style_map)
  return parent_to_children_style_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_StyleChildrenEntry >*
StylesheetArchive::mutable_parent_to_children_style_map() {
  // @@protoc_insertion_point(field_mutable_list:TSS.StylesheetArchive.parent_to_children_style_map)
  return &parent_to_children_style_map_;
}
inline const ::TSS::StylesheetArchive_StyleChildrenEntry& StylesheetArchive::_internal_parent_to_children_style_map(int index) const {
  return parent_to_children_style_map_.Get(index);
}
inline const ::TSS::StylesheetArchive_StyleChildrenEntry& StylesheetArchive::parent_to_children_style_map(int index) const {
  // @@protoc_insertion_point(field_get:TSS.StylesheetArchive.parent_to_children_style_map)
  return _internal_parent_to_children_style_map(index);
}
inline ::TSS::StylesheetArchive_StyleChildrenEntry* StylesheetArchive::_internal_add_parent_to_children_style_map() {
  return parent_to_children_style_map_.Add();
}
inline ::TSS::StylesheetArchive_StyleChildrenEntry* StylesheetArchive::add_parent_to_children_style_map() {
  // @@protoc_insertion_point(field_add:TSS.StylesheetArchive.parent_to_children_style_map)
  return _internal_add_parent_to_children_style_map();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::StylesheetArchive_StyleChildrenEntry >&
StylesheetArchive::parent_to_children_style_map() const {
  // @@protoc_insertion_point(field_list:TSS.StylesheetArchive.parent_to_children_style_map)
  return parent_to_children_style_map_;
}

// optional bool can_cull_styles = 6 [default = false];
inline bool StylesheetArchive::_internal_has_can_cull_styles() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool StylesheetArchive::has_can_cull_styles() const {
  return _internal_has_can_cull_styles();
}
inline void StylesheetArchive::clear_can_cull_styles() {
  can_cull_styles_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool StylesheetArchive::_internal_can_cull_styles() const {
  return can_cull_styles_;
}
inline bool StylesheetArchive::can_cull_styles() const {
  // @@protoc_insertion_point(field_get:TSS.StylesheetArchive.can_cull_styles)
  return _internal_can_cull_styles();
}
inline void StylesheetArchive::_internal_set_can_cull_styles(bool value) {
  _has_bits_[0] |= 0x00000040u;
  can_cull_styles_ = value;
}
inline void StylesheetArchive::set_can_cull_styles(bool value) {
  _internal_set_can_cull_styles(value);
  // @@protoc_insertion_point(field_set:TSS.StylesheetArchive.can_cull_styles)
}

// optional .TSS.StylesheetArchive.VersionedStyles styles_for_10_0 = 7;
inline bool StylesheetArchive::_internal_has_styles_for_10_0() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || styles_for_10_0_ != nullptr);
  return value;
}
inline bool StylesheetArchive::has_styles_for_10_0() const {
  return _internal_has_styles_for_10_0();
}
inline void StylesheetArchive::clear_styles_for_10_0() {
  if (styles_for_10_0_ != nullptr) styles_for_10_0_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSS::StylesheetArchive_VersionedStyles& StylesheetArchive::_internal_styles_for_10_0() const {
  const ::TSS::StylesheetArchive_VersionedStyles* p = styles_for_10_0_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StylesheetArchive_VersionedStyles&>(
      ::TSS::_StylesheetArchive_VersionedStyles_default_instance_);
}
inline const ::TSS::StylesheetArchive_VersionedStyles& StylesheetArchive::styles_for_10_0() const {
  // @@protoc_insertion_point(field_get:TSS.StylesheetArchive.styles_for_10_0)
  return _internal_styles_for_10_0();
}
inline void StylesheetArchive::unsafe_arena_set_allocated_styles_for_10_0(
    ::TSS::StylesheetArchive_VersionedStyles* styles_for_10_0) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(styles_for_10_0_);
  }
  styles_for_10_0_ = styles_for_10_0;
  if (styles_for_10_0) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.StylesheetArchive.styles_for_10_0)
}
inline ::TSS::StylesheetArchive_VersionedStyles* StylesheetArchive::release_styles_for_10_0() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSS::StylesheetArchive_VersionedStyles* temp = styles_for_10_0_;
  styles_for_10_0_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StylesheetArchive_VersionedStyles* StylesheetArchive::unsafe_arena_release_styles_for_10_0() {
  // @@protoc_insertion_point(field_release:TSS.StylesheetArchive.styles_for_10_0)
  _has_bits_[0] &= ~0x00000002u;
  ::TSS::StylesheetArchive_VersionedStyles* temp = styles_for_10_0_;
  styles_for_10_0_ = nullptr;
  return temp;
}
inline ::TSS::StylesheetArchive_VersionedStyles* StylesheetArchive::_internal_mutable_styles_for_10_0() {
  _has_bits_[0] |= 0x00000002u;
  if (styles_for_10_0_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StylesheetArchive_VersionedStyles>(GetArena());
    styles_for_10_0_ = p;
  }
  return styles_for_10_0_;
}
inline ::TSS::StylesheetArchive_VersionedStyles* StylesheetArchive::mutable_styles_for_10_0() {
  // @@protoc_insertion_point(field_mutable:TSS.StylesheetArchive.styles_for_10_0)
  return _internal_mutable_styles_for_10_0();
}
inline void StylesheetArchive::set_allocated_styles_for_10_0(::TSS::StylesheetArchive_VersionedStyles* styles_for_10_0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete styles_for_10_0_;
  }
  if (styles_for_10_0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(styles_for_10_0);
    if (message_arena != submessage_arena) {
      styles_for_10_0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, styles_for_10_0, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  styles_for_10_0_ = styles_for_10_0;
  // @@protoc_insertion_point(field_set_allocated:TSS.StylesheetArchive.styles_for_10_0)
}

// optional .TSS.StylesheetArchive.VersionedStyles styles_for_10_1 = 8;
inline bool StylesheetArchive::_internal_has_styles_for_10_1() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || styles_for_10_1_ != nullptr);
  return value;
}
inline bool StylesheetArchive::has_styles_for_10_1() const {
  return _internal_has_styles_for_10_1();
}
inline void StylesheetArchive::clear_styles_for_10_1() {
  if (styles_for_10_1_ != nullptr) styles_for_10_1_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSS::StylesheetArchive_VersionedStyles& StylesheetArchive::_internal_styles_for_10_1() const {
  const ::TSS::StylesheetArchive_VersionedStyles* p = styles_for_10_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StylesheetArchive_VersionedStyles&>(
      ::TSS::_StylesheetArchive_VersionedStyles_default_instance_);
}
inline const ::TSS::StylesheetArchive_VersionedStyles& StylesheetArchive::styles_for_10_1() const {
  // @@protoc_insertion_point(field_get:TSS.StylesheetArchive.styles_for_10_1)
  return _internal_styles_for_10_1();
}
inline void StylesheetArchive::unsafe_arena_set_allocated_styles_for_10_1(
    ::TSS::StylesheetArchive_VersionedStyles* styles_for_10_1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(styles_for_10_1_);
  }
  styles_for_10_1_ = styles_for_10_1;
  if (styles_for_10_1) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.StylesheetArchive.styles_for_10_1)
}
inline ::TSS::StylesheetArchive_VersionedStyles* StylesheetArchive::release_styles_for_10_1() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSS::StylesheetArchive_VersionedStyles* temp = styles_for_10_1_;
  styles_for_10_1_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StylesheetArchive_VersionedStyles* StylesheetArchive::unsafe_arena_release_styles_for_10_1() {
  // @@protoc_insertion_point(field_release:TSS.StylesheetArchive.styles_for_10_1)
  _has_bits_[0] &= ~0x00000004u;
  ::TSS::StylesheetArchive_VersionedStyles* temp = styles_for_10_1_;
  styles_for_10_1_ = nullptr;
  return temp;
}
inline ::TSS::StylesheetArchive_VersionedStyles* StylesheetArchive::_internal_mutable_styles_for_10_1() {
  _has_bits_[0] |= 0x00000004u;
  if (styles_for_10_1_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StylesheetArchive_VersionedStyles>(GetArena());
    styles_for_10_1_ = p;
  }
  return styles_for_10_1_;
}
inline ::TSS::StylesheetArchive_VersionedStyles* StylesheetArchive::mutable_styles_for_10_1() {
  // @@protoc_insertion_point(field_mutable:TSS.StylesheetArchive.styles_for_10_1)
  return _internal_mutable_styles_for_10_1();
}
inline void StylesheetArchive::set_allocated_styles_for_10_1(::TSS::StylesheetArchive_VersionedStyles* styles_for_10_1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete styles_for_10_1_;
  }
  if (styles_for_10_1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(styles_for_10_1);
    if (message_arena != submessage_arena) {
      styles_for_10_1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, styles_for_10_1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  styles_for_10_1_ = styles_for_10_1;
  // @@protoc_insertion_point(field_set_allocated:TSS.StylesheetArchive.styles_for_10_1)
}

// optional .TSS.StylesheetArchive.VersionedStyles styles_for_10_2 = 9;
inline bool StylesheetArchive::_internal_has_styles_for_10_2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || styles_for_10_2_ != nullptr);
  return value;
}
inline bool StylesheetArchive::has_styles_for_10_2() const {
  return _internal_has_styles_for_10_2();
}
inline void StylesheetArchive::clear_styles_for_10_2() {
  if (styles_for_10_2_ != nullptr) styles_for_10_2_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TSS::StylesheetArchive_VersionedStyles& StylesheetArchive::_internal_styles_for_10_2() const {
  const ::TSS::StylesheetArchive_VersionedStyles* p = styles_for_10_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StylesheetArchive_VersionedStyles&>(
      ::TSS::_StylesheetArchive_VersionedStyles_default_instance_);
}
inline const ::TSS::StylesheetArchive_VersionedStyles& StylesheetArchive::styles_for_10_2() const {
  // @@protoc_insertion_point(field_get:TSS.StylesheetArchive.styles_for_10_2)
  return _internal_styles_for_10_2();
}
inline void StylesheetArchive::unsafe_arena_set_allocated_styles_for_10_2(
    ::TSS::StylesheetArchive_VersionedStyles* styles_for_10_2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(styles_for_10_2_);
  }
  styles_for_10_2_ = styles_for_10_2;
  if (styles_for_10_2) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.StylesheetArchive.styles_for_10_2)
}
inline ::TSS::StylesheetArchive_VersionedStyles* StylesheetArchive::release_styles_for_10_2() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSS::StylesheetArchive_VersionedStyles* temp = styles_for_10_2_;
  styles_for_10_2_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StylesheetArchive_VersionedStyles* StylesheetArchive::unsafe_arena_release_styles_for_10_2() {
  // @@protoc_insertion_point(field_release:TSS.StylesheetArchive.styles_for_10_2)
  _has_bits_[0] &= ~0x00000008u;
  ::TSS::StylesheetArchive_VersionedStyles* temp = styles_for_10_2_;
  styles_for_10_2_ = nullptr;
  return temp;
}
inline ::TSS::StylesheetArchive_VersionedStyles* StylesheetArchive::_internal_mutable_styles_for_10_2() {
  _has_bits_[0] |= 0x00000008u;
  if (styles_for_10_2_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StylesheetArchive_VersionedStyles>(GetArena());
    styles_for_10_2_ = p;
  }
  return styles_for_10_2_;
}
inline ::TSS::StylesheetArchive_VersionedStyles* StylesheetArchive::mutable_styles_for_10_2() {
  // @@protoc_insertion_point(field_mutable:TSS.StylesheetArchive.styles_for_10_2)
  return _internal_mutable_styles_for_10_2();
}
inline void StylesheetArchive::set_allocated_styles_for_10_2(::TSS::StylesheetArchive_VersionedStyles* styles_for_10_2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete styles_for_10_2_;
  }
  if (styles_for_10_2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(styles_for_10_2);
    if (message_arena != submessage_arena) {
      styles_for_10_2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, styles_for_10_2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  styles_for_10_2_ = styles_for_10_2;
  // @@protoc_insertion_point(field_set_allocated:TSS.StylesheetArchive.styles_for_10_2)
}

// optional .TSS.StylesheetArchive.VersionedStyles styles_for_11_0 = 10;
inline bool StylesheetArchive::_internal_has_styles_for_11_0() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || styles_for_11_0_ != nullptr);
  return value;
}
inline bool StylesheetArchive::has_styles_for_11_0() const {
  return _internal_has_styles_for_11_0();
}
inline void StylesheetArchive::clear_styles_for_11_0() {
  if (styles_for_11_0_ != nullptr) styles_for_11_0_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TSS::StylesheetArchive_VersionedStyles& StylesheetArchive::_internal_styles_for_11_0() const {
  const ::TSS::StylesheetArchive_VersionedStyles* p = styles_for_11_0_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StylesheetArchive_VersionedStyles&>(
      ::TSS::_StylesheetArchive_VersionedStyles_default_instance_);
}
inline const ::TSS::StylesheetArchive_VersionedStyles& StylesheetArchive::styles_for_11_0() const {
  // @@protoc_insertion_point(field_get:TSS.StylesheetArchive.styles_for_11_0)
  return _internal_styles_for_11_0();
}
inline void StylesheetArchive::unsafe_arena_set_allocated_styles_for_11_0(
    ::TSS::StylesheetArchive_VersionedStyles* styles_for_11_0) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(styles_for_11_0_);
  }
  styles_for_11_0_ = styles_for_11_0;
  if (styles_for_11_0) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.StylesheetArchive.styles_for_11_0)
}
inline ::TSS::StylesheetArchive_VersionedStyles* StylesheetArchive::release_styles_for_11_0() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSS::StylesheetArchive_VersionedStyles* temp = styles_for_11_0_;
  styles_for_11_0_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StylesheetArchive_VersionedStyles* StylesheetArchive::unsafe_arena_release_styles_for_11_0() {
  // @@protoc_insertion_point(field_release:TSS.StylesheetArchive.styles_for_11_0)
  _has_bits_[0] &= ~0x00000010u;
  ::TSS::StylesheetArchive_VersionedStyles* temp = styles_for_11_0_;
  styles_for_11_0_ = nullptr;
  return temp;
}
inline ::TSS::StylesheetArchive_VersionedStyles* StylesheetArchive::_internal_mutable_styles_for_11_0() {
  _has_bits_[0] |= 0x00000010u;
  if (styles_for_11_0_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StylesheetArchive_VersionedStyles>(GetArena());
    styles_for_11_0_ = p;
  }
  return styles_for_11_0_;
}
inline ::TSS::StylesheetArchive_VersionedStyles* StylesheetArchive::mutable_styles_for_11_0() {
  // @@protoc_insertion_point(field_mutable:TSS.StylesheetArchive.styles_for_11_0)
  return _internal_mutable_styles_for_11_0();
}
inline void StylesheetArchive::set_allocated_styles_for_11_0(::TSS::StylesheetArchive_VersionedStyles* styles_for_11_0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete styles_for_11_0_;
  }
  if (styles_for_11_0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(styles_for_11_0);
    if (message_arena != submessage_arena) {
      styles_for_11_0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, styles_for_11_0, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  styles_for_11_0_ = styles_for_11_0;
  // @@protoc_insertion_point(field_set_allocated:TSS.StylesheetArchive.styles_for_11_0)
}

// optional .TSS.StylesheetArchive.VersionedStyles styles_for_11_1 = 11;
inline bool StylesheetArchive::_internal_has_styles_for_11_1() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || styles_for_11_1_ != nullptr);
  return value;
}
inline bool StylesheetArchive::has_styles_for_11_1() const {
  return _internal_has_styles_for_11_1();
}
inline void StylesheetArchive::clear_styles_for_11_1() {
  if (styles_for_11_1_ != nullptr) styles_for_11_1_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::TSS::StylesheetArchive_VersionedStyles& StylesheetArchive::_internal_styles_for_11_1() const {
  const ::TSS::StylesheetArchive_VersionedStyles* p = styles_for_11_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StylesheetArchive_VersionedStyles&>(
      ::TSS::_StylesheetArchive_VersionedStyles_default_instance_);
}
inline const ::TSS::StylesheetArchive_VersionedStyles& StylesheetArchive::styles_for_11_1() const {
  // @@protoc_insertion_point(field_get:TSS.StylesheetArchive.styles_for_11_1)
  return _internal_styles_for_11_1();
}
inline void StylesheetArchive::unsafe_arena_set_allocated_styles_for_11_1(
    ::TSS::StylesheetArchive_VersionedStyles* styles_for_11_1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(styles_for_11_1_);
  }
  styles_for_11_1_ = styles_for_11_1;
  if (styles_for_11_1) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.StylesheetArchive.styles_for_11_1)
}
inline ::TSS::StylesheetArchive_VersionedStyles* StylesheetArchive::release_styles_for_11_1() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSS::StylesheetArchive_VersionedStyles* temp = styles_for_11_1_;
  styles_for_11_1_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StylesheetArchive_VersionedStyles* StylesheetArchive::unsafe_arena_release_styles_for_11_1() {
  // @@protoc_insertion_point(field_release:TSS.StylesheetArchive.styles_for_11_1)
  _has_bits_[0] &= ~0x00000020u;
  ::TSS::StylesheetArchive_VersionedStyles* temp = styles_for_11_1_;
  styles_for_11_1_ = nullptr;
  return temp;
}
inline ::TSS::StylesheetArchive_VersionedStyles* StylesheetArchive::_internal_mutable_styles_for_11_1() {
  _has_bits_[0] |= 0x00000020u;
  if (styles_for_11_1_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StylesheetArchive_VersionedStyles>(GetArena());
    styles_for_11_1_ = p;
  }
  return styles_for_11_1_;
}
inline ::TSS::StylesheetArchive_VersionedStyles* StylesheetArchive::mutable_styles_for_11_1() {
  // @@protoc_insertion_point(field_mutable:TSS.StylesheetArchive.styles_for_11_1)
  return _internal_mutable_styles_for_11_1();
}
inline void StylesheetArchive::set_allocated_styles_for_11_1(::TSS::StylesheetArchive_VersionedStyles* styles_for_11_1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete styles_for_11_1_;
  }
  if (styles_for_11_1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(styles_for_11_1);
    if (message_arena != submessage_arena) {
      styles_for_11_1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, styles_for_11_1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  styles_for_11_1_ = styles_for_11_1;
  // @@protoc_insertion_point(field_set_allocated:TSS.StylesheetArchive.styles_for_11_1)
}

// -------------------------------------------------------------------

// ThemeArchive

// optional .TSP.Reference legacy_stylesheet = 1;
inline bool ThemeArchive::_internal_has_legacy_stylesheet() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || legacy_stylesheet_ != nullptr);
  return value;
}
inline bool ThemeArchive::has_legacy_stylesheet() const {
  return _internal_has_legacy_stylesheet();
}
inline const ::TSP::Reference& ThemeArchive::_internal_legacy_stylesheet() const {
  const ::TSP::Reference* p = legacy_stylesheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ThemeArchive::legacy_stylesheet() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeArchive.legacy_stylesheet)
  return _internal_legacy_stylesheet();
}
inline void ThemeArchive::unsafe_arena_set_allocated_legacy_stylesheet(
    ::TSP::Reference* legacy_stylesheet) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(legacy_stylesheet_);
  }
  legacy_stylesheet_ = legacy_stylesheet;
  if (legacy_stylesheet) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeArchive.legacy_stylesheet)
}
inline ::TSP::Reference* ThemeArchive::release_legacy_stylesheet() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = legacy_stylesheet_;
  legacy_stylesheet_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ThemeArchive::unsafe_arena_release_legacy_stylesheet() {
  // @@protoc_insertion_point(field_release:TSS.ThemeArchive.legacy_stylesheet)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = legacy_stylesheet_;
  legacy_stylesheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ThemeArchive::_internal_mutable_legacy_stylesheet() {
  _has_bits_[0] |= 0x00000002u;
  if (legacy_stylesheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    legacy_stylesheet_ = p;
  }
  return legacy_stylesheet_;
}
inline ::TSP::Reference* ThemeArchive::mutable_legacy_stylesheet() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeArchive.legacy_stylesheet)
  return _internal_mutable_legacy_stylesheet();
}
inline void ThemeArchive::set_allocated_legacy_stylesheet(::TSP::Reference* legacy_stylesheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(legacy_stylesheet_);
  }
  if (legacy_stylesheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(legacy_stylesheet)->GetArena();
    if (message_arena != submessage_arena) {
      legacy_stylesheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, legacy_stylesheet, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  legacy_stylesheet_ = legacy_stylesheet;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeArchive.legacy_stylesheet)
}

// optional string theme_identifier = 3;
inline bool ThemeArchive::_internal_has_theme_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ThemeArchive::has_theme_identifier() const {
  return _internal_has_theme_identifier();
}
inline void ThemeArchive::clear_theme_identifier() {
  theme_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ThemeArchive::theme_identifier() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeArchive.theme_identifier)
  return _internal_theme_identifier();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ThemeArchive::set_theme_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 theme_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSS.ThemeArchive.theme_identifier)
}
inline std::string* ThemeArchive::mutable_theme_identifier() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeArchive.theme_identifier)
  return _internal_mutable_theme_identifier();
}
inline const std::string& ThemeArchive::_internal_theme_identifier() const {
  return theme_identifier_.Get();
}
inline void ThemeArchive::_internal_set_theme_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  theme_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ThemeArchive::_internal_mutable_theme_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return theme_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ThemeArchive::release_theme_identifier() {
  // @@protoc_insertion_point(field_release:TSS.ThemeArchive.theme_identifier)
  if (!_internal_has_theme_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return theme_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ThemeArchive::set_allocated_theme_identifier(std::string* theme_identifier) {
  if (theme_identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  theme_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), theme_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeArchive.theme_identifier)
}

// optional .TSP.Reference document_stylesheet = 4;
inline bool ThemeArchive::_internal_has_document_stylesheet() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || document_stylesheet_ != nullptr);
  return value;
}
inline bool ThemeArchive::has_document_stylesheet() const {
  return _internal_has_document_stylesheet();
}
inline const ::TSP::Reference& ThemeArchive::_internal_document_stylesheet() const {
  const ::TSP::Reference* p = document_stylesheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ThemeArchive::document_stylesheet() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeArchive.document_stylesheet)
  return _internal_document_stylesheet();
}
inline void ThemeArchive::unsafe_arena_set_allocated_document_stylesheet(
    ::TSP::Reference* document_stylesheet) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_stylesheet_);
  }
  document_stylesheet_ = document_stylesheet;
  if (document_stylesheet) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeArchive.document_stylesheet)
}
inline ::TSP::Reference* ThemeArchive::release_document_stylesheet() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = document_stylesheet_;
  document_stylesheet_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ThemeArchive::unsafe_arena_release_document_stylesheet() {
  // @@protoc_insertion_point(field_release:TSS.ThemeArchive.document_stylesheet)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = document_stylesheet_;
  document_stylesheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ThemeArchive::_internal_mutable_document_stylesheet() {
  _has_bits_[0] |= 0x00000004u;
  if (document_stylesheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    document_stylesheet_ = p;
  }
  return document_stylesheet_;
}
inline ::TSP::Reference* ThemeArchive::mutable_document_stylesheet() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeArchive.document_stylesheet)
  return _internal_mutable_document_stylesheet();
}
inline void ThemeArchive::set_allocated_document_stylesheet(::TSP::Reference* document_stylesheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_stylesheet_);
  }
  if (document_stylesheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_stylesheet)->GetArena();
    if (message_arena != submessage_arena) {
      document_stylesheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document_stylesheet, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  document_stylesheet_ = document_stylesheet;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeArchive.document_stylesheet)
}

// repeated .TSP.UUID old_uuids_for_preset_replacements = 5;
inline int ThemeArchive::_internal_old_uuids_for_preset_replacements_size() const {
  return old_uuids_for_preset_replacements_.size();
}
inline int ThemeArchive::old_uuids_for_preset_replacements_size() const {
  return _internal_old_uuids_for_preset_replacements_size();
}
inline ::TSP::UUID* ThemeArchive::mutable_old_uuids_for_preset_replacements(int index) {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeArchive.old_uuids_for_preset_replacements)
  return old_uuids_for_preset_replacements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
ThemeArchive::mutable_old_uuids_for_preset_replacements() {
  // @@protoc_insertion_point(field_mutable_list:TSS.ThemeArchive.old_uuids_for_preset_replacements)
  return &old_uuids_for_preset_replacements_;
}
inline const ::TSP::UUID& ThemeArchive::_internal_old_uuids_for_preset_replacements(int index) const {
  return old_uuids_for_preset_replacements_.Get(index);
}
inline const ::TSP::UUID& ThemeArchive::old_uuids_for_preset_replacements(int index) const {
  // @@protoc_insertion_point(field_get:TSS.ThemeArchive.old_uuids_for_preset_replacements)
  return _internal_old_uuids_for_preset_replacements(index);
}
inline ::TSP::UUID* ThemeArchive::_internal_add_old_uuids_for_preset_replacements() {
  return old_uuids_for_preset_replacements_.Add();
}
inline ::TSP::UUID* ThemeArchive::add_old_uuids_for_preset_replacements() {
  // @@protoc_insertion_point(field_add:TSS.ThemeArchive.old_uuids_for_preset_replacements)
  return _internal_add_old_uuids_for_preset_replacements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
ThemeArchive::old_uuids_for_preset_replacements() const {
  // @@protoc_insertion_point(field_list:TSS.ThemeArchive.old_uuids_for_preset_replacements)
  return old_uuids_for_preset_replacements_;
}

// repeated .TSP.UUID new_uuids_for_preset_replacements = 6;
inline int ThemeArchive::_internal_new_uuids_for_preset_replacements_size() const {
  return new_uuids_for_preset_replacements_.size();
}
inline int ThemeArchive::new_uuids_for_preset_replacements_size() const {
  return _internal_new_uuids_for_preset_replacements_size();
}
inline ::TSP::UUID* ThemeArchive::mutable_new_uuids_for_preset_replacements(int index) {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeArchive.new_uuids_for_preset_replacements)
  return new_uuids_for_preset_replacements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
ThemeArchive::mutable_new_uuids_for_preset_replacements() {
  // @@protoc_insertion_point(field_mutable_list:TSS.ThemeArchive.new_uuids_for_preset_replacements)
  return &new_uuids_for_preset_replacements_;
}
inline const ::TSP::UUID& ThemeArchive::_internal_new_uuids_for_preset_replacements(int index) const {
  return new_uuids_for_preset_replacements_.Get(index);
}
inline const ::TSP::UUID& ThemeArchive::new_uuids_for_preset_replacements(int index) const {
  // @@protoc_insertion_point(field_get:TSS.ThemeArchive.new_uuids_for_preset_replacements)
  return _internal_new_uuids_for_preset_replacements(index);
}
inline ::TSP::UUID* ThemeArchive::_internal_add_new_uuids_for_preset_replacements() {
  return new_uuids_for_preset_replacements_.Add();
}
inline ::TSP::UUID* ThemeArchive::add_new_uuids_for_preset_replacements() {
  // @@protoc_insertion_point(field_add:TSS.ThemeArchive.new_uuids_for_preset_replacements)
  return _internal_add_new_uuids_for_preset_replacements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
ThemeArchive::new_uuids_for_preset_replacements() const {
  // @@protoc_insertion_point(field_list:TSS.ThemeArchive.new_uuids_for_preset_replacements)
  return new_uuids_for_preset_replacements_;
}

// repeated .TSP.Color color_presets = 10;
inline int ThemeArchive::_internal_color_presets_size() const {
  return color_presets_.size();
}
inline int ThemeArchive::color_presets_size() const {
  return _internal_color_presets_size();
}
inline ::TSP::Color* ThemeArchive::mutable_color_presets(int index) {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeArchive.color_presets)
  return color_presets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Color >*
ThemeArchive::mutable_color_presets() {
  // @@protoc_insertion_point(field_mutable_list:TSS.ThemeArchive.color_presets)
  return &color_presets_;
}
inline const ::TSP::Color& ThemeArchive::_internal_color_presets(int index) const {
  return color_presets_.Get(index);
}
inline const ::TSP::Color& ThemeArchive::color_presets(int index) const {
  // @@protoc_insertion_point(field_get:TSS.ThemeArchive.color_presets)
  return _internal_color_presets(index);
}
inline ::TSP::Color* ThemeArchive::_internal_add_color_presets() {
  return color_presets_.Add();
}
inline ::TSP::Color* ThemeArchive::add_color_presets() {
  // @@protoc_insertion_point(field_add:TSS.ThemeArchive.color_presets)
  return _internal_add_color_presets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Color >&
ThemeArchive::color_presets() const {
  // @@protoc_insertion_point(field_list:TSS.ThemeArchive.color_presets)
  return color_presets_;
}

// -------------------------------------------------------------------

// ApplyThemeCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ApplyThemeCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ApplyThemeCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ApplyThemeCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ApplyThemeCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSS.ApplyThemeCommandArchive.super)
  return _internal_super();
}
inline void ApplyThemeCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ApplyThemeCommandArchive.super)
}
inline ::TSK::CommandArchive* ApplyThemeCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ApplyThemeCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSS.ApplyThemeCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ApplyThemeCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ApplyThemeCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSS.ApplyThemeCommandArchive.super)
  return _internal_mutable_super();
}
inline void ApplyThemeCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSS.ApplyThemeCommandArchive.super)
}

// repeated .TSP.Reference commands = 2;
inline int ApplyThemeCommandArchive::_internal_commands_size() const {
  return commands_.size();
}
inline int ApplyThemeCommandArchive::commands_size() const {
  return _internal_commands_size();
}
inline ::TSP::Reference* ApplyThemeCommandArchive::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:TSS.ApplyThemeCommandArchive.commands)
  return commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ApplyThemeCommandArchive::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:TSS.ApplyThemeCommandArchive.commands)
  return &commands_;
}
inline const ::TSP::Reference& ApplyThemeCommandArchive::_internal_commands(int index) const {
  return commands_.Get(index);
}
inline const ::TSP::Reference& ApplyThemeCommandArchive::commands(int index) const {
  // @@protoc_insertion_point(field_get:TSS.ApplyThemeCommandArchive.commands)
  return _internal_commands(index);
}
inline ::TSP::Reference* ApplyThemeCommandArchive::_internal_add_commands() {
  return commands_.Add();
}
inline ::TSP::Reference* ApplyThemeCommandArchive::add_commands() {
  // @@protoc_insertion_point(field_add:TSS.ApplyThemeCommandArchive.commands)
  return _internal_add_commands();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ApplyThemeCommandArchive::commands() const {
  // @@protoc_insertion_point(field_list:TSS.ApplyThemeCommandArchive.commands)
  return commands_;
}

// optional .TSP.Reference old_theme = 3;
inline bool ApplyThemeCommandArchive::_internal_has_old_theme() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || old_theme_ != nullptr);
  return value;
}
inline bool ApplyThemeCommandArchive::has_old_theme() const {
  return _internal_has_old_theme();
}
inline const ::TSP::Reference& ApplyThemeCommandArchive::_internal_old_theme() const {
  const ::TSP::Reference* p = old_theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ApplyThemeCommandArchive::old_theme() const {
  // @@protoc_insertion_point(field_get:TSS.ApplyThemeCommandArchive.old_theme)
  return _internal_old_theme();
}
inline void ApplyThemeCommandArchive::unsafe_arena_set_allocated_old_theme(
    ::TSP::Reference* old_theme) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_theme_);
  }
  old_theme_ = old_theme;
  if (old_theme) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ApplyThemeCommandArchive.old_theme)
}
inline ::TSP::Reference* ApplyThemeCommandArchive::release_old_theme() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = old_theme_;
  old_theme_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ApplyThemeCommandArchive::unsafe_arena_release_old_theme() {
  // @@protoc_insertion_point(field_release:TSS.ApplyThemeCommandArchive.old_theme)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = old_theme_;
  old_theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ApplyThemeCommandArchive::_internal_mutable_old_theme() {
  _has_bits_[0] |= 0x00000002u;
  if (old_theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    old_theme_ = p;
  }
  return old_theme_;
}
inline ::TSP::Reference* ApplyThemeCommandArchive::mutable_old_theme() {
  // @@protoc_insertion_point(field_mutable:TSS.ApplyThemeCommandArchive.old_theme)
  return _internal_mutable_old_theme();
}
inline void ApplyThemeCommandArchive::set_allocated_old_theme(::TSP::Reference* old_theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_theme_);
  }
  if (old_theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_theme)->GetArena();
    if (message_arena != submessage_arena) {
      old_theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_theme, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  old_theme_ = old_theme;
  // @@protoc_insertion_point(field_set_allocated:TSS.ApplyThemeCommandArchive.old_theme)
}

// optional .TSP.Reference new_theme = 4;
inline bool ApplyThemeCommandArchive::_internal_has_new_theme() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || new_theme_ != nullptr);
  return value;
}
inline bool ApplyThemeCommandArchive::has_new_theme() const {
  return _internal_has_new_theme();
}
inline const ::TSP::Reference& ApplyThemeCommandArchive::_internal_new_theme() const {
  const ::TSP::Reference* p = new_theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ApplyThemeCommandArchive::new_theme() const {
  // @@protoc_insertion_point(field_get:TSS.ApplyThemeCommandArchive.new_theme)
  return _internal_new_theme();
}
inline void ApplyThemeCommandArchive::unsafe_arena_set_allocated_new_theme(
    ::TSP::Reference* new_theme) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_theme_);
  }
  new_theme_ = new_theme;
  if (new_theme) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ApplyThemeCommandArchive.new_theme)
}
inline ::TSP::Reference* ApplyThemeCommandArchive::release_new_theme() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = new_theme_;
  new_theme_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ApplyThemeCommandArchive::unsafe_arena_release_new_theme() {
  // @@protoc_insertion_point(field_release:TSS.ApplyThemeCommandArchive.new_theme)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = new_theme_;
  new_theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ApplyThemeCommandArchive::_internal_mutable_new_theme() {
  _has_bits_[0] |= 0x00000004u;
  if (new_theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    new_theme_ = p;
  }
  return new_theme_;
}
inline ::TSP::Reference* ApplyThemeCommandArchive::mutable_new_theme() {
  // @@protoc_insertion_point(field_mutable:TSS.ApplyThemeCommandArchive.new_theme)
  return _internal_mutable_new_theme();
}
inline void ApplyThemeCommandArchive::set_allocated_new_theme(::TSP::Reference* new_theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_theme_);
  }
  if (new_theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_theme)->GetArena();
    if (message_arena != submessage_arena) {
      new_theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_theme, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  new_theme_ = new_theme;
  // @@protoc_insertion_point(field_set_allocated:TSS.ApplyThemeCommandArchive.new_theme)
}

// -------------------------------------------------------------------

// ApplyThemeChildCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ApplyThemeChildCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ApplyThemeChildCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ApplyThemeChildCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ApplyThemeChildCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSS.ApplyThemeChildCommandArchive.super)
  return _internal_super();
}
inline void ApplyThemeChildCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ApplyThemeChildCommandArchive.super)
}
inline ::TSK::CommandArchive* ApplyThemeChildCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ApplyThemeChildCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSS.ApplyThemeChildCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ApplyThemeChildCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ApplyThemeChildCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSS.ApplyThemeChildCommandArchive.super)
  return _internal_mutable_super();
}
inline void ApplyThemeChildCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSS.ApplyThemeChildCommandArchive.super)
}

// optional .TSP.Reference parent = 2;
inline bool ApplyThemeChildCommandArchive::_internal_has_parent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || parent_ != nullptr);
  return value;
}
inline bool ApplyThemeChildCommandArchive::has_parent() const {
  return _internal_has_parent();
}
inline const ::TSP::Reference& ApplyThemeChildCommandArchive::_internal_parent() const {
  const ::TSP::Reference* p = parent_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ApplyThemeChildCommandArchive::parent() const {
  // @@protoc_insertion_point(field_get:TSS.ApplyThemeChildCommandArchive.parent)
  return _internal_parent();
}
inline void ApplyThemeChildCommandArchive::unsafe_arena_set_allocated_parent(
    ::TSP::Reference* parent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_);
  }
  parent_ = parent;
  if (parent) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ApplyThemeChildCommandArchive.parent)
}
inline ::TSP::Reference* ApplyThemeChildCommandArchive::release_parent() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = parent_;
  parent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ApplyThemeChildCommandArchive::unsafe_arena_release_parent() {
  // @@protoc_insertion_point(field_release:TSS.ApplyThemeChildCommandArchive.parent)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = parent_;
  parent_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ApplyThemeChildCommandArchive::_internal_mutable_parent() {
  _has_bits_[0] |= 0x00000002u;
  if (parent_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    parent_ = p;
  }
  return parent_;
}
inline ::TSP::Reference* ApplyThemeChildCommandArchive::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:TSS.ApplyThemeChildCommandArchive.parent)
  return _internal_mutable_parent();
}
inline void ApplyThemeChildCommandArchive::set_allocated_parent(::TSP::Reference* parent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_);
  }
  if (parent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent)->GetArena();
    if (message_arena != submessage_arena) {
      parent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:TSS.ApplyThemeChildCommandArchive.parent)
}

// -------------------------------------------------------------------

// StyleUpdatePropertyMapCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool StyleUpdatePropertyMapCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool StyleUpdatePropertyMapCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& StyleUpdatePropertyMapCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& StyleUpdatePropertyMapCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSS.StyleUpdatePropertyMapCommandArchive.super)
  return _internal_super();
}
inline void StyleUpdatePropertyMapCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.StyleUpdatePropertyMapCommandArchive.super)
}
inline ::TSK::CommandArchive* StyleUpdatePropertyMapCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* StyleUpdatePropertyMapCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSS.StyleUpdatePropertyMapCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* StyleUpdatePropertyMapCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* StyleUpdatePropertyMapCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSS.StyleUpdatePropertyMapCommandArchive.super)
  return _internal_mutable_super();
}
inline void StyleUpdatePropertyMapCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSS.StyleUpdatePropertyMapCommandArchive.super)
}

// required .TSP.Reference current_style = 2;
inline bool StyleUpdatePropertyMapCommandArchive::_internal_has_current_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || current_style_ != nullptr);
  return value;
}
inline bool StyleUpdatePropertyMapCommandArchive::has_current_style() const {
  return _internal_has_current_style();
}
inline const ::TSP::Reference& StyleUpdatePropertyMapCommandArchive::_internal_current_style() const {
  const ::TSP::Reference* p = current_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyleUpdatePropertyMapCommandArchive::current_style() const {
  // @@protoc_insertion_point(field_get:TSS.StyleUpdatePropertyMapCommandArchive.current_style)
  return _internal_current_style();
}
inline void StyleUpdatePropertyMapCommandArchive::unsafe_arena_set_allocated_current_style(
    ::TSP::Reference* current_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_style_);
  }
  current_style_ = current_style;
  if (current_style) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.StyleUpdatePropertyMapCommandArchive.current_style)
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::release_current_style() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = current_style_;
  current_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::unsafe_arena_release_current_style() {
  // @@protoc_insertion_point(field_release:TSS.StyleUpdatePropertyMapCommandArchive.current_style)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = current_style_;
  current_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::_internal_mutable_current_style() {
  _has_bits_[0] |= 0x00000002u;
  if (current_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    current_style_ = p;
  }
  return current_style_;
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::mutable_current_style() {
  // @@protoc_insertion_point(field_mutable:TSS.StyleUpdatePropertyMapCommandArchive.current_style)
  return _internal_mutable_current_style();
}
inline void StyleUpdatePropertyMapCommandArchive::set_allocated_current_style(::TSP::Reference* current_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_style_);
  }
  if (current_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_style)->GetArena();
    if (message_arena != submessage_arena) {
      current_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  current_style_ = current_style;
  // @@protoc_insertion_point(field_set_allocated:TSS.StyleUpdatePropertyMapCommandArchive.current_style)
}

// optional .TSP.Reference style_with_old_property_map = 3;
inline bool StyleUpdatePropertyMapCommandArchive::_internal_has_style_with_old_property_map() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || style_with_old_property_map_ != nullptr);
  return value;
}
inline bool StyleUpdatePropertyMapCommandArchive::has_style_with_old_property_map() const {
  return _internal_has_style_with_old_property_map();
}
inline const ::TSP::Reference& StyleUpdatePropertyMapCommandArchive::_internal_style_with_old_property_map() const {
  const ::TSP::Reference* p = style_with_old_property_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyleUpdatePropertyMapCommandArchive::style_with_old_property_map() const {
  // @@protoc_insertion_point(field_get:TSS.StyleUpdatePropertyMapCommandArchive.style_with_old_property_map)
  return _internal_style_with_old_property_map();
}
inline void StyleUpdatePropertyMapCommandArchive::unsafe_arena_set_allocated_style_with_old_property_map(
    ::TSP::Reference* style_with_old_property_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_with_old_property_map_);
  }
  style_with_old_property_map_ = style_with_old_property_map;
  if (style_with_old_property_map) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.StyleUpdatePropertyMapCommandArchive.style_with_old_property_map)
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::release_style_with_old_property_map() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = style_with_old_property_map_;
  style_with_old_property_map_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::unsafe_arena_release_style_with_old_property_map() {
  // @@protoc_insertion_point(field_release:TSS.StyleUpdatePropertyMapCommandArchive.style_with_old_property_map)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = style_with_old_property_map_;
  style_with_old_property_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::_internal_mutable_style_with_old_property_map() {
  _has_bits_[0] |= 0x00000004u;
  if (style_with_old_property_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    style_with_old_property_map_ = p;
  }
  return style_with_old_property_map_;
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::mutable_style_with_old_property_map() {
  // @@protoc_insertion_point(field_mutable:TSS.StyleUpdatePropertyMapCommandArchive.style_with_old_property_map)
  return _internal_mutable_style_with_old_property_map();
}
inline void StyleUpdatePropertyMapCommandArchive::set_allocated_style_with_old_property_map(::TSP::Reference* style_with_old_property_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_with_old_property_map_);
  }
  if (style_with_old_property_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_with_old_property_map)->GetArena();
    if (message_arena != submessage_arena) {
      style_with_old_property_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style_with_old_property_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  style_with_old_property_map_ = style_with_old_property_map;
  // @@protoc_insertion_point(field_set_allocated:TSS.StyleUpdatePropertyMapCommandArchive.style_with_old_property_map)
}

// optional .TSP.Reference style_with_new_property_map = 4;
inline bool StyleUpdatePropertyMapCommandArchive::_internal_has_style_with_new_property_map() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || style_with_new_property_map_ != nullptr);
  return value;
}
inline bool StyleUpdatePropertyMapCommandArchive::has_style_with_new_property_map() const {
  return _internal_has_style_with_new_property_map();
}
inline const ::TSP::Reference& StyleUpdatePropertyMapCommandArchive::_internal_style_with_new_property_map() const {
  const ::TSP::Reference* p = style_with_new_property_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyleUpdatePropertyMapCommandArchive::style_with_new_property_map() const {
  // @@protoc_insertion_point(field_get:TSS.StyleUpdatePropertyMapCommandArchive.style_with_new_property_map)
  return _internal_style_with_new_property_map();
}
inline void StyleUpdatePropertyMapCommandArchive::unsafe_arena_set_allocated_style_with_new_property_map(
    ::TSP::Reference* style_with_new_property_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_with_new_property_map_);
  }
  style_with_new_property_map_ = style_with_new_property_map;
  if (style_with_new_property_map) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.StyleUpdatePropertyMapCommandArchive.style_with_new_property_map)
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::release_style_with_new_property_map() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = style_with_new_property_map_;
  style_with_new_property_map_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::unsafe_arena_release_style_with_new_property_map() {
  // @@protoc_insertion_point(field_release:TSS.StyleUpdatePropertyMapCommandArchive.style_with_new_property_map)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = style_with_new_property_map_;
  style_with_new_property_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::_internal_mutable_style_with_new_property_map() {
  _has_bits_[0] |= 0x00000008u;
  if (style_with_new_property_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    style_with_new_property_map_ = p;
  }
  return style_with_new_property_map_;
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::mutable_style_with_new_property_map() {
  // @@protoc_insertion_point(field_mutable:TSS.StyleUpdatePropertyMapCommandArchive.style_with_new_property_map)
  return _internal_mutable_style_with_new_property_map();
}
inline void StyleUpdatePropertyMapCommandArchive::set_allocated_style_with_new_property_map(::TSP::Reference* style_with_new_property_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_with_new_property_map_);
  }
  if (style_with_new_property_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_with_new_property_map)->GetArena();
    if (message_arena != submessage_arena) {
      style_with_new_property_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style_with_new_property_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  style_with_new_property_map_ = style_with_new_property_map;
  // @@protoc_insertion_point(field_set_allocated:TSS.StyleUpdatePropertyMapCommandArchive.style_with_new_property_map)
}

// optional .TSP.Reference style_diff = 7;
inline bool StyleUpdatePropertyMapCommandArchive::_internal_has_style_diff() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || style_diff_ != nullptr);
  return value;
}
inline bool StyleUpdatePropertyMapCommandArchive::has_style_diff() const {
  return _internal_has_style_diff();
}
inline const ::TSP::Reference& StyleUpdatePropertyMapCommandArchive::_internal_style_diff() const {
  const ::TSP::Reference* p = style_diff_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyleUpdatePropertyMapCommandArchive::style_diff() const {
  // @@protoc_insertion_point(field_get:TSS.StyleUpdatePropertyMapCommandArchive.style_diff)
  return _internal_style_diff();
}
inline void StyleUpdatePropertyMapCommandArchive::unsafe_arena_set_allocated_style_diff(
    ::TSP::Reference* style_diff) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_diff_);
  }
  style_diff_ = style_diff;
  if (style_diff) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.StyleUpdatePropertyMapCommandArchive.style_diff)
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::release_style_diff() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = style_diff_;
  style_diff_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::unsafe_arena_release_style_diff() {
  // @@protoc_insertion_point(field_release:TSS.StyleUpdatePropertyMapCommandArchive.style_diff)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = style_diff_;
  style_diff_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::_internal_mutable_style_diff() {
  _has_bits_[0] |= 0x00000010u;
  if (style_diff_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    style_diff_ = p;
  }
  return style_diff_;
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::mutable_style_diff() {
  // @@protoc_insertion_point(field_mutable:TSS.StyleUpdatePropertyMapCommandArchive.style_diff)
  return _internal_mutable_style_diff();
}
inline void StyleUpdatePropertyMapCommandArchive::set_allocated_style_diff(::TSP::Reference* style_diff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_diff_);
  }
  if (style_diff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_diff)->GetArena();
    if (message_arena != submessage_arena) {
      style_diff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style_diff, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  style_diff_ = style_diff;
  // @@protoc_insertion_point(field_set_allocated:TSS.StyleUpdatePropertyMapCommandArchive.style_diff)
}

// optional bool notify_for_style_clients = 6 [default = true];
inline bool StyleUpdatePropertyMapCommandArchive::_internal_has_notify_for_style_clients() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StyleUpdatePropertyMapCommandArchive::has_notify_for_style_clients() const {
  return _internal_has_notify_for_style_clients();
}
inline void StyleUpdatePropertyMapCommandArchive::clear_notify_for_style_clients() {
  notify_for_style_clients_ = true;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool StyleUpdatePropertyMapCommandArchive::_internal_notify_for_style_clients() const {
  return notify_for_style_clients_;
}
inline bool StyleUpdatePropertyMapCommandArchive::notify_for_style_clients() const {
  // @@protoc_insertion_point(field_get:TSS.StyleUpdatePropertyMapCommandArchive.notify_for_style_clients)
  return _internal_notify_for_style_clients();
}
inline void StyleUpdatePropertyMapCommandArchive::_internal_set_notify_for_style_clients(bool value) {
  _has_bits_[0] |= 0x00000020u;
  notify_for_style_clients_ = value;
}
inline void StyleUpdatePropertyMapCommandArchive::set_notify_for_style_clients(bool value) {
  _internal_set_notify_for_style_clients(value);
  // @@protoc_insertion_point(field_set:TSS.StyleUpdatePropertyMapCommandArchive.notify_for_style_clients)
}

// -------------------------------------------------------------------

// ThemeReplacePresetCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ThemeReplacePresetCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ThemeReplacePresetCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ThemeReplacePresetCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ThemeReplacePresetCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeReplacePresetCommandArchive.super)
  return _internal_super();
}
inline void ThemeReplacePresetCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeReplacePresetCommandArchive.super)
}
inline ::TSK::CommandArchive* ThemeReplacePresetCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ThemeReplacePresetCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSS.ThemeReplacePresetCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ThemeReplacePresetCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ThemeReplacePresetCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeReplacePresetCommandArchive.super)
  return _internal_mutable_super();
}
inline void ThemeReplacePresetCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeReplacePresetCommandArchive.super)
}

// required .TSP.Reference preset = 3;
inline bool ThemeReplacePresetCommandArchive::_internal_has_preset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || preset_ != nullptr);
  return value;
}
inline bool ThemeReplacePresetCommandArchive::has_preset() const {
  return _internal_has_preset();
}
inline const ::TSP::Reference& ThemeReplacePresetCommandArchive::_internal_preset() const {
  const ::TSP::Reference* p = preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ThemeReplacePresetCommandArchive::preset() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeReplacePresetCommandArchive.preset)
  return _internal_preset();
}
inline void ThemeReplacePresetCommandArchive::unsafe_arena_set_allocated_preset(
    ::TSP::Reference* preset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_);
  }
  preset_ = preset;
  if (preset) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeReplacePresetCommandArchive.preset)
}
inline ::TSP::Reference* ThemeReplacePresetCommandArchive::release_preset() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = preset_;
  preset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ThemeReplacePresetCommandArchive::unsafe_arena_release_preset() {
  // @@protoc_insertion_point(field_release:TSS.ThemeReplacePresetCommandArchive.preset)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = preset_;
  preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ThemeReplacePresetCommandArchive::_internal_mutable_preset() {
  _has_bits_[0] |= 0x00000002u;
  if (preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    preset_ = p;
  }
  return preset_;
}
inline ::TSP::Reference* ThemeReplacePresetCommandArchive::mutable_preset() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeReplacePresetCommandArchive.preset)
  return _internal_mutable_preset();
}
inline void ThemeReplacePresetCommandArchive::set_allocated_preset(::TSP::Reference* preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_);
  }
  if (preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset)->GetArena();
    if (message_arena != submessage_arena) {
      preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  preset_ = preset;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeReplacePresetCommandArchive.preset)
}

// optional .TSP.Reference oldPreset = 4;
inline bool ThemeReplacePresetCommandArchive::_internal_has_oldpreset() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || oldpreset_ != nullptr);
  return value;
}
inline bool ThemeReplacePresetCommandArchive::has_oldpreset() const {
  return _internal_has_oldpreset();
}
inline const ::TSP::Reference& ThemeReplacePresetCommandArchive::_internal_oldpreset() const {
  const ::TSP::Reference* p = oldpreset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ThemeReplacePresetCommandArchive::oldpreset() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeReplacePresetCommandArchive.oldPreset)
  return _internal_oldpreset();
}
inline void ThemeReplacePresetCommandArchive::unsafe_arena_set_allocated_oldpreset(
    ::TSP::Reference* oldpreset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldpreset_);
  }
  oldpreset_ = oldpreset;
  if (oldpreset) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeReplacePresetCommandArchive.oldPreset)
}
inline ::TSP::Reference* ThemeReplacePresetCommandArchive::release_oldpreset() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = oldpreset_;
  oldpreset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ThemeReplacePresetCommandArchive::unsafe_arena_release_oldpreset() {
  // @@protoc_insertion_point(field_release:TSS.ThemeReplacePresetCommandArchive.oldPreset)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = oldpreset_;
  oldpreset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ThemeReplacePresetCommandArchive::_internal_mutable_oldpreset() {
  _has_bits_[0] |= 0x00000004u;
  if (oldpreset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    oldpreset_ = p;
  }
  return oldpreset_;
}
inline ::TSP::Reference* ThemeReplacePresetCommandArchive::mutable_oldpreset() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeReplacePresetCommandArchive.oldPreset)
  return _internal_mutable_oldpreset();
}
inline void ThemeReplacePresetCommandArchive::set_allocated_oldpreset(::TSP::Reference* oldpreset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldpreset_);
  }
  if (oldpreset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldpreset)->GetArena();
    if (message_arena != submessage_arena) {
      oldpreset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldpreset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  oldpreset_ = oldpreset;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeReplacePresetCommandArchive.oldPreset)
}

// required uint32 index = 5;
inline bool ThemeReplacePresetCommandArchive::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ThemeReplacePresetCommandArchive::has_index() const {
  return _internal_has_index();
}
inline void ThemeReplacePresetCommandArchive::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ThemeReplacePresetCommandArchive::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ThemeReplacePresetCommandArchive::index() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeReplacePresetCommandArchive.index)
  return _internal_index();
}
inline void ThemeReplacePresetCommandArchive::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  index_ = value;
}
inline void ThemeReplacePresetCommandArchive::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TSS.ThemeReplacePresetCommandArchive.index)
}

// -------------------------------------------------------------------

// ThemeReplaceColorPresetCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ThemeReplaceColorPresetCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ThemeReplaceColorPresetCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ThemeReplaceColorPresetCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ThemeReplaceColorPresetCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeReplaceColorPresetCommandArchive.super)
  return _internal_super();
}
inline void ThemeReplaceColorPresetCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeReplaceColorPresetCommandArchive.super)
}
inline ::TSK::CommandArchive* ThemeReplaceColorPresetCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ThemeReplaceColorPresetCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSS.ThemeReplaceColorPresetCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ThemeReplaceColorPresetCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ThemeReplaceColorPresetCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeReplaceColorPresetCommandArchive.super)
  return _internal_mutable_super();
}
inline void ThemeReplaceColorPresetCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeReplaceColorPresetCommandArchive.super)
}

// required .TSP.Reference theme = 2;
inline bool ThemeReplaceColorPresetCommandArchive::_internal_has_theme() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || theme_ != nullptr);
  return value;
}
inline bool ThemeReplaceColorPresetCommandArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& ThemeReplaceColorPresetCommandArchive::_internal_theme() const {
  const ::TSP::Reference* p = theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ThemeReplaceColorPresetCommandArchive::theme() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeReplaceColorPresetCommandArchive.theme)
  return _internal_theme();
}
inline void ThemeReplaceColorPresetCommandArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  theme_ = theme;
  if (theme) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeReplaceColorPresetCommandArchive.theme)
}
inline ::TSP::Reference* ThemeReplaceColorPresetCommandArchive::release_theme() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ThemeReplaceColorPresetCommandArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:TSS.ThemeReplaceColorPresetCommandArchive.theme)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ThemeReplaceColorPresetCommandArchive::_internal_mutable_theme() {
  _has_bits_[0] |= 0x00000002u;
  if (theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    theme_ = p;
  }
  return theme_;
}
inline ::TSP::Reference* ThemeReplaceColorPresetCommandArchive::mutable_theme() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeReplaceColorPresetCommandArchive.theme)
  return _internal_mutable_theme();
}
inline void ThemeReplaceColorPresetCommandArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme)->GetArena();
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeReplaceColorPresetCommandArchive.theme)
}

// required .TSP.Color color = 3;
inline bool ThemeReplaceColorPresetCommandArchive::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || color_ != nullptr);
  return value;
}
inline bool ThemeReplaceColorPresetCommandArchive::has_color() const {
  return _internal_has_color();
}
inline const ::TSP::Color& ThemeReplaceColorPresetCommandArchive::_internal_color() const {
  const ::TSP::Color* p = color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& ThemeReplaceColorPresetCommandArchive::color() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeReplaceColorPresetCommandArchive.color)
  return _internal_color();
}
inline void ThemeReplaceColorPresetCommandArchive::unsafe_arena_set_allocated_color(
    ::TSP::Color* color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeReplaceColorPresetCommandArchive.color)
}
inline ::TSP::Color* ThemeReplaceColorPresetCommandArchive::release_color() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Color* temp = color_;
  color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Color* ThemeReplaceColorPresetCommandArchive::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:TSS.ThemeReplaceColorPresetCommandArchive.color)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::TSP::Color* ThemeReplaceColorPresetCommandArchive::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000004u;
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArena());
    color_ = p;
  }
  return color_;
}
inline ::TSP::Color* ThemeReplaceColorPresetCommandArchive::mutable_color() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeReplaceColorPresetCommandArchive.color)
  return _internal_mutable_color();
}
inline void ThemeReplaceColorPresetCommandArchive::set_allocated_color(::TSP::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color)->GetArena();
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeReplaceColorPresetCommandArchive.color)
}

// required .TSP.Color old_color = 4;
inline bool ThemeReplaceColorPresetCommandArchive::_internal_has_old_color() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || old_color_ != nullptr);
  return value;
}
inline bool ThemeReplaceColorPresetCommandArchive::has_old_color() const {
  return _internal_has_old_color();
}
inline const ::TSP::Color& ThemeReplaceColorPresetCommandArchive::_internal_old_color() const {
  const ::TSP::Color* p = old_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& ThemeReplaceColorPresetCommandArchive::old_color() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeReplaceColorPresetCommandArchive.old_color)
  return _internal_old_color();
}
inline void ThemeReplaceColorPresetCommandArchive::unsafe_arena_set_allocated_old_color(
    ::TSP::Color* old_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_color_);
  }
  old_color_ = old_color;
  if (old_color) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeReplaceColorPresetCommandArchive.old_color)
}
inline ::TSP::Color* ThemeReplaceColorPresetCommandArchive::release_old_color() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Color* temp = old_color_;
  old_color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Color* ThemeReplaceColorPresetCommandArchive::unsafe_arena_release_old_color() {
  // @@protoc_insertion_point(field_release:TSS.ThemeReplaceColorPresetCommandArchive.old_color)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Color* temp = old_color_;
  old_color_ = nullptr;
  return temp;
}
inline ::TSP::Color* ThemeReplaceColorPresetCommandArchive::_internal_mutable_old_color() {
  _has_bits_[0] |= 0x00000008u;
  if (old_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArena());
    old_color_ = p;
  }
  return old_color_;
}
inline ::TSP::Color* ThemeReplaceColorPresetCommandArchive::mutable_old_color() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeReplaceColorPresetCommandArchive.old_color)
  return _internal_mutable_old_color();
}
inline void ThemeReplaceColorPresetCommandArchive::set_allocated_old_color(::TSP::Color* old_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_color_);
  }
  if (old_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_color)->GetArena();
    if (message_arena != submessage_arena) {
      old_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  old_color_ = old_color;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeReplaceColorPresetCommandArchive.old_color)
}

// required uint32 index = 5;
inline bool ThemeReplaceColorPresetCommandArchive::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ThemeReplaceColorPresetCommandArchive::has_index() const {
  return _internal_has_index();
}
inline void ThemeReplaceColorPresetCommandArchive::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ThemeReplaceColorPresetCommandArchive::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ThemeReplaceColorPresetCommandArchive::index() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeReplaceColorPresetCommandArchive.index)
  return _internal_index();
}
inline void ThemeReplaceColorPresetCommandArchive::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  index_ = value;
}
inline void ThemeReplaceColorPresetCommandArchive::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TSS.ThemeReplaceColorPresetCommandArchive.index)
}

// -------------------------------------------------------------------

// ThemeAddStylePresetCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ThemeAddStylePresetCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ThemeAddStylePresetCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ThemeAddStylePresetCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ThemeAddStylePresetCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeAddStylePresetCommandArchive.super)
  return _internal_super();
}
inline void ThemeAddStylePresetCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeAddStylePresetCommandArchive.super)
}
inline ::TSK::CommandArchive* ThemeAddStylePresetCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ThemeAddStylePresetCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSS.ThemeAddStylePresetCommandArchive.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ThemeAddStylePresetCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ThemeAddStylePresetCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeAddStylePresetCommandArchive.super)
  return _internal_mutable_super();
}
inline void ThemeAddStylePresetCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeAddStylePresetCommandArchive.super)
}

// required .TSP.Reference theme = 2;
inline bool ThemeAddStylePresetCommandArchive::_internal_has_theme() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || theme_ != nullptr);
  return value;
}
inline bool ThemeAddStylePresetCommandArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& ThemeAddStylePresetCommandArchive::_internal_theme() const {
  const ::TSP::Reference* p = theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ThemeAddStylePresetCommandArchive::theme() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeAddStylePresetCommandArchive.theme)
  return _internal_theme();
}
inline void ThemeAddStylePresetCommandArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  theme_ = theme;
  if (theme) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeAddStylePresetCommandArchive.theme)
}
inline ::TSP::Reference* ThemeAddStylePresetCommandArchive::release_theme() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ThemeAddStylePresetCommandArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:TSS.ThemeAddStylePresetCommandArchive.theme)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ThemeAddStylePresetCommandArchive::_internal_mutable_theme() {
  _has_bits_[0] |= 0x00000008u;
  if (theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    theme_ = p;
  }
  return theme_;
}
inline ::TSP::Reference* ThemeAddStylePresetCommandArchive::mutable_theme() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeAddStylePresetCommandArchive.theme)
  return _internal_mutable_theme();
}
inline void ThemeAddStylePresetCommandArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme)->GetArena();
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeAddStylePresetCommandArchive.theme)
}

// required .TSP.Reference preset = 3;
inline bool ThemeAddStylePresetCommandArchive::_internal_has_preset() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || preset_ != nullptr);
  return value;
}
inline bool ThemeAddStylePresetCommandArchive::has_preset() const {
  return _internal_has_preset();
}
inline const ::TSP::Reference& ThemeAddStylePresetCommandArchive::_internal_preset() const {
  const ::TSP::Reference* p = preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ThemeAddStylePresetCommandArchive::preset() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeAddStylePresetCommandArchive.preset)
  return _internal_preset();
}
inline void ThemeAddStylePresetCommandArchive::unsafe_arena_set_allocated_preset(
    ::TSP::Reference* preset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_);
  }
  preset_ = preset;
  if (preset) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeAddStylePresetCommandArchive.preset)
}
inline ::TSP::Reference* ThemeAddStylePresetCommandArchive::release_preset() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = preset_;
  preset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ThemeAddStylePresetCommandArchive::unsafe_arena_release_preset() {
  // @@protoc_insertion_point(field_release:TSS.ThemeAddStylePresetCommandArchive.preset)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = preset_;
  preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ThemeAddStylePresetCommandArchive::_internal_mutable_preset() {
  _has_bits_[0] |= 0x00000010u;
  if (preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    preset_ = p;
  }
  return preset_;
}
inline ::TSP::Reference* ThemeAddStylePresetCommandArchive::mutable_preset() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeAddStylePresetCommandArchive.preset)
  return _internal_mutable_preset();
}
inline void ThemeAddStylePresetCommandArchive::set_allocated_preset(::TSP::Reference* preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_);
  }
  if (preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset)->GetArena();
    if (message_arena != submessage_arena) {
      preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  preset_ = preset;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeAddStylePresetCommandArchive.preset)
}

// required string preset_kind = 4;
inline bool ThemeAddStylePresetCommandArchive::_internal_has_preset_kind() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ThemeAddStylePresetCommandArchive::has_preset_kind() const {
  return _internal_has_preset_kind();
}
inline void ThemeAddStylePresetCommandArchive::clear_preset_kind() {
  preset_kind_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ThemeAddStylePresetCommandArchive::preset_kind() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeAddStylePresetCommandArchive.preset_kind)
  return _internal_preset_kind();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ThemeAddStylePresetCommandArchive::set_preset_kind(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 preset_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSS.ThemeAddStylePresetCommandArchive.preset_kind)
}
inline std::string* ThemeAddStylePresetCommandArchive::mutable_preset_kind() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeAddStylePresetCommandArchive.preset_kind)
  return _internal_mutable_preset_kind();
}
inline const std::string& ThemeAddStylePresetCommandArchive::_internal_preset_kind() const {
  return preset_kind_.Get();
}
inline void ThemeAddStylePresetCommandArchive::_internal_set_preset_kind(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  preset_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ThemeAddStylePresetCommandArchive::_internal_mutable_preset_kind() {
  _has_bits_[0] |= 0x00000001u;
  return preset_kind_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ThemeAddStylePresetCommandArchive::release_preset_kind() {
  // @@protoc_insertion_point(field_release:TSS.ThemeAddStylePresetCommandArchive.preset_kind)
  if (!_internal_has_preset_kind()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return preset_kind_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ThemeAddStylePresetCommandArchive::set_allocated_preset_kind(std::string* preset_kind) {
  if (preset_kind != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preset_kind_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preset_kind,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeAddStylePresetCommandArchive.preset_kind)
}

// optional string identifier = 5;
inline bool ThemeAddStylePresetCommandArchive::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ThemeAddStylePresetCommandArchive::has_identifier() const {
  return _internal_has_identifier();
}
inline void ThemeAddStylePresetCommandArchive::clear_identifier() {
  identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ThemeAddStylePresetCommandArchive::identifier() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeAddStylePresetCommandArchive.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ThemeAddStylePresetCommandArchive::set_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSS.ThemeAddStylePresetCommandArchive.identifier)
}
inline std::string* ThemeAddStylePresetCommandArchive::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeAddStylePresetCommandArchive.identifier)
  return _internal_mutable_identifier();
}
inline const std::string& ThemeAddStylePresetCommandArchive::_internal_identifier() const {
  return identifier_.Get();
}
inline void ThemeAddStylePresetCommandArchive::_internal_set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ThemeAddStylePresetCommandArchive::_internal_mutable_identifier() {
  _has_bits_[0] |= 0x00000002u;
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ThemeAddStylePresetCommandArchive::release_identifier() {
  // @@protoc_insertion_point(field_release:TSS.ThemeAddStylePresetCommandArchive.identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ThemeAddStylePresetCommandArchive::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeAddStylePresetCommandArchive.identifier)
}

// optional bool add_preset_to_stylesheet = 6;
inline bool ThemeAddStylePresetCommandArchive::_internal_has_add_preset_to_stylesheet() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ThemeAddStylePresetCommandArchive::has_add_preset_to_stylesheet() const {
  return _internal_has_add_preset_to_stylesheet();
}
inline void ThemeAddStylePresetCommandArchive::clear_add_preset_to_stylesheet() {
  add_preset_to_stylesheet_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ThemeAddStylePresetCommandArchive::_internal_add_preset_to_stylesheet() const {
  return add_preset_to_stylesheet_;
}
inline bool ThemeAddStylePresetCommandArchive::add_preset_to_stylesheet() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeAddStylePresetCommandArchive.add_preset_to_stylesheet)
  return _internal_add_preset_to_stylesheet();
}
inline void ThemeAddStylePresetCommandArchive::_internal_set_add_preset_to_stylesheet(bool value) {
  _has_bits_[0] |= 0x00000020u;
  add_preset_to_stylesheet_ = value;
}
inline void ThemeAddStylePresetCommandArchive::set_add_preset_to_stylesheet(bool value) {
  _internal_set_add_preset_to_stylesheet(value);
  // @@protoc_insertion_point(field_set:TSS.ThemeAddStylePresetCommandArchive.add_preset_to_stylesheet)
}

// -------------------------------------------------------------------

// ThemeRemoveStylePresetCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ThemeRemoveStylePresetCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ThemeRemoveStylePresetCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ThemeRemoveStylePresetCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ThemeRemoveStylePresetCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeRemoveStylePresetCommandArchive.super)
  return _internal_super();
}
inline void ThemeRemoveStylePresetCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeRemoveStylePresetCommandArchive.super)
}
inline ::TSK::CommandArchive* ThemeRemoveStylePresetCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ThemeRemoveStylePresetCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSS.ThemeRemoveStylePresetCommandArchive.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ThemeRemoveStylePresetCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ThemeRemoveStylePresetCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeRemoveStylePresetCommandArchive.super)
  return _internal_mutable_super();
}
inline void ThemeRemoveStylePresetCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeRemoveStylePresetCommandArchive.super)
}

// required .TSP.Reference theme = 2;
inline bool ThemeRemoveStylePresetCommandArchive::_internal_has_theme() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || theme_ != nullptr);
  return value;
}
inline bool ThemeRemoveStylePresetCommandArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& ThemeRemoveStylePresetCommandArchive::_internal_theme() const {
  const ::TSP::Reference* p = theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ThemeRemoveStylePresetCommandArchive::theme() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeRemoveStylePresetCommandArchive.theme)
  return _internal_theme();
}
inline void ThemeRemoveStylePresetCommandArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  theme_ = theme;
  if (theme) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeRemoveStylePresetCommandArchive.theme)
}
inline ::TSP::Reference* ThemeRemoveStylePresetCommandArchive::release_theme() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ThemeRemoveStylePresetCommandArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:TSS.ThemeRemoveStylePresetCommandArchive.theme)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ThemeRemoveStylePresetCommandArchive::_internal_mutable_theme() {
  _has_bits_[0] |= 0x00000008u;
  if (theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    theme_ = p;
  }
  return theme_;
}
inline ::TSP::Reference* ThemeRemoveStylePresetCommandArchive::mutable_theme() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeRemoveStylePresetCommandArchive.theme)
  return _internal_mutable_theme();
}
inline void ThemeRemoveStylePresetCommandArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme)->GetArena();
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeRemoveStylePresetCommandArchive.theme)
}

// required .TSP.Reference preset = 3;
inline bool ThemeRemoveStylePresetCommandArchive::_internal_has_preset() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || preset_ != nullptr);
  return value;
}
inline bool ThemeRemoveStylePresetCommandArchive::has_preset() const {
  return _internal_has_preset();
}
inline const ::TSP::Reference& ThemeRemoveStylePresetCommandArchive::_internal_preset() const {
  const ::TSP::Reference* p = preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ThemeRemoveStylePresetCommandArchive::preset() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeRemoveStylePresetCommandArchive.preset)
  return _internal_preset();
}
inline void ThemeRemoveStylePresetCommandArchive::unsafe_arena_set_allocated_preset(
    ::TSP::Reference* preset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_);
  }
  preset_ = preset;
  if (preset) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeRemoveStylePresetCommandArchive.preset)
}
inline ::TSP::Reference* ThemeRemoveStylePresetCommandArchive::release_preset() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = preset_;
  preset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ThemeRemoveStylePresetCommandArchive::unsafe_arena_release_preset() {
  // @@protoc_insertion_point(field_release:TSS.ThemeRemoveStylePresetCommandArchive.preset)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = preset_;
  preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ThemeRemoveStylePresetCommandArchive::_internal_mutable_preset() {
  _has_bits_[0] |= 0x00000010u;
  if (preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    preset_ = p;
  }
  return preset_;
}
inline ::TSP::Reference* ThemeRemoveStylePresetCommandArchive::mutable_preset() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeRemoveStylePresetCommandArchive.preset)
  return _internal_mutable_preset();
}
inline void ThemeRemoveStylePresetCommandArchive::set_allocated_preset(::TSP::Reference* preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_);
  }
  if (preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset)->GetArena();
    if (message_arena != submessage_arena) {
      preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  preset_ = preset;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeRemoveStylePresetCommandArchive.preset)
}

// required uint32 preset_index = 4;
inline bool ThemeRemoveStylePresetCommandArchive::_internal_has_preset_index() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ThemeRemoveStylePresetCommandArchive::has_preset_index() const {
  return _internal_has_preset_index();
}
inline void ThemeRemoveStylePresetCommandArchive::clear_preset_index() {
  preset_index_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ThemeRemoveStylePresetCommandArchive::_internal_preset_index() const {
  return preset_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ThemeRemoveStylePresetCommandArchive::preset_index() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeRemoveStylePresetCommandArchive.preset_index)
  return _internal_preset_index();
}
inline void ThemeRemoveStylePresetCommandArchive::_internal_set_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  preset_index_ = value;
}
inline void ThemeRemoveStylePresetCommandArchive::set_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_preset_index(value);
  // @@protoc_insertion_point(field_set:TSS.ThemeRemoveStylePresetCommandArchive.preset_index)
}

// required string preset_kind = 5;
inline bool ThemeRemoveStylePresetCommandArchive::_internal_has_preset_kind() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ThemeRemoveStylePresetCommandArchive::has_preset_kind() const {
  return _internal_has_preset_kind();
}
inline void ThemeRemoveStylePresetCommandArchive::clear_preset_kind() {
  preset_kind_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ThemeRemoveStylePresetCommandArchive::preset_kind() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeRemoveStylePresetCommandArchive.preset_kind)
  return _internal_preset_kind();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ThemeRemoveStylePresetCommandArchive::set_preset_kind(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 preset_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSS.ThemeRemoveStylePresetCommandArchive.preset_kind)
}
inline std::string* ThemeRemoveStylePresetCommandArchive::mutable_preset_kind() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeRemoveStylePresetCommandArchive.preset_kind)
  return _internal_mutable_preset_kind();
}
inline const std::string& ThemeRemoveStylePresetCommandArchive::_internal_preset_kind() const {
  return preset_kind_.Get();
}
inline void ThemeRemoveStylePresetCommandArchive::_internal_set_preset_kind(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  preset_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ThemeRemoveStylePresetCommandArchive::_internal_mutable_preset_kind() {
  _has_bits_[0] |= 0x00000001u;
  return preset_kind_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ThemeRemoveStylePresetCommandArchive::release_preset_kind() {
  // @@protoc_insertion_point(field_release:TSS.ThemeRemoveStylePresetCommandArchive.preset_kind)
  if (!_internal_has_preset_kind()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return preset_kind_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ThemeRemoveStylePresetCommandArchive::set_allocated_preset_kind(std::string* preset_kind) {
  if (preset_kind != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preset_kind_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preset_kind,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeRemoveStylePresetCommandArchive.preset_kind)
}

// optional string identifier = 6;
inline bool ThemeRemoveStylePresetCommandArchive::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ThemeRemoveStylePresetCommandArchive::has_identifier() const {
  return _internal_has_identifier();
}
inline void ThemeRemoveStylePresetCommandArchive::clear_identifier() {
  identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ThemeRemoveStylePresetCommandArchive::identifier() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeRemoveStylePresetCommandArchive.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ThemeRemoveStylePresetCommandArchive::set_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSS.ThemeRemoveStylePresetCommandArchive.identifier)
}
inline std::string* ThemeRemoveStylePresetCommandArchive::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeRemoveStylePresetCommandArchive.identifier)
  return _internal_mutable_identifier();
}
inline const std::string& ThemeRemoveStylePresetCommandArchive::_internal_identifier() const {
  return identifier_.Get();
}
inline void ThemeRemoveStylePresetCommandArchive::_internal_set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ThemeRemoveStylePresetCommandArchive::_internal_mutable_identifier() {
  _has_bits_[0] |= 0x00000002u;
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ThemeRemoveStylePresetCommandArchive::release_identifier() {
  // @@protoc_insertion_point(field_release:TSS.ThemeRemoveStylePresetCommandArchive.identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ThemeRemoveStylePresetCommandArchive::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeRemoveStylePresetCommandArchive.identifier)
}

// optional .TSP.Reference replacement_preset = 7;
inline bool ThemeRemoveStylePresetCommandArchive::_internal_has_replacement_preset() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || replacement_preset_ != nullptr);
  return value;
}
inline bool ThemeRemoveStylePresetCommandArchive::has_replacement_preset() const {
  return _internal_has_replacement_preset();
}
inline const ::TSP::Reference& ThemeRemoveStylePresetCommandArchive::_internal_replacement_preset() const {
  const ::TSP::Reference* p = replacement_preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ThemeRemoveStylePresetCommandArchive::replacement_preset() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeRemoveStylePresetCommandArchive.replacement_preset)
  return _internal_replacement_preset();
}
inline void ThemeRemoveStylePresetCommandArchive::unsafe_arena_set_allocated_replacement_preset(
    ::TSP::Reference* replacement_preset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_preset_);
  }
  replacement_preset_ = replacement_preset;
  if (replacement_preset) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeRemoveStylePresetCommandArchive.replacement_preset)
}
inline ::TSP::Reference* ThemeRemoveStylePresetCommandArchive::release_replacement_preset() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = replacement_preset_;
  replacement_preset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ThemeRemoveStylePresetCommandArchive::unsafe_arena_release_replacement_preset() {
  // @@protoc_insertion_point(field_release:TSS.ThemeRemoveStylePresetCommandArchive.replacement_preset)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = replacement_preset_;
  replacement_preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ThemeRemoveStylePresetCommandArchive::_internal_mutable_replacement_preset() {
  _has_bits_[0] |= 0x00000020u;
  if (replacement_preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    replacement_preset_ = p;
  }
  return replacement_preset_;
}
inline ::TSP::Reference* ThemeRemoveStylePresetCommandArchive::mutable_replacement_preset() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeRemoveStylePresetCommandArchive.replacement_preset)
  return _internal_mutable_replacement_preset();
}
inline void ThemeRemoveStylePresetCommandArchive::set_allocated_replacement_preset(::TSP::Reference* replacement_preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_preset_);
  }
  if (replacement_preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_preset)->GetArena();
    if (message_arena != submessage_arena) {
      replacement_preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replacement_preset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  replacement_preset_ = replacement_preset;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeRemoveStylePresetCommandArchive.replacement_preset)
}

// -------------------------------------------------------------------

// ThemeMovePresetCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ThemeMovePresetCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ThemeMovePresetCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ThemeMovePresetCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ThemeMovePresetCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeMovePresetCommandArchive.super)
  return _internal_super();
}
inline void ThemeMovePresetCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeMovePresetCommandArchive.super)
}
inline ::TSK::CommandArchive* ThemeMovePresetCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ThemeMovePresetCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSS.ThemeMovePresetCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ThemeMovePresetCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ThemeMovePresetCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeMovePresetCommandArchive.super)
  return _internal_mutable_super();
}
inline void ThemeMovePresetCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeMovePresetCommandArchive.super)
}

// required .TSP.Reference theme = 2;
inline bool ThemeMovePresetCommandArchive::_internal_has_theme() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || theme_ != nullptr);
  return value;
}
inline bool ThemeMovePresetCommandArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& ThemeMovePresetCommandArchive::_internal_theme() const {
  const ::TSP::Reference* p = theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ThemeMovePresetCommandArchive::theme() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeMovePresetCommandArchive.theme)
  return _internal_theme();
}
inline void ThemeMovePresetCommandArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  theme_ = theme;
  if (theme) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeMovePresetCommandArchive.theme)
}
inline ::TSP::Reference* ThemeMovePresetCommandArchive::release_theme() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ThemeMovePresetCommandArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:TSS.ThemeMovePresetCommandArchive.theme)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = theme_;
  theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ThemeMovePresetCommandArchive::_internal_mutable_theme() {
  _has_bits_[0] |= 0x00000002u;
  if (theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    theme_ = p;
  }
  return theme_;
}
inline ::TSP::Reference* ThemeMovePresetCommandArchive::mutable_theme() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeMovePresetCommandArchive.theme)
  return _internal_mutable_theme();
}
inline void ThemeMovePresetCommandArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme)->GetArena();
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeMovePresetCommandArchive.theme)
}

// required .TSP.UUID preset_id = 3;
inline bool ThemeMovePresetCommandArchive::_internal_has_preset_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || preset_id_ != nullptr);
  return value;
}
inline bool ThemeMovePresetCommandArchive::has_preset_id() const {
  return _internal_has_preset_id();
}
inline const ::TSP::UUID& ThemeMovePresetCommandArchive::_internal_preset_id() const {
  const ::TSP::UUID* p = preset_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& ThemeMovePresetCommandArchive::preset_id() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeMovePresetCommandArchive.preset_id)
  return _internal_preset_id();
}
inline void ThemeMovePresetCommandArchive::unsafe_arena_set_allocated_preset_id(
    ::TSP::UUID* preset_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_id_);
  }
  preset_id_ = preset_id;
  if (preset_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeMovePresetCommandArchive.preset_id)
}
inline ::TSP::UUID* ThemeMovePresetCommandArchive::release_preset_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = preset_id_;
  preset_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* ThemeMovePresetCommandArchive::unsafe_arena_release_preset_id() {
  // @@protoc_insertion_point(field_release:TSS.ThemeMovePresetCommandArchive.preset_id)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = preset_id_;
  preset_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* ThemeMovePresetCommandArchive::_internal_mutable_preset_id() {
  _has_bits_[0] |= 0x00000004u;
  if (preset_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    preset_id_ = p;
  }
  return preset_id_;
}
inline ::TSP::UUID* ThemeMovePresetCommandArchive::mutable_preset_id() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeMovePresetCommandArchive.preset_id)
  return _internal_mutable_preset_id();
}
inline void ThemeMovePresetCommandArchive::set_allocated_preset_id(::TSP::UUID* preset_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_id_);
  }
  if (preset_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_id)->GetArena();
    if (message_arena != submessage_arena) {
      preset_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preset_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  preset_id_ = preset_id;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeMovePresetCommandArchive.preset_id)
}

// required uint32 new_index = 4;
inline bool ThemeMovePresetCommandArchive::_internal_has_new_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ThemeMovePresetCommandArchive::has_new_index() const {
  return _internal_has_new_index();
}
inline void ThemeMovePresetCommandArchive::clear_new_index() {
  new_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ThemeMovePresetCommandArchive::_internal_new_index() const {
  return new_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ThemeMovePresetCommandArchive::new_index() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeMovePresetCommandArchive.new_index)
  return _internal_new_index();
}
inline void ThemeMovePresetCommandArchive::_internal_set_new_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  new_index_ = value;
}
inline void ThemeMovePresetCommandArchive::set_new_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_new_index(value);
  // @@protoc_insertion_point(field_set:TSS.ThemeMovePresetCommandArchive.new_index)
}

// required uint32 old_index = 5;
inline bool ThemeMovePresetCommandArchive::_internal_has_old_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ThemeMovePresetCommandArchive::has_old_index() const {
  return _internal_has_old_index();
}
inline void ThemeMovePresetCommandArchive::clear_old_index() {
  old_index_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ThemeMovePresetCommandArchive::_internal_old_index() const {
  return old_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ThemeMovePresetCommandArchive::old_index() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeMovePresetCommandArchive.old_index)
  return _internal_old_index();
}
inline void ThemeMovePresetCommandArchive::_internal_set_old_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  old_index_ = value;
}
inline void ThemeMovePresetCommandArchive::set_old_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_old_index(value);
  // @@protoc_insertion_point(field_set:TSS.ThemeMovePresetCommandArchive.old_index)
}

// -------------------------------------------------------------------

// ThemeReplaceStylePresetAndDisconnectStylesCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive.super)
  return _internal_super();
}
inline void ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive.super)
}
inline ::TSK::CommandArchive* ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive.super)
  return _internal_mutable_super();
}
inline void ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive.super)
}

// required .TSP.Reference preset = 2;
inline bool ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::_internal_has_preset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || preset_ != nullptr);
  return value;
}
inline bool ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::has_preset() const {
  return _internal_has_preset();
}
inline const ::TSP::Reference& ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::_internal_preset() const {
  const ::TSP::Reference* p = preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::preset() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive.preset)
  return _internal_preset();
}
inline void ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::unsafe_arena_set_allocated_preset(
    ::TSP::Reference* preset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_);
  }
  preset_ = preset;
  if (preset) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive.preset)
}
inline ::TSP::Reference* ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::release_preset() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = preset_;
  preset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::unsafe_arena_release_preset() {
  // @@protoc_insertion_point(field_release:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive.preset)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = preset_;
  preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::_internal_mutable_preset() {
  _has_bits_[0] |= 0x00000002u;
  if (preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    preset_ = p;
  }
  return preset_;
}
inline ::TSP::Reference* ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::mutable_preset() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive.preset)
  return _internal_mutable_preset();
}
inline void ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::set_allocated_preset(::TSP::Reference* preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_);
  }
  if (preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset)->GetArena();
    if (message_arena != submessage_arena) {
      preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  preset_ = preset;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive.preset)
}

// required .TSP.Reference replacement_preset = 3;
inline bool ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::_internal_has_replacement_preset() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || replacement_preset_ != nullptr);
  return value;
}
inline bool ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::has_replacement_preset() const {
  return _internal_has_replacement_preset();
}
inline const ::TSP::Reference& ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::_internal_replacement_preset() const {
  const ::TSP::Reference* p = replacement_preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::replacement_preset() const {
  // @@protoc_insertion_point(field_get:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive.replacement_preset)
  return _internal_replacement_preset();
}
inline void ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::unsafe_arena_set_allocated_replacement_preset(
    ::TSP::Reference* replacement_preset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_preset_);
  }
  replacement_preset_ = replacement_preset;
  if (replacement_preset) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive.replacement_preset)
}
inline ::TSP::Reference* ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::release_replacement_preset() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = replacement_preset_;
  replacement_preset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::unsafe_arena_release_replacement_preset() {
  // @@protoc_insertion_point(field_release:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive.replacement_preset)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = replacement_preset_;
  replacement_preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::_internal_mutable_replacement_preset() {
  _has_bits_[0] |= 0x00000004u;
  if (replacement_preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    replacement_preset_ = p;
  }
  return replacement_preset_;
}
inline ::TSP::Reference* ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::mutable_replacement_preset() {
  // @@protoc_insertion_point(field_mutable:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive.replacement_preset)
  return _internal_mutable_replacement_preset();
}
inline void ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::set_allocated_replacement_preset(::TSP::Reference* replacement_preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_preset_);
  }
  if (replacement_preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_preset)->GetArena();
    if (message_arena != submessage_arena) {
      replacement_preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replacement_preset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  replacement_preset_ = replacement_preset;
  // @@protoc_insertion_point(field_set_allocated:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive.replacement_preset)
}

// -------------------------------------------------------------------

// CommandPropertyEntryArchive

// required uint32 property = 1;
inline bool CommandPropertyEntryArchive::_internal_has_property() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandPropertyEntryArchive::has_property() const {
  return _internal_has_property();
}
inline void CommandPropertyEntryArchive::clear_property() {
  property_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandPropertyEntryArchive::_internal_property() const {
  return property_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandPropertyEntryArchive::property() const {
  // @@protoc_insertion_point(field_get:TSS.CommandPropertyEntryArchive.property)
  return _internal_property();
}
inline void CommandPropertyEntryArchive::_internal_set_property(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  property_ = value;
}
inline void CommandPropertyEntryArchive::set_property(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_property(value);
  // @@protoc_insertion_point(field_set:TSS.CommandPropertyEntryArchive.property)
}

// required int32 type = 2;
inline bool CommandPropertyEntryArchive::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandPropertyEntryArchive::has_type() const {
  return _internal_has_type();
}
inline void CommandPropertyEntryArchive::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandPropertyEntryArchive::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandPropertyEntryArchive::type() const {
  // @@protoc_insertion_point(field_get:TSS.CommandPropertyEntryArchive.type)
  return _internal_type();
}
inline void CommandPropertyEntryArchive::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void CommandPropertyEntryArchive::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TSS.CommandPropertyEntryArchive.type)
}

// optional int32 integer_value = 3;
inline bool CommandPropertyEntryArchive::_internal_has_integer_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandPropertyEntryArchive::has_integer_value() const {
  return _internal_has_integer_value();
}
inline void CommandPropertyEntryArchive::clear_integer_value() {
  integer_value_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandPropertyEntryArchive::_internal_integer_value() const {
  return integer_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandPropertyEntryArchive::integer_value() const {
  // @@protoc_insertion_point(field_get:TSS.CommandPropertyEntryArchive.integer_value)
  return _internal_integer_value();
}
inline void CommandPropertyEntryArchive::_internal_set_integer_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  integer_value_ = value;
}
inline void CommandPropertyEntryArchive::set_integer_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_integer_value(value);
  // @@protoc_insertion_point(field_set:TSS.CommandPropertyEntryArchive.integer_value)
}

// optional float float_value = 4;
inline bool CommandPropertyEntryArchive::_internal_has_float_value() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandPropertyEntryArchive::has_float_value() const {
  return _internal_has_float_value();
}
inline void CommandPropertyEntryArchive::clear_float_value() {
  float_value_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float CommandPropertyEntryArchive::_internal_float_value() const {
  return float_value_;
}
inline float CommandPropertyEntryArchive::float_value() const {
  // @@protoc_insertion_point(field_get:TSS.CommandPropertyEntryArchive.float_value)
  return _internal_float_value();
}
inline void CommandPropertyEntryArchive::_internal_set_float_value(float value) {
  _has_bits_[0] |= 0x00000020u;
  float_value_ = value;
}
inline void CommandPropertyEntryArchive::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:TSS.CommandPropertyEntryArchive.float_value)
}

// optional double double_value = 5;
inline bool CommandPropertyEntryArchive::_internal_has_double_value() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandPropertyEntryArchive::has_double_value() const {
  return _internal_has_double_value();
}
inline void CommandPropertyEntryArchive::clear_double_value() {
  double_value_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double CommandPropertyEntryArchive::_internal_double_value() const {
  return double_value_;
}
inline double CommandPropertyEntryArchive::double_value() const {
  // @@protoc_insertion_point(field_get:TSS.CommandPropertyEntryArchive.double_value)
  return _internal_double_value();
}
inline void CommandPropertyEntryArchive::_internal_set_double_value(double value) {
  _has_bits_[0] |= 0x00000040u;
  double_value_ = value;
}
inline void CommandPropertyEntryArchive::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:TSS.CommandPropertyEntryArchive.double_value)
}

// optional string string_value = 6;
inline bool CommandPropertyEntryArchive::_internal_has_string_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandPropertyEntryArchive::has_string_value() const {
  return _internal_has_string_value();
}
inline void CommandPropertyEntryArchive::clear_string_value() {
  string_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandPropertyEntryArchive::string_value() const {
  // @@protoc_insertion_point(field_get:TSS.CommandPropertyEntryArchive.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CommandPropertyEntryArchive::set_string_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSS.CommandPropertyEntryArchive.string_value)
}
inline std::string* CommandPropertyEntryArchive::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:TSS.CommandPropertyEntryArchive.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& CommandPropertyEntryArchive::_internal_string_value() const {
  return string_value_.Get();
}
inline void CommandPropertyEntryArchive::_internal_set_string_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CommandPropertyEntryArchive::_internal_mutable_string_value() {
  _has_bits_[0] |= 0x00000001u;
  return string_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommandPropertyEntryArchive::release_string_value() {
  // @@protoc_insertion_point(field_release:TSS.CommandPropertyEntryArchive.string_value)
  if (!_internal_has_string_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandPropertyEntryArchive::set_allocated_string_value(std::string* string_value) {
  if (string_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSS.CommandPropertyEntryArchive.string_value)
}

// optional .TSP.Reference tsp_reference = 7;
inline bool CommandPropertyEntryArchive::_internal_has_tsp_reference() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tsp_reference_ != nullptr);
  return value;
}
inline bool CommandPropertyEntryArchive::has_tsp_reference() const {
  return _internal_has_tsp_reference();
}
inline const ::TSP::Reference& CommandPropertyEntryArchive::_internal_tsp_reference() const {
  const ::TSP::Reference* p = tsp_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandPropertyEntryArchive::tsp_reference() const {
  // @@protoc_insertion_point(field_get:TSS.CommandPropertyEntryArchive.tsp_reference)
  return _internal_tsp_reference();
}
inline void CommandPropertyEntryArchive::unsafe_arena_set_allocated_tsp_reference(
    ::TSP::Reference* tsp_reference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tsp_reference_);
  }
  tsp_reference_ = tsp_reference;
  if (tsp_reference) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSS.CommandPropertyEntryArchive.tsp_reference)
}
inline ::TSP::Reference* CommandPropertyEntryArchive::release_tsp_reference() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = tsp_reference_;
  tsp_reference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CommandPropertyEntryArchive::unsafe_arena_release_tsp_reference() {
  // @@protoc_insertion_point(field_release:TSS.CommandPropertyEntryArchive.tsp_reference)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = tsp_reference_;
  tsp_reference_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandPropertyEntryArchive::_internal_mutable_tsp_reference() {
  _has_bits_[0] |= 0x00000002u;
  if (tsp_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    tsp_reference_ = p;
  }
  return tsp_reference_;
}
inline ::TSP::Reference* CommandPropertyEntryArchive::mutable_tsp_reference() {
  // @@protoc_insertion_point(field_mutable:TSS.CommandPropertyEntryArchive.tsp_reference)
  return _internal_mutable_tsp_reference();
}
inline void CommandPropertyEntryArchive::set_allocated_tsp_reference(::TSP::Reference* tsp_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tsp_reference_);
  }
  if (tsp_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tsp_reference)->GetArena();
    if (message_arena != submessage_arena) {
      tsp_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tsp_reference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tsp_reference_ = tsp_reference;
  // @@protoc_insertion_point(field_set_allocated:TSS.CommandPropertyEntryArchive.tsp_reference)
}

// -------------------------------------------------------------------

// CommandPropertyMapArchive

// repeated .TSS.CommandPropertyEntryArchive property_entries = 1;
inline int CommandPropertyMapArchive::_internal_property_entries_size() const {
  return property_entries_.size();
}
inline int CommandPropertyMapArchive::property_entries_size() const {
  return _internal_property_entries_size();
}
inline void CommandPropertyMapArchive::clear_property_entries() {
  property_entries_.Clear();
}
inline ::TSS::CommandPropertyEntryArchive* CommandPropertyMapArchive::mutable_property_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSS.CommandPropertyMapArchive.property_entries)
  return property_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::CommandPropertyEntryArchive >*
CommandPropertyMapArchive::mutable_property_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSS.CommandPropertyMapArchive.property_entries)
  return &property_entries_;
}
inline const ::TSS::CommandPropertyEntryArchive& CommandPropertyMapArchive::_internal_property_entries(int index) const {
  return property_entries_.Get(index);
}
inline const ::TSS::CommandPropertyEntryArchive& CommandPropertyMapArchive::property_entries(int index) const {
  // @@protoc_insertion_point(field_get:TSS.CommandPropertyMapArchive.property_entries)
  return _internal_property_entries(index);
}
inline ::TSS::CommandPropertyEntryArchive* CommandPropertyMapArchive::_internal_add_property_entries() {
  return property_entries_.Add();
}
inline ::TSS::CommandPropertyEntryArchive* CommandPropertyMapArchive::add_property_entries() {
  // @@protoc_insertion_point(field_add:TSS.CommandPropertyMapArchive.property_entries)
  return _internal_add_property_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSS::CommandPropertyEntryArchive >&
CommandPropertyMapArchive::property_entries() const {
  // @@protoc_insertion_point(field_list:TSS.CommandPropertyMapArchive.property_entries)
  return property_entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSS

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TSS::ValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSS::ValueType>() {
  return ::TSS::ValueType_descriptor();
}
template <> struct is_proto_enum< ::TSS::PropertyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSS::PropertyType>() {
  return ::TSS::PropertyType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSSArchives_2eproto
