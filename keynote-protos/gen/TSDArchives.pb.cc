// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSDArchives.proto

#include "TSDArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TSD {
constexpr EdgeInsetsArchive::EdgeInsetsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : top_(0)
  , left_(0)
  , bottom_(0)
  , right_(0){}
struct EdgeInsetsArchiveDefaultTypeInternal {
  constexpr EdgeInsetsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EdgeInsetsArchiveDefaultTypeInternal() {}
  union {
    EdgeInsetsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EdgeInsetsArchiveDefaultTypeInternal _EdgeInsetsArchive_default_instance_;
constexpr GeometryArchive::GeometryArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , size_(nullptr)
  , flags_(0u)
  , angle_(0){}
struct GeometryArchiveDefaultTypeInternal {
  constexpr GeometryArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GeometryArchiveDefaultTypeInternal() {}
  union {
    GeometryArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GeometryArchiveDefaultTypeInternal _GeometryArchive_default_instance_;
constexpr PointPathSourceArchive::PointPathSourceArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : point_(nullptr)
  , naturalsize_(nullptr)
  , type_(0)
{}
struct PointPathSourceArchiveDefaultTypeInternal {
  constexpr PointPathSourceArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PointPathSourceArchiveDefaultTypeInternal() {}
  union {
    PointPathSourceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PointPathSourceArchiveDefaultTypeInternal _PointPathSourceArchive_default_instance_;
constexpr ScalarPathSourceArchive::ScalarPathSourceArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : naturalsize_(nullptr)
  , type_(0)

  , scalar_(0)
  , is_curve_continuous_(false){}
struct ScalarPathSourceArchiveDefaultTypeInternal {
  constexpr ScalarPathSourceArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScalarPathSourceArchiveDefaultTypeInternal() {}
  union {
    ScalarPathSourceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScalarPathSourceArchiveDefaultTypeInternal _ScalarPathSourceArchive_default_instance_;
constexpr BezierPathSourceArchive::BezierPathSourceArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , naturalsize_(nullptr)
  , path_(nullptr){}
struct BezierPathSourceArchiveDefaultTypeInternal {
  constexpr BezierPathSourceArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BezierPathSourceArchiveDefaultTypeInternal() {}
  union {
    BezierPathSourceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BezierPathSourceArchiveDefaultTypeInternal _BezierPathSourceArchive_default_instance_;
constexpr CalloutPathSourceArchive::CalloutPathSourceArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : natural_size_(nullptr)
  , tail_position_(nullptr)
  , tail_size_(0)
  , corner_radius_(0)
  , center_tail_(false){}
struct CalloutPathSourceArchiveDefaultTypeInternal {
  constexpr CalloutPathSourceArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CalloutPathSourceArchiveDefaultTypeInternal() {}
  union {
    CalloutPathSourceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CalloutPathSourceArchiveDefaultTypeInternal _CalloutPathSourceArchive_default_instance_;
constexpr ConnectionLinePathSourceArchive::ConnectionLinePathSourceArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , type_(0)

  , outset_from_(0)
  , outset_to_(0){}
struct ConnectionLinePathSourceArchiveDefaultTypeInternal {
  constexpr ConnectionLinePathSourceArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectionLinePathSourceArchiveDefaultTypeInternal() {}
  union {
    ConnectionLinePathSourceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectionLinePathSourceArchiveDefaultTypeInternal _ConnectionLinePathSourceArchive_default_instance_;
constexpr EditableBezierPathSourceArchive_Node::EditableBezierPathSourceArchive_Node(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : incontrolpoint_(nullptr)
  , nodepoint_(nullptr)
  , outcontrolpoint_(nullptr)
  , type_(1)
{}
struct EditableBezierPathSourceArchive_NodeDefaultTypeInternal {
  constexpr EditableBezierPathSourceArchive_NodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EditableBezierPathSourceArchive_NodeDefaultTypeInternal() {}
  union {
    EditableBezierPathSourceArchive_Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EditableBezierPathSourceArchive_NodeDefaultTypeInternal _EditableBezierPathSourceArchive_Node_default_instance_;
constexpr EditableBezierPathSourceArchive_Subpath::EditableBezierPathSourceArchive_Subpath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodes_()
  , closed_(false){}
struct EditableBezierPathSourceArchive_SubpathDefaultTypeInternal {
  constexpr EditableBezierPathSourceArchive_SubpathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EditableBezierPathSourceArchive_SubpathDefaultTypeInternal() {}
  union {
    EditableBezierPathSourceArchive_Subpath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EditableBezierPathSourceArchive_SubpathDefaultTypeInternal _EditableBezierPathSourceArchive_Subpath_default_instance_;
constexpr EditableBezierPathSourceArchive::EditableBezierPathSourceArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subpaths_()
  , naturalsize_(nullptr){}
struct EditableBezierPathSourceArchiveDefaultTypeInternal {
  constexpr EditableBezierPathSourceArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EditableBezierPathSourceArchiveDefaultTypeInternal() {}
  union {
    EditableBezierPathSourceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EditableBezierPathSourceArchiveDefaultTypeInternal _EditableBezierPathSourceArchive_default_instance_;
constexpr PathSourceArchive::PathSourceArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : localizationkey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userdefinedname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , point_path_source_(nullptr)
  , scalar_path_source_(nullptr)
  , bezier_path_source_(nullptr)
  , callout_path_source_(nullptr)
  , connection_line_path_source_(nullptr)
  , editable_bezier_path_source_(nullptr)
  , horizontalflip_(false)
  , verticalflip_(false){}
struct PathSourceArchiveDefaultTypeInternal {
  constexpr PathSourceArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathSourceArchiveDefaultTypeInternal() {}
  union {
    PathSourceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathSourceArchiveDefaultTypeInternal _PathSourceArchive_default_instance_;
constexpr AngleGradientArchive::AngleGradientArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gradientangle_(0){}
struct AngleGradientArchiveDefaultTypeInternal {
  constexpr AngleGradientArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AngleGradientArchiveDefaultTypeInternal() {}
  union {
    AngleGradientArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AngleGradientArchiveDefaultTypeInternal _AngleGradientArchive_default_instance_;
constexpr TransformGradientArchive::TransformGradientArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(nullptr)
  , end_(nullptr)
  , basenaturalsize_(nullptr){}
struct TransformGradientArchiveDefaultTypeInternal {
  constexpr TransformGradientArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransformGradientArchiveDefaultTypeInternal() {}
  union {
    TransformGradientArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransformGradientArchiveDefaultTypeInternal _TransformGradientArchive_default_instance_;
constexpr GradientArchive_GradientStop::GradientArchive_GradientStop(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_(nullptr)
  , fraction_(0)
  , inflection_(0){}
struct GradientArchive_GradientStopDefaultTypeInternal {
  constexpr GradientArchive_GradientStopDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GradientArchive_GradientStopDefaultTypeInternal() {}
  union {
    GradientArchive_GradientStop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GradientArchive_GradientStopDefaultTypeInternal _GradientArchive_GradientStop_default_instance_;
constexpr GradientArchive::GradientArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stops_()
  , anglegradient_(nullptr)
  , transformgradient_(nullptr)
  , type_(0)

  , opacity_(0)
  , advancedgradient_(false){}
struct GradientArchiveDefaultTypeInternal {
  constexpr GradientArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GradientArchiveDefaultTypeInternal() {}
  union {
    GradientArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GradientArchiveDefaultTypeInternal _GradientArchive_default_instance_;
constexpr ImageFillArchive::ImageFillArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : database_imagedata_(nullptr)
  , tint_(nullptr)
  , fillsize_(nullptr)
  , database_originalimagedata_(nullptr)
  , imagedata_(nullptr)
  , originalimagedata_(nullptr)
  , referencecolor_(nullptr)
  , technique_(0)

  , interpretsuntaggedimagedataasgeneric_(false){}
struct ImageFillArchiveDefaultTypeInternal {
  constexpr ImageFillArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageFillArchiveDefaultTypeInternal() {}
  union {
    ImageFillArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageFillArchiveDefaultTypeInternal _ImageFillArchive_default_instance_;
constexpr FillArchive::FillArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_(nullptr)
  , gradient_(nullptr)
  , image_(nullptr){}
struct FillArchiveDefaultTypeInternal {
  constexpr FillArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FillArchiveDefaultTypeInternal() {}
  union {
    FillArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FillArchiveDefaultTypeInternal _FillArchive_default_instance_;
constexpr StrokePatternArchive::StrokePatternArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pattern_()
  , type_(0)

  , phase_(0)
  , count_(0u){}
struct StrokePatternArchiveDefaultTypeInternal {
  constexpr StrokePatternArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StrokePatternArchiveDefaultTypeInternal() {}
  union {
    StrokePatternArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StrokePatternArchiveDefaultTypeInternal _StrokePatternArchive_default_instance_;
constexpr StrokeArchive::StrokeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_(nullptr)
  , pattern_(nullptr)
  , smart_stroke_(nullptr)
  , frame_(nullptr)
  , patterned_stroke_(nullptr)
  , width_(0)
  , cap_(0)

  , join_(0)

  , miter_limit_(0){}
struct StrokeArchiveDefaultTypeInternal {
  constexpr StrokeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StrokeArchiveDefaultTypeInternal() {}
  union {
    StrokeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StrokeArchiveDefaultTypeInternal _StrokeArchive_default_instance_;
constexpr SmartStrokeArchive::SmartStrokeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stroke_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parametervalues_(nullptr)
  , pattern_offset_distance_(0)
  , random_seed_(0u){}
struct SmartStrokeArchiveDefaultTypeInternal {
  constexpr SmartStrokeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SmartStrokeArchiveDefaultTypeInternal() {}
  union {
    SmartStrokeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SmartStrokeArchiveDefaultTypeInternal _SmartStrokeArchive_default_instance_;
constexpr FrameArchive::FrameArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : framename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , assetscale_(0){}
struct FrameArchiveDefaultTypeInternal {
  constexpr FrameArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrameArchiveDefaultTypeInternal() {}
  union {
    FrameArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrameArchiveDefaultTypeInternal _FrameArchive_default_instance_;
constexpr PatternedStrokeArchive::PatternedStrokeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pattern_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PatternedStrokeArchiveDefaultTypeInternal {
  constexpr PatternedStrokeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatternedStrokeArchiveDefaultTypeInternal() {}
  union {
    PatternedStrokeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatternedStrokeArchiveDefaultTypeInternal _PatternedStrokeArchive_default_instance_;
constexpr LineEndArchive::LineEndArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(nullptr)
  , end_point_(nullptr)
  , line_join_(0)

  , is_filled_(false){}
struct LineEndArchiveDefaultTypeInternal {
  constexpr LineEndArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LineEndArchiveDefaultTypeInternal() {}
  union {
    LineEndArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LineEndArchiveDefaultTypeInternal _LineEndArchive_default_instance_;
constexpr ShadowArchive::ShadowArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_(nullptr)
  , dropshadow_(nullptr)
  , contactshadow_(nullptr)
  , curvedshadow_(nullptr)
  , type_(0)

  , is_enabled_(true)
  , angle_(315)
  , offset_(5)
  , radius_(1)
  , opacity_(1){}
struct ShadowArchiveDefaultTypeInternal {
  constexpr ShadowArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShadowArchiveDefaultTypeInternal() {}
  union {
    ShadowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShadowArchiveDefaultTypeInternal _ShadowArchive_default_instance_;
constexpr DropShadowArchive::DropShadowArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DropShadowArchiveDefaultTypeInternal {
  constexpr DropShadowArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DropShadowArchiveDefaultTypeInternal() {}
  union {
    DropShadowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DropShadowArchiveDefaultTypeInternal _DropShadowArchive_default_instance_;
constexpr ContactShadowArchive::ContactShadowArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offset_(0)
  , height_(0.2f){}
struct ContactShadowArchiveDefaultTypeInternal {
  constexpr ContactShadowArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContactShadowArchiveDefaultTypeInternal() {}
  union {
    ContactShadowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContactShadowArchiveDefaultTypeInternal _ContactShadowArchive_default_instance_;
constexpr CurvedShadowArchive::CurvedShadowArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : curve_(0.6f){}
struct CurvedShadowArchiveDefaultTypeInternal {
  constexpr CurvedShadowArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CurvedShadowArchiveDefaultTypeInternal() {}
  union {
    CurvedShadowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CurvedShadowArchiveDefaultTypeInternal _CurvedShadowArchive_default_instance_;
constexpr ReflectionArchive::ReflectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : opacity_(0.5f){}
struct ReflectionArchiveDefaultTypeInternal {
  constexpr ReflectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReflectionArchiveDefaultTypeInternal() {}
  union {
    ReflectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReflectionArchiveDefaultTypeInternal _ReflectionArchive_default_instance_;
constexpr ImageAdjustmentsArchive::ImageAdjustmentsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exposure_(0)
  , saturation_(0)
  , contrast_(0)
  , highlights_(0)
  , shadows_(0)
  , sharpness_(0)
  , denoise_(0)
  , temperature_(0)
  , tint_(0)
  , bottom_level_(0)
  , gamma_(0)
  , enhance_(false)
  , represents_sage_adjustments_(false)
  , top_level_(1){}
struct ImageAdjustmentsArchiveDefaultTypeInternal {
  constexpr ImageAdjustmentsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageAdjustmentsArchiveDefaultTypeInternal() {}
  union {
    ImageAdjustmentsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageAdjustmentsArchiveDefaultTypeInternal _ImageAdjustmentsArchive_default_instance_;
constexpr ShapeStylePropertiesArchive::ShapeStylePropertiesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fill_(nullptr)
  , stroke_(nullptr)
  , shadow_(nullptr)
  , reflection_(nullptr)
  , head_line_end_(nullptr)
  , tail_line_end_(nullptr)
  , opacity_(0){}
struct ShapeStylePropertiesArchiveDefaultTypeInternal {
  constexpr ShapeStylePropertiesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShapeStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    ShapeStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShapeStylePropertiesArchiveDefaultTypeInternal _ShapeStylePropertiesArchive_default_instance_;
constexpr ShapeStyleArchive::ShapeStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , shape_properties_(nullptr)
  , override_count_(0u){}
struct ShapeStyleArchiveDefaultTypeInternal {
  constexpr ShapeStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShapeStyleArchiveDefaultTypeInternal() {}
  union {
    ShapeStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShapeStyleArchiveDefaultTypeInternal _ShapeStyleArchive_default_instance_;
constexpr MediaStylePropertiesArchive::MediaStylePropertiesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stroke_(nullptr)
  , shadow_(nullptr)
  , reflection_(nullptr)
  , opacity_(0){}
struct MediaStylePropertiesArchiveDefaultTypeInternal {
  constexpr MediaStylePropertiesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MediaStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    MediaStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MediaStylePropertiesArchiveDefaultTypeInternal _MediaStylePropertiesArchive_default_instance_;
constexpr MediaStyleArchive::MediaStyleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , media_properties_(nullptr)
  , override_count_(0u){}
struct MediaStyleArchiveDefaultTypeInternal {
  constexpr MediaStyleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MediaStyleArchiveDefaultTypeInternal() {}
  union {
    MediaStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MediaStyleArchiveDefaultTypeInternal _MediaStyleArchive_default_instance_;
constexpr ThemePresetsArchive::ThemePresetsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gradient_fill_presets_()
  , image_fill_presets_()
  , shadow_presets_()
  , line_style_presets_()
  , shape_style_presets_()
  , textbox_style_presets_()
  , image_style_presets_()
  , movie_style_presets_()
  , drawing_line_style_presets_(){}
struct ThemePresetsArchiveDefaultTypeInternal {
  constexpr ThemePresetsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ThemePresetsArchiveDefaultTypeInternal() {}
  union {
    ThemePresetsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ThemePresetsArchiveDefaultTypeInternal _ThemePresetsArchive_default_instance_;
constexpr ThemeReplaceFillPresetCommandArchive::ThemeReplaceFillPresetCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , theme_(nullptr)
  , fill_(nullptr)
  , old_fill_(nullptr)
  , index_(0u){}
struct ThemeReplaceFillPresetCommandArchiveDefaultTypeInternal {
  constexpr ThemeReplaceFillPresetCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ThemeReplaceFillPresetCommandArchiveDefaultTypeInternal() {}
  union {
    ThemeReplaceFillPresetCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ThemeReplaceFillPresetCommandArchiveDefaultTypeInternal _ThemeReplaceFillPresetCommandArchive_default_instance_;
constexpr DrawableArchive::DrawableArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pencil_annotations_()
  , hyperlink_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accessibility_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , geometry_(nullptr)
  , parent_(nullptr)
  , exterior_text_wrap_(nullptr)
  , comment_(nullptr)
  , title_(nullptr)
  , caption_(nullptr)
  , locked_(false)
  , aspect_ratio_locked_(false)
  , title_hidden_(false)
  , caption_hidden_(false){}
struct DrawableArchiveDefaultTypeInternal {
  constexpr DrawableArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DrawableArchiveDefaultTypeInternal() {}
  union {
    DrawableArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DrawableArchiveDefaultTypeInternal _DrawableArchive_default_instance_;
constexpr ContainerArchive::ContainerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : children_()
  , geometry_(nullptr)
  , parent_(nullptr){}
struct ContainerArchiveDefaultTypeInternal {
  constexpr ContainerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContainerArchiveDefaultTypeInternal() {}
  union {
    ContainerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContainerArchiveDefaultTypeInternal _ContainerArchive_default_instance_;
constexpr GroupArchive::GroupArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : children_()
  , super_(nullptr)
  , fake_shape_for_empty_group_(nullptr){}
struct GroupArchiveDefaultTypeInternal {
  constexpr GroupArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroupArchiveDefaultTypeInternal() {}
  union {
    GroupArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroupArchiveDefaultTypeInternal _GroupArchive_default_instance_;
constexpr FreehandDrawingAnimationArchive::FreehandDrawingAnimationArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : duration_(0)
  , should_loop_(false){}
struct FreehandDrawingAnimationArchiveDefaultTypeInternal {
  constexpr FreehandDrawingAnimationArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FreehandDrawingAnimationArchiveDefaultTypeInternal() {}
  union {
    FreehandDrawingAnimationArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FreehandDrawingAnimationArchiveDefaultTypeInternal _FreehandDrawingAnimationArchive_default_instance_;
constexpr FreehandDrawingArchive::FreehandDrawingArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spacer_shape_(nullptr)
  , animation_(nullptr)
  , opacity_(0){}
struct FreehandDrawingArchiveDefaultTypeInternal {
  constexpr FreehandDrawingArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FreehandDrawingArchiveDefaultTypeInternal() {}
  union {
    FreehandDrawingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FreehandDrawingArchiveDefaultTypeInternal _FreehandDrawingArchive_default_instance_;
constexpr ShapeArchive::ShapeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , style_(nullptr)
  , pathsource_(nullptr)
  , head_line_end_(nullptr)
  , tail_line_end_(nullptr)
  , strokepatternoffsetdistance_(0){}
struct ShapeArchiveDefaultTypeInternal {
  constexpr ShapeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShapeArchiveDefaultTypeInternal() {}
  union {
    ShapeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShapeArchiveDefaultTypeInternal _ShapeArchive_default_instance_;
constexpr ConnectionLineArchive::ConnectionLineArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , connected_from_(nullptr)
  , connected_to_(nullptr)
  , connected_to_uuid_(nullptr)
  , connected_from_uuid_(nullptr){}
struct ConnectionLineArchiveDefaultTypeInternal {
  constexpr ConnectionLineArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectionLineArchiveDefaultTypeInternal() {}
  union {
    ConnectionLineArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectionLineArchiveDefaultTypeInternal _ConnectionLineArchive_default_instance_;
constexpr ImageArchive::ImageArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , database_data_(nullptr)
  , style_(nullptr)
  , originalsize_(nullptr)
  , mask_(nullptr)
  , database_thumbnaildata_(nullptr)
  , database_originaldata_(nullptr)
  , naturalsize_(nullptr)
  , instantalphapath_(nullptr)
  , data_(nullptr)
  , thumbnaildata_(nullptr)
  , originaldata_(nullptr)
  , imageadjustments_(nullptr)
  , adjustedimagedata_(nullptr)
  , thumbnailadjustedimagedata_(nullptr)
  , enhancedimagedata_(nullptr)
  , traced_path_(nullptr)
  , attribution_(nullptr)
  , flags_(0u)
  , interpretsuntaggedimagedataasgeneric_(false)
  , should_trace_pdf_content_(false){}
struct ImageArchiveDefaultTypeInternal {
  constexpr ImageArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageArchiveDefaultTypeInternal() {}
  union {
    ImageArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageArchiveDefaultTypeInternal _ImageArchive_default_instance_;
constexpr MaskArchive::MaskArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , pathsource_(nullptr){}
struct MaskArchiveDefaultTypeInternal {
  constexpr MaskArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MaskArchiveDefaultTypeInternal() {}
  union {
    MaskArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MaskArchiveDefaultTypeInternal _MaskArchive_default_instance_;
constexpr ImageDataAttributes::ImageDataAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pixel_size_(nullptr)
  , image_is_srgb_(false)
  , should_be_interpreted_as_generic_if_untagged_(false){}
struct ImageDataAttributesDefaultTypeInternal {
  constexpr ImageDataAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageDataAttributesDefaultTypeInternal() {}
  union {
    ImageDataAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageDataAttributesDefaultTypeInternal _ImageDataAttributes_default_instance_;
constexpr MovieArchive::MovieArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : movieremoteurl_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , imported_auxiliary_movie_data_original_filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , database_moviedata_(nullptr)
  , database_posterimagedata_(nullptr)
  , database_audioonlyimagedata_(nullptr)
  , moviedata_(nullptr)
  , posterimagedata_(nullptr)
  , audioonlyimagedata_(nullptr)
  , style_(nullptr)
  , originalsize_(nullptr)
  , naturalsize_(nullptr)
  , importedauxiliarymoviedata_(nullptr)
  , attribution_(nullptr)
  , fingerprint_(nullptr)
  , starttime_(0)
  , endtime_(0)
  , postertime_(0)
  , loopoptionasinteger_(0u)
  , volume_(0)
  , playablestate_(0u)
  , flags_(0u)
  , autoplay_(false)
  , audioonly_(false)
  , streaming_(false)
  , nativeaudiorecording_(false)
  , loop_option_(0)

  , playsacrossslides_(false)
  , poster_image_generated_with_alpha_support_(false){}
struct MovieArchiveDefaultTypeInternal {
  constexpr MovieArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MovieArchiveDefaultTypeInternal() {}
  union {
    MovieArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MovieArchiveDefaultTypeInternal _MovieArchive_default_instance_;
constexpr ExteriorTextWrapArchive::ExteriorTextWrapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0u)
  , direction_(0u)
  , fit_type_(0u)
  , margin_(0)
  , alpha_threshold_(0)
  , is_html_wrap_(false){}
struct ExteriorTextWrapArchiveDefaultTypeInternal {
  constexpr ExteriorTextWrapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExteriorTextWrapArchiveDefaultTypeInternal() {}
  union {
    ExteriorTextWrapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExteriorTextWrapArchiveDefaultTypeInternal _ExteriorTextWrapArchive_default_instance_;
constexpr DrawableContentDescription::DrawableContentDescription(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : element_kind_(0u)
  , is_anchored_to_text_(false)
  , is_floating_above_text_(false)
  , is_inline_with_text_(false){}
struct DrawableContentDescriptionDefaultTypeInternal {
  constexpr DrawableContentDescriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DrawableContentDescriptionDefaultTypeInternal() {}
  union {
    DrawableContentDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DrawableContentDescriptionDefaultTypeInternal _DrawableContentDescription_default_instance_;
constexpr FreehandDrawingContentDescription::FreehandDrawingContentDescription(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , source_doc_wanted_spacer_shape_(false){}
struct FreehandDrawingContentDescriptionDefaultTypeInternal {
  constexpr FreehandDrawingContentDescriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FreehandDrawingContentDescriptionDefaultTypeInternal() {}
  union {
    FreehandDrawingContentDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FreehandDrawingContentDescriptionDefaultTypeInternal _FreehandDrawingContentDescription_default_instance_;
constexpr FreehandDrawingToolkitUIState::FreehandDrawingToolkitUIState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_color_(nullptr)
  , pen_tool_color_(nullptr)
  , pencil_tool_color_(nullptr)
  , crayon_tool_color_(nullptr)
  , fill_tool_color_(nullptr)
  , most_recent_restorable_tool_type_(0)

  , pen_tool_opacity_(0)
  , pen_tool_unscaled_width_(0)
  , pencil_tool_opacity_(0)
  , pencil_tool_unscaled_width_(0)
  , crayon_tool_opacity_(0)
  , crayon_tool_unscaled_width_(0)
  , fill_tool_opacity_(0)
  , eraser_tool_scaled_width_(0)
  , eraser_tool_erases_whole_objects_(false){}
struct FreehandDrawingToolkitUIStateDefaultTypeInternal {
  constexpr FreehandDrawingToolkitUIStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FreehandDrawingToolkitUIStateDefaultTypeInternal() {}
  union {
    FreehandDrawingToolkitUIState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FreehandDrawingToolkitUIStateDefaultTypeInternal _FreehandDrawingToolkitUIState_default_instance_;
constexpr StandinCaptionArchive::StandinCaptionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StandinCaptionArchiveDefaultTypeInternal {
  constexpr StandinCaptionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StandinCaptionArchiveDefaultTypeInternal() {}
  union {
    StandinCaptionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StandinCaptionArchiveDefaultTypeInternal _StandinCaptionArchive_default_instance_;
constexpr GuideArchive::GuideArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , offset_(0)
  , start_(0)
  , end_(0)
  , dynamic_(false)
  , infinite_(false){}
struct GuideArchiveDefaultTypeInternal {
  constexpr GuideArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GuideArchiveDefaultTypeInternal() {}
  union {
    GuideArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GuideArchiveDefaultTypeInternal _GuideArchive_default_instance_;
constexpr UserDefinedGuideArchive::UserDefinedGuideArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , position_(0){}
struct UserDefinedGuideArchiveDefaultTypeInternal {
  constexpr UserDefinedGuideArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserDefinedGuideArchiveDefaultTypeInternal() {}
  union {
    UserDefinedGuideArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserDefinedGuideArchiveDefaultTypeInternal _UserDefinedGuideArchive_default_instance_;
constexpr GuideStorageArchive::GuideStorageArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : userdefinedguides_(){}
struct GuideStorageArchiveDefaultTypeInternal {
  constexpr GuideStorageArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GuideStorageArchiveDefaultTypeInternal() {}
  union {
    GuideStorageArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GuideStorageArchiveDefaultTypeInternal _GuideStorageArchive_default_instance_;
constexpr CanvasSelectionArchive::CanvasSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : infos_()
  , non_interactive_infos_()
  , container_(nullptr){}
struct CanvasSelectionArchiveDefaultTypeInternal {
  constexpr CanvasSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CanvasSelectionArchiveDefaultTypeInternal() {}
  union {
    CanvasSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CanvasSelectionArchiveDefaultTypeInternal _CanvasSelectionArchive_default_instance_;
constexpr DrawableSelectionArchive::DrawableSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : infos_()
  , non_interactive_infos_(){}
struct DrawableSelectionArchiveDefaultTypeInternal {
  constexpr DrawableSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DrawableSelectionArchiveDefaultTypeInternal() {}
  union {
    DrawableSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DrawableSelectionArchiveDefaultTypeInternal _DrawableSelectionArchive_default_instance_;
constexpr GroupSelectionArchive::GroupSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , has_selected_infos_in_non_group_container_(false){}
struct GroupSelectionArchiveDefaultTypeInternal {
  constexpr GroupSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroupSelectionArchiveDefaultTypeInternal() {}
  union {
    GroupSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroupSelectionArchiveDefaultTypeInternal _GroupSelectionArchive_default_instance_;
constexpr PathSelectionArchive::PathSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PathSelectionArchiveDefaultTypeInternal {
  constexpr PathSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathSelectionArchiveDefaultTypeInternal() {}
  union {
    PathSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathSelectionArchiveDefaultTypeInternal _PathSelectionArchive_default_instance_;
constexpr InfoHyperlinkSelectionArchive::InfoHyperlinkSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct InfoHyperlinkSelectionArchiveDefaultTypeInternal {
  constexpr InfoHyperlinkSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InfoHyperlinkSelectionArchiveDefaultTypeInternal() {}
  union {
    InfoHyperlinkSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InfoHyperlinkSelectionArchiveDefaultTypeInternal _InfoHyperlinkSelectionArchive_default_instance_;
constexpr CommentStorageArchive::CommentStorageArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : replies_()
  , text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , creation_date_(nullptr)
  , author_(nullptr){}
struct CommentStorageArchiveDefaultTypeInternal {
  constexpr CommentStorageArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommentStorageArchiveDefaultTypeInternal() {}
  union {
    CommentStorageArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommentStorageArchiveDefaultTypeInternal _CommentStorageArchive_default_instance_;
constexpr ReplaceAnnotationAuthorCommandArchive::ReplaceAnnotationAuthorCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , old_annotation_author_(nullptr)
  , new_annotation_author_(nullptr){}
struct ReplaceAnnotationAuthorCommandArchiveDefaultTypeInternal {
  constexpr ReplaceAnnotationAuthorCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReplaceAnnotationAuthorCommandArchiveDefaultTypeInternal() {}
  union {
    ReplaceAnnotationAuthorCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReplaceAnnotationAuthorCommandArchiveDefaultTypeInternal _ReplaceAnnotationAuthorCommandArchive_default_instance_;
constexpr PencilAnnotationArchive::PencilAnnotationArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pencil_annotation_storage_(nullptr){}
struct PencilAnnotationArchiveDefaultTypeInternal {
  constexpr PencilAnnotationArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PencilAnnotationArchiveDefaultTypeInternal() {}
  union {
    PencilAnnotationArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PencilAnnotationArchiveDefaultTypeInternal _PencilAnnotationArchive_default_instance_;
constexpr PencilAnnotationSelectionArchive::PencilAnnotationSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pencil_annotation_(nullptr){}
struct PencilAnnotationSelectionArchiveDefaultTypeInternal {
  constexpr PencilAnnotationSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PencilAnnotationSelectionArchiveDefaultTypeInternal() {}
  union {
    PencilAnnotationSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PencilAnnotationSelectionArchiveDefaultTypeInternal _PencilAnnotationSelectionArchive_default_instance_;
constexpr PencilAnnotationStorageArchive::PencilAnnotationStorageArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : callout_sub_storages_()
  , sub_storages_()
  , markup_offset_(nullptr)
  , rasterized_image_(nullptr)
  , legacy_encoded_drawing_(nullptr)
  , drawing_path_(nullptr)
  , strokes_bounding_box_origin_(nullptr)
  , strokes_bounding_box_size_(nullptr)
  , original_attached_size_(nullptr)
  , pen_color_(nullptr)
  , creation_date_(nullptr)
  , encoded_drawing_(nullptr)
  , stroke_points_frame_origin_(nullptr)
  , stroke_points_frame_size_(nullptr)
  , rendered_frame_origin_(nullptr)
  , rendered_frame_size_(nullptr)
  , attached_location_(0)
  , attached_type_(0)
  , percent_of_pa_contained_in_parent_rep_(0)
  , text_baselines_touched_count_(PROTOBUF_ULONGLONG(0))
  , visible_strokes_count_(PROTOBUF_ULONGLONG(0))
  , tool_type_(0)
  , compound_annotation_type_(0)
  , pencil_annotation_drawing_scale_(0){}
struct PencilAnnotationStorageArchiveDefaultTypeInternal {
  constexpr PencilAnnotationStorageArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PencilAnnotationStorageArchiveDefaultTypeInternal() {}
  union {
    PencilAnnotationStorageArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PencilAnnotationStorageArchiveDefaultTypeInternal _PencilAnnotationStorageArchive_default_instance_;
constexpr SpecColorFillSetColorArchive::SpecColorFillSetColorArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_(nullptr){}
struct SpecColorFillSetColorArchiveDefaultTypeInternal {
  constexpr SpecColorFillSetColorArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecColorFillSetColorArchiveDefaultTypeInternal() {}
  union {
    SpecColorFillSetColorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecColorFillSetColorArchiveDefaultTypeInternal _SpecColorFillSetColorArchive_default_instance_;
constexpr SpecFrameSetAssetScaleArchive::SpecFrameSetAssetScaleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : asset_scale_(0){}
struct SpecFrameSetAssetScaleArchiveDefaultTypeInternal {
  constexpr SpecFrameSetAssetScaleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecFrameSetAssetScaleArchiveDefaultTypeInternal() {}
  union {
    SpecFrameSetAssetScaleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecFrameSetAssetScaleArchiveDefaultTypeInternal _SpecFrameSetAssetScaleArchive_default_instance_;
constexpr SpecGradientFillSetAngleArchive::SpecGradientFillSetAngleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : angle_(0){}
struct SpecGradientFillSetAngleArchiveDefaultTypeInternal {
  constexpr SpecGradientFillSetAngleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecGradientFillSetAngleArchiveDefaultTypeInternal() {}
  union {
    SpecGradientFillSetAngleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecGradientFillSetAngleArchiveDefaultTypeInternal _SpecGradientFillSetAngleArchive_default_instance_;
constexpr SpecImageFillSetTechniqueArchive::SpecImageFillSetTechniqueArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : technique_(0){}
struct SpecImageFillSetTechniqueArchiveDefaultTypeInternal {
  constexpr SpecImageFillSetTechniqueArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecImageFillSetTechniqueArchiveDefaultTypeInternal() {}
  union {
    SpecImageFillSetTechniqueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecImageFillSetTechniqueArchiveDefaultTypeInternal _SpecImageFillSetTechniqueArchive_default_instance_;
constexpr SpecReflectionSetOpacityArchive::SpecReflectionSetOpacityArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : opacity_(0){}
struct SpecReflectionSetOpacityArchiveDefaultTypeInternal {
  constexpr SpecReflectionSetOpacityArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecReflectionSetOpacityArchiveDefaultTypeInternal() {}
  union {
    SpecReflectionSetOpacityArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecReflectionSetOpacityArchiveDefaultTypeInternal _SpecReflectionSetOpacityArchive_default_instance_;
constexpr SpecShadowSetAngleArchive::SpecShadowSetAngleArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : angle_(0){}
struct SpecShadowSetAngleArchiveDefaultTypeInternal {
  constexpr SpecShadowSetAngleArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecShadowSetAngleArchiveDefaultTypeInternal() {}
  union {
    SpecShadowSetAngleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecShadowSetAngleArchiveDefaultTypeInternal _SpecShadowSetAngleArchive_default_instance_;
constexpr SpecShadowSetColorArchive::SpecShadowSetColorArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_(nullptr){}
struct SpecShadowSetColorArchiveDefaultTypeInternal {
  constexpr SpecShadowSetColorArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecShadowSetColorArchiveDefaultTypeInternal() {}
  union {
    SpecShadowSetColorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecShadowSetColorArchiveDefaultTypeInternal _SpecShadowSetColorArchive_default_instance_;
constexpr SpecShadowSetOffsetArchive::SpecShadowSetOffsetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offset_(0){}
struct SpecShadowSetOffsetArchiveDefaultTypeInternal {
  constexpr SpecShadowSetOffsetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecShadowSetOffsetArchiveDefaultTypeInternal() {}
  union {
    SpecShadowSetOffsetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecShadowSetOffsetArchiveDefaultTypeInternal _SpecShadowSetOffsetArchive_default_instance_;
constexpr SpecShadowSetOpacityArchive::SpecShadowSetOpacityArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : opacity_(0){}
struct SpecShadowSetOpacityArchiveDefaultTypeInternal {
  constexpr SpecShadowSetOpacityArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecShadowSetOpacityArchiveDefaultTypeInternal() {}
  union {
    SpecShadowSetOpacityArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecShadowSetOpacityArchiveDefaultTypeInternal _SpecShadowSetOpacityArchive_default_instance_;
constexpr SpecShadowSetRadiusArchive::SpecShadowSetRadiusArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : radius_(0){}
struct SpecShadowSetRadiusArchiveDefaultTypeInternal {
  constexpr SpecShadowSetRadiusArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecShadowSetRadiusArchiveDefaultTypeInternal() {}
  union {
    SpecShadowSetRadiusArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecShadowSetRadiusArchiveDefaultTypeInternal _SpecShadowSetRadiusArchive_default_instance_;
constexpr SpecStrokeSetColorArchive::SpecStrokeSetColorArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_(nullptr){}
struct SpecStrokeSetColorArchiveDefaultTypeInternal {
  constexpr SpecStrokeSetColorArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecStrokeSetColorArchiveDefaultTypeInternal() {}
  union {
    SpecStrokeSetColorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecStrokeSetColorArchiveDefaultTypeInternal _SpecStrokeSetColorArchive_default_instance_;
constexpr SpecStrokeSetPatternArchive::SpecStrokeSetPatternArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_(nullptr)
  , pattern_(nullptr)
  , line_cap_(0)
  , line_join_(0)
  , miter_limit_(0)
  , width_(0){}
struct SpecStrokeSetPatternArchiveDefaultTypeInternal {
  constexpr SpecStrokeSetPatternArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecStrokeSetPatternArchiveDefaultTypeInternal() {}
  union {
    SpecStrokeSetPatternArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecStrokeSetPatternArchiveDefaultTypeInternal _SpecStrokeSetPatternArchive_default_instance_;
constexpr SpecStrokeSetWidthArchive::SpecStrokeSetWidthArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : width_(0){}
struct SpecStrokeSetWidthArchiveDefaultTypeInternal {
  constexpr SpecStrokeSetWidthArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecStrokeSetWidthArchiveDefaultTypeInternal() {}
  union {
    SpecStrokeSetWidthArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecStrokeSetWidthArchiveDefaultTypeInternal _SpecStrokeSetWidthArchive_default_instance_;
constexpr Attribution::Attribution(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , external_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , author_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , author_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AttributionDefaultTypeInternal {
  constexpr AttributionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AttributionDefaultTypeInternal() {}
  union {
    Attribution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AttributionDefaultTypeInternal _Attribution_default_instance_;
constexpr MovieFingerprint::MovieFingerprint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tracks_()
  , version_()
  , _version_cached_byte_size_(){}
struct MovieFingerprintDefaultTypeInternal {
  constexpr MovieFingerprintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MovieFingerprintDefaultTypeInternal() {}
  union {
    MovieFingerprint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MovieFingerprintDefaultTypeInternal _MovieFingerprint_default_instance_;
constexpr MovieFingerprintTrack::MovieFingerprintTrack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : media_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sample_data_digest_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extended_language_tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , natural_size_(nullptr)
  , total_sample_data_length_(PROTOBUF_LONGLONG(0))
  , time_range_start_value_(PROTOBUF_LONGLONG(0))
  , time_range_start_timescale_(0)
  , enabled_(false)
  , time_range_start_is_valid_(false)
  , time_range_duration_is_valid_(false)
  , time_range_duration_value_(PROTOBUF_LONGLONG(0))
  , preferred_transform_a_(0)
  , preferred_transform_b_(0)
  , preferred_transform_c_(0)
  , preferred_transform_d_(0)
  , preferred_transform_tx_(0)
  , preferred_transform_ty_(0)
  , preferred_volume_(0)
  , time_range_duration_timescale_(0){}
struct MovieFingerprintTrackDefaultTypeInternal {
  constexpr MovieFingerprintTrackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MovieFingerprintTrackDefaultTypeInternal() {}
  union {
    MovieFingerprintTrack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MovieFingerprintTrackDefaultTypeInternal _MovieFingerprintTrack_default_instance_;
}  // namespace TSD
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TSDArchives_2eproto[80];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TSDArchives_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TSDArchives_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TSDArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSD::EdgeInsetsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::EdgeInsetsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::EdgeInsetsArchive, top_),
  PROTOBUF_FIELD_OFFSET(::TSD::EdgeInsetsArchive, left_),
  PROTOBUF_FIELD_OFFSET(::TSD::EdgeInsetsArchive, bottom_),
  PROTOBUF_FIELD_OFFSET(::TSD::EdgeInsetsArchive, right_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSD::GeometryArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::GeometryArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::GeometryArchive, position_),
  PROTOBUF_FIELD_OFFSET(::TSD::GeometryArchive, size_),
  PROTOBUF_FIELD_OFFSET(::TSD::GeometryArchive, flags_),
  PROTOBUF_FIELD_OFFSET(::TSD::GeometryArchive, angle_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSD::PointPathSourceArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::PointPathSourceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::PointPathSourceArchive, type_),
  PROTOBUF_FIELD_OFFSET(::TSD::PointPathSourceArchive, point_),
  PROTOBUF_FIELD_OFFSET(::TSD::PointPathSourceArchive, naturalsize_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::ScalarPathSourceArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ScalarPathSourceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ScalarPathSourceArchive, type_),
  PROTOBUF_FIELD_OFFSET(::TSD::ScalarPathSourceArchive, scalar_),
  PROTOBUF_FIELD_OFFSET(::TSD::ScalarPathSourceArchive, naturalsize_),
  PROTOBUF_FIELD_OFFSET(::TSD::ScalarPathSourceArchive, is_curve_continuous_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::TSD::BezierPathSourceArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::BezierPathSourceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::BezierPathSourceArchive, path_string_),
  PROTOBUF_FIELD_OFFSET(::TSD::BezierPathSourceArchive, naturalsize_),
  PROTOBUF_FIELD_OFFSET(::TSD::BezierPathSourceArchive, path_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::CalloutPathSourceArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::CalloutPathSourceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::CalloutPathSourceArchive, natural_size_),
  PROTOBUF_FIELD_OFFSET(::TSD::CalloutPathSourceArchive, tail_position_),
  PROTOBUF_FIELD_OFFSET(::TSD::CalloutPathSourceArchive, tail_size_),
  PROTOBUF_FIELD_OFFSET(::TSD::CalloutPathSourceArchive, corner_radius_),
  PROTOBUF_FIELD_OFFSET(::TSD::CalloutPathSourceArchive, center_tail_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLinePathSourceArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLinePathSourceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLinePathSourceArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLinePathSourceArchive, type_),
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLinePathSourceArchive, outset_from_),
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLinePathSourceArchive, outset_to_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSD::EditableBezierPathSourceArchive_Node, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::EditableBezierPathSourceArchive_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::EditableBezierPathSourceArchive_Node, incontrolpoint_),
  PROTOBUF_FIELD_OFFSET(::TSD::EditableBezierPathSourceArchive_Node, nodepoint_),
  PROTOBUF_FIELD_OFFSET(::TSD::EditableBezierPathSourceArchive_Node, outcontrolpoint_),
  PROTOBUF_FIELD_OFFSET(::TSD::EditableBezierPathSourceArchive_Node, type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSD::EditableBezierPathSourceArchive_Subpath, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::EditableBezierPathSourceArchive_Subpath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::EditableBezierPathSourceArchive_Subpath, nodes_),
  PROTOBUF_FIELD_OFFSET(::TSD::EditableBezierPathSourceArchive_Subpath, closed_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::EditableBezierPathSourceArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::EditableBezierPathSourceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::EditableBezierPathSourceArchive, subpaths_),
  PROTOBUF_FIELD_OFFSET(::TSD::EditableBezierPathSourceArchive, naturalsize_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::PathSourceArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::PathSourceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::PathSourceArchive, horizontalflip_),
  PROTOBUF_FIELD_OFFSET(::TSD::PathSourceArchive, verticalflip_),
  PROTOBUF_FIELD_OFFSET(::TSD::PathSourceArchive, point_path_source_),
  PROTOBUF_FIELD_OFFSET(::TSD::PathSourceArchive, scalar_path_source_),
  PROTOBUF_FIELD_OFFSET(::TSD::PathSourceArchive, bezier_path_source_),
  PROTOBUF_FIELD_OFFSET(::TSD::PathSourceArchive, callout_path_source_),
  PROTOBUF_FIELD_OFFSET(::TSD::PathSourceArchive, connection_line_path_source_),
  PROTOBUF_FIELD_OFFSET(::TSD::PathSourceArchive, editable_bezier_path_source_),
  PROTOBUF_FIELD_OFFSET(::TSD::PathSourceArchive, localizationkey_),
  PROTOBUF_FIELD_OFFSET(::TSD::PathSourceArchive, userdefinedname_),
  8,
  9,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::AngleGradientArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::AngleGradientArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::AngleGradientArchive, gradientangle_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::TransformGradientArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::TransformGradientArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::TransformGradientArchive, start_),
  PROTOBUF_FIELD_OFFSET(::TSD::TransformGradientArchive, end_),
  PROTOBUF_FIELD_OFFSET(::TSD::TransformGradientArchive, basenaturalsize_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::GradientArchive_GradientStop, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::GradientArchive_GradientStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::GradientArchive_GradientStop, color_),
  PROTOBUF_FIELD_OFFSET(::TSD::GradientArchive_GradientStop, fraction_),
  PROTOBUF_FIELD_OFFSET(::TSD::GradientArchive_GradientStop, inflection_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::GradientArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::GradientArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::GradientArchive, type_),
  PROTOBUF_FIELD_OFFSET(::TSD::GradientArchive, stops_),
  PROTOBUF_FIELD_OFFSET(::TSD::GradientArchive, opacity_),
  PROTOBUF_FIELD_OFFSET(::TSD::GradientArchive, advancedgradient_),
  PROTOBUF_FIELD_OFFSET(::TSD::GradientArchive, anglegradient_),
  PROTOBUF_FIELD_OFFSET(::TSD::GradientArchive, transformgradient_),
  2,
  ~0u,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::ImageFillArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageFillArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ImageFillArchive, imagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageFillArchive, technique_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageFillArchive, tint_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageFillArchive, fillsize_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageFillArchive, originalimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageFillArchive, interpretsuntaggedimagedataasgeneric_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageFillArchive, referencecolor_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageFillArchive, database_imagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageFillArchive, database_originalimagedata_),
  4,
  7,
  1,
  2,
  5,
  8,
  6,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::TSD::FillArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::FillArchive, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSD::FillArchive, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::FillArchive, color_),
  PROTOBUF_FIELD_OFFSET(::TSD::FillArchive, gradient_),
  PROTOBUF_FIELD_OFFSET(::TSD::FillArchive, image_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::StrokePatternArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::StrokePatternArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::StrokePatternArchive, type_),
  PROTOBUF_FIELD_OFFSET(::TSD::StrokePatternArchive, phase_),
  PROTOBUF_FIELD_OFFSET(::TSD::StrokePatternArchive, count_),
  PROTOBUF_FIELD_OFFSET(::TSD::StrokePatternArchive, pattern_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSD::StrokeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::StrokeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::StrokeArchive, color_),
  PROTOBUF_FIELD_OFFSET(::TSD::StrokeArchive, width_),
  PROTOBUF_FIELD_OFFSET(::TSD::StrokeArchive, cap_),
  PROTOBUF_FIELD_OFFSET(::TSD::StrokeArchive, join_),
  PROTOBUF_FIELD_OFFSET(::TSD::StrokeArchive, miter_limit_),
  PROTOBUF_FIELD_OFFSET(::TSD::StrokeArchive, pattern_),
  PROTOBUF_FIELD_OFFSET(::TSD::StrokeArchive, smart_stroke_),
  PROTOBUF_FIELD_OFFSET(::TSD::StrokeArchive, frame_),
  PROTOBUF_FIELD_OFFSET(::TSD::StrokeArchive, patterned_stroke_),
  0,
  5,
  6,
  7,
  8,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSD::SmartStrokeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::SmartStrokeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::SmartStrokeArchive, stroke_name_),
  PROTOBUF_FIELD_OFFSET(::TSD::SmartStrokeArchive, random_seed_),
  PROTOBUF_FIELD_OFFSET(::TSD::SmartStrokeArchive, parametervalues_),
  PROTOBUF_FIELD_OFFSET(::TSD::SmartStrokeArchive, pattern_offset_distance_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::FrameArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::FrameArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::FrameArchive, framename_),
  PROTOBUF_FIELD_OFFSET(::TSD::FrameArchive, assetscale_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::PatternedStrokeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::PatternedStrokeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::PatternedStrokeArchive, pattern_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::LineEndArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::LineEndArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::LineEndArchive, path_),
  PROTOBUF_FIELD_OFFSET(::TSD::LineEndArchive, line_join_),
  PROTOBUF_FIELD_OFFSET(::TSD::LineEndArchive, end_point_),
  PROTOBUF_FIELD_OFFSET(::TSD::LineEndArchive, is_filled_),
  PROTOBUF_FIELD_OFFSET(::TSD::LineEndArchive, identifier_),
  1,
  3,
  2,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::ShadowArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShadowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ShadowArchive, color_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShadowArchive, angle_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShadowArchive, offset_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShadowArchive, radius_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShadowArchive, opacity_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShadowArchive, is_enabled_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShadowArchive, type_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShadowArchive, dropshadow_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShadowArchive, contactshadow_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShadowArchive, curvedshadow_),
  0,
  6,
  7,
  8,
  9,
  5,
  4,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSD::DropShadowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ContactShadowArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContactShadowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ContactShadowArchive, height_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContactShadowArchive, offset_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::CurvedShadowArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::CurvedShadowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::CurvedShadowArchive, curve_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::ReflectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ReflectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ReflectionArchive, opacity_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsArchive, exposure_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsArchive, saturation_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsArchive, contrast_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsArchive, highlights_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsArchive, shadows_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsArchive, sharpness_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsArchive, denoise_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsArchive, temperature_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsArchive, tint_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsArchive, bottom_level_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsArchive, top_level_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsArchive, gamma_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsArchive, enhance_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsArchive, represents_sage_adjustments_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  13,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStylePropertiesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStylePropertiesArchive, fill_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStylePropertiesArchive, stroke_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStylePropertiesArchive, opacity_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStylePropertiesArchive, shadow_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStylePropertiesArchive, reflection_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStylePropertiesArchive, head_line_end_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStylePropertiesArchive, tail_line_end_),
  0,
  1,
  6,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStyleArchive, override_count_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStyleArchive, shape_properties_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::MediaStylePropertiesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::MediaStylePropertiesArchive, stroke_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaStylePropertiesArchive, opacity_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaStylePropertiesArchive, shadow_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaStylePropertiesArchive, reflection_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::MediaStyleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::MediaStyleArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaStyleArchive, override_count_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaStyleArchive, media_properties_),
  0,
  2,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSD::ThemePresetsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ThemePresetsArchive, gradient_fill_presets_),
  PROTOBUF_FIELD_OFFSET(::TSD::ThemePresetsArchive, image_fill_presets_),
  PROTOBUF_FIELD_OFFSET(::TSD::ThemePresetsArchive, shadow_presets_),
  PROTOBUF_FIELD_OFFSET(::TSD::ThemePresetsArchive, line_style_presets_),
  PROTOBUF_FIELD_OFFSET(::TSD::ThemePresetsArchive, shape_style_presets_),
  PROTOBUF_FIELD_OFFSET(::TSD::ThemePresetsArchive, textbox_style_presets_),
  PROTOBUF_FIELD_OFFSET(::TSD::ThemePresetsArchive, image_style_presets_),
  PROTOBUF_FIELD_OFFSET(::TSD::ThemePresetsArchive, movie_style_presets_),
  PROTOBUF_FIELD_OFFSET(::TSD::ThemePresetsArchive, drawing_line_style_presets_),
  PROTOBUF_FIELD_OFFSET(::TSD::ThemeReplaceFillPresetCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ThemeReplaceFillPresetCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ThemeReplaceFillPresetCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ThemeReplaceFillPresetCommandArchive, theme_),
  PROTOBUF_FIELD_OFFSET(::TSD::ThemeReplaceFillPresetCommandArchive, fill_),
  PROTOBUF_FIELD_OFFSET(::TSD::ThemeReplaceFillPresetCommandArchive, old_fill_),
  PROTOBUF_FIELD_OFFSET(::TSD::ThemeReplaceFillPresetCommandArchive, index_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableArchive, geometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableArchive, parent_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableArchive, exterior_text_wrap_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableArchive, hyperlink_url_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableArchive, locked_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableArchive, comment_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableArchive, aspect_ratio_locked_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableArchive, accessibility_description_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableArchive, pencil_annotations_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableArchive, title_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableArchive, caption_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableArchive, title_hidden_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableArchive, caption_hidden_),
  2,
  3,
  4,
  0,
  8,
  5,
  9,
  1,
  ~0u,
  6,
  7,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerArchive, geometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerArchive, parent_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerArchive, children_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSD::GroupArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupArchive, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupArchive, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::GroupArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupArchive, children_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupArchive, fake_shape_for_empty_group_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingAnimationArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingAnimationArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingAnimationArchive, duration_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingAnimationArchive, should_loop_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingArchive, spacer_shape_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingArchive, opacity_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingArchive, animation_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeArchive, style_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeArchive, pathsource_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeArchive, head_line_end_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeArchive, tail_line_end_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeArchive, strokepatternoffsetdistance_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineArchive, connected_from_),
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineArchive, connected_to_),
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineArchive, connected_to_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineArchive, connected_from_uuid_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, style_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, originalsize_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, mask_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, thumbnaildata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, flags_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, originaldata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, naturalsize_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, instantalphapath_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, imageadjustments_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, enhancedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, adjustedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, thumbnailadjustedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, interpretsuntaggedimagedataasgeneric_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, database_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, database_thumbnaildata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, database_originaldata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, traced_path_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, attribution_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageArchive, should_trace_pdf_content_),
  0,
  9,
  2,
  3,
  4,
  10,
  18,
  11,
  7,
  8,
  12,
  15,
  13,
  14,
  19,
  1,
  5,
  6,
  16,
  17,
  20,
  PROTOBUF_FIELD_OFFSET(::TSD::MaskArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::MaskArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::MaskArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::MaskArchive, pathsource_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::ImageDataAttributes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageDataAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ImageDataAttributes, pixel_size_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageDataAttributes, image_is_srgb_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageDataAttributes, should_be_interpreted_as_generic_if_untagged_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, moviedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, importedauxiliarymoviedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, imported_auxiliary_movie_data_original_filename_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, movieremoteurl_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, starttime_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, endtime_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, postertime_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, loopoptionasinteger_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, loop_option_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, volume_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, autoplay_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, audioonly_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, streaming_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, nativeaudiorecording_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, playsacrossslides_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, posterimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, audioonlyimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, poster_image_generated_with_alpha_support_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, playablestate_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, flags_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, database_moviedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, database_posterimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, database_audioonlyimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, style_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, originalsize_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, naturalsize_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, attribution_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieArchive, fingerprint_),
  2,
  6,
  12,
  1,
  0,
  15,
  16,
  17,
  18,
  26,
  19,
  22,
  23,
  24,
  25,
  27,
  7,
  8,
  28,
  20,
  21,
  3,
  4,
  5,
  9,
  10,
  11,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapArchive, type_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapArchive, direction_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapArchive, fit_type_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapArchive, margin_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapArchive, alpha_threshold_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapArchive, is_html_wrap_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableContentDescription, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableContentDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableContentDescription, element_kind_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableContentDescription, is_anchored_to_text_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableContentDescription, is_floating_above_text_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableContentDescription, is_inline_with_text_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingContentDescription, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingContentDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingContentDescription, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingContentDescription, source_doc_wanted_spacer_shape_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingToolkitUIState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingToolkitUIState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingToolkitUIState, current_color_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingToolkitUIState, most_recent_restorable_tool_type_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingToolkitUIState, pen_tool_opacity_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingToolkitUIState, pen_tool_unscaled_width_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingToolkitUIState, pencil_tool_opacity_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingToolkitUIState, pencil_tool_unscaled_width_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingToolkitUIState, crayon_tool_opacity_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingToolkitUIState, crayon_tool_unscaled_width_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingToolkitUIState, fill_tool_opacity_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingToolkitUIState, eraser_tool_scaled_width_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingToolkitUIState, eraser_tool_erases_whole_objects_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingToolkitUIState, pen_tool_color_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingToolkitUIState, pencil_tool_color_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingToolkitUIState, crayon_tool_color_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingToolkitUIState, fill_tool_color_),
  0,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSD::StandinCaptionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::GuideArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::GuideArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::GuideArchive, type_),
  PROTOBUF_FIELD_OFFSET(::TSD::GuideArchive, offset_),
  PROTOBUF_FIELD_OFFSET(::TSD::GuideArchive, start_),
  PROTOBUF_FIELD_OFFSET(::TSD::GuideArchive, end_),
  PROTOBUF_FIELD_OFFSET(::TSD::GuideArchive, dynamic_),
  PROTOBUF_FIELD_OFFSET(::TSD::GuideArchive, infinite_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSD::UserDefinedGuideArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::UserDefinedGuideArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::UserDefinedGuideArchive, type_),
  PROTOBUF_FIELD_OFFSET(::TSD::UserDefinedGuideArchive, position_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSD::GuideStorageArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::GuideStorageArchive, userdefinedguides_),
  PROTOBUF_FIELD_OFFSET(::TSD::CanvasSelectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::CanvasSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::CanvasSelectionArchive, infos_),
  PROTOBUF_FIELD_OFFSET(::TSD::CanvasSelectionArchive, non_interactive_infos_),
  PROTOBUF_FIELD_OFFSET(::TSD::CanvasSelectionArchive, container_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableSelectionArchive, infos_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableSelectionArchive, non_interactive_infos_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupSelectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::GroupSelectionArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupSelectionArchive, has_selected_infos_in_non_group_container_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSD::PathSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSD::InfoHyperlinkSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::CommentStorageArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::CommentStorageArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::CommentStorageArchive, text_),
  PROTOBUF_FIELD_OFFSET(::TSD::CommentStorageArchive, creation_date_),
  PROTOBUF_FIELD_OFFSET(::TSD::CommentStorageArchive, author_),
  PROTOBUF_FIELD_OFFSET(::TSD::CommentStorageArchive, replies_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSD::ReplaceAnnotationAuthorCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ReplaceAnnotationAuthorCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::ReplaceAnnotationAuthorCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ReplaceAnnotationAuthorCommandArchive, old_annotation_author_),
  PROTOBUF_FIELD_OFFSET(::TSD::ReplaceAnnotationAuthorCommandArchive, new_annotation_author_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationArchive, pencil_annotation_storage_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationSelectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationSelectionArchive, pencil_annotation_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, attached_location_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, markup_offset_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, rasterized_image_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, legacy_encoded_drawing_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, drawing_path_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, strokes_bounding_box_origin_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, strokes_bounding_box_size_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, attached_type_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, original_attached_size_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, percent_of_pa_contained_in_parent_rep_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, text_baselines_touched_count_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, visible_strokes_count_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, pen_color_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, tool_type_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, callout_sub_storages_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, creation_date_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, pencil_annotation_drawing_scale_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, compound_annotation_type_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, sub_storages_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, encoded_drawing_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, stroke_points_frame_origin_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, stroke_points_frame_size_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, rendered_frame_origin_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationStorageArchive, rendered_frame_size_),
  14,
  0,
  1,
  2,
  3,
  4,
  5,
  15,
  6,
  16,
  17,
  18,
  7,
  19,
  ~0u,
  8,
  21,
  20,
  ~0u,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::TSD::SpecColorFillSetColorArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::SpecColorFillSetColorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::SpecColorFillSetColorArchive, color_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::SpecFrameSetAssetScaleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::SpecFrameSetAssetScaleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::SpecFrameSetAssetScaleArchive, asset_scale_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::SpecGradientFillSetAngleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::SpecGradientFillSetAngleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::SpecGradientFillSetAngleArchive, angle_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::SpecImageFillSetTechniqueArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::SpecImageFillSetTechniqueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::SpecImageFillSetTechniqueArchive, technique_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::SpecReflectionSetOpacityArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::SpecReflectionSetOpacityArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::SpecReflectionSetOpacityArchive, opacity_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::SpecShadowSetAngleArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::SpecShadowSetAngleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::SpecShadowSetAngleArchive, angle_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::SpecShadowSetColorArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::SpecShadowSetColorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::SpecShadowSetColorArchive, color_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::SpecShadowSetOffsetArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::SpecShadowSetOffsetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::SpecShadowSetOffsetArchive, offset_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::SpecShadowSetOpacityArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::SpecShadowSetOpacityArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::SpecShadowSetOpacityArchive, opacity_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::SpecShadowSetRadiusArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::SpecShadowSetRadiusArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::SpecShadowSetRadiusArchive, radius_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::SpecStrokeSetColorArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::SpecStrokeSetColorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::SpecStrokeSetColorArchive, color_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::SpecStrokeSetPatternArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::SpecStrokeSetPatternArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::SpecStrokeSetPatternArchive, line_cap_),
  PROTOBUF_FIELD_OFFSET(::TSD::SpecStrokeSetPatternArchive, line_join_),
  PROTOBUF_FIELD_OFFSET(::TSD::SpecStrokeSetPatternArchive, miter_limit_),
  PROTOBUF_FIELD_OFFSET(::TSD::SpecStrokeSetPatternArchive, width_),
  PROTOBUF_FIELD_OFFSET(::TSD::SpecStrokeSetPatternArchive, color_),
  PROTOBUF_FIELD_OFFSET(::TSD::SpecStrokeSetPatternArchive, pattern_),
  2,
  3,
  4,
  5,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::SpecStrokeSetWidthArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::SpecStrokeSetWidthArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::SpecStrokeSetWidthArchive, width_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::Attribution, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::Attribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::Attribution, title_),
  PROTOBUF_FIELD_OFFSET(::TSD::Attribution, description_text_),
  PROTOBUF_FIELD_OFFSET(::TSD::Attribution, external_url_),
  PROTOBUF_FIELD_OFFSET(::TSD::Attribution, author_name_),
  PROTOBUF_FIELD_OFFSET(::TSD::Attribution, author_url_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprint, tracks_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprint, version_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, media_type_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, enabled_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, total_sample_data_length_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, sample_data_digest_string_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, time_range_start_value_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, time_range_start_timescale_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, time_range_start_is_valid_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, time_range_duration_value_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, time_range_duration_timescale_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, time_range_duration_is_valid_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, natural_size_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, preferred_transform_a_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, preferred_transform_b_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, preferred_transform_c_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, preferred_transform_d_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, preferred_transform_tx_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, preferred_transform_ty_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, preferred_volume_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, language_code_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieFingerprintTrack, extended_language_tag_),
  0,
  8,
  5,
  1,
  6,
  7,
  9,
  11,
  19,
  10,
  4,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::TSD::EdgeInsetsArchive)},
  { 13, 22, sizeof(::TSD::GeometryArchive)},
  { 26, 34, sizeof(::TSD::PointPathSourceArchive)},
  { 37, 46, sizeof(::TSD::ScalarPathSourceArchive)},
  { 50, 58, sizeof(::TSD::BezierPathSourceArchive)},
  { 61, 71, sizeof(::TSD::CalloutPathSourceArchive)},
  { 76, 85, sizeof(::TSD::ConnectionLinePathSourceArchive)},
  { 89, 98, sizeof(::TSD::EditableBezierPathSourceArchive_Node)},
  { 102, 109, sizeof(::TSD::EditableBezierPathSourceArchive_Subpath)},
  { 111, 118, sizeof(::TSD::EditableBezierPathSourceArchive)},
  { 120, 135, sizeof(::TSD::PathSourceArchive)},
  { 145, 151, sizeof(::TSD::AngleGradientArchive)},
  { 152, 160, sizeof(::TSD::TransformGradientArchive)},
  { 163, 171, sizeof(::TSD::GradientArchive_GradientStop)},
  { 174, 185, sizeof(::TSD::GradientArchive)},
  { 191, 205, sizeof(::TSD::ImageFillArchive)},
  { 214, 222, sizeof(::TSD::FillArchive)},
  { 225, 234, sizeof(::TSD::StrokePatternArchive)},
  { 238, 252, sizeof(::TSD::StrokeArchive)},
  { 261, 270, sizeof(::TSD::SmartStrokeArchive)},
  { 274, 281, sizeof(::TSD::FrameArchive)},
  { 283, 289, sizeof(::TSD::PatternedStrokeArchive)},
  { 290, 300, sizeof(::TSD::LineEndArchive)},
  { 305, 320, sizeof(::TSD::ShadowArchive)},
  { 330, -1, sizeof(::TSD::DropShadowArchive)},
  { 335, 342, sizeof(::TSD::ContactShadowArchive)},
  { 344, 350, sizeof(::TSD::CurvedShadowArchive)},
  { 351, 357, sizeof(::TSD::ReflectionArchive)},
  { 358, 377, sizeof(::TSD::ImageAdjustmentsArchive)},
  { 391, 403, sizeof(::TSD::ShapeStylePropertiesArchive)},
  { 410, 418, sizeof(::TSD::ShapeStyleArchive)},
  { 421, 430, sizeof(::TSD::MediaStylePropertiesArchive)},
  { 434, 442, sizeof(::TSD::MediaStyleArchive)},
  { 445, -1, sizeof(::TSD::ThemePresetsArchive)},
  { 459, 469, sizeof(::TSD::ThemeReplaceFillPresetCommandArchive)},
  { 474, 492, sizeof(::TSD::DrawableArchive)},
  { 505, 513, sizeof(::TSD::ContainerArchive)},
  { 516, 524, sizeof(::TSD::GroupArchive)},
  { 527, 534, sizeof(::TSD::FreehandDrawingAnimationArchive)},
  { 536, 544, sizeof(::TSD::FreehandDrawingArchive)},
  { 547, 558, sizeof(::TSD::ShapeArchive)},
  { 564, 574, sizeof(::TSD::ConnectionLineArchive)},
  { 579, 605, sizeof(::TSD::ImageArchive)},
  { 626, 633, sizeof(::TSD::MaskArchive)},
  { 635, 643, sizeof(::TSD::ImageDataAttributes)},
  { 646, 680, sizeof(::TSD::MovieArchive)},
  { 709, 720, sizeof(::TSD::ExteriorTextWrapArchive)},
  { 726, 735, sizeof(::TSD::DrawableContentDescription)},
  { 739, 746, sizeof(::TSD::FreehandDrawingContentDescription)},
  { 748, 768, sizeof(::TSD::FreehandDrawingToolkitUIState)},
  { 783, -1, sizeof(::TSD::StandinCaptionArchive)},
  { 788, 799, sizeof(::TSD::GuideArchive)},
  { 805, 812, sizeof(::TSD::UserDefinedGuideArchive)},
  { 814, -1, sizeof(::TSD::GuideStorageArchive)},
  { 820, 828, sizeof(::TSD::CanvasSelectionArchive)},
  { 831, -1, sizeof(::TSD::DrawableSelectionArchive)},
  { 838, 845, sizeof(::TSD::GroupSelectionArchive)},
  { 847, -1, sizeof(::TSD::PathSelectionArchive)},
  { 852, -1, sizeof(::TSD::InfoHyperlinkSelectionArchive)},
  { 857, 866, sizeof(::TSD::CommentStorageArchive)},
  { 870, 878, sizeof(::TSD::ReplaceAnnotationAuthorCommandArchive)},
  { 881, 887, sizeof(::TSD::PencilAnnotationArchive)},
  { 888, 894, sizeof(::TSD::PencilAnnotationSelectionArchive)},
  { 895, 924, sizeof(::TSD::PencilAnnotationStorageArchive)},
  { 948, 954, sizeof(::TSD::SpecColorFillSetColorArchive)},
  { 955, 961, sizeof(::TSD::SpecFrameSetAssetScaleArchive)},
  { 962, 968, sizeof(::TSD::SpecGradientFillSetAngleArchive)},
  { 969, 975, sizeof(::TSD::SpecImageFillSetTechniqueArchive)},
  { 976, 982, sizeof(::TSD::SpecReflectionSetOpacityArchive)},
  { 983, 989, sizeof(::TSD::SpecShadowSetAngleArchive)},
  { 990, 996, sizeof(::TSD::SpecShadowSetColorArchive)},
  { 997, 1003, sizeof(::TSD::SpecShadowSetOffsetArchive)},
  { 1004, 1010, sizeof(::TSD::SpecShadowSetOpacityArchive)},
  { 1011, 1017, sizeof(::TSD::SpecShadowSetRadiusArchive)},
  { 1018, 1024, sizeof(::TSD::SpecStrokeSetColorArchive)},
  { 1025, 1036, sizeof(::TSD::SpecStrokeSetPatternArchive)},
  { 1042, 1048, sizeof(::TSD::SpecStrokeSetWidthArchive)},
  { 1049, 1059, sizeof(::TSD::Attribution)},
  { 1064, -1, sizeof(::TSD::MovieFingerprint)},
  { 1071, 1096, sizeof(::TSD::MovieFingerprintTrack)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_EdgeInsetsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_GeometryArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_PointPathSourceArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ScalarPathSourceArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_BezierPathSourceArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_CalloutPathSourceArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ConnectionLinePathSourceArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_EditableBezierPathSourceArchive_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_EditableBezierPathSourceArchive_Subpath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_EditableBezierPathSourceArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_PathSourceArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_AngleGradientArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_TransformGradientArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_GradientArchive_GradientStop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_GradientArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ImageFillArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_FillArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_StrokePatternArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_StrokeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_SmartStrokeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_FrameArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_PatternedStrokeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_LineEndArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ShadowArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_DropShadowArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ContactShadowArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_CurvedShadowArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ReflectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ImageAdjustmentsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ShapeStylePropertiesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ShapeStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_MediaStylePropertiesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_MediaStyleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ThemePresetsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ThemeReplaceFillPresetCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_DrawableArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ContainerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_GroupArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_FreehandDrawingAnimationArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_FreehandDrawingArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ShapeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ConnectionLineArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ImageArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_MaskArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ImageDataAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_MovieArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ExteriorTextWrapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_DrawableContentDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_FreehandDrawingContentDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_FreehandDrawingToolkitUIState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_StandinCaptionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_GuideArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_UserDefinedGuideArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_GuideStorageArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_CanvasSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_DrawableSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_GroupSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_PathSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_InfoHyperlinkSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_CommentStorageArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_ReplaceAnnotationAuthorCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_PencilAnnotationArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_PencilAnnotationSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_PencilAnnotationStorageArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_SpecColorFillSetColorArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_SpecFrameSetAssetScaleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_SpecGradientFillSetAngleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_SpecImageFillSetTechniqueArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_SpecReflectionSetOpacityArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_SpecShadowSetAngleArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_SpecShadowSetColorArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_SpecShadowSetOffsetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_SpecShadowSetOpacityArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_SpecShadowSetRadiusArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_SpecStrokeSetColorArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_SpecStrokeSetPatternArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_SpecStrokeSetWidthArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_Attribution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_MovieFingerprint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSD::_MovieFingerprintTrack_default_instance_),
};

const char descriptor_table_protodef_TSDArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021TSDArchives.proto\022\003TSD\032\021TSPMessages.pr"
  "oto\032\021TSKArchives.proto\032\021TSSArchives.prot"
  "o\"M\n\021EdgeInsetsArchive\022\013\n\003top\030\001 \002(\002\022\014\n\004l"
  "eft\030\002 \002(\002\022\016\n\006bottom\030\003 \002(\002\022\r\n\005right\030\004 \002(\002"
  "\"f\n\017GeometryArchive\022\034\n\010position\030\001 \001(\0132\n."
  "TSP.Point\022\027\n\004size\030\002 \001(\0132\t.TSP.Size\022\r\n\005fl"
  "ags\030\003 \001(\r\022\r\n\005angle\030\004 \001(\002\"\216\002\n\026PointPathSo"
  "urceArchive\022=\n\004type\030\001 \001(\0162/.TSD.PointPat"
  "hSourceArchive.PointPathSourceType\022\031\n\005po"
  "int\030\002 \001(\0132\n.TSP.Point\022\036\n\013naturalSize\030\003 \001"
  "(\0132\t.TSP.Size\"z\n\023PointPathSourceType\022\027\n\023"
  "kTSDLeftSingleArrow\020\000\022\030\n\024kTSDRightSingle"
  "Arrow\020\001\022\023\n\017kTSDDoubleArrow\020\n\022\014\n\010kTSDStar"
  "\020d\022\r\n\010kTSDPlus\020\310\001\"\202\002\n\027ScalarPathSourceAr"
  "chive\022\?\n\004type\030\001 \001(\01621.TSD.ScalarPathSour"
  "ceArchive.ScalarPathSourceType\022\016\n\006scalar"
  "\030\002 \001(\002\022\036\n\013naturalSize\030\003 \001(\0132\t.TSP.Size\022\033"
  "\n\023is_curve_continuous\030\004 \001(\010\"Y\n\024ScalarPat"
  "hSourceType\022\030\n\024kTSDRoundedRectangle\020\000\022\026\n"
  "\022kTSDRegularPolygon\020\001\022\017\n\013kTSDChevron\020\002\"k"
  "\n\027BezierPathSourceArchive\022\027\n\013path_string"
  "\030\001 \001(\tB\002\030\001\022\036\n\013naturalSize\030\002 \001(\0132\t.TSP.Si"
  "ze\022\027\n\004path\030\003 \001(\0132\t.TSP.Path\"\235\001\n\030CalloutP"
  "athSourceArchive\022\037\n\014natural_size\030\001 \001(\0132\t"
  ".TSP.Size\022!\n\rtail_position\030\002 \001(\0132\n.TSP.P"
  "oint\022\021\n\ttail_size\030\003 \001(\002\022\025\n\rcorner_radius"
  "\030\004 \001(\002\022\023\n\013center_tail\030\005 \001(\010\"\262\002\n\037Connecti"
  "onLinePathSourceArchive\022+\n\005super\030\001 \002(\0132\034"
  ".TSD.BezierPathSourceArchive\022O\n\004type\030\002 \001"
  "(\0162A.TSD.ConnectionLinePathSourceArchive"
  ".ConnectionLinePathSourceType\022\023\n\013outset_"
  "from\030\003 \001(\002\022\021\n\toutset_to\030\004 \001(\002\"i\n\034Connect"
  "ionLinePathSourceType\022#\n\037kTSDConnectionL"
  "ineTypeQuadratic\020\000\022$\n kTSDConnectionLine"
  "TypeOrthogonal\020\001\"\263\003\n\037EditableBezierPathS"
  "ourceArchive\022>\n\010subpaths\030\001 \003(\0132,.TSD.Edi"
  "tableBezierPathSourceArchive.Subpath\022\036\n\013"
  "naturalSize\030\002 \001(\0132\t.TSP.Size\032\253\001\n\004Node\022\"\n"
  "\016inControlPoint\030\001 \002(\0132\n.TSP.Point\022\035\n\tnod"
  "ePoint\030\002 \002(\0132\n.TSP.Point\022#\n\017outControlPo"
  "int\030\003 \002(\0132\n.TSP.Point\022;\n\004type\030\004 \002(\0162-.TS"
  "D.EditableBezierPathSourceArchive.NodeTy"
  "pe\032S\n\007Subpath\0228\n\005nodes\030\001 \003(\0132).TSD.Edita"
  "bleBezierPathSourceArchive.Node\022\016\n\006close"
  "d\030\002 \002(\010\"-\n\010NodeType\022\t\n\005sharp\020\001\022\n\n\006bezier"
  "\020\002\022\n\n\006smooth\020\003\"\361\003\n\021PathSourceArchive\022\026\n\016"
  "horizontalFlip\030\001 \001(\010\022\024\n\014verticalFlip\030\002 \001"
  "(\010\0226\n\021point_path_source\030\003 \001(\0132\033.TSD.Poin"
  "tPathSourceArchive\0228\n\022scalar_path_source"
  "\030\004 \001(\0132\034.TSD.ScalarPathSourceArchive\0228\n\022"
  "bezier_path_source\030\005 \001(\0132\034.TSD.BezierPat"
  "hSourceArchive\022:\n\023callout_path_source\030\006 "
  "\001(\0132\035.TSD.CalloutPathSourceArchive\022I\n\033co"
  "nnection_line_path_source\030\007 \001(\0132$.TSD.Co"
  "nnectionLinePathSourceArchive\022I\n\033editabl"
  "e_bezier_path_source\030\010 \001(\0132$.TSD.Editabl"
  "eBezierPathSourceArchive\022\027\n\017localization"
  "Key\030\t \001(\t\022\027\n\017userDefinedName\030\n \001(\t\"-\n\024An"
  "gleGradientArchive\022\025\n\rgradientangle\030\002 \001("
  "\002\"r\n\030TransformGradientArchive\022\031\n\005start\030\001"
  " \001(\0132\n.TSP.Point\022\027\n\003end\030\002 \001(\0132\n.TSP.Poin"
  "t\022\"\n\017baseNaturalSize\030\003 \001(\0132\t.TSP.Size\"\204\003"
  "\n\017GradientArchive\022/\n\004type\030\001 \001(\0162!.TSD.Gr"
  "adientArchive.GradientType\0220\n\005stops\030\002 \003("
  "\0132!.TSD.GradientArchive.GradientStop\022\017\n\007"
  "opacity\030\003 \001(\002\022\030\n\020advancedGradient\030\004 \001(\010\022"
  "0\n\ranglegradient\030\005 \001(\0132\031.TSD.AngleGradie"
  "ntArchive\0228\n\021transformgradient\030\006 \001(\0132\035.T"
  "SD.TransformGradientArchive\032O\n\014GradientS"
  "top\022\031\n\005color\030\001 \001(\0132\n.TSP.Color\022\020\n\010fracti"
  "on\030\002 \001(\002\022\022\n\ninflection\030\003 \001(\002\"&\n\014Gradient"
  "Type\022\n\n\006Linear\020\000\022\n\n\006Radial\020\001\"\376\003\n\020ImageFi"
  "llArchive\022%\n\timagedata\030\006 \001(\0132\022.TSP.DataR"
  "eference\022H\n\ttechnique\030\002 \001(\0162(.TSD.ImageF"
  "illArchive.ImageFillTechnique:\013NaturalSi"
  "ze\022\030\n\004tint\030\003 \001(\0132\n.TSP.Color\022\033\n\010fillsize"
  "\030\004 \001(\0132\t.TSP.Size\0221\n\021originalimagedata\030\007"
  " \001(\0132\022.TSP.DataReferenceB\002\030\001\022,\n$interpre"
  "tsUntaggedImageDataAsGeneric\030\010 \001(\010\022\"\n\016re"
  "ferencecolor\030\t \001(\0132\n.TSP.Color\022*\n\022databa"
  "se_imagedata\030\001 \001(\0132\016.TSP.Reference\0222\n\032da"
  "tabase_originalimagedata\030\005 \001(\0132\016.TSP.Ref"
  "erence\"]\n\022ImageFillTechnique\022\017\n\013NaturalS"
  "ize\020\000\022\013\n\007Stretch\020\001\022\010\n\004Tile\020\002\022\017\n\013ScaleToF"
  "ill\020\003\022\016\n\nScaleToFit\020\004\"\200\001\n\013FillArchive\022\031\n"
  "\005color\030\001 \001(\0132\n.TSP.Color\022&\n\010gradient\030\002 \001"
  "(\0132\024.TSD.GradientArchive\022$\n\005image\030\003 \001(\0132"
  "\025.TSD.ImageFillArchive*\010\010d\020\200\200\200\200\002\"\317\001\n\024Str"
  "okePatternArchive\0229\n\004type\030\001 \001(\0162+.TSD.St"
  "rokePatternArchive.StrokePatternType\022\r\n\005"
  "phase\030\002 \001(\002\022\r\n\005count\030\003 \001(\r\022\017\n\007pattern\030\004 "
  "\003(\002\"M\n\021StrokePatternType\022\016\n\nTSDPattern\020\000"
  "\022\023\n\017TSDSolidPattern\020\001\022\023\n\017TSDEmptyPattern"
  "\020\002\"\375\002\n\rStrokeArchive\022\031\n\005color\030\001 \001(\0132\n.TS"
  "P.Color\022\r\n\005width\030\002 \001(\002\022\'\n\003cap\030\003 \001(\0162\032.TS"
  "D.StrokeArchive.LineCap\022\033\n\004join\030\004 \001(\0162\r."
  "TSD.LineJoin\022\023\n\013miter_limit\030\005 \001(\002\022*\n\007pat"
  "tern\030\006 \001(\0132\031.TSD.StrokePatternArchive\022-\n"
  "\014smart_stroke\030\007 \001(\0132\027.TSD.SmartStrokeArc"
  "hive\022 \n\005frame\030\010 \001(\0132\021.TSD.FrameArchive\0225"
  "\n\020patterned_stroke\030\t \001(\0132\033.TSD.Patterned"
  "StrokeArchive\"3\n\007LineCap\022\013\n\007ButtCap\020\000\022\014\n"
  "\010RoundCap\020\001\022\r\n\tSquareCap\020\002\"\222\001\n\022SmartStro"
  "keArchive\022\023\n\013stroke_name\030\002 \001(\t\022\023\n\013random"
  "_seed\030\003 \001(\r\0221\n\017parameterValues\030\004 \001(\0132\030.T"
  "SP.ReferenceDictionary\022\037\n\027pattern_offset"
  "_distance\030\005 \001(\001\"5\n\014FrameArchive\022\021\n\tframe"
  "Name\030\002 \001(\t\022\022\n\nassetScale\030\003 \001(\002\".\n\026Patter"
  "nedStrokeArchive\022\024\n\014pattern_name\030\002 \001(\t\"\234"
  "\001\n\016LineEndArchive\022\027\n\004path\030\001 \001(\0132\t.TSP.Pa"
  "th\022+\n\tline_join\030\002 \001(\0162\r.TSD.LineJoin:\tMi"
  "terJoin\022\035\n\tend_point\030\003 \001(\0132\n.TSP.Point\022\021"
  "\n\tis_filled\030\004 \001(\010\022\022\n\nidentifier\030\005 \001(\t\"\250\003"
  "\n\rShadowArchive\022\031\n\005color\030\001 \001(\0132\n.TSP.Col"
  "or\022\022\n\005angle\030\002 \001(\002:\003315\022\021\n\006offset\030\003 \001(\002:\001"
  "5\022\021\n\006radius\030\004 \001(\005:\0011\022\022\n\007opacity\030\005 \001(\002:\0011"
  "\022\030\n\nis_enabled\030\006 \001(\010:\004true\022:\n\004type\030\007 \001(\016"
  "2\035.TSD.ShadowArchive.ShadowType:\rTSDDrop"
  "Shadow\022*\n\ndropShadow\030\010 \001(\0132\026.TSD.DropSha"
  "dowArchive\0220\n\rcontactShadow\030\t \001(\0132\031.TSD."
  "ContactShadowArchive\022.\n\014curvedShadow\030\n \001"
  "(\0132\030.TSD.CurvedShadowArchive\"J\n\nShadowTy"
  "pe\022\021\n\rTSDDropShadow\020\000\022\024\n\020TSDContactShado"
  "w\020\001\022\023\n\017TSDCurvedShadow\020\002\"\023\n\021DropShadowAr"
  "chive\">\n\024ContactShadowArchive\022\023\n\006height\030"
  "\002 \001(\002:\0030.2\022\021\n\006offset\030\004 \001(\002:\0010\")\n\023CurvedS"
  "hadowArchive\022\022\n\005curve\030\001 \001(\002:\0030.6\")\n\021Refl"
  "ectionArchive\022\024\n\007opacity\030\001 \001(\002:\0030.5\"\274\002\n\027"
  "ImageAdjustmentsArchive\022\020\n\010exposure\030\001 \001("
  "\002\022\022\n\nsaturation\030\002 \001(\002\022\020\n\010contrast\030\003 \001(\002\022"
  "\022\n\nhighlights\030\004 \001(\002\022\017\n\007shadows\030\005 \001(\002\022\021\n\t"
  "sharpness\030\006 \001(\002\022\017\n\007denoise\030\007 \001(\002\022\023\n\013temp"
  "erature\030\010 \001(\002\022\014\n\004tint\030\t \001(\002\022\024\n\014bottom_le"
  "vel\030\n \001(\002\022\024\n\ttop_level\030\013 \001(\002:\0011\022\r\n\005gamma"
  "\030\014 \001(\002\022\026\n\007enhance\030\r \001(\010:\005false\022*\n\033repres"
  "ents_sage_adjustments\030\016 \001(\010:\005false\"\232\002\n\033S"
  "hapeStylePropertiesArchive\022\036\n\004fill\030\001 \001(\013"
  "2\020.TSD.FillArchive\022\"\n\006stroke\030\002 \001(\0132\022.TSD"
  ".StrokeArchive\022\017\n\007opacity\030\003 \001(\002\022\"\n\006shado"
  "w\030\004 \001(\0132\022.TSD.ShadowArchive\022*\n\nreflectio"
  "n\030\005 \001(\0132\026.TSD.ReflectionArchive\022*\n\rhead_"
  "line_end\030\006 \001(\0132\023.TSD.LineEndArchive\022*\n\rt"
  "ail_line_end\030\007 \001(\0132\023.TSD.LineEndArchive\""
  "\214\001\n\021ShapeStyleArchive\022 \n\005super\030\001 \002(\0132\021.T"
  "SS.StyleArchive\022\031\n\016override_count\030\n \001(\r:"
  "\0010\022:\n\020shape_properties\030\013 \001(\0132 .TSD.Shape"
  "StylePropertiesArchive\"\242\001\n\033MediaStylePro"
  "pertiesArchive\022\"\n\006stroke\030\001 \001(\0132\022.TSD.Str"
  "okeArchive\022\017\n\007opacity\030\002 \001(\002\022\"\n\006shadow\030\003 "
  "\001(\0132\022.TSD.ShadowArchive\022*\n\nreflection\030\004 "
  "\001(\0132\026.TSD.ReflectionArchive\"\214\001\n\021MediaSty"
  "leArchive\022 \n\005super\030\001 \002(\0132\021.TSS.StyleArch"
  "ive\022\031\n\016override_count\030\n \001(\r:\0010\022:\n\020media_"
  "properties\030\013 \001(\0132 .TSD.MediaStylePropert"
  "iesArchive\"\366\003\n\023ThemePresetsArchive\022/\n\025gr"
  "adient_fill_presets\030\001 \003(\0132\020.TSD.FillArch"
  "ive\022,\n\022image_fill_presets\030\002 \003(\0132\020.TSD.Fi"
  "llArchive\022*\n\016shadow_presets\030\003 \003(\0132\022.TSD."
  "ShadowArchive\022*\n\022line_style_presets\030\004 \003("
  "\0132\016.TSP.Reference\022+\n\023shape_style_presets"
  "\030\005 \003(\0132\016.TSP.Reference\022-\n\025textbox_style_"
  "presets\030\006 \003(\0132\016.TSP.Reference\022+\n\023image_s"
  "tyle_presets\030\007 \003(\0132\016.TSP.Reference\022+\n\023mo"
  "vie_style_presets\030\010 \003(\0132\016.TSP.Reference\022"
  "2\n\032drawing_line_style_presets\030\t \003(\0132\016.TS"
  "P.Reference2>\n\textension\022\021.TSS.ThemeArch"
  "ive\030d \001(\0132\030.TSD.ThemePresetsArchive\"\274\001\n$"
  "ThemeReplaceFillPresetCommandArchive\022\"\n\005"
  "super\030\001 \002(\0132\023.TSK.CommandArchive\022\035\n\005them"
  "e\030\002 \002(\0132\016.TSP.Reference\022\036\n\004fill\030\003 \002(\0132\020."
  "TSD.FillArchive\022\"\n\010old_fill\030\004 \002(\0132\020.TSD."
  "FillArchive\022\r\n\005index\030\005 \002(\r\"\265\003\n\017DrawableA"
  "rchive\022&\n\010geometry\030\001 \001(\0132\024.TSD.GeometryA"
  "rchive\022\036\n\006parent\030\002 \001(\0132\016.TSP.Reference\0228"
  "\n\022exterior_text_wrap\030\003 \001(\0132\034.TSD.Exterio"
  "rTextWrapArchive\022\025\n\rhyperlink_url\030\004 \001(\t\022"
  "\016\n\006locked\030\005 \001(\010\022\037\n\007comment\030\006 \001(\0132\016.TSP.R"
  "eference\022\033\n\023aspect_ratio_locked\030\007 \001(\010\022!\n"
  "\031accessibility_description\030\010 \001(\t\022*\n\022penc"
  "il_annotations\030\t \003(\0132\016.TSP.Reference\022\035\n\005"
  "title\030\n \001(\0132\016.TSP.Reference\022\037\n\007caption\030\013"
  " \001(\0132\016.TSP.Reference\022\024\n\014title_hidden\030\014 \001"
  "(\010\022\026\n\016caption_hidden\030\r \001(\010\"|\n\020ContainerA"
  "rchive\022&\n\010geometry\030\001 \001(\0132\024.TSD.GeometryA"
  "rchive\022\036\n\006parent\030\002 \001(\0132\016.TSP.Reference\022 "
  "\n\010children\030\003 \003(\0132\016.TSP.Reference\"\223\001\n\014Gro"
  "upArchive\022#\n\005super\030\001 \002(\0132\024.TSD.DrawableA"
  "rchive\022 \n\010children\030\002 \003(\0132\016.TSP.Reference"
  "\0222\n\032fake_shape_for_empty_group\030\003 \001(\0132\016.T"
  "SP.Reference*\010\010d\020\200\200\200\200\002\"H\n\037FreehandDrawin"
  "gAnimationArchive\022\020\n\010duration\030\001 \001(\001\022\023\n\013s"
  "hould_loop\030\002 \001(\010\"\332\001\n\026FreehandDrawingArch"
  "ive\022$\n\014spacer_shape\030\001 \001(\0132\016.TSP.Referenc"
  "e\022\017\n\007opacity\030\002 \001(\001\0227\n\tanimation\030\003 \001(\0132$."
  "TSD.FreehandDrawingAnimationArchive2P\n\030f"
  "reehand_drawing_archive\022\021.TSD.GroupArchi"
  "ve\030d \001(\0132\033.TSD.FreehandDrawingArchive\"\203\002"
  "\n\014ShapeArchive\022#\n\005super\030\001 \002(\0132\024.TSD.Draw"
  "ableArchive\022\035\n\005style\030\002 \001(\0132\016.TSP.Referen"
  "ce\022*\n\npathsource\030\003 \001(\0132\026.TSD.PathSourceA"
  "rchive\022.\n\rhead_line_end\030\004 \001(\0132\023.TSD.Line"
  "EndArchiveB\002\030\001\022.\n\rtail_line_end\030\005 \001(\0132\023."
  "TSD.LineEndArchiveB\002\030\001\022#\n\033strokePatternO"
  "ffsetDistance\030\006 \001(\002\"\325\001\n\025ConnectionLineAr"
  "chive\022 \n\005super\030\001 \002(\0132\021.TSD.ShapeArchive\022"
  "&\n\016connected_from\030\002 \001(\0132\016.TSP.Reference\022"
  "$\n\014connected_to\030\003 \001(\0132\016.TSP.Reference\022$\n"
  "\021connected_to_uuid\030\004 \001(\0132\t.TSP.UUID\022&\n\023c"
  "onnected_from_uuid\030\005 \001(\0132\t.TSP.UUID\"\316\006\n\014"
  "ImageArchive\022#\n\005super\030\001 \002(\0132\024.TSD.Drawab"
  "leArchive\022 \n\004data\030\013 \001(\0132\022.TSP.DataRefere"
  "nce\022\035\n\005style\030\003 \001(\0132\016.TSP.Reference\022\037\n\014or"
  "iginalSize\030\004 \001(\0132\t.TSP.Size\022\034\n\004mask\030\005 \001("
  "\0132\016.TSP.Reference\022)\n\rthumbnailData\030\014 \001(\013"
  "2\022.TSP.DataReference\022\r\n\005flags\030\007 \001(\r\022(\n\014o"
  "riginalData\030\r \001(\0132\022.TSP.DataReference\022\036\n"
  "\013naturalSize\030\t \001(\0132\t.TSP.Size\022#\n\020instant"
  "AlphaPath\030\n \001(\0132\t.TSP.Path\0226\n\020imageAdjus"
  "tments\030\016 \001(\0132\034.TSD.ImageAdjustmentsArchi"
  "ve\022-\n\021enhancedImageData\030\021 \001(\0132\022.TSP.Data"
  "Reference\022-\n\021adjustedImageData\030\017 \001(\0132\022.T"
  "SP.DataReference\0226\n\032thumbnailAdjustedIma"
  "geData\030\020 \001(\0132\022.TSP.DataReference\022,\n$inte"
  "rpretsUntaggedImageDataAsGeneric\030\022 \001(\010\022%"
  "\n\rdatabase_data\030\002 \001(\0132\016.TSP.Reference\022.\n"
  "\026database_thumbnailData\030\006 \001(\0132\016.TSP.Refe"
  "rence\022-\n\025database_originalData\030\010 \001(\0132\016.T"
  "SP.Reference\022\036\n\013traced_path\030\023 \001(\0132\t.TSP."
  "Path\022%\n\013attribution\030\024 \001(\0132\020.TSD.Attribut"
  "ion\022 \n\030should_trace_pdf_content\030\025 \001(\010*\005\010"
  "d\020\350\007\"^\n\013MaskArchive\022#\n\005super\030\001 \002(\0132\024.TSD"
  ".DrawableArchive\022*\n\npathsource\030\002 \001(\0132\026.T"
  "SD.PathSourceArchive\"\317\001\n\023ImageDataAttrib"
  "utes\022\035\n\npixel_size\030\001 \001(\0132\t.TSP.Size\022\025\n\ri"
  "mage_is_srgb\030\002 \001(\010\0224\n,should_be_interpre"
  "ted_as_generic_if_untagged\030\003 \001(\0102L\n\025imag"
  "e_data_attributes\022\023.TSP.DataAttributes\030d"
  " \001(\0132\030.TSD.ImageDataAttributes\"\266\010\n\014Movie"
  "Archive\022#\n\005super\030\001 \002(\0132\024.TSD.DrawableArc"
  "hive\022%\n\tmovieData\030\016 \001(\0132\022.TSP.DataRefere"
  "nce\0226\n\032importedAuxiliaryMovieData\030\026 \001(\0132"
  "\022.TSP.DataReference\0227\n/imported_auxiliar"
  "y_movie_data_original_filename\030\031 \001(\t\022\026\n\016"
  "movieRemoteURL\030\021 \001(\t\022\021\n\tstartTime\030\003 \001(\002\022"
  "\017\n\007endTime\030\004 \001(\002\022\022\n\nposterTime\030\005 \001(\002\022\037\n\023"
  "loopOptionAsInteger\030\006 \001(\rB\002\030\001\022<\n\013loop_op"
  "tion\030\030 \001(\0162!.TSD.MovieArchive.MovieLoopO"
  "ption:\004None\022\016\n\006volume\030\007 \001(\002\022\024\n\010autoPlay\030"
  "\010 \001(\010B\002\030\001\022\021\n\taudioOnly\030\t \001(\010\022\021\n\tstreamin"
  "g\030\022 \001(\010\022\034\n\024nativeAudioRecording\030\033 \001(\010\022\031\n"
  "\021playsAcrossSlides\030\034 \001(\010\022+\n\017posterImageD"
  "ata\030\017 \001(\0132\022.TSP.DataReference\022.\n\022audioOn"
  "lyImageData\030\020 \001(\0132\022.TSP.DataReference\0221\n"
  ")poster_image_generated_with_alpha_suppo"
  "rt\030\027 \001(\010\022\025\n\rplayableState\030\014 \001(\r\022\r\n\005flags"
  "\030\r \001(\r\022*\n\022database_movieData\030\002 \001(\0132\016.TSP"
  ".Reference\0220\n\030database_posterImageData\030\n"
  " \001(\0132\016.TSP.Reference\0223\n\033database_audioOn"
  "lyImageData\030\013 \001(\0132\016.TSP.Reference\022\035\n\005sty"
  "le\030\023 \001(\0132\016.TSP.Reference\022\037\n\014originalSize"
  "\030\024 \001(\0132\t.TSP.Size\022\036\n\013naturalSize\030\025 \001(\0132\t"
  ".TSP.Size\022%\n\013attribution\030\032 \001(\0132\020.TSD.Att"
  "ribution\022*\n\013fingerprint\030\035 \001(\0132\025.TSD.Movi"
  "eFingerprint\"9\n\017MovieLoopOption\022\010\n\004None\020"
  "\000\022\n\n\006Repeat\020\001\022\020\n\014BackAndForth\020\002\"\213\001\n\027Exte"
  "riorTextWrapArchive\022\014\n\004type\030\001 \001(\r\022\021\n\tdir"
  "ection\030\002 \001(\r\022\020\n\010fit_type\030\003 \001(\r\022\016\n\006margin"
  "\030\004 \001(\002\022\027\n\017alpha_threshold\030\005 \001(\002\022\024\n\014is_ht"
  "ml_wrap\030\006 \001(\010\"\214\001\n\032DrawableContentDescrip"
  "tion\022\024\n\014element_kind\030\001 \001(\r\022\033\n\023is_anchore"
  "d_to_text\030\002 \001(\010\022\036\n\026is_floating_above_tex"
  "t\030\003 \001(\010\022\033\n\023is_inline_with_text\030\004 \001(\010\"{\n!"
  "FreehandDrawingContentDescription\022.\n\005sup"
  "er\030\001 \002(\0132\037.TSD.DrawableContentDescriptio"
  "n\022&\n\036source_doc_wanted_spacer_shape\030\002 \001("
  "\010\"\321\005\n\035FreehandDrawingToolkitUIState\022%\n\rc"
  "urrent_color\030\001 \001(\0132\n.TSP.ColorB\002\030\001\022i\n mo"
  "st_recent_restorable_tool_type\030\002 \001(\0162:.T"
  "SD.FreehandDrawingToolkitUIState.Freehan"
  "dDrawingToolType:\003Pen\022\030\n\020pen_tool_opacit"
  "y\030\003 \001(\002\022\037\n\027pen_tool_unscaled_width\030\004 \001(\002"
  "\022\033\n\023pencil_tool_opacity\030\005 \001(\002\022\"\n\032pencil_"
  "tool_unscaled_width\030\006 \001(\002\022\033\n\023crayon_tool"
  "_opacity\030\007 \001(\002\022\"\n\032crayon_tool_unscaled_w"
  "idth\030\010 \001(\002\022\031\n\021fill_tool_opacity\030\t \001(\002\022 \n"
  "\030eraser_tool_scaled_width\030\n \001(\002\022(\n erase"
  "r_tool_erases_whole_objects\030\013 \001(\010\022\"\n\016pen"
  "_tool_color\030\014 \001(\0132\n.TSP.Color\022%\n\021pencil_"
  "tool_color\030\r \001(\0132\n.TSP.Color\022%\n\021crayon_t"
  "ool_color\030\016 \001(\0132\n.TSP.Color\022#\n\017fill_tool"
  "_color\030\017 \001(\0132\n.TSP.Color\"c\n\027FreehandDraw"
  "ingToolType\022\007\n\003Pen\020\000\022\n\n\006Pencil\020\001\022\n\n\006Cray"
  "on\020\002\022\010\n\004Fill\020\003\022\n\n\006Eraser\020\004\022\021\n\rMarqueeSel"
  "ect\020\005\"\027\n\025StandinCaptionArchive\"\263\001\n\014Guide"
  "Archive\022)\n\004type\030\001 \001(\0162\033.TSD.GuideArchive"
  ".GuideType\022\016\n\006offset\030\002 \001(\002\022\r\n\005start\030\003 \001("
  "\002\022\013\n\003end\030\004 \001(\002\022\017\n\007dynamic\030\005 \001(\010\022\020\n\010infin"
  "ite\030\006 \001(\010\")\n\tGuideType\022\016\n\nHorizontal\020\000\022\014"
  "\n\010Vertical\020\001\"\214\001\n\027UserDefinedGuideArchive"
  "\0224\n\004type\030\001 \001(\0162&.TSD.UserDefinedGuideArc"
  "hive.GuideType\022\020\n\010position\030\002 \001(\002\")\n\tGuid"
  "eType\022\016\n\nHorizontal\020\000\022\014\n\010Vertical\020\001\"N\n\023G"
  "uideStorageArchive\0227\n\021userDefinedGuides\030"
  "\001 \003(\0132\034.TSD.UserDefinedGuideArchive\"\215\001\n\026"
  "CanvasSelectionArchive\022\035\n\005infos\030\001 \003(\0132\016."
  "TSP.Reference\022-\n\025non_interactive_infos\030\003"
  " \003(\0132\016.TSP.Reference\022%\n\tcontainer\030\002 \001(\0132"
  "\016.TSP.ReferenceB\002\030\001\"h\n\030DrawableSelection"
  "Archive\022\035\n\005infos\030\002 \003(\0132\016.TSP.Reference\022-"
  "\n\025non_interactive_infos\030\003 \003(\0132\016.TSP.Refe"
  "rence\"x\n\025GroupSelectionArchive\022,\n\005super\030"
  "\001 \002(\0132\035.TSD.DrawableSelectionArchive\0221\n)"
  "has_selected_infos_in_non_group_containe"
  "r\030\002 \001(\010\"\026\n\024PathSelectionArchive\"\037\n\035InfoH"
  "yperlinkSelectionArchive\"\210\001\n\025CommentStor"
  "ageArchive\022\014\n\004text\030\001 \001(\t\022 \n\rcreation_dat"
  "e\030\002 \001(\0132\t.TSP.Date\022\036\n\006author\030\003 \001(\0132\016.TSP"
  ".Reference\022\037\n\007replies\030\004 \003(\0132\016.TSP.Refere"
  "nce\"\251\001\n%ReplaceAnnotationAuthorCommandAr"
  "chive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchiv"
  "e\022-\n\025old_annotation_author\030\002 \001(\0132\016.TSP.R"
  "eference\022-\n\025new_annotation_author\030\003 \001(\0132"
  "\016.TSP.Reference\"L\n\027PencilAnnotationArchi"
  "ve\0221\n\031pencil_annotation_storage\030\001 \001(\0132\016."
  "TSP.Reference\"M\n PencilAnnotationSelecti"
  "onArchive\022)\n\021pencil_annotation\030\001 \001(\0132\016.T"
  "SP.Reference\"\306\007\n\036PencilAnnotationStorage"
  "Archive\022\031\n\021attached_location\030\001 \001(\005\022!\n\rma"
  "rkup_offset\030\002 \001(\0132\n.TSP.Point\022,\n\020rasteri"
  "zed_image\030\003 \001(\0132\022.TSP.DataReference\0222\n\026l"
  "egacy_encoded_drawing\030\004 \001(\0132\022.TSP.DataRe"
  "ference\022\037\n\014drawing_path\030\005 \001(\0132\t.TSP.Path"
  "\022/\n\033strokes_bounding_box_origin\030\006 \001(\0132\n."
  "TSP.Point\022,\n\031strokes_bounding_box_size\030\007"
  " \001(\0132\t.TSP.Size\022\025\n\rattached_type\030\010 \001(\005\022)"
  "\n\026original_attached_size\030\t \001(\0132\t.TSP.Siz"
  "e\022-\n%percent_of_pa_contained_in_parent_r"
  "ep\030\n \001(\001\022$\n\034text_baselines_touched_count"
  "\030\013 \001(\004\022\035\n\025visible_strokes_count\030\014 \001(\004\022\035\n"
  "\tpen_color\030\r \001(\0132\n.TSP.Color\022\021\n\ttool_typ"
  "e\030\016 \001(\005\022,\n\024callout_sub_storages\030\017 \003(\0132\016."
  "TSP.Reference\022 \n\rcreation_date\030\020 \001(\0132\t.T"
  "SP.Date\022\'\n\037pencil_annotation_drawing_sca"
  "le\030\021 \001(\001\022 \n\030compound_annotation_type\030\022 \001"
  "(\005\022$\n\014sub_storages\030\023 \003(\0132\016.TSP.Reference"
  "\022+\n\017encoded_drawing\030\024 \001(\0132\022.TSP.DataRefe"
  "rence\022.\n\032stroke_points_frame_origin\030\025 \001("
  "\0132\n.TSP.Point\022+\n\030stroke_points_frame_siz"
  "e\030\026 \001(\0132\t.TSP.Size\022)\n\025rendered_frame_ori"
  "gin\030\027 \001(\0132\n.TSP.Point\022&\n\023rendered_frame_"
  "size\030\030 \001(\0132\t.TSP.Size\"9\n\034SpecColorFillSe"
  "tColorArchive\022\031\n\005color\030\001 \002(\0132\n.TSP.Color"
  "\"4\n\035SpecFrameSetAssetScaleArchive\022\023\n\013ass"
  "et_scale\030\001 \002(\001\"0\n\037SpecGradientFillSetAng"
  "leArchive\022\r\n\005angle\030\001 \002(\001\"5\n SpecImageFil"
  "lSetTechniqueArchive\022\021\n\ttechnique\030\001 \002(\005\""
  "2\n\037SpecReflectionSetOpacityArchive\022\017\n\007op"
  "acity\030\001 \002(\001\"*\n\031SpecShadowSetAngleArchive"
  "\022\r\n\005angle\030\001 \002(\001\"6\n\031SpecShadowSetColorArc"
  "hive\022\031\n\005color\030\001 \002(\0132\n.TSP.Color\",\n\032SpecS"
  "hadowSetOffsetArchive\022\016\n\006offset\030\001 \002(\001\".\n"
  "\033SpecShadowSetOpacityArchive\022\017\n\007opacity\030"
  "\001 \002(\001\",\n\032SpecShadowSetRadiusArchive\022\016\n\006r"
  "adius\030\001 \002(\005\"6\n\031SpecStrokeSetColorArchive"
  "\022\031\n\005color\030\001 \002(\0132\n.TSP.Color\"\255\001\n\033SpecStro"
  "keSetPatternArchive\022\020\n\010line_cap\030\001 \001(\005\022\021\n"
  "\tline_join\030\002 \001(\005\022\023\n\013miter_limit\030\003 \001(\001\022\r\n"
  "\005width\030\004 \001(\001\022\031\n\005color\030\005 \001(\0132\n.TSP.Color\022"
  "*\n\007pattern\030\006 \002(\0132\031.TSD.StrokePatternArch"
  "ive\"*\n\031SpecStrokeSetWidthArchive\022\r\n\005widt"
  "h\030\001 \002(\001\"u\n\013Attribution\022\r\n\005title\030\001 \001(\t\022\030\n"
  "\020description_text\030\002 \001(\t\022\024\n\014external_url\030"
  "\003 \001(\t\022\023\n\013author_name\030\004 \001(\t\022\022\n\nauthor_url"
  "\030\005 \001(\t\"S\n\020MovieFingerprint\022*\n\006tracks\030\001 \003"
  "(\0132\032.TSD.MovieFingerprintTrack\022\023\n\007versio"
  "n\030\002 \003(\rB\002\020\001\"\205\005\n\025MovieFingerprintTrack\022\022\n"
  "\nmedia_type\030\001 \001(\t\022\017\n\007enabled\030\002 \001(\010\022 \n\030to"
  "tal_sample_data_length\030\003 \001(\003\022!\n\031sample_d"
  "ata_digest_string\030\004 \001(\t\022\036\n\026time_range_st"
  "art_value\030\005 \001(\003\022\"\n\032time_range_start_time"
  "scale\030\006 \001(\005\022!\n\031time_range_start_is_valid"
  "\030\007 \001(\010\022!\n\031time_range_duration_value\030\010 \001("
  "\003\022%\n\035time_range_duration_timescale\030\t \001(\005"
  "\022$\n\034time_range_duration_is_valid\030\n \001(\010\022\037"
  "\n\014natural_size\030\013 \001(\0132\t.TSP.Size\022\035\n\025prefe"
  "rred_transform_a\030\014 \001(\001\022\035\n\025preferred_tran"
  "sform_b\030\r \001(\001\022\035\n\025preferred_transform_c\030\016"
  " \001(\001\022\035\n\025preferred_transform_d\030\017 \001(\001\022\036\n\026p"
  "referred_transform_tx\030\020 \001(\001\022\036\n\026preferred"
  "_transform_ty\030\021 \001(\001\022\030\n\020preferred_volume\030"
  "\022 \001(\001\022\025\n\rlanguage_code\030\023 \001(\t\022\035\n\025extended"
  "_language_tag\030\024 \001(\t*7\n\010LineJoin\022\r\n\tMiter"
  "Join\020\000\022\r\n\tRoundJoin\020\001\022\r\n\tBevelJoin\020\002:A\n\004"
  "fill\022 .TSS.CommandPropertyEntryArchive\030\310"
  "\001 \001(\0132\020.TSD.FillArchive:E\n\006stroke\022 .TSS."
  "CommandPropertyEntryArchive\030\311\001 \001(\0132\022.TSD"
  ".StrokeArchive"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TSDArchives_2eproto_deps[3] = {
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TSDArchives_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSDArchives_2eproto = {
  false, false, 15854, descriptor_table_protodef_TSDArchives_2eproto, "TSDArchives.proto", 
  &descriptor_table_TSDArchives_2eproto_once, descriptor_table_TSDArchives_2eproto_deps, 3, 80,
  schemas, file_default_instances, TableStruct_TSDArchives_2eproto::offsets,
  file_level_metadata_TSDArchives_2eproto, file_level_enum_descriptors_TSDArchives_2eproto, file_level_service_descriptors_TSDArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TSDArchives_2eproto_getter() {
  return &descriptor_table_TSDArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TSDArchives_2eproto(&descriptor_table_TSDArchives_2eproto);
namespace TSD {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PointPathSourceArchive_PointPathSourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDArchives_2eproto);
  return file_level_enum_descriptors_TSDArchives_2eproto[0];
}
bool PointPathSourceArchive_PointPathSourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
    case 100:
    case 200:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PointPathSourceArchive_PointPathSourceType PointPathSourceArchive::kTSDLeftSingleArrow;
constexpr PointPathSourceArchive_PointPathSourceType PointPathSourceArchive::kTSDRightSingleArrow;
constexpr PointPathSourceArchive_PointPathSourceType PointPathSourceArchive::kTSDDoubleArrow;
constexpr PointPathSourceArchive_PointPathSourceType PointPathSourceArchive::kTSDStar;
constexpr PointPathSourceArchive_PointPathSourceType PointPathSourceArchive::kTSDPlus;
constexpr PointPathSourceArchive_PointPathSourceType PointPathSourceArchive::PointPathSourceType_MIN;
constexpr PointPathSourceArchive_PointPathSourceType PointPathSourceArchive::PointPathSourceType_MAX;
constexpr int PointPathSourceArchive::PointPathSourceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScalarPathSourceArchive_ScalarPathSourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDArchives_2eproto);
  return file_level_enum_descriptors_TSDArchives_2eproto[1];
}
bool ScalarPathSourceArchive_ScalarPathSourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ScalarPathSourceArchive_ScalarPathSourceType ScalarPathSourceArchive::kTSDRoundedRectangle;
constexpr ScalarPathSourceArchive_ScalarPathSourceType ScalarPathSourceArchive::kTSDRegularPolygon;
constexpr ScalarPathSourceArchive_ScalarPathSourceType ScalarPathSourceArchive::kTSDChevron;
constexpr ScalarPathSourceArchive_ScalarPathSourceType ScalarPathSourceArchive::ScalarPathSourceType_MIN;
constexpr ScalarPathSourceArchive_ScalarPathSourceType ScalarPathSourceArchive::ScalarPathSourceType_MAX;
constexpr int ScalarPathSourceArchive::ScalarPathSourceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionLinePathSourceArchive_ConnectionLinePathSourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDArchives_2eproto);
  return file_level_enum_descriptors_TSDArchives_2eproto[2];
}
bool ConnectionLinePathSourceArchive_ConnectionLinePathSourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConnectionLinePathSourceArchive_ConnectionLinePathSourceType ConnectionLinePathSourceArchive::kTSDConnectionLineTypeQuadratic;
constexpr ConnectionLinePathSourceArchive_ConnectionLinePathSourceType ConnectionLinePathSourceArchive::kTSDConnectionLineTypeOrthogonal;
constexpr ConnectionLinePathSourceArchive_ConnectionLinePathSourceType ConnectionLinePathSourceArchive::ConnectionLinePathSourceType_MIN;
constexpr ConnectionLinePathSourceArchive_ConnectionLinePathSourceType ConnectionLinePathSourceArchive::ConnectionLinePathSourceType_MAX;
constexpr int ConnectionLinePathSourceArchive::ConnectionLinePathSourceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EditableBezierPathSourceArchive_NodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDArchives_2eproto);
  return file_level_enum_descriptors_TSDArchives_2eproto[3];
}
bool EditableBezierPathSourceArchive_NodeType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EditableBezierPathSourceArchive_NodeType EditableBezierPathSourceArchive::sharp;
constexpr EditableBezierPathSourceArchive_NodeType EditableBezierPathSourceArchive::bezier;
constexpr EditableBezierPathSourceArchive_NodeType EditableBezierPathSourceArchive::smooth;
constexpr EditableBezierPathSourceArchive_NodeType EditableBezierPathSourceArchive::NodeType_MIN;
constexpr EditableBezierPathSourceArchive_NodeType EditableBezierPathSourceArchive::NodeType_MAX;
constexpr int EditableBezierPathSourceArchive::NodeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GradientArchive_GradientType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDArchives_2eproto);
  return file_level_enum_descriptors_TSDArchives_2eproto[4];
}
bool GradientArchive_GradientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GradientArchive_GradientType GradientArchive::Linear;
constexpr GradientArchive_GradientType GradientArchive::Radial;
constexpr GradientArchive_GradientType GradientArchive::GradientType_MIN;
constexpr GradientArchive_GradientType GradientArchive::GradientType_MAX;
constexpr int GradientArchive::GradientType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFillArchive_ImageFillTechnique_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDArchives_2eproto);
  return file_level_enum_descriptors_TSDArchives_2eproto[5];
}
bool ImageFillArchive_ImageFillTechnique_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ImageFillArchive_ImageFillTechnique ImageFillArchive::NaturalSize;
constexpr ImageFillArchive_ImageFillTechnique ImageFillArchive::Stretch;
constexpr ImageFillArchive_ImageFillTechnique ImageFillArchive::Tile;
constexpr ImageFillArchive_ImageFillTechnique ImageFillArchive::ScaleToFill;
constexpr ImageFillArchive_ImageFillTechnique ImageFillArchive::ScaleToFit;
constexpr ImageFillArchive_ImageFillTechnique ImageFillArchive::ImageFillTechnique_MIN;
constexpr ImageFillArchive_ImageFillTechnique ImageFillArchive::ImageFillTechnique_MAX;
constexpr int ImageFillArchive::ImageFillTechnique_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StrokePatternArchive_StrokePatternType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDArchives_2eproto);
  return file_level_enum_descriptors_TSDArchives_2eproto[6];
}
bool StrokePatternArchive_StrokePatternType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StrokePatternArchive_StrokePatternType StrokePatternArchive::TSDPattern;
constexpr StrokePatternArchive_StrokePatternType StrokePatternArchive::TSDSolidPattern;
constexpr StrokePatternArchive_StrokePatternType StrokePatternArchive::TSDEmptyPattern;
constexpr StrokePatternArchive_StrokePatternType StrokePatternArchive::StrokePatternType_MIN;
constexpr StrokePatternArchive_StrokePatternType StrokePatternArchive::StrokePatternType_MAX;
constexpr int StrokePatternArchive::StrokePatternType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StrokeArchive_LineCap_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDArchives_2eproto);
  return file_level_enum_descriptors_TSDArchives_2eproto[7];
}
bool StrokeArchive_LineCap_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StrokeArchive_LineCap StrokeArchive::ButtCap;
constexpr StrokeArchive_LineCap StrokeArchive::RoundCap;
constexpr StrokeArchive_LineCap StrokeArchive::SquareCap;
constexpr StrokeArchive_LineCap StrokeArchive::LineCap_MIN;
constexpr StrokeArchive_LineCap StrokeArchive::LineCap_MAX;
constexpr int StrokeArchive::LineCap_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShadowArchive_ShadowType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDArchives_2eproto);
  return file_level_enum_descriptors_TSDArchives_2eproto[8];
}
bool ShadowArchive_ShadowType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ShadowArchive_ShadowType ShadowArchive::TSDDropShadow;
constexpr ShadowArchive_ShadowType ShadowArchive::TSDContactShadow;
constexpr ShadowArchive_ShadowType ShadowArchive::TSDCurvedShadow;
constexpr ShadowArchive_ShadowType ShadowArchive::ShadowType_MIN;
constexpr ShadowArchive_ShadowType ShadowArchive::ShadowType_MAX;
constexpr int ShadowArchive::ShadowType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MovieArchive_MovieLoopOption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDArchives_2eproto);
  return file_level_enum_descriptors_TSDArchives_2eproto[9];
}
bool MovieArchive_MovieLoopOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MovieArchive_MovieLoopOption MovieArchive::None;
constexpr MovieArchive_MovieLoopOption MovieArchive::Repeat;
constexpr MovieArchive_MovieLoopOption MovieArchive::BackAndForth;
constexpr MovieArchive_MovieLoopOption MovieArchive::MovieLoopOption_MIN;
constexpr MovieArchive_MovieLoopOption MovieArchive::MovieLoopOption_MAX;
constexpr int MovieArchive::MovieLoopOption_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FreehandDrawingToolkitUIState_FreehandDrawingToolType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDArchives_2eproto);
  return file_level_enum_descriptors_TSDArchives_2eproto[10];
}
bool FreehandDrawingToolkitUIState_FreehandDrawingToolType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FreehandDrawingToolkitUIState_FreehandDrawingToolType FreehandDrawingToolkitUIState::Pen;
constexpr FreehandDrawingToolkitUIState_FreehandDrawingToolType FreehandDrawingToolkitUIState::Pencil;
constexpr FreehandDrawingToolkitUIState_FreehandDrawingToolType FreehandDrawingToolkitUIState::Crayon;
constexpr FreehandDrawingToolkitUIState_FreehandDrawingToolType FreehandDrawingToolkitUIState::Fill;
constexpr FreehandDrawingToolkitUIState_FreehandDrawingToolType FreehandDrawingToolkitUIState::Eraser;
constexpr FreehandDrawingToolkitUIState_FreehandDrawingToolType FreehandDrawingToolkitUIState::MarqueeSelect;
constexpr FreehandDrawingToolkitUIState_FreehandDrawingToolType FreehandDrawingToolkitUIState::FreehandDrawingToolType_MIN;
constexpr FreehandDrawingToolkitUIState_FreehandDrawingToolType FreehandDrawingToolkitUIState::FreehandDrawingToolType_MAX;
constexpr int FreehandDrawingToolkitUIState::FreehandDrawingToolType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GuideArchive_GuideType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDArchives_2eproto);
  return file_level_enum_descriptors_TSDArchives_2eproto[11];
}
bool GuideArchive_GuideType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GuideArchive_GuideType GuideArchive::Horizontal;
constexpr GuideArchive_GuideType GuideArchive::Vertical;
constexpr GuideArchive_GuideType GuideArchive::GuideType_MIN;
constexpr GuideArchive_GuideType GuideArchive::GuideType_MAX;
constexpr int GuideArchive::GuideType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserDefinedGuideArchive_GuideType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDArchives_2eproto);
  return file_level_enum_descriptors_TSDArchives_2eproto[12];
}
bool UserDefinedGuideArchive_GuideType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserDefinedGuideArchive_GuideType UserDefinedGuideArchive::Horizontal;
constexpr UserDefinedGuideArchive_GuideType UserDefinedGuideArchive::Vertical;
constexpr UserDefinedGuideArchive_GuideType UserDefinedGuideArchive::GuideType_MIN;
constexpr UserDefinedGuideArchive_GuideType UserDefinedGuideArchive::GuideType_MAX;
constexpr int UserDefinedGuideArchive::GuideType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LineJoin_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDArchives_2eproto);
  return file_level_enum_descriptors_TSDArchives_2eproto[13];
}
bool LineJoin_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class EdgeInsetsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<EdgeInsetsArchive>()._has_bits_);
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

EdgeInsetsArchive::EdgeInsetsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.EdgeInsetsArchive)
}
EdgeInsetsArchive::EdgeInsetsArchive(const EdgeInsetsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&top_, &from.top_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&top_)) + sizeof(right_));
  // @@protoc_insertion_point(copy_constructor:TSD.EdgeInsetsArchive)
}

void EdgeInsetsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&top_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&top_)) + sizeof(right_));
}

EdgeInsetsArchive::~EdgeInsetsArchive() {
  // @@protoc_insertion_point(destructor:TSD.EdgeInsetsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EdgeInsetsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EdgeInsetsArchive::ArenaDtor(void* object) {
  EdgeInsetsArchive* _this = reinterpret_cast< EdgeInsetsArchive* >(object);
  (void)_this;
}
void EdgeInsetsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EdgeInsetsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EdgeInsetsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.EdgeInsetsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&top_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_) -
        reinterpret_cast<char*>(&top_)) + sizeof(right_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgeInsetsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float top = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_top(&has_bits);
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_left(&has_bits);
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float bottom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_bottom(&has_bits);
          bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_right(&has_bits);
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EdgeInsetsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.EdgeInsetsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float top = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_top(), target);
  }

  // required float left = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_left(), target);
  }

  // required float bottom = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_bottom(), target);
  }

  // required float right = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.EdgeInsetsArchive)
  return target;
}

size_t EdgeInsetsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSD.EdgeInsetsArchive)
  size_t total_size = 0;

  if (_internal_has_top()) {
    // required float top = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_left()) {
    // required float left = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_bottom()) {
    // required float bottom = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_right()) {
    // required float right = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t EdgeInsetsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.EdgeInsetsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float top = 1;
    total_size += 1 + 4;

    // required float left = 2;
    total_size += 1 + 4;

    // required float bottom = 3;
    total_size += 1 + 4;

    // required float right = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EdgeInsetsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.EdgeInsetsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgeInsetsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EdgeInsetsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.EdgeInsetsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.EdgeInsetsArchive)
    MergeFrom(*source);
  }
}

void EdgeInsetsArchive::MergeFrom(const EdgeInsetsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.EdgeInsetsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      top_ = from.top_;
    }
    if (cached_has_bits & 0x00000002u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000004u) {
      bottom_ = from.bottom_;
    }
    if (cached_has_bits & 0x00000008u) {
      right_ = from.right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EdgeInsetsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.EdgeInsetsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeInsetsArchive::CopyFrom(const EdgeInsetsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.EdgeInsetsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeInsetsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void EdgeInsetsArchive::InternalSwap(EdgeInsetsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdgeInsetsArchive, right_)
      + sizeof(EdgeInsetsArchive::right_)
      - PROTOBUF_FIELD_OFFSET(EdgeInsetsArchive, top_)>(
          reinterpret_cast<char*>(&top_),
          reinterpret_cast<char*>(&other->top_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgeInsetsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[0]);
}

// ===================================================================

class GeometryArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GeometryArchive>()._has_bits_);
  static const ::TSP::Point& position(const GeometryArchive* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Size& size(const GeometryArchive* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSP::Point&
GeometryArchive::_Internal::position(const GeometryArchive* msg) {
  return *msg->position_;
}
const ::TSP::Size&
GeometryArchive::_Internal::size(const GeometryArchive* msg) {
  return *msg->size_;
}
void GeometryArchive::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GeometryArchive::clear_size() {
  if (size_ != nullptr) size_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GeometryArchive::GeometryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.GeometryArchive)
}
GeometryArchive::GeometryArchive(const GeometryArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::TSP::Point(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::TSP::Size(*from.size_);
  } else {
    size_ = nullptr;
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:TSD.GeometryArchive)
}

void GeometryArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&position_)) + sizeof(angle_));
}

GeometryArchive::~GeometryArchive() {
  // @@protoc_insertion_point(destructor:TSD.GeometryArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeometryArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete size_;
}

void GeometryArchive::ArenaDtor(void* object) {
  GeometryArchive* _this = reinterpret_cast< GeometryArchive* >(object);
  (void)_this;
}
void GeometryArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeometryArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GeometryArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.GeometryArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(size_ != nullptr);
      size_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angle_) -
        reinterpret_cast<char*>(&flags_)) + sizeof(angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeometryArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Point position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.GeometryArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Point position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // optional .TSP.Size size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::size(this), target, stream);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  // optional float angle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.GeometryArchive)
  return target;
}

size_t GeometryArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.GeometryArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSP.Point position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .TSP.Size size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *size_);
    }

    // optional uint32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional float angle = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.GeometryArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeometryArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.GeometryArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.GeometryArchive)
    MergeFrom(*source);
  }
}

void GeometryArchive::MergeFrom(const GeometryArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.GeometryArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::TSP::Point::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_size()->::TSP::Size::MergeFrom(from._internal_size());
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      angle_ = from.angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GeometryArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.GeometryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryArchive::CopyFrom(const GeometryArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.GeometryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryArchive::IsInitialized() const {
  if (_internal_has_position()) {
    if (!position_->IsInitialized()) return false;
  }
  if (_internal_has_size()) {
    if (!size_->IsInitialized()) return false;
  }
  return true;
}

void GeometryArchive::InternalSwap(GeometryArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeometryArchive, angle_)
      + sizeof(GeometryArchive::angle_)
      - PROTOBUF_FIELD_OFFSET(GeometryArchive, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometryArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[1]);
}

// ===================================================================

class PointPathSourceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PointPathSourceArchive>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Point& point(const PointPathSourceArchive* msg);
  static void set_has_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Size& naturalsize(const PointPathSourceArchive* msg);
  static void set_has_naturalsize(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Point&
PointPathSourceArchive::_Internal::point(const PointPathSourceArchive* msg) {
  return *msg->point_;
}
const ::TSP::Size&
PointPathSourceArchive::_Internal::naturalsize(const PointPathSourceArchive* msg) {
  return *msg->naturalsize_;
}
void PointPathSourceArchive::clear_point() {
  if (point_ != nullptr) point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PointPathSourceArchive::clear_naturalsize() {
  if (naturalsize_ != nullptr) naturalsize_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
PointPathSourceArchive::PointPathSourceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.PointPathSourceArchive)
}
PointPathSourceArchive::PointPathSourceArchive(const PointPathSourceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_point()) {
    point_ = new ::TSP::Point(*from.point_);
  } else {
    point_ = nullptr;
  }
  if (from._internal_has_naturalsize()) {
    naturalsize_ = new ::TSP::Size(*from.naturalsize_);
  } else {
    naturalsize_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:TSD.PointPathSourceArchive)
}

void PointPathSourceArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&point_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&point_)) + sizeof(type_));
}

PointPathSourceArchive::~PointPathSourceArchive() {
  // @@protoc_insertion_point(destructor:TSD.PointPathSourceArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PointPathSourceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete point_;
  if (this != internal_default_instance()) delete naturalsize_;
}

void PointPathSourceArchive::ArenaDtor(void* object) {
  PointPathSourceArchive* _this = reinterpret_cast< PointPathSourceArchive* >(object);
  (void)_this;
}
void PointPathSourceArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PointPathSourceArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PointPathSourceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.PointPathSourceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(point_ != nullptr);
      point_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(naturalsize_ != nullptr);
      naturalsize_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointPathSourceArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.PointPathSourceArchive.PointPathSourceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::PointPathSourceArchive_PointPathSourceType_IsValid(val))) {
            _internal_set_type(static_cast<::TSD::PointPathSourceArchive_PointPathSourceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size naturalSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_naturalsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointPathSourceArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.PointPathSourceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.PointPathSourceArchive.PointPathSourceType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .TSP.Point point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::point(this), target, stream);
  }

  // optional .TSP.Size naturalSize = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::naturalsize(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.PointPathSourceArchive)
  return target;
}

size_t PointPathSourceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.PointPathSourceArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Point point = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *point_);
    }

    // optional .TSP.Size naturalSize = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *naturalsize_);
    }

    // optional .TSD.PointPathSourceArchive.PointPathSourceType type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointPathSourceArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.PointPathSourceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PointPathSourceArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointPathSourceArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.PointPathSourceArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.PointPathSourceArchive)
    MergeFrom(*source);
  }
}

void PointPathSourceArchive::MergeFrom(const PointPathSourceArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.PointPathSourceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_point()->::TSP::Point::MergeFrom(from._internal_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_naturalsize()->::TSP::Size::MergeFrom(from._internal_naturalsize());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PointPathSourceArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.PointPathSourceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointPathSourceArchive::CopyFrom(const PointPathSourceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.PointPathSourceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointPathSourceArchive::IsInitialized() const {
  if (_internal_has_point()) {
    if (!point_->IsInitialized()) return false;
  }
  if (_internal_has_naturalsize()) {
    if (!naturalsize_->IsInitialized()) return false;
  }
  return true;
}

void PointPathSourceArchive::InternalSwap(PointPathSourceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointPathSourceArchive, type_)
      + sizeof(PointPathSourceArchive::type_)
      - PROTOBUF_FIELD_OFFSET(PointPathSourceArchive, point_)>(
          reinterpret_cast<char*>(&point_),
          reinterpret_cast<char*>(&other->point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PointPathSourceArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[2]);
}

// ===================================================================

class ScalarPathSourceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ScalarPathSourceArchive>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scalar(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Size& naturalsize(const ScalarPathSourceArchive* msg);
  static void set_has_naturalsize(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_curve_continuous(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSP::Size&
ScalarPathSourceArchive::_Internal::naturalsize(const ScalarPathSourceArchive* msg) {
  return *msg->naturalsize_;
}
void ScalarPathSourceArchive::clear_naturalsize() {
  if (naturalsize_ != nullptr) naturalsize_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ScalarPathSourceArchive::ScalarPathSourceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ScalarPathSourceArchive)
}
ScalarPathSourceArchive::ScalarPathSourceArchive(const ScalarPathSourceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_naturalsize()) {
    naturalsize_ = new ::TSP::Size(*from.naturalsize_);
  } else {
    naturalsize_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_curve_continuous_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_curve_continuous_));
  // @@protoc_insertion_point(copy_constructor:TSD.ScalarPathSourceArchive)
}

void ScalarPathSourceArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&naturalsize_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_curve_continuous_) -
    reinterpret_cast<char*>(&naturalsize_)) + sizeof(is_curve_continuous_));
}

ScalarPathSourceArchive::~ScalarPathSourceArchive() {
  // @@protoc_insertion_point(destructor:TSD.ScalarPathSourceArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarPathSourceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete naturalsize_;
}

void ScalarPathSourceArchive::ArenaDtor(void* object) {
  ScalarPathSourceArchive* _this = reinterpret_cast< ScalarPathSourceArchive* >(object);
  (void)_this;
}
void ScalarPathSourceArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarPathSourceArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScalarPathSourceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ScalarPathSourceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(naturalsize_ != nullptr);
    naturalsize_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_curve_continuous_) -
        reinterpret_cast<char*>(&type_)) + sizeof(is_curve_continuous_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarPathSourceArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.ScalarPathSourceArchive.ScalarPathSourceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::ScalarPathSourceArchive_ScalarPathSourceType_IsValid(val))) {
            _internal_set_type(static_cast<::TSD::ScalarPathSourceArchive_ScalarPathSourceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float scalar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_scalar(&has_bits);
          scalar_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size naturalSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_naturalsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_curve_continuous = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_curve_continuous(&has_bits);
          is_curve_continuous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarPathSourceArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ScalarPathSourceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.ScalarPathSourceArchive.ScalarPathSourceType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional float scalar = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scalar(), target);
  }

  // optional .TSP.Size naturalSize = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::naturalsize(this), target, stream);
  }

  // optional bool is_curve_continuous = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_curve_continuous(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ScalarPathSourceArchive)
  return target;
}

size_t ScalarPathSourceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ScalarPathSourceArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSP.Size naturalSize = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *naturalsize_);
    }

    // optional .TSD.ScalarPathSourceArchive.ScalarPathSourceType type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional float scalar = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional bool is_curve_continuous = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarPathSourceArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ScalarPathSourceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarPathSourceArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarPathSourceArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ScalarPathSourceArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ScalarPathSourceArchive)
    MergeFrom(*source);
  }
}

void ScalarPathSourceArchive::MergeFrom(const ScalarPathSourceArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ScalarPathSourceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_naturalsize()->::TSP::Size::MergeFrom(from._internal_naturalsize());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      scalar_ = from.scalar_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_curve_continuous_ = from.is_curve_continuous_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScalarPathSourceArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ScalarPathSourceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarPathSourceArchive::CopyFrom(const ScalarPathSourceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ScalarPathSourceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarPathSourceArchive::IsInitialized() const {
  if (_internal_has_naturalsize()) {
    if (!naturalsize_->IsInitialized()) return false;
  }
  return true;
}

void ScalarPathSourceArchive::InternalSwap(ScalarPathSourceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScalarPathSourceArchive, is_curve_continuous_)
      + sizeof(ScalarPathSourceArchive::is_curve_continuous_)
      - PROTOBUF_FIELD_OFFSET(ScalarPathSourceArchive, naturalsize_)>(
          reinterpret_cast<char*>(&naturalsize_),
          reinterpret_cast<char*>(&other->naturalsize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarPathSourceArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[3]);
}

// ===================================================================

class BezierPathSourceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BezierPathSourceArchive>()._has_bits_);
  static void set_has_path_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Size& naturalsize(const BezierPathSourceArchive* msg);
  static void set_has_naturalsize(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Path& path(const BezierPathSourceArchive* msg);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Size&
BezierPathSourceArchive::_Internal::naturalsize(const BezierPathSourceArchive* msg) {
  return *msg->naturalsize_;
}
const ::TSP::Path&
BezierPathSourceArchive::_Internal::path(const BezierPathSourceArchive* msg) {
  return *msg->path_;
}
void BezierPathSourceArchive::clear_naturalsize() {
  if (naturalsize_ != nullptr) naturalsize_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void BezierPathSourceArchive::clear_path() {
  if (path_ != nullptr) path_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
BezierPathSourceArchive::BezierPathSourceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.BezierPathSourceArchive)
}
BezierPathSourceArchive::BezierPathSourceArchive(const BezierPathSourceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path_string()) {
    path_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path_string(), 
      GetArena());
  }
  if (from._internal_has_naturalsize()) {
    naturalsize_ = new ::TSP::Size(*from.naturalsize_);
  } else {
    naturalsize_ = nullptr;
  }
  if (from._internal_has_path()) {
    path_ = new ::TSP::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.BezierPathSourceArchive)
}

void BezierPathSourceArchive::SharedCtor() {
path_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&naturalsize_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&path_) -
    reinterpret_cast<char*>(&naturalsize_)) + sizeof(path_));
}

BezierPathSourceArchive::~BezierPathSourceArchive() {
  // @@protoc_insertion_point(destructor:TSD.BezierPathSourceArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BezierPathSourceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete naturalsize_;
  if (this != internal_default_instance()) delete path_;
}

void BezierPathSourceArchive::ArenaDtor(void* object) {
  BezierPathSourceArchive* _this = reinterpret_cast< BezierPathSourceArchive* >(object);
  (void)_this;
}
void BezierPathSourceArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BezierPathSourceArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BezierPathSourceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.BezierPathSourceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      path_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(naturalsize_ != nullptr);
      naturalsize_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(path_ != nullptr);
      path_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BezierPathSourceArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string path_string = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.BezierPathSourceArchive.path_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size naturalSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_naturalsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Path path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BezierPathSourceArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.BezierPathSourceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string path_string = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path_string().data(), static_cast<int>(this->_internal_path_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.BezierPathSourceArchive.path_string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path_string(), target);
  }

  // optional .TSP.Size naturalSize = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::naturalsize(this), target, stream);
  }

  // optional .TSP.Path path = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.BezierPathSourceArchive)
  return target;
}

size_t BezierPathSourceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.BezierPathSourceArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string path_string = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path_string());
    }

    // optional .TSP.Size naturalSize = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *naturalsize_);
    }

    // optional .TSP.Path path = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *path_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BezierPathSourceArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.BezierPathSourceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const BezierPathSourceArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BezierPathSourceArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.BezierPathSourceArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.BezierPathSourceArchive)
    MergeFrom(*source);
  }
}

void BezierPathSourceArchive::MergeFrom(const BezierPathSourceArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.BezierPathSourceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_path_string(from._internal_path_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_naturalsize()->::TSP::Size::MergeFrom(from._internal_naturalsize());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_path()->::TSP::Path::MergeFrom(from._internal_path());
    }
  }
}

void BezierPathSourceArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.BezierPathSourceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BezierPathSourceArchive::CopyFrom(const BezierPathSourceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.BezierPathSourceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BezierPathSourceArchive::IsInitialized() const {
  if (_internal_has_naturalsize()) {
    if (!naturalsize_->IsInitialized()) return false;
  }
  if (_internal_has_path()) {
    if (!path_->IsInitialized()) return false;
  }
  return true;
}

void BezierPathSourceArchive::InternalSwap(BezierPathSourceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_string_.Swap(&other->path_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BezierPathSourceArchive, path_)
      + sizeof(BezierPathSourceArchive::path_)
      - PROTOBUF_FIELD_OFFSET(BezierPathSourceArchive, naturalsize_)>(
          reinterpret_cast<char*>(&naturalsize_),
          reinterpret_cast<char*>(&other->naturalsize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BezierPathSourceArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[4]);
}

// ===================================================================

class CalloutPathSourceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CalloutPathSourceArchive>()._has_bits_);
  static const ::TSP::Size& natural_size(const CalloutPathSourceArchive* msg);
  static void set_has_natural_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Point& tail_position(const CalloutPathSourceArchive* msg);
  static void set_has_tail_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tail_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_corner_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_center_tail(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSP::Size&
CalloutPathSourceArchive::_Internal::natural_size(const CalloutPathSourceArchive* msg) {
  return *msg->natural_size_;
}
const ::TSP::Point&
CalloutPathSourceArchive::_Internal::tail_position(const CalloutPathSourceArchive* msg) {
  return *msg->tail_position_;
}
void CalloutPathSourceArchive::clear_natural_size() {
  if (natural_size_ != nullptr) natural_size_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CalloutPathSourceArchive::clear_tail_position() {
  if (tail_position_ != nullptr) tail_position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CalloutPathSourceArchive::CalloutPathSourceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.CalloutPathSourceArchive)
}
CalloutPathSourceArchive::CalloutPathSourceArchive(const CalloutPathSourceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_natural_size()) {
    natural_size_ = new ::TSP::Size(*from.natural_size_);
  } else {
    natural_size_ = nullptr;
  }
  if (from._internal_has_tail_position()) {
    tail_position_ = new ::TSP::Point(*from.tail_position_);
  } else {
    tail_position_ = nullptr;
  }
  ::memcpy(&tail_size_, &from.tail_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&center_tail_) -
    reinterpret_cast<char*>(&tail_size_)) + sizeof(center_tail_));
  // @@protoc_insertion_point(copy_constructor:TSD.CalloutPathSourceArchive)
}

void CalloutPathSourceArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&natural_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&center_tail_) -
    reinterpret_cast<char*>(&natural_size_)) + sizeof(center_tail_));
}

CalloutPathSourceArchive::~CalloutPathSourceArchive() {
  // @@protoc_insertion_point(destructor:TSD.CalloutPathSourceArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CalloutPathSourceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete natural_size_;
  if (this != internal_default_instance()) delete tail_position_;
}

void CalloutPathSourceArchive::ArenaDtor(void* object) {
  CalloutPathSourceArchive* _this = reinterpret_cast< CalloutPathSourceArchive* >(object);
  (void)_this;
}
void CalloutPathSourceArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CalloutPathSourceArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CalloutPathSourceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.CalloutPathSourceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(natural_size_ != nullptr);
      natural_size_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tail_position_ != nullptr);
      tail_position_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&tail_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&center_tail_) -
        reinterpret_cast<char*>(&tail_size_)) + sizeof(center_tail_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalloutPathSourceArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Size natural_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_natural_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point tail_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tail_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tail_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_tail_size(&has_bits);
          tail_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float corner_radius = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_corner_radius(&has_bits);
          corner_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool center_tail = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_center_tail(&has_bits);
          center_tail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CalloutPathSourceArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.CalloutPathSourceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Size natural_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::natural_size(this), target, stream);
  }

  // optional .TSP.Point tail_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tail_position(this), target, stream);
  }

  // optional float tail_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_tail_size(), target);
  }

  // optional float corner_radius = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_corner_radius(), target);
  }

  // optional bool center_tail = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_center_tail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.CalloutPathSourceArchive)
  return target;
}

size_t CalloutPathSourceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.CalloutPathSourceArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSP.Size natural_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *natural_size_);
    }

    // optional .TSP.Point tail_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tail_position_);
    }

    // optional float tail_size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float corner_radius = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool center_tail = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalloutPathSourceArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.CalloutPathSourceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CalloutPathSourceArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalloutPathSourceArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.CalloutPathSourceArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.CalloutPathSourceArchive)
    MergeFrom(*source);
  }
}

void CalloutPathSourceArchive::MergeFrom(const CalloutPathSourceArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.CalloutPathSourceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_natural_size()->::TSP::Size::MergeFrom(from._internal_natural_size());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tail_position()->::TSP::Point::MergeFrom(from._internal_tail_position());
    }
    if (cached_has_bits & 0x00000004u) {
      tail_size_ = from.tail_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      corner_radius_ = from.corner_radius_;
    }
    if (cached_has_bits & 0x00000010u) {
      center_tail_ = from.center_tail_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CalloutPathSourceArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.CalloutPathSourceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalloutPathSourceArchive::CopyFrom(const CalloutPathSourceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.CalloutPathSourceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalloutPathSourceArchive::IsInitialized() const {
  if (_internal_has_natural_size()) {
    if (!natural_size_->IsInitialized()) return false;
  }
  if (_internal_has_tail_position()) {
    if (!tail_position_->IsInitialized()) return false;
  }
  return true;
}

void CalloutPathSourceArchive::InternalSwap(CalloutPathSourceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CalloutPathSourceArchive, center_tail_)
      + sizeof(CalloutPathSourceArchive::center_tail_)
      - PROTOBUF_FIELD_OFFSET(CalloutPathSourceArchive, natural_size_)>(
          reinterpret_cast<char*>(&natural_size_),
          reinterpret_cast<char*>(&other->natural_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CalloutPathSourceArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[5]);
}

// ===================================================================

class ConnectionLinePathSourceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectionLinePathSourceArchive>()._has_bits_);
  static const ::TSD::BezierPathSourceArchive& super(const ConnectionLinePathSourceArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_outset_from(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_outset_to(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::BezierPathSourceArchive&
ConnectionLinePathSourceArchive::_Internal::super(const ConnectionLinePathSourceArchive* msg) {
  return *msg->super_;
}
ConnectionLinePathSourceArchive::ConnectionLinePathSourceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ConnectionLinePathSourceArchive)
}
ConnectionLinePathSourceArchive::ConnectionLinePathSourceArchive(const ConnectionLinePathSourceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::BezierPathSourceArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&outset_to_) -
    reinterpret_cast<char*>(&type_)) + sizeof(outset_to_));
  // @@protoc_insertion_point(copy_constructor:TSD.ConnectionLinePathSourceArchive)
}

void ConnectionLinePathSourceArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&outset_to_) -
    reinterpret_cast<char*>(&super_)) + sizeof(outset_to_));
}

ConnectionLinePathSourceArchive::~ConnectionLinePathSourceArchive() {
  // @@protoc_insertion_point(destructor:TSD.ConnectionLinePathSourceArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnectionLinePathSourceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ConnectionLinePathSourceArchive::ArenaDtor(void* object) {
  ConnectionLinePathSourceArchive* _this = reinterpret_cast< ConnectionLinePathSourceArchive* >(object);
  (void)_this;
}
void ConnectionLinePathSourceArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectionLinePathSourceArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConnectionLinePathSourceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ConnectionLinePathSourceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&outset_to_) -
        reinterpret_cast<char*>(&type_)) + sizeof(outset_to_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionLinePathSourceArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.BezierPathSourceArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ConnectionLinePathSourceArchive.ConnectionLinePathSourceType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::ConnectionLinePathSourceArchive_ConnectionLinePathSourceType_IsValid(val))) {
            _internal_set_type(static_cast<::TSD::ConnectionLinePathSourceArchive_ConnectionLinePathSourceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float outset_from = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_outset_from(&has_bits);
          outset_from_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float outset_to = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_outset_to(&has_bits);
          outset_to_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectionLinePathSourceArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ConnectionLinePathSourceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.BezierPathSourceArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSD.ConnectionLinePathSourceArchive.ConnectionLinePathSourceType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional float outset_from = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_outset_from(), target);
  }

  // optional float outset_to = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_outset_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ConnectionLinePathSourceArchive)
  return target;
}

size_t ConnectionLinePathSourceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ConnectionLinePathSourceArchive)
  size_t total_size = 0;

  // required .TSD.BezierPathSourceArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSD.ConnectionLinePathSourceArchive.ConnectionLinePathSourceType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional float outset_from = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float outset_to = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectionLinePathSourceArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ConnectionLinePathSourceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionLinePathSourceArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectionLinePathSourceArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ConnectionLinePathSourceArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ConnectionLinePathSourceArchive)
    MergeFrom(*source);
  }
}

void ConnectionLinePathSourceArchive::MergeFrom(const ConnectionLinePathSourceArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ConnectionLinePathSourceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::BezierPathSourceArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      outset_from_ = from.outset_from_;
    }
    if (cached_has_bits & 0x00000008u) {
      outset_to_ = from.outset_to_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConnectionLinePathSourceArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ConnectionLinePathSourceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionLinePathSourceArchive::CopyFrom(const ConnectionLinePathSourceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ConnectionLinePathSourceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionLinePathSourceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ConnectionLinePathSourceArchive::InternalSwap(ConnectionLinePathSourceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectionLinePathSourceArchive, outset_to_)
      + sizeof(ConnectionLinePathSourceArchive::outset_to_)
      - PROTOBUF_FIELD_OFFSET(ConnectionLinePathSourceArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionLinePathSourceArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[6]);
}

// ===================================================================

class EditableBezierPathSourceArchive_Node::_Internal {
 public:
  using HasBits = decltype(std::declval<EditableBezierPathSourceArchive_Node>()._has_bits_);
  static const ::TSP::Point& incontrolpoint(const EditableBezierPathSourceArchive_Node* msg);
  static void set_has_incontrolpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Point& nodepoint(const EditableBezierPathSourceArchive_Node* msg);
  static void set_has_nodepoint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Point& outcontrolpoint(const EditableBezierPathSourceArchive_Node* msg);
  static void set_has_outcontrolpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSP::Point&
EditableBezierPathSourceArchive_Node::_Internal::incontrolpoint(const EditableBezierPathSourceArchive_Node* msg) {
  return *msg->incontrolpoint_;
}
const ::TSP::Point&
EditableBezierPathSourceArchive_Node::_Internal::nodepoint(const EditableBezierPathSourceArchive_Node* msg) {
  return *msg->nodepoint_;
}
const ::TSP::Point&
EditableBezierPathSourceArchive_Node::_Internal::outcontrolpoint(const EditableBezierPathSourceArchive_Node* msg) {
  return *msg->outcontrolpoint_;
}
void EditableBezierPathSourceArchive_Node::clear_incontrolpoint() {
  if (incontrolpoint_ != nullptr) incontrolpoint_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void EditableBezierPathSourceArchive_Node::clear_nodepoint() {
  if (nodepoint_ != nullptr) nodepoint_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void EditableBezierPathSourceArchive_Node::clear_outcontrolpoint() {
  if (outcontrolpoint_ != nullptr) outcontrolpoint_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
EditableBezierPathSourceArchive_Node::EditableBezierPathSourceArchive_Node(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.EditableBezierPathSourceArchive.Node)
}
EditableBezierPathSourceArchive_Node::EditableBezierPathSourceArchive_Node(const EditableBezierPathSourceArchive_Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_incontrolpoint()) {
    incontrolpoint_ = new ::TSP::Point(*from.incontrolpoint_);
  } else {
    incontrolpoint_ = nullptr;
  }
  if (from._internal_has_nodepoint()) {
    nodepoint_ = new ::TSP::Point(*from.nodepoint_);
  } else {
    nodepoint_ = nullptr;
  }
  if (from._internal_has_outcontrolpoint()) {
    outcontrolpoint_ = new ::TSP::Point(*from.outcontrolpoint_);
  } else {
    outcontrolpoint_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:TSD.EditableBezierPathSourceArchive.Node)
}

void EditableBezierPathSourceArchive_Node::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&incontrolpoint_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&outcontrolpoint_) -
    reinterpret_cast<char*>(&incontrolpoint_)) + sizeof(outcontrolpoint_));
type_ = 1;
}

EditableBezierPathSourceArchive_Node::~EditableBezierPathSourceArchive_Node() {
  // @@protoc_insertion_point(destructor:TSD.EditableBezierPathSourceArchive.Node)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EditableBezierPathSourceArchive_Node::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete incontrolpoint_;
  if (this != internal_default_instance()) delete nodepoint_;
  if (this != internal_default_instance()) delete outcontrolpoint_;
}

void EditableBezierPathSourceArchive_Node::ArenaDtor(void* object) {
  EditableBezierPathSourceArchive_Node* _this = reinterpret_cast< EditableBezierPathSourceArchive_Node* >(object);
  (void)_this;
}
void EditableBezierPathSourceArchive_Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EditableBezierPathSourceArchive_Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EditableBezierPathSourceArchive_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.EditableBezierPathSourceArchive.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(incontrolpoint_ != nullptr);
      incontrolpoint_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(nodepoint_ != nullptr);
      nodepoint_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(outcontrolpoint_ != nullptr);
      outcontrolpoint_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditableBezierPathSourceArchive_Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Point inControlPoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_incontrolpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Point nodePoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodepoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Point outControlPoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_outcontrolpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSD.EditableBezierPathSourceArchive.NodeType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::EditableBezierPathSourceArchive_NodeType_IsValid(val))) {
            _internal_set_type(static_cast<::TSD::EditableBezierPathSourceArchive_NodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EditableBezierPathSourceArchive_Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.EditableBezierPathSourceArchive.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Point inControlPoint = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::incontrolpoint(this), target, stream);
  }

  // required .TSP.Point nodePoint = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nodepoint(this), target, stream);
  }

  // required .TSP.Point outControlPoint = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::outcontrolpoint(this), target, stream);
  }

  // required .TSD.EditableBezierPathSourceArchive.NodeType type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.EditableBezierPathSourceArchive.Node)
  return target;
}

size_t EditableBezierPathSourceArchive_Node::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSD.EditableBezierPathSourceArchive.Node)
  size_t total_size = 0;

  if (_internal_has_incontrolpoint()) {
    // required .TSP.Point inControlPoint = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *incontrolpoint_);
  }

  if (_internal_has_nodepoint()) {
    // required .TSP.Point nodePoint = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodepoint_);
  }

  if (_internal_has_outcontrolpoint()) {
    // required .TSP.Point outControlPoint = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outcontrolpoint_);
  }

  if (_internal_has_type()) {
    // required .TSD.EditableBezierPathSourceArchive.NodeType type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t EditableBezierPathSourceArchive_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.EditableBezierPathSourceArchive.Node)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSP.Point inControlPoint = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *incontrolpoint_);

    // required .TSP.Point nodePoint = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodepoint_);

    // required .TSP.Point outControlPoint = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outcontrolpoint_);

    // required .TSD.EditableBezierPathSourceArchive.NodeType type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EditableBezierPathSourceArchive_Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.EditableBezierPathSourceArchive.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const EditableBezierPathSourceArchive_Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EditableBezierPathSourceArchive_Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.EditableBezierPathSourceArchive.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.EditableBezierPathSourceArchive.Node)
    MergeFrom(*source);
  }
}

void EditableBezierPathSourceArchive_Node::MergeFrom(const EditableBezierPathSourceArchive_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.EditableBezierPathSourceArchive.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_incontrolpoint()->::TSP::Point::MergeFrom(from._internal_incontrolpoint());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_nodepoint()->::TSP::Point::MergeFrom(from._internal_nodepoint());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_outcontrolpoint()->::TSP::Point::MergeFrom(from._internal_outcontrolpoint());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EditableBezierPathSourceArchive_Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.EditableBezierPathSourceArchive.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditableBezierPathSourceArchive_Node::CopyFrom(const EditableBezierPathSourceArchive_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.EditableBezierPathSourceArchive.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditableBezierPathSourceArchive_Node::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_incontrolpoint()) {
    if (!incontrolpoint_->IsInitialized()) return false;
  }
  if (_internal_has_nodepoint()) {
    if (!nodepoint_->IsInitialized()) return false;
  }
  if (_internal_has_outcontrolpoint()) {
    if (!outcontrolpoint_->IsInitialized()) return false;
  }
  return true;
}

void EditableBezierPathSourceArchive_Node::InternalSwap(EditableBezierPathSourceArchive_Node* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EditableBezierPathSourceArchive_Node, outcontrolpoint_)
      + sizeof(EditableBezierPathSourceArchive_Node::outcontrolpoint_)
      - PROTOBUF_FIELD_OFFSET(EditableBezierPathSourceArchive_Node, incontrolpoint_)>(
          reinterpret_cast<char*>(&incontrolpoint_),
          reinterpret_cast<char*>(&other->incontrolpoint_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditableBezierPathSourceArchive_Node::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[7]);
}

// ===================================================================

class EditableBezierPathSourceArchive_Subpath::_Internal {
 public:
  using HasBits = decltype(std::declval<EditableBezierPathSourceArchive_Subpath>()._has_bits_);
  static void set_has_closed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

EditableBezierPathSourceArchive_Subpath::EditableBezierPathSourceArchive_Subpath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.EditableBezierPathSourceArchive.Subpath)
}
EditableBezierPathSourceArchive_Subpath::EditableBezierPathSourceArchive_Subpath(const EditableBezierPathSourceArchive_Subpath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  closed_ = from.closed_;
  // @@protoc_insertion_point(copy_constructor:TSD.EditableBezierPathSourceArchive.Subpath)
}

void EditableBezierPathSourceArchive_Subpath::SharedCtor() {
closed_ = false;
}

EditableBezierPathSourceArchive_Subpath::~EditableBezierPathSourceArchive_Subpath() {
  // @@protoc_insertion_point(destructor:TSD.EditableBezierPathSourceArchive.Subpath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EditableBezierPathSourceArchive_Subpath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EditableBezierPathSourceArchive_Subpath::ArenaDtor(void* object) {
  EditableBezierPathSourceArchive_Subpath* _this = reinterpret_cast< EditableBezierPathSourceArchive_Subpath* >(object);
  (void)_this;
}
void EditableBezierPathSourceArchive_Subpath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EditableBezierPathSourceArchive_Subpath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EditableBezierPathSourceArchive_Subpath::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.EditableBezierPathSourceArchive.Subpath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  closed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditableBezierPathSourceArchive_Subpath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSD.EditableBezierPathSourceArchive.Node nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool closed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_closed(&has_bits);
          closed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EditableBezierPathSourceArchive_Subpath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.EditableBezierPathSourceArchive.Subpath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSD.EditableBezierPathSourceArchive.Node nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodes(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required bool closed = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_closed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.EditableBezierPathSourceArchive.Subpath)
  return target;
}

size_t EditableBezierPathSourceArchive_Subpath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.EditableBezierPathSourceArchive.Subpath)
  size_t total_size = 0;

  // required bool closed = 2;
  if (_internal_has_closed()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSD.EditableBezierPathSourceArchive.Node nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EditableBezierPathSourceArchive_Subpath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.EditableBezierPathSourceArchive.Subpath)
  GOOGLE_DCHECK_NE(&from, this);
  const EditableBezierPathSourceArchive_Subpath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EditableBezierPathSourceArchive_Subpath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.EditableBezierPathSourceArchive.Subpath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.EditableBezierPathSourceArchive.Subpath)
    MergeFrom(*source);
  }
}

void EditableBezierPathSourceArchive_Subpath::MergeFrom(const EditableBezierPathSourceArchive_Subpath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.EditableBezierPathSourceArchive.Subpath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  if (from._internal_has_closed()) {
    _internal_set_closed(from._internal_closed());
  }
}

void EditableBezierPathSourceArchive_Subpath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.EditableBezierPathSourceArchive.Subpath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditableBezierPathSourceArchive_Subpath::CopyFrom(const EditableBezierPathSourceArchive_Subpath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.EditableBezierPathSourceArchive.Subpath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditableBezierPathSourceArchive_Subpath::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(nodes_)) return false;
  return true;
}

void EditableBezierPathSourceArchive_Subpath::InternalSwap(EditableBezierPathSourceArchive_Subpath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nodes_.InternalSwap(&other->nodes_);
  swap(closed_, other->closed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditableBezierPathSourceArchive_Subpath::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[8]);
}

// ===================================================================

class EditableBezierPathSourceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<EditableBezierPathSourceArchive>()._has_bits_);
  static const ::TSP::Size& naturalsize(const EditableBezierPathSourceArchive* msg);
  static void set_has_naturalsize(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Size&
EditableBezierPathSourceArchive::_Internal::naturalsize(const EditableBezierPathSourceArchive* msg) {
  return *msg->naturalsize_;
}
void EditableBezierPathSourceArchive::clear_naturalsize() {
  if (naturalsize_ != nullptr) naturalsize_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
EditableBezierPathSourceArchive::EditableBezierPathSourceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  subpaths_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.EditableBezierPathSourceArchive)
}
EditableBezierPathSourceArchive::EditableBezierPathSourceArchive(const EditableBezierPathSourceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      subpaths_(from.subpaths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_naturalsize()) {
    naturalsize_ = new ::TSP::Size(*from.naturalsize_);
  } else {
    naturalsize_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.EditableBezierPathSourceArchive)
}

void EditableBezierPathSourceArchive::SharedCtor() {
naturalsize_ = nullptr;
}

EditableBezierPathSourceArchive::~EditableBezierPathSourceArchive() {
  // @@protoc_insertion_point(destructor:TSD.EditableBezierPathSourceArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EditableBezierPathSourceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete naturalsize_;
}

void EditableBezierPathSourceArchive::ArenaDtor(void* object) {
  EditableBezierPathSourceArchive* _this = reinterpret_cast< EditableBezierPathSourceArchive* >(object);
  (void)_this;
}
void EditableBezierPathSourceArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EditableBezierPathSourceArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EditableBezierPathSourceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.EditableBezierPathSourceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subpaths_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(naturalsize_ != nullptr);
    naturalsize_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditableBezierPathSourceArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSD.EditableBezierPathSourceArchive.Subpath subpaths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subpaths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size naturalSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_naturalsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EditableBezierPathSourceArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.EditableBezierPathSourceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSD.EditableBezierPathSourceArchive.Subpath subpaths = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subpaths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_subpaths(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Size naturalSize = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::naturalsize(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.EditableBezierPathSourceArchive)
  return target;
}

size_t EditableBezierPathSourceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.EditableBezierPathSourceArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSD.EditableBezierPathSourceArchive.Subpath subpaths = 1;
  total_size += 1UL * this->_internal_subpaths_size();
  for (const auto& msg : this->subpaths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Size naturalSize = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *naturalsize_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EditableBezierPathSourceArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.EditableBezierPathSourceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const EditableBezierPathSourceArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EditableBezierPathSourceArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.EditableBezierPathSourceArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.EditableBezierPathSourceArchive)
    MergeFrom(*source);
  }
}

void EditableBezierPathSourceArchive::MergeFrom(const EditableBezierPathSourceArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.EditableBezierPathSourceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subpaths_.MergeFrom(from.subpaths_);
  if (from._internal_has_naturalsize()) {
    _internal_mutable_naturalsize()->::TSP::Size::MergeFrom(from._internal_naturalsize());
  }
}

void EditableBezierPathSourceArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.EditableBezierPathSourceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditableBezierPathSourceArchive::CopyFrom(const EditableBezierPathSourceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.EditableBezierPathSourceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditableBezierPathSourceArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(subpaths_)) return false;
  if (_internal_has_naturalsize()) {
    if (!naturalsize_->IsInitialized()) return false;
  }
  return true;
}

void EditableBezierPathSourceArchive::InternalSwap(EditableBezierPathSourceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subpaths_.InternalSwap(&other->subpaths_);
  swap(naturalsize_, other->naturalsize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditableBezierPathSourceArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[9]);
}

// ===================================================================

class PathSourceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PathSourceArchive>()._has_bits_);
  static void set_has_horizontalflip(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_verticalflip(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSD::PointPathSourceArchive& point_path_source(const PathSourceArchive* msg);
  static void set_has_point_path_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::ScalarPathSourceArchive& scalar_path_source(const PathSourceArchive* msg);
  static void set_has_scalar_path_source(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::BezierPathSourceArchive& bezier_path_source(const PathSourceArchive* msg);
  static void set_has_bezier_path_source(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::CalloutPathSourceArchive& callout_path_source(const PathSourceArchive* msg);
  static void set_has_callout_path_source(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::ConnectionLinePathSourceArchive& connection_line_path_source(const PathSourceArchive* msg);
  static void set_has_connection_line_path_source(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::EditableBezierPathSourceArchive& editable_bezier_path_source(const PathSourceArchive* msg);
  static void set_has_editable_bezier_path_source(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_localizationkey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_userdefinedname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSD::PointPathSourceArchive&
PathSourceArchive::_Internal::point_path_source(const PathSourceArchive* msg) {
  return *msg->point_path_source_;
}
const ::TSD::ScalarPathSourceArchive&
PathSourceArchive::_Internal::scalar_path_source(const PathSourceArchive* msg) {
  return *msg->scalar_path_source_;
}
const ::TSD::BezierPathSourceArchive&
PathSourceArchive::_Internal::bezier_path_source(const PathSourceArchive* msg) {
  return *msg->bezier_path_source_;
}
const ::TSD::CalloutPathSourceArchive&
PathSourceArchive::_Internal::callout_path_source(const PathSourceArchive* msg) {
  return *msg->callout_path_source_;
}
const ::TSD::ConnectionLinePathSourceArchive&
PathSourceArchive::_Internal::connection_line_path_source(const PathSourceArchive* msg) {
  return *msg->connection_line_path_source_;
}
const ::TSD::EditableBezierPathSourceArchive&
PathSourceArchive::_Internal::editable_bezier_path_source(const PathSourceArchive* msg) {
  return *msg->editable_bezier_path_source_;
}
PathSourceArchive::PathSourceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.PathSourceArchive)
}
PathSourceArchive::PathSourceArchive(const PathSourceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  localizationkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_localizationkey()) {
    localizationkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_localizationkey(), 
      GetArena());
  }
  userdefinedname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_userdefinedname()) {
    userdefinedname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userdefinedname(), 
      GetArena());
  }
  if (from._internal_has_point_path_source()) {
    point_path_source_ = new ::TSD::PointPathSourceArchive(*from.point_path_source_);
  } else {
    point_path_source_ = nullptr;
  }
  if (from._internal_has_scalar_path_source()) {
    scalar_path_source_ = new ::TSD::ScalarPathSourceArchive(*from.scalar_path_source_);
  } else {
    scalar_path_source_ = nullptr;
  }
  if (from._internal_has_bezier_path_source()) {
    bezier_path_source_ = new ::TSD::BezierPathSourceArchive(*from.bezier_path_source_);
  } else {
    bezier_path_source_ = nullptr;
  }
  if (from._internal_has_callout_path_source()) {
    callout_path_source_ = new ::TSD::CalloutPathSourceArchive(*from.callout_path_source_);
  } else {
    callout_path_source_ = nullptr;
  }
  if (from._internal_has_connection_line_path_source()) {
    connection_line_path_source_ = new ::TSD::ConnectionLinePathSourceArchive(*from.connection_line_path_source_);
  } else {
    connection_line_path_source_ = nullptr;
  }
  if (from._internal_has_editable_bezier_path_source()) {
    editable_bezier_path_source_ = new ::TSD::EditableBezierPathSourceArchive(*from.editable_bezier_path_source_);
  } else {
    editable_bezier_path_source_ = nullptr;
  }
  ::memcpy(&horizontalflip_, &from.horizontalflip_,
    static_cast<size_t>(reinterpret_cast<char*>(&verticalflip_) -
    reinterpret_cast<char*>(&horizontalflip_)) + sizeof(verticalflip_));
  // @@protoc_insertion_point(copy_constructor:TSD.PathSourceArchive)
}

void PathSourceArchive::SharedCtor() {
localizationkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
userdefinedname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&point_path_source_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&verticalflip_) -
    reinterpret_cast<char*>(&point_path_source_)) + sizeof(verticalflip_));
}

PathSourceArchive::~PathSourceArchive() {
  // @@protoc_insertion_point(destructor:TSD.PathSourceArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PathSourceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  localizationkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userdefinedname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete point_path_source_;
  if (this != internal_default_instance()) delete scalar_path_source_;
  if (this != internal_default_instance()) delete bezier_path_source_;
  if (this != internal_default_instance()) delete callout_path_source_;
  if (this != internal_default_instance()) delete connection_line_path_source_;
  if (this != internal_default_instance()) delete editable_bezier_path_source_;
}

void PathSourceArchive::ArenaDtor(void* object) {
  PathSourceArchive* _this = reinterpret_cast< PathSourceArchive* >(object);
  (void)_this;
}
void PathSourceArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathSourceArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PathSourceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.PathSourceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      localizationkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      userdefinedname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(point_path_source_ != nullptr);
      point_path_source_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(scalar_path_source_ != nullptr);
      scalar_path_source_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(bezier_path_source_ != nullptr);
      bezier_path_source_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(callout_path_source_ != nullptr);
      callout_path_source_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(connection_line_path_source_ != nullptr);
      connection_line_path_source_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(editable_bezier_path_source_ != nullptr);
      editable_bezier_path_source_->Clear();
    }
  }
  ::memset(&horizontalflip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verticalflip_) -
      reinterpret_cast<char*>(&horizontalflip_)) + sizeof(verticalflip_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathSourceArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool horizontalFlip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_horizontalflip(&has_bits);
          horizontalflip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool verticalFlip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_verticalflip(&has_bits);
          verticalflip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.PointPathSourceArchive point_path_source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_path_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ScalarPathSourceArchive scalar_path_source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalar_path_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.BezierPathSourceArchive bezier_path_source = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bezier_path_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.CalloutPathSourceArchive callout_path_source = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_callout_path_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ConnectionLinePathSourceArchive connection_line_path_source = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_line_path_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.EditableBezierPathSourceArchive editable_bezier_path_source = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_editable_bezier_path_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string localizationKey = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_localizationkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.PathSourceArchive.localizationKey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string userDefinedName = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_userdefinedname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.PathSourceArchive.userDefinedName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathSourceArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.PathSourceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool horizontalFlip = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_horizontalflip(), target);
  }

  // optional bool verticalFlip = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_verticalflip(), target);
  }

  // optional .TSD.PointPathSourceArchive point_path_source = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::point_path_source(this), target, stream);
  }

  // optional .TSD.ScalarPathSourceArchive scalar_path_source = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::scalar_path_source(this), target, stream);
  }

  // optional .TSD.BezierPathSourceArchive bezier_path_source = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bezier_path_source(this), target, stream);
  }

  // optional .TSD.CalloutPathSourceArchive callout_path_source = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::callout_path_source(this), target, stream);
  }

  // optional .TSD.ConnectionLinePathSourceArchive connection_line_path_source = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::connection_line_path_source(this), target, stream);
  }

  // optional .TSD.EditableBezierPathSourceArchive editable_bezier_path_source = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::editable_bezier_path_source(this), target, stream);
  }

  // optional string localizationKey = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localizationkey().data(), static_cast<int>(this->_internal_localizationkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.PathSourceArchive.localizationKey");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_localizationkey(), target);
  }

  // optional string userDefinedName = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_userdefinedname().data(), static_cast<int>(this->_internal_userdefinedname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.PathSourceArchive.userDefinedName");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_userdefinedname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.PathSourceArchive)
  return target;
}

size_t PathSourceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.PathSourceArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string localizationKey = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localizationkey());
    }

    // optional string userDefinedName = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_userdefinedname());
    }

    // optional .TSD.PointPathSourceArchive point_path_source = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *point_path_source_);
    }

    // optional .TSD.ScalarPathSourceArchive scalar_path_source = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scalar_path_source_);
    }

    // optional .TSD.BezierPathSourceArchive bezier_path_source = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bezier_path_source_);
    }

    // optional .TSD.CalloutPathSourceArchive callout_path_source = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *callout_path_source_);
    }

    // optional .TSD.ConnectionLinePathSourceArchive connection_line_path_source = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connection_line_path_source_);
    }

    // optional .TSD.EditableBezierPathSourceArchive editable_bezier_path_source = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *editable_bezier_path_source_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool horizontalFlip = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool verticalFlip = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathSourceArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.PathSourceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PathSourceArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathSourceArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.PathSourceArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.PathSourceArchive)
    MergeFrom(*source);
  }
}

void PathSourceArchive::MergeFrom(const PathSourceArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.PathSourceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_localizationkey(from._internal_localizationkey());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_userdefinedname(from._internal_userdefinedname());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_point_path_source()->::TSD::PointPathSourceArchive::MergeFrom(from._internal_point_path_source());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_scalar_path_source()->::TSD::ScalarPathSourceArchive::MergeFrom(from._internal_scalar_path_source());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_bezier_path_source()->::TSD::BezierPathSourceArchive::MergeFrom(from._internal_bezier_path_source());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_callout_path_source()->::TSD::CalloutPathSourceArchive::MergeFrom(from._internal_callout_path_source());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_connection_line_path_source()->::TSD::ConnectionLinePathSourceArchive::MergeFrom(from._internal_connection_line_path_source());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_editable_bezier_path_source()->::TSD::EditableBezierPathSourceArchive::MergeFrom(from._internal_editable_bezier_path_source());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      horizontalflip_ = from.horizontalflip_;
    }
    if (cached_has_bits & 0x00000200u) {
      verticalflip_ = from.verticalflip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PathSourceArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.PathSourceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathSourceArchive::CopyFrom(const PathSourceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.PathSourceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathSourceArchive::IsInitialized() const {
  if (_internal_has_point_path_source()) {
    if (!point_path_source_->IsInitialized()) return false;
  }
  if (_internal_has_scalar_path_source()) {
    if (!scalar_path_source_->IsInitialized()) return false;
  }
  if (_internal_has_bezier_path_source()) {
    if (!bezier_path_source_->IsInitialized()) return false;
  }
  if (_internal_has_callout_path_source()) {
    if (!callout_path_source_->IsInitialized()) return false;
  }
  if (_internal_has_connection_line_path_source()) {
    if (!connection_line_path_source_->IsInitialized()) return false;
  }
  if (_internal_has_editable_bezier_path_source()) {
    if (!editable_bezier_path_source_->IsInitialized()) return false;
  }
  return true;
}

void PathSourceArchive::InternalSwap(PathSourceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  localizationkey_.Swap(&other->localizationkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userdefinedname_.Swap(&other->userdefinedname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathSourceArchive, verticalflip_)
      + sizeof(PathSourceArchive::verticalflip_)
      - PROTOBUF_FIELD_OFFSET(PathSourceArchive, point_path_source_)>(
          reinterpret_cast<char*>(&point_path_source_),
          reinterpret_cast<char*>(&other->point_path_source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PathSourceArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[10]);
}

// ===================================================================

class AngleGradientArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AngleGradientArchive>()._has_bits_);
  static void set_has_gradientangle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AngleGradientArchive::AngleGradientArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.AngleGradientArchive)
}
AngleGradientArchive::AngleGradientArchive(const AngleGradientArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gradientangle_ = from.gradientangle_;
  // @@protoc_insertion_point(copy_constructor:TSD.AngleGradientArchive)
}

void AngleGradientArchive::SharedCtor() {
gradientangle_ = 0;
}

AngleGradientArchive::~AngleGradientArchive() {
  // @@protoc_insertion_point(destructor:TSD.AngleGradientArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AngleGradientArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AngleGradientArchive::ArenaDtor(void* object) {
  AngleGradientArchive* _this = reinterpret_cast< AngleGradientArchive* >(object);
  (void)_this;
}
void AngleGradientArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AngleGradientArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AngleGradientArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.AngleGradientArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gradientangle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AngleGradientArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float gradientangle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_gradientangle(&has_bits);
          gradientangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AngleGradientArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.AngleGradientArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float gradientangle = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_gradientangle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.AngleGradientArchive)
  return target;
}

size_t AngleGradientArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.AngleGradientArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float gradientangle = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AngleGradientArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.AngleGradientArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const AngleGradientArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AngleGradientArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.AngleGradientArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.AngleGradientArchive)
    MergeFrom(*source);
  }
}

void AngleGradientArchive::MergeFrom(const AngleGradientArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.AngleGradientArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gradientangle()) {
    _internal_set_gradientangle(from._internal_gradientangle());
  }
}

void AngleGradientArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.AngleGradientArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AngleGradientArchive::CopyFrom(const AngleGradientArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.AngleGradientArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngleGradientArchive::IsInitialized() const {
  return true;
}

void AngleGradientArchive::InternalSwap(AngleGradientArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gradientangle_, other->gradientangle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AngleGradientArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[11]);
}

// ===================================================================

class TransformGradientArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TransformGradientArchive>()._has_bits_);
  static const ::TSP::Point& start(const TransformGradientArchive* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Point& end(const TransformGradientArchive* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Size& basenaturalsize(const TransformGradientArchive* msg);
  static void set_has_basenaturalsize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Point&
TransformGradientArchive::_Internal::start(const TransformGradientArchive* msg) {
  return *msg->start_;
}
const ::TSP::Point&
TransformGradientArchive::_Internal::end(const TransformGradientArchive* msg) {
  return *msg->end_;
}
const ::TSP::Size&
TransformGradientArchive::_Internal::basenaturalsize(const TransformGradientArchive* msg) {
  return *msg->basenaturalsize_;
}
void TransformGradientArchive::clear_start() {
  if (start_ != nullptr) start_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TransformGradientArchive::clear_end() {
  if (end_ != nullptr) end_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TransformGradientArchive::clear_basenaturalsize() {
  if (basenaturalsize_ != nullptr) basenaturalsize_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TransformGradientArchive::TransformGradientArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.TransformGradientArchive)
}
TransformGradientArchive::TransformGradientArchive(const TransformGradientArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::TSP::Point(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::TSP::Point(*from.end_);
  } else {
    end_ = nullptr;
  }
  if (from._internal_has_basenaturalsize()) {
    basenaturalsize_ = new ::TSP::Size(*from.basenaturalsize_);
  } else {
    basenaturalsize_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.TransformGradientArchive)
}

void TransformGradientArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&basenaturalsize_) -
    reinterpret_cast<char*>(&start_)) + sizeof(basenaturalsize_));
}

TransformGradientArchive::~TransformGradientArchive() {
  // @@protoc_insertion_point(destructor:TSD.TransformGradientArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransformGradientArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
  if (this != internal_default_instance()) delete basenaturalsize_;
}

void TransformGradientArchive::ArenaDtor(void* object) {
  TransformGradientArchive* _this = reinterpret_cast< TransformGradientArchive* >(object);
  (void)_this;
}
void TransformGradientArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransformGradientArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransformGradientArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.TransformGradientArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(start_ != nullptr);
      start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(end_ != nullptr);
      end_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(basenaturalsize_ != nullptr);
      basenaturalsize_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransformGradientArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Point start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size baseNaturalSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_basenaturalsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransformGradientArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.TransformGradientArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Point start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // optional .TSP.Point end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end(this), target, stream);
  }

  // optional .TSP.Size baseNaturalSize = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::basenaturalsize(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.TransformGradientArchive)
  return target;
}

size_t TransformGradientArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.TransformGradientArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Point start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_);
    }

    // optional .TSP.Point end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_);
    }

    // optional .TSP.Size baseNaturalSize = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *basenaturalsize_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformGradientArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.TransformGradientArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformGradientArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransformGradientArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.TransformGradientArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.TransformGradientArchive)
    MergeFrom(*source);
  }
}

void TransformGradientArchive::MergeFrom(const TransformGradientArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.TransformGradientArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_start()->::TSP::Point::MergeFrom(from._internal_start());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_end()->::TSP::Point::MergeFrom(from._internal_end());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_basenaturalsize()->::TSP::Size::MergeFrom(from._internal_basenaturalsize());
    }
  }
}

void TransformGradientArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.TransformGradientArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformGradientArchive::CopyFrom(const TransformGradientArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.TransformGradientArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformGradientArchive::IsInitialized() const {
  if (_internal_has_start()) {
    if (!start_->IsInitialized()) return false;
  }
  if (_internal_has_end()) {
    if (!end_->IsInitialized()) return false;
  }
  if (_internal_has_basenaturalsize()) {
    if (!basenaturalsize_->IsInitialized()) return false;
  }
  return true;
}

void TransformGradientArchive::InternalSwap(TransformGradientArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransformGradientArchive, basenaturalsize_)
      + sizeof(TransformGradientArchive::basenaturalsize_)
      - PROTOBUF_FIELD_OFFSET(TransformGradientArchive, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransformGradientArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[12]);
}

// ===================================================================

class GradientArchive_GradientStop::_Internal {
 public:
  using HasBits = decltype(std::declval<GradientArchive_GradientStop>()._has_bits_);
  static const ::TSP::Color& color(const GradientArchive_GradientStop* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_inflection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Color&
GradientArchive_GradientStop::_Internal::color(const GradientArchive_GradientStop* msg) {
  return *msg->color_;
}
void GradientArchive_GradientStop::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GradientArchive_GradientStop::GradientArchive_GradientStop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.GradientArchive.GradientStop)
}
GradientArchive_GradientStop::GradientArchive_GradientStop(const GradientArchive_GradientStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::TSP::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  ::memcpy(&fraction_, &from.fraction_,
    static_cast<size_t>(reinterpret_cast<char*>(&inflection_) -
    reinterpret_cast<char*>(&fraction_)) + sizeof(inflection_));
  // @@protoc_insertion_point(copy_constructor:TSD.GradientArchive.GradientStop)
}

void GradientArchive_GradientStop::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inflection_) -
    reinterpret_cast<char*>(&color_)) + sizeof(inflection_));
}

GradientArchive_GradientStop::~GradientArchive_GradientStop() {
  // @@protoc_insertion_point(destructor:TSD.GradientArchive.GradientStop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GradientArchive_GradientStop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete color_;
}

void GradientArchive_GradientStop::ArenaDtor(void* object) {
  GradientArchive_GradientStop* _this = reinterpret_cast< GradientArchive_GradientStop* >(object);
  (void)_this;
}
void GradientArchive_GradientStop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GradientArchive_GradientStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GradientArchive_GradientStop::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.GradientArchive.GradientStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(color_ != nullptr);
    color_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&fraction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inflection_) -
        reinterpret_cast<char*>(&fraction_)) + sizeof(inflection_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GradientArchive_GradientStop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float fraction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_fraction(&has_bits);
          fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float inflection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_inflection(&has_bits);
          inflection_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GradientArchive_GradientStop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.GradientArchive.GradientStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::color(this), target, stream);
  }

  // optional float fraction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fraction(), target);
  }

  // optional float inflection = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_inflection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.GradientArchive.GradientStop)
  return target;
}

size_t GradientArchive_GradientStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.GradientArchive.GradientStop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Color color = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_);
    }

    // optional float fraction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float inflection = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GradientArchive_GradientStop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.GradientArchive.GradientStop)
  GOOGLE_DCHECK_NE(&from, this);
  const GradientArchive_GradientStop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GradientArchive_GradientStop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.GradientArchive.GradientStop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.GradientArchive.GradientStop)
    MergeFrom(*source);
  }
}

void GradientArchive_GradientStop::MergeFrom(const GradientArchive_GradientStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.GradientArchive.GradientStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_color()->::TSP::Color::MergeFrom(from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      fraction_ = from.fraction_;
    }
    if (cached_has_bits & 0x00000004u) {
      inflection_ = from.inflection_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GradientArchive_GradientStop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.GradientArchive.GradientStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GradientArchive_GradientStop::CopyFrom(const GradientArchive_GradientStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.GradientArchive.GradientStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GradientArchive_GradientStop::IsInitialized() const {
  if (_internal_has_color()) {
    if (!color_->IsInitialized()) return false;
  }
  return true;
}

void GradientArchive_GradientStop::InternalSwap(GradientArchive_GradientStop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GradientArchive_GradientStop, inflection_)
      + sizeof(GradientArchive_GradientStop::inflection_)
      - PROTOBUF_FIELD_OFFSET(GradientArchive_GradientStop, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GradientArchive_GradientStop::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[13]);
}

// ===================================================================

class GradientArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GradientArchive>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_advancedgradient(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::AngleGradientArchive& anglegradient(const GradientArchive* msg);
  static void set_has_anglegradient(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::TransformGradientArchive& transformgradient(const GradientArchive* msg);
  static void set_has_transformgradient(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSD::AngleGradientArchive&
GradientArchive::_Internal::anglegradient(const GradientArchive* msg) {
  return *msg->anglegradient_;
}
const ::TSD::TransformGradientArchive&
GradientArchive::_Internal::transformgradient(const GradientArchive* msg) {
  return *msg->transformgradient_;
}
GradientArchive::GradientArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stops_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.GradientArchive)
}
GradientArchive::GradientArchive(const GradientArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stops_(from.stops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_anglegradient()) {
    anglegradient_ = new ::TSD::AngleGradientArchive(*from.anglegradient_);
  } else {
    anglegradient_ = nullptr;
  }
  if (from._internal_has_transformgradient()) {
    transformgradient_ = new ::TSD::TransformGradientArchive(*from.transformgradient_);
  } else {
    transformgradient_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&advancedgradient_) -
    reinterpret_cast<char*>(&type_)) + sizeof(advancedgradient_));
  // @@protoc_insertion_point(copy_constructor:TSD.GradientArchive)
}

void GradientArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&anglegradient_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&advancedgradient_) -
    reinterpret_cast<char*>(&anglegradient_)) + sizeof(advancedgradient_));
}

GradientArchive::~GradientArchive() {
  // @@protoc_insertion_point(destructor:TSD.GradientArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GradientArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete anglegradient_;
  if (this != internal_default_instance()) delete transformgradient_;
}

void GradientArchive::ArenaDtor(void* object) {
  GradientArchive* _this = reinterpret_cast< GradientArchive* >(object);
  (void)_this;
}
void GradientArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GradientArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GradientArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.GradientArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stops_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(anglegradient_ != nullptr);
      anglegradient_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(transformgradient_ != nullptr);
      transformgradient_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&advancedgradient_) -
        reinterpret_cast<char*>(&type_)) + sizeof(advancedgradient_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GradientArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.GradientArchive.GradientType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::GradientArchive_GradientType_IsValid(val))) {
            _internal_set_type(static_cast<::TSD::GradientArchive_GradientType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .TSD.GradientArchive.GradientStop stops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float opacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_opacity(&has_bits);
          opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool advancedGradient = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_advancedgradient(&has_bits);
          advancedgradient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.AngleGradientArchive anglegradient = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_anglegradient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.TransformGradientArchive transformgradient = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformgradient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GradientArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.GradientArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.GradientArchive.GradientType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .TSD.GradientArchive.GradientStop stops = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stops(i), target, stream);
  }

  // optional float opacity = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_opacity(), target);
  }

  // optional bool advancedGradient = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_advancedgradient(), target);
  }

  // optional .TSD.AngleGradientArchive anglegradient = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::anglegradient(this), target, stream);
  }

  // optional .TSD.TransformGradientArchive transformgradient = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::transformgradient(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.GradientArchive)
  return target;
}

size_t GradientArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.GradientArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSD.GradientArchive.GradientStop stops = 2;
  total_size += 1UL * this->_internal_stops_size();
  for (const auto& msg : this->stops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSD.AngleGradientArchive anglegradient = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *anglegradient_);
    }

    // optional .TSD.TransformGradientArchive transformgradient = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transformgradient_);
    }

    // optional .TSD.GradientArchive.GradientType type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional float opacity = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool advancedGradient = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GradientArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.GradientArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const GradientArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GradientArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.GradientArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.GradientArchive)
    MergeFrom(*source);
  }
}

void GradientArchive::MergeFrom(const GradientArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.GradientArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stops_.MergeFrom(from.stops_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_anglegradient()->::TSD::AngleGradientArchive::MergeFrom(from._internal_anglegradient());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_transformgradient()->::TSD::TransformGradientArchive::MergeFrom(from._internal_transformgradient());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      opacity_ = from.opacity_;
    }
    if (cached_has_bits & 0x00000010u) {
      advancedgradient_ = from.advancedgradient_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GradientArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.GradientArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GradientArchive::CopyFrom(const GradientArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.GradientArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GradientArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(stops_)) return false;
  if (_internal_has_transformgradient()) {
    if (!transformgradient_->IsInitialized()) return false;
  }
  return true;
}

void GradientArchive::InternalSwap(GradientArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stops_.InternalSwap(&other->stops_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GradientArchive, advancedgradient_)
      + sizeof(GradientArchive::advancedgradient_)
      - PROTOBUF_FIELD_OFFSET(GradientArchive, anglegradient_)>(
          reinterpret_cast<char*>(&anglegradient_),
          reinterpret_cast<char*>(&other->anglegradient_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GradientArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[14]);
}

// ===================================================================

class ImageFillArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageFillArchive>()._has_bits_);
  static const ::TSP::DataReference& imagedata(const ImageFillArchive* msg);
  static void set_has_imagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_technique(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Color& tint(const ImageFillArchive* msg);
  static void set_has_tint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Size& fillsize(const ImageFillArchive* msg);
  static void set_has_fillsize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::DataReference& originalimagedata(const ImageFillArchive* msg);
  static void set_has_originalimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_interpretsuntaggedimagedataasgeneric(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Color& referencecolor(const ImageFillArchive* msg);
  static void set_has_referencecolor(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& database_imagedata(const ImageFillArchive* msg);
  static void set_has_database_imagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& database_originalimagedata(const ImageFillArchive* msg);
  static void set_has_database_originalimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSP::DataReference&
ImageFillArchive::_Internal::imagedata(const ImageFillArchive* msg) {
  return *msg->imagedata_;
}
const ::TSP::Color&
ImageFillArchive::_Internal::tint(const ImageFillArchive* msg) {
  return *msg->tint_;
}
const ::TSP::Size&
ImageFillArchive::_Internal::fillsize(const ImageFillArchive* msg) {
  return *msg->fillsize_;
}
const ::TSP::DataReference&
ImageFillArchive::_Internal::originalimagedata(const ImageFillArchive* msg) {
  return *msg->originalimagedata_;
}
const ::TSP::Color&
ImageFillArchive::_Internal::referencecolor(const ImageFillArchive* msg) {
  return *msg->referencecolor_;
}
const ::TSP::Reference&
ImageFillArchive::_Internal::database_imagedata(const ImageFillArchive* msg) {
  return *msg->database_imagedata_;
}
const ::TSP::Reference&
ImageFillArchive::_Internal::database_originalimagedata(const ImageFillArchive* msg) {
  return *msg->database_originalimagedata_;
}
void ImageFillArchive::clear_imagedata() {
  if (imagedata_ != nullptr) imagedata_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ImageFillArchive::clear_tint() {
  if (tint_ != nullptr) tint_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ImageFillArchive::clear_fillsize() {
  if (fillsize_ != nullptr) fillsize_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ImageFillArchive::clear_originalimagedata() {
  if (originalimagedata_ != nullptr) originalimagedata_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ImageFillArchive::clear_referencecolor() {
  if (referencecolor_ != nullptr) referencecolor_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ImageFillArchive::clear_database_imagedata() {
  if (database_imagedata_ != nullptr) database_imagedata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ImageFillArchive::clear_database_originalimagedata() {
  if (database_originalimagedata_ != nullptr) database_originalimagedata_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ImageFillArchive::ImageFillArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ImageFillArchive)
}
ImageFillArchive::ImageFillArchive(const ImageFillArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_database_imagedata()) {
    database_imagedata_ = new ::TSP::Reference(*from.database_imagedata_);
  } else {
    database_imagedata_ = nullptr;
  }
  if (from._internal_has_tint()) {
    tint_ = new ::TSP::Color(*from.tint_);
  } else {
    tint_ = nullptr;
  }
  if (from._internal_has_fillsize()) {
    fillsize_ = new ::TSP::Size(*from.fillsize_);
  } else {
    fillsize_ = nullptr;
  }
  if (from._internal_has_database_originalimagedata()) {
    database_originalimagedata_ = new ::TSP::Reference(*from.database_originalimagedata_);
  } else {
    database_originalimagedata_ = nullptr;
  }
  if (from._internal_has_imagedata()) {
    imagedata_ = new ::TSP::DataReference(*from.imagedata_);
  } else {
    imagedata_ = nullptr;
  }
  if (from._internal_has_originalimagedata()) {
    originalimagedata_ = new ::TSP::DataReference(*from.originalimagedata_);
  } else {
    originalimagedata_ = nullptr;
  }
  if (from._internal_has_referencecolor()) {
    referencecolor_ = new ::TSP::Color(*from.referencecolor_);
  } else {
    referencecolor_ = nullptr;
  }
  ::memcpy(&technique_, &from.technique_,
    static_cast<size_t>(reinterpret_cast<char*>(&interpretsuntaggedimagedataasgeneric_) -
    reinterpret_cast<char*>(&technique_)) + sizeof(interpretsuntaggedimagedataasgeneric_));
  // @@protoc_insertion_point(copy_constructor:TSD.ImageFillArchive)
}

void ImageFillArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&database_imagedata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&interpretsuntaggedimagedataasgeneric_) -
    reinterpret_cast<char*>(&database_imagedata_)) + sizeof(interpretsuntaggedimagedataasgeneric_));
}

ImageFillArchive::~ImageFillArchive() {
  // @@protoc_insertion_point(destructor:TSD.ImageFillArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageFillArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete database_imagedata_;
  if (this != internal_default_instance()) delete tint_;
  if (this != internal_default_instance()) delete fillsize_;
  if (this != internal_default_instance()) delete database_originalimagedata_;
  if (this != internal_default_instance()) delete imagedata_;
  if (this != internal_default_instance()) delete originalimagedata_;
  if (this != internal_default_instance()) delete referencecolor_;
}

void ImageFillArchive::ArenaDtor(void* object) {
  ImageFillArchive* _this = reinterpret_cast< ImageFillArchive* >(object);
  (void)_this;
}
void ImageFillArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageFillArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageFillArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ImageFillArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(database_imagedata_ != nullptr);
      database_imagedata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tint_ != nullptr);
      tint_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(fillsize_ != nullptr);
      fillsize_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(database_originalimagedata_ != nullptr);
      database_originalimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(imagedata_ != nullptr);
      imagedata_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(originalimagedata_ != nullptr);
      originalimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(referencecolor_ != nullptr);
      referencecolor_->Clear();
    }
  }
  technique_ = 0;
  interpretsuntaggedimagedataasgeneric_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageFillArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference database_imagedata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_imagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ImageFillArchive.ImageFillTechnique technique = 2 [default = NaturalSize];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::ImageFillArchive_ImageFillTechnique_IsValid(val))) {
            _internal_set_technique(static_cast<::TSD::ImageFillArchive_ImageFillTechnique>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color tint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size fillsize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fillsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference database_originalimagedata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_originalimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference imagedata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_imagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference originalimagedata = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_originalimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool interpretsUntaggedImageDataAsGeneric = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_interpretsuntaggedimagedataasgeneric(&has_bits);
          interpretsuntaggedimagedataasgeneric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color referencecolor = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_referencecolor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageFillArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ImageFillArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference database_imagedata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::database_imagedata(this), target, stream);
  }

  // optional .TSD.ImageFillArchive.ImageFillTechnique technique = 2 [default = NaturalSize];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_technique(), target);
  }

  // optional .TSP.Color tint = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tint(this), target, stream);
  }

  // optional .TSP.Size fillsize = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fillsize(this), target, stream);
  }

  // optional .TSP.Reference database_originalimagedata = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::database_originalimagedata(this), target, stream);
  }

  // optional .TSP.DataReference imagedata = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::imagedata(this), target, stream);
  }

  // optional .TSP.DataReference originalimagedata = 7 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::originalimagedata(this), target, stream);
  }

  // optional bool interpretsUntaggedImageDataAsGeneric = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_interpretsuntaggedimagedataasgeneric(), target);
  }

  // optional .TSP.Color referencecolor = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::referencecolor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ImageFillArchive)
  return target;
}

size_t ImageFillArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ImageFillArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Reference database_imagedata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_imagedata_);
    }

    // optional .TSP.Color tint = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tint_);
    }

    // optional .TSP.Size fillsize = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fillsize_);
    }

    // optional .TSP.Reference database_originalimagedata = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_originalimagedata_);
    }

    // optional .TSP.DataReference imagedata = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *imagedata_);
    }

    // optional .TSP.DataReference originalimagedata = 7 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *originalimagedata_);
    }

    // optional .TSP.Color referencecolor = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *referencecolor_);
    }

    // optional .TSD.ImageFillArchive.ImageFillTechnique technique = 2 [default = NaturalSize];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_technique());
    }

  }
  // optional bool interpretsUntaggedImageDataAsGeneric = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageFillArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ImageFillArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageFillArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageFillArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ImageFillArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ImageFillArchive)
    MergeFrom(*source);
  }
}

void ImageFillArchive::MergeFrom(const ImageFillArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ImageFillArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_database_imagedata()->::TSP::Reference::MergeFrom(from._internal_database_imagedata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tint()->::TSP::Color::MergeFrom(from._internal_tint());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_fillsize()->::TSP::Size::MergeFrom(from._internal_fillsize());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_database_originalimagedata()->::TSP::Reference::MergeFrom(from._internal_database_originalimagedata());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_imagedata()->::TSP::DataReference::MergeFrom(from._internal_imagedata());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_originalimagedata()->::TSP::DataReference::MergeFrom(from._internal_originalimagedata());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_referencecolor()->::TSP::Color::MergeFrom(from._internal_referencecolor());
    }
    if (cached_has_bits & 0x00000080u) {
      technique_ = from.technique_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_interpretsuntaggedimagedataasgeneric(from._internal_interpretsuntaggedimagedataasgeneric());
  }
}

void ImageFillArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ImageFillArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageFillArchive::CopyFrom(const ImageFillArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ImageFillArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageFillArchive::IsInitialized() const {
  if (_internal_has_database_imagedata()) {
    if (!database_imagedata_->IsInitialized()) return false;
  }
  if (_internal_has_tint()) {
    if (!tint_->IsInitialized()) return false;
  }
  if (_internal_has_fillsize()) {
    if (!fillsize_->IsInitialized()) return false;
  }
  if (_internal_has_database_originalimagedata()) {
    if (!database_originalimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_imagedata()) {
    if (!imagedata_->IsInitialized()) return false;
  }
  if (_internal_has_originalimagedata()) {
    if (!originalimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_referencecolor()) {
    if (!referencecolor_->IsInitialized()) return false;
  }
  return true;
}

void ImageFillArchive::InternalSwap(ImageFillArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageFillArchive, interpretsuntaggedimagedataasgeneric_)
      + sizeof(ImageFillArchive::interpretsuntaggedimagedataasgeneric_)
      - PROTOBUF_FIELD_OFFSET(ImageFillArchive, database_imagedata_)>(
          reinterpret_cast<char*>(&database_imagedata_),
          reinterpret_cast<char*>(&other->database_imagedata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageFillArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[15]);
}

// ===================================================================

class FillArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FillArchive>()._has_bits_);
  static const ::TSP::Color& color(const FillArchive* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::GradientArchive& gradient(const FillArchive* msg);
  static void set_has_gradient(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::ImageFillArchive& image(const FillArchive* msg);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Color&
FillArchive::_Internal::color(const FillArchive* msg) {
  return *msg->color_;
}
const ::TSD::GradientArchive&
FillArchive::_Internal::gradient(const FillArchive* msg) {
  return *msg->gradient_;
}
const ::TSD::ImageFillArchive&
FillArchive::_Internal::image(const FillArchive* msg) {
  return *msg->image_;
}
void FillArchive::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FillArchive::FillArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.FillArchive)
}
FillArchive::FillArchive(const FillArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_has_color()) {
    color_ = new ::TSP::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  if (from._internal_has_gradient()) {
    gradient_ = new ::TSD::GradientArchive(*from.gradient_);
  } else {
    gradient_ = nullptr;
  }
  if (from._internal_has_image()) {
    image_ = new ::TSD::ImageFillArchive(*from.image_);
  } else {
    image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.FillArchive)
}

void FillArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&image_) -
    reinterpret_cast<char*>(&color_)) + sizeof(image_));
}

FillArchive::~FillArchive() {
  // @@protoc_insertion_point(destructor:TSD.FillArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FillArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete color_;
  if (this != internal_default_instance()) delete gradient_;
  if (this != internal_default_instance()) delete image_;
}

void FillArchive::ArenaDtor(void* object) {
  FillArchive* _this = reinterpret_cast< FillArchive* >(object);
  (void)_this;
}
void FillArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FillArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FillArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.FillArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(color_ != nullptr);
      color_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gradient_ != nullptr);
      gradient_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(image_ != nullptr);
      image_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FillArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.GradientArchive gradient = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gradient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ImageFillArchive image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FillArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.FillArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::color(this), target, stream);
  }

  // optional .TSD.GradientArchive gradient = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gradient(this), target, stream);
  }

  // optional .TSD.ImageFillArchive image = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::image(this), target, stream);
  }

  // Extension range [100, 536870912)
  target = _extensions_._InternalSerialize(
      100, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.FillArchive)
  return target;
}

size_t FillArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.FillArchive)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Color color = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_);
    }

    // optional .TSD.GradientArchive gradient = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gradient_);
    }

    // optional .TSD.ImageFillArchive image = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FillArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.FillArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FillArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FillArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.FillArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.FillArchive)
    MergeFrom(*source);
  }
}

void FillArchive::MergeFrom(const FillArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.FillArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_color()->::TSP::Color::MergeFrom(from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_gradient()->::TSD::GradientArchive::MergeFrom(from._internal_gradient());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_image()->::TSD::ImageFillArchive::MergeFrom(from._internal_image());
    }
  }
}

void FillArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.FillArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FillArchive::CopyFrom(const FillArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.FillArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillArchive::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_internal_has_color()) {
    if (!color_->IsInitialized()) return false;
  }
  if (_internal_has_gradient()) {
    if (!gradient_->IsInitialized()) return false;
  }
  if (_internal_has_image()) {
    if (!image_->IsInitialized()) return false;
  }
  return true;
}

void FillArchive::InternalSwap(FillArchive* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FillArchive, image_)
      + sizeof(FillArchive::image_)
      - PROTOBUF_FIELD_OFFSET(FillArchive, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FillArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[16]);
}

// ===================================================================

class StrokePatternArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StrokePatternArchive>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

StrokePatternArchive::StrokePatternArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pattern_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.StrokePatternArchive)
}
StrokePatternArchive::StrokePatternArchive(const StrokePatternArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pattern_(from.pattern_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&type_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:TSD.StrokePatternArchive)
}

void StrokePatternArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&type_)) + sizeof(count_));
}

StrokePatternArchive::~StrokePatternArchive() {
  // @@protoc_insertion_point(destructor:TSD.StrokePatternArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StrokePatternArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StrokePatternArchive::ArenaDtor(void* object) {
  StrokePatternArchive* _this = reinterpret_cast< StrokePatternArchive* >(object);
  (void)_this;
}
void StrokePatternArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StrokePatternArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StrokePatternArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.StrokePatternArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pattern_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&type_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrokePatternArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.StrokePatternArchive.StrokePatternType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::StrokePatternArchive_StrokePatternType_IsValid(val))) {
            _internal_set_type(static_cast<::TSD::StrokePatternArchive_StrokePatternType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float phase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_phase(&has_bits);
          phase_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float pattern = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pattern(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_pattern(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StrokePatternArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.StrokePatternArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.StrokePatternArchive.StrokePatternType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional float phase = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_phase(), target);
  }

  // optional uint32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  // repeated float pattern = 4;
  for (int i = 0, n = this->_internal_pattern_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_pattern(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.StrokePatternArchive)
  return target;
}

size_t StrokePatternArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.StrokePatternArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float pattern = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_pattern_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pattern_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSD.StrokePatternArchive.StrokePatternType type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional float phase = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StrokePatternArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.StrokePatternArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const StrokePatternArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StrokePatternArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.StrokePatternArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.StrokePatternArchive)
    MergeFrom(*source);
  }
}

void StrokePatternArchive::MergeFrom(const StrokePatternArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.StrokePatternArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pattern_.MergeFrom(from.pattern_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      phase_ = from.phase_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StrokePatternArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.StrokePatternArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrokePatternArchive::CopyFrom(const StrokePatternArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.StrokePatternArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrokePatternArchive::IsInitialized() const {
  return true;
}

void StrokePatternArchive::InternalSwap(StrokePatternArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pattern_.InternalSwap(&other->pattern_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StrokePatternArchive, count_)
      + sizeof(StrokePatternArchive::count_)
      - PROTOBUF_FIELD_OFFSET(StrokePatternArchive, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StrokePatternArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[17]);
}

// ===================================================================

class StrokeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StrokeArchive>()._has_bits_);
  static const ::TSP::Color& color(const StrokeArchive* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cap(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_join(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_miter_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::StrokePatternArchive& pattern(const StrokeArchive* msg);
  static void set_has_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::SmartStrokeArchive& smart_stroke(const StrokeArchive* msg);
  static void set_has_smart_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::FrameArchive& frame(const StrokeArchive* msg);
  static void set_has_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::PatternedStrokeArchive& patterned_stroke(const StrokeArchive* msg);
  static void set_has_patterned_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSP::Color&
StrokeArchive::_Internal::color(const StrokeArchive* msg) {
  return *msg->color_;
}
const ::TSD::StrokePatternArchive&
StrokeArchive::_Internal::pattern(const StrokeArchive* msg) {
  return *msg->pattern_;
}
const ::TSD::SmartStrokeArchive&
StrokeArchive::_Internal::smart_stroke(const StrokeArchive* msg) {
  return *msg->smart_stroke_;
}
const ::TSD::FrameArchive&
StrokeArchive::_Internal::frame(const StrokeArchive* msg) {
  return *msg->frame_;
}
const ::TSD::PatternedStrokeArchive&
StrokeArchive::_Internal::patterned_stroke(const StrokeArchive* msg) {
  return *msg->patterned_stroke_;
}
void StrokeArchive::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
StrokeArchive::StrokeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.StrokeArchive)
}
StrokeArchive::StrokeArchive(const StrokeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::TSP::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  if (from._internal_has_pattern()) {
    pattern_ = new ::TSD::StrokePatternArchive(*from.pattern_);
  } else {
    pattern_ = nullptr;
  }
  if (from._internal_has_smart_stroke()) {
    smart_stroke_ = new ::TSD::SmartStrokeArchive(*from.smart_stroke_);
  } else {
    smart_stroke_ = nullptr;
  }
  if (from._internal_has_frame()) {
    frame_ = new ::TSD::FrameArchive(*from.frame_);
  } else {
    frame_ = nullptr;
  }
  if (from._internal_has_patterned_stroke()) {
    patterned_stroke_ = new ::TSD::PatternedStrokeArchive(*from.patterned_stroke_);
  } else {
    patterned_stroke_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&miter_limit_) -
    reinterpret_cast<char*>(&width_)) + sizeof(miter_limit_));
  // @@protoc_insertion_point(copy_constructor:TSD.StrokeArchive)
}

void StrokeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&miter_limit_) -
    reinterpret_cast<char*>(&color_)) + sizeof(miter_limit_));
}

StrokeArchive::~StrokeArchive() {
  // @@protoc_insertion_point(destructor:TSD.StrokeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StrokeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete color_;
  if (this != internal_default_instance()) delete pattern_;
  if (this != internal_default_instance()) delete smart_stroke_;
  if (this != internal_default_instance()) delete frame_;
  if (this != internal_default_instance()) delete patterned_stroke_;
}

void StrokeArchive::ArenaDtor(void* object) {
  StrokeArchive* _this = reinterpret_cast< StrokeArchive* >(object);
  (void)_this;
}
void StrokeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StrokeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StrokeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.StrokeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(color_ != nullptr);
      color_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pattern_ != nullptr);
      pattern_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(smart_stroke_ != nullptr);
      smart_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(frame_ != nullptr);
      frame_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(patterned_stroke_ != nullptr);
      patterned_stroke_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&join_) -
        reinterpret_cast<char*>(&width_)) + sizeof(join_));
  }
  miter_limit_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrokeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive.LineCap cap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::StrokeArchive_LineCap_IsValid(val))) {
            _internal_set_cap(static_cast<::TSD::StrokeArchive_LineCap>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSD.LineJoin join = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::LineJoin_IsValid(val))) {
            _internal_set_join(static_cast<::TSD::LineJoin>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float miter_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_miter_limit(&has_bits);
          miter_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokePatternArchive pattern = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pattern(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.SmartStrokeArchive smart_stroke = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_smart_stroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FrameArchive frame = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.PatternedStrokeArchive patterned_stroke = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_patterned_stroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StrokeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.StrokeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::color(this), target, stream);
  }

  // optional float width = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_width(), target);
  }

  // optional .TSD.StrokeArchive.LineCap cap = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_cap(), target);
  }

  // optional .TSD.LineJoin join = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_join(), target);
  }

  // optional float miter_limit = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_miter_limit(), target);
  }

  // optional .TSD.StrokePatternArchive pattern = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pattern(this), target, stream);
  }

  // optional .TSD.SmartStrokeArchive smart_stroke = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::smart_stroke(this), target, stream);
  }

  // optional .TSD.FrameArchive frame = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::frame(this), target, stream);
  }

  // optional .TSD.PatternedStrokeArchive patterned_stroke = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::patterned_stroke(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.StrokeArchive)
  return target;
}

size_t StrokeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.StrokeArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Color color = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_);
    }

    // optional .TSD.StrokePatternArchive pattern = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pattern_);
    }

    // optional .TSD.SmartStrokeArchive smart_stroke = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *smart_stroke_);
    }

    // optional .TSD.FrameArchive frame = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_);
    }

    // optional .TSD.PatternedStrokeArchive patterned_stroke = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *patterned_stroke_);
    }

    // optional float width = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional .TSD.StrokeArchive.LineCap cap = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cap());
    }

    // optional .TSD.LineJoin join = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_join());
    }

  }
  // optional float miter_limit = 5;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StrokeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.StrokeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const StrokeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StrokeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.StrokeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.StrokeArchive)
    MergeFrom(*source);
  }
}

void StrokeArchive::MergeFrom(const StrokeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.StrokeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_color()->::TSP::Color::MergeFrom(from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pattern()->::TSD::StrokePatternArchive::MergeFrom(from._internal_pattern());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_smart_stroke()->::TSD::SmartStrokeArchive::MergeFrom(from._internal_smart_stroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_frame()->::TSD::FrameArchive::MergeFrom(from._internal_frame());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_patterned_stroke()->::TSD::PatternedStrokeArchive::MergeFrom(from._internal_patterned_stroke());
    }
    if (cached_has_bits & 0x00000020u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000040u) {
      cap_ = from.cap_;
    }
    if (cached_has_bits & 0x00000080u) {
      join_ = from.join_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_miter_limit(from._internal_miter_limit());
  }
}

void StrokeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.StrokeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrokeArchive::CopyFrom(const StrokeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.StrokeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrokeArchive::IsInitialized() const {
  if (_internal_has_color()) {
    if (!color_->IsInitialized()) return false;
  }
  if (_internal_has_smart_stroke()) {
    if (!smart_stroke_->IsInitialized()) return false;
  }
  return true;
}

void StrokeArchive::InternalSwap(StrokeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StrokeArchive, miter_limit_)
      + sizeof(StrokeArchive::miter_limit_)
      - PROTOBUF_FIELD_OFFSET(StrokeArchive, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StrokeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[18]);
}

// ===================================================================

class SmartStrokeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SmartStrokeArchive>()._has_bits_);
  static void set_has_stroke_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_random_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::ReferenceDictionary& parametervalues(const SmartStrokeArchive* msg);
  static void set_has_parametervalues(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pattern_offset_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::ReferenceDictionary&
SmartStrokeArchive::_Internal::parametervalues(const SmartStrokeArchive* msg) {
  return *msg->parametervalues_;
}
void SmartStrokeArchive::clear_parametervalues() {
  if (parametervalues_ != nullptr) parametervalues_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SmartStrokeArchive::SmartStrokeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.SmartStrokeArchive)
}
SmartStrokeArchive::SmartStrokeArchive(const SmartStrokeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stroke_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stroke_name()) {
    stroke_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stroke_name(), 
      GetArena());
  }
  if (from._internal_has_parametervalues()) {
    parametervalues_ = new ::TSP::ReferenceDictionary(*from.parametervalues_);
  } else {
    parametervalues_ = nullptr;
  }
  ::memcpy(&pattern_offset_distance_, &from.pattern_offset_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&random_seed_) -
    reinterpret_cast<char*>(&pattern_offset_distance_)) + sizeof(random_seed_));
  // @@protoc_insertion_point(copy_constructor:TSD.SmartStrokeArchive)
}

void SmartStrokeArchive::SharedCtor() {
stroke_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parametervalues_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&random_seed_) -
    reinterpret_cast<char*>(&parametervalues_)) + sizeof(random_seed_));
}

SmartStrokeArchive::~SmartStrokeArchive() {
  // @@protoc_insertion_point(destructor:TSD.SmartStrokeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SmartStrokeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stroke_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parametervalues_;
}

void SmartStrokeArchive::ArenaDtor(void* object) {
  SmartStrokeArchive* _this = reinterpret_cast< SmartStrokeArchive* >(object);
  (void)_this;
}
void SmartStrokeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SmartStrokeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SmartStrokeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.SmartStrokeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stroke_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(parametervalues_ != nullptr);
      parametervalues_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&pattern_offset_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&random_seed_) -
        reinterpret_cast<char*>(&pattern_offset_distance_)) + sizeof(random_seed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmartStrokeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string stroke_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stroke_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.SmartStrokeArchive.stroke_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 random_seed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_random_seed(&has_bits);
          random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.ReferenceDictionary parameterValues = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_parametervalues(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double pattern_offset_distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_pattern_offset_distance(&has_bits);
          pattern_offset_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SmartStrokeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.SmartStrokeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string stroke_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stroke_name().data(), static_cast<int>(this->_internal_stroke_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.SmartStrokeArchive.stroke_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stroke_name(), target);
  }

  // optional uint32 random_seed = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_random_seed(), target);
  }

  // optional .TSP.ReferenceDictionary parameterValues = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::parametervalues(this), target, stream);
  }

  // optional double pattern_offset_distance = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_pattern_offset_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.SmartStrokeArchive)
  return target;
}

size_t SmartStrokeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.SmartStrokeArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string stroke_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stroke_name());
    }

    // optional .TSP.ReferenceDictionary parameterValues = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parametervalues_);
    }

    // optional double pattern_offset_distance = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 random_seed = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_random_seed());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SmartStrokeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.SmartStrokeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SmartStrokeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SmartStrokeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.SmartStrokeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.SmartStrokeArchive)
    MergeFrom(*source);
  }
}

void SmartStrokeArchive::MergeFrom(const SmartStrokeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.SmartStrokeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stroke_name(from._internal_stroke_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_parametervalues()->::TSP::ReferenceDictionary::MergeFrom(from._internal_parametervalues());
    }
    if (cached_has_bits & 0x00000004u) {
      pattern_offset_distance_ = from.pattern_offset_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      random_seed_ = from.random_seed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SmartStrokeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.SmartStrokeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmartStrokeArchive::CopyFrom(const SmartStrokeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.SmartStrokeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmartStrokeArchive::IsInitialized() const {
  if (_internal_has_parametervalues()) {
    if (!parametervalues_->IsInitialized()) return false;
  }
  return true;
}

void SmartStrokeArchive::InternalSwap(SmartStrokeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stroke_name_.Swap(&other->stroke_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SmartStrokeArchive, random_seed_)
      + sizeof(SmartStrokeArchive::random_seed_)
      - PROTOBUF_FIELD_OFFSET(SmartStrokeArchive, parametervalues_)>(
          reinterpret_cast<char*>(&parametervalues_),
          reinterpret_cast<char*>(&other->parametervalues_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SmartStrokeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[19]);
}

// ===================================================================

class FrameArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameArchive>()._has_bits_);
  static void set_has_framename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_assetscale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FrameArchive::FrameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.FrameArchive)
}
FrameArchive::FrameArchive(const FrameArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  framename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_framename()) {
    framename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_framename(), 
      GetArena());
  }
  assetscale_ = from.assetscale_;
  // @@protoc_insertion_point(copy_constructor:TSD.FrameArchive)
}

void FrameArchive::SharedCtor() {
framename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
assetscale_ = 0;
}

FrameArchive::~FrameArchive() {
  // @@protoc_insertion_point(destructor:TSD.FrameArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrameArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  framename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FrameArchive::ArenaDtor(void* object) {
  FrameArchive* _this = reinterpret_cast< FrameArchive* >(object);
  (void)_this;
}
void FrameArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FrameArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.FrameArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    framename_.ClearNonDefaultToEmpty();
  }
  assetscale_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string frameName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_framename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.FrameArchive.frameName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float assetScale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_assetscale(&has_bits);
          assetscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.FrameArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string frameName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_framename().data(), static_cast<int>(this->_internal_framename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.FrameArchive.frameName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_framename(), target);
  }

  // optional float assetScale = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_assetscale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.FrameArchive)
  return target;
}

size_t FrameArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.FrameArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string frameName = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_framename());
    }

    // optional float assetScale = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.FrameArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.FrameArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.FrameArchive)
    MergeFrom(*source);
  }
}

void FrameArchive::MergeFrom(const FrameArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.FrameArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_framename(from._internal_framename());
    }
    if (cached_has_bits & 0x00000002u) {
      assetscale_ = from.assetscale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.FrameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameArchive::CopyFrom(const FrameArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.FrameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameArchive::IsInitialized() const {
  return true;
}

void FrameArchive::InternalSwap(FrameArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  framename_.Swap(&other->framename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(assetscale_, other->assetscale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[20]);
}

// ===================================================================

class PatternedStrokeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PatternedStrokeArchive>()._has_bits_);
  static void set_has_pattern_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PatternedStrokeArchive::PatternedStrokeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.PatternedStrokeArchive)
}
PatternedStrokeArchive::PatternedStrokeArchive(const PatternedStrokeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pattern_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pattern_name()) {
    pattern_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pattern_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TSD.PatternedStrokeArchive)
}

void PatternedStrokeArchive::SharedCtor() {
pattern_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PatternedStrokeArchive::~PatternedStrokeArchive() {
  // @@protoc_insertion_point(destructor:TSD.PatternedStrokeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PatternedStrokeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pattern_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PatternedStrokeArchive::ArenaDtor(void* object) {
  PatternedStrokeArchive* _this = reinterpret_cast< PatternedStrokeArchive* >(object);
  (void)_this;
}
void PatternedStrokeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatternedStrokeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatternedStrokeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.PatternedStrokeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pattern_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatternedStrokeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string pattern_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pattern_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.PatternedStrokeArchive.pattern_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatternedStrokeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.PatternedStrokeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pattern_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pattern_name().data(), static_cast<int>(this->_internal_pattern_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.PatternedStrokeArchive.pattern_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pattern_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.PatternedStrokeArchive)
  return target;
}

size_t PatternedStrokeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.PatternedStrokeArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string pattern_name = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pattern_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatternedStrokeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.PatternedStrokeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PatternedStrokeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatternedStrokeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.PatternedStrokeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.PatternedStrokeArchive)
    MergeFrom(*source);
  }
}

void PatternedStrokeArchive::MergeFrom(const PatternedStrokeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.PatternedStrokeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pattern_name()) {
    _internal_set_pattern_name(from._internal_pattern_name());
  }
}

void PatternedStrokeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.PatternedStrokeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatternedStrokeArchive::CopyFrom(const PatternedStrokeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.PatternedStrokeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatternedStrokeArchive::IsInitialized() const {
  return true;
}

void PatternedStrokeArchive::InternalSwap(PatternedStrokeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pattern_name_.Swap(&other->pattern_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PatternedStrokeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[21]);
}

// ===================================================================

class LineEndArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LineEndArchive>()._has_bits_);
  static const ::TSP::Path& path(const LineEndArchive* msg);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_line_join(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Point& end_point(const LineEndArchive* msg);
  static void set_has_end_point(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_filled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Path&
LineEndArchive::_Internal::path(const LineEndArchive* msg) {
  return *msg->path_;
}
const ::TSP::Point&
LineEndArchive::_Internal::end_point(const LineEndArchive* msg) {
  return *msg->end_point_;
}
void LineEndArchive::clear_path() {
  if (path_ != nullptr) path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void LineEndArchive::clear_end_point() {
  if (end_point_ != nullptr) end_point_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
LineEndArchive::LineEndArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.LineEndArchive)
}
LineEndArchive::LineEndArchive(const LineEndArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArena());
  }
  if (from._internal_has_path()) {
    path_ = new ::TSP::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  if (from._internal_has_end_point()) {
    end_point_ = new ::TSP::Point(*from.end_point_);
  } else {
    end_point_ = nullptr;
  }
  ::memcpy(&line_join_, &from.line_join_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_filled_) -
    reinterpret_cast<char*>(&line_join_)) + sizeof(is_filled_));
  // @@protoc_insertion_point(copy_constructor:TSD.LineEndArchive)
}

void LineEndArchive::SharedCtor() {
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&path_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_filled_) -
    reinterpret_cast<char*>(&path_)) + sizeof(is_filled_));
}

LineEndArchive::~LineEndArchive() {
  // @@protoc_insertion_point(destructor:TSD.LineEndArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LineEndArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete path_;
  if (this != internal_default_instance()) delete end_point_;
}

void LineEndArchive::ArenaDtor(void* object) {
  LineEndArchive* _this = reinterpret_cast< LineEndArchive* >(object);
  (void)_this;
}
void LineEndArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LineEndArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LineEndArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.LineEndArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(path_ != nullptr);
      path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(end_point_ != nullptr);
      end_point_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&line_join_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_filled_) -
        reinterpret_cast<char*>(&line_join_)) + sizeof(is_filled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LineEndArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Path path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.LineJoin line_join = 2 [default = MiterJoin];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::LineJoin_IsValid(val))) {
            _internal_set_line_join(static_cast<::TSD::LineJoin>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point end_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_filled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_filled(&has_bits);
          is_filled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string identifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.LineEndArchive.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LineEndArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.LineEndArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Path path = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path(this), target, stream);
  }

  // optional .TSD.LineJoin line_join = 2 [default = MiterJoin];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_line_join(), target);
  }

  // optional .TSP.Point end_point = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end_point(this), target, stream);
  }

  // optional bool is_filled = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_filled(), target);
  }

  // optional string identifier = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.LineEndArchive.identifier");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.LineEndArchive)
  return target;
}

size_t LineEndArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.LineEndArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string identifier = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
    }

    // optional .TSP.Path path = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *path_);
    }

    // optional .TSP.Point end_point = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_point_);
    }

    // optional .TSD.LineJoin line_join = 2 [default = MiterJoin];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_line_join());
    }

    // optional bool is_filled = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LineEndArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.LineEndArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const LineEndArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LineEndArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.LineEndArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.LineEndArchive)
    MergeFrom(*source);
  }
}

void LineEndArchive::MergeFrom(const LineEndArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.LineEndArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_path()->::TSP::Path::MergeFrom(from._internal_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_end_point()->::TSP::Point::MergeFrom(from._internal_end_point());
    }
    if (cached_has_bits & 0x00000008u) {
      line_join_ = from.line_join_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_filled_ = from.is_filled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LineEndArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.LineEndArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineEndArchive::CopyFrom(const LineEndArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.LineEndArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineEndArchive::IsInitialized() const {
  if (_internal_has_path()) {
    if (!path_->IsInitialized()) return false;
  }
  if (_internal_has_end_point()) {
    if (!end_point_->IsInitialized()) return false;
  }
  return true;
}

void LineEndArchive::InternalSwap(LineEndArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LineEndArchive, is_filled_)
      + sizeof(LineEndArchive::is_filled_)
      - PROTOBUF_FIELD_OFFSET(LineEndArchive, path_)>(
          reinterpret_cast<char*>(&path_),
          reinterpret_cast<char*>(&other->path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LineEndArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[22]);
}

// ===================================================================

class ShadowArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShadowArchive>()._has_bits_);
  static const ::TSP::Color& color(const ShadowArchive* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::DropShadowArchive& dropshadow(const ShadowArchive* msg);
  static void set_has_dropshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::ContactShadowArchive& contactshadow(const ShadowArchive* msg);
  static void set_has_contactshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::CurvedShadowArchive& curvedshadow(const ShadowArchive* msg);
  static void set_has_curvedshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSP::Color&
ShadowArchive::_Internal::color(const ShadowArchive* msg) {
  return *msg->color_;
}
const ::TSD::DropShadowArchive&
ShadowArchive::_Internal::dropshadow(const ShadowArchive* msg) {
  return *msg->dropshadow_;
}
const ::TSD::ContactShadowArchive&
ShadowArchive::_Internal::contactshadow(const ShadowArchive* msg) {
  return *msg->contactshadow_;
}
const ::TSD::CurvedShadowArchive&
ShadowArchive::_Internal::curvedshadow(const ShadowArchive* msg) {
  return *msg->curvedshadow_;
}
void ShadowArchive::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ShadowArchive::ShadowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ShadowArchive)
}
ShadowArchive::ShadowArchive(const ShadowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::TSP::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  if (from._internal_has_dropshadow()) {
    dropshadow_ = new ::TSD::DropShadowArchive(*from.dropshadow_);
  } else {
    dropshadow_ = nullptr;
  }
  if (from._internal_has_contactshadow()) {
    contactshadow_ = new ::TSD::ContactShadowArchive(*from.contactshadow_);
  } else {
    contactshadow_ = nullptr;
  }
  if (from._internal_has_curvedshadow()) {
    curvedshadow_ = new ::TSD::CurvedShadowArchive(*from.curvedshadow_);
  } else {
    curvedshadow_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&opacity_) -
    reinterpret_cast<char*>(&type_)) + sizeof(opacity_));
  // @@protoc_insertion_point(copy_constructor:TSD.ShadowArchive)
}

void ShadowArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&color_)) + sizeof(type_));
is_enabled_ = true;
angle_ = 315;
offset_ = 5;
radius_ = 1;
opacity_ = 1;
}

ShadowArchive::~ShadowArchive() {
  // @@protoc_insertion_point(destructor:TSD.ShadowArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShadowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete color_;
  if (this != internal_default_instance()) delete dropshadow_;
  if (this != internal_default_instance()) delete contactshadow_;
  if (this != internal_default_instance()) delete curvedshadow_;
}

void ShadowArchive::ArenaDtor(void* object) {
  ShadowArchive* _this = reinterpret_cast< ShadowArchive* >(object);
  (void)_this;
}
void ShadowArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShadowArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShadowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ShadowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(color_ != nullptr);
      color_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dropshadow_ != nullptr);
      dropshadow_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(contactshadow_ != nullptr);
      contactshadow_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(curvedshadow_ != nullptr);
      curvedshadow_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    type_ = 0;
    is_enabled_ = true;
    angle_ = 315;
    offset_ = 5;
  }
  if (cached_has_bits & 0x00000300u) {
    radius_ = 1;
    opacity_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShadowArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float angle = 2 [default = 315];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float offset = 3 [default = 5];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 radius = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float opacity = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_opacity(&has_bits);
          opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool is_enabled = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_enabled(&has_bits);
          is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive.ShadowType type = 7 [default = TSDDropShadow];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::ShadowArchive_ShadowType_IsValid(val))) {
            _internal_set_type(static_cast<::TSD::ShadowArchive_ShadowType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSD.DropShadowArchive dropShadow = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_dropshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ContactShadowArchive contactShadow = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_contactshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.CurvedShadowArchive curvedShadow = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_curvedshadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShadowArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ShadowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::color(this), target, stream);
  }

  // optional float angle = 2 [default = 315];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_angle(), target);
  }

  // optional float offset = 3 [default = 5];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_offset(), target);
  }

  // optional int32 radius = 4 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_radius(), target);
  }

  // optional float opacity = 5 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_opacity(), target);
  }

  // optional bool is_enabled = 6 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_enabled(), target);
  }

  // optional .TSD.ShadowArchive.ShadowType type = 7 [default = TSDDropShadow];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_type(), target);
  }

  // optional .TSD.DropShadowArchive dropShadow = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::dropshadow(this), target, stream);
  }

  // optional .TSD.ContactShadowArchive contactShadow = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::contactshadow(this), target, stream);
  }

  // optional .TSD.CurvedShadowArchive curvedShadow = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::curvedshadow(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ShadowArchive)
  return target;
}

size_t ShadowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ShadowArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Color color = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_);
    }

    // optional .TSD.DropShadowArchive dropShadow = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dropshadow_);
    }

    // optional .TSD.ContactShadowArchive contactShadow = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contactshadow_);
    }

    // optional .TSD.CurvedShadowArchive curvedShadow = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *curvedshadow_);
    }

    // optional .TSD.ShadowArchive.ShadowType type = 7 [default = TSDDropShadow];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional bool is_enabled = 6 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional float angle = 2 [default = 315];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float offset = 3 [default = 5];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 radius = 4 [default = 1];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_radius());
    }

    // optional float opacity = 5 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShadowArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ShadowArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ShadowArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShadowArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ShadowArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ShadowArchive)
    MergeFrom(*source);
  }
}

void ShadowArchive::MergeFrom(const ShadowArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ShadowArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_color()->::TSP::Color::MergeFrom(from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dropshadow()->::TSD::DropShadowArchive::MergeFrom(from._internal_dropshadow());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_contactshadow()->::TSD::ContactShadowArchive::MergeFrom(from._internal_contactshadow());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_curvedshadow()->::TSD::CurvedShadowArchive::MergeFrom(from._internal_curvedshadow());
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_enabled_ = from.is_enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      angle_ = from.angle_;
    }
    if (cached_has_bits & 0x00000080u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000200u) {
      opacity_ = from.opacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShadowArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ShadowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShadowArchive::CopyFrom(const ShadowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ShadowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShadowArchive::IsInitialized() const {
  if (_internal_has_color()) {
    if (!color_->IsInitialized()) return false;
  }
  return true;
}

void ShadowArchive::InternalSwap(ShadowArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShadowArchive, type_)
      + sizeof(ShadowArchive::type_)
      - PROTOBUF_FIELD_OFFSET(ShadowArchive, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
  swap(is_enabled_, other->is_enabled_);
  swap(angle_, other->angle_);
  swap(offset_, other->offset_);
  swap(radius_, other->radius_);
  swap(opacity_, other->opacity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShadowArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[23]);
}

// ===================================================================

class DropShadowArchive::_Internal {
 public:
};

DropShadowArchive::DropShadowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.DropShadowArchive)
}
DropShadowArchive::DropShadowArchive(const DropShadowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSD.DropShadowArchive)
}

void DropShadowArchive::SharedCtor() {
}

DropShadowArchive::~DropShadowArchive() {
  // @@protoc_insertion_point(destructor:TSD.DropShadowArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DropShadowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DropShadowArchive::ArenaDtor(void* object) {
  DropShadowArchive* _this = reinterpret_cast< DropShadowArchive* >(object);
  (void)_this;
}
void DropShadowArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropShadowArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DropShadowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DropShadowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropShadowArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropShadowArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DropShadowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DropShadowArchive)
  return target;
}

size_t DropShadowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DropShadowArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropShadowArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.DropShadowArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DropShadowArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DropShadowArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.DropShadowArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.DropShadowArchive)
    MergeFrom(*source);
  }
}

void DropShadowArchive::MergeFrom(const DropShadowArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.DropShadowArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DropShadowArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.DropShadowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropShadowArchive::CopyFrom(const DropShadowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DropShadowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropShadowArchive::IsInitialized() const {
  return true;
}

void DropShadowArchive::InternalSwap(DropShadowArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropShadowArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[24]);
}

// ===================================================================

class ContactShadowArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ContactShadowArchive>()._has_bits_);
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ContactShadowArchive::ContactShadowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ContactShadowArchive)
}
ContactShadowArchive::ContactShadowArchive(const ContactShadowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:TSD.ContactShadowArchive)
}

void ContactShadowArchive::SharedCtor() {
offset_ = 0;
height_ = 0.2f;
}

ContactShadowArchive::~ContactShadowArchive() {
  // @@protoc_insertion_point(destructor:TSD.ContactShadowArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContactShadowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ContactShadowArchive::ArenaDtor(void* object) {
  ContactShadowArchive* _this = reinterpret_cast< ContactShadowArchive* >(object);
  (void)_this;
}
void ContactShadowArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContactShadowArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContactShadowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ContactShadowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    offset_ = 0;
    height_ = 0.2f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContactShadowArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float height = 2 [default = 0.2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float offset = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContactShadowArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ContactShadowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float height = 2 [default = 0.2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_height(), target);
  }

  // optional float offset = 4 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ContactShadowArchive)
  return target;
}

size_t ContactShadowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ContactShadowArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float offset = 4 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float height = 2 [default = 0.2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContactShadowArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ContactShadowArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ContactShadowArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContactShadowArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ContactShadowArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ContactShadowArchive)
    MergeFrom(*source);
  }
}

void ContactShadowArchive::MergeFrom(const ContactShadowArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ContactShadowArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContactShadowArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ContactShadowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactShadowArchive::CopyFrom(const ContactShadowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ContactShadowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactShadowArchive::IsInitialized() const {
  return true;
}

void ContactShadowArchive::InternalSwap(ContactShadowArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(offset_, other->offset_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContactShadowArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[25]);
}

// ===================================================================

class CurvedShadowArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CurvedShadowArchive>()._has_bits_);
  static void set_has_curve(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CurvedShadowArchive::CurvedShadowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.CurvedShadowArchive)
}
CurvedShadowArchive::CurvedShadowArchive(const CurvedShadowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  curve_ = from.curve_;
  // @@protoc_insertion_point(copy_constructor:TSD.CurvedShadowArchive)
}

void CurvedShadowArchive::SharedCtor() {
curve_ = 0.6f;
}

CurvedShadowArchive::~CurvedShadowArchive() {
  // @@protoc_insertion_point(destructor:TSD.CurvedShadowArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CurvedShadowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CurvedShadowArchive::ArenaDtor(void* object) {
  CurvedShadowArchive* _this = reinterpret_cast< CurvedShadowArchive* >(object);
  (void)_this;
}
void CurvedShadowArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CurvedShadowArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CurvedShadowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.CurvedShadowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  curve_ = 0.6f;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurvedShadowArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float curve = 1 [default = 0.6];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_curve(&has_bits);
          curve_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CurvedShadowArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.CurvedShadowArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float curve = 1 [default = 0.6];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_curve(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.CurvedShadowArchive)
  return target;
}

size_t CurvedShadowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.CurvedShadowArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float curve = 1 [default = 0.6];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurvedShadowArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.CurvedShadowArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CurvedShadowArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CurvedShadowArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.CurvedShadowArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.CurvedShadowArchive)
    MergeFrom(*source);
  }
}

void CurvedShadowArchive::MergeFrom(const CurvedShadowArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.CurvedShadowArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_curve()) {
    _internal_set_curve(from._internal_curve());
  }
}

void CurvedShadowArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.CurvedShadowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurvedShadowArchive::CopyFrom(const CurvedShadowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.CurvedShadowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurvedShadowArchive::IsInitialized() const {
  return true;
}

void CurvedShadowArchive::InternalSwap(CurvedShadowArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(curve_, other->curve_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CurvedShadowArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[26]);
}

// ===================================================================

class ReflectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ReflectionArchive>()._has_bits_);
  static void set_has_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReflectionArchive::ReflectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ReflectionArchive)
}
ReflectionArchive::ReflectionArchive(const ReflectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opacity_ = from.opacity_;
  // @@protoc_insertion_point(copy_constructor:TSD.ReflectionArchive)
}

void ReflectionArchive::SharedCtor() {
opacity_ = 0.5f;
}

ReflectionArchive::~ReflectionArchive() {
  // @@protoc_insertion_point(destructor:TSD.ReflectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReflectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReflectionArchive::ArenaDtor(void* object) {
  ReflectionArchive* _this = reinterpret_cast< ReflectionArchive* >(object);
  (void)_this;
}
void ReflectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReflectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReflectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ReflectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opacity_ = 0.5f;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReflectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float opacity = 1 [default = 0.5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_opacity(&has_bits);
          opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReflectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ReflectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float opacity = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_opacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ReflectionArchive)
  return target;
}

size_t ReflectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ReflectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float opacity = 1 [default = 0.5];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReflectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ReflectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ReflectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReflectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ReflectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ReflectionArchive)
    MergeFrom(*source);
  }
}

void ReflectionArchive::MergeFrom(const ReflectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ReflectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_opacity()) {
    _internal_set_opacity(from._internal_opacity());
  }
}

void ReflectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ReflectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReflectionArchive::CopyFrom(const ReflectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ReflectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReflectionArchive::IsInitialized() const {
  return true;
}

void ReflectionArchive::InternalSwap(ReflectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(opacity_, other->opacity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReflectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[27]);
}

// ===================================================================

class ImageAdjustmentsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageAdjustmentsArchive>()._has_bits_);
  static void set_has_exposure(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_saturation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_contrast(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_highlights(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shadows(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sharpness(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_denoise(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tint(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bottom_level(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_top_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_gamma(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_enhance(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_represents_sage_adjustments(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

ImageAdjustmentsArchive::ImageAdjustmentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ImageAdjustmentsArchive)
}
ImageAdjustmentsArchive::ImageAdjustmentsArchive(const ImageAdjustmentsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&exposure_, &from.exposure_,
    static_cast<size_t>(reinterpret_cast<char*>(&top_level_) -
    reinterpret_cast<char*>(&exposure_)) + sizeof(top_level_));
  // @@protoc_insertion_point(copy_constructor:TSD.ImageAdjustmentsArchive)
}

void ImageAdjustmentsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&exposure_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&represents_sage_adjustments_) -
    reinterpret_cast<char*>(&exposure_)) + sizeof(represents_sage_adjustments_));
top_level_ = 1;
}

ImageAdjustmentsArchive::~ImageAdjustmentsArchive() {
  // @@protoc_insertion_point(destructor:TSD.ImageAdjustmentsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageAdjustmentsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ImageAdjustmentsArchive::ArenaDtor(void* object) {
  ImageAdjustmentsArchive* _this = reinterpret_cast< ImageAdjustmentsArchive* >(object);
  (void)_this;
}
void ImageAdjustmentsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageAdjustmentsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageAdjustmentsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ImageAdjustmentsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&exposure_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&temperature_) -
        reinterpret_cast<char*>(&exposure_)) + sizeof(temperature_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&tint_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&represents_sage_adjustments_) -
        reinterpret_cast<char*>(&tint_)) + sizeof(represents_sage_adjustments_));
    top_level_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageAdjustmentsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float exposure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_exposure(&has_bits);
          exposure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float saturation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_saturation(&has_bits);
          saturation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float contrast = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_contrast(&has_bits);
          contrast_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float highlights = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_highlights(&has_bits);
          highlights_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float shadows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_shadows(&has_bits);
          shadows_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sharpness = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_sharpness(&has_bits);
          sharpness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float denoise = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_denoise(&has_bits);
          denoise_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float temperature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_temperature(&has_bits);
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tint = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_tint(&has_bits);
          tint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bottom_level = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_bottom_level(&has_bits);
          bottom_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float top_level = 11 [default = 1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_top_level(&has_bits);
          top_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float gamma = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_gamma(&has_bits);
          gamma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enhance = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_enhance(&has_bits);
          enhance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool represents_sage_adjustments = 14 [default = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_represents_sage_adjustments(&has_bits);
          represents_sage_adjustments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageAdjustmentsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ImageAdjustmentsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float exposure = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_exposure(), target);
  }

  // optional float saturation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_saturation(), target);
  }

  // optional float contrast = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_contrast(), target);
  }

  // optional float highlights = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_highlights(), target);
  }

  // optional float shadows = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_shadows(), target);
  }

  // optional float sharpness = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_sharpness(), target);
  }

  // optional float denoise = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_denoise(), target);
  }

  // optional float temperature = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_temperature(), target);
  }

  // optional float tint = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_tint(), target);
  }

  // optional float bottom_level = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_bottom_level(), target);
  }

  // optional float top_level = 11 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_top_level(), target);
  }

  // optional float gamma = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_gamma(), target);
  }

  // optional bool enhance = 13 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_enhance(), target);
  }

  // optional bool represents_sage_adjustments = 14 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_represents_sage_adjustments(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ImageAdjustmentsArchive)
  return target;
}

size_t ImageAdjustmentsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ImageAdjustmentsArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float exposure = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float saturation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float contrast = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float highlights = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float shadows = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float sharpness = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float denoise = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float temperature = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional float tint = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float bottom_level = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float gamma = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional bool enhance = 13 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool represents_sage_adjustments = 14 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional float top_level = 11 [default = 1];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageAdjustmentsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ImageAdjustmentsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageAdjustmentsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageAdjustmentsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ImageAdjustmentsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ImageAdjustmentsArchive)
    MergeFrom(*source);
  }
}

void ImageAdjustmentsArchive::MergeFrom(const ImageAdjustmentsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ImageAdjustmentsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      exposure_ = from.exposure_;
    }
    if (cached_has_bits & 0x00000002u) {
      saturation_ = from.saturation_;
    }
    if (cached_has_bits & 0x00000004u) {
      contrast_ = from.contrast_;
    }
    if (cached_has_bits & 0x00000008u) {
      highlights_ = from.highlights_;
    }
    if (cached_has_bits & 0x00000010u) {
      shadows_ = from.shadows_;
    }
    if (cached_has_bits & 0x00000020u) {
      sharpness_ = from.sharpness_;
    }
    if (cached_has_bits & 0x00000040u) {
      denoise_ = from.denoise_;
    }
    if (cached_has_bits & 0x00000080u) {
      temperature_ = from.temperature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      tint_ = from.tint_;
    }
    if (cached_has_bits & 0x00000200u) {
      bottom_level_ = from.bottom_level_;
    }
    if (cached_has_bits & 0x00000400u) {
      gamma_ = from.gamma_;
    }
    if (cached_has_bits & 0x00000800u) {
      enhance_ = from.enhance_;
    }
    if (cached_has_bits & 0x00001000u) {
      represents_sage_adjustments_ = from.represents_sage_adjustments_;
    }
    if (cached_has_bits & 0x00002000u) {
      top_level_ = from.top_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageAdjustmentsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ImageAdjustmentsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageAdjustmentsArchive::CopyFrom(const ImageAdjustmentsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ImageAdjustmentsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageAdjustmentsArchive::IsInitialized() const {
  return true;
}

void ImageAdjustmentsArchive::InternalSwap(ImageAdjustmentsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageAdjustmentsArchive, represents_sage_adjustments_)
      + sizeof(ImageAdjustmentsArchive::represents_sage_adjustments_)
      - PROTOBUF_FIELD_OFFSET(ImageAdjustmentsArchive, exposure_)>(
          reinterpret_cast<char*>(&exposure_),
          reinterpret_cast<char*>(&other->exposure_));
  swap(top_level_, other->top_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageAdjustmentsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[28]);
}

// ===================================================================

class ShapeStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShapeStylePropertiesArchive>()._has_bits_);
  static const ::TSD::FillArchive& fill(const ShapeStylePropertiesArchive* msg);
  static void set_has_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::StrokeArchive& stroke(const ShapeStylePropertiesArchive* msg);
  static void set_has_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::ShadowArchive& shadow(const ShapeStylePropertiesArchive* msg);
  static void set_has_shadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::ReflectionArchive& reflection(const ShapeStylePropertiesArchive* msg);
  static void set_has_reflection(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::LineEndArchive& head_line_end(const ShapeStylePropertiesArchive* msg);
  static void set_has_head_line_end(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::LineEndArchive& tail_line_end(const ShapeStylePropertiesArchive* msg);
  static void set_has_tail_line_end(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::TSD::FillArchive&
ShapeStylePropertiesArchive::_Internal::fill(const ShapeStylePropertiesArchive* msg) {
  return *msg->fill_;
}
const ::TSD::StrokeArchive&
ShapeStylePropertiesArchive::_Internal::stroke(const ShapeStylePropertiesArchive* msg) {
  return *msg->stroke_;
}
const ::TSD::ShadowArchive&
ShapeStylePropertiesArchive::_Internal::shadow(const ShapeStylePropertiesArchive* msg) {
  return *msg->shadow_;
}
const ::TSD::ReflectionArchive&
ShapeStylePropertiesArchive::_Internal::reflection(const ShapeStylePropertiesArchive* msg) {
  return *msg->reflection_;
}
const ::TSD::LineEndArchive&
ShapeStylePropertiesArchive::_Internal::head_line_end(const ShapeStylePropertiesArchive* msg) {
  return *msg->head_line_end_;
}
const ::TSD::LineEndArchive&
ShapeStylePropertiesArchive::_Internal::tail_line_end(const ShapeStylePropertiesArchive* msg) {
  return *msg->tail_line_end_;
}
ShapeStylePropertiesArchive::ShapeStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ShapeStylePropertiesArchive)
}
ShapeStylePropertiesArchive::ShapeStylePropertiesArchive(const ShapeStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fill()) {
    fill_ = new ::TSD::FillArchive(*from.fill_);
  } else {
    fill_ = nullptr;
  }
  if (from._internal_has_stroke()) {
    stroke_ = new ::TSD::StrokeArchive(*from.stroke_);
  } else {
    stroke_ = nullptr;
  }
  if (from._internal_has_shadow()) {
    shadow_ = new ::TSD::ShadowArchive(*from.shadow_);
  } else {
    shadow_ = nullptr;
  }
  if (from._internal_has_reflection()) {
    reflection_ = new ::TSD::ReflectionArchive(*from.reflection_);
  } else {
    reflection_ = nullptr;
  }
  if (from._internal_has_head_line_end()) {
    head_line_end_ = new ::TSD::LineEndArchive(*from.head_line_end_);
  } else {
    head_line_end_ = nullptr;
  }
  if (from._internal_has_tail_line_end()) {
    tail_line_end_ = new ::TSD::LineEndArchive(*from.tail_line_end_);
  } else {
    tail_line_end_ = nullptr;
  }
  opacity_ = from.opacity_;
  // @@protoc_insertion_point(copy_constructor:TSD.ShapeStylePropertiesArchive)
}

void ShapeStylePropertiesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fill_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&opacity_) -
    reinterpret_cast<char*>(&fill_)) + sizeof(opacity_));
}

ShapeStylePropertiesArchive::~ShapeStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:TSD.ShapeStylePropertiesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShapeStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fill_;
  if (this != internal_default_instance()) delete stroke_;
  if (this != internal_default_instance()) delete shadow_;
  if (this != internal_default_instance()) delete reflection_;
  if (this != internal_default_instance()) delete head_line_end_;
  if (this != internal_default_instance()) delete tail_line_end_;
}

void ShapeStylePropertiesArchive::ArenaDtor(void* object) {
  ShapeStylePropertiesArchive* _this = reinterpret_cast< ShapeStylePropertiesArchive* >(object);
  (void)_this;
}
void ShapeStylePropertiesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeStylePropertiesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShapeStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ShapeStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fill_ != nullptr);
      fill_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stroke_ != nullptr);
      stroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(shadow_ != nullptr);
      shadow_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(reflection_ != nullptr);
      reflection_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(head_line_end_ != nullptr);
      head_line_end_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tail_line_end_ != nullptr);
      tail_line_end_->Clear();
    }
  }
  opacity_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeStylePropertiesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.FillArchive fill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive stroke = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float opacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_opacity(&has_bits);
          opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive shadow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_shadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ReflectionArchive reflection = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reflection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive head_line_end = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_head_line_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tail_line_end = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tail_line_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeStylePropertiesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ShapeStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.FillArchive fill = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fill(this), target, stream);
  }

  // optional .TSD.StrokeArchive stroke = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stroke(this), target, stream);
  }

  // optional float opacity = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_opacity(), target);
  }

  // optional .TSD.ShadowArchive shadow = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::shadow(this), target, stream);
  }

  // optional .TSD.ReflectionArchive reflection = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::reflection(this), target, stream);
  }

  // optional .TSD.LineEndArchive head_line_end = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::head_line_end(this), target, stream);
  }

  // optional .TSD.LineEndArchive tail_line_end = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::tail_line_end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ShapeStylePropertiesArchive)
  return target;
}

size_t ShapeStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ShapeStylePropertiesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .TSD.FillArchive fill = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fill_);
    }

    // optional .TSD.StrokeArchive stroke = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stroke_);
    }

    // optional .TSD.ShadowArchive shadow = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shadow_);
    }

    // optional .TSD.ReflectionArchive reflection = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reflection_);
    }

    // optional .TSD.LineEndArchive head_line_end = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *head_line_end_);
    }

    // optional .TSD.LineEndArchive tail_line_end = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tail_line_end_);
    }

    // optional float opacity = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeStylePropertiesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ShapeStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeStylePropertiesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeStylePropertiesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ShapeStylePropertiesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ShapeStylePropertiesArchive)
    MergeFrom(*source);
  }
}

void ShapeStylePropertiesArchive::MergeFrom(const ShapeStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ShapeStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fill()->::TSD::FillArchive::MergeFrom(from._internal_fill());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stroke()->::TSD::StrokeArchive::MergeFrom(from._internal_stroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_shadow()->::TSD::ShadowArchive::MergeFrom(from._internal_shadow());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_reflection()->::TSD::ReflectionArchive::MergeFrom(from._internal_reflection());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_head_line_end()->::TSD::LineEndArchive::MergeFrom(from._internal_head_line_end());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_tail_line_end()->::TSD::LineEndArchive::MergeFrom(from._internal_tail_line_end());
    }
    if (cached_has_bits & 0x00000040u) {
      opacity_ = from.opacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShapeStylePropertiesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ShapeStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeStylePropertiesArchive::CopyFrom(const ShapeStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ShapeStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeStylePropertiesArchive::IsInitialized() const {
  if (_internal_has_fill()) {
    if (!fill_->IsInitialized()) return false;
  }
  if (_internal_has_stroke()) {
    if (!stroke_->IsInitialized()) return false;
  }
  if (_internal_has_shadow()) {
    if (!shadow_->IsInitialized()) return false;
  }
  if (_internal_has_head_line_end()) {
    if (!head_line_end_->IsInitialized()) return false;
  }
  if (_internal_has_tail_line_end()) {
    if (!tail_line_end_->IsInitialized()) return false;
  }
  return true;
}

void ShapeStylePropertiesArchive::InternalSwap(ShapeStylePropertiesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeStylePropertiesArchive, opacity_)
      + sizeof(ShapeStylePropertiesArchive::opacity_)
      - PROTOBUF_FIELD_OFFSET(ShapeStylePropertiesArchive, fill_)>(
          reinterpret_cast<char*>(&fill_),
          reinterpret_cast<char*>(&other->fill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeStylePropertiesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[29]);
}

// ===================================================================

class ShapeStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShapeStyleArchive>()._has_bits_);
  static const ::TSS::StyleArchive& super(const ShapeStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::ShapeStylePropertiesArchive& shape_properties(const ShapeStyleArchive* msg);
  static void set_has_shape_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
ShapeStyleArchive::_Internal::super(const ShapeStyleArchive* msg) {
  return *msg->super_;
}
const ::TSD::ShapeStylePropertiesArchive&
ShapeStyleArchive::_Internal::shape_properties(const ShapeStyleArchive* msg) {
  return *msg->shape_properties_;
}
void ShapeStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ShapeStyleArchive::ShapeStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ShapeStyleArchive)
}
ShapeStyleArchive::ShapeStyleArchive(const ShapeStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_shape_properties()) {
    shape_properties_ = new ::TSD::ShapeStylePropertiesArchive(*from.shape_properties_);
  } else {
    shape_properties_ = nullptr;
  }
  override_count_ = from.override_count_;
  // @@protoc_insertion_point(copy_constructor:TSD.ShapeStyleArchive)
}

void ShapeStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&override_count_) -
    reinterpret_cast<char*>(&super_)) + sizeof(override_count_));
}

ShapeStyleArchive::~ShapeStyleArchive() {
  // @@protoc_insertion_point(destructor:TSD.ShapeStyleArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShapeStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete shape_properties_;
}

void ShapeStyleArchive::ArenaDtor(void* object) {
  ShapeStyleArchive* _this = reinterpret_cast< ShapeStyleArchive* >(object);
  (void)_this;
}
void ShapeStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShapeStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ShapeStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(shape_properties_ != nullptr);
      shape_properties_->Clear();
    }
  }
  override_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShapeStylePropertiesArchive shape_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ShapeStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // optional .TSD.ShapeStylePropertiesArchive shape_properties = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::shape_properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ShapeStyleArchive)
  return target;
}

size_t ShapeStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ShapeStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSD.ShapeStylePropertiesArchive shape_properties = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shape_properties_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_override_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeStyleArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ShapeStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeStyleArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeStyleArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ShapeStyleArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ShapeStyleArchive)
    MergeFrom(*source);
  }
}

void ShapeStyleArchive::MergeFrom(const ShapeStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ShapeStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSS::StyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_shape_properties()->::TSD::ShapeStylePropertiesArchive::MergeFrom(from._internal_shape_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      override_count_ = from.override_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShapeStyleArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ShapeStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeStyleArchive::CopyFrom(const ShapeStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ShapeStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_shape_properties()) {
    if (!shape_properties_->IsInitialized()) return false;
  }
  return true;
}

void ShapeStyleArchive::InternalSwap(ShapeStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeStyleArchive, override_count_)
      + sizeof(ShapeStyleArchive::override_count_)
      - PROTOBUF_FIELD_OFFSET(ShapeStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[30]);
}

// ===================================================================

class MediaStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaStylePropertiesArchive>()._has_bits_);
  static const ::TSD::StrokeArchive& stroke(const MediaStylePropertiesArchive* msg);
  static void set_has_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::ShadowArchive& shadow(const MediaStylePropertiesArchive* msg);
  static void set_has_shadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::ReflectionArchive& reflection(const MediaStylePropertiesArchive* msg);
  static void set_has_reflection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSD::StrokeArchive&
MediaStylePropertiesArchive::_Internal::stroke(const MediaStylePropertiesArchive* msg) {
  return *msg->stroke_;
}
const ::TSD::ShadowArchive&
MediaStylePropertiesArchive::_Internal::shadow(const MediaStylePropertiesArchive* msg) {
  return *msg->shadow_;
}
const ::TSD::ReflectionArchive&
MediaStylePropertiesArchive::_Internal::reflection(const MediaStylePropertiesArchive* msg) {
  return *msg->reflection_;
}
MediaStylePropertiesArchive::MediaStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.MediaStylePropertiesArchive)
}
MediaStylePropertiesArchive::MediaStylePropertiesArchive(const MediaStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stroke()) {
    stroke_ = new ::TSD::StrokeArchive(*from.stroke_);
  } else {
    stroke_ = nullptr;
  }
  if (from._internal_has_shadow()) {
    shadow_ = new ::TSD::ShadowArchive(*from.shadow_);
  } else {
    shadow_ = nullptr;
  }
  if (from._internal_has_reflection()) {
    reflection_ = new ::TSD::ReflectionArchive(*from.reflection_);
  } else {
    reflection_ = nullptr;
  }
  opacity_ = from.opacity_;
  // @@protoc_insertion_point(copy_constructor:TSD.MediaStylePropertiesArchive)
}

void MediaStylePropertiesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stroke_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&opacity_) -
    reinterpret_cast<char*>(&stroke_)) + sizeof(opacity_));
}

MediaStylePropertiesArchive::~MediaStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:TSD.MediaStylePropertiesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MediaStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stroke_;
  if (this != internal_default_instance()) delete shadow_;
  if (this != internal_default_instance()) delete reflection_;
}

void MediaStylePropertiesArchive::ArenaDtor(void* object) {
  MediaStylePropertiesArchive* _this = reinterpret_cast< MediaStylePropertiesArchive* >(object);
  (void)_this;
}
void MediaStylePropertiesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaStylePropertiesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MediaStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.MediaStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stroke_ != nullptr);
      stroke_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(shadow_ != nullptr);
      shadow_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(reflection_ != nullptr);
      reflection_->Clear();
    }
  }
  opacity_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaStylePropertiesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.StrokeArchive stroke = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float opacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_opacity(&has_bits);
          opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive shadow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ReflectionArchive reflection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reflection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaStylePropertiesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.MediaStylePropertiesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.StrokeArchive stroke = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stroke(this), target, stream);
  }

  // optional float opacity = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_opacity(), target);
  }

  // optional .TSD.ShadowArchive shadow = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::shadow(this), target, stream);
  }

  // optional .TSD.ReflectionArchive reflection = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reflection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.MediaStylePropertiesArchive)
  return target;
}

size_t MediaStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.MediaStylePropertiesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSD.StrokeArchive stroke = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stroke_);
    }

    // optional .TSD.ShadowArchive shadow = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shadow_);
    }

    // optional .TSD.ReflectionArchive reflection = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reflection_);
    }

    // optional float opacity = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaStylePropertiesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.MediaStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaStylePropertiesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaStylePropertiesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.MediaStylePropertiesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.MediaStylePropertiesArchive)
    MergeFrom(*source);
  }
}

void MediaStylePropertiesArchive::MergeFrom(const MediaStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.MediaStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stroke()->::TSD::StrokeArchive::MergeFrom(from._internal_stroke());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_shadow()->::TSD::ShadowArchive::MergeFrom(from._internal_shadow());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_reflection()->::TSD::ReflectionArchive::MergeFrom(from._internal_reflection());
    }
    if (cached_has_bits & 0x00000008u) {
      opacity_ = from.opacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MediaStylePropertiesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.MediaStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaStylePropertiesArchive::CopyFrom(const MediaStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.MediaStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaStylePropertiesArchive::IsInitialized() const {
  if (_internal_has_stroke()) {
    if (!stroke_->IsInitialized()) return false;
  }
  if (_internal_has_shadow()) {
    if (!shadow_->IsInitialized()) return false;
  }
  return true;
}

void MediaStylePropertiesArchive::InternalSwap(MediaStylePropertiesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaStylePropertiesArchive, opacity_)
      + sizeof(MediaStylePropertiesArchive::opacity_)
      - PROTOBUF_FIELD_OFFSET(MediaStylePropertiesArchive, stroke_)>(
          reinterpret_cast<char*>(&stroke_),
          reinterpret_cast<char*>(&other->stroke_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaStylePropertiesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[31]);
}

// ===================================================================

class MediaStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaStyleArchive>()._has_bits_);
  static const ::TSS::StyleArchive& super(const MediaStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::MediaStylePropertiesArchive& media_properties(const MediaStyleArchive* msg);
  static void set_has_media_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
MediaStyleArchive::_Internal::super(const MediaStyleArchive* msg) {
  return *msg->super_;
}
const ::TSD::MediaStylePropertiesArchive&
MediaStyleArchive::_Internal::media_properties(const MediaStyleArchive* msg) {
  return *msg->media_properties_;
}
void MediaStyleArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MediaStyleArchive::MediaStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.MediaStyleArchive)
}
MediaStyleArchive::MediaStyleArchive(const MediaStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSS::StyleArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_media_properties()) {
    media_properties_ = new ::TSD::MediaStylePropertiesArchive(*from.media_properties_);
  } else {
    media_properties_ = nullptr;
  }
  override_count_ = from.override_count_;
  // @@protoc_insertion_point(copy_constructor:TSD.MediaStyleArchive)
}

void MediaStyleArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&override_count_) -
    reinterpret_cast<char*>(&super_)) + sizeof(override_count_));
}

MediaStyleArchive::~MediaStyleArchive() {
  // @@protoc_insertion_point(destructor:TSD.MediaStyleArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MediaStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete media_properties_;
}

void MediaStyleArchive::ArenaDtor(void* object) {
  MediaStyleArchive* _this = reinterpret_cast< MediaStyleArchive* >(object);
  (void)_this;
}
void MediaStyleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaStyleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MediaStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.MediaStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(media_properties_ != nullptr);
      media_properties_->Clear();
    }
  }
  override_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaStyleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.MediaStylePropertiesArchive media_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_media_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaStyleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.MediaStyleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // optional .TSD.MediaStylePropertiesArchive media_properties = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::media_properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.MediaStyleArchive)
  return target;
}

size_t MediaStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.MediaStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSD.MediaStylePropertiesArchive media_properties = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *media_properties_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_override_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaStyleArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.MediaStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaStyleArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaStyleArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.MediaStyleArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.MediaStyleArchive)
    MergeFrom(*source);
  }
}

void MediaStyleArchive::MergeFrom(const MediaStyleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.MediaStyleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSS::StyleArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_media_properties()->::TSD::MediaStylePropertiesArchive::MergeFrom(from._internal_media_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      override_count_ = from.override_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MediaStyleArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.MediaStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaStyleArchive::CopyFrom(const MediaStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.MediaStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_media_properties()) {
    if (!media_properties_->IsInitialized()) return false;
  }
  return true;
}

void MediaStyleArchive::InternalSwap(MediaStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaStyleArchive, override_count_)
      + sizeof(MediaStyleArchive::override_count_)
      - PROTOBUF_FIELD_OFFSET(MediaStyleArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaStyleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[32]);
}

// ===================================================================

class ThemePresetsArchive::_Internal {
 public:
};

void ThemePresetsArchive::clear_line_style_presets() {
  line_style_presets_.Clear();
}
void ThemePresetsArchive::clear_shape_style_presets() {
  shape_style_presets_.Clear();
}
void ThemePresetsArchive::clear_textbox_style_presets() {
  textbox_style_presets_.Clear();
}
void ThemePresetsArchive::clear_image_style_presets() {
  image_style_presets_.Clear();
}
void ThemePresetsArchive::clear_movie_style_presets() {
  movie_style_presets_.Clear();
}
void ThemePresetsArchive::clear_drawing_line_style_presets() {
  drawing_line_style_presets_.Clear();
}
ThemePresetsArchive::ThemePresetsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gradient_fill_presets_(arena),
  image_fill_presets_(arena),
  shadow_presets_(arena),
  line_style_presets_(arena),
  shape_style_presets_(arena),
  textbox_style_presets_(arena),
  image_style_presets_(arena),
  movie_style_presets_(arena),
  drawing_line_style_presets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ThemePresetsArchive)
}
ThemePresetsArchive::ThemePresetsArchive(const ThemePresetsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gradient_fill_presets_(from.gradient_fill_presets_),
      image_fill_presets_(from.image_fill_presets_),
      shadow_presets_(from.shadow_presets_),
      line_style_presets_(from.line_style_presets_),
      shape_style_presets_(from.shape_style_presets_),
      textbox_style_presets_(from.textbox_style_presets_),
      image_style_presets_(from.image_style_presets_),
      movie_style_presets_(from.movie_style_presets_),
      drawing_line_style_presets_(from.drawing_line_style_presets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSD.ThemePresetsArchive)
}

void ThemePresetsArchive::SharedCtor() {
}

ThemePresetsArchive::~ThemePresetsArchive() {
  // @@protoc_insertion_point(destructor:TSD.ThemePresetsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThemePresetsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ThemePresetsArchive::ArenaDtor(void* object) {
  ThemePresetsArchive* _this = reinterpret_cast< ThemePresetsArchive* >(object);
  (void)_this;
}
void ThemePresetsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThemePresetsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThemePresetsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ThemePresetsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gradient_fill_presets_.Clear();
  image_fill_presets_.Clear();
  shadow_presets_.Clear();
  line_style_presets_.Clear();
  shape_style_presets_.Clear();
  textbox_style_presets_.Clear();
  image_style_presets_.Clear();
  movie_style_presets_.Clear();
  drawing_line_style_presets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemePresetsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSD.FillArchive gradient_fill_presets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gradient_fill_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSD.FillArchive image_fill_presets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image_fill_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSD.ShadowArchive shadow_presets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shadow_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference line_style_presets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_line_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference shape_style_presets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shape_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference textbox_style_presets = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_textbox_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference image_style_presets = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference movie_style_presets = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_movie_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawing_line_style_presets = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawing_line_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThemePresetsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ThemePresetsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSD.FillArchive gradient_fill_presets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gradient_fill_presets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_gradient_fill_presets(i), target, stream);
  }

  // repeated .TSD.FillArchive image_fill_presets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_image_fill_presets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_image_fill_presets(i), target, stream);
  }

  // repeated .TSD.ShadowArchive shadow_presets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shadow_presets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_shadow_presets(i), target, stream);
  }

  // repeated .TSP.Reference line_style_presets = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_line_style_presets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_line_style_presets(i), target, stream);
  }

  // repeated .TSP.Reference shape_style_presets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shape_style_presets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_shape_style_presets(i), target, stream);
  }

  // repeated .TSP.Reference textbox_style_presets = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_textbox_style_presets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_textbox_style_presets(i), target, stream);
  }

  // repeated .TSP.Reference image_style_presets = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_image_style_presets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_image_style_presets(i), target, stream);
  }

  // repeated .TSP.Reference movie_style_presets = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_movie_style_presets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_movie_style_presets(i), target, stream);
  }

  // repeated .TSP.Reference drawing_line_style_presets = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawing_line_style_presets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_drawing_line_style_presets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ThemePresetsArchive)
  return target;
}

size_t ThemePresetsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ThemePresetsArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSD.FillArchive gradient_fill_presets = 1;
  total_size += 1UL * this->_internal_gradient_fill_presets_size();
  for (const auto& msg : this->gradient_fill_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSD.FillArchive image_fill_presets = 2;
  total_size += 1UL * this->_internal_image_fill_presets_size();
  for (const auto& msg : this->image_fill_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSD.ShadowArchive shadow_presets = 3;
  total_size += 1UL * this->_internal_shadow_presets_size();
  for (const auto& msg : this->shadow_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference line_style_presets = 4;
  total_size += 1UL * this->_internal_line_style_presets_size();
  for (const auto& msg : this->line_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference shape_style_presets = 5;
  total_size += 1UL * this->_internal_shape_style_presets_size();
  for (const auto& msg : this->shape_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference textbox_style_presets = 6;
  total_size += 1UL * this->_internal_textbox_style_presets_size();
  for (const auto& msg : this->textbox_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference image_style_presets = 7;
  total_size += 1UL * this->_internal_image_style_presets_size();
  for (const auto& msg : this->image_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference movie_style_presets = 8;
  total_size += 1UL * this->_internal_movie_style_presets_size();
  for (const auto& msg : this->movie_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference drawing_line_style_presets = 9;
  total_size += 1UL * this->_internal_drawing_line_style_presets_size();
  for (const auto& msg : this->drawing_line_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThemePresetsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ThemePresetsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ThemePresetsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThemePresetsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ThemePresetsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ThemePresetsArchive)
    MergeFrom(*source);
  }
}

void ThemePresetsArchive::MergeFrom(const ThemePresetsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ThemePresetsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gradient_fill_presets_.MergeFrom(from.gradient_fill_presets_);
  image_fill_presets_.MergeFrom(from.image_fill_presets_);
  shadow_presets_.MergeFrom(from.shadow_presets_);
  line_style_presets_.MergeFrom(from.line_style_presets_);
  shape_style_presets_.MergeFrom(from.shape_style_presets_);
  textbox_style_presets_.MergeFrom(from.textbox_style_presets_);
  image_style_presets_.MergeFrom(from.image_style_presets_);
  movie_style_presets_.MergeFrom(from.movie_style_presets_);
  drawing_line_style_presets_.MergeFrom(from.drawing_line_style_presets_);
}

void ThemePresetsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ThemePresetsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemePresetsArchive::CopyFrom(const ThemePresetsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ThemePresetsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemePresetsArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(gradient_fill_presets_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(image_fill_presets_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(shadow_presets_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(line_style_presets_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(shape_style_presets_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(textbox_style_presets_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(image_style_presets_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(movie_style_presets_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawing_line_style_presets_)) return false;
  return true;
}

void ThemePresetsArchive::InternalSwap(ThemePresetsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  gradient_fill_presets_.InternalSwap(&other->gradient_fill_presets_);
  image_fill_presets_.InternalSwap(&other->image_fill_presets_);
  shadow_presets_.InternalSwap(&other->shadow_presets_);
  line_style_presets_.InternalSwap(&other->line_style_presets_);
  shape_style_presets_.InternalSwap(&other->shape_style_presets_);
  textbox_style_presets_.InternalSwap(&other->textbox_style_presets_);
  image_style_presets_.InternalSwap(&other->image_style_presets_);
  movie_style_presets_.InternalSwap(&other->movie_style_presets_);
  drawing_line_style_presets_.InternalSwap(&other->drawing_line_style_presets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemePresetsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[33]);
}

// ===================================================================

class ThemeReplaceFillPresetCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeReplaceFillPresetCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ThemeReplaceFillPresetCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& theme(const ThemeReplaceFillPresetCommandArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::FillArchive& fill(const ThemeReplaceFillPresetCommandArchive* msg);
  static void set_has_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::FillArchive& old_fill(const ThemeReplaceFillPresetCommandArchive* msg);
  static void set_has_old_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSK::CommandArchive&
ThemeReplaceFillPresetCommandArchive::_Internal::super(const ThemeReplaceFillPresetCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
ThemeReplaceFillPresetCommandArchive::_Internal::theme(const ThemeReplaceFillPresetCommandArchive* msg) {
  return *msg->theme_;
}
const ::TSD::FillArchive&
ThemeReplaceFillPresetCommandArchive::_Internal::fill(const ThemeReplaceFillPresetCommandArchive* msg) {
  return *msg->fill_;
}
const ::TSD::FillArchive&
ThemeReplaceFillPresetCommandArchive::_Internal::old_fill(const ThemeReplaceFillPresetCommandArchive* msg) {
  return *msg->old_fill_;
}
void ThemeReplaceFillPresetCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ThemeReplaceFillPresetCommandArchive::clear_theme() {
  if (theme_ != nullptr) theme_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ThemeReplaceFillPresetCommandArchive::ThemeReplaceFillPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ThemeReplaceFillPresetCommandArchive)
}
ThemeReplaceFillPresetCommandArchive::ThemeReplaceFillPresetCommandArchive(const ThemeReplaceFillPresetCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_theme()) {
    theme_ = new ::TSP::Reference(*from.theme_);
  } else {
    theme_ = nullptr;
  }
  if (from._internal_has_fill()) {
    fill_ = new ::TSD::FillArchive(*from.fill_);
  } else {
    fill_ = nullptr;
  }
  if (from._internal_has_old_fill()) {
    old_fill_ = new ::TSD::FillArchive(*from.old_fill_);
  } else {
    old_fill_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:TSD.ThemeReplaceFillPresetCommandArchive)
}

void ThemeReplaceFillPresetCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&super_)) + sizeof(index_));
}

ThemeReplaceFillPresetCommandArchive::~ThemeReplaceFillPresetCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ThemeReplaceFillPresetCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThemeReplaceFillPresetCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete theme_;
  if (this != internal_default_instance()) delete fill_;
  if (this != internal_default_instance()) delete old_fill_;
}

void ThemeReplaceFillPresetCommandArchive::ArenaDtor(void* object) {
  ThemeReplaceFillPresetCommandArchive* _this = reinterpret_cast< ThemeReplaceFillPresetCommandArchive* >(object);
  (void)_this;
}
void ThemeReplaceFillPresetCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThemeReplaceFillPresetCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThemeReplaceFillPresetCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ThemeReplaceFillPresetCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(theme_ != nullptr);
      theme_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(fill_ != nullptr);
      fill_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(old_fill_ != nullptr);
      old_fill_->Clear();
    }
  }
  index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeReplaceFillPresetCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSD.FillArchive fill = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSD.FillArchive old_fill = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThemeReplaceFillPresetCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ThemeReplaceFillPresetCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference theme = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::theme(this), target, stream);
  }

  // required .TSD.FillArchive fill = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fill(this), target, stream);
  }

  // required .TSD.FillArchive old_fill = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::old_fill(this), target, stream);
  }

  // required uint32 index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ThemeReplaceFillPresetCommandArchive)
  return target;
}

size_t ThemeReplaceFillPresetCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSD.ThemeReplaceFillPresetCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *theme_);
  }

  if (_internal_has_fill()) {
    // required .TSD.FillArchive fill = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fill_);
  }

  if (_internal_has_old_fill()) {
    // required .TSD.FillArchive old_fill = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_fill_);
  }

  if (_internal_has_index()) {
    // required uint32 index = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  return total_size;
}
size_t ThemeReplaceFillPresetCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ThemeReplaceFillPresetCommandArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *theme_);

    // required .TSD.FillArchive fill = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fill_);

    // required .TSD.FillArchive old_fill = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *old_fill_);

    // required uint32 index = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThemeReplaceFillPresetCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ThemeReplaceFillPresetCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ThemeReplaceFillPresetCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThemeReplaceFillPresetCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ThemeReplaceFillPresetCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ThemeReplaceFillPresetCommandArchive)
    MergeFrom(*source);
  }
}

void ThemeReplaceFillPresetCommandArchive::MergeFrom(const ThemeReplaceFillPresetCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ThemeReplaceFillPresetCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_theme()->::TSP::Reference::MergeFrom(from._internal_theme());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_fill()->::TSD::FillArchive::MergeFrom(from._internal_fill());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_old_fill()->::TSD::FillArchive::MergeFrom(from._internal_old_fill());
    }
    if (cached_has_bits & 0x00000010u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ThemeReplaceFillPresetCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ThemeReplaceFillPresetCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeReplaceFillPresetCommandArchive::CopyFrom(const ThemeReplaceFillPresetCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ThemeReplaceFillPresetCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeReplaceFillPresetCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!theme_->IsInitialized()) return false;
  }
  if (_internal_has_fill()) {
    if (!fill_->IsInitialized()) return false;
  }
  if (_internal_has_old_fill()) {
    if (!old_fill_->IsInitialized()) return false;
  }
  return true;
}

void ThemeReplaceFillPresetCommandArchive::InternalSwap(ThemeReplaceFillPresetCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThemeReplaceFillPresetCommandArchive, index_)
      + sizeof(ThemeReplaceFillPresetCommandArchive::index_)
      - PROTOBUF_FIELD_OFFSET(ThemeReplaceFillPresetCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeReplaceFillPresetCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[34]);
}

// ===================================================================

class DrawableArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawableArchive>()._has_bits_);
  static const ::TSD::GeometryArchive& geometry(const DrawableArchive* msg);
  static void set_has_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& parent(const DrawableArchive* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::ExteriorTextWrapArchive& exterior_text_wrap(const DrawableArchive* msg);
  static void set_has_exterior_text_wrap(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hyperlink_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& comment(const DrawableArchive* msg);
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_aspect_ratio_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_accessibility_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& title(const DrawableArchive* msg);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& caption(const DrawableArchive* msg);
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_title_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_caption_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::TSD::GeometryArchive&
DrawableArchive::_Internal::geometry(const DrawableArchive* msg) {
  return *msg->geometry_;
}
const ::TSP::Reference&
DrawableArchive::_Internal::parent(const DrawableArchive* msg) {
  return *msg->parent_;
}
const ::TSD::ExteriorTextWrapArchive&
DrawableArchive::_Internal::exterior_text_wrap(const DrawableArchive* msg) {
  return *msg->exterior_text_wrap_;
}
const ::TSP::Reference&
DrawableArchive::_Internal::comment(const DrawableArchive* msg) {
  return *msg->comment_;
}
const ::TSP::Reference&
DrawableArchive::_Internal::title(const DrawableArchive* msg) {
  return *msg->title_;
}
const ::TSP::Reference&
DrawableArchive::_Internal::caption(const DrawableArchive* msg) {
  return *msg->caption_;
}
void DrawableArchive::clear_parent() {
  if (parent_ != nullptr) parent_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void DrawableArchive::clear_comment() {
  if (comment_ != nullptr) comment_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void DrawableArchive::clear_pencil_annotations() {
  pencil_annotations_.Clear();
}
void DrawableArchive::clear_title() {
  if (title_ != nullptr) title_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void DrawableArchive::clear_caption() {
  if (caption_ != nullptr) caption_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
DrawableArchive::DrawableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pencil_annotations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawableArchive)
}
DrawableArchive::DrawableArchive(const DrawableArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pencil_annotations_(from.pencil_annotations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hyperlink_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hyperlink_url()) {
    hyperlink_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hyperlink_url(), 
      GetArena());
  }
  accessibility_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_accessibility_description()) {
    accessibility_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_accessibility_description(), 
      GetArena());
  }
  if (from._internal_has_geometry()) {
    geometry_ = new ::TSD::GeometryArchive(*from.geometry_);
  } else {
    geometry_ = nullptr;
  }
  if (from._internal_has_parent()) {
    parent_ = new ::TSP::Reference(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_exterior_text_wrap()) {
    exterior_text_wrap_ = new ::TSD::ExteriorTextWrapArchive(*from.exterior_text_wrap_);
  } else {
    exterior_text_wrap_ = nullptr;
  }
  if (from._internal_has_comment()) {
    comment_ = new ::TSP::Reference(*from.comment_);
  } else {
    comment_ = nullptr;
  }
  if (from._internal_has_title()) {
    title_ = new ::TSP::Reference(*from.title_);
  } else {
    title_ = nullptr;
  }
  if (from._internal_has_caption()) {
    caption_ = new ::TSP::Reference(*from.caption_);
  } else {
    caption_ = nullptr;
  }
  ::memcpy(&locked_, &from.locked_,
    static_cast<size_t>(reinterpret_cast<char*>(&caption_hidden_) -
    reinterpret_cast<char*>(&locked_)) + sizeof(caption_hidden_));
  // @@protoc_insertion_point(copy_constructor:TSD.DrawableArchive)
}

void DrawableArchive::SharedCtor() {
hyperlink_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
accessibility_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&geometry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&caption_hidden_) -
    reinterpret_cast<char*>(&geometry_)) + sizeof(caption_hidden_));
}

DrawableArchive::~DrawableArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawableArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hyperlink_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accessibility_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete geometry_;
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete exterior_text_wrap_;
  if (this != internal_default_instance()) delete comment_;
  if (this != internal_default_instance()) delete title_;
  if (this != internal_default_instance()) delete caption_;
}

void DrawableArchive::ArenaDtor(void* object) {
  DrawableArchive* _this = reinterpret_cast< DrawableArchive* >(object);
  (void)_this;
}
void DrawableArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DrawableArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawableArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pencil_annotations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      hyperlink_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      accessibility_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(geometry_ != nullptr);
      geometry_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(parent_ != nullptr);
      parent_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(exterior_text_wrap_ != nullptr);
      exterior_text_wrap_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(comment_ != nullptr);
      comment_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(title_ != nullptr);
      title_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(caption_ != nullptr);
      caption_->Clear();
    }
  }
  ::memset(&locked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&caption_hidden_) -
      reinterpret_cast<char*>(&locked_)) + sizeof(caption_hidden_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.GeometryArchive geometry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference parent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_exterior_text_wrap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hyperlink_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hyperlink_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.DrawableArchive.hyperlink_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool locked = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_locked(&has_bits);
          locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference comment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_comment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool aspect_ratio_locked = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_aspect_ratio_locked(&has_bits);
          aspect_ratio_locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string accessibility_description = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_accessibility_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.DrawableArchive.accessibility_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference pencil_annotations = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pencil_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference title = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_title(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference caption = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_caption(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool title_hidden = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_title_hidden(&has_bits);
          title_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool caption_hidden = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_caption_hidden(&has_bits);
          caption_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawableArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.GeometryArchive geometry = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::geometry(this), target, stream);
  }

  // optional .TSP.Reference parent = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::parent(this), target, stream);
  }

  // optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::exterior_text_wrap(this), target, stream);
  }

  // optional string hyperlink_url = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hyperlink_url().data(), static_cast<int>(this->_internal_hyperlink_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.DrawableArchive.hyperlink_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hyperlink_url(), target);
  }

  // optional bool locked = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_locked(), target);
  }

  // optional .TSP.Reference comment = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::comment(this), target, stream);
  }

  // optional bool aspect_ratio_locked = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_aspect_ratio_locked(), target);
  }

  // optional string accessibility_description = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_accessibility_description().data(), static_cast<int>(this->_internal_accessibility_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.DrawableArchive.accessibility_description");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_accessibility_description(), target);
  }

  // repeated .TSP.Reference pencil_annotations = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pencil_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_pencil_annotations(i), target, stream);
  }

  // optional .TSP.Reference title = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::title(this), target, stream);
  }

  // optional .TSP.Reference caption = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::caption(this), target, stream);
  }

  // optional bool title_hidden = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_title_hidden(), target);
  }

  // optional bool caption_hidden = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_caption_hidden(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawableArchive)
  return target;
}

size_t DrawableArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawableArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference pencil_annotations = 9;
  total_size += 1UL * this->_internal_pencil_annotations_size();
  for (const auto& msg : this->pencil_annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string hyperlink_url = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hyperlink_url());
    }

    // optional string accessibility_description = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_accessibility_description());
    }

    // optional .TSD.GeometryArchive geometry = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_);
    }

    // optional .TSP.Reference parent = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parent_);
    }

    // optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *exterior_text_wrap_);
    }

    // optional .TSP.Reference comment = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *comment_);
    }

    // optional .TSP.Reference title = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *title_);
    }

    // optional .TSP.Reference caption = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *caption_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool locked = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool aspect_ratio_locked = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool title_hidden = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool caption_hidden = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.DrawableArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.DrawableArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.DrawableArchive)
    MergeFrom(*source);
  }
}

void DrawableArchive::MergeFrom(const DrawableArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawableArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pencil_annotations_.MergeFrom(from.pencil_annotations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hyperlink_url(from._internal_hyperlink_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_accessibility_description(from._internal_accessibility_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_geometry()->::TSD::GeometryArchive::MergeFrom(from._internal_geometry());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_parent()->::TSP::Reference::MergeFrom(from._internal_parent());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_exterior_text_wrap()->::TSD::ExteriorTextWrapArchive::MergeFrom(from._internal_exterior_text_wrap());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_comment()->::TSP::Reference::MergeFrom(from._internal_comment());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_title()->::TSP::Reference::MergeFrom(from._internal_title());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_caption()->::TSP::Reference::MergeFrom(from._internal_caption());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      locked_ = from.locked_;
    }
    if (cached_has_bits & 0x00000200u) {
      aspect_ratio_locked_ = from.aspect_ratio_locked_;
    }
    if (cached_has_bits & 0x00000400u) {
      title_hidden_ = from.title_hidden_;
    }
    if (cached_has_bits & 0x00000800u) {
      caption_hidden_ = from.caption_hidden_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DrawableArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.DrawableArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableArchive::CopyFrom(const DrawableArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawableArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pencil_annotations_)) return false;
  if (_internal_has_geometry()) {
    if (!geometry_->IsInitialized()) return false;
  }
  if (_internal_has_parent()) {
    if (!parent_->IsInitialized()) return false;
  }
  if (_internal_has_comment()) {
    if (!comment_->IsInitialized()) return false;
  }
  if (_internal_has_title()) {
    if (!title_->IsInitialized()) return false;
  }
  if (_internal_has_caption()) {
    if (!caption_->IsInitialized()) return false;
  }
  return true;
}

void DrawableArchive::InternalSwap(DrawableArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pencil_annotations_.InternalSwap(&other->pencil_annotations_);
  hyperlink_url_.Swap(&other->hyperlink_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  accessibility_description_.Swap(&other->accessibility_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawableArchive, caption_hidden_)
      + sizeof(DrawableArchive::caption_hidden_)
      - PROTOBUF_FIELD_OFFSET(DrawableArchive, geometry_)>(
          reinterpret_cast<char*>(&geometry_),
          reinterpret_cast<char*>(&other->geometry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[35]);
}

// ===================================================================

class ContainerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ContainerArchive>()._has_bits_);
  static const ::TSD::GeometryArchive& geometry(const ContainerArchive* msg);
  static void set_has_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& parent(const ContainerArchive* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSD::GeometryArchive&
ContainerArchive::_Internal::geometry(const ContainerArchive* msg) {
  return *msg->geometry_;
}
const ::TSP::Reference&
ContainerArchive::_Internal::parent(const ContainerArchive* msg) {
  return *msg->parent_;
}
void ContainerArchive::clear_parent() {
  if (parent_ != nullptr) parent_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ContainerArchive::clear_children() {
  children_.Clear();
}
ContainerArchive::ContainerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  children_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ContainerArchive)
}
ContainerArchive::ContainerArchive(const ContainerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      children_(from.children_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_geometry()) {
    geometry_ = new ::TSD::GeometryArchive(*from.geometry_);
  } else {
    geometry_ = nullptr;
  }
  if (from._internal_has_parent()) {
    parent_ = new ::TSP::Reference(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ContainerArchive)
}

void ContainerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&geometry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&parent_) -
    reinterpret_cast<char*>(&geometry_)) + sizeof(parent_));
}

ContainerArchive::~ContainerArchive() {
  // @@protoc_insertion_point(destructor:TSD.ContainerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete geometry_;
  if (this != internal_default_instance()) delete parent_;
}

void ContainerArchive::ArenaDtor(void* object) {
  ContainerArchive* _this = reinterpret_cast< ContainerArchive* >(object);
  (void)_this;
}
void ContainerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContainerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ContainerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(geometry_ != nullptr);
      geometry_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(parent_ != nullptr);
      parent_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.GeometryArchive geometry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference parent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference children = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ContainerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.GeometryArchive geometry = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::geometry(this), target, stream);
  }

  // optional .TSP.Reference parent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::parent(this), target, stream);
  }

  // repeated .TSP.Reference children = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_children(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ContainerArchive)
  return target;
}

size_t ContainerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ContainerArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference children = 3;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSD.GeometryArchive geometry = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_);
    }

    // optional .TSP.Reference parent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parent_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ContainerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ContainerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ContainerArchive)
    MergeFrom(*source);
  }
}

void ContainerArchive::MergeFrom(const ContainerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ContainerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_geometry()->::TSD::GeometryArchive::MergeFrom(from._internal_geometry());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_parent()->::TSP::Reference::MergeFrom(from._internal_parent());
    }
  }
}

void ContainerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ContainerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerArchive::CopyFrom(const ContainerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ContainerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(children_)) return false;
  if (_internal_has_geometry()) {
    if (!geometry_->IsInitialized()) return false;
  }
  if (_internal_has_parent()) {
    if (!parent_->IsInitialized()) return false;
  }
  return true;
}

void ContainerArchive::InternalSwap(ContainerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  children_.InternalSwap(&other->children_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContainerArchive, parent_)
      + sizeof(ContainerArchive::parent_)
      - PROTOBUF_FIELD_OFFSET(ContainerArchive, geometry_)>(
          reinterpret_cast<char*>(&geometry_),
          reinterpret_cast<char*>(&other->geometry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[36]);
}

// ===================================================================

class GroupArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupArchive>()._has_bits_);
  static const ::TSD::DrawableArchive& super(const GroupArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& fake_shape_for_empty_group(const GroupArchive* msg);
  static void set_has_fake_shape_for_empty_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::DrawableArchive&
GroupArchive::_Internal::super(const GroupArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
GroupArchive::_Internal::fake_shape_for_empty_group(const GroupArchive* msg) {
  return *msg->fake_shape_for_empty_group_;
}
void GroupArchive::clear_children() {
  children_.Clear();
}
void GroupArchive::clear_fake_shape_for_empty_group() {
  if (fake_shape_for_empty_group_ != nullptr) fake_shape_for_empty_group_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GroupArchive::GroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena),
  children_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.GroupArchive)
}
GroupArchive::GroupArchive(const GroupArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      children_(from.children_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::DrawableArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_fake_shape_for_empty_group()) {
    fake_shape_for_empty_group_ = new ::TSP::Reference(*from.fake_shape_for_empty_group_);
  } else {
    fake_shape_for_empty_group_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.GroupArchive)
}

void GroupArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fake_shape_for_empty_group_) -
    reinterpret_cast<char*>(&super_)) + sizeof(fake_shape_for_empty_group_));
}

GroupArchive::~GroupArchive() {
  // @@protoc_insertion_point(destructor:TSD.GroupArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete fake_shape_for_empty_group_;
}

void GroupArchive::ArenaDtor(void* object) {
  GroupArchive* _this = reinterpret_cast< GroupArchive* >(object);
  (void)_this;
}
void GroupArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroupArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.GroupArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  children_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fake_shape_for_empty_group_ != nullptr);
      fake_shape_for_empty_group_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.DrawableArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference children = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference fake_shape_for_empty_group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fake_shape_for_empty_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.GroupArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.DrawableArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.Reference children = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_children(i), target, stream);
  }

  // optional .TSP.Reference fake_shape_for_empty_group = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fake_shape_for_empty_group(this), target, stream);
  }

  // Extension range [100, 536870912)
  target = _extensions_._InternalSerialize(
      100, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.GroupArchive)
  return target;
}

size_t GroupArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.GroupArchive)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  // required .TSD.DrawableArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference children = 2;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference fake_shape_for_empty_group = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fake_shape_for_empty_group_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.GroupArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.GroupArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.GroupArchive)
    MergeFrom(*source);
  }
}

void GroupArchive::MergeFrom(const GroupArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.GroupArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::DrawableArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_fake_shape_for_empty_group()->::TSP::Reference::MergeFrom(from._internal_fake_shape_for_empty_group());
    }
  }
}

void GroupArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.GroupArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupArchive::CopyFrom(const GroupArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.GroupArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupArchive::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(children_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_fake_shape_for_empty_group()) {
    if (!fake_shape_for_empty_group_->IsInitialized()) return false;
  }
  return true;
}

void GroupArchive::InternalSwap(GroupArchive* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  children_.InternalSwap(&other->children_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupArchive, fake_shape_for_empty_group_)
      + sizeof(GroupArchive::fake_shape_for_empty_group_)
      - PROTOBUF_FIELD_OFFSET(GroupArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[37]);
}

// ===================================================================

class FreehandDrawingAnimationArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FreehandDrawingAnimationArchive>()._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_should_loop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FreehandDrawingAnimationArchive::FreehandDrawingAnimationArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.FreehandDrawingAnimationArchive)
}
FreehandDrawingAnimationArchive::FreehandDrawingAnimationArchive(const FreehandDrawingAnimationArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&should_loop_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(should_loop_));
  // @@protoc_insertion_point(copy_constructor:TSD.FreehandDrawingAnimationArchive)
}

void FreehandDrawingAnimationArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&duration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&should_loop_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(should_loop_));
}

FreehandDrawingAnimationArchive::~FreehandDrawingAnimationArchive() {
  // @@protoc_insertion_point(destructor:TSD.FreehandDrawingAnimationArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FreehandDrawingAnimationArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FreehandDrawingAnimationArchive::ArenaDtor(void* object) {
  FreehandDrawingAnimationArchive* _this = reinterpret_cast< FreehandDrawingAnimationArchive* >(object);
  (void)_this;
}
void FreehandDrawingAnimationArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FreehandDrawingAnimationArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FreehandDrawingAnimationArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.FreehandDrawingAnimationArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&should_loop_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(should_loop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreehandDrawingAnimationArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool should_loop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_should_loop(&has_bits);
          should_loop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreehandDrawingAnimationArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.FreehandDrawingAnimationArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double duration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_duration(), target);
  }

  // optional bool should_loop = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_should_loop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.FreehandDrawingAnimationArchive)
  return target;
}

size_t FreehandDrawingAnimationArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.FreehandDrawingAnimationArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double duration = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool should_loop = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FreehandDrawingAnimationArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.FreehandDrawingAnimationArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FreehandDrawingAnimationArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FreehandDrawingAnimationArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.FreehandDrawingAnimationArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.FreehandDrawingAnimationArchive)
    MergeFrom(*source);
  }
}

void FreehandDrawingAnimationArchive::MergeFrom(const FreehandDrawingAnimationArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.FreehandDrawingAnimationArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      should_loop_ = from.should_loop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FreehandDrawingAnimationArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.FreehandDrawingAnimationArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreehandDrawingAnimationArchive::CopyFrom(const FreehandDrawingAnimationArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.FreehandDrawingAnimationArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreehandDrawingAnimationArchive::IsInitialized() const {
  return true;
}

void FreehandDrawingAnimationArchive::InternalSwap(FreehandDrawingAnimationArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FreehandDrawingAnimationArchive, should_loop_)
      + sizeof(FreehandDrawingAnimationArchive::should_loop_)
      - PROTOBUF_FIELD_OFFSET(FreehandDrawingAnimationArchive, duration_)>(
          reinterpret_cast<char*>(&duration_),
          reinterpret_cast<char*>(&other->duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FreehandDrawingAnimationArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[38]);
}

// ===================================================================

class FreehandDrawingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FreehandDrawingArchive>()._has_bits_);
  static const ::TSP::Reference& spacer_shape(const FreehandDrawingArchive* msg);
  static void set_has_spacer_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::FreehandDrawingAnimationArchive& animation(const FreehandDrawingArchive* msg);
  static void set_has_animation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
FreehandDrawingArchive::_Internal::spacer_shape(const FreehandDrawingArchive* msg) {
  return *msg->spacer_shape_;
}
const ::TSD::FreehandDrawingAnimationArchive&
FreehandDrawingArchive::_Internal::animation(const FreehandDrawingArchive* msg) {
  return *msg->animation_;
}
void FreehandDrawingArchive::clear_spacer_shape() {
  if (spacer_shape_ != nullptr) spacer_shape_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FreehandDrawingArchive::FreehandDrawingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.FreehandDrawingArchive)
}
FreehandDrawingArchive::FreehandDrawingArchive(const FreehandDrawingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spacer_shape()) {
    spacer_shape_ = new ::TSP::Reference(*from.spacer_shape_);
  } else {
    spacer_shape_ = nullptr;
  }
  if (from._internal_has_animation()) {
    animation_ = new ::TSD::FreehandDrawingAnimationArchive(*from.animation_);
  } else {
    animation_ = nullptr;
  }
  opacity_ = from.opacity_;
  // @@protoc_insertion_point(copy_constructor:TSD.FreehandDrawingArchive)
}

void FreehandDrawingArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spacer_shape_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&opacity_) -
    reinterpret_cast<char*>(&spacer_shape_)) + sizeof(opacity_));
}

FreehandDrawingArchive::~FreehandDrawingArchive() {
  // @@protoc_insertion_point(destructor:TSD.FreehandDrawingArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FreehandDrawingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete spacer_shape_;
  if (this != internal_default_instance()) delete animation_;
}

void FreehandDrawingArchive::ArenaDtor(void* object) {
  FreehandDrawingArchive* _this = reinterpret_cast< FreehandDrawingArchive* >(object);
  (void)_this;
}
void FreehandDrawingArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FreehandDrawingArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FreehandDrawingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.FreehandDrawingArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(spacer_shape_ != nullptr);
      spacer_shape_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(animation_ != nullptr);
      animation_->Clear();
    }
  }
  opacity_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreehandDrawingArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference spacer_shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spacer_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double opacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_opacity(&has_bits);
          opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FreehandDrawingAnimationArchive animation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_animation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreehandDrawingArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.FreehandDrawingArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference spacer_shape = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spacer_shape(this), target, stream);
  }

  // optional double opacity = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_opacity(), target);
  }

  // optional .TSD.FreehandDrawingAnimationArchive animation = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::animation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.FreehandDrawingArchive)
  return target;
}

size_t FreehandDrawingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.FreehandDrawingArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference spacer_shape = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spacer_shape_);
    }

    // optional .TSD.FreehandDrawingAnimationArchive animation = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *animation_);
    }

    // optional double opacity = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FreehandDrawingArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.FreehandDrawingArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FreehandDrawingArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FreehandDrawingArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.FreehandDrawingArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.FreehandDrawingArchive)
    MergeFrom(*source);
  }
}

void FreehandDrawingArchive::MergeFrom(const FreehandDrawingArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.FreehandDrawingArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_spacer_shape()->::TSP::Reference::MergeFrom(from._internal_spacer_shape());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_animation()->::TSD::FreehandDrawingAnimationArchive::MergeFrom(from._internal_animation());
    }
    if (cached_has_bits & 0x00000004u) {
      opacity_ = from.opacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FreehandDrawingArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.FreehandDrawingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreehandDrawingArchive::CopyFrom(const FreehandDrawingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.FreehandDrawingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreehandDrawingArchive::IsInitialized() const {
  if (_internal_has_spacer_shape()) {
    if (!spacer_shape_->IsInitialized()) return false;
  }
  return true;
}

void FreehandDrawingArchive::InternalSwap(FreehandDrawingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FreehandDrawingArchive, opacity_)
      + sizeof(FreehandDrawingArchive::opacity_)
      - PROTOBUF_FIELD_OFFSET(FreehandDrawingArchive, spacer_shape_)>(
          reinterpret_cast<char*>(&spacer_shape_),
          reinterpret_cast<char*>(&other->spacer_shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FreehandDrawingArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[39]);
}

// ===================================================================

class ShapeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShapeArchive>()._has_bits_);
  static const ::TSD::DrawableArchive& super(const ShapeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& style(const ShapeArchive* msg);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::PathSourceArchive& pathsource(const ShapeArchive* msg);
  static void set_has_pathsource(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::LineEndArchive& head_line_end(const ShapeArchive* msg);
  static void set_has_head_line_end(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::LineEndArchive& tail_line_end(const ShapeArchive* msg);
  static void set_has_tail_line_end(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_strokepatternoffsetdistance(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::DrawableArchive&
ShapeArchive::_Internal::super(const ShapeArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
ShapeArchive::_Internal::style(const ShapeArchive* msg) {
  return *msg->style_;
}
const ::TSD::PathSourceArchive&
ShapeArchive::_Internal::pathsource(const ShapeArchive* msg) {
  return *msg->pathsource_;
}
const ::TSD::LineEndArchive&
ShapeArchive::_Internal::head_line_end(const ShapeArchive* msg) {
  return *msg->head_line_end_;
}
const ::TSD::LineEndArchive&
ShapeArchive::_Internal::tail_line_end(const ShapeArchive* msg) {
  return *msg->tail_line_end_;
}
void ShapeArchive::clear_style() {
  if (style_ != nullptr) style_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ShapeArchive::ShapeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ShapeArchive)
}
ShapeArchive::ShapeArchive(const ShapeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::DrawableArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_style()) {
    style_ = new ::TSP::Reference(*from.style_);
  } else {
    style_ = nullptr;
  }
  if (from._internal_has_pathsource()) {
    pathsource_ = new ::TSD::PathSourceArchive(*from.pathsource_);
  } else {
    pathsource_ = nullptr;
  }
  if (from._internal_has_head_line_end()) {
    head_line_end_ = new ::TSD::LineEndArchive(*from.head_line_end_);
  } else {
    head_line_end_ = nullptr;
  }
  if (from._internal_has_tail_line_end()) {
    tail_line_end_ = new ::TSD::LineEndArchive(*from.tail_line_end_);
  } else {
    tail_line_end_ = nullptr;
  }
  strokepatternoffsetdistance_ = from.strokepatternoffsetdistance_;
  // @@protoc_insertion_point(copy_constructor:TSD.ShapeArchive)
}

void ShapeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&strokepatternoffsetdistance_) -
    reinterpret_cast<char*>(&super_)) + sizeof(strokepatternoffsetdistance_));
}

ShapeArchive::~ShapeArchive() {
  // @@protoc_insertion_point(destructor:TSD.ShapeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShapeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete style_;
  if (this != internal_default_instance()) delete pathsource_;
  if (this != internal_default_instance()) delete head_line_end_;
  if (this != internal_default_instance()) delete tail_line_end_;
}

void ShapeArchive::ArenaDtor(void* object) {
  ShapeArchive* _this = reinterpret_cast< ShapeArchive* >(object);
  (void)_this;
}
void ShapeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShapeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ShapeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(style_ != nullptr);
      style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pathsource_ != nullptr);
      pathsource_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(head_line_end_ != nullptr);
      head_line_end_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tail_line_end_ != nullptr);
      tail_line_end_->Clear();
    }
  }
  strokepatternoffsetdistance_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.DrawableArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive pathsource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathsource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive head_line_end = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_head_line_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tail_line_end = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tail_line_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float strokePatternOffsetDistance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_strokepatternoffsetdistance(&has_bits);
          strokepatternoffsetdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ShapeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.DrawableArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::style(this), target, stream);
  }

  // optional .TSD.PathSourceArchive pathsource = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pathsource(this), target, stream);
  }

  // optional .TSD.LineEndArchive head_line_end = 4 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::head_line_end(this), target, stream);
  }

  // optional .TSD.LineEndArchive tail_line_end = 5 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::tail_line_end(this), target, stream);
  }

  // optional float strokePatternOffsetDistance = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_strokepatternoffsetdistance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ShapeArchive)
  return target;
}

size_t ShapeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ShapeArchive)
  size_t total_size = 0;

  // required .TSD.DrawableArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .TSP.Reference style = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *style_);
    }

    // optional .TSD.PathSourceArchive pathsource = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pathsource_);
    }

    // optional .TSD.LineEndArchive head_line_end = 4 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *head_line_end_);
    }

    // optional .TSD.LineEndArchive tail_line_end = 5 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tail_line_end_);
    }

    // optional float strokePatternOffsetDistance = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ShapeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ShapeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ShapeArchive)
    MergeFrom(*source);
  }
}

void ShapeArchive::MergeFrom(const ShapeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ShapeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::DrawableArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_style()->::TSP::Reference::MergeFrom(from._internal_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_pathsource()->::TSD::PathSourceArchive::MergeFrom(from._internal_pathsource());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_head_line_end()->::TSD::LineEndArchive::MergeFrom(from._internal_head_line_end());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tail_line_end()->::TSD::LineEndArchive::MergeFrom(from._internal_tail_line_end());
    }
    if (cached_has_bits & 0x00000020u) {
      strokepatternoffsetdistance_ = from.strokepatternoffsetdistance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShapeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ShapeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeArchive::CopyFrom(const ShapeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ShapeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_style()) {
    if (!style_->IsInitialized()) return false;
  }
  if (_internal_has_pathsource()) {
    if (!pathsource_->IsInitialized()) return false;
  }
  if (_internal_has_head_line_end()) {
    if (!head_line_end_->IsInitialized()) return false;
  }
  if (_internal_has_tail_line_end()) {
    if (!tail_line_end_->IsInitialized()) return false;
  }
  return true;
}

void ShapeArchive::InternalSwap(ShapeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeArchive, strokepatternoffsetdistance_)
      + sizeof(ShapeArchive::strokepatternoffsetdistance_)
      - PROTOBUF_FIELD_OFFSET(ShapeArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[40]);
}

// ===================================================================

class ConnectionLineArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectionLineArchive>()._has_bits_);
  static const ::TSD::ShapeArchive& super(const ConnectionLineArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& connected_from(const ConnectionLineArchive* msg);
  static void set_has_connected_from(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& connected_to(const ConnectionLineArchive* msg);
  static void set_has_connected_to(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& connected_to_uuid(const ConnectionLineArchive* msg);
  static void set_has_connected_to_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& connected_from_uuid(const ConnectionLineArchive* msg);
  static void set_has_connected_from_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::ShapeArchive&
ConnectionLineArchive::_Internal::super(const ConnectionLineArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
ConnectionLineArchive::_Internal::connected_from(const ConnectionLineArchive* msg) {
  return *msg->connected_from_;
}
const ::TSP::Reference&
ConnectionLineArchive::_Internal::connected_to(const ConnectionLineArchive* msg) {
  return *msg->connected_to_;
}
const ::TSP::UUID&
ConnectionLineArchive::_Internal::connected_to_uuid(const ConnectionLineArchive* msg) {
  return *msg->connected_to_uuid_;
}
const ::TSP::UUID&
ConnectionLineArchive::_Internal::connected_from_uuid(const ConnectionLineArchive* msg) {
  return *msg->connected_from_uuid_;
}
void ConnectionLineArchive::clear_connected_from() {
  if (connected_from_ != nullptr) connected_from_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ConnectionLineArchive::clear_connected_to() {
  if (connected_to_ != nullptr) connected_to_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ConnectionLineArchive::clear_connected_to_uuid() {
  if (connected_to_uuid_ != nullptr) connected_to_uuid_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ConnectionLineArchive::clear_connected_from_uuid() {
  if (connected_from_uuid_ != nullptr) connected_from_uuid_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ConnectionLineArchive::ConnectionLineArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ConnectionLineArchive)
}
ConnectionLineArchive::ConnectionLineArchive(const ConnectionLineArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::ShapeArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_connected_from()) {
    connected_from_ = new ::TSP::Reference(*from.connected_from_);
  } else {
    connected_from_ = nullptr;
  }
  if (from._internal_has_connected_to()) {
    connected_to_ = new ::TSP::Reference(*from.connected_to_);
  } else {
    connected_to_ = nullptr;
  }
  if (from._internal_has_connected_to_uuid()) {
    connected_to_uuid_ = new ::TSP::UUID(*from.connected_to_uuid_);
  } else {
    connected_to_uuid_ = nullptr;
  }
  if (from._internal_has_connected_from_uuid()) {
    connected_from_uuid_ = new ::TSP::UUID(*from.connected_from_uuid_);
  } else {
    connected_from_uuid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ConnectionLineArchive)
}

void ConnectionLineArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&connected_from_uuid_) -
    reinterpret_cast<char*>(&super_)) + sizeof(connected_from_uuid_));
}

ConnectionLineArchive::~ConnectionLineArchive() {
  // @@protoc_insertion_point(destructor:TSD.ConnectionLineArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnectionLineArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete connected_from_;
  if (this != internal_default_instance()) delete connected_to_;
  if (this != internal_default_instance()) delete connected_to_uuid_;
  if (this != internal_default_instance()) delete connected_from_uuid_;
}

void ConnectionLineArchive::ArenaDtor(void* object) {
  ConnectionLineArchive* _this = reinterpret_cast< ConnectionLineArchive* >(object);
  (void)_this;
}
void ConnectionLineArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectionLineArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConnectionLineArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ConnectionLineArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(connected_from_ != nullptr);
      connected_from_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(connected_to_ != nullptr);
      connected_to_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(connected_to_uuid_ != nullptr);
      connected_to_uuid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(connected_from_uuid_ != nullptr);
      connected_from_uuid_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionLineArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.ShapeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference connected_from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_connected_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference connected_to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_connected_to(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID connected_to_uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_connected_to_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID connected_from_uuid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_connected_from_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectionLineArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ConnectionLineArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.ShapeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference connected_from = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::connected_from(this), target, stream);
  }

  // optional .TSP.Reference connected_to = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::connected_to(this), target, stream);
  }

  // optional .TSP.UUID connected_to_uuid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::connected_to_uuid(this), target, stream);
  }

  // optional .TSP.UUID connected_from_uuid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::connected_from_uuid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ConnectionLineArchive)
  return target;
}

size_t ConnectionLineArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ConnectionLineArchive)
  size_t total_size = 0;

  // required .TSD.ShapeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .TSP.Reference connected_from = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connected_from_);
    }

    // optional .TSP.Reference connected_to = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connected_to_);
    }

    // optional .TSP.UUID connected_to_uuid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connected_to_uuid_);
    }

    // optional .TSP.UUID connected_from_uuid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connected_from_uuid_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectionLineArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ConnectionLineArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionLineArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectionLineArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ConnectionLineArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ConnectionLineArchive)
    MergeFrom(*source);
  }
}

void ConnectionLineArchive::MergeFrom(const ConnectionLineArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ConnectionLineArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::ShapeArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_connected_from()->::TSP::Reference::MergeFrom(from._internal_connected_from());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_connected_to()->::TSP::Reference::MergeFrom(from._internal_connected_to());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_connected_to_uuid()->::TSP::UUID::MergeFrom(from._internal_connected_to_uuid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_connected_from_uuid()->::TSP::UUID::MergeFrom(from._internal_connected_from_uuid());
    }
  }
}

void ConnectionLineArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ConnectionLineArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionLineArchive::CopyFrom(const ConnectionLineArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ConnectionLineArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionLineArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_connected_from()) {
    if (!connected_from_->IsInitialized()) return false;
  }
  if (_internal_has_connected_to()) {
    if (!connected_to_->IsInitialized()) return false;
  }
  if (_internal_has_connected_to_uuid()) {
    if (!connected_to_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_connected_from_uuid()) {
    if (!connected_from_uuid_->IsInitialized()) return false;
  }
  return true;
}

void ConnectionLineArchive::InternalSwap(ConnectionLineArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectionLineArchive, connected_from_uuid_)
      + sizeof(ConnectionLineArchive::connected_from_uuid_)
      - PROTOBUF_FIELD_OFFSET(ConnectionLineArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionLineArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[41]);
}

// ===================================================================

class ImageArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageArchive>()._has_bits_);
  static const ::TSD::DrawableArchive& super(const ImageArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::DataReference& data(const ImageArchive* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& style(const ImageArchive* msg);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Size& originalsize(const ImageArchive* msg);
  static void set_has_originalsize(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& mask(const ImageArchive* msg);
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::DataReference& thumbnaildata(const ImageArchive* msg);
  static void set_has_thumbnaildata(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSP::DataReference& originaldata(const ImageArchive* msg);
  static void set_has_originaldata(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::Size& naturalsize(const ImageArchive* msg);
  static void set_has_naturalsize(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Path& instantalphapath(const ImageArchive* msg);
  static void set_has_instantalphapath(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::ImageAdjustmentsArchive& imageadjustments(const ImageArchive* msg);
  static void set_has_imageadjustments(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSP::DataReference& enhancedimagedata(const ImageArchive* msg);
  static void set_has_enhancedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::DataReference& adjustedimagedata(const ImageArchive* msg);
  static void set_has_adjustedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::DataReference& thumbnailadjustedimagedata(const ImageArchive* msg);
  static void set_has_thumbnailadjustedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_interpretsuntaggedimagedataasgeneric(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSP::Reference& database_data(const ImageArchive* msg);
  static void set_has_database_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& database_thumbnaildata(const ImageArchive* msg);
  static void set_has_database_thumbnaildata(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& database_originaldata(const ImageArchive* msg);
  static void set_has_database_originaldata(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Path& traced_path(const ImageArchive* msg);
  static void set_has_traced_path(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSD::Attribution& attribution(const ImageArchive* msg);
  static void set_has_attribution(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_should_trace_pdf_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::DrawableArchive&
ImageArchive::_Internal::super(const ImageArchive* msg) {
  return *msg->super_;
}
const ::TSP::DataReference&
ImageArchive::_Internal::data(const ImageArchive* msg) {
  return *msg->data_;
}
const ::TSP::Reference&
ImageArchive::_Internal::style(const ImageArchive* msg) {
  return *msg->style_;
}
const ::TSP::Size&
ImageArchive::_Internal::originalsize(const ImageArchive* msg) {
  return *msg->originalsize_;
}
const ::TSP::Reference&
ImageArchive::_Internal::mask(const ImageArchive* msg) {
  return *msg->mask_;
}
const ::TSP::DataReference&
ImageArchive::_Internal::thumbnaildata(const ImageArchive* msg) {
  return *msg->thumbnaildata_;
}
const ::TSP::DataReference&
ImageArchive::_Internal::originaldata(const ImageArchive* msg) {
  return *msg->originaldata_;
}
const ::TSP::Size&
ImageArchive::_Internal::naturalsize(const ImageArchive* msg) {
  return *msg->naturalsize_;
}
const ::TSP::Path&
ImageArchive::_Internal::instantalphapath(const ImageArchive* msg) {
  return *msg->instantalphapath_;
}
const ::TSD::ImageAdjustmentsArchive&
ImageArchive::_Internal::imageadjustments(const ImageArchive* msg) {
  return *msg->imageadjustments_;
}
const ::TSP::DataReference&
ImageArchive::_Internal::enhancedimagedata(const ImageArchive* msg) {
  return *msg->enhancedimagedata_;
}
const ::TSP::DataReference&
ImageArchive::_Internal::adjustedimagedata(const ImageArchive* msg) {
  return *msg->adjustedimagedata_;
}
const ::TSP::DataReference&
ImageArchive::_Internal::thumbnailadjustedimagedata(const ImageArchive* msg) {
  return *msg->thumbnailadjustedimagedata_;
}
const ::TSP::Reference&
ImageArchive::_Internal::database_data(const ImageArchive* msg) {
  return *msg->database_data_;
}
const ::TSP::Reference&
ImageArchive::_Internal::database_thumbnaildata(const ImageArchive* msg) {
  return *msg->database_thumbnaildata_;
}
const ::TSP::Reference&
ImageArchive::_Internal::database_originaldata(const ImageArchive* msg) {
  return *msg->database_originaldata_;
}
const ::TSP::Path&
ImageArchive::_Internal::traced_path(const ImageArchive* msg) {
  return *msg->traced_path_;
}
const ::TSD::Attribution&
ImageArchive::_Internal::attribution(const ImageArchive* msg) {
  return *msg->attribution_;
}
void ImageArchive::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void ImageArchive::clear_style() {
  if (style_ != nullptr) style_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ImageArchive::clear_originalsize() {
  if (originalsize_ != nullptr) originalsize_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ImageArchive::clear_mask() {
  if (mask_ != nullptr) mask_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ImageArchive::clear_thumbnaildata() {
  if (thumbnaildata_ != nullptr) thumbnaildata_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void ImageArchive::clear_originaldata() {
  if (originaldata_ != nullptr) originaldata_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void ImageArchive::clear_naturalsize() {
  if (naturalsize_ != nullptr) naturalsize_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ImageArchive::clear_instantalphapath() {
  if (instantalphapath_ != nullptr) instantalphapath_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ImageArchive::clear_enhancedimagedata() {
  if (enhancedimagedata_ != nullptr) enhancedimagedata_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void ImageArchive::clear_adjustedimagedata() {
  if (adjustedimagedata_ != nullptr) adjustedimagedata_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void ImageArchive::clear_thumbnailadjustedimagedata() {
  if (thumbnailadjustedimagedata_ != nullptr) thumbnailadjustedimagedata_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void ImageArchive::clear_database_data() {
  if (database_data_ != nullptr) database_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ImageArchive::clear_database_thumbnaildata() {
  if (database_thumbnaildata_ != nullptr) database_thumbnaildata_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ImageArchive::clear_database_originaldata() {
  if (database_originaldata_ != nullptr) database_originaldata_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ImageArchive::clear_traced_path() {
  if (traced_path_ != nullptr) traced_path_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
ImageArchive::ImageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ImageArchive)
}
ImageArchive::ImageArchive(const ImageArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::DrawableArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_database_data()) {
    database_data_ = new ::TSP::Reference(*from.database_data_);
  } else {
    database_data_ = nullptr;
  }
  if (from._internal_has_style()) {
    style_ = new ::TSP::Reference(*from.style_);
  } else {
    style_ = nullptr;
  }
  if (from._internal_has_originalsize()) {
    originalsize_ = new ::TSP::Size(*from.originalsize_);
  } else {
    originalsize_ = nullptr;
  }
  if (from._internal_has_mask()) {
    mask_ = new ::TSP::Reference(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  if (from._internal_has_database_thumbnaildata()) {
    database_thumbnaildata_ = new ::TSP::Reference(*from.database_thumbnaildata_);
  } else {
    database_thumbnaildata_ = nullptr;
  }
  if (from._internal_has_database_originaldata()) {
    database_originaldata_ = new ::TSP::Reference(*from.database_originaldata_);
  } else {
    database_originaldata_ = nullptr;
  }
  if (from._internal_has_naturalsize()) {
    naturalsize_ = new ::TSP::Size(*from.naturalsize_);
  } else {
    naturalsize_ = nullptr;
  }
  if (from._internal_has_instantalphapath()) {
    instantalphapath_ = new ::TSP::Path(*from.instantalphapath_);
  } else {
    instantalphapath_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::TSP::DataReference(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_thumbnaildata()) {
    thumbnaildata_ = new ::TSP::DataReference(*from.thumbnaildata_);
  } else {
    thumbnaildata_ = nullptr;
  }
  if (from._internal_has_originaldata()) {
    originaldata_ = new ::TSP::DataReference(*from.originaldata_);
  } else {
    originaldata_ = nullptr;
  }
  if (from._internal_has_imageadjustments()) {
    imageadjustments_ = new ::TSD::ImageAdjustmentsArchive(*from.imageadjustments_);
  } else {
    imageadjustments_ = nullptr;
  }
  if (from._internal_has_adjustedimagedata()) {
    adjustedimagedata_ = new ::TSP::DataReference(*from.adjustedimagedata_);
  } else {
    adjustedimagedata_ = nullptr;
  }
  if (from._internal_has_thumbnailadjustedimagedata()) {
    thumbnailadjustedimagedata_ = new ::TSP::DataReference(*from.thumbnailadjustedimagedata_);
  } else {
    thumbnailadjustedimagedata_ = nullptr;
  }
  if (from._internal_has_enhancedimagedata()) {
    enhancedimagedata_ = new ::TSP::DataReference(*from.enhancedimagedata_);
  } else {
    enhancedimagedata_ = nullptr;
  }
  if (from._internal_has_traced_path()) {
    traced_path_ = new ::TSP::Path(*from.traced_path_);
  } else {
    traced_path_ = nullptr;
  }
  if (from._internal_has_attribution()) {
    attribution_ = new ::TSD::Attribution(*from.attribution_);
  } else {
    attribution_ = nullptr;
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&should_trace_pdf_content_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(should_trace_pdf_content_));
  // @@protoc_insertion_point(copy_constructor:TSD.ImageArchive)
}

void ImageArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&should_trace_pdf_content_) -
    reinterpret_cast<char*>(&super_)) + sizeof(should_trace_pdf_content_));
}

ImageArchive::~ImageArchive() {
  // @@protoc_insertion_point(destructor:TSD.ImageArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete database_data_;
  if (this != internal_default_instance()) delete style_;
  if (this != internal_default_instance()) delete originalsize_;
  if (this != internal_default_instance()) delete mask_;
  if (this != internal_default_instance()) delete database_thumbnaildata_;
  if (this != internal_default_instance()) delete database_originaldata_;
  if (this != internal_default_instance()) delete naturalsize_;
  if (this != internal_default_instance()) delete instantalphapath_;
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete thumbnaildata_;
  if (this != internal_default_instance()) delete originaldata_;
  if (this != internal_default_instance()) delete imageadjustments_;
  if (this != internal_default_instance()) delete adjustedimagedata_;
  if (this != internal_default_instance()) delete thumbnailadjustedimagedata_;
  if (this != internal_default_instance()) delete enhancedimagedata_;
  if (this != internal_default_instance()) delete traced_path_;
  if (this != internal_default_instance()) delete attribution_;
}

void ImageArchive::ArenaDtor(void* object) {
  ImageArchive* _this = reinterpret_cast< ImageArchive* >(object);
  (void)_this;
}
void ImageArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ImageArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(database_data_ != nullptr);
      database_data_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(style_ != nullptr);
      style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(originalsize_ != nullptr);
      originalsize_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(mask_ != nullptr);
      mask_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(database_thumbnaildata_ != nullptr);
      database_thumbnaildata_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(database_originaldata_ != nullptr);
      database_originaldata_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(naturalsize_ != nullptr);
      naturalsize_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(instantalphapath_ != nullptr);
      instantalphapath_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(thumbnaildata_ != nullptr);
      thumbnaildata_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(originaldata_ != nullptr);
      originaldata_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(imageadjustments_ != nullptr);
      imageadjustments_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(adjustedimagedata_ != nullptr);
      adjustedimagedata_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(thumbnailadjustedimagedata_ != nullptr);
      thumbnailadjustedimagedata_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(enhancedimagedata_ != nullptr);
      enhancedimagedata_->Clear();
    }
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(traced_path_ != nullptr);
      traced_path_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(attribution_ != nullptr);
      attribution_->Clear();
    }
  }
  if (cached_has_bits & 0x001c0000u) {
    ::memset(&flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&should_trace_pdf_content_) -
        reinterpret_cast<char*>(&flags_)) + sizeof(should_trace_pdf_content_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.DrawableArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference database_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size originalSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_originalsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference mask = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference database_thumbnailData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_thumbnaildata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference database_originalData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_originaldata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size naturalSize = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_naturalsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Path instantAlphaPath = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_instantalphapath(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference thumbnailData = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_thumbnaildata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference originalData = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_originaldata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.ImageAdjustmentsArchive imageAdjustments = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_imageadjustments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference adjustedImageData = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjustedimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference thumbnailAdjustedImageData = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_thumbnailadjustedimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference enhancedImageData = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_enhancedimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool interpretsUntaggedImageDataAsGeneric = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_interpretsuntaggedimagedataasgeneric(&has_bits);
          interpretsuntaggedimagedataasgeneric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Path traced_path = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_traced_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.Attribution attribution = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_attribution(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_trace_pdf_content = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_should_trace_pdf_content(&has_bits);
          should_trace_pdf_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag && tag < 8000u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ImageArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.DrawableArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference database_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::database_data(this), target, stream);
  }

  // optional .TSP.Reference style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::style(this), target, stream);
  }

  // optional .TSP.Size originalSize = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::originalsize(this), target, stream);
  }

  // optional .TSP.Reference mask = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::mask(this), target, stream);
  }

  // optional .TSP.Reference database_thumbnailData = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::database_thumbnaildata(this), target, stream);
  }

  // optional uint32 flags = 7;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_flags(), target);
  }

  // optional .TSP.Reference database_originalData = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::database_originaldata(this), target, stream);
  }

  // optional .TSP.Size naturalSize = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::naturalsize(this), target, stream);
  }

  // optional .TSP.Path instantAlphaPath = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::instantalphapath(this), target, stream);
  }

  // optional .TSP.DataReference data = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::data(this), target, stream);
  }

  // optional .TSP.DataReference thumbnailData = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::thumbnaildata(this), target, stream);
  }

  // optional .TSP.DataReference originalData = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::originaldata(this), target, stream);
  }

  // optional .TSD.ImageAdjustmentsArchive imageAdjustments = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::imageadjustments(this), target, stream);
  }

  // optional .TSP.DataReference adjustedImageData = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::adjustedimagedata(this), target, stream);
  }

  // optional .TSP.DataReference thumbnailAdjustedImageData = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::thumbnailadjustedimagedata(this), target, stream);
  }

  // optional .TSP.DataReference enhancedImageData = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::enhancedimagedata(this), target, stream);
  }

  // optional bool interpretsUntaggedImageDataAsGeneric = 18;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_interpretsuntaggedimagedataasgeneric(), target);
  }

  // optional .TSP.Path traced_path = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::traced_path(this), target, stream);
  }

  // optional .TSD.Attribution attribution = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::attribution(this), target, stream);
  }

  // optional bool should_trace_pdf_content = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_should_trace_pdf_content(), target);
  }

  // Extension range [100, 1000)
  target = _extensions_._InternalSerialize(
      100, 1000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ImageArchive)
  return target;
}

size_t ImageArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ImageArchive)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  // required .TSD.DrawableArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSP.Reference database_data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_data_);
    }

    // optional .TSP.Reference style = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *style_);
    }

    // optional .TSP.Size originalSize = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *originalsize_);
    }

    // optional .TSP.Reference mask = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mask_);
    }

    // optional .TSP.Reference database_thumbnailData = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_thumbnaildata_);
    }

    // optional .TSP.Reference database_originalData = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_originaldata_);
    }

    // optional .TSP.Size naturalSize = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *naturalsize_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.Path instantAlphaPath = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instantalphapath_);
    }

    // optional .TSP.DataReference data = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_);
    }

    // optional .TSP.DataReference thumbnailData = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *thumbnaildata_);
    }

    // optional .TSP.DataReference originalData = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *originaldata_);
    }

    // optional .TSD.ImageAdjustmentsArchive imageAdjustments = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *imageadjustments_);
    }

    // optional .TSP.DataReference adjustedImageData = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adjustedimagedata_);
    }

    // optional .TSP.DataReference thumbnailAdjustedImageData = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *thumbnailadjustedimagedata_);
    }

    // optional .TSP.DataReference enhancedImageData = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enhancedimagedata_);
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional .TSP.Path traced_path = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *traced_path_);
    }

    // optional .TSD.Attribution attribution = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attribution_);
    }

    // optional uint32 flags = 7;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional bool interpretsUntaggedImageDataAsGeneric = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool should_trace_pdf_content = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ImageArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ImageArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ImageArchive)
    MergeFrom(*source);
  }
}

void ImageArchive::MergeFrom(const ImageArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ImageArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::DrawableArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_database_data()->::TSP::Reference::MergeFrom(from._internal_database_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_style()->::TSP::Reference::MergeFrom(from._internal_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_originalsize()->::TSP::Size::MergeFrom(from._internal_originalsize());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_mask()->::TSP::Reference::MergeFrom(from._internal_mask());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_database_thumbnaildata()->::TSP::Reference::MergeFrom(from._internal_database_thumbnaildata());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_database_originaldata()->::TSP::Reference::MergeFrom(from._internal_database_originaldata());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_naturalsize()->::TSP::Size::MergeFrom(from._internal_naturalsize());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_instantalphapath()->::TSP::Path::MergeFrom(from._internal_instantalphapath());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_data()->::TSP::DataReference::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_thumbnaildata()->::TSP::DataReference::MergeFrom(from._internal_thumbnaildata());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_originaldata()->::TSP::DataReference::MergeFrom(from._internal_originaldata());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_imageadjustments()->::TSD::ImageAdjustmentsArchive::MergeFrom(from._internal_imageadjustments());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_adjustedimagedata()->::TSP::DataReference::MergeFrom(from._internal_adjustedimagedata());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_thumbnailadjustedimagedata()->::TSP::DataReference::MergeFrom(from._internal_thumbnailadjustedimagedata());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_enhancedimagedata()->::TSP::DataReference::MergeFrom(from._internal_enhancedimagedata());
    }
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_traced_path()->::TSP::Path::MergeFrom(from._internal_traced_path());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_attribution()->::TSD::Attribution::MergeFrom(from._internal_attribution());
    }
    if (cached_has_bits & 0x00040000u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00080000u) {
      interpretsuntaggedimagedataasgeneric_ = from.interpretsuntaggedimagedataasgeneric_;
    }
    if (cached_has_bits & 0x00100000u) {
      should_trace_pdf_content_ = from.should_trace_pdf_content_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ImageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageArchive::CopyFrom(const ImageArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ImageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageArchive::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_database_data()) {
    if (!database_data_->IsInitialized()) return false;
  }
  if (_internal_has_style()) {
    if (!style_->IsInitialized()) return false;
  }
  if (_internal_has_originalsize()) {
    if (!originalsize_->IsInitialized()) return false;
  }
  if (_internal_has_mask()) {
    if (!mask_->IsInitialized()) return false;
  }
  if (_internal_has_database_thumbnaildata()) {
    if (!database_thumbnaildata_->IsInitialized()) return false;
  }
  if (_internal_has_database_originaldata()) {
    if (!database_originaldata_->IsInitialized()) return false;
  }
  if (_internal_has_naturalsize()) {
    if (!naturalsize_->IsInitialized()) return false;
  }
  if (_internal_has_instantalphapath()) {
    if (!instantalphapath_->IsInitialized()) return false;
  }
  if (_internal_has_data()) {
    if (!data_->IsInitialized()) return false;
  }
  if (_internal_has_thumbnaildata()) {
    if (!thumbnaildata_->IsInitialized()) return false;
  }
  if (_internal_has_originaldata()) {
    if (!originaldata_->IsInitialized()) return false;
  }
  if (_internal_has_adjustedimagedata()) {
    if (!adjustedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_thumbnailadjustedimagedata()) {
    if (!thumbnailadjustedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_enhancedimagedata()) {
    if (!enhancedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_traced_path()) {
    if (!traced_path_->IsInitialized()) return false;
  }
  return true;
}

void ImageArchive::InternalSwap(ImageArchive* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageArchive, should_trace_pdf_content_)
      + sizeof(ImageArchive::should_trace_pdf_content_)
      - PROTOBUF_FIELD_OFFSET(ImageArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[42]);
}

// ===================================================================

class MaskArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MaskArchive>()._has_bits_);
  static const ::TSD::DrawableArchive& super(const MaskArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::PathSourceArchive& pathsource(const MaskArchive* msg);
  static void set_has_pathsource(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::DrawableArchive&
MaskArchive::_Internal::super(const MaskArchive* msg) {
  return *msg->super_;
}
const ::TSD::PathSourceArchive&
MaskArchive::_Internal::pathsource(const MaskArchive* msg) {
  return *msg->pathsource_;
}
MaskArchive::MaskArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.MaskArchive)
}
MaskArchive::MaskArchive(const MaskArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::DrawableArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_pathsource()) {
    pathsource_ = new ::TSD::PathSourceArchive(*from.pathsource_);
  } else {
    pathsource_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.MaskArchive)
}

void MaskArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pathsource_) -
    reinterpret_cast<char*>(&super_)) + sizeof(pathsource_));
}

MaskArchive::~MaskArchive() {
  // @@protoc_insertion_point(destructor:TSD.MaskArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MaskArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete pathsource_;
}

void MaskArchive::ArenaDtor(void* object) {
  MaskArchive* _this = reinterpret_cast< MaskArchive* >(object);
  (void)_this;
}
void MaskArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MaskArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaskArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.MaskArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pathsource_ != nullptr);
      pathsource_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaskArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.DrawableArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive pathsource = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathsource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaskArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.MaskArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.DrawableArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSD.PathSourceArchive pathsource = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pathsource(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.MaskArchive)
  return target;
}

size_t MaskArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.MaskArchive)
  size_t total_size = 0;

  // required .TSD.DrawableArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSD.PathSourceArchive pathsource = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pathsource_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaskArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.MaskArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MaskArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaskArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.MaskArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.MaskArchive)
    MergeFrom(*source);
  }
}

void MaskArchive::MergeFrom(const MaskArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.MaskArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::DrawableArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pathsource()->::TSD::PathSourceArchive::MergeFrom(from._internal_pathsource());
    }
  }
}

void MaskArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.MaskArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaskArchive::CopyFrom(const MaskArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.MaskArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaskArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_pathsource()) {
    if (!pathsource_->IsInitialized()) return false;
  }
  return true;
}

void MaskArchive::InternalSwap(MaskArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaskArchive, pathsource_)
      + sizeof(MaskArchive::pathsource_)
      - PROTOBUF_FIELD_OFFSET(MaskArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaskArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[43]);
}

// ===================================================================

class ImageDataAttributes::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageDataAttributes>()._has_bits_);
  static const ::TSP::Size& pixel_size(const ImageDataAttributes* msg);
  static void set_has_pixel_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_image_is_srgb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_should_be_interpreted_as_generic_if_untagged(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Size&
ImageDataAttributes::_Internal::pixel_size(const ImageDataAttributes* msg) {
  return *msg->pixel_size_;
}
void ImageDataAttributes::clear_pixel_size() {
  if (pixel_size_ != nullptr) pixel_size_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ImageDataAttributes::ImageDataAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ImageDataAttributes)
}
ImageDataAttributes::ImageDataAttributes(const ImageDataAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pixel_size()) {
    pixel_size_ = new ::TSP::Size(*from.pixel_size_);
  } else {
    pixel_size_ = nullptr;
  }
  ::memcpy(&image_is_srgb_, &from.image_is_srgb_,
    static_cast<size_t>(reinterpret_cast<char*>(&should_be_interpreted_as_generic_if_untagged_) -
    reinterpret_cast<char*>(&image_is_srgb_)) + sizeof(should_be_interpreted_as_generic_if_untagged_));
  // @@protoc_insertion_point(copy_constructor:TSD.ImageDataAttributes)
}

void ImageDataAttributes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pixel_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&should_be_interpreted_as_generic_if_untagged_) -
    reinterpret_cast<char*>(&pixel_size_)) + sizeof(should_be_interpreted_as_generic_if_untagged_));
}

ImageDataAttributes::~ImageDataAttributes() {
  // @@protoc_insertion_point(destructor:TSD.ImageDataAttributes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageDataAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pixel_size_;
}

void ImageDataAttributes::ArenaDtor(void* object) {
  ImageDataAttributes* _this = reinterpret_cast< ImageDataAttributes* >(object);
  (void)_this;
}
void ImageDataAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageDataAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageDataAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ImageDataAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pixel_size_ != nullptr);
    pixel_size_->Clear();
  }
  ::memset(&image_is_srgb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&should_be_interpreted_as_generic_if_untagged_) -
      reinterpret_cast<char*>(&image_is_srgb_)) + sizeof(should_be_interpreted_as_generic_if_untagged_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageDataAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Size pixel_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pixel_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool image_is_srgb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_image_is_srgb(&has_bits);
          image_is_srgb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_be_interpreted_as_generic_if_untagged = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_should_be_interpreted_as_generic_if_untagged(&has_bits);
          should_be_interpreted_as_generic_if_untagged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageDataAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ImageDataAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Size pixel_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pixel_size(this), target, stream);
  }

  // optional bool image_is_srgb = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_image_is_srgb(), target);
  }

  // optional bool should_be_interpreted_as_generic_if_untagged = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_should_be_interpreted_as_generic_if_untagged(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ImageDataAttributes)
  return target;
}

size_t ImageDataAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ImageDataAttributes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Size pixel_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pixel_size_);
    }

    // optional bool image_is_srgb = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool should_be_interpreted_as_generic_if_untagged = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageDataAttributes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ImageDataAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageDataAttributes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageDataAttributes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ImageDataAttributes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ImageDataAttributes)
    MergeFrom(*source);
  }
}

void ImageDataAttributes::MergeFrom(const ImageDataAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ImageDataAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pixel_size()->::TSP::Size::MergeFrom(from._internal_pixel_size());
    }
    if (cached_has_bits & 0x00000002u) {
      image_is_srgb_ = from.image_is_srgb_;
    }
    if (cached_has_bits & 0x00000004u) {
      should_be_interpreted_as_generic_if_untagged_ = from.should_be_interpreted_as_generic_if_untagged_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageDataAttributes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ImageDataAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageDataAttributes::CopyFrom(const ImageDataAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ImageDataAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDataAttributes::IsInitialized() const {
  if (_internal_has_pixel_size()) {
    if (!pixel_size_->IsInitialized()) return false;
  }
  return true;
}

void ImageDataAttributes::InternalSwap(ImageDataAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageDataAttributes, should_be_interpreted_as_generic_if_untagged_)
      + sizeof(ImageDataAttributes::should_be_interpreted_as_generic_if_untagged_)
      - PROTOBUF_FIELD_OFFSET(ImageDataAttributes, pixel_size_)>(
          reinterpret_cast<char*>(&pixel_size_),
          reinterpret_cast<char*>(&other->pixel_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageDataAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[44]);
}

// ===================================================================

class MovieArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MovieArchive>()._has_bits_);
  static const ::TSD::DrawableArchive& super(const MovieArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::DataReference& moviedata(const MovieArchive* msg);
  static void set_has_moviedata(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::DataReference& importedauxiliarymoviedata(const MovieArchive* msg);
  static void set_has_importedauxiliarymoviedata(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_imported_auxiliary_movie_data_original_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_movieremoteurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_endtime(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_postertime(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_loopoptionasinteger(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_loop_option(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_autoplay(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_audioonly(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_streaming(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_nativeaudiorecording(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_playsacrossslides(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::TSP::DataReference& posterimagedata(const MovieArchive* msg);
  static void set_has_posterimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::DataReference& audioonlyimagedata(const MovieArchive* msg);
  static void set_has_audioonlyimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_poster_image_generated_with_alpha_support(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_playablestate(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSP::Reference& database_moviedata(const MovieArchive* msg);
  static void set_has_database_moviedata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& database_posterimagedata(const MovieArchive* msg);
  static void set_has_database_posterimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& database_audioonlyimagedata(const MovieArchive* msg);
  static void set_has_database_audioonlyimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& style(const MovieArchive* msg);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Size& originalsize(const MovieArchive* msg);
  static void set_has_originalsize(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::Size& naturalsize(const MovieArchive* msg);
  static void set_has_naturalsize(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSD::Attribution& attribution(const MovieArchive* msg);
  static void set_has_attribution(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSD::MovieFingerprint& fingerprint(const MovieArchive* msg);
  static void set_has_fingerprint(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TSD::DrawableArchive&
MovieArchive::_Internal::super(const MovieArchive* msg) {
  return *msg->super_;
}
const ::TSP::DataReference&
MovieArchive::_Internal::moviedata(const MovieArchive* msg) {
  return *msg->moviedata_;
}
const ::TSP::DataReference&
MovieArchive::_Internal::importedauxiliarymoviedata(const MovieArchive* msg) {
  return *msg->importedauxiliarymoviedata_;
}
const ::TSP::DataReference&
MovieArchive::_Internal::posterimagedata(const MovieArchive* msg) {
  return *msg->posterimagedata_;
}
const ::TSP::DataReference&
MovieArchive::_Internal::audioonlyimagedata(const MovieArchive* msg) {
  return *msg->audioonlyimagedata_;
}
const ::TSP::Reference&
MovieArchive::_Internal::database_moviedata(const MovieArchive* msg) {
  return *msg->database_moviedata_;
}
const ::TSP::Reference&
MovieArchive::_Internal::database_posterimagedata(const MovieArchive* msg) {
  return *msg->database_posterimagedata_;
}
const ::TSP::Reference&
MovieArchive::_Internal::database_audioonlyimagedata(const MovieArchive* msg) {
  return *msg->database_audioonlyimagedata_;
}
const ::TSP::Reference&
MovieArchive::_Internal::style(const MovieArchive* msg) {
  return *msg->style_;
}
const ::TSP::Size&
MovieArchive::_Internal::originalsize(const MovieArchive* msg) {
  return *msg->originalsize_;
}
const ::TSP::Size&
MovieArchive::_Internal::naturalsize(const MovieArchive* msg) {
  return *msg->naturalsize_;
}
const ::TSD::Attribution&
MovieArchive::_Internal::attribution(const MovieArchive* msg) {
  return *msg->attribution_;
}
const ::TSD::MovieFingerprint&
MovieArchive::_Internal::fingerprint(const MovieArchive* msg) {
  return *msg->fingerprint_;
}
void MovieArchive::clear_moviedata() {
  if (moviedata_ != nullptr) moviedata_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void MovieArchive::clear_importedauxiliarymoviedata() {
  if (importedauxiliarymoviedata_ != nullptr) importedauxiliarymoviedata_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void MovieArchive::clear_posterimagedata() {
  if (posterimagedata_ != nullptr) posterimagedata_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void MovieArchive::clear_audioonlyimagedata() {
  if (audioonlyimagedata_ != nullptr) audioonlyimagedata_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void MovieArchive::clear_database_moviedata() {
  if (database_moviedata_ != nullptr) database_moviedata_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void MovieArchive::clear_database_posterimagedata() {
  if (database_posterimagedata_ != nullptr) database_posterimagedata_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void MovieArchive::clear_database_audioonlyimagedata() {
  if (database_audioonlyimagedata_ != nullptr) database_audioonlyimagedata_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void MovieArchive::clear_style() {
  if (style_ != nullptr) style_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void MovieArchive::clear_originalsize() {
  if (originalsize_ != nullptr) originalsize_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void MovieArchive::clear_naturalsize() {
  if (naturalsize_ != nullptr) naturalsize_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
MovieArchive::MovieArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.MovieArchive)
}
MovieArchive::MovieArchive(const MovieArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  movieremoteurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_movieremoteurl()) {
    movieremoteurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_movieremoteurl(), 
      GetArena());
  }
  imported_auxiliary_movie_data_original_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_imported_auxiliary_movie_data_original_filename()) {
    imported_auxiliary_movie_data_original_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imported_auxiliary_movie_data_original_filename(), 
      GetArena());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSD::DrawableArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_database_moviedata()) {
    database_moviedata_ = new ::TSP::Reference(*from.database_moviedata_);
  } else {
    database_moviedata_ = nullptr;
  }
  if (from._internal_has_database_posterimagedata()) {
    database_posterimagedata_ = new ::TSP::Reference(*from.database_posterimagedata_);
  } else {
    database_posterimagedata_ = nullptr;
  }
  if (from._internal_has_database_audioonlyimagedata()) {
    database_audioonlyimagedata_ = new ::TSP::Reference(*from.database_audioonlyimagedata_);
  } else {
    database_audioonlyimagedata_ = nullptr;
  }
  if (from._internal_has_moviedata()) {
    moviedata_ = new ::TSP::DataReference(*from.moviedata_);
  } else {
    moviedata_ = nullptr;
  }
  if (from._internal_has_posterimagedata()) {
    posterimagedata_ = new ::TSP::DataReference(*from.posterimagedata_);
  } else {
    posterimagedata_ = nullptr;
  }
  if (from._internal_has_audioonlyimagedata()) {
    audioonlyimagedata_ = new ::TSP::DataReference(*from.audioonlyimagedata_);
  } else {
    audioonlyimagedata_ = nullptr;
  }
  if (from._internal_has_style()) {
    style_ = new ::TSP::Reference(*from.style_);
  } else {
    style_ = nullptr;
  }
  if (from._internal_has_originalsize()) {
    originalsize_ = new ::TSP::Size(*from.originalsize_);
  } else {
    originalsize_ = nullptr;
  }
  if (from._internal_has_naturalsize()) {
    naturalsize_ = new ::TSP::Size(*from.naturalsize_);
  } else {
    naturalsize_ = nullptr;
  }
  if (from._internal_has_importedauxiliarymoviedata()) {
    importedauxiliarymoviedata_ = new ::TSP::DataReference(*from.importedauxiliarymoviedata_);
  } else {
    importedauxiliarymoviedata_ = nullptr;
  }
  if (from._internal_has_attribution()) {
    attribution_ = new ::TSD::Attribution(*from.attribution_);
  } else {
    attribution_ = nullptr;
  }
  if (from._internal_has_fingerprint()) {
    fingerprint_ = new ::TSD::MovieFingerprint(*from.fingerprint_);
  } else {
    fingerprint_ = nullptr;
  }
  ::memcpy(&starttime_, &from.starttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&poster_image_generated_with_alpha_support_) -
    reinterpret_cast<char*>(&starttime_)) + sizeof(poster_image_generated_with_alpha_support_));
  // @@protoc_insertion_point(copy_constructor:TSD.MovieArchive)
}

void MovieArchive::SharedCtor() {
movieremoteurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
imported_auxiliary_movie_data_original_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&poster_image_generated_with_alpha_support_) -
    reinterpret_cast<char*>(&super_)) + sizeof(poster_image_generated_with_alpha_support_));
}

MovieArchive::~MovieArchive() {
  // @@protoc_insertion_point(destructor:TSD.MovieArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MovieArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  movieremoteurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imported_auxiliary_movie_data_original_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete database_moviedata_;
  if (this != internal_default_instance()) delete database_posterimagedata_;
  if (this != internal_default_instance()) delete database_audioonlyimagedata_;
  if (this != internal_default_instance()) delete moviedata_;
  if (this != internal_default_instance()) delete posterimagedata_;
  if (this != internal_default_instance()) delete audioonlyimagedata_;
  if (this != internal_default_instance()) delete style_;
  if (this != internal_default_instance()) delete originalsize_;
  if (this != internal_default_instance()) delete naturalsize_;
  if (this != internal_default_instance()) delete importedauxiliarymoviedata_;
  if (this != internal_default_instance()) delete attribution_;
  if (this != internal_default_instance()) delete fingerprint_;
}

void MovieArchive::ArenaDtor(void* object) {
  MovieArchive* _this = reinterpret_cast< MovieArchive* >(object);
  (void)_this;
}
void MovieArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MovieArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MovieArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.MovieArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      movieremoteurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      imported_auxiliary_movie_data_original_filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(database_moviedata_ != nullptr);
      database_moviedata_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(database_posterimagedata_ != nullptr);
      database_posterimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(database_audioonlyimagedata_ != nullptr);
      database_audioonlyimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(moviedata_ != nullptr);
      moviedata_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(posterimagedata_ != nullptr);
      posterimagedata_->Clear();
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(audioonlyimagedata_ != nullptr);
      audioonlyimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(style_ != nullptr);
      style_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(originalsize_ != nullptr);
      originalsize_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(naturalsize_ != nullptr);
      naturalsize_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(importedauxiliarymoviedata_ != nullptr);
      importedauxiliarymoviedata_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(attribution_ != nullptr);
      attribution_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(fingerprint_ != nullptr);
      fingerprint_->Clear();
    }
  }
  starttime_ = 0;
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&endtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audioonly_) -
        reinterpret_cast<char*>(&endtime_)) + sizeof(audioonly_));
  }
  if (cached_has_bits & 0x1f000000u) {
    ::memset(&streaming_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&poster_image_generated_with_alpha_support_) -
        reinterpret_cast<char*>(&streaming_)) + sizeof(poster_image_generated_with_alpha_support_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovieArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.DrawableArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference database_movieData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_moviedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float startTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_starttime(&has_bits);
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_endtime(&has_bits);
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float posterTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_postertime(&has_bits);
          postertime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 loopOptionAsInteger = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_loopoptionasinteger(&has_bits);
          loopoptionasinteger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_volume(&has_bits);
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool autoPlay = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_autoplay(&has_bits);
          autoplay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool audioOnly = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_audioonly(&has_bits);
          audioonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference database_posterImageData = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_posterimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference database_audioOnlyImageData = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_audioonlyimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 playableState = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_playablestate(&has_bits);
          playablestate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference movieData = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_moviedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference posterImageData = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_posterimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference audioOnlyImageData = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_audioonlyimagedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string movieRemoteURL = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_movieremoteurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.MovieArchive.movieRemoteURL");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool streaming = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_streaming(&has_bits);
          streaming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference style = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size originalSize = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_originalsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size naturalSize = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_naturalsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference importedAuxiliaryMovieData = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_importedauxiliarymoviedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool poster_image_generated_with_alpha_support = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_poster_image_generated_with_alpha_support(&has_bits);
          poster_image_generated_with_alpha_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.MovieArchive.MovieLoopOption loop_option = 24 [default = None];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::MovieArchive_MovieLoopOption_IsValid(val))) {
            _internal_set_loop_option(static_cast<::TSD::MovieArchive_MovieLoopOption>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string imported_auxiliary_movie_data_original_filename = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_imported_auxiliary_movie_data_original_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.MovieArchive.imported_auxiliary_movie_data_original_filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.Attribution attribution = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_attribution(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool nativeAudioRecording = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_nativeaudiorecording(&has_bits);
          nativeaudiorecording_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool playsAcrossSlides = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_playsacrossslides(&has_bits);
          playsacrossslides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.MovieFingerprint fingerprint = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_fingerprint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MovieArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.MovieArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.DrawableArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference database_movieData = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::database_moviedata(this), target, stream);
  }

  // optional float startTime = 3;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_starttime(), target);
  }

  // optional float endTime = 4;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_endtime(), target);
  }

  // optional float posterTime = 5;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_postertime(), target);
  }

  // optional uint32 loopOptionAsInteger = 6 [deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_loopoptionasinteger(), target);
  }

  // optional float volume = 7;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_volume(), target);
  }

  // optional bool autoPlay = 8 [deprecated = true];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_autoplay(), target);
  }

  // optional bool audioOnly = 9;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_audioonly(), target);
  }

  // optional .TSP.Reference database_posterImageData = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::database_posterimagedata(this), target, stream);
  }

  // optional .TSP.Reference database_audioOnlyImageData = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::database_audioonlyimagedata(this), target, stream);
  }

  // optional uint32 playableState = 12;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_playablestate(), target);
  }

  // optional uint32 flags = 13;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_flags(), target);
  }

  // optional .TSP.DataReference movieData = 14;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::moviedata(this), target, stream);
  }

  // optional .TSP.DataReference posterImageData = 15;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::posterimagedata(this), target, stream);
  }

  // optional .TSP.DataReference audioOnlyImageData = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::audioonlyimagedata(this), target, stream);
  }

  // optional string movieRemoteURL = 17;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_movieremoteurl().data(), static_cast<int>(this->_internal_movieremoteurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.MovieArchive.movieRemoteURL");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_movieremoteurl(), target);
  }

  // optional bool streaming = 18;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_streaming(), target);
  }

  // optional .TSP.Reference style = 19;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::style(this), target, stream);
  }

  // optional .TSP.Size originalSize = 20;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::originalsize(this), target, stream);
  }

  // optional .TSP.Size naturalSize = 21;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::naturalsize(this), target, stream);
  }

  // optional .TSP.DataReference importedAuxiliaryMovieData = 22;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::importedauxiliarymoviedata(this), target, stream);
  }

  // optional bool poster_image_generated_with_alpha_support = 23;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_poster_image_generated_with_alpha_support(), target);
  }

  // optional .TSD.MovieArchive.MovieLoopOption loop_option = 24 [default = None];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_loop_option(), target);
  }

  // optional string imported_auxiliary_movie_data_original_filename = 25;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_imported_auxiliary_movie_data_original_filename().data(), static_cast<int>(this->_internal_imported_auxiliary_movie_data_original_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.MovieArchive.imported_auxiliary_movie_data_original_filename");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_imported_auxiliary_movie_data_original_filename(), target);
  }

  // optional .TSD.Attribution attribution = 26;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::attribution(this), target, stream);
  }

  // optional bool nativeAudioRecording = 27;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_nativeaudiorecording(), target);
  }

  // optional bool playsAcrossSlides = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_playsacrossslides(), target);
  }

  // optional .TSD.MovieFingerprint fingerprint = 29;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::fingerprint(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.MovieArchive)
  return target;
}

size_t MovieArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.MovieArchive)
  size_t total_size = 0;

  // required .TSD.DrawableArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string movieRemoteURL = 17;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_movieremoteurl());
    }

    // optional string imported_auxiliary_movie_data_original_filename = 25;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imported_auxiliary_movie_data_original_filename());
    }

  }
  if (cached_has_bits & 0x000000f8u) {
    // optional .TSP.Reference database_movieData = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_moviedata_);
    }

    // optional .TSP.Reference database_posterImageData = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_posterimagedata_);
    }

    // optional .TSP.Reference database_audioOnlyImageData = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_audioonlyimagedata_);
    }

    // optional .TSP.DataReference movieData = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *moviedata_);
    }

    // optional .TSP.DataReference posterImageData = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *posterimagedata_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.DataReference audioOnlyImageData = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *audioonlyimagedata_);
    }

    // optional .TSP.Reference style = 19;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *style_);
    }

    // optional .TSP.Size originalSize = 20;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *originalsize_);
    }

    // optional .TSP.Size naturalSize = 21;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *naturalsize_);
    }

    // optional .TSP.DataReference importedAuxiliaryMovieData = 22;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *importedauxiliarymoviedata_);
    }

    // optional .TSD.Attribution attribution = 26;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attribution_);
    }

    // optional .TSD.MovieFingerprint fingerprint = 29;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fingerprint_);
    }

    // optional float startTime = 3;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float endTime = 4;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float posterTime = 5;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional uint32 loopOptionAsInteger = 6 [deprecated = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_loopoptionasinteger());
    }

    // optional float volume = 7;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 4;
    }

    // optional uint32 playableState = 12;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_playablestate());
    }

    // optional uint32 flags = 13;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional bool autoPlay = 8 [deprecated = true];
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 1;
    }

    // optional bool audioOnly = 9;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x1f000000u) {
    // optional bool streaming = 18;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool nativeAudioRecording = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional .TSD.MovieArchive.MovieLoopOption loop_option = 24 [default = None];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_loop_option());
    }

    // optional bool playsAcrossSlides = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool poster_image_generated_with_alpha_support = 23;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovieArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.MovieArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MovieArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MovieArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.MovieArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.MovieArchive)
    MergeFrom(*source);
  }
}

void MovieArchive::MergeFrom(const MovieArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.MovieArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_movieremoteurl(from._internal_movieremoteurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_imported_auxiliary_movie_data_original_filename(from._internal_imported_auxiliary_movie_data_original_filename());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TSD::DrawableArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_database_moviedata()->::TSP::Reference::MergeFrom(from._internal_database_moviedata());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_database_posterimagedata()->::TSP::Reference::MergeFrom(from._internal_database_posterimagedata());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_database_audioonlyimagedata()->::TSP::Reference::MergeFrom(from._internal_database_audioonlyimagedata());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_moviedata()->::TSP::DataReference::MergeFrom(from._internal_moviedata());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_posterimagedata()->::TSP::DataReference::MergeFrom(from._internal_posterimagedata());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_audioonlyimagedata()->::TSP::DataReference::MergeFrom(from._internal_audioonlyimagedata());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_style()->::TSP::Reference::MergeFrom(from._internal_style());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_originalsize()->::TSP::Size::MergeFrom(from._internal_originalsize());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_naturalsize()->::TSP::Size::MergeFrom(from._internal_naturalsize());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_importedauxiliarymoviedata()->::TSP::DataReference::MergeFrom(from._internal_importedauxiliarymoviedata());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_attribution()->::TSD::Attribution::MergeFrom(from._internal_attribution());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_fingerprint()->::TSD::MovieFingerprint::MergeFrom(from._internal_fingerprint());
    }
    if (cached_has_bits & 0x00008000u) {
      starttime_ = from.starttime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      endtime_ = from.endtime_;
    }
    if (cached_has_bits & 0x00020000u) {
      postertime_ = from.postertime_;
    }
    if (cached_has_bits & 0x00040000u) {
      loopoptionasinteger_ = from.loopoptionasinteger_;
    }
    if (cached_has_bits & 0x00080000u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00100000u) {
      playablestate_ = from.playablestate_;
    }
    if (cached_has_bits & 0x00200000u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00400000u) {
      autoplay_ = from.autoplay_;
    }
    if (cached_has_bits & 0x00800000u) {
      audioonly_ = from.audioonly_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      streaming_ = from.streaming_;
    }
    if (cached_has_bits & 0x02000000u) {
      nativeaudiorecording_ = from.nativeaudiorecording_;
    }
    if (cached_has_bits & 0x04000000u) {
      loop_option_ = from.loop_option_;
    }
    if (cached_has_bits & 0x08000000u) {
      playsacrossslides_ = from.playsacrossslides_;
    }
    if (cached_has_bits & 0x10000000u) {
      poster_image_generated_with_alpha_support_ = from.poster_image_generated_with_alpha_support_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MovieArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.MovieArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovieArchive::CopyFrom(const MovieArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.MovieArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_database_moviedata()) {
    if (!database_moviedata_->IsInitialized()) return false;
  }
  if (_internal_has_database_posterimagedata()) {
    if (!database_posterimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_database_audioonlyimagedata()) {
    if (!database_audioonlyimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_moviedata()) {
    if (!moviedata_->IsInitialized()) return false;
  }
  if (_internal_has_posterimagedata()) {
    if (!posterimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_audioonlyimagedata()) {
    if (!audioonlyimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_style()) {
    if (!style_->IsInitialized()) return false;
  }
  if (_internal_has_originalsize()) {
    if (!originalsize_->IsInitialized()) return false;
  }
  if (_internal_has_naturalsize()) {
    if (!naturalsize_->IsInitialized()) return false;
  }
  if (_internal_has_importedauxiliarymoviedata()) {
    if (!importedauxiliarymoviedata_->IsInitialized()) return false;
  }
  if (_internal_has_fingerprint()) {
    if (!fingerprint_->IsInitialized()) return false;
  }
  return true;
}

void MovieArchive::InternalSwap(MovieArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  movieremoteurl_.Swap(&other->movieremoteurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imported_auxiliary_movie_data_original_filename_.Swap(&other->imported_auxiliary_movie_data_original_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovieArchive, poster_image_generated_with_alpha_support_)
      + sizeof(MovieArchive::poster_image_generated_with_alpha_support_)
      - PROTOBUF_FIELD_OFFSET(MovieArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MovieArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[45]);
}

// ===================================================================

class ExteriorTextWrapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ExteriorTextWrapArchive>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_alpha_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_html_wrap(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ExteriorTextWrapArchive::ExteriorTextWrapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ExteriorTextWrapArchive)
}
ExteriorTextWrapArchive::ExteriorTextWrapArchive(const ExteriorTextWrapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_html_wrap_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_html_wrap_));
  // @@protoc_insertion_point(copy_constructor:TSD.ExteriorTextWrapArchive)
}

void ExteriorTextWrapArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_html_wrap_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_html_wrap_));
}

ExteriorTextWrapArchive::~ExteriorTextWrapArchive() {
  // @@protoc_insertion_point(destructor:TSD.ExteriorTextWrapArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExteriorTextWrapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExteriorTextWrapArchive::ArenaDtor(void* object) {
  ExteriorTextWrapArchive* _this = reinterpret_cast< ExteriorTextWrapArchive* >(object);
  (void)_this;
}
void ExteriorTextWrapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExteriorTextWrapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExteriorTextWrapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ExteriorTextWrapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_html_wrap_) -
        reinterpret_cast<char*>(&type_)) + sizeof(is_html_wrap_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExteriorTextWrapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_direction(&has_bits);
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fit_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fit_type(&has_bits);
          fit_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float margin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_margin(&has_bits);
          margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float alpha_threshold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_alpha_threshold(&has_bits);
          alpha_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool is_html_wrap = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_html_wrap(&has_bits);
          is_html_wrap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExteriorTextWrapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ExteriorTextWrapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint32 direction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_direction(), target);
  }

  // optional uint32 fit_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fit_type(), target);
  }

  // optional float margin = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_margin(), target);
  }

  // optional float alpha_threshold = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_alpha_threshold(), target);
  }

  // optional bool is_html_wrap = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_html_wrap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ExteriorTextWrapArchive)
  return target;
}

size_t ExteriorTextWrapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ExteriorTextWrapArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

    // optional uint32 direction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_direction());
    }

    // optional uint32 fit_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fit_type());
    }

    // optional float margin = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float alpha_threshold = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool is_html_wrap = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExteriorTextWrapArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ExteriorTextWrapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ExteriorTextWrapArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExteriorTextWrapArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ExteriorTextWrapArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ExteriorTextWrapArchive)
    MergeFrom(*source);
  }
}

void ExteriorTextWrapArchive::MergeFrom(const ExteriorTextWrapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ExteriorTextWrapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000004u) {
      fit_type_ = from.fit_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      margin_ = from.margin_;
    }
    if (cached_has_bits & 0x00000010u) {
      alpha_threshold_ = from.alpha_threshold_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_html_wrap_ = from.is_html_wrap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExteriorTextWrapArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ExteriorTextWrapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExteriorTextWrapArchive::CopyFrom(const ExteriorTextWrapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ExteriorTextWrapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExteriorTextWrapArchive::IsInitialized() const {
  return true;
}

void ExteriorTextWrapArchive::InternalSwap(ExteriorTextWrapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExteriorTextWrapArchive, is_html_wrap_)
      + sizeof(ExteriorTextWrapArchive::is_html_wrap_)
      - PROTOBUF_FIELD_OFFSET(ExteriorTextWrapArchive, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExteriorTextWrapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[46]);
}

// ===================================================================

class DrawableContentDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawableContentDescription>()._has_bits_);
  static void set_has_element_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_anchored_to_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_floating_above_text(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_inline_with_text(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DrawableContentDescription::DrawableContentDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawableContentDescription)
}
DrawableContentDescription::DrawableContentDescription(const DrawableContentDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&element_kind_, &from.element_kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_inline_with_text_) -
    reinterpret_cast<char*>(&element_kind_)) + sizeof(is_inline_with_text_));
  // @@protoc_insertion_point(copy_constructor:TSD.DrawableContentDescription)
}

void DrawableContentDescription::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&element_kind_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_inline_with_text_) -
    reinterpret_cast<char*>(&element_kind_)) + sizeof(is_inline_with_text_));
}

DrawableContentDescription::~DrawableContentDescription() {
  // @@protoc_insertion_point(destructor:TSD.DrawableContentDescription)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableContentDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DrawableContentDescription::ArenaDtor(void* object) {
  DrawableContentDescription* _this = reinterpret_cast< DrawableContentDescription* >(object);
  (void)_this;
}
void DrawableContentDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableContentDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DrawableContentDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawableContentDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&element_kind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_inline_with_text_) -
        reinterpret_cast<char*>(&element_kind_)) + sizeof(is_inline_with_text_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableContentDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 element_kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_element_kind(&has_bits);
          element_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_anchored_to_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_anchored_to_text(&has_bits);
          is_anchored_to_text_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_floating_above_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_floating_above_text(&has_bits);
          is_floating_above_text_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_inline_with_text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_inline_with_text(&has_bits);
          is_inline_with_text_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableContentDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawableContentDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 element_kind = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_element_kind(), target);
  }

  // optional bool is_anchored_to_text = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_anchored_to_text(), target);
  }

  // optional bool is_floating_above_text = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_floating_above_text(), target);
  }

  // optional bool is_inline_with_text = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_inline_with_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawableContentDescription)
  return target;
}

size_t DrawableContentDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawableContentDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 element_kind = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_element_kind());
    }

    // optional bool is_anchored_to_text = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_floating_above_text = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_inline_with_text = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableContentDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.DrawableContentDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableContentDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableContentDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.DrawableContentDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.DrawableContentDescription)
    MergeFrom(*source);
  }
}

void DrawableContentDescription::MergeFrom(const DrawableContentDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawableContentDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      element_kind_ = from.element_kind_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_anchored_to_text_ = from.is_anchored_to_text_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_floating_above_text_ = from.is_floating_above_text_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_inline_with_text_ = from.is_inline_with_text_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DrawableContentDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.DrawableContentDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableContentDescription::CopyFrom(const DrawableContentDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawableContentDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableContentDescription::IsInitialized() const {
  return true;
}

void DrawableContentDescription::InternalSwap(DrawableContentDescription* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawableContentDescription, is_inline_with_text_)
      + sizeof(DrawableContentDescription::is_inline_with_text_)
      - PROTOBUF_FIELD_OFFSET(DrawableContentDescription, element_kind_)>(
          reinterpret_cast<char*>(&element_kind_),
          reinterpret_cast<char*>(&other->element_kind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableContentDescription::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[47]);
}

// ===================================================================

class FreehandDrawingContentDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<FreehandDrawingContentDescription>()._has_bits_);
  static const ::TSD::DrawableContentDescription& super(const FreehandDrawingContentDescription* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_doc_wanted_spacer_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::DrawableContentDescription&
FreehandDrawingContentDescription::_Internal::super(const FreehandDrawingContentDescription* msg) {
  return *msg->super_;
}
FreehandDrawingContentDescription::FreehandDrawingContentDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.FreehandDrawingContentDescription)
}
FreehandDrawingContentDescription::FreehandDrawingContentDescription(const FreehandDrawingContentDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::DrawableContentDescription(*from.super_);
  } else {
    super_ = nullptr;
  }
  source_doc_wanted_spacer_shape_ = from.source_doc_wanted_spacer_shape_;
  // @@protoc_insertion_point(copy_constructor:TSD.FreehandDrawingContentDescription)
}

void FreehandDrawingContentDescription::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_doc_wanted_spacer_shape_) -
    reinterpret_cast<char*>(&super_)) + sizeof(source_doc_wanted_spacer_shape_));
}

FreehandDrawingContentDescription::~FreehandDrawingContentDescription() {
  // @@protoc_insertion_point(destructor:TSD.FreehandDrawingContentDescription)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FreehandDrawingContentDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void FreehandDrawingContentDescription::ArenaDtor(void* object) {
  FreehandDrawingContentDescription* _this = reinterpret_cast< FreehandDrawingContentDescription* >(object);
  (void)_this;
}
void FreehandDrawingContentDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FreehandDrawingContentDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FreehandDrawingContentDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.FreehandDrawingContentDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  source_doc_wanted_spacer_shape_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreehandDrawingContentDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.DrawableContentDescription super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool source_doc_wanted_spacer_shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_source_doc_wanted_spacer_shape(&has_bits);
          source_doc_wanted_spacer_shape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreehandDrawingContentDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.FreehandDrawingContentDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.DrawableContentDescription super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional bool source_doc_wanted_spacer_shape = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_source_doc_wanted_spacer_shape(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.FreehandDrawingContentDescription)
  return target;
}

size_t FreehandDrawingContentDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.FreehandDrawingContentDescription)
  size_t total_size = 0;

  // required .TSD.DrawableContentDescription super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool source_doc_wanted_spacer_shape = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FreehandDrawingContentDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.FreehandDrawingContentDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const FreehandDrawingContentDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FreehandDrawingContentDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.FreehandDrawingContentDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.FreehandDrawingContentDescription)
    MergeFrom(*source);
  }
}

void FreehandDrawingContentDescription::MergeFrom(const FreehandDrawingContentDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.FreehandDrawingContentDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::DrawableContentDescription::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      source_doc_wanted_spacer_shape_ = from.source_doc_wanted_spacer_shape_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FreehandDrawingContentDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.FreehandDrawingContentDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreehandDrawingContentDescription::CopyFrom(const FreehandDrawingContentDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.FreehandDrawingContentDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreehandDrawingContentDescription::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FreehandDrawingContentDescription::InternalSwap(FreehandDrawingContentDescription* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FreehandDrawingContentDescription, source_doc_wanted_spacer_shape_)
      + sizeof(FreehandDrawingContentDescription::source_doc_wanted_spacer_shape_)
      - PROTOBUF_FIELD_OFFSET(FreehandDrawingContentDescription, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FreehandDrawingContentDescription::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[48]);
}

// ===================================================================

class FreehandDrawingToolkitUIState::_Internal {
 public:
  using HasBits = decltype(std::declval<FreehandDrawingToolkitUIState>()._has_bits_);
  static const ::TSP::Color& current_color(const FreehandDrawingToolkitUIState* msg);
  static void set_has_current_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_most_recent_restorable_tool_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pen_tool_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pen_tool_unscaled_width(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pencil_tool_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_pencil_tool_unscaled_width(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_crayon_tool_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_crayon_tool_unscaled_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fill_tool_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_eraser_tool_scaled_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_eraser_tool_erases_whole_objects(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Color& pen_tool_color(const FreehandDrawingToolkitUIState* msg);
  static void set_has_pen_tool_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Color& pencil_tool_color(const FreehandDrawingToolkitUIState* msg);
  static void set_has_pencil_tool_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Color& crayon_tool_color(const FreehandDrawingToolkitUIState* msg);
  static void set_has_crayon_tool_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Color& fill_tool_color(const FreehandDrawingToolkitUIState* msg);
  static void set_has_fill_tool_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSP::Color&
FreehandDrawingToolkitUIState::_Internal::current_color(const FreehandDrawingToolkitUIState* msg) {
  return *msg->current_color_;
}
const ::TSP::Color&
FreehandDrawingToolkitUIState::_Internal::pen_tool_color(const FreehandDrawingToolkitUIState* msg) {
  return *msg->pen_tool_color_;
}
const ::TSP::Color&
FreehandDrawingToolkitUIState::_Internal::pencil_tool_color(const FreehandDrawingToolkitUIState* msg) {
  return *msg->pencil_tool_color_;
}
const ::TSP::Color&
FreehandDrawingToolkitUIState::_Internal::crayon_tool_color(const FreehandDrawingToolkitUIState* msg) {
  return *msg->crayon_tool_color_;
}
const ::TSP::Color&
FreehandDrawingToolkitUIState::_Internal::fill_tool_color(const FreehandDrawingToolkitUIState* msg) {
  return *msg->fill_tool_color_;
}
void FreehandDrawingToolkitUIState::clear_current_color() {
  if (current_color_ != nullptr) current_color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void FreehandDrawingToolkitUIState::clear_pen_tool_color() {
  if (pen_tool_color_ != nullptr) pen_tool_color_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void FreehandDrawingToolkitUIState::clear_pencil_tool_color() {
  if (pencil_tool_color_ != nullptr) pencil_tool_color_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void FreehandDrawingToolkitUIState::clear_crayon_tool_color() {
  if (crayon_tool_color_ != nullptr) crayon_tool_color_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void FreehandDrawingToolkitUIState::clear_fill_tool_color() {
  if (fill_tool_color_ != nullptr) fill_tool_color_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
FreehandDrawingToolkitUIState::FreehandDrawingToolkitUIState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.FreehandDrawingToolkitUIState)
}
FreehandDrawingToolkitUIState::FreehandDrawingToolkitUIState(const FreehandDrawingToolkitUIState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_current_color()) {
    current_color_ = new ::TSP::Color(*from.current_color_);
  } else {
    current_color_ = nullptr;
  }
  if (from._internal_has_pen_tool_color()) {
    pen_tool_color_ = new ::TSP::Color(*from.pen_tool_color_);
  } else {
    pen_tool_color_ = nullptr;
  }
  if (from._internal_has_pencil_tool_color()) {
    pencil_tool_color_ = new ::TSP::Color(*from.pencil_tool_color_);
  } else {
    pencil_tool_color_ = nullptr;
  }
  if (from._internal_has_crayon_tool_color()) {
    crayon_tool_color_ = new ::TSP::Color(*from.crayon_tool_color_);
  } else {
    crayon_tool_color_ = nullptr;
  }
  if (from._internal_has_fill_tool_color()) {
    fill_tool_color_ = new ::TSP::Color(*from.fill_tool_color_);
  } else {
    fill_tool_color_ = nullptr;
  }
  ::memcpy(&most_recent_restorable_tool_type_, &from.most_recent_restorable_tool_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&eraser_tool_erases_whole_objects_) -
    reinterpret_cast<char*>(&most_recent_restorable_tool_type_)) + sizeof(eraser_tool_erases_whole_objects_));
  // @@protoc_insertion_point(copy_constructor:TSD.FreehandDrawingToolkitUIState)
}

void FreehandDrawingToolkitUIState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&eraser_tool_erases_whole_objects_) -
    reinterpret_cast<char*>(&current_color_)) + sizeof(eraser_tool_erases_whole_objects_));
}

FreehandDrawingToolkitUIState::~FreehandDrawingToolkitUIState() {
  // @@protoc_insertion_point(destructor:TSD.FreehandDrawingToolkitUIState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FreehandDrawingToolkitUIState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete current_color_;
  if (this != internal_default_instance()) delete pen_tool_color_;
  if (this != internal_default_instance()) delete pencil_tool_color_;
  if (this != internal_default_instance()) delete crayon_tool_color_;
  if (this != internal_default_instance()) delete fill_tool_color_;
}

void FreehandDrawingToolkitUIState::ArenaDtor(void* object) {
  FreehandDrawingToolkitUIState* _this = reinterpret_cast< FreehandDrawingToolkitUIState* >(object);
  (void)_this;
}
void FreehandDrawingToolkitUIState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FreehandDrawingToolkitUIState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FreehandDrawingToolkitUIState::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.FreehandDrawingToolkitUIState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(current_color_ != nullptr);
      current_color_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pen_tool_color_ != nullptr);
      pen_tool_color_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pencil_tool_color_ != nullptr);
      pencil_tool_color_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(crayon_tool_color_ != nullptr);
      crayon_tool_color_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(fill_tool_color_ != nullptr);
      fill_tool_color_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&most_recent_restorable_tool_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pen_tool_unscaled_width_) -
        reinterpret_cast<char*>(&most_recent_restorable_tool_type_)) + sizeof(pen_tool_unscaled_width_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&pencil_tool_opacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&eraser_tool_erases_whole_objects_) -
        reinterpret_cast<char*>(&pencil_tool_opacity_)) + sizeof(eraser_tool_erases_whole_objects_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreehandDrawingToolkitUIState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Color current_color = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSD.FreehandDrawingToolkitUIState.FreehandDrawingToolType most_recent_restorable_tool_type = 2 [default = Pen];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::FreehandDrawingToolkitUIState_FreehandDrawingToolType_IsValid(val))) {
            _internal_set_most_recent_restorable_tool_type(static_cast<::TSD::FreehandDrawingToolkitUIState_FreehandDrawingToolType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float pen_tool_opacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_pen_tool_opacity(&has_bits);
          pen_tool_opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pen_tool_unscaled_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_pen_tool_unscaled_width(&has_bits);
          pen_tool_unscaled_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pencil_tool_opacity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_pencil_tool_opacity(&has_bits);
          pencil_tool_opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pencil_tool_unscaled_width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_pencil_tool_unscaled_width(&has_bits);
          pencil_tool_unscaled_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float crayon_tool_opacity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_crayon_tool_opacity(&has_bits);
          crayon_tool_opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float crayon_tool_unscaled_width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_crayon_tool_unscaled_width(&has_bits);
          crayon_tool_unscaled_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fill_tool_opacity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_fill_tool_opacity(&has_bits);
          fill_tool_opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float eraser_tool_scaled_width = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_eraser_tool_scaled_width(&has_bits);
          eraser_tool_scaled_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool eraser_tool_erases_whole_objects = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_eraser_tool_erases_whole_objects(&has_bits);
          eraser_tool_erases_whole_objects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color pen_tool_color = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_pen_tool_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color pencil_tool_color = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_pencil_tool_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color crayon_tool_color = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_crayon_tool_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color fill_tool_color = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill_tool_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreehandDrawingToolkitUIState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.FreehandDrawingToolkitUIState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Color current_color = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::current_color(this), target, stream);
  }

  // optional .TSD.FreehandDrawingToolkitUIState.FreehandDrawingToolType most_recent_restorable_tool_type = 2 [default = Pen];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_most_recent_restorable_tool_type(), target);
  }

  // optional float pen_tool_opacity = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pen_tool_opacity(), target);
  }

  // optional float pen_tool_unscaled_width = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_pen_tool_unscaled_width(), target);
  }

  // optional float pencil_tool_opacity = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_pencil_tool_opacity(), target);
  }

  // optional float pencil_tool_unscaled_width = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_pencil_tool_unscaled_width(), target);
  }

  // optional float crayon_tool_opacity = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_crayon_tool_opacity(), target);
  }

  // optional float crayon_tool_unscaled_width = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_crayon_tool_unscaled_width(), target);
  }

  // optional float fill_tool_opacity = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_fill_tool_opacity(), target);
  }

  // optional float eraser_tool_scaled_width = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_eraser_tool_scaled_width(), target);
  }

  // optional bool eraser_tool_erases_whole_objects = 11;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_eraser_tool_erases_whole_objects(), target);
  }

  // optional .TSP.Color pen_tool_color = 12;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::pen_tool_color(this), target, stream);
  }

  // optional .TSP.Color pencil_tool_color = 13;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::pencil_tool_color(this), target, stream);
  }

  // optional .TSP.Color crayon_tool_color = 14;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::crayon_tool_color(this), target, stream);
  }

  // optional .TSP.Color fill_tool_color = 15;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::fill_tool_color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.FreehandDrawingToolkitUIState)
  return target;
}

size_t FreehandDrawingToolkitUIState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.FreehandDrawingToolkitUIState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Color current_color = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_color_);
    }

    // optional .TSP.Color pen_tool_color = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pen_tool_color_);
    }

    // optional .TSP.Color pencil_tool_color = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pencil_tool_color_);
    }

    // optional .TSP.Color crayon_tool_color = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *crayon_tool_color_);
    }

    // optional .TSP.Color fill_tool_color = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fill_tool_color_);
    }

    // optional .TSD.FreehandDrawingToolkitUIState.FreehandDrawingToolType most_recent_restorable_tool_type = 2 [default = Pen];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_most_recent_restorable_tool_type());
    }

    // optional float pen_tool_opacity = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float pen_tool_unscaled_width = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional float pencil_tool_opacity = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float pencil_tool_unscaled_width = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float crayon_tool_opacity = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float crayon_tool_unscaled_width = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float fill_tool_opacity = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float eraser_tool_scaled_width = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional bool eraser_tool_erases_whole_objects = 11;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FreehandDrawingToolkitUIState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.FreehandDrawingToolkitUIState)
  GOOGLE_DCHECK_NE(&from, this);
  const FreehandDrawingToolkitUIState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FreehandDrawingToolkitUIState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.FreehandDrawingToolkitUIState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.FreehandDrawingToolkitUIState)
    MergeFrom(*source);
  }
}

void FreehandDrawingToolkitUIState::MergeFrom(const FreehandDrawingToolkitUIState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.FreehandDrawingToolkitUIState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_current_color()->::TSP::Color::MergeFrom(from._internal_current_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pen_tool_color()->::TSP::Color::MergeFrom(from._internal_pen_tool_color());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_pencil_tool_color()->::TSP::Color::MergeFrom(from._internal_pencil_tool_color());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_crayon_tool_color()->::TSP::Color::MergeFrom(from._internal_crayon_tool_color());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_fill_tool_color()->::TSP::Color::MergeFrom(from._internal_fill_tool_color());
    }
    if (cached_has_bits & 0x00000020u) {
      most_recent_restorable_tool_type_ = from.most_recent_restorable_tool_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      pen_tool_opacity_ = from.pen_tool_opacity_;
    }
    if (cached_has_bits & 0x00000080u) {
      pen_tool_unscaled_width_ = from.pen_tool_unscaled_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      pencil_tool_opacity_ = from.pencil_tool_opacity_;
    }
    if (cached_has_bits & 0x00000200u) {
      pencil_tool_unscaled_width_ = from.pencil_tool_unscaled_width_;
    }
    if (cached_has_bits & 0x00000400u) {
      crayon_tool_opacity_ = from.crayon_tool_opacity_;
    }
    if (cached_has_bits & 0x00000800u) {
      crayon_tool_unscaled_width_ = from.crayon_tool_unscaled_width_;
    }
    if (cached_has_bits & 0x00001000u) {
      fill_tool_opacity_ = from.fill_tool_opacity_;
    }
    if (cached_has_bits & 0x00002000u) {
      eraser_tool_scaled_width_ = from.eraser_tool_scaled_width_;
    }
    if (cached_has_bits & 0x00004000u) {
      eraser_tool_erases_whole_objects_ = from.eraser_tool_erases_whole_objects_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FreehandDrawingToolkitUIState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.FreehandDrawingToolkitUIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreehandDrawingToolkitUIState::CopyFrom(const FreehandDrawingToolkitUIState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.FreehandDrawingToolkitUIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreehandDrawingToolkitUIState::IsInitialized() const {
  if (_internal_has_current_color()) {
    if (!current_color_->IsInitialized()) return false;
  }
  if (_internal_has_pen_tool_color()) {
    if (!pen_tool_color_->IsInitialized()) return false;
  }
  if (_internal_has_pencil_tool_color()) {
    if (!pencil_tool_color_->IsInitialized()) return false;
  }
  if (_internal_has_crayon_tool_color()) {
    if (!crayon_tool_color_->IsInitialized()) return false;
  }
  if (_internal_has_fill_tool_color()) {
    if (!fill_tool_color_->IsInitialized()) return false;
  }
  return true;
}

void FreehandDrawingToolkitUIState::InternalSwap(FreehandDrawingToolkitUIState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FreehandDrawingToolkitUIState, eraser_tool_erases_whole_objects_)
      + sizeof(FreehandDrawingToolkitUIState::eraser_tool_erases_whole_objects_)
      - PROTOBUF_FIELD_OFFSET(FreehandDrawingToolkitUIState, current_color_)>(
          reinterpret_cast<char*>(&current_color_),
          reinterpret_cast<char*>(&other->current_color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FreehandDrawingToolkitUIState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[49]);
}

// ===================================================================

class StandinCaptionArchive::_Internal {
 public:
};

StandinCaptionArchive::StandinCaptionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.StandinCaptionArchive)
}
StandinCaptionArchive::StandinCaptionArchive(const StandinCaptionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSD.StandinCaptionArchive)
}

void StandinCaptionArchive::SharedCtor() {
}

StandinCaptionArchive::~StandinCaptionArchive() {
  // @@protoc_insertion_point(destructor:TSD.StandinCaptionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StandinCaptionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StandinCaptionArchive::ArenaDtor(void* object) {
  StandinCaptionArchive* _this = reinterpret_cast< StandinCaptionArchive* >(object);
  (void)_this;
}
void StandinCaptionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StandinCaptionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StandinCaptionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.StandinCaptionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StandinCaptionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StandinCaptionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.StandinCaptionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.StandinCaptionArchive)
  return target;
}

size_t StandinCaptionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.StandinCaptionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StandinCaptionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.StandinCaptionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const StandinCaptionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StandinCaptionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.StandinCaptionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.StandinCaptionArchive)
    MergeFrom(*source);
  }
}

void StandinCaptionArchive::MergeFrom(const StandinCaptionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.StandinCaptionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StandinCaptionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.StandinCaptionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StandinCaptionArchive::CopyFrom(const StandinCaptionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.StandinCaptionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StandinCaptionArchive::IsInitialized() const {
  return true;
}

void StandinCaptionArchive::InternalSwap(StandinCaptionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StandinCaptionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[50]);
}

// ===================================================================

class GuideArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GuideArchive>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dynamic(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_infinite(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

GuideArchive::GuideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.GuideArchive)
}
GuideArchive::GuideArchive(const GuideArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&infinite_) -
    reinterpret_cast<char*>(&type_)) + sizeof(infinite_));
  // @@protoc_insertion_point(copy_constructor:TSD.GuideArchive)
}

void GuideArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&infinite_) -
    reinterpret_cast<char*>(&type_)) + sizeof(infinite_));
}

GuideArchive::~GuideArchive() {
  // @@protoc_insertion_point(destructor:TSD.GuideArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GuideArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GuideArchive::ArenaDtor(void* object) {
  GuideArchive* _this = reinterpret_cast< GuideArchive* >(object);
  (void)_this;
}
void GuideArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GuideArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GuideArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.GuideArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&infinite_) -
        reinterpret_cast<char*>(&type_)) + sizeof(infinite_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuideArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.GuideArchive.GuideType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::GuideArchive_GuideType_IsValid(val))) {
            _internal_set_type(static_cast<::TSD::GuideArchive_GuideType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_start(&has_bits);
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_end(&has_bits);
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool dynamic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_dynamic(&has_bits);
          dynamic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool infinite = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_infinite(&has_bits);
          infinite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuideArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.GuideArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.GuideArchive.GuideType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional float offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_offset(), target);
  }

  // optional float start = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_start(), target);
  }

  // optional float end = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_end(), target);
  }

  // optional bool dynamic = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_dynamic(), target);
  }

  // optional bool infinite = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_infinite(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.GuideArchive)
  return target;
}

size_t GuideArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.GuideArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TSD.GuideArchive.GuideType type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional float offset = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float start = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float end = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool dynamic = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool infinite = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuideArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.GuideArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const GuideArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuideArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.GuideArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.GuideArchive)
    MergeFrom(*source);
  }
}

void GuideArchive::MergeFrom(const GuideArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.GuideArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000008u) {
      end_ = from.end_;
    }
    if (cached_has_bits & 0x00000010u) {
      dynamic_ = from.dynamic_;
    }
    if (cached_has_bits & 0x00000020u) {
      infinite_ = from.infinite_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GuideArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.GuideArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideArchive::CopyFrom(const GuideArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.GuideArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideArchive::IsInitialized() const {
  return true;
}

void GuideArchive::InternalSwap(GuideArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GuideArchive, infinite_)
      + sizeof(GuideArchive::infinite_)
      - PROTOBUF_FIELD_OFFSET(GuideArchive, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GuideArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[51]);
}

// ===================================================================

class UserDefinedGuideArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UserDefinedGuideArchive>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UserDefinedGuideArchive::UserDefinedGuideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.UserDefinedGuideArchive)
}
UserDefinedGuideArchive::UserDefinedGuideArchive(const UserDefinedGuideArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&type_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:TSD.UserDefinedGuideArchive)
}

void UserDefinedGuideArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&type_)) + sizeof(position_));
}

UserDefinedGuideArchive::~UserDefinedGuideArchive() {
  // @@protoc_insertion_point(destructor:TSD.UserDefinedGuideArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserDefinedGuideArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserDefinedGuideArchive::ArenaDtor(void* object) {
  UserDefinedGuideArchive* _this = reinterpret_cast< UserDefinedGuideArchive* >(object);
  (void)_this;
}
void UserDefinedGuideArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserDefinedGuideArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserDefinedGuideArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.UserDefinedGuideArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_) -
        reinterpret_cast<char*>(&type_)) + sizeof(position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserDefinedGuideArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.UserDefinedGuideArchive.GuideType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::UserDefinedGuideArchive_GuideType_IsValid(val))) {
            _internal_set_type(static_cast<::TSD::UserDefinedGuideArchive_GuideType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_position(&has_bits);
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserDefinedGuideArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.UserDefinedGuideArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSD.UserDefinedGuideArchive.GuideType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional float position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.UserDefinedGuideArchive)
  return target;
}

size_t UserDefinedGuideArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.UserDefinedGuideArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSD.UserDefinedGuideArchive.GuideType type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional float position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDefinedGuideArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.UserDefinedGuideArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDefinedGuideArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserDefinedGuideArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.UserDefinedGuideArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.UserDefinedGuideArchive)
    MergeFrom(*source);
  }
}

void UserDefinedGuideArchive::MergeFrom(const UserDefinedGuideArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.UserDefinedGuideArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserDefinedGuideArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.UserDefinedGuideArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDefinedGuideArchive::CopyFrom(const UserDefinedGuideArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.UserDefinedGuideArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDefinedGuideArchive::IsInitialized() const {
  return true;
}

void UserDefinedGuideArchive::InternalSwap(UserDefinedGuideArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserDefinedGuideArchive, position_)
      + sizeof(UserDefinedGuideArchive::position_)
      - PROTOBUF_FIELD_OFFSET(UserDefinedGuideArchive, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserDefinedGuideArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[52]);
}

// ===================================================================

class GuideStorageArchive::_Internal {
 public:
};

GuideStorageArchive::GuideStorageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  userdefinedguides_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.GuideStorageArchive)
}
GuideStorageArchive::GuideStorageArchive(const GuideStorageArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      userdefinedguides_(from.userdefinedguides_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSD.GuideStorageArchive)
}

void GuideStorageArchive::SharedCtor() {
}

GuideStorageArchive::~GuideStorageArchive() {
  // @@protoc_insertion_point(destructor:TSD.GuideStorageArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GuideStorageArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GuideStorageArchive::ArenaDtor(void* object) {
  GuideStorageArchive* _this = reinterpret_cast< GuideStorageArchive* >(object);
  (void)_this;
}
void GuideStorageArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GuideStorageArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GuideStorageArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.GuideStorageArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userdefinedguides_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuideStorageArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSD.UserDefinedGuideArchive userDefinedGuides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_userdefinedguides(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuideStorageArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.GuideStorageArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSD.UserDefinedGuideArchive userDefinedGuides = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_userdefinedguides_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_userdefinedguides(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.GuideStorageArchive)
  return target;
}

size_t GuideStorageArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.GuideStorageArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSD.UserDefinedGuideArchive userDefinedGuides = 1;
  total_size += 1UL * this->_internal_userdefinedguides_size();
  for (const auto& msg : this->userdefinedguides_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuideStorageArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.GuideStorageArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const GuideStorageArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuideStorageArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.GuideStorageArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.GuideStorageArchive)
    MergeFrom(*source);
  }
}

void GuideStorageArchive::MergeFrom(const GuideStorageArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.GuideStorageArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  userdefinedguides_.MergeFrom(from.userdefinedguides_);
}

void GuideStorageArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.GuideStorageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideStorageArchive::CopyFrom(const GuideStorageArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.GuideStorageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideStorageArchive::IsInitialized() const {
  return true;
}

void GuideStorageArchive::InternalSwap(GuideStorageArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  userdefinedguides_.InternalSwap(&other->userdefinedguides_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuideStorageArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[53]);
}

// ===================================================================

class CanvasSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CanvasSelectionArchive>()._has_bits_);
  static const ::TSP::Reference& container(const CanvasSelectionArchive* msg);
  static void set_has_container(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
CanvasSelectionArchive::_Internal::container(const CanvasSelectionArchive* msg) {
  return *msg->container_;
}
void CanvasSelectionArchive::clear_infos() {
  infos_.Clear();
}
void CanvasSelectionArchive::clear_non_interactive_infos() {
  non_interactive_infos_.Clear();
}
void CanvasSelectionArchive::clear_container() {
  if (container_ != nullptr) container_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CanvasSelectionArchive::CanvasSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  infos_(arena),
  non_interactive_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.CanvasSelectionArchive)
}
CanvasSelectionArchive::CanvasSelectionArchive(const CanvasSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      infos_(from.infos_),
      non_interactive_infos_(from.non_interactive_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_container()) {
    container_ = new ::TSP::Reference(*from.container_);
  } else {
    container_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.CanvasSelectionArchive)
}

void CanvasSelectionArchive::SharedCtor() {
container_ = nullptr;
}

CanvasSelectionArchive::~CanvasSelectionArchive() {
  // @@protoc_insertion_point(destructor:TSD.CanvasSelectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CanvasSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete container_;
}

void CanvasSelectionArchive::ArenaDtor(void* object) {
  CanvasSelectionArchive* _this = reinterpret_cast< CanvasSelectionArchive* >(object);
  (void)_this;
}
void CanvasSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CanvasSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CanvasSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.CanvasSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  non_interactive_infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(container_ != nullptr);
    container_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanvasSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference container = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_container(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference non_interactive_infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_non_interactive_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CanvasSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.CanvasSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_infos(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference container = 2 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::container(this), target, stream);
  }

  // repeated .TSP.Reference non_interactive_infos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_non_interactive_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_non_interactive_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.CanvasSelectionArchive)
  return target;
}

size_t CanvasSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.CanvasSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference non_interactive_infos = 3;
  total_size += 1UL * this->_internal_non_interactive_infos_size();
  for (const auto& msg : this->non_interactive_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference container = 2 [deprecated = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *container_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CanvasSelectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.CanvasSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CanvasSelectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CanvasSelectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.CanvasSelectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.CanvasSelectionArchive)
    MergeFrom(*source);
  }
}

void CanvasSelectionArchive::MergeFrom(const CanvasSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.CanvasSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  non_interactive_infos_.MergeFrom(from.non_interactive_infos_);
  if (from._internal_has_container()) {
    _internal_mutable_container()->::TSP::Reference::MergeFrom(from._internal_container());
  }
}

void CanvasSelectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.CanvasSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanvasSelectionArchive::CopyFrom(const CanvasSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.CanvasSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanvasSelectionArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(infos_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(non_interactive_infos_)) return false;
  if (_internal_has_container()) {
    if (!container_->IsInitialized()) return false;
  }
  return true;
}

void CanvasSelectionArchive::InternalSwap(CanvasSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  infos_.InternalSwap(&other->infos_);
  non_interactive_infos_.InternalSwap(&other->non_interactive_infos_);
  swap(container_, other->container_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CanvasSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[54]);
}

// ===================================================================

class DrawableSelectionArchive::_Internal {
 public:
};

void DrawableSelectionArchive::clear_infos() {
  infos_.Clear();
}
void DrawableSelectionArchive::clear_non_interactive_infos() {
  non_interactive_infos_.Clear();
}
DrawableSelectionArchive::DrawableSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  infos_(arena),
  non_interactive_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawableSelectionArchive)
}
DrawableSelectionArchive::DrawableSelectionArchive(const DrawableSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      infos_(from.infos_),
      non_interactive_infos_(from.non_interactive_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSD.DrawableSelectionArchive)
}

void DrawableSelectionArchive::SharedCtor() {
}

DrawableSelectionArchive::~DrawableSelectionArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawableSelectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DrawableSelectionArchive::ArenaDtor(void* object) {
  DrawableSelectionArchive* _this = reinterpret_cast< DrawableSelectionArchive* >(object);
  (void)_this;
}
void DrawableSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DrawableSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawableSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  non_interactive_infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference non_interactive_infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_non_interactive_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawableSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_infos(i), target, stream);
  }

  // repeated .TSP.Reference non_interactive_infos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_non_interactive_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_non_interactive_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawableSelectionArchive)
  return target;
}

size_t DrawableSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawableSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference infos = 2;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference non_interactive_infos = 3;
  total_size += 1UL * this->_internal_non_interactive_infos_size();
  for (const auto& msg : this->non_interactive_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableSelectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.DrawableSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableSelectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableSelectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.DrawableSelectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.DrawableSelectionArchive)
    MergeFrom(*source);
  }
}

void DrawableSelectionArchive::MergeFrom(const DrawableSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawableSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  non_interactive_infos_.MergeFrom(from.non_interactive_infos_);
}

void DrawableSelectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.DrawableSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableSelectionArchive::CopyFrom(const DrawableSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawableSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableSelectionArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(infos_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(non_interactive_infos_)) return false;
  return true;
}

void DrawableSelectionArchive::InternalSwap(DrawableSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
  non_interactive_infos_.InternalSwap(&other->non_interactive_infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[55]);
}

// ===================================================================

class GroupSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupSelectionArchive>()._has_bits_);
  static const ::TSD::DrawableSelectionArchive& super(const GroupSelectionArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_selected_infos_in_non_group_container(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::DrawableSelectionArchive&
GroupSelectionArchive::_Internal::super(const GroupSelectionArchive* msg) {
  return *msg->super_;
}
GroupSelectionArchive::GroupSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.GroupSelectionArchive)
}
GroupSelectionArchive::GroupSelectionArchive(const GroupSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSD::DrawableSelectionArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  has_selected_infos_in_non_group_container_ = from.has_selected_infos_in_non_group_container_;
  // @@protoc_insertion_point(copy_constructor:TSD.GroupSelectionArchive)
}

void GroupSelectionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_selected_infos_in_non_group_container_) -
    reinterpret_cast<char*>(&super_)) + sizeof(has_selected_infos_in_non_group_container_));
}

GroupSelectionArchive::~GroupSelectionArchive() {
  // @@protoc_insertion_point(destructor:TSD.GroupSelectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void GroupSelectionArchive::ArenaDtor(void* object) {
  GroupSelectionArchive* _this = reinterpret_cast< GroupSelectionArchive* >(object);
  (void)_this;
}
void GroupSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroupSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.GroupSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  has_selected_infos_in_non_group_container_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.DrawableSelectionArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_selected_infos_in_non_group_container = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_has_selected_infos_in_non_group_container(&has_bits);
          has_selected_infos_in_non_group_container_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.GroupSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSD.DrawableSelectionArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional bool has_selected_infos_in_non_group_container = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_has_selected_infos_in_non_group_container(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.GroupSelectionArchive)
  return target;
}

size_t GroupSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.GroupSelectionArchive)
  size_t total_size = 0;

  // required .TSD.DrawableSelectionArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool has_selected_infos_in_non_group_container = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupSelectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.GroupSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupSelectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupSelectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.GroupSelectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.GroupSelectionArchive)
    MergeFrom(*source);
  }
}

void GroupSelectionArchive::MergeFrom(const GroupSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.GroupSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSD::DrawableSelectionArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      has_selected_infos_in_non_group_container_ = from.has_selected_infos_in_non_group_container_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GroupSelectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.GroupSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupSelectionArchive::CopyFrom(const GroupSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.GroupSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupSelectionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void GroupSelectionArchive::InternalSwap(GroupSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupSelectionArchive, has_selected_infos_in_non_group_container_)
      + sizeof(GroupSelectionArchive::has_selected_infos_in_non_group_container_)
      - PROTOBUF_FIELD_OFFSET(GroupSelectionArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[56]);
}

// ===================================================================

class PathSelectionArchive::_Internal {
 public:
};

PathSelectionArchive::PathSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.PathSelectionArchive)
}
PathSelectionArchive::PathSelectionArchive(const PathSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSD.PathSelectionArchive)
}

void PathSelectionArchive::SharedCtor() {
}

PathSelectionArchive::~PathSelectionArchive() {
  // @@protoc_insertion_point(destructor:TSD.PathSelectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PathSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PathSelectionArchive::ArenaDtor(void* object) {
  PathSelectionArchive* _this = reinterpret_cast< PathSelectionArchive* >(object);
  (void)_this;
}
void PathSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PathSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.PathSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.PathSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.PathSelectionArchive)
  return target;
}

size_t PathSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.PathSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathSelectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.PathSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PathSelectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathSelectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.PathSelectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.PathSelectionArchive)
    MergeFrom(*source);
  }
}

void PathSelectionArchive::MergeFrom(const PathSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.PathSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PathSelectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.PathSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathSelectionArchive::CopyFrom(const PathSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.PathSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathSelectionArchive::IsInitialized() const {
  return true;
}

void PathSelectionArchive::InternalSwap(PathSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[57]);
}

// ===================================================================

class InfoHyperlinkSelectionArchive::_Internal {
 public:
};

InfoHyperlinkSelectionArchive::InfoHyperlinkSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.InfoHyperlinkSelectionArchive)
}
InfoHyperlinkSelectionArchive::InfoHyperlinkSelectionArchive(const InfoHyperlinkSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSD.InfoHyperlinkSelectionArchive)
}

void InfoHyperlinkSelectionArchive::SharedCtor() {
}

InfoHyperlinkSelectionArchive::~InfoHyperlinkSelectionArchive() {
  // @@protoc_insertion_point(destructor:TSD.InfoHyperlinkSelectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InfoHyperlinkSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InfoHyperlinkSelectionArchive::ArenaDtor(void* object) {
  InfoHyperlinkSelectionArchive* _this = reinterpret_cast< InfoHyperlinkSelectionArchive* >(object);
  (void)_this;
}
void InfoHyperlinkSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InfoHyperlinkSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InfoHyperlinkSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.InfoHyperlinkSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoHyperlinkSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InfoHyperlinkSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.InfoHyperlinkSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.InfoHyperlinkSelectionArchive)
  return target;
}

size_t InfoHyperlinkSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.InfoHyperlinkSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoHyperlinkSelectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.InfoHyperlinkSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoHyperlinkSelectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InfoHyperlinkSelectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.InfoHyperlinkSelectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.InfoHyperlinkSelectionArchive)
    MergeFrom(*source);
  }
}

void InfoHyperlinkSelectionArchive::MergeFrom(const InfoHyperlinkSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.InfoHyperlinkSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void InfoHyperlinkSelectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.InfoHyperlinkSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoHyperlinkSelectionArchive::CopyFrom(const InfoHyperlinkSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.InfoHyperlinkSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoHyperlinkSelectionArchive::IsInitialized() const {
  return true;
}

void InfoHyperlinkSelectionArchive::InternalSwap(InfoHyperlinkSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoHyperlinkSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[58]);
}

// ===================================================================

class CommentStorageArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommentStorageArchive>()._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Date& creation_date(const CommentStorageArchive* msg);
  static void set_has_creation_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& author(const CommentStorageArchive* msg);
  static void set_has_author(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Date&
CommentStorageArchive::_Internal::creation_date(const CommentStorageArchive* msg) {
  return *msg->creation_date_;
}
const ::TSP::Reference&
CommentStorageArchive::_Internal::author(const CommentStorageArchive* msg) {
  return *msg->author_;
}
void CommentStorageArchive::clear_creation_date() {
  if (creation_date_ != nullptr) creation_date_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CommentStorageArchive::clear_author() {
  if (author_ != nullptr) author_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommentStorageArchive::clear_replies() {
  replies_.Clear();
}
CommentStorageArchive::CommentStorageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  replies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.CommentStorageArchive)
}
CommentStorageArchive::CommentStorageArchive(const CommentStorageArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      replies_(from.replies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  if (from._internal_has_creation_date()) {
    creation_date_ = new ::TSP::Date(*from.creation_date_);
  } else {
    creation_date_ = nullptr;
  }
  if (from._internal_has_author()) {
    author_ = new ::TSP::Reference(*from.author_);
  } else {
    author_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.CommentStorageArchive)
}

void CommentStorageArchive::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&creation_date_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&author_) -
    reinterpret_cast<char*>(&creation_date_)) + sizeof(author_));
}

CommentStorageArchive::~CommentStorageArchive() {
  // @@protoc_insertion_point(destructor:TSD.CommentStorageArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommentStorageArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete creation_date_;
  if (this != internal_default_instance()) delete author_;
}

void CommentStorageArchive::ArenaDtor(void* object) {
  CommentStorageArchive* _this = reinterpret_cast< CommentStorageArchive* >(object);
  (void)_this;
}
void CommentStorageArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommentStorageArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommentStorageArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.CommentStorageArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replies_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(creation_date_ != nullptr);
      creation_date_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(author_ != nullptr);
      author_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommentStorageArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.CommentStorageArchive.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Date creation_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_creation_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference author = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_author(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference replies = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_replies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommentStorageArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.CommentStorageArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.CommentStorageArchive.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // optional .TSP.Date creation_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::creation_date(this), target, stream);
  }

  // optional .TSP.Reference author = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::author(this), target, stream);
  }

  // repeated .TSP.Reference replies = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_replies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_replies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.CommentStorageArchive)
  return target;
}

size_t CommentStorageArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.CommentStorageArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference replies = 4;
  total_size += 1UL * this->_internal_replies_size();
  for (const auto& msg : this->replies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string text = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional .TSP.Date creation_date = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *creation_date_);
    }

    // optional .TSP.Reference author = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *author_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommentStorageArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.CommentStorageArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CommentStorageArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommentStorageArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.CommentStorageArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.CommentStorageArchive)
    MergeFrom(*source);
  }
}

void CommentStorageArchive::MergeFrom(const CommentStorageArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.CommentStorageArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  replies_.MergeFrom(from.replies_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_creation_date()->::TSP::Date::MergeFrom(from._internal_creation_date());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_author()->::TSP::Reference::MergeFrom(from._internal_author());
    }
  }
}

void CommentStorageArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.CommentStorageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentStorageArchive::CopyFrom(const CommentStorageArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.CommentStorageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentStorageArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(replies_)) return false;
  if (_internal_has_creation_date()) {
    if (!creation_date_->IsInitialized()) return false;
  }
  if (_internal_has_author()) {
    if (!author_->IsInitialized()) return false;
  }
  return true;
}

void CommentStorageArchive::InternalSwap(CommentStorageArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  replies_.InternalSwap(&other->replies_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommentStorageArchive, author_)
      + sizeof(CommentStorageArchive::author_)
      - PROTOBUF_FIELD_OFFSET(CommentStorageArchive, creation_date_)>(
          reinterpret_cast<char*>(&creation_date_),
          reinterpret_cast<char*>(&other->creation_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommentStorageArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[59]);
}

// ===================================================================

class ReplaceAnnotationAuthorCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ReplaceAnnotationAuthorCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ReplaceAnnotationAuthorCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& old_annotation_author(const ReplaceAnnotationAuthorCommandArchive* msg);
  static void set_has_old_annotation_author(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& new_annotation_author(const ReplaceAnnotationAuthorCommandArchive* msg);
  static void set_has_new_annotation_author(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ReplaceAnnotationAuthorCommandArchive::_Internal::super(const ReplaceAnnotationAuthorCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
ReplaceAnnotationAuthorCommandArchive::_Internal::old_annotation_author(const ReplaceAnnotationAuthorCommandArchive* msg) {
  return *msg->old_annotation_author_;
}
const ::TSP::Reference&
ReplaceAnnotationAuthorCommandArchive::_Internal::new_annotation_author(const ReplaceAnnotationAuthorCommandArchive* msg) {
  return *msg->new_annotation_author_;
}
void ReplaceAnnotationAuthorCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ReplaceAnnotationAuthorCommandArchive::clear_old_annotation_author() {
  if (old_annotation_author_ != nullptr) old_annotation_author_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ReplaceAnnotationAuthorCommandArchive::clear_new_annotation_author() {
  if (new_annotation_author_ != nullptr) new_annotation_author_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ReplaceAnnotationAuthorCommandArchive::ReplaceAnnotationAuthorCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.ReplaceAnnotationAuthorCommandArchive)
}
ReplaceAnnotationAuthorCommandArchive::ReplaceAnnotationAuthorCommandArchive(const ReplaceAnnotationAuthorCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_old_annotation_author()) {
    old_annotation_author_ = new ::TSP::Reference(*from.old_annotation_author_);
  } else {
    old_annotation_author_ = nullptr;
  }
  if (from._internal_has_new_annotation_author()) {
    new_annotation_author_ = new ::TSP::Reference(*from.new_annotation_author_);
  } else {
    new_annotation_author_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ReplaceAnnotationAuthorCommandArchive)
}

void ReplaceAnnotationAuthorCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_annotation_author_) -
    reinterpret_cast<char*>(&super_)) + sizeof(new_annotation_author_));
}

ReplaceAnnotationAuthorCommandArchive::~ReplaceAnnotationAuthorCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ReplaceAnnotationAuthorCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplaceAnnotationAuthorCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete old_annotation_author_;
  if (this != internal_default_instance()) delete new_annotation_author_;
}

void ReplaceAnnotationAuthorCommandArchive::ArenaDtor(void* object) {
  ReplaceAnnotationAuthorCommandArchive* _this = reinterpret_cast< ReplaceAnnotationAuthorCommandArchive* >(object);
  (void)_this;
}
void ReplaceAnnotationAuthorCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplaceAnnotationAuthorCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReplaceAnnotationAuthorCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ReplaceAnnotationAuthorCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(old_annotation_author_ != nullptr);
      old_annotation_author_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(new_annotation_author_ != nullptr);
      new_annotation_author_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplaceAnnotationAuthorCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference old_annotation_author = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_annotation_author(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference new_annotation_author = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_annotation_author(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplaceAnnotationAuthorCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ReplaceAnnotationAuthorCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference old_annotation_author = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::old_annotation_author(this), target, stream);
  }

  // optional .TSP.Reference new_annotation_author = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::new_annotation_author(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ReplaceAnnotationAuthorCommandArchive)
  return target;
}

size_t ReplaceAnnotationAuthorCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ReplaceAnnotationAuthorCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference old_annotation_author = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_annotation_author_);
    }

    // optional .TSP.Reference new_annotation_author = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_annotation_author_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplaceAnnotationAuthorCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.ReplaceAnnotationAuthorCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplaceAnnotationAuthorCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplaceAnnotationAuthorCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.ReplaceAnnotationAuthorCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.ReplaceAnnotationAuthorCommandArchive)
    MergeFrom(*source);
  }
}

void ReplaceAnnotationAuthorCommandArchive::MergeFrom(const ReplaceAnnotationAuthorCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.ReplaceAnnotationAuthorCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_old_annotation_author()->::TSP::Reference::MergeFrom(from._internal_old_annotation_author());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_new_annotation_author()->::TSP::Reference::MergeFrom(from._internal_new_annotation_author());
    }
  }
}

void ReplaceAnnotationAuthorCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.ReplaceAnnotationAuthorCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceAnnotationAuthorCommandArchive::CopyFrom(const ReplaceAnnotationAuthorCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ReplaceAnnotationAuthorCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceAnnotationAuthorCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_old_annotation_author()) {
    if (!old_annotation_author_->IsInitialized()) return false;
  }
  if (_internal_has_new_annotation_author()) {
    if (!new_annotation_author_->IsInitialized()) return false;
  }
  return true;
}

void ReplaceAnnotationAuthorCommandArchive::InternalSwap(ReplaceAnnotationAuthorCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplaceAnnotationAuthorCommandArchive, new_annotation_author_)
      + sizeof(ReplaceAnnotationAuthorCommandArchive::new_annotation_author_)
      - PROTOBUF_FIELD_OFFSET(ReplaceAnnotationAuthorCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplaceAnnotationAuthorCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[60]);
}

// ===================================================================

class PencilAnnotationArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PencilAnnotationArchive>()._has_bits_);
  static const ::TSP::Reference& pencil_annotation_storage(const PencilAnnotationArchive* msg);
  static void set_has_pencil_annotation_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
PencilAnnotationArchive::_Internal::pencil_annotation_storage(const PencilAnnotationArchive* msg) {
  return *msg->pencil_annotation_storage_;
}
void PencilAnnotationArchive::clear_pencil_annotation_storage() {
  if (pencil_annotation_storage_ != nullptr) pencil_annotation_storage_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PencilAnnotationArchive::PencilAnnotationArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.PencilAnnotationArchive)
}
PencilAnnotationArchive::PencilAnnotationArchive(const PencilAnnotationArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pencil_annotation_storage()) {
    pencil_annotation_storage_ = new ::TSP::Reference(*from.pencil_annotation_storage_);
  } else {
    pencil_annotation_storage_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.PencilAnnotationArchive)
}

void PencilAnnotationArchive::SharedCtor() {
pencil_annotation_storage_ = nullptr;
}

PencilAnnotationArchive::~PencilAnnotationArchive() {
  // @@protoc_insertion_point(destructor:TSD.PencilAnnotationArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PencilAnnotationArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pencil_annotation_storage_;
}

void PencilAnnotationArchive::ArenaDtor(void* object) {
  PencilAnnotationArchive* _this = reinterpret_cast< PencilAnnotationArchive* >(object);
  (void)_this;
}
void PencilAnnotationArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PencilAnnotationArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PencilAnnotationArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.PencilAnnotationArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pencil_annotation_storage_ != nullptr);
    pencil_annotation_storage_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PencilAnnotationArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference pencil_annotation_storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pencil_annotation_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PencilAnnotationArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.PencilAnnotationArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference pencil_annotation_storage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pencil_annotation_storage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.PencilAnnotationArchive)
  return target;
}

size_t PencilAnnotationArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.PencilAnnotationArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference pencil_annotation_storage = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pencil_annotation_storage_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PencilAnnotationArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.PencilAnnotationArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PencilAnnotationArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PencilAnnotationArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.PencilAnnotationArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.PencilAnnotationArchive)
    MergeFrom(*source);
  }
}

void PencilAnnotationArchive::MergeFrom(const PencilAnnotationArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.PencilAnnotationArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pencil_annotation_storage()) {
    _internal_mutable_pencil_annotation_storage()->::TSP::Reference::MergeFrom(from._internal_pencil_annotation_storage());
  }
}

void PencilAnnotationArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.PencilAnnotationArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PencilAnnotationArchive::CopyFrom(const PencilAnnotationArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.PencilAnnotationArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PencilAnnotationArchive::IsInitialized() const {
  if (_internal_has_pencil_annotation_storage()) {
    if (!pencil_annotation_storage_->IsInitialized()) return false;
  }
  return true;
}

void PencilAnnotationArchive::InternalSwap(PencilAnnotationArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pencil_annotation_storage_, other->pencil_annotation_storage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PencilAnnotationArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[61]);
}

// ===================================================================

class PencilAnnotationSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PencilAnnotationSelectionArchive>()._has_bits_);
  static const ::TSP::Reference& pencil_annotation(const PencilAnnotationSelectionArchive* msg);
  static void set_has_pencil_annotation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
PencilAnnotationSelectionArchive::_Internal::pencil_annotation(const PencilAnnotationSelectionArchive* msg) {
  return *msg->pencil_annotation_;
}
void PencilAnnotationSelectionArchive::clear_pencil_annotation() {
  if (pencil_annotation_ != nullptr) pencil_annotation_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PencilAnnotationSelectionArchive::PencilAnnotationSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.PencilAnnotationSelectionArchive)
}
PencilAnnotationSelectionArchive::PencilAnnotationSelectionArchive(const PencilAnnotationSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pencil_annotation()) {
    pencil_annotation_ = new ::TSP::Reference(*from.pencil_annotation_);
  } else {
    pencil_annotation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.PencilAnnotationSelectionArchive)
}

void PencilAnnotationSelectionArchive::SharedCtor() {
pencil_annotation_ = nullptr;
}

PencilAnnotationSelectionArchive::~PencilAnnotationSelectionArchive() {
  // @@protoc_insertion_point(destructor:TSD.PencilAnnotationSelectionArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PencilAnnotationSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pencil_annotation_;
}

void PencilAnnotationSelectionArchive::ArenaDtor(void* object) {
  PencilAnnotationSelectionArchive* _this = reinterpret_cast< PencilAnnotationSelectionArchive* >(object);
  (void)_this;
}
void PencilAnnotationSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PencilAnnotationSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PencilAnnotationSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.PencilAnnotationSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pencil_annotation_ != nullptr);
    pencil_annotation_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PencilAnnotationSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference pencil_annotation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pencil_annotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PencilAnnotationSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.PencilAnnotationSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference pencil_annotation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pencil_annotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.PencilAnnotationSelectionArchive)
  return target;
}

size_t PencilAnnotationSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.PencilAnnotationSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference pencil_annotation = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pencil_annotation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PencilAnnotationSelectionArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.PencilAnnotationSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PencilAnnotationSelectionArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PencilAnnotationSelectionArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.PencilAnnotationSelectionArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.PencilAnnotationSelectionArchive)
    MergeFrom(*source);
  }
}

void PencilAnnotationSelectionArchive::MergeFrom(const PencilAnnotationSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.PencilAnnotationSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pencil_annotation()) {
    _internal_mutable_pencil_annotation()->::TSP::Reference::MergeFrom(from._internal_pencil_annotation());
  }
}

void PencilAnnotationSelectionArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.PencilAnnotationSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PencilAnnotationSelectionArchive::CopyFrom(const PencilAnnotationSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.PencilAnnotationSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PencilAnnotationSelectionArchive::IsInitialized() const {
  if (_internal_has_pencil_annotation()) {
    if (!pencil_annotation_->IsInitialized()) return false;
  }
  return true;
}

void PencilAnnotationSelectionArchive::InternalSwap(PencilAnnotationSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pencil_annotation_, other->pencil_annotation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PencilAnnotationSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[62]);
}

// ===================================================================

class PencilAnnotationStorageArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PencilAnnotationStorageArchive>()._has_bits_);
  static void set_has_attached_location(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Point& markup_offset(const PencilAnnotationStorageArchive* msg);
  static void set_has_markup_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::DataReference& rasterized_image(const PencilAnnotationStorageArchive* msg);
  static void set_has_rasterized_image(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::DataReference& legacy_encoded_drawing(const PencilAnnotationStorageArchive* msg);
  static void set_has_legacy_encoded_drawing(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Path& drawing_path(const PencilAnnotationStorageArchive* msg);
  static void set_has_drawing_path(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Point& strokes_bounding_box_origin(const PencilAnnotationStorageArchive* msg);
  static void set_has_strokes_bounding_box_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Size& strokes_bounding_box_size(const PencilAnnotationStorageArchive* msg);
  static void set_has_strokes_bounding_box_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_attached_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::Size& original_attached_size(const PencilAnnotationStorageArchive* msg);
  static void set_has_original_attached_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_percent_of_pa_contained_in_parent_rep(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_text_baselines_touched_count(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_visible_strokes_count(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSP::Color& pen_color(const PencilAnnotationStorageArchive* msg);
  static void set_has_pen_color(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tool_type(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSP::Date& creation_date(const PencilAnnotationStorageArchive* msg);
  static void set_has_creation_date(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_pencil_annotation_drawing_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_compound_annotation_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSP::DataReference& encoded_drawing(const PencilAnnotationStorageArchive* msg);
  static void set_has_encoded_drawing(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Point& stroke_points_frame_origin(const PencilAnnotationStorageArchive* msg);
  static void set_has_stroke_points_frame_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::Size& stroke_points_frame_size(const PencilAnnotationStorageArchive* msg);
  static void set_has_stroke_points_frame_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::Point& rendered_frame_origin(const PencilAnnotationStorageArchive* msg);
  static void set_has_rendered_frame_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSP::Size& rendered_frame_size(const PencilAnnotationStorageArchive* msg);
  static void set_has_rendered_frame_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::TSP::Point&
PencilAnnotationStorageArchive::_Internal::markup_offset(const PencilAnnotationStorageArchive* msg) {
  return *msg->markup_offset_;
}
const ::TSP::DataReference&
PencilAnnotationStorageArchive::_Internal::rasterized_image(const PencilAnnotationStorageArchive* msg) {
  return *msg->rasterized_image_;
}
const ::TSP::DataReference&
PencilAnnotationStorageArchive::_Internal::legacy_encoded_drawing(const PencilAnnotationStorageArchive* msg) {
  return *msg->legacy_encoded_drawing_;
}
const ::TSP::Path&
PencilAnnotationStorageArchive::_Internal::drawing_path(const PencilAnnotationStorageArchive* msg) {
  return *msg->drawing_path_;
}
const ::TSP::Point&
PencilAnnotationStorageArchive::_Internal::strokes_bounding_box_origin(const PencilAnnotationStorageArchive* msg) {
  return *msg->strokes_bounding_box_origin_;
}
const ::TSP::Size&
PencilAnnotationStorageArchive::_Internal::strokes_bounding_box_size(const PencilAnnotationStorageArchive* msg) {
  return *msg->strokes_bounding_box_size_;
}
const ::TSP::Size&
PencilAnnotationStorageArchive::_Internal::original_attached_size(const PencilAnnotationStorageArchive* msg) {
  return *msg->original_attached_size_;
}
const ::TSP::Color&
PencilAnnotationStorageArchive::_Internal::pen_color(const PencilAnnotationStorageArchive* msg) {
  return *msg->pen_color_;
}
const ::TSP::Date&
PencilAnnotationStorageArchive::_Internal::creation_date(const PencilAnnotationStorageArchive* msg) {
  return *msg->creation_date_;
}
const ::TSP::DataReference&
PencilAnnotationStorageArchive::_Internal::encoded_drawing(const PencilAnnotationStorageArchive* msg) {
  return *msg->encoded_drawing_;
}
const ::TSP::Point&
PencilAnnotationStorageArchive::_Internal::stroke_points_frame_origin(const PencilAnnotationStorageArchive* msg) {
  return *msg->stroke_points_frame_origin_;
}
const ::TSP::Size&
PencilAnnotationStorageArchive::_Internal::stroke_points_frame_size(const PencilAnnotationStorageArchive* msg) {
  return *msg->stroke_points_frame_size_;
}
const ::TSP::Point&
PencilAnnotationStorageArchive::_Internal::rendered_frame_origin(const PencilAnnotationStorageArchive* msg) {
  return *msg->rendered_frame_origin_;
}
const ::TSP::Size&
PencilAnnotationStorageArchive::_Internal::rendered_frame_size(const PencilAnnotationStorageArchive* msg) {
  return *msg->rendered_frame_size_;
}
void PencilAnnotationStorageArchive::clear_markup_offset() {
  if (markup_offset_ != nullptr) markup_offset_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PencilAnnotationStorageArchive::clear_rasterized_image() {
  if (rasterized_image_ != nullptr) rasterized_image_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PencilAnnotationStorageArchive::clear_legacy_encoded_drawing() {
  if (legacy_encoded_drawing_ != nullptr) legacy_encoded_drawing_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void PencilAnnotationStorageArchive::clear_drawing_path() {
  if (drawing_path_ != nullptr) drawing_path_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void PencilAnnotationStorageArchive::clear_strokes_bounding_box_origin() {
  if (strokes_bounding_box_origin_ != nullptr) strokes_bounding_box_origin_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void PencilAnnotationStorageArchive::clear_strokes_bounding_box_size() {
  if (strokes_bounding_box_size_ != nullptr) strokes_bounding_box_size_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void PencilAnnotationStorageArchive::clear_original_attached_size() {
  if (original_attached_size_ != nullptr) original_attached_size_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void PencilAnnotationStorageArchive::clear_pen_color() {
  if (pen_color_ != nullptr) pen_color_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void PencilAnnotationStorageArchive::clear_callout_sub_storages() {
  callout_sub_storages_.Clear();
}
void PencilAnnotationStorageArchive::clear_creation_date() {
  if (creation_date_ != nullptr) creation_date_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void PencilAnnotationStorageArchive::clear_sub_storages() {
  sub_storages_.Clear();
}
void PencilAnnotationStorageArchive::clear_encoded_drawing() {
  if (encoded_drawing_ != nullptr) encoded_drawing_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void PencilAnnotationStorageArchive::clear_stroke_points_frame_origin() {
  if (stroke_points_frame_origin_ != nullptr) stroke_points_frame_origin_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void PencilAnnotationStorageArchive::clear_stroke_points_frame_size() {
  if (stroke_points_frame_size_ != nullptr) stroke_points_frame_size_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void PencilAnnotationStorageArchive::clear_rendered_frame_origin() {
  if (rendered_frame_origin_ != nullptr) rendered_frame_origin_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void PencilAnnotationStorageArchive::clear_rendered_frame_size() {
  if (rendered_frame_size_ != nullptr) rendered_frame_size_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
PencilAnnotationStorageArchive::PencilAnnotationStorageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  callout_sub_storages_(arena),
  sub_storages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.PencilAnnotationStorageArchive)
}
PencilAnnotationStorageArchive::PencilAnnotationStorageArchive(const PencilAnnotationStorageArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      callout_sub_storages_(from.callout_sub_storages_),
      sub_storages_(from.sub_storages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_markup_offset()) {
    markup_offset_ = new ::TSP::Point(*from.markup_offset_);
  } else {
    markup_offset_ = nullptr;
  }
  if (from._internal_has_rasterized_image()) {
    rasterized_image_ = new ::TSP::DataReference(*from.rasterized_image_);
  } else {
    rasterized_image_ = nullptr;
  }
  if (from._internal_has_legacy_encoded_drawing()) {
    legacy_encoded_drawing_ = new ::TSP::DataReference(*from.legacy_encoded_drawing_);
  } else {
    legacy_encoded_drawing_ = nullptr;
  }
  if (from._internal_has_drawing_path()) {
    drawing_path_ = new ::TSP::Path(*from.drawing_path_);
  } else {
    drawing_path_ = nullptr;
  }
  if (from._internal_has_strokes_bounding_box_origin()) {
    strokes_bounding_box_origin_ = new ::TSP::Point(*from.strokes_bounding_box_origin_);
  } else {
    strokes_bounding_box_origin_ = nullptr;
  }
  if (from._internal_has_strokes_bounding_box_size()) {
    strokes_bounding_box_size_ = new ::TSP::Size(*from.strokes_bounding_box_size_);
  } else {
    strokes_bounding_box_size_ = nullptr;
  }
  if (from._internal_has_original_attached_size()) {
    original_attached_size_ = new ::TSP::Size(*from.original_attached_size_);
  } else {
    original_attached_size_ = nullptr;
  }
  if (from._internal_has_pen_color()) {
    pen_color_ = new ::TSP::Color(*from.pen_color_);
  } else {
    pen_color_ = nullptr;
  }
  if (from._internal_has_creation_date()) {
    creation_date_ = new ::TSP::Date(*from.creation_date_);
  } else {
    creation_date_ = nullptr;
  }
  if (from._internal_has_encoded_drawing()) {
    encoded_drawing_ = new ::TSP::DataReference(*from.encoded_drawing_);
  } else {
    encoded_drawing_ = nullptr;
  }
  if (from._internal_has_stroke_points_frame_origin()) {
    stroke_points_frame_origin_ = new ::TSP::Point(*from.stroke_points_frame_origin_);
  } else {
    stroke_points_frame_origin_ = nullptr;
  }
  if (from._internal_has_stroke_points_frame_size()) {
    stroke_points_frame_size_ = new ::TSP::Size(*from.stroke_points_frame_size_);
  } else {
    stroke_points_frame_size_ = nullptr;
  }
  if (from._internal_has_rendered_frame_origin()) {
    rendered_frame_origin_ = new ::TSP::Point(*from.rendered_frame_origin_);
  } else {
    rendered_frame_origin_ = nullptr;
  }
  if (from._internal_has_rendered_frame_size()) {
    rendered_frame_size_ = new ::TSP::Size(*from.rendered_frame_size_);
  } else {
    rendered_frame_size_ = nullptr;
  }
  ::memcpy(&attached_location_, &from.attached_location_,
    static_cast<size_t>(reinterpret_cast<char*>(&pencil_annotation_drawing_scale_) -
    reinterpret_cast<char*>(&attached_location_)) + sizeof(pencil_annotation_drawing_scale_));
  // @@protoc_insertion_point(copy_constructor:TSD.PencilAnnotationStorageArchive)
}

void PencilAnnotationStorageArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&markup_offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pencil_annotation_drawing_scale_) -
    reinterpret_cast<char*>(&markup_offset_)) + sizeof(pencil_annotation_drawing_scale_));
}

PencilAnnotationStorageArchive::~PencilAnnotationStorageArchive() {
  // @@protoc_insertion_point(destructor:TSD.PencilAnnotationStorageArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PencilAnnotationStorageArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete markup_offset_;
  if (this != internal_default_instance()) delete rasterized_image_;
  if (this != internal_default_instance()) delete legacy_encoded_drawing_;
  if (this != internal_default_instance()) delete drawing_path_;
  if (this != internal_default_instance()) delete strokes_bounding_box_origin_;
  if (this != internal_default_instance()) delete strokes_bounding_box_size_;
  if (this != internal_default_instance()) delete original_attached_size_;
  if (this != internal_default_instance()) delete pen_color_;
  if (this != internal_default_instance()) delete creation_date_;
  if (this != internal_default_instance()) delete encoded_drawing_;
  if (this != internal_default_instance()) delete stroke_points_frame_origin_;
  if (this != internal_default_instance()) delete stroke_points_frame_size_;
  if (this != internal_default_instance()) delete rendered_frame_origin_;
  if (this != internal_default_instance()) delete rendered_frame_size_;
}

void PencilAnnotationStorageArchive::ArenaDtor(void* object) {
  PencilAnnotationStorageArchive* _this = reinterpret_cast< PencilAnnotationStorageArchive* >(object);
  (void)_this;
}
void PencilAnnotationStorageArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PencilAnnotationStorageArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PencilAnnotationStorageArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.PencilAnnotationStorageArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  callout_sub_storages_.Clear();
  sub_storages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(markup_offset_ != nullptr);
      markup_offset_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rasterized_image_ != nullptr);
      rasterized_image_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(legacy_encoded_drawing_ != nullptr);
      legacy_encoded_drawing_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(drawing_path_ != nullptr);
      drawing_path_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(strokes_bounding_box_origin_ != nullptr);
      strokes_bounding_box_origin_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(strokes_bounding_box_size_ != nullptr);
      strokes_bounding_box_size_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(original_attached_size_ != nullptr);
      original_attached_size_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(pen_color_ != nullptr);
      pen_color_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(creation_date_ != nullptr);
      creation_date_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(encoded_drawing_ != nullptr);
      encoded_drawing_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(stroke_points_frame_origin_ != nullptr);
      stroke_points_frame_origin_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(stroke_points_frame_size_ != nullptr);
      stroke_points_frame_size_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(rendered_frame_origin_ != nullptr);
      rendered_frame_origin_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(rendered_frame_size_ != nullptr);
      rendered_frame_size_->Clear();
    }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&attached_location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&attached_type_) -
        reinterpret_cast<char*>(&attached_location_)) + sizeof(attached_type_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&percent_of_pa_contained_in_parent_rep_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pencil_annotation_drawing_scale_) -
        reinterpret_cast<char*>(&percent_of_pa_contained_in_parent_rep_)) + sizeof(pencil_annotation_drawing_scale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PencilAnnotationStorageArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 attached_location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_attached_location(&has_bits);
          attached_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point markup_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_markup_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference rasterized_image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rasterized_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference legacy_encoded_drawing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_legacy_encoded_drawing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Path drawing_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawing_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point strokes_bounding_box_origin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_strokes_bounding_box_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size strokes_bounding_box_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_strokes_bounding_box_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 attached_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_attached_type(&has_bits);
          attached_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size original_attached_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_attached_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double percent_of_pa_contained_in_parent_rep = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_percent_of_pa_contained_in_parent_rep(&has_bits);
          percent_of_pa_contained_in_parent_rep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 text_baselines_touched_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_text_baselines_touched_count(&has_bits);
          text_baselines_touched_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 visible_strokes_count = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_visible_strokes_count(&has_bits);
          visible_strokes_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color pen_color = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_pen_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tool_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tool_type(&has_bits);
          tool_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference callout_sub_storages = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_callout_sub_storages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Date creation_date = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_creation_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double pencil_annotation_drawing_scale = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_pencil_annotation_drawing_scale(&has_bits);
          pencil_annotation_drawing_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 compound_annotation_type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_compound_annotation_type(&has_bits);
          compound_annotation_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference sub_storages = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sub_storages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference encoded_drawing = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_encoded_drawing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point stroke_points_frame_origin = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke_points_frame_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size stroke_points_frame_size = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke_points_frame_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Point rendered_frame_origin = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_rendered_frame_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size rendered_frame_size = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_rendered_frame_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PencilAnnotationStorageArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.PencilAnnotationStorageArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 attached_location = 1;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_attached_location(), target);
  }

  // optional .TSP.Point markup_offset = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::markup_offset(this), target, stream);
  }

  // optional .TSP.DataReference rasterized_image = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rasterized_image(this), target, stream);
  }

  // optional .TSP.DataReference legacy_encoded_drawing = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::legacy_encoded_drawing(this), target, stream);
  }

  // optional .TSP.Path drawing_path = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::drawing_path(this), target, stream);
  }

  // optional .TSP.Point strokes_bounding_box_origin = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::strokes_bounding_box_origin(this), target, stream);
  }

  // optional .TSP.Size strokes_bounding_box_size = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::strokes_bounding_box_size(this), target, stream);
  }

  // optional int32 attached_type = 8;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_attached_type(), target);
  }

  // optional .TSP.Size original_attached_size = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::original_attached_size(this), target, stream);
  }

  // optional double percent_of_pa_contained_in_parent_rep = 10;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_percent_of_pa_contained_in_parent_rep(), target);
  }

  // optional uint64 text_baselines_touched_count = 11;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_text_baselines_touched_count(), target);
  }

  // optional uint64 visible_strokes_count = 12;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_visible_strokes_count(), target);
  }

  // optional .TSP.Color pen_color = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::pen_color(this), target, stream);
  }

  // optional int32 tool_type = 14;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_tool_type(), target);
  }

  // repeated .TSP.Reference callout_sub_storages = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_callout_sub_storages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_callout_sub_storages(i), target, stream);
  }

  // optional .TSP.Date creation_date = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::creation_date(this), target, stream);
  }

  // optional double pencil_annotation_drawing_scale = 17;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_pencil_annotation_drawing_scale(), target);
  }

  // optional int32 compound_annotation_type = 18;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_compound_annotation_type(), target);
  }

  // repeated .TSP.Reference sub_storages = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sub_storages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_sub_storages(i), target, stream);
  }

  // optional .TSP.DataReference encoded_drawing = 20;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::encoded_drawing(this), target, stream);
  }

  // optional .TSP.Point stroke_points_frame_origin = 21;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::stroke_points_frame_origin(this), target, stream);
  }

  // optional .TSP.Size stroke_points_frame_size = 22;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::stroke_points_frame_size(this), target, stream);
  }

  // optional .TSP.Point rendered_frame_origin = 23;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::rendered_frame_origin(this), target, stream);
  }

  // optional .TSP.Size rendered_frame_size = 24;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::rendered_frame_size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.PencilAnnotationStorageArchive)
  return target;
}

size_t PencilAnnotationStorageArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.PencilAnnotationStorageArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference callout_sub_storages = 15;
  total_size += 1UL * this->_internal_callout_sub_storages_size();
  for (const auto& msg : this->callout_sub_storages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference sub_storages = 19;
  total_size += 2UL * this->_internal_sub_storages_size();
  for (const auto& msg : this->sub_storages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Point markup_offset = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *markup_offset_);
    }

    // optional .TSP.DataReference rasterized_image = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rasterized_image_);
    }

    // optional .TSP.DataReference legacy_encoded_drawing = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *legacy_encoded_drawing_);
    }

    // optional .TSP.Path drawing_path = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawing_path_);
    }

    // optional .TSP.Point strokes_bounding_box_origin = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *strokes_bounding_box_origin_);
    }

    // optional .TSP.Size strokes_bounding_box_size = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *strokes_bounding_box_size_);
    }

    // optional .TSP.Size original_attached_size = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *original_attached_size_);
    }

    // optional .TSP.Color pen_color = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pen_color_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.Date creation_date = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *creation_date_);
    }

    // optional .TSP.DataReference encoded_drawing = 20;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *encoded_drawing_);
    }

    // optional .TSP.Point stroke_points_frame_origin = 21;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stroke_points_frame_origin_);
    }

    // optional .TSP.Size stroke_points_frame_size = 22;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stroke_points_frame_size_);
    }

    // optional .TSP.Point rendered_frame_origin = 23;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rendered_frame_origin_);
    }

    // optional .TSP.Size rendered_frame_size = 24;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rendered_frame_size_);
    }

    // optional int32 attached_location = 1;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_attached_location());
    }

    // optional int32 attached_type = 8;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_attached_type());
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional double percent_of_pa_contained_in_parent_rep = 10;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional uint64 text_baselines_touched_count = 11;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_text_baselines_touched_count());
    }

    // optional uint64 visible_strokes_count = 12;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_visible_strokes_count());
    }

    // optional int32 tool_type = 14;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tool_type());
    }

    // optional int32 compound_annotation_type = 18;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_compound_annotation_type());
    }

    // optional double pencil_annotation_drawing_scale = 17;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PencilAnnotationStorageArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.PencilAnnotationStorageArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PencilAnnotationStorageArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PencilAnnotationStorageArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.PencilAnnotationStorageArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.PencilAnnotationStorageArchive)
    MergeFrom(*source);
  }
}

void PencilAnnotationStorageArchive::MergeFrom(const PencilAnnotationStorageArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.PencilAnnotationStorageArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  callout_sub_storages_.MergeFrom(from.callout_sub_storages_);
  sub_storages_.MergeFrom(from.sub_storages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_markup_offset()->::TSP::Point::MergeFrom(from._internal_markup_offset());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rasterized_image()->::TSP::DataReference::MergeFrom(from._internal_rasterized_image());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_legacy_encoded_drawing()->::TSP::DataReference::MergeFrom(from._internal_legacy_encoded_drawing());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_drawing_path()->::TSP::Path::MergeFrom(from._internal_drawing_path());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_strokes_bounding_box_origin()->::TSP::Point::MergeFrom(from._internal_strokes_bounding_box_origin());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_strokes_bounding_box_size()->::TSP::Size::MergeFrom(from._internal_strokes_bounding_box_size());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_original_attached_size()->::TSP::Size::MergeFrom(from._internal_original_attached_size());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_pen_color()->::TSP::Color::MergeFrom(from._internal_pen_color());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_creation_date()->::TSP::Date::MergeFrom(from._internal_creation_date());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_encoded_drawing()->::TSP::DataReference::MergeFrom(from._internal_encoded_drawing());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_stroke_points_frame_origin()->::TSP::Point::MergeFrom(from._internal_stroke_points_frame_origin());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_stroke_points_frame_size()->::TSP::Size::MergeFrom(from._internal_stroke_points_frame_size());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_rendered_frame_origin()->::TSP::Point::MergeFrom(from._internal_rendered_frame_origin());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_rendered_frame_size()->::TSP::Size::MergeFrom(from._internal_rendered_frame_size());
    }
    if (cached_has_bits & 0x00004000u) {
      attached_location_ = from.attached_location_;
    }
    if (cached_has_bits & 0x00008000u) {
      attached_type_ = from.attached_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      percent_of_pa_contained_in_parent_rep_ = from.percent_of_pa_contained_in_parent_rep_;
    }
    if (cached_has_bits & 0x00020000u) {
      text_baselines_touched_count_ = from.text_baselines_touched_count_;
    }
    if (cached_has_bits & 0x00040000u) {
      visible_strokes_count_ = from.visible_strokes_count_;
    }
    if (cached_has_bits & 0x00080000u) {
      tool_type_ = from.tool_type_;
    }
    if (cached_has_bits & 0x00100000u) {
      compound_annotation_type_ = from.compound_annotation_type_;
    }
    if (cached_has_bits & 0x00200000u) {
      pencil_annotation_drawing_scale_ = from.pencil_annotation_drawing_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PencilAnnotationStorageArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.PencilAnnotationStorageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PencilAnnotationStorageArchive::CopyFrom(const PencilAnnotationStorageArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.PencilAnnotationStorageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PencilAnnotationStorageArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(callout_sub_storages_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sub_storages_)) return false;
  if (_internal_has_markup_offset()) {
    if (!markup_offset_->IsInitialized()) return false;
  }
  if (_internal_has_rasterized_image()) {
    if (!rasterized_image_->IsInitialized()) return false;
  }
  if (_internal_has_legacy_encoded_drawing()) {
    if (!legacy_encoded_drawing_->IsInitialized()) return false;
  }
  if (_internal_has_drawing_path()) {
    if (!drawing_path_->IsInitialized()) return false;
  }
  if (_internal_has_strokes_bounding_box_origin()) {
    if (!strokes_bounding_box_origin_->IsInitialized()) return false;
  }
  if (_internal_has_strokes_bounding_box_size()) {
    if (!strokes_bounding_box_size_->IsInitialized()) return false;
  }
  if (_internal_has_original_attached_size()) {
    if (!original_attached_size_->IsInitialized()) return false;
  }
  if (_internal_has_pen_color()) {
    if (!pen_color_->IsInitialized()) return false;
  }
  if (_internal_has_creation_date()) {
    if (!creation_date_->IsInitialized()) return false;
  }
  if (_internal_has_encoded_drawing()) {
    if (!encoded_drawing_->IsInitialized()) return false;
  }
  if (_internal_has_stroke_points_frame_origin()) {
    if (!stroke_points_frame_origin_->IsInitialized()) return false;
  }
  if (_internal_has_stroke_points_frame_size()) {
    if (!stroke_points_frame_size_->IsInitialized()) return false;
  }
  if (_internal_has_rendered_frame_origin()) {
    if (!rendered_frame_origin_->IsInitialized()) return false;
  }
  if (_internal_has_rendered_frame_size()) {
    if (!rendered_frame_size_->IsInitialized()) return false;
  }
  return true;
}

void PencilAnnotationStorageArchive::InternalSwap(PencilAnnotationStorageArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  callout_sub_storages_.InternalSwap(&other->callout_sub_storages_);
  sub_storages_.InternalSwap(&other->sub_storages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PencilAnnotationStorageArchive, pencil_annotation_drawing_scale_)
      + sizeof(PencilAnnotationStorageArchive::pencil_annotation_drawing_scale_)
      - PROTOBUF_FIELD_OFFSET(PencilAnnotationStorageArchive, markup_offset_)>(
          reinterpret_cast<char*>(&markup_offset_),
          reinterpret_cast<char*>(&other->markup_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PencilAnnotationStorageArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[63]);
}

// ===================================================================

class SpecColorFillSetColorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecColorFillSetColorArchive>()._has_bits_);
  static const ::TSP::Color& color(const SpecColorFillSetColorArchive* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Color&
SpecColorFillSetColorArchive::_Internal::color(const SpecColorFillSetColorArchive* msg) {
  return *msg->color_;
}
void SpecColorFillSetColorArchive::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SpecColorFillSetColorArchive::SpecColorFillSetColorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.SpecColorFillSetColorArchive)
}
SpecColorFillSetColorArchive::SpecColorFillSetColorArchive(const SpecColorFillSetColorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::TSP::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.SpecColorFillSetColorArchive)
}

void SpecColorFillSetColorArchive::SharedCtor() {
color_ = nullptr;
}

SpecColorFillSetColorArchive::~SpecColorFillSetColorArchive() {
  // @@protoc_insertion_point(destructor:TSD.SpecColorFillSetColorArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecColorFillSetColorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete color_;
}

void SpecColorFillSetColorArchive::ArenaDtor(void* object) {
  SpecColorFillSetColorArchive* _this = reinterpret_cast< SpecColorFillSetColorArchive* >(object);
  (void)_this;
}
void SpecColorFillSetColorArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecColorFillSetColorArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecColorFillSetColorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.SpecColorFillSetColorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(color_ != nullptr);
    color_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecColorFillSetColorArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecColorFillSetColorArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.SpecColorFillSetColorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.SpecColorFillSetColorArchive)
  return target;
}

size_t SpecColorFillSetColorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.SpecColorFillSetColorArchive)
  size_t total_size = 0;

  // required .TSP.Color color = 1;
  if (_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecColorFillSetColorArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.SpecColorFillSetColorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecColorFillSetColorArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecColorFillSetColorArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.SpecColorFillSetColorArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.SpecColorFillSetColorArchive)
    MergeFrom(*source);
  }
}

void SpecColorFillSetColorArchive::MergeFrom(const SpecColorFillSetColorArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.SpecColorFillSetColorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_color()) {
    _internal_mutable_color()->::TSP::Color::MergeFrom(from._internal_color());
  }
}

void SpecColorFillSetColorArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.SpecColorFillSetColorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecColorFillSetColorArchive::CopyFrom(const SpecColorFillSetColorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.SpecColorFillSetColorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecColorFillSetColorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_color()) {
    if (!color_->IsInitialized()) return false;
  }
  return true;
}

void SpecColorFillSetColorArchive::InternalSwap(SpecColorFillSetColorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(color_, other->color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecColorFillSetColorArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[64]);
}

// ===================================================================

class SpecFrameSetAssetScaleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecFrameSetAssetScaleArchive>()._has_bits_);
  static void set_has_asset_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SpecFrameSetAssetScaleArchive::SpecFrameSetAssetScaleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.SpecFrameSetAssetScaleArchive)
}
SpecFrameSetAssetScaleArchive::SpecFrameSetAssetScaleArchive(const SpecFrameSetAssetScaleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_scale_ = from.asset_scale_;
  // @@protoc_insertion_point(copy_constructor:TSD.SpecFrameSetAssetScaleArchive)
}

void SpecFrameSetAssetScaleArchive::SharedCtor() {
asset_scale_ = 0;
}

SpecFrameSetAssetScaleArchive::~SpecFrameSetAssetScaleArchive() {
  // @@protoc_insertion_point(destructor:TSD.SpecFrameSetAssetScaleArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecFrameSetAssetScaleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpecFrameSetAssetScaleArchive::ArenaDtor(void* object) {
  SpecFrameSetAssetScaleArchive* _this = reinterpret_cast< SpecFrameSetAssetScaleArchive* >(object);
  (void)_this;
}
void SpecFrameSetAssetScaleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecFrameSetAssetScaleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecFrameSetAssetScaleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.SpecFrameSetAssetScaleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_scale_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecFrameSetAssetScaleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double asset_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_asset_scale(&has_bits);
          asset_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecFrameSetAssetScaleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.SpecFrameSetAssetScaleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double asset_scale = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_asset_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.SpecFrameSetAssetScaleArchive)
  return target;
}

size_t SpecFrameSetAssetScaleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.SpecFrameSetAssetScaleArchive)
  size_t total_size = 0;

  // required double asset_scale = 1;
  if (_internal_has_asset_scale()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecFrameSetAssetScaleArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.SpecFrameSetAssetScaleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecFrameSetAssetScaleArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecFrameSetAssetScaleArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.SpecFrameSetAssetScaleArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.SpecFrameSetAssetScaleArchive)
    MergeFrom(*source);
  }
}

void SpecFrameSetAssetScaleArchive::MergeFrom(const SpecFrameSetAssetScaleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.SpecFrameSetAssetScaleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_asset_scale()) {
    _internal_set_asset_scale(from._internal_asset_scale());
  }
}

void SpecFrameSetAssetScaleArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.SpecFrameSetAssetScaleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecFrameSetAssetScaleArchive::CopyFrom(const SpecFrameSetAssetScaleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.SpecFrameSetAssetScaleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecFrameSetAssetScaleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SpecFrameSetAssetScaleArchive::InternalSwap(SpecFrameSetAssetScaleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(asset_scale_, other->asset_scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecFrameSetAssetScaleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[65]);
}

// ===================================================================

class SpecGradientFillSetAngleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecGradientFillSetAngleArchive>()._has_bits_);
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SpecGradientFillSetAngleArchive::SpecGradientFillSetAngleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.SpecGradientFillSetAngleArchive)
}
SpecGradientFillSetAngleArchive::SpecGradientFillSetAngleArchive(const SpecGradientFillSetAngleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  angle_ = from.angle_;
  // @@protoc_insertion_point(copy_constructor:TSD.SpecGradientFillSetAngleArchive)
}

void SpecGradientFillSetAngleArchive::SharedCtor() {
angle_ = 0;
}

SpecGradientFillSetAngleArchive::~SpecGradientFillSetAngleArchive() {
  // @@protoc_insertion_point(destructor:TSD.SpecGradientFillSetAngleArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecGradientFillSetAngleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpecGradientFillSetAngleArchive::ArenaDtor(void* object) {
  SpecGradientFillSetAngleArchive* _this = reinterpret_cast< SpecGradientFillSetAngleArchive* >(object);
  (void)_this;
}
void SpecGradientFillSetAngleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecGradientFillSetAngleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecGradientFillSetAngleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.SpecGradientFillSetAngleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  angle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecGradientFillSetAngleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecGradientFillSetAngleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.SpecGradientFillSetAngleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.SpecGradientFillSetAngleArchive)
  return target;
}

size_t SpecGradientFillSetAngleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.SpecGradientFillSetAngleArchive)
  size_t total_size = 0;

  // required double angle = 1;
  if (_internal_has_angle()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecGradientFillSetAngleArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.SpecGradientFillSetAngleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecGradientFillSetAngleArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecGradientFillSetAngleArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.SpecGradientFillSetAngleArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.SpecGradientFillSetAngleArchive)
    MergeFrom(*source);
  }
}

void SpecGradientFillSetAngleArchive::MergeFrom(const SpecGradientFillSetAngleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.SpecGradientFillSetAngleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_angle()) {
    _internal_set_angle(from._internal_angle());
  }
}

void SpecGradientFillSetAngleArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.SpecGradientFillSetAngleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecGradientFillSetAngleArchive::CopyFrom(const SpecGradientFillSetAngleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.SpecGradientFillSetAngleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecGradientFillSetAngleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SpecGradientFillSetAngleArchive::InternalSwap(SpecGradientFillSetAngleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(angle_, other->angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecGradientFillSetAngleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[66]);
}

// ===================================================================

class SpecImageFillSetTechniqueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecImageFillSetTechniqueArchive>()._has_bits_);
  static void set_has_technique(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SpecImageFillSetTechniqueArchive::SpecImageFillSetTechniqueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.SpecImageFillSetTechniqueArchive)
}
SpecImageFillSetTechniqueArchive::SpecImageFillSetTechniqueArchive(const SpecImageFillSetTechniqueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  technique_ = from.technique_;
  // @@protoc_insertion_point(copy_constructor:TSD.SpecImageFillSetTechniqueArchive)
}

void SpecImageFillSetTechniqueArchive::SharedCtor() {
technique_ = 0;
}

SpecImageFillSetTechniqueArchive::~SpecImageFillSetTechniqueArchive() {
  // @@protoc_insertion_point(destructor:TSD.SpecImageFillSetTechniqueArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecImageFillSetTechniqueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpecImageFillSetTechniqueArchive::ArenaDtor(void* object) {
  SpecImageFillSetTechniqueArchive* _this = reinterpret_cast< SpecImageFillSetTechniqueArchive* >(object);
  (void)_this;
}
void SpecImageFillSetTechniqueArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecImageFillSetTechniqueArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecImageFillSetTechniqueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.SpecImageFillSetTechniqueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  technique_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecImageFillSetTechniqueArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 technique = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_technique(&has_bits);
          technique_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecImageFillSetTechniqueArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.SpecImageFillSetTechniqueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 technique = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_technique(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.SpecImageFillSetTechniqueArchive)
  return target;
}

size_t SpecImageFillSetTechniqueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.SpecImageFillSetTechniqueArchive)
  size_t total_size = 0;

  // required int32 technique = 1;
  if (_internal_has_technique()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_technique());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecImageFillSetTechniqueArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.SpecImageFillSetTechniqueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecImageFillSetTechniqueArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecImageFillSetTechniqueArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.SpecImageFillSetTechniqueArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.SpecImageFillSetTechniqueArchive)
    MergeFrom(*source);
  }
}

void SpecImageFillSetTechniqueArchive::MergeFrom(const SpecImageFillSetTechniqueArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.SpecImageFillSetTechniqueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_technique()) {
    _internal_set_technique(from._internal_technique());
  }
}

void SpecImageFillSetTechniqueArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.SpecImageFillSetTechniqueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecImageFillSetTechniqueArchive::CopyFrom(const SpecImageFillSetTechniqueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.SpecImageFillSetTechniqueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecImageFillSetTechniqueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SpecImageFillSetTechniqueArchive::InternalSwap(SpecImageFillSetTechniqueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(technique_, other->technique_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecImageFillSetTechniqueArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[67]);
}

// ===================================================================

class SpecReflectionSetOpacityArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecReflectionSetOpacityArchive>()._has_bits_);
  static void set_has_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SpecReflectionSetOpacityArchive::SpecReflectionSetOpacityArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.SpecReflectionSetOpacityArchive)
}
SpecReflectionSetOpacityArchive::SpecReflectionSetOpacityArchive(const SpecReflectionSetOpacityArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opacity_ = from.opacity_;
  // @@protoc_insertion_point(copy_constructor:TSD.SpecReflectionSetOpacityArchive)
}

void SpecReflectionSetOpacityArchive::SharedCtor() {
opacity_ = 0;
}

SpecReflectionSetOpacityArchive::~SpecReflectionSetOpacityArchive() {
  // @@protoc_insertion_point(destructor:TSD.SpecReflectionSetOpacityArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecReflectionSetOpacityArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpecReflectionSetOpacityArchive::ArenaDtor(void* object) {
  SpecReflectionSetOpacityArchive* _this = reinterpret_cast< SpecReflectionSetOpacityArchive* >(object);
  (void)_this;
}
void SpecReflectionSetOpacityArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecReflectionSetOpacityArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecReflectionSetOpacityArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.SpecReflectionSetOpacityArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opacity_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecReflectionSetOpacityArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double opacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_opacity(&has_bits);
          opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecReflectionSetOpacityArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.SpecReflectionSetOpacityArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double opacity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_opacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.SpecReflectionSetOpacityArchive)
  return target;
}

size_t SpecReflectionSetOpacityArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.SpecReflectionSetOpacityArchive)
  size_t total_size = 0;

  // required double opacity = 1;
  if (_internal_has_opacity()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecReflectionSetOpacityArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.SpecReflectionSetOpacityArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecReflectionSetOpacityArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecReflectionSetOpacityArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.SpecReflectionSetOpacityArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.SpecReflectionSetOpacityArchive)
    MergeFrom(*source);
  }
}

void SpecReflectionSetOpacityArchive::MergeFrom(const SpecReflectionSetOpacityArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.SpecReflectionSetOpacityArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_opacity()) {
    _internal_set_opacity(from._internal_opacity());
  }
}

void SpecReflectionSetOpacityArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.SpecReflectionSetOpacityArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecReflectionSetOpacityArchive::CopyFrom(const SpecReflectionSetOpacityArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.SpecReflectionSetOpacityArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecReflectionSetOpacityArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SpecReflectionSetOpacityArchive::InternalSwap(SpecReflectionSetOpacityArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(opacity_, other->opacity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecReflectionSetOpacityArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[68]);
}

// ===================================================================

class SpecShadowSetAngleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecShadowSetAngleArchive>()._has_bits_);
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SpecShadowSetAngleArchive::SpecShadowSetAngleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.SpecShadowSetAngleArchive)
}
SpecShadowSetAngleArchive::SpecShadowSetAngleArchive(const SpecShadowSetAngleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  angle_ = from.angle_;
  // @@protoc_insertion_point(copy_constructor:TSD.SpecShadowSetAngleArchive)
}

void SpecShadowSetAngleArchive::SharedCtor() {
angle_ = 0;
}

SpecShadowSetAngleArchive::~SpecShadowSetAngleArchive() {
  // @@protoc_insertion_point(destructor:TSD.SpecShadowSetAngleArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecShadowSetAngleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpecShadowSetAngleArchive::ArenaDtor(void* object) {
  SpecShadowSetAngleArchive* _this = reinterpret_cast< SpecShadowSetAngleArchive* >(object);
  (void)_this;
}
void SpecShadowSetAngleArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecShadowSetAngleArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecShadowSetAngleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.SpecShadowSetAngleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  angle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecShadowSetAngleArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecShadowSetAngleArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.SpecShadowSetAngleArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.SpecShadowSetAngleArchive)
  return target;
}

size_t SpecShadowSetAngleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.SpecShadowSetAngleArchive)
  size_t total_size = 0;

  // required double angle = 1;
  if (_internal_has_angle()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecShadowSetAngleArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.SpecShadowSetAngleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecShadowSetAngleArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecShadowSetAngleArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.SpecShadowSetAngleArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.SpecShadowSetAngleArchive)
    MergeFrom(*source);
  }
}

void SpecShadowSetAngleArchive::MergeFrom(const SpecShadowSetAngleArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.SpecShadowSetAngleArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_angle()) {
    _internal_set_angle(from._internal_angle());
  }
}

void SpecShadowSetAngleArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.SpecShadowSetAngleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecShadowSetAngleArchive::CopyFrom(const SpecShadowSetAngleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.SpecShadowSetAngleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecShadowSetAngleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SpecShadowSetAngleArchive::InternalSwap(SpecShadowSetAngleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(angle_, other->angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecShadowSetAngleArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[69]);
}

// ===================================================================

class SpecShadowSetColorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecShadowSetColorArchive>()._has_bits_);
  static const ::TSP::Color& color(const SpecShadowSetColorArchive* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Color&
SpecShadowSetColorArchive::_Internal::color(const SpecShadowSetColorArchive* msg) {
  return *msg->color_;
}
void SpecShadowSetColorArchive::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SpecShadowSetColorArchive::SpecShadowSetColorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.SpecShadowSetColorArchive)
}
SpecShadowSetColorArchive::SpecShadowSetColorArchive(const SpecShadowSetColorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::TSP::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.SpecShadowSetColorArchive)
}

void SpecShadowSetColorArchive::SharedCtor() {
color_ = nullptr;
}

SpecShadowSetColorArchive::~SpecShadowSetColorArchive() {
  // @@protoc_insertion_point(destructor:TSD.SpecShadowSetColorArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecShadowSetColorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete color_;
}

void SpecShadowSetColorArchive::ArenaDtor(void* object) {
  SpecShadowSetColorArchive* _this = reinterpret_cast< SpecShadowSetColorArchive* >(object);
  (void)_this;
}
void SpecShadowSetColorArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecShadowSetColorArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecShadowSetColorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.SpecShadowSetColorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(color_ != nullptr);
    color_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecShadowSetColorArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecShadowSetColorArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.SpecShadowSetColorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.SpecShadowSetColorArchive)
  return target;
}

size_t SpecShadowSetColorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.SpecShadowSetColorArchive)
  size_t total_size = 0;

  // required .TSP.Color color = 1;
  if (_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecShadowSetColorArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.SpecShadowSetColorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecShadowSetColorArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecShadowSetColorArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.SpecShadowSetColorArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.SpecShadowSetColorArchive)
    MergeFrom(*source);
  }
}

void SpecShadowSetColorArchive::MergeFrom(const SpecShadowSetColorArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.SpecShadowSetColorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_color()) {
    _internal_mutable_color()->::TSP::Color::MergeFrom(from._internal_color());
  }
}

void SpecShadowSetColorArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.SpecShadowSetColorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecShadowSetColorArchive::CopyFrom(const SpecShadowSetColorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.SpecShadowSetColorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecShadowSetColorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_color()) {
    if (!color_->IsInitialized()) return false;
  }
  return true;
}

void SpecShadowSetColorArchive::InternalSwap(SpecShadowSetColorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(color_, other->color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecShadowSetColorArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[70]);
}

// ===================================================================

class SpecShadowSetOffsetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecShadowSetOffsetArchive>()._has_bits_);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SpecShadowSetOffsetArchive::SpecShadowSetOffsetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.SpecShadowSetOffsetArchive)
}
SpecShadowSetOffsetArchive::SpecShadowSetOffsetArchive(const SpecShadowSetOffsetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:TSD.SpecShadowSetOffsetArchive)
}

void SpecShadowSetOffsetArchive::SharedCtor() {
offset_ = 0;
}

SpecShadowSetOffsetArchive::~SpecShadowSetOffsetArchive() {
  // @@protoc_insertion_point(destructor:TSD.SpecShadowSetOffsetArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecShadowSetOffsetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpecShadowSetOffsetArchive::ArenaDtor(void* object) {
  SpecShadowSetOffsetArchive* _this = reinterpret_cast< SpecShadowSetOffsetArchive* >(object);
  (void)_this;
}
void SpecShadowSetOffsetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecShadowSetOffsetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecShadowSetOffsetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.SpecShadowSetOffsetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offset_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecShadowSetOffsetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecShadowSetOffsetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.SpecShadowSetOffsetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double offset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.SpecShadowSetOffsetArchive)
  return target;
}

size_t SpecShadowSetOffsetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.SpecShadowSetOffsetArchive)
  size_t total_size = 0;

  // required double offset = 1;
  if (_internal_has_offset()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecShadowSetOffsetArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.SpecShadowSetOffsetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecShadowSetOffsetArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecShadowSetOffsetArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.SpecShadowSetOffsetArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.SpecShadowSetOffsetArchive)
    MergeFrom(*source);
  }
}

void SpecShadowSetOffsetArchive::MergeFrom(const SpecShadowSetOffsetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.SpecShadowSetOffsetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_offset()) {
    _internal_set_offset(from._internal_offset());
  }
}

void SpecShadowSetOffsetArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.SpecShadowSetOffsetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecShadowSetOffsetArchive::CopyFrom(const SpecShadowSetOffsetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.SpecShadowSetOffsetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecShadowSetOffsetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SpecShadowSetOffsetArchive::InternalSwap(SpecShadowSetOffsetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecShadowSetOffsetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[71]);
}

// ===================================================================

class SpecShadowSetOpacityArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecShadowSetOpacityArchive>()._has_bits_);
  static void set_has_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SpecShadowSetOpacityArchive::SpecShadowSetOpacityArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.SpecShadowSetOpacityArchive)
}
SpecShadowSetOpacityArchive::SpecShadowSetOpacityArchive(const SpecShadowSetOpacityArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opacity_ = from.opacity_;
  // @@protoc_insertion_point(copy_constructor:TSD.SpecShadowSetOpacityArchive)
}

void SpecShadowSetOpacityArchive::SharedCtor() {
opacity_ = 0;
}

SpecShadowSetOpacityArchive::~SpecShadowSetOpacityArchive() {
  // @@protoc_insertion_point(destructor:TSD.SpecShadowSetOpacityArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecShadowSetOpacityArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpecShadowSetOpacityArchive::ArenaDtor(void* object) {
  SpecShadowSetOpacityArchive* _this = reinterpret_cast< SpecShadowSetOpacityArchive* >(object);
  (void)_this;
}
void SpecShadowSetOpacityArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecShadowSetOpacityArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecShadowSetOpacityArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.SpecShadowSetOpacityArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opacity_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecShadowSetOpacityArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double opacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_opacity(&has_bits);
          opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecShadowSetOpacityArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.SpecShadowSetOpacityArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double opacity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_opacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.SpecShadowSetOpacityArchive)
  return target;
}

size_t SpecShadowSetOpacityArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.SpecShadowSetOpacityArchive)
  size_t total_size = 0;

  // required double opacity = 1;
  if (_internal_has_opacity()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecShadowSetOpacityArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.SpecShadowSetOpacityArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecShadowSetOpacityArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecShadowSetOpacityArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.SpecShadowSetOpacityArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.SpecShadowSetOpacityArchive)
    MergeFrom(*source);
  }
}

void SpecShadowSetOpacityArchive::MergeFrom(const SpecShadowSetOpacityArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.SpecShadowSetOpacityArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_opacity()) {
    _internal_set_opacity(from._internal_opacity());
  }
}

void SpecShadowSetOpacityArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.SpecShadowSetOpacityArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecShadowSetOpacityArchive::CopyFrom(const SpecShadowSetOpacityArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.SpecShadowSetOpacityArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecShadowSetOpacityArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SpecShadowSetOpacityArchive::InternalSwap(SpecShadowSetOpacityArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(opacity_, other->opacity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecShadowSetOpacityArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[72]);
}

// ===================================================================

class SpecShadowSetRadiusArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecShadowSetRadiusArchive>()._has_bits_);
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SpecShadowSetRadiusArchive::SpecShadowSetRadiusArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.SpecShadowSetRadiusArchive)
}
SpecShadowSetRadiusArchive::SpecShadowSetRadiusArchive(const SpecShadowSetRadiusArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:TSD.SpecShadowSetRadiusArchive)
}

void SpecShadowSetRadiusArchive::SharedCtor() {
radius_ = 0;
}

SpecShadowSetRadiusArchive::~SpecShadowSetRadiusArchive() {
  // @@protoc_insertion_point(destructor:TSD.SpecShadowSetRadiusArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecShadowSetRadiusArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpecShadowSetRadiusArchive::ArenaDtor(void* object) {
  SpecShadowSetRadiusArchive* _this = reinterpret_cast< SpecShadowSetRadiusArchive* >(object);
  (void)_this;
}
void SpecShadowSetRadiusArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecShadowSetRadiusArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecShadowSetRadiusArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.SpecShadowSetRadiusArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  radius_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecShadowSetRadiusArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 radius = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecShadowSetRadiusArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.SpecShadowSetRadiusArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 radius = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.SpecShadowSetRadiusArchive)
  return target;
}

size_t SpecShadowSetRadiusArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.SpecShadowSetRadiusArchive)
  size_t total_size = 0;

  // required int32 radius = 1;
  if (_internal_has_radius()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_radius());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecShadowSetRadiusArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.SpecShadowSetRadiusArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecShadowSetRadiusArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecShadowSetRadiusArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.SpecShadowSetRadiusArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.SpecShadowSetRadiusArchive)
    MergeFrom(*source);
  }
}

void SpecShadowSetRadiusArchive::MergeFrom(const SpecShadowSetRadiusArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.SpecShadowSetRadiusArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_radius()) {
    _internal_set_radius(from._internal_radius());
  }
}

void SpecShadowSetRadiusArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.SpecShadowSetRadiusArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecShadowSetRadiusArchive::CopyFrom(const SpecShadowSetRadiusArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.SpecShadowSetRadiusArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecShadowSetRadiusArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SpecShadowSetRadiusArchive::InternalSwap(SpecShadowSetRadiusArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(radius_, other->radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecShadowSetRadiusArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[73]);
}

// ===================================================================

class SpecStrokeSetColorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecStrokeSetColorArchive>()._has_bits_);
  static const ::TSP::Color& color(const SpecStrokeSetColorArchive* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Color&
SpecStrokeSetColorArchive::_Internal::color(const SpecStrokeSetColorArchive* msg) {
  return *msg->color_;
}
void SpecStrokeSetColorArchive::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SpecStrokeSetColorArchive::SpecStrokeSetColorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.SpecStrokeSetColorArchive)
}
SpecStrokeSetColorArchive::SpecStrokeSetColorArchive(const SpecStrokeSetColorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::TSP::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSD.SpecStrokeSetColorArchive)
}

void SpecStrokeSetColorArchive::SharedCtor() {
color_ = nullptr;
}

SpecStrokeSetColorArchive::~SpecStrokeSetColorArchive() {
  // @@protoc_insertion_point(destructor:TSD.SpecStrokeSetColorArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecStrokeSetColorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete color_;
}

void SpecStrokeSetColorArchive::ArenaDtor(void* object) {
  SpecStrokeSetColorArchive* _this = reinterpret_cast< SpecStrokeSetColorArchive* >(object);
  (void)_this;
}
void SpecStrokeSetColorArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecStrokeSetColorArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecStrokeSetColorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.SpecStrokeSetColorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(color_ != nullptr);
    color_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecStrokeSetColorArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecStrokeSetColorArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.SpecStrokeSetColorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.SpecStrokeSetColorArchive)
  return target;
}

size_t SpecStrokeSetColorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.SpecStrokeSetColorArchive)
  size_t total_size = 0;

  // required .TSP.Color color = 1;
  if (_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecStrokeSetColorArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.SpecStrokeSetColorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecStrokeSetColorArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecStrokeSetColorArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.SpecStrokeSetColorArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.SpecStrokeSetColorArchive)
    MergeFrom(*source);
  }
}

void SpecStrokeSetColorArchive::MergeFrom(const SpecStrokeSetColorArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.SpecStrokeSetColorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_color()) {
    _internal_mutable_color()->::TSP::Color::MergeFrom(from._internal_color());
  }
}

void SpecStrokeSetColorArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.SpecStrokeSetColorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecStrokeSetColorArchive::CopyFrom(const SpecStrokeSetColorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.SpecStrokeSetColorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecStrokeSetColorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_color()) {
    if (!color_->IsInitialized()) return false;
  }
  return true;
}

void SpecStrokeSetColorArchive::InternalSwap(SpecStrokeSetColorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(color_, other->color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecStrokeSetColorArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[74]);
}

// ===================================================================

class SpecStrokeSetPatternArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecStrokeSetPatternArchive>()._has_bits_);
  static void set_has_line_cap(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_line_join(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_miter_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Color& color(const SpecStrokeSetPatternArchive* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::StrokePatternArchive& pattern(const SpecStrokeSetPatternArchive* msg);
  static void set_has_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::Color&
SpecStrokeSetPatternArchive::_Internal::color(const SpecStrokeSetPatternArchive* msg) {
  return *msg->color_;
}
const ::TSD::StrokePatternArchive&
SpecStrokeSetPatternArchive::_Internal::pattern(const SpecStrokeSetPatternArchive* msg) {
  return *msg->pattern_;
}
void SpecStrokeSetPatternArchive::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SpecStrokeSetPatternArchive::SpecStrokeSetPatternArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.SpecStrokeSetPatternArchive)
}
SpecStrokeSetPatternArchive::SpecStrokeSetPatternArchive(const SpecStrokeSetPatternArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::TSP::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  if (from._internal_has_pattern()) {
    pattern_ = new ::TSD::StrokePatternArchive(*from.pattern_);
  } else {
    pattern_ = nullptr;
  }
  ::memcpy(&line_cap_, &from.line_cap_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&line_cap_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:TSD.SpecStrokeSetPatternArchive)
}

void SpecStrokeSetPatternArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&color_)) + sizeof(width_));
}

SpecStrokeSetPatternArchive::~SpecStrokeSetPatternArchive() {
  // @@protoc_insertion_point(destructor:TSD.SpecStrokeSetPatternArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecStrokeSetPatternArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete color_;
  if (this != internal_default_instance()) delete pattern_;
}

void SpecStrokeSetPatternArchive::ArenaDtor(void* object) {
  SpecStrokeSetPatternArchive* _this = reinterpret_cast< SpecStrokeSetPatternArchive* >(object);
  (void)_this;
}
void SpecStrokeSetPatternArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecStrokeSetPatternArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecStrokeSetPatternArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.SpecStrokeSetPatternArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(color_ != nullptr);
      color_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pattern_ != nullptr);
      pattern_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&line_cap_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&line_cap_)) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecStrokeSetPatternArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 line_cap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_line_cap(&has_bits);
          line_cap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 line_join = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_line_join(&has_bits);
          line_join_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double miter_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_miter_limit(&has_bits);
          miter_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSD.StrokePatternArchive pattern = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pattern(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecStrokeSetPatternArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.SpecStrokeSetPatternArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 line_cap = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_line_cap(), target);
  }

  // optional int32 line_join = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_line_join(), target);
  }

  // optional double miter_limit = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_miter_limit(), target);
  }

  // optional double width = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_width(), target);
  }

  // optional .TSP.Color color = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::color(this), target, stream);
  }

  // required .TSD.StrokePatternArchive pattern = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pattern(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.SpecStrokeSetPatternArchive)
  return target;
}

size_t SpecStrokeSetPatternArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.SpecStrokeSetPatternArchive)
  size_t total_size = 0;

  // required .TSD.StrokePatternArchive pattern = 6;
  if (_internal_has_pattern()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pattern_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Color color = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  if (cached_has_bits & 0x0000003cu) {
    // optional int32 line_cap = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_line_cap());
    }

    // optional int32 line_join = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_line_join());
    }

    // optional double miter_limit = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double width = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecStrokeSetPatternArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.SpecStrokeSetPatternArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecStrokeSetPatternArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecStrokeSetPatternArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.SpecStrokeSetPatternArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.SpecStrokeSetPatternArchive)
    MergeFrom(*source);
  }
}

void SpecStrokeSetPatternArchive::MergeFrom(const SpecStrokeSetPatternArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.SpecStrokeSetPatternArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_color()->::TSP::Color::MergeFrom(from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pattern()->::TSD::StrokePatternArchive::MergeFrom(from._internal_pattern());
    }
    if (cached_has_bits & 0x00000004u) {
      line_cap_ = from.line_cap_;
    }
    if (cached_has_bits & 0x00000008u) {
      line_join_ = from.line_join_;
    }
    if (cached_has_bits & 0x00000010u) {
      miter_limit_ = from.miter_limit_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpecStrokeSetPatternArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.SpecStrokeSetPatternArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecStrokeSetPatternArchive::CopyFrom(const SpecStrokeSetPatternArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.SpecStrokeSetPatternArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecStrokeSetPatternArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_color()) {
    if (!color_->IsInitialized()) return false;
  }
  return true;
}

void SpecStrokeSetPatternArchive::InternalSwap(SpecStrokeSetPatternArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecStrokeSetPatternArchive, width_)
      + sizeof(SpecStrokeSetPatternArchive::width_)
      - PROTOBUF_FIELD_OFFSET(SpecStrokeSetPatternArchive, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecStrokeSetPatternArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[75]);
}

// ===================================================================

class SpecStrokeSetWidthArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecStrokeSetWidthArchive>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SpecStrokeSetWidthArchive::SpecStrokeSetWidthArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.SpecStrokeSetWidthArchive)
}
SpecStrokeSetWidthArchive::SpecStrokeSetWidthArchive(const SpecStrokeSetWidthArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  width_ = from.width_;
  // @@protoc_insertion_point(copy_constructor:TSD.SpecStrokeSetWidthArchive)
}

void SpecStrokeSetWidthArchive::SharedCtor() {
width_ = 0;
}

SpecStrokeSetWidthArchive::~SpecStrokeSetWidthArchive() {
  // @@protoc_insertion_point(destructor:TSD.SpecStrokeSetWidthArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecStrokeSetWidthArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpecStrokeSetWidthArchive::ArenaDtor(void* object) {
  SpecStrokeSetWidthArchive* _this = reinterpret_cast< SpecStrokeSetWidthArchive* >(object);
  (void)_this;
}
void SpecStrokeSetWidthArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecStrokeSetWidthArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecStrokeSetWidthArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.SpecStrokeSetWidthArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  width_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecStrokeSetWidthArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecStrokeSetWidthArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.SpecStrokeSetWidthArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.SpecStrokeSetWidthArchive)
  return target;
}

size_t SpecStrokeSetWidthArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.SpecStrokeSetWidthArchive)
  size_t total_size = 0;

  // required double width = 1;
  if (_internal_has_width()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecStrokeSetWidthArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.SpecStrokeSetWidthArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecStrokeSetWidthArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecStrokeSetWidthArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.SpecStrokeSetWidthArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.SpecStrokeSetWidthArchive)
    MergeFrom(*source);
  }
}

void SpecStrokeSetWidthArchive::MergeFrom(const SpecStrokeSetWidthArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.SpecStrokeSetWidthArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_width()) {
    _internal_set_width(from._internal_width());
  }
}

void SpecStrokeSetWidthArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.SpecStrokeSetWidthArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecStrokeSetWidthArchive::CopyFrom(const SpecStrokeSetWidthArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.SpecStrokeSetWidthArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecStrokeSetWidthArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SpecStrokeSetWidthArchive::InternalSwap(SpecStrokeSetWidthArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(width_, other->width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecStrokeSetWidthArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[76]);
}

// ===================================================================

class Attribution::_Internal {
 public:
  using HasBits = decltype(std::declval<Attribution>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_external_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_author_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_author_url(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Attribution::Attribution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.Attribution)
}
Attribution::Attribution(const Attribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  description_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description_text()) {
    description_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description_text(), 
      GetArena());
  }
  external_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_external_url()) {
    external_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_external_url(), 
      GetArena());
  }
  author_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_author_name()) {
    author_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_author_name(), 
      GetArena());
  }
  author_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_author_url()) {
    author_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_author_url(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TSD.Attribution)
}

void Attribution::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
external_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
author_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
author_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Attribution::~Attribution() {
  // @@protoc_insertion_point(destructor:TSD.Attribution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Attribution::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  external_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  author_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  author_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Attribution::ArenaDtor(void* object) {
  Attribution* _this = reinterpret_cast< Attribution* >(object);
  (void)_this;
}
void Attribution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Attribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Attribution::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.Attribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      external_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      author_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      author_url_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attribution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.Attribution.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.Attribution.description_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string external_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_external_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.Attribution.external_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string author_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_author_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.Attribution.author_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string author_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_author_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.Attribution.author_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Attribution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.Attribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.Attribution.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional string description_text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description_text().data(), static_cast<int>(this->_internal_description_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.Attribution.description_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description_text(), target);
  }

  // optional string external_url = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_external_url().data(), static_cast<int>(this->_internal_external_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.Attribution.external_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_external_url(), target);
  }

  // optional string author_name = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_author_name().data(), static_cast<int>(this->_internal_author_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.Attribution.author_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_author_name(), target);
  }

  // optional string author_url = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_author_url().data(), static_cast<int>(this->_internal_author_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.Attribution.author_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_author_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.Attribution)
  return target;
}

size_t Attribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.Attribution)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string description_text = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description_text());
    }

    // optional string external_url = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_external_url());
    }

    // optional string author_name = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_author_name());
    }

    // optional string author_url = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_author_url());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Attribution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.Attribution)
  GOOGLE_DCHECK_NE(&from, this);
  const Attribution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Attribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.Attribution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.Attribution)
    MergeFrom(*source);
  }
}

void Attribution::MergeFrom(const Attribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.Attribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description_text(from._internal_description_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_external_url(from._internal_external_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_author_name(from._internal_author_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_author_url(from._internal_author_url());
    }
  }
}

void Attribution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.Attribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attribution::CopyFrom(const Attribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.Attribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribution::IsInitialized() const {
  return true;
}

void Attribution::InternalSwap(Attribution* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_text_.Swap(&other->description_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  external_url_.Swap(&other->external_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  author_name_.Swap(&other->author_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  author_url_.Swap(&other->author_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Attribution::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[77]);
}

// ===================================================================

class MovieFingerprint::_Internal {
 public:
};

MovieFingerprint::MovieFingerprint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tracks_(arena),
  version_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.MovieFingerprint)
}
MovieFingerprint::MovieFingerprint(const MovieFingerprint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tracks_(from.tracks_),
      version_(from.version_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSD.MovieFingerprint)
}

void MovieFingerprint::SharedCtor() {
}

MovieFingerprint::~MovieFingerprint() {
  // @@protoc_insertion_point(destructor:TSD.MovieFingerprint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MovieFingerprint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MovieFingerprint::ArenaDtor(void* object) {
  MovieFingerprint* _this = reinterpret_cast< MovieFingerprint* >(object);
  (void)_this;
}
void MovieFingerprint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MovieFingerprint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MovieFingerprint::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.MovieFingerprint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracks_.Clear();
  version_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovieFingerprint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSD.MovieFingerprintTrack tracks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tracks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 version = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MovieFingerprint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.MovieFingerprint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSD.MovieFingerprintTrack tracks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tracks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tracks(i), target, stream);
  }

  // repeated uint32 version = 2 [packed = true];
  {
    int byte_size = _version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_version(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.MovieFingerprint)
  return target;
}

size_t MovieFingerprint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.MovieFingerprint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSD.MovieFingerprintTrack tracks = 1;
  total_size += 1UL * this->_internal_tracks_size();
  for (const auto& msg : this->tracks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 version = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->version_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovieFingerprint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.MovieFingerprint)
  GOOGLE_DCHECK_NE(&from, this);
  const MovieFingerprint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MovieFingerprint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.MovieFingerprint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.MovieFingerprint)
    MergeFrom(*source);
  }
}

void MovieFingerprint::MergeFrom(const MovieFingerprint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.MovieFingerprint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tracks_.MergeFrom(from.tracks_);
  version_.MergeFrom(from.version_);
}

void MovieFingerprint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.MovieFingerprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovieFingerprint::CopyFrom(const MovieFingerprint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.MovieFingerprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieFingerprint::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tracks_)) return false;
  return true;
}

void MovieFingerprint::InternalSwap(MovieFingerprint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tracks_.InternalSwap(&other->tracks_);
  version_.InternalSwap(&other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MovieFingerprint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[78]);
}

// ===================================================================

class MovieFingerprintTrack::_Internal {
 public:
  using HasBits = decltype(std::declval<MovieFingerprintTrack>()._has_bits_);
  static void set_has_media_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_total_sample_data_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sample_data_digest_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_range_start_value(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_time_range_start_timescale(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_time_range_start_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_time_range_duration_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_time_range_duration_timescale(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_time_range_duration_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::Size& natural_size(const MovieFingerprintTrack* msg);
  static void set_has_natural_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_preferred_transform_a(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_preferred_transform_b(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_preferred_transform_c(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_preferred_transform_d(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_preferred_transform_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_preferred_transform_ty(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_preferred_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_language_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_extended_language_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSP::Size&
MovieFingerprintTrack::_Internal::natural_size(const MovieFingerprintTrack* msg) {
  return *msg->natural_size_;
}
void MovieFingerprintTrack::clear_natural_size() {
  if (natural_size_ != nullptr) natural_size_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
MovieFingerprintTrack::MovieFingerprintTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSD.MovieFingerprintTrack)
}
MovieFingerprintTrack::MovieFingerprintTrack(const MovieFingerprintTrack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  media_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_media_type()) {
    media_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_media_type(), 
      GetArena());
  }
  sample_data_digest_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sample_data_digest_string()) {
    sample_data_digest_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sample_data_digest_string(), 
      GetArena());
  }
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_code()) {
    language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language_code(), 
      GetArena());
  }
  extended_language_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_extended_language_tag()) {
    extended_language_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extended_language_tag(), 
      GetArena());
  }
  if (from._internal_has_natural_size()) {
    natural_size_ = new ::TSP::Size(*from.natural_size_);
  } else {
    natural_size_ = nullptr;
  }
  ::memcpy(&total_sample_data_length_, &from.total_sample_data_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_range_duration_timescale_) -
    reinterpret_cast<char*>(&total_sample_data_length_)) + sizeof(time_range_duration_timescale_));
  // @@protoc_insertion_point(copy_constructor:TSD.MovieFingerprintTrack)
}

void MovieFingerprintTrack::SharedCtor() {
media_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sample_data_digest_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extended_language_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&natural_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_range_duration_timescale_) -
    reinterpret_cast<char*>(&natural_size_)) + sizeof(time_range_duration_timescale_));
}

MovieFingerprintTrack::~MovieFingerprintTrack() {
  // @@protoc_insertion_point(destructor:TSD.MovieFingerprintTrack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MovieFingerprintTrack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  media_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_data_digest_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extended_language_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete natural_size_;
}

void MovieFingerprintTrack::ArenaDtor(void* object) {
  MovieFingerprintTrack* _this = reinterpret_cast< MovieFingerprintTrack* >(object);
  (void)_this;
}
void MovieFingerprintTrack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MovieFingerprintTrack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MovieFingerprintTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.MovieFingerprintTrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      media_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sample_data_digest_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      language_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      extended_language_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(natural_size_ != nullptr);
      natural_size_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&total_sample_data_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_range_start_timescale_) -
        reinterpret_cast<char*>(&total_sample_data_length_)) + sizeof(time_range_start_timescale_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preferred_transform_d_) -
        reinterpret_cast<char*>(&enabled_)) + sizeof(preferred_transform_d_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&preferred_transform_tx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_range_duration_timescale_) -
        reinterpret_cast<char*>(&preferred_transform_tx_)) + sizeof(time_range_duration_timescale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovieFingerprintTrack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string media_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_media_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.MovieFingerprintTrack.media_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_sample_data_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_total_sample_data_length(&has_bits);
          total_sample_data_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sample_data_digest_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sample_data_digest_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.MovieFingerprintTrack.sample_data_digest_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_range_start_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_time_range_start_value(&has_bits);
          time_range_start_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 time_range_start_timescale = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_time_range_start_timescale(&has_bits);
          time_range_start_timescale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool time_range_start_is_valid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_time_range_start_is_valid(&has_bits);
          time_range_start_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_range_duration_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_time_range_duration_value(&has_bits);
          time_range_duration_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 time_range_duration_timescale = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_time_range_duration_timescale(&has_bits);
          time_range_duration_timescale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool time_range_duration_is_valid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_time_range_duration_is_valid(&has_bits);
          time_range_duration_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Size natural_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_natural_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double preferred_transform_a = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_preferred_transform_a(&has_bits);
          preferred_transform_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preferred_transform_b = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_preferred_transform_b(&has_bits);
          preferred_transform_b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preferred_transform_c = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_preferred_transform_c(&has_bits);
          preferred_transform_c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preferred_transform_d = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_preferred_transform_d(&has_bits);
          preferred_transform_d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preferred_transform_tx = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_preferred_transform_tx(&has_bits);
          preferred_transform_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preferred_transform_ty = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_preferred_transform_ty(&has_bits);
          preferred_transform_ty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preferred_volume = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_preferred_volume(&has_bits);
          preferred_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string language_code = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.MovieFingerprintTrack.language_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string extended_language_tag = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_extended_language_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSD.MovieFingerprintTrack.extended_language_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MovieFingerprintTrack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.MovieFingerprintTrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string media_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_media_type().data(), static_cast<int>(this->_internal_media_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.MovieFingerprintTrack.media_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_media_type(), target);
  }

  // optional bool enabled = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  // optional int64 total_sample_data_length = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_total_sample_data_length(), target);
  }

  // optional string sample_data_digest_string = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sample_data_digest_string().data(), static_cast<int>(this->_internal_sample_data_digest_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.MovieFingerprintTrack.sample_data_digest_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sample_data_digest_string(), target);
  }

  // optional int64 time_range_start_value = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_time_range_start_value(), target);
  }

  // optional int32 time_range_start_timescale = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_time_range_start_timescale(), target);
  }

  // optional bool time_range_start_is_valid = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_time_range_start_is_valid(), target);
  }

  // optional int64 time_range_duration_value = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_time_range_duration_value(), target);
  }

  // optional int32 time_range_duration_timescale = 9;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_time_range_duration_timescale(), target);
  }

  // optional bool time_range_duration_is_valid = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_time_range_duration_is_valid(), target);
  }

  // optional .TSP.Size natural_size = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::natural_size(this), target, stream);
  }

  // optional double preferred_transform_a = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_preferred_transform_a(), target);
  }

  // optional double preferred_transform_b = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_preferred_transform_b(), target);
  }

  // optional double preferred_transform_c = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_preferred_transform_c(), target);
  }

  // optional double preferred_transform_d = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_preferred_transform_d(), target);
  }

  // optional double preferred_transform_tx = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_preferred_transform_tx(), target);
  }

  // optional double preferred_transform_ty = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_preferred_transform_ty(), target);
  }

  // optional double preferred_volume = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_preferred_volume(), target);
  }

  // optional string language_code = 19;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.MovieFingerprintTrack.language_code");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_language_code(), target);
  }

  // optional string extended_language_tag = 20;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_extended_language_tag().data(), static_cast<int>(this->_internal_extended_language_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.MovieFingerprintTrack.extended_language_tag");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_extended_language_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.MovieFingerprintTrack)
  return target;
}

size_t MovieFingerprintTrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.MovieFingerprintTrack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string media_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_media_type());
    }

    // optional string sample_data_digest_string = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sample_data_digest_string());
    }

    // optional string language_code = 19;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_code());
    }

    // optional string extended_language_tag = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_extended_language_tag());
    }

    // optional .TSP.Size natural_size = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *natural_size_);
    }

    // optional int64 total_sample_data_length = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_total_sample_data_length());
    }

    // optional int64 time_range_start_value = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_time_range_start_value());
    }

    // optional int32 time_range_start_timescale = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_time_range_start_timescale());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool enabled = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool time_range_start_is_valid = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool time_range_duration_is_valid = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional int64 time_range_duration_value = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_time_range_duration_value());
    }

    // optional double preferred_transform_a = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double preferred_transform_b = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double preferred_transform_c = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double preferred_transform_d = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional double preferred_transform_tx = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double preferred_transform_ty = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double preferred_volume = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional int32 time_range_duration_timescale = 9;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_time_range_duration_timescale());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovieFingerprintTrack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSD.MovieFingerprintTrack)
  GOOGLE_DCHECK_NE(&from, this);
  const MovieFingerprintTrack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MovieFingerprintTrack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSD.MovieFingerprintTrack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSD.MovieFingerprintTrack)
    MergeFrom(*source);
  }
}

void MovieFingerprintTrack::MergeFrom(const MovieFingerprintTrack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSD.MovieFingerprintTrack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_media_type(from._internal_media_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sample_data_digest_string(from._internal_sample_data_digest_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_language_code(from._internal_language_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_extended_language_tag(from._internal_extended_language_tag());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_natural_size()->::TSP::Size::MergeFrom(from._internal_natural_size());
    }
    if (cached_has_bits & 0x00000020u) {
      total_sample_data_length_ = from.total_sample_data_length_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_range_start_value_ = from.time_range_start_value_;
    }
    if (cached_has_bits & 0x00000080u) {
      time_range_start_timescale_ = from.time_range_start_timescale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      time_range_start_is_valid_ = from.time_range_start_is_valid_;
    }
    if (cached_has_bits & 0x00000400u) {
      time_range_duration_is_valid_ = from.time_range_duration_is_valid_;
    }
    if (cached_has_bits & 0x00000800u) {
      time_range_duration_value_ = from.time_range_duration_value_;
    }
    if (cached_has_bits & 0x00001000u) {
      preferred_transform_a_ = from.preferred_transform_a_;
    }
    if (cached_has_bits & 0x00002000u) {
      preferred_transform_b_ = from.preferred_transform_b_;
    }
    if (cached_has_bits & 0x00004000u) {
      preferred_transform_c_ = from.preferred_transform_c_;
    }
    if (cached_has_bits & 0x00008000u) {
      preferred_transform_d_ = from.preferred_transform_d_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      preferred_transform_tx_ = from.preferred_transform_tx_;
    }
    if (cached_has_bits & 0x00020000u) {
      preferred_transform_ty_ = from.preferred_transform_ty_;
    }
    if (cached_has_bits & 0x00040000u) {
      preferred_volume_ = from.preferred_volume_;
    }
    if (cached_has_bits & 0x00080000u) {
      time_range_duration_timescale_ = from.time_range_duration_timescale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MovieFingerprintTrack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSD.MovieFingerprintTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovieFingerprintTrack::CopyFrom(const MovieFingerprintTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.MovieFingerprintTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieFingerprintTrack::IsInitialized() const {
  if (_internal_has_natural_size()) {
    if (!natural_size_->IsInitialized()) return false;
  }
  return true;
}

void MovieFingerprintTrack::InternalSwap(MovieFingerprintTrack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  media_type_.Swap(&other->media_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sample_data_digest_string_.Swap(&other->sample_data_digest_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_code_.Swap(&other->language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  extended_language_tag_.Swap(&other->extended_language_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovieFingerprintTrack, time_range_duration_timescale_)
      + sizeof(MovieFingerprintTrack::time_range_duration_timescale_)
      - PROTOBUF_FIELD_OFFSET(MovieFingerprintTrack, natural_size_)>(
          reinterpret_cast<char*>(&natural_size_),
          reinterpret_cast<char*>(&other->natural_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MovieFingerprintTrack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSDArchives_2eproto_getter, &descriptor_table_TSDArchives_2eproto_once,
      file_level_metadata_TSDArchives_2eproto[79]);
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThemePresetsArchive::kExtensionFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::ThemeArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSD::ThemePresetsArchive >, 11, false >
  ThemePresetsArchive::extension(kExtensionFieldNumber, ::TSD::ThemePresetsArchive::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FreehandDrawingArchive::kFreehandDrawingArchiveFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSD::GroupArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSD::FreehandDrawingArchive >, 11, false >
  FreehandDrawingArchive::freehand_drawing_archive(kFreehandDrawingArchiveFieldNumber, ::TSD::FreehandDrawingArchive::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageDataAttributes::kImageDataAttributesFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSP::DataAttributes,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSD::ImageDataAttributes >, 11, false >
  ImageDataAttributes::image_data_attributes(kImageDataAttributesFieldNumber, ::TSD::ImageDataAttributes::default_instance());
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSD::FillArchive >, 11, false >
  fill(kFillFieldNumber, ::TSD::FillArchive::default_instance());
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSD::StrokeArchive >, 11, false >
  stroke(kStrokeFieldNumber, ::TSD::StrokeArchive::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSD
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSD::EdgeInsetsArchive* Arena::CreateMaybeMessage< ::TSD::EdgeInsetsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::EdgeInsetsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::GeometryArchive* Arena::CreateMaybeMessage< ::TSD::GeometryArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::GeometryArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::PointPathSourceArchive* Arena::CreateMaybeMessage< ::TSD::PointPathSourceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::PointPathSourceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ScalarPathSourceArchive* Arena::CreateMaybeMessage< ::TSD::ScalarPathSourceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ScalarPathSourceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::BezierPathSourceArchive* Arena::CreateMaybeMessage< ::TSD::BezierPathSourceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::BezierPathSourceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::CalloutPathSourceArchive* Arena::CreateMaybeMessage< ::TSD::CalloutPathSourceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::CalloutPathSourceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ConnectionLinePathSourceArchive* Arena::CreateMaybeMessage< ::TSD::ConnectionLinePathSourceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ConnectionLinePathSourceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::EditableBezierPathSourceArchive_Node* Arena::CreateMaybeMessage< ::TSD::EditableBezierPathSourceArchive_Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::EditableBezierPathSourceArchive_Node >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::EditableBezierPathSourceArchive_Subpath* Arena::CreateMaybeMessage< ::TSD::EditableBezierPathSourceArchive_Subpath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::EditableBezierPathSourceArchive_Subpath >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::EditableBezierPathSourceArchive* Arena::CreateMaybeMessage< ::TSD::EditableBezierPathSourceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::EditableBezierPathSourceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::PathSourceArchive* Arena::CreateMaybeMessage< ::TSD::PathSourceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::PathSourceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::AngleGradientArchive* Arena::CreateMaybeMessage< ::TSD::AngleGradientArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::AngleGradientArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::TransformGradientArchive* Arena::CreateMaybeMessage< ::TSD::TransformGradientArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::TransformGradientArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::GradientArchive_GradientStop* Arena::CreateMaybeMessage< ::TSD::GradientArchive_GradientStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::GradientArchive_GradientStop >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::GradientArchive* Arena::CreateMaybeMessage< ::TSD::GradientArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::GradientArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ImageFillArchive* Arena::CreateMaybeMessage< ::TSD::ImageFillArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ImageFillArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::FillArchive* Arena::CreateMaybeMessage< ::TSD::FillArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::FillArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::StrokePatternArchive* Arena::CreateMaybeMessage< ::TSD::StrokePatternArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::StrokePatternArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::StrokeArchive* Arena::CreateMaybeMessage< ::TSD::StrokeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::StrokeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::SmartStrokeArchive* Arena::CreateMaybeMessage< ::TSD::SmartStrokeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::SmartStrokeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::FrameArchive* Arena::CreateMaybeMessage< ::TSD::FrameArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::FrameArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::PatternedStrokeArchive* Arena::CreateMaybeMessage< ::TSD::PatternedStrokeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::PatternedStrokeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::LineEndArchive* Arena::CreateMaybeMessage< ::TSD::LineEndArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::LineEndArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ShadowArchive* Arena::CreateMaybeMessage< ::TSD::ShadowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ShadowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DropShadowArchive* Arena::CreateMaybeMessage< ::TSD::DropShadowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DropShadowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ContactShadowArchive* Arena::CreateMaybeMessage< ::TSD::ContactShadowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ContactShadowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::CurvedShadowArchive* Arena::CreateMaybeMessage< ::TSD::CurvedShadowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::CurvedShadowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ReflectionArchive* Arena::CreateMaybeMessage< ::TSD::ReflectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ReflectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ImageAdjustmentsArchive* Arena::CreateMaybeMessage< ::TSD::ImageAdjustmentsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ImageAdjustmentsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ShapeStylePropertiesArchive* Arena::CreateMaybeMessage< ::TSD::ShapeStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ShapeStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ShapeStyleArchive* Arena::CreateMaybeMessage< ::TSD::ShapeStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ShapeStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::MediaStylePropertiesArchive* Arena::CreateMaybeMessage< ::TSD::MediaStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::MediaStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::MediaStyleArchive* Arena::CreateMaybeMessage< ::TSD::MediaStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::MediaStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ThemePresetsArchive* Arena::CreateMaybeMessage< ::TSD::ThemePresetsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ThemePresetsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ThemeReplaceFillPresetCommandArchive* Arena::CreateMaybeMessage< ::TSD::ThemeReplaceFillPresetCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ThemeReplaceFillPresetCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawableArchive* Arena::CreateMaybeMessage< ::TSD::DrawableArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawableArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ContainerArchive* Arena::CreateMaybeMessage< ::TSD::ContainerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ContainerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::GroupArchive* Arena::CreateMaybeMessage< ::TSD::GroupArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::GroupArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::FreehandDrawingAnimationArchive* Arena::CreateMaybeMessage< ::TSD::FreehandDrawingAnimationArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::FreehandDrawingAnimationArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::FreehandDrawingArchive* Arena::CreateMaybeMessage< ::TSD::FreehandDrawingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::FreehandDrawingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ShapeArchive* Arena::CreateMaybeMessage< ::TSD::ShapeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ShapeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ConnectionLineArchive* Arena::CreateMaybeMessage< ::TSD::ConnectionLineArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ConnectionLineArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ImageArchive* Arena::CreateMaybeMessage< ::TSD::ImageArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ImageArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::MaskArchive* Arena::CreateMaybeMessage< ::TSD::MaskArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::MaskArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ImageDataAttributes* Arena::CreateMaybeMessage< ::TSD::ImageDataAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ImageDataAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::MovieArchive* Arena::CreateMaybeMessage< ::TSD::MovieArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::MovieArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ExteriorTextWrapArchive* Arena::CreateMaybeMessage< ::TSD::ExteriorTextWrapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ExteriorTextWrapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawableContentDescription* Arena::CreateMaybeMessage< ::TSD::DrawableContentDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawableContentDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::FreehandDrawingContentDescription* Arena::CreateMaybeMessage< ::TSD::FreehandDrawingContentDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::FreehandDrawingContentDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::FreehandDrawingToolkitUIState* Arena::CreateMaybeMessage< ::TSD::FreehandDrawingToolkitUIState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::FreehandDrawingToolkitUIState >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::StandinCaptionArchive* Arena::CreateMaybeMessage< ::TSD::StandinCaptionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::StandinCaptionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::GuideArchive* Arena::CreateMaybeMessage< ::TSD::GuideArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::GuideArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::UserDefinedGuideArchive* Arena::CreateMaybeMessage< ::TSD::UserDefinedGuideArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::UserDefinedGuideArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::GuideStorageArchive* Arena::CreateMaybeMessage< ::TSD::GuideStorageArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::GuideStorageArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::CanvasSelectionArchive* Arena::CreateMaybeMessage< ::TSD::CanvasSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::CanvasSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawableSelectionArchive* Arena::CreateMaybeMessage< ::TSD::DrawableSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawableSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::GroupSelectionArchive* Arena::CreateMaybeMessage< ::TSD::GroupSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::GroupSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::PathSelectionArchive* Arena::CreateMaybeMessage< ::TSD::PathSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::PathSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::InfoHyperlinkSelectionArchive* Arena::CreateMaybeMessage< ::TSD::InfoHyperlinkSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::InfoHyperlinkSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::CommentStorageArchive* Arena::CreateMaybeMessage< ::TSD::CommentStorageArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::CommentStorageArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ReplaceAnnotationAuthorCommandArchive* Arena::CreateMaybeMessage< ::TSD::ReplaceAnnotationAuthorCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ReplaceAnnotationAuthorCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::PencilAnnotationArchive* Arena::CreateMaybeMessage< ::TSD::PencilAnnotationArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::PencilAnnotationArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::PencilAnnotationSelectionArchive* Arena::CreateMaybeMessage< ::TSD::PencilAnnotationSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::PencilAnnotationSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::PencilAnnotationStorageArchive* Arena::CreateMaybeMessage< ::TSD::PencilAnnotationStorageArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::PencilAnnotationStorageArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::SpecColorFillSetColorArchive* Arena::CreateMaybeMessage< ::TSD::SpecColorFillSetColorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::SpecColorFillSetColorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::SpecFrameSetAssetScaleArchive* Arena::CreateMaybeMessage< ::TSD::SpecFrameSetAssetScaleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::SpecFrameSetAssetScaleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::SpecGradientFillSetAngleArchive* Arena::CreateMaybeMessage< ::TSD::SpecGradientFillSetAngleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::SpecGradientFillSetAngleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::SpecImageFillSetTechniqueArchive* Arena::CreateMaybeMessage< ::TSD::SpecImageFillSetTechniqueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::SpecImageFillSetTechniqueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::SpecReflectionSetOpacityArchive* Arena::CreateMaybeMessage< ::TSD::SpecReflectionSetOpacityArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::SpecReflectionSetOpacityArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::SpecShadowSetAngleArchive* Arena::CreateMaybeMessage< ::TSD::SpecShadowSetAngleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::SpecShadowSetAngleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::SpecShadowSetColorArchive* Arena::CreateMaybeMessage< ::TSD::SpecShadowSetColorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::SpecShadowSetColorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::SpecShadowSetOffsetArchive* Arena::CreateMaybeMessage< ::TSD::SpecShadowSetOffsetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::SpecShadowSetOffsetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::SpecShadowSetOpacityArchive* Arena::CreateMaybeMessage< ::TSD::SpecShadowSetOpacityArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::SpecShadowSetOpacityArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::SpecShadowSetRadiusArchive* Arena::CreateMaybeMessage< ::TSD::SpecShadowSetRadiusArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::SpecShadowSetRadiusArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::SpecStrokeSetColorArchive* Arena::CreateMaybeMessage< ::TSD::SpecStrokeSetColorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::SpecStrokeSetColorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::SpecStrokeSetPatternArchive* Arena::CreateMaybeMessage< ::TSD::SpecStrokeSetPatternArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::SpecStrokeSetPatternArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::SpecStrokeSetWidthArchive* Arena::CreateMaybeMessage< ::TSD::SpecStrokeSetWidthArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::SpecStrokeSetWidthArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::Attribution* Arena::CreateMaybeMessage< ::TSD::Attribution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::Attribution >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::MovieFingerprint* Arena::CreateMaybeMessage< ::TSD::MovieFingerprint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::MovieFingerprint >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::MovieFingerprintTrack* Arena::CreateMaybeMessage< ::TSD::MovieFingerprintTrack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::MovieFingerprintTrack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
